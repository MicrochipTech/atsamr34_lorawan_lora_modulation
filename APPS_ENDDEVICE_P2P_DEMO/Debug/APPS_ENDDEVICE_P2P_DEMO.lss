
APPS_ENDDEVICE_P2P_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001e4cc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001e4cc  0001e4cc  0002e4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a80  20000000  0001e4d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a80  2**0
                  CONTENTS
  4 .bss          000015e8  20000a80  0001ef58  00030a80  2**3
                  ALLOC
  5 .stack        00002000  20002068  00020540  00030a80  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008c882  00000000  00000000  00030b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d285  00000000  00000000  000bd3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019822  00000000  00000000  000ca63b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001610  00000000  00000000  000e3e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e40  00000000  00000000  000e546d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000310a9  00000000  00000000  000e72ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000330ed  00000000  00000000  00118356  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1f45  00000000  00000000  0014b443  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004f08  00000000  00000000  001fd388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 40 00 20 21 37 00 00 1d 37 00 00 1d 37 00 00     h@. !7...7...7..
	...
      2c:	1d 37 00 00 00 00 00 00 00 00 00 00 1d 37 00 00     .7...........7..
      3c:	1d 37 00 00 1d 37 00 00 1d 37 00 00 89 11 00 00     .7...7...7......
      4c:	6d 09 00 00 1d 37 00 00 1d 37 00 00 1d 37 00 00     m....7...7...7..
      5c:	1d 37 00 00 41 1f 00 00 51 1f 00 00 61 1f 00 00     .7..A...Q...a...
      6c:	71 1f 00 00 81 1f 00 00 91 1f 00 00 1d 37 00 00     q............7..
      7c:	1d 37 00 00 1d 37 00 00 d9 32 00 00 e9 32 00 00     .7...7...2...2..
      8c:	f9 32 00 00 09 33 00 00 19 33 00 00 b9 06 00 00     .2...3...3......
      9c:	1d 37 00 00 1d 37 00 00 1d 37 00 00 1d 37 00 00     .7...7...7...7..
      ac:	1d 37 00 00 00 00 00 00                             .7......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a80 	.word	0x20000a80
      d4:	00000000 	.word	0x00000000
      d8:	0001e4d4 	.word	0x0001e4d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a84 	.word	0x20000a84
     108:	0001e4d4 	.word	0x0001e4d4
     10c:	0001e4d4 	.word	0x0001e4d4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003009 	.word	0x00003009
     140:	0001270d 	.word	0x0001270d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	20000a9c 	.word	0x20000a9c
     1e4:	20000aa0 	.word	0x20000aa0
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	20000a9c 	.word	0x20000a9c
     214:	20000aa0 	.word	0x20000aa0
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2501      	movs	r5, #1
     228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     22a:	2300      	movs	r3, #0
     22c:	4698      	mov	r8, r3
     22e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     232:	0021      	movs	r1, r4
     234:	2013      	movs	r0, #19
     236:	4e12      	ldr	r6, [pc, #72]	; (280 <system_board_init+0x64>)
     238:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23a:	4f12      	ldr	r7, [pc, #72]	; (284 <system_board_init+0x68>)
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     242:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     244:	0021      	movs	r1, r4
     246:	2012      	movs	r0, #18
     248:	47b0      	blx	r6
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	02db      	lsls	r3, r3, #11
     24e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     250:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     252:	0021      	movs	r1, r4
     254:	200d      	movs	r0, #13
     256:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     258:	2380      	movs	r3, #128	; 0x80
     25a:	019b      	lsls	r3, r3, #6
     25c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     25e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	2009      	movs	r0, #9
     264:	47b0      	blx	r6
     266:	2380      	movs	r3, #128	; 0x80
     268:	009b      	lsls	r3, r3, #2
     26a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26c:	4643      	mov	r3, r8
     26e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     270:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     272:	0021      	movs	r1, r4
     274:	201c      	movs	r0, #28
     276:	47b0      	blx	r6
		
}
     278:	b002      	add	sp, #8
     27a:	bc04      	pop	{r2}
     27c:	4690      	mov	r8, r2
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	00000e7d 	.word	0x00000e7d
     284:	40002800 	.word	0x40002800

00000288 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     288:	2000      	movs	r0, #0
     28a:	4770      	bx	lr

0000028c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     28c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     28e:	2300      	movs	r3, #0
     290:	2200      	movs	r2, #0
     292:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     294:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     296:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     298:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     29a:	2100      	movs	r1, #0
     29c:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     29e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     2a0:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     2a2:	2406      	movs	r4, #6
     2a4:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     2a6:	24c0      	movs	r4, #192	; 0xc0
     2a8:	0164      	lsls	r4, r4, #5
     2aa:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     2ac:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     2ae:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     2b0:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     2b2:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     2b4:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     2b6:	242a      	movs	r4, #42	; 0x2a
     2b8:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     2ba:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     2bc:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     2be:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     2c0:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     2c2:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     2c4:	3c06      	subs	r4, #6
     2c6:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     2c8:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     2ca:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     2cc:	7541      	strb	r1, [r0, #21]
}
     2ce:	bd10      	pop	{r4, pc}

000002d0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2d2:	46ce      	mov	lr, r9
     2d4:	b500      	push	{lr}
     2d6:	b098      	sub	sp, #96	; 0x60
     2d8:	0005      	movs	r5, r0
     2da:	000c      	movs	r4, r1
     2dc:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     2de:	0008      	movs	r0, r1
     2e0:	4bb2      	ldr	r3, [pc, #712]	; (5ac <adc_init+0x2dc>)
     2e2:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     2e4:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     2e6:	4ab2      	ldr	r2, [pc, #712]	; (5b0 <adc_init+0x2e0>)
     2e8:	6a13      	ldr	r3, [r2, #32]
     2ea:	2108      	movs	r1, #8
     2ec:	430b      	orrs	r3, r1
     2ee:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2f0:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2f2:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2f4:	07d2      	lsls	r2, r2, #31
     2f6:	d504      	bpl.n	302 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     2f8:	0018      	movs	r0, r3
     2fa:	b018      	add	sp, #96	; 0x60
     2fc:	bc04      	pop	{r2}
     2fe:	4691      	mov	r9, r2
     300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     302:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     304:	8c13      	ldrh	r3, [r2, #32]
     306:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     308:	2b00      	cmp	r3, #0
     30a:	d1fb      	bne.n	304 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     30c:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     30e:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     310:	0792      	lsls	r2, r2, #30
     312:	d4f1      	bmi.n	2f8 <adc_init+0x28>
	module_inst->reference = config->reference;
     314:	7873      	ldrb	r3, [r6, #1]
     316:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     318:	2b00      	cmp	r3, #0
     31a:	d104      	bne.n	326 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     31c:	4aa5      	ldr	r2, [pc, #660]	; (5b4 <adc_init+0x2e4>)
     31e:	69d3      	ldr	r3, [r2, #28]
     320:	2104      	movs	r1, #4
     322:	430b      	orrs	r3, r1
     324:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     326:	2300      	movs	r3, #0
     328:	60ab      	str	r3, [r5, #8]
     32a:	60eb      	str	r3, [r5, #12]
     32c:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     32e:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     330:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     332:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     334:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     336:	0080      	lsls	r0, r0, #2
     338:	4b9f      	ldr	r3, [pc, #636]	; (5b8 <adc_init+0x2e8>)
     33a:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     33c:	232a      	movs	r3, #42	; 0x2a
     33e:	5cf3      	ldrb	r3, [r6, r3]
     340:	2b00      	cmp	r3, #0
     342:	d105      	bne.n	350 <adc_init+0x80>
     344:	7b33      	ldrb	r3, [r6, #12]
     346:	2b00      	cmp	r3, #0
     348:	d102      	bne.n	350 <adc_init+0x80>
		module_inst->software_trigger = true;
     34a:	3301      	adds	r3, #1
     34c:	776b      	strb	r3, [r5, #29]
     34e:	e001      	b.n	354 <adc_init+0x84>
		module_inst->software_trigger = false;
     350:	2300      	movs	r3, #0
     352:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     354:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     356:	7833      	ldrb	r3, [r6, #0]
     358:	466a      	mov	r2, sp
     35a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     35c:	4669      	mov	r1, sp
     35e:	201e      	movs	r0, #30
     360:	4b96      	ldr	r3, [pc, #600]	; (5bc <adc_init+0x2ec>)
     362:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     364:	201e      	movs	r0, #30
     366:	4b96      	ldr	r3, [pc, #600]	; (5c0 <adc_init+0x2f0>)
     368:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     36a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     36c:	2258      	movs	r2, #88	; 0x58
     36e:	4995      	ldr	r1, [pc, #596]	; (5c4 <adc_init+0x2f4>)
     370:	a802      	add	r0, sp, #8
     372:	4b95      	ldr	r3, [pc, #596]	; (5c8 <adc_init+0x2f8>)
     374:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     376:	2c13      	cmp	r4, #19
     378:	d90b      	bls.n	392 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     37a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     37c:	2258      	movs	r2, #88	; 0x58
     37e:	4991      	ldr	r1, [pc, #580]	; (5c4 <adc_init+0x2f4>)
     380:	a802      	add	r0, sp, #8
     382:	4b91      	ldr	r3, [pc, #580]	; (5c8 <adc_init+0x2f8>)
     384:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     386:	2c13      	cmp	r4, #19
     388:	d911      	bls.n	3ae <adc_init+0xde>
     38a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     38c:	4b8e      	ldr	r3, [pc, #568]	; (5c8 <adc_init+0x2f8>)
     38e:	4699      	mov	r9, r3
     390:	e01e      	b.n	3d0 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     392:	00a4      	lsls	r4, r4, #2
     394:	ab02      	add	r3, sp, #8
     396:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     398:	a901      	add	r1, sp, #4
     39a:	2300      	movs	r3, #0
     39c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     39e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3a2:	3301      	adds	r3, #1
     3a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3a6:	b2c0      	uxtb	r0, r0
     3a8:	4b88      	ldr	r3, [pc, #544]	; (5cc <adc_init+0x2fc>)
     3aa:	4798      	blx	r3
     3ac:	e7e5      	b.n	37a <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ae:	00a4      	lsls	r4, r4, #2
     3b0:	ab02      	add	r3, sp, #8
     3b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3b4:	a901      	add	r1, sp, #4
     3b6:	2300      	movs	r3, #0
     3b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3be:	3301      	adds	r3, #1
     3c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3c2:	b2c0      	uxtb	r0, r0
     3c4:	4b81      	ldr	r3, [pc, #516]	; (5cc <adc_init+0x2fc>)
     3c6:	4798      	blx	r3
     3c8:	e7df      	b.n	38a <adc_init+0xba>
     3ca:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     3cc:	2c14      	cmp	r4, #20
     3ce:	d018      	beq.n	402 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     3d0:	2301      	movs	r3, #1
     3d2:	40a3      	lsls	r3, r4
     3d4:	6932      	ldr	r2, [r6, #16]
     3d6:	421a      	tst	r2, r3
     3d8:	d0f7      	beq.n	3ca <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     3da:	2258      	movs	r2, #88	; 0x58
     3dc:	4979      	ldr	r1, [pc, #484]	; (5c4 <adc_init+0x2f4>)
     3de:	a802      	add	r0, sp, #8
     3e0:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     3e2:	2c13      	cmp	r4, #19
     3e4:	d8f1      	bhi.n	3ca <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3e6:	00a3      	lsls	r3, r4, #2
     3e8:	aa02      	add	r2, sp, #8
     3ea:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3ec:	a901      	add	r1, sp, #4
     3ee:	2300      	movs	r3, #0
     3f0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3f2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3f6:	3301      	adds	r3, #1
     3f8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3fa:	b2c0      	uxtb	r0, r0
     3fc:	4b73      	ldr	r3, [pc, #460]	; (5cc <adc_init+0x2fc>)
     3fe:	4798      	blx	r3
     400:	e7e3      	b.n	3ca <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     402:	7b73      	ldrb	r3, [r6, #13]
     404:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     406:	7bb2      	ldrb	r2, [r6, #14]
     408:	01d2      	lsls	r2, r2, #7
     40a:	4313      	orrs	r3, r2
     40c:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     40e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     410:	7d33      	ldrb	r3, [r6, #20]
     412:	01db      	lsls	r3, r3, #7
			| (config->reference);
     414:	7872      	ldrb	r2, [r6, #1]
     416:	4313      	orrs	r3, r2
     418:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     41a:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     41c:	78f3      	ldrb	r3, [r6, #3]
     41e:	2b34      	cmp	r3, #52	; 0x34
     420:	d900      	bls.n	424 <adc_init+0x154>
     422:	e140      	b.n	6a6 <adc_init+0x3d6>
     424:	009b      	lsls	r3, r3, #2
     426:	4a6a      	ldr	r2, [pc, #424]	; (5d0 <adc_init+0x300>)
     428:	58d3      	ldr	r3, [r2, r3]
     42a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     42c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     430:	2102      	movs	r1, #2
     432:	e01a      	b.n	46a <adc_init+0x19a>
		adjres = config->divide_result;
     434:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     436:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     438:	2010      	movs	r0, #16
     43a:	e016      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     43c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     43e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     440:	2101      	movs	r1, #1
     442:	e012      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     444:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     446:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     448:	2100      	movs	r1, #0
     44a:	e00e      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     44e:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     450:	2100      	movs	r1, #0
     452:	e00a      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     454:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     456:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     458:	2100      	movs	r1, #0
     45a:	e006      	b.n	46a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     45c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     45e:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     460:	2100      	movs	r1, #0
     462:	e002      	b.n	46a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     464:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     466:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     468:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     46a:	0109      	lsls	r1, r1, #4
     46c:	2370      	movs	r3, #112	; 0x70
     46e:	400b      	ands	r3, r1
     470:	4313      	orrs	r3, r2
     472:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     474:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     476:	8c13      	ldrh	r3, [r2, #32]
     478:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     47a:	2b00      	cmp	r3, #0
     47c:	d1fb      	bne.n	476 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     47e:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     480:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     482:	2a3f      	cmp	r2, #63	; 0x3f
     484:	d900      	bls.n	488 <adc_init+0x1b8>
     486:	e737      	b.n	2f8 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     488:	7bf3      	ldrb	r3, [r6, #15]
     48a:	01db      	lsls	r3, r3, #7
     48c:	431a      	orrs	r2, r3
     48e:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     490:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     492:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     494:	8c13      	ldrh	r3, [r2, #32]
     496:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     498:	2b00      	cmp	r3, #0
     49a:	d1fb      	bne.n	494 <adc_init+0x1c4>
			config->clock_prescaler;
     49c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     49e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     4a0:	2324      	movs	r3, #36	; 0x24
     4a2:	5cf3      	ldrb	r3, [r6, r3]
     4a4:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     4a6:	7b32      	ldrb	r2, [r6, #12]
     4a8:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4aa:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     4ac:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     4ae:	4313      	orrs	r3, r2
     4b0:	7ab2      	ldrb	r2, [r6, #10]
     4b2:	0052      	lsls	r2, r2, #1
     4b4:	4313      	orrs	r3, r2
     4b6:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     4b8:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     4ba:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4bc:	8c13      	ldrh	r3, [r2, #32]
     4be:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4c0:	2b00      	cmp	r3, #0
     4c2:	d1fb      	bne.n	4bc <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     4c4:	8b32      	ldrh	r2, [r6, #24]
     4c6:	2a00      	cmp	r2, #0
     4c8:	d020      	beq.n	50c <adc_init+0x23c>
		switch (resolution) {
     4ca:	2810      	cmp	r0, #16
     4cc:	d100      	bne.n	4d0 <adc_init+0x200>
     4ce:	e0c9      	b.n	664 <adc_init+0x394>
     4d0:	d800      	bhi.n	4d4 <adc_init+0x204>
     4d2:	e083      	b.n	5dc <adc_init+0x30c>
     4d4:	2820      	cmp	r0, #32
     4d6:	d100      	bne.n	4da <adc_init+0x20a>
     4d8:	e0a3      	b.n	622 <adc_init+0x352>
     4da:	2830      	cmp	r0, #48	; 0x30
     4dc:	d116      	bne.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     4de:	7af3      	ldrb	r3, [r6, #11]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d00a      	beq.n	4fa <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     4e4:	69f1      	ldr	r1, [r6, #28]
     4e6:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4e8:	2317      	movs	r3, #23
			if (config->differential_mode &&
     4ea:	29ff      	cmp	r1, #255	; 0xff
     4ec:	d900      	bls.n	4f0 <adc_init+0x220>
     4ee:	e703      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     4f0:	6a31      	ldr	r1, [r6, #32]
     4f2:	3180      	adds	r1, #128	; 0x80
     4f4:	29ff      	cmp	r1, #255	; 0xff
     4f6:	d900      	bls.n	4fa <adc_init+0x22a>
     4f8:	e6fe      	b.n	2f8 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     4fa:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     4fc:	69f1      	ldr	r1, [r6, #28]
     4fe:	29ff      	cmp	r1, #255	; 0xff
     500:	dd00      	ble.n	504 <adc_init+0x234>
     502:	e6f9      	b.n	2f8 <adc_init+0x28>
     504:	6a31      	ldr	r1, [r6, #32]
     506:	29ff      	cmp	r1, #255	; 0xff
     508:	dd00      	ble.n	50c <adc_init+0x23c>
     50a:	e6f5      	b.n	2f8 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     50c:	897b      	ldrh	r3, [r7, #10]
     50e:	431a      	orrs	r2, r3
     510:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     512:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     514:	8c13      	ldrh	r3, [r2, #32]
     516:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     518:	2b00      	cmp	r3, #0
     51a:	d1fb      	bne.n	514 <adc_init+0x244>
	adc_module->WINLT.reg =
     51c:	8bb3      	ldrh	r3, [r6, #28]
     51e:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     520:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     522:	8c13      	ldrh	r3, [r2, #32]
     524:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     526:	2b00      	cmp	r3, #0
     528:	d1fb      	bne.n	522 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     52a:	8c33      	ldrh	r3, [r6, #32]
     52c:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     52e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     530:	8c13      	ldrh	r3, [r2, #32]
     532:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     534:	2b00      	cmp	r3, #0
     536:	d1fb      	bne.n	530 <adc_init+0x260>
			config->positive_input;
     538:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     53a:	88f2      	ldrh	r2, [r6, #6]
     53c:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     53e:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     540:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     542:	8c13      	ldrh	r3, [r2, #32]
     544:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     546:	2b00      	cmp	r3, #0
     548:	d1fb      	bne.n	542 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     54a:	332a      	adds	r3, #42	; 0x2a
     54c:	5cf3      	ldrb	r3, [r6, r3]
     54e:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     550:	2307      	movs	r3, #7
     552:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     554:	331d      	adds	r3, #29
     556:	5cf3      	ldrb	r3, [r6, r3]
     558:	2b00      	cmp	r3, #0
     55a:	d01b      	beq.n	594 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     55c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     55e:	491d      	ldr	r1, [pc, #116]	; (5d4 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     560:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     562:	428a      	cmp	r2, r1
     564:	d900      	bls.n	568 <adc_init+0x298>
     566:	e6c7      	b.n	2f8 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     568:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     574:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     576:	2380      	movs	r3, #128	; 0x80
     578:	011b      	lsls	r3, r3, #4
     57a:	18ca      	adds	r2, r1, r3
     57c:	4815      	ldr	r0, [pc, #84]	; (5d4 <adc_init+0x304>)
     57e:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     580:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     582:	4282      	cmp	r2, r0
     584:	d900      	bls.n	588 <adc_init+0x2b8>
     586:	e6b7      	b.n	2f8 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     588:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     58a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     58c:	8c13      	ldrh	r3, [r2, #32]
     58e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     590:	2b00      	cmp	r3, #0
     592:	d1fb      	bne.n	58c <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     594:	4b10      	ldr	r3, [pc, #64]	; (5d8 <adc_init+0x308>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	021a      	lsls	r2, r3, #8
     59a:	21e0      	movs	r1, #224	; 0xe0
     59c:	00c9      	lsls	r1, r1, #3
     59e:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     5a0:	069b      	lsls	r3, r3, #26
     5a2:	0f5b      	lsrs	r3, r3, #29
			) |
     5a4:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     5a8:	2300      	movs	r3, #0
     5aa:	e6a5      	b.n	2f8 <adc_init+0x28>
     5ac:	00000289 	.word	0x00000289
     5b0:	40000400 	.word	0x40000400
     5b4:	40001400 	.word	0x40001400
     5b8:	200010fc 	.word	0x200010fc
     5bc:	000030e5 	.word	0x000030e5
     5c0:	00003075 	.word	0x00003075
     5c4:	0001c204 	.word	0x0001c204
     5c8:	000158c9 	.word	0x000158c9
     5cc:	000031e1 	.word	0x000031e1
     5d0:	0001c130 	.word	0x0001c130
     5d4:	00000fff 	.word	0x00000fff
     5d8:	00806020 	.word	0x00806020
		switch (resolution) {
     5dc:	2800      	cmp	r0, #0
     5de:	d195      	bne.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     5e0:	7af3      	ldrb	r3, [r6, #11]
     5e2:	2b00      	cmp	r3, #0
     5e4:	d012      	beq.n	60c <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     5e6:	69f3      	ldr	r3, [r6, #28]
     5e8:	2080      	movs	r0, #128	; 0x80
     5ea:	0100      	lsls	r0, r0, #4
     5ec:	4684      	mov	ip, r0
     5ee:	4463      	add	r3, ip
     5f0:	0019      	movs	r1, r3
			if (config->differential_mode &&
     5f2:	482e      	ldr	r0, [pc, #184]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     5f4:	2317      	movs	r3, #23
			if (config->differential_mode &&
     5f6:	4281      	cmp	r1, r0
     5f8:	d900      	bls.n	5fc <adc_init+0x32c>
     5fa:	e67d      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     5fc:	6a33      	ldr	r3, [r6, #32]
     5fe:	4463      	add	r3, ip
     600:	0019      	movs	r1, r3
     602:	482a      	ldr	r0, [pc, #168]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     604:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     606:	4281      	cmp	r1, r0
     608:	d900      	bls.n	60c <adc_init+0x33c>
     60a:	e675      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     60c:	4927      	ldr	r1, [pc, #156]	; (6ac <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     60e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     610:	69f0      	ldr	r0, [r6, #28]
     612:	4288      	cmp	r0, r1
     614:	dd00      	ble.n	618 <adc_init+0x348>
     616:	e66f      	b.n	2f8 <adc_init+0x28>
     618:	6a30      	ldr	r0, [r6, #32]
     61a:	4288      	cmp	r0, r1
     61c:	dd00      	ble.n	620 <adc_init+0x350>
     61e:	e66b      	b.n	2f8 <adc_init+0x28>
     620:	e774      	b.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     622:	7af3      	ldrb	r3, [r6, #11]
     624:	2b00      	cmp	r3, #0
     626:	d012      	beq.n	64e <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     628:	69f3      	ldr	r3, [r6, #28]
     62a:	2080      	movs	r0, #128	; 0x80
     62c:	0080      	lsls	r0, r0, #2
     62e:	4684      	mov	ip, r0
     630:	4463      	add	r3, ip
     632:	0019      	movs	r1, r3
			if (config->differential_mode &&
     634:	481e      	ldr	r0, [pc, #120]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     636:	2317      	movs	r3, #23
			if (config->differential_mode &&
     638:	4281      	cmp	r1, r0
     63a:	d900      	bls.n	63e <adc_init+0x36e>
     63c:	e65c      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     63e:	6a33      	ldr	r3, [r6, #32]
     640:	4463      	add	r3, ip
     642:	0019      	movs	r1, r3
     644:	481a      	ldr	r0, [pc, #104]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     646:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     648:	4281      	cmp	r1, r0
     64a:	d900      	bls.n	64e <adc_init+0x37e>
     64c:	e654      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     64e:	4918      	ldr	r1, [pc, #96]	; (6b0 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     650:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     652:	69f0      	ldr	r0, [r6, #28]
     654:	4288      	cmp	r0, r1
     656:	dd00      	ble.n	65a <adc_init+0x38a>
     658:	e64e      	b.n	2f8 <adc_init+0x28>
     65a:	6a30      	ldr	r0, [r6, #32]
     65c:	4288      	cmp	r0, r1
     65e:	dd00      	ble.n	662 <adc_init+0x392>
     660:	e64a      	b.n	2f8 <adc_init+0x28>
     662:	e753      	b.n	50c <adc_init+0x23c>
			if (config->differential_mode &&
     664:	7af3      	ldrb	r3, [r6, #11]
     666:	2b00      	cmp	r3, #0
     668:	d012      	beq.n	690 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     66a:	69f3      	ldr	r3, [r6, #28]
     66c:	2080      	movs	r0, #128	; 0x80
     66e:	0200      	lsls	r0, r0, #8
     670:	4684      	mov	ip, r0
     672:	4463      	add	r3, ip
     674:	0019      	movs	r1, r3
			if (config->differential_mode &&
     676:	480f      	ldr	r0, [pc, #60]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     678:	2317      	movs	r3, #23
			if (config->differential_mode &&
     67a:	4281      	cmp	r1, r0
     67c:	d900      	bls.n	680 <adc_init+0x3b0>
     67e:	e63b      	b.n	2f8 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     680:	6a33      	ldr	r3, [r6, #32]
     682:	4463      	add	r3, ip
     684:	0019      	movs	r1, r3
     686:	480b      	ldr	r0, [pc, #44]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     688:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     68a:	4281      	cmp	r1, r0
     68c:	d900      	bls.n	690 <adc_init+0x3c0>
     68e:	e633      	b.n	2f8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     690:	4908      	ldr	r1, [pc, #32]	; (6b4 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     692:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     694:	69f0      	ldr	r0, [r6, #28]
     696:	4288      	cmp	r0, r1
     698:	dd00      	ble.n	69c <adc_init+0x3cc>
     69a:	e62d      	b.n	2f8 <adc_init+0x28>
     69c:	6a30      	ldr	r0, [r6, #32]
     69e:	4288      	cmp	r0, r1
     6a0:	dd00      	ble.n	6a4 <adc_init+0x3d4>
     6a2:	e629      	b.n	2f8 <adc_init+0x28>
     6a4:	e732      	b.n	50c <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     6a6:	2317      	movs	r3, #23
     6a8:	e626      	b.n	2f8 <adc_init+0x28>
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	00000fff 	.word	0x00000fff
     6b0:	000003ff 	.word	0x000003ff
     6b4:	0000ffff 	.word	0x0000ffff

000006b8 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     6ba:	4b2f      	ldr	r3, [pc, #188]	; (778 <ADC_Handler+0xc0>)
     6bc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     6be:	6823      	ldr	r3, [r4, #0]
     6c0:	799a      	ldrb	r2, [r3, #6]
     6c2:	795d      	ldrb	r5, [r3, #5]
     6c4:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6c6:	07ea      	lsls	r2, r5, #31
     6c8:	d52a      	bpl.n	720 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6ca:	2201      	movs	r2, #1
     6cc:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     6ce:	6962      	ldr	r2, [r4, #20]
     6d0:	1c93      	adds	r3, r2, #2
     6d2:	6163      	str	r3, [r4, #20]
     6d4:	6823      	ldr	r3, [r4, #0]
     6d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6d8:	b29b      	uxth	r3, r3
     6da:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     6dc:	8b23      	ldrh	r3, [r4, #24]
     6de:	3b01      	subs	r3, #1
     6e0:	b29b      	uxth	r3, r3
     6e2:	8323      	strh	r3, [r4, #24]
     6e4:	2b00      	cmp	r3, #0
     6e6:	d015      	beq.n	714 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     6e8:	7f63      	ldrb	r3, [r4, #29]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d018      	beq.n	720 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6ee:	6822      	ldr	r2, [r4, #0]
     6f0:	79d3      	ldrb	r3, [r2, #7]
     6f2:	b25b      	sxtb	r3, r3
     6f4:	2b00      	cmp	r3, #0
     6f6:	db13      	blt.n	720 <ADC_Handler+0x68>
     6f8:	8c13      	ldrh	r3, [r2, #32]
     6fa:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6fc:	2b00      	cmp	r3, #0
     6fe:	d1fb      	bne.n	6f8 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     700:	7e13      	ldrb	r3, [r2, #24]
     702:	2102      	movs	r1, #2
     704:	430b      	orrs	r3, r1
     706:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     708:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     70a:	8c13      	ldrh	r3, [r2, #32]
     70c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     70e:	2b00      	cmp	r3, #0
     710:	d1fb      	bne.n	70a <ADC_Handler+0x52>
     712:	e005      	b.n	720 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     714:	2301      	movs	r3, #1
     716:	6822      	ldr	r2, [r4, #0]
     718:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     71a:	7f23      	ldrb	r3, [r4, #28]
     71c:	2b05      	cmp	r3, #5
     71e:	d016      	beq.n	74e <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     720:	076b      	lsls	r3, r5, #29
     722:	d508      	bpl.n	736 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     724:	2304      	movs	r3, #4
     726:	6822      	ldr	r2, [r4, #0]
     728:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     72a:	7ee3      	ldrb	r3, [r4, #27]
     72c:	079b      	lsls	r3, r3, #30
     72e:	d502      	bpl.n	736 <ADC_Handler+0x7e>
     730:	7ea3      	ldrb	r3, [r4, #26]
     732:	079b      	lsls	r3, r3, #30
     734:	d417      	bmi.n	766 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     736:	07ab      	lsls	r3, r5, #30
     738:	d508      	bpl.n	74c <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     73a:	2302      	movs	r3, #2
     73c:	6822      	ldr	r2, [r4, #0]
     73e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     740:	7ee3      	ldrb	r3, [r4, #27]
     742:	075b      	lsls	r3, r3, #29
     744:	d502      	bpl.n	74c <ADC_Handler+0x94>
     746:	7ea3      	ldrb	r3, [r4, #26]
     748:	075b      	lsls	r3, r3, #29
     74a:	d410      	bmi.n	76e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     74c:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     74e:	2300      	movs	r3, #0
     750:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     752:	7ee3      	ldrb	r3, [r4, #27]
     754:	07db      	lsls	r3, r3, #31
     756:	d5e3      	bpl.n	720 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     758:	7ea3      	ldrb	r3, [r4, #26]
     75a:	07db      	lsls	r3, r3, #31
     75c:	d5e0      	bpl.n	720 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     75e:	0020      	movs	r0, r4
     760:	68a3      	ldr	r3, [r4, #8]
     762:	4798      	blx	r3
     764:	e7dc      	b.n	720 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     766:	0020      	movs	r0, r4
     768:	68e3      	ldr	r3, [r4, #12]
     76a:	4798      	blx	r3
     76c:	e7e3      	b.n	736 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     76e:	6923      	ldr	r3, [r4, #16]
     770:	0020      	movs	r0, r4
     772:	4798      	blx	r3
}
     774:	e7ea      	b.n	74c <ADC_Handler+0x94>
     776:	46c0      	nop			; (mov r8, r8)
     778:	200010fc 	.word	0x200010fc

0000077c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     77c:	2301      	movs	r3, #1
     77e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     780:	2300      	movs	r3, #0
     782:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     784:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     786:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     788:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     78a:	220f      	movs	r2, #15
     78c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     78e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     790:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     792:	7203      	strb	r3, [r0, #8]
}
     794:	4770      	bx	lr

00000796 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     796:	6802      	ldr	r2, [r0, #0]
     798:	6813      	ldr	r3, [r2, #0]
     79a:	2102      	movs	r1, #2
     79c:	430b      	orrs	r3, r1
     79e:	6013      	str	r3, [r2, #0]

}
     7a0:	4770      	bx	lr

000007a2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     7a2:	2303      	movs	r3, #3
     7a4:	6802      	ldr	r2, [r0, #0]
     7a6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     7a8:	6802      	ldr	r2, [r0, #0]
     7aa:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     7ac:	6802      	ldr	r2, [r0, #0]
     7ae:	6813      	ldr	r3, [r2, #0]
     7b0:	2102      	movs	r1, #2
     7b2:	438b      	bics	r3, r1
     7b4:	6013      	str	r3, [r2, #0]
}
     7b6:	4770      	bx	lr

000007b8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	0004      	movs	r4, r0
     7bc:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     7be:	78d3      	ldrb	r3, [r2, #3]
     7c0:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     7c2:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     7c4:	7853      	ldrb	r3, [r2, #1]
     7c6:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     7c8:	7913      	ldrb	r3, [r2, #4]
     7ca:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     7cc:	7813      	ldrb	r3, [r2, #0]
     7ce:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     7d0:	7891      	ldrb	r1, [r2, #2]
     7d2:	02c9      	lsls	r1, r1, #11
     7d4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     7d6:	7851      	ldrb	r1, [r2, #1]
     7d8:	0209      	lsls	r1, r1, #8
     7da:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     7dc:	78d1      	ldrb	r1, [r2, #3]
     7de:	0089      	lsls	r1, r1, #2
     7e0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     7e2:	7911      	ldrb	r1, [r2, #4]
     7e4:	0149      	lsls	r1, r1, #5
     7e6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     7e8:	7991      	ldrb	r1, [r2, #6]
     7ea:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     7ec:	79d0      	ldrb	r0, [r2, #7]
     7ee:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     7f0:	4301      	orrs	r1, r0
     7f2:	7a10      	ldrb	r0, [r2, #8]
     7f4:	0300      	lsls	r0, r0, #12
     7f6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     7f8:	7952      	ldrb	r2, [r2, #5]
     7fa:	0412      	lsls	r2, r2, #16
     7fc:	20f0      	movs	r0, #240	; 0xf0
     7fe:	0300      	lsls	r0, r0, #12
     800:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     802:	430a      	orrs	r2, r1
     804:	4313      	orrs	r3, r2
     806:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     808:	682b      	ldr	r3, [r5, #0]
     80a:	079b      	lsls	r3, r3, #30
     80c:	d401      	bmi.n	812 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     80e:	602e      	str	r6, [r5, #0]
	}
}
     810:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     812:	0020      	movs	r0, r4
     814:	4b03      	ldr	r3, [pc, #12]	; (824 <aes_set_config+0x6c>)
     816:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     818:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     81a:	0020      	movs	r0, r4
     81c:	4b02      	ldr	r3, [pc, #8]	; (828 <aes_set_config+0x70>)
     81e:	4798      	blx	r3
     820:	e7f6      	b.n	810 <aes_set_config+0x58>
     822:	46c0      	nop			; (mov r8, r8)
     824:	000007a3 	.word	0x000007a3
     828:	00000797 	.word	0x00000797

0000082c <aes_init>:
{
     82c:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
     82e:	4c05      	ldr	r4, [pc, #20]	; (844 <aes_init+0x18>)
     830:	69e5      	ldr	r5, [r4, #28]
     832:	2380      	movs	r3, #128	; 0x80
     834:	019b      	lsls	r3, r3, #6
     836:	432b      	orrs	r3, r5
     838:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     83a:	2301      	movs	r3, #1
     83c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     83e:	4b02      	ldr	r3, [pc, #8]	; (848 <aes_init+0x1c>)
     840:	4798      	blx	r3
}
     842:	bd70      	pop	{r4, r5, r6, pc}
     844:	40000400 	.word	0x40000400
     848:	000007b9 	.word	0x000007b9

0000084c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     84c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     84e:	7943      	ldrb	r3, [r0, #5]
     850:	2b01      	cmp	r3, #1
     852:	d005      	beq.n	860 <aes_write_key+0x14>
     854:	2b00      	cmp	r3, #0
     856:	d010      	beq.n	87a <aes_write_key+0x2e>
     858:	2b02      	cmp	r3, #2
     85a:	d10d      	bne.n	878 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     85c:	2508      	movs	r5, #8
     85e:	e000      	b.n	862 <aes_write_key+0x16>
		key_length = 6;
     860:	2506      	movs	r5, #6
{
     862:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     864:	c910      	ldmia	r1!, {r4}
     866:	1c9a      	adds	r2, r3, #2
     868:	0092      	lsls	r2, r2, #2
     86a:	6806      	ldr	r6, [r0, #0]
     86c:	46b4      	mov	ip, r6
     86e:	4462      	add	r2, ip
     870:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     872:	3301      	adds	r3, #1
     874:	42ab      	cmp	r3, r5
     876:	d3f5      	bcc.n	864 <aes_write_key+0x18>
		key++;
	}
}
     878:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     87a:	2504      	movs	r5, #4
     87c:	e7f1      	b.n	862 <aes_write_key+0x16>
	...

00000880 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     880:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     882:	2300      	movs	r3, #0
     884:	6802      	ldr	r2, [r0, #0]
     886:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     888:	4b0f      	ldr	r3, [pc, #60]	; (8c8 <aes_write_input_data+0x48>)
     88a:	6842      	ldr	r2, [r0, #4]
     88c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     88e:	4a0f      	ldr	r2, [pc, #60]	; (8cc <aes_write_input_data+0x4c>)
     890:	4293      	cmp	r3, r2
     892:	d00a      	beq.n	8aa <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     894:	7903      	ldrb	r3, [r0, #4]
     896:	2b03      	cmp	r3, #3
     898:	d00e      	beq.n	8b8 <aes_write_input_data+0x38>
     89a:	000c      	movs	r4, r1
     89c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     89e:	6803      	ldr	r3, [r0, #0]
     8a0:	c904      	ldmia	r1!, {r2}
     8a2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     8a4:	428c      	cmp	r4, r1
     8a6:	d1fa      	bne.n	89e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     8a8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     8aa:	6803      	ldr	r3, [r0, #0]
     8ac:	680a      	ldr	r2, [r1, #0]
     8ae:	639a      	str	r2, [r3, #56]	; 0x38
     8b0:	6803      	ldr	r3, [r0, #0]
     8b2:	684a      	ldr	r2, [r1, #4]
     8b4:	639a      	str	r2, [r3, #56]	; 0x38
     8b6:	e7f7      	b.n	8a8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     8b8:	7983      	ldrb	r3, [r0, #6]
     8ba:	3b02      	subs	r3, #2
     8bc:	2b01      	cmp	r3, #1
     8be:	d8ec      	bhi.n	89a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     8c0:	6803      	ldr	r3, [r0, #0]
     8c2:	680a      	ldr	r2, [r1, #0]
     8c4:	639a      	str	r2, [r3, #56]	; 0x38
     8c6:	e7ef      	b.n	8a8 <aes_write_input_data+0x28>
     8c8:	00ff00ff 	.word	0x00ff00ff
     8cc:	00010003 	.word	0x00010003

000008d0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     8d0:	2300      	movs	r3, #0
     8d2:	6802      	ldr	r2, [r0, #0]
     8d4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     8d6:	4b10      	ldr	r3, [pc, #64]	; (918 <aes_read_output_data+0x48>)
     8d8:	6842      	ldr	r2, [r0, #4]
     8da:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     8dc:	4a0f      	ldr	r2, [pc, #60]	; (91c <aes_read_output_data+0x4c>)
     8de:	4293      	cmp	r3, r2
     8e0:	d00a      	beq.n	8f8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     8e2:	7903      	ldrb	r3, [r0, #4]
     8e4:	2b03      	cmp	r3, #3
     8e6:	d00e      	beq.n	906 <aes_read_output_data+0x36>
     8e8:	000a      	movs	r2, r1
     8ea:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     8ec:	6803      	ldr	r3, [r0, #0]
     8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     8f0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     8f2:	428a      	cmp	r2, r1
     8f4:	d1fa      	bne.n	8ec <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     8f6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     8f8:	6803      	ldr	r3, [r0, #0]
     8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     8fc:	600b      	str	r3, [r1, #0]
     8fe:	6803      	ldr	r3, [r0, #0]
     900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     902:	604b      	str	r3, [r1, #4]
     904:	e7f7      	b.n	8f6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     906:	7983      	ldrb	r3, [r0, #6]
     908:	3b02      	subs	r3, #2
     90a:	2b01      	cmp	r3, #1
     90c:	d8ec      	bhi.n	8e8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     90e:	6803      	ldr	r3, [r0, #0]
     910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     912:	600b      	str	r3, [r1, #0]
     914:	e7ef      	b.n	8f6 <aes_read_output_data+0x26>
     916:	46c0      	nop			; (mov r8, r8)
     918:	00ff00ff 	.word	0x00ff00ff
     91c:	00010003 	.word	0x00010003

00000920 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     920:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     922:	2a00      	cmp	r2, #0
     924:	d001      	beq.n	92a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     926:	0018      	movs	r0, r3
     928:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     92a:	008b      	lsls	r3, r1, #2
     92c:	4a06      	ldr	r2, [pc, #24]	; (948 <extint_register_callback+0x28>)
     92e:	589b      	ldr	r3, [r3, r2]
     930:	2b00      	cmp	r3, #0
     932:	d003      	beq.n	93c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     934:	4283      	cmp	r3, r0
     936:	d005      	beq.n	944 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     938:	231d      	movs	r3, #29
     93a:	e7f4      	b.n	926 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     93c:	0089      	lsls	r1, r1, #2
     93e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     940:	2300      	movs	r3, #0
     942:	e7f0      	b.n	926 <extint_register_callback+0x6>
		return STATUS_OK;
     944:	2300      	movs	r3, #0
     946:	e7ee      	b.n	926 <extint_register_callback+0x6>
     948:	20001104 	.word	0x20001104

0000094c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     94c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     94e:	2900      	cmp	r1, #0
     950:	d001      	beq.n	956 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     952:	0018      	movs	r0, r3
     954:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     956:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     958:	281f      	cmp	r0, #31
     95a:	d800      	bhi.n	95e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     95c:	4a02      	ldr	r2, [pc, #8]	; (968 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     95e:	2301      	movs	r3, #1
     960:	4083      	lsls	r3, r0
     962:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     964:	2300      	movs	r3, #0
     966:	e7f4      	b.n	952 <extint_chan_enable_callback+0x6>
     968:	40002400 	.word	0x40002400

0000096c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     96c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     96e:	2200      	movs	r2, #0
     970:	4b10      	ldr	r3, [pc, #64]	; (9b4 <EIC_Handler+0x48>)
     972:	701a      	strb	r2, [r3, #0]
     974:	2300      	movs	r3, #0
     976:	4910      	ldr	r1, [pc, #64]	; (9b8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     978:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     97a:	4e10      	ldr	r6, [pc, #64]	; (9bc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     97c:	4c0d      	ldr	r4, [pc, #52]	; (9b4 <EIC_Handler+0x48>)
     97e:	e00a      	b.n	996 <EIC_Handler+0x2a>
		return eics[eic_index];
     980:	490d      	ldr	r1, [pc, #52]	; (9b8 <EIC_Handler+0x4c>)
     982:	e008      	b.n	996 <EIC_Handler+0x2a>
     984:	7823      	ldrb	r3, [r4, #0]
     986:	3301      	adds	r3, #1
     988:	b2db      	uxtb	r3, r3
     98a:	7023      	strb	r3, [r4, #0]
     98c:	2b0f      	cmp	r3, #15
     98e:	d810      	bhi.n	9b2 <EIC_Handler+0x46>
		return NULL;
     990:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     992:	2b1f      	cmp	r3, #31
     994:	d9f4      	bls.n	980 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     996:	0028      	movs	r0, r5
     998:	4018      	ands	r0, r3
     99a:	2201      	movs	r2, #1
     99c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     99e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     9a0:	4210      	tst	r0, r2
     9a2:	d0ef      	beq.n	984 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     9a4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     9a6:	009b      	lsls	r3, r3, #2
     9a8:	599b      	ldr	r3, [r3, r6]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d0ea      	beq.n	984 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     9ae:	4798      	blx	r3
     9b0:	e7e8      	b.n	984 <EIC_Handler+0x18>
			}
		}
	}
}
     9b2:	bd70      	pop	{r4, r5, r6, pc}
     9b4:	20001100 	.word	0x20001100
     9b8:	40002400 	.word	0x40002400
     9bc:	20001104 	.word	0x20001104

000009c0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     9c0:	4a06      	ldr	r2, [pc, #24]	; (9dc <_extint_enable+0x1c>)
     9c2:	7813      	ldrb	r3, [r2, #0]
     9c4:	2102      	movs	r1, #2
     9c6:	430b      	orrs	r3, r1
     9c8:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     9ca:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     9cc:	6853      	ldr	r3, [r2, #4]
     9ce:	4219      	tst	r1, r3
     9d0:	d1fc      	bne.n	9cc <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     9d2:	6853      	ldr	r3, [r2, #4]
     9d4:	4218      	tst	r0, r3
     9d6:	d1f9      	bne.n	9cc <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     9d8:	4770      	bx	lr
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	40002400 	.word	0x40002400

000009e0 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     9e0:	4a06      	ldr	r2, [pc, #24]	; (9fc <_extint_disable+0x1c>)
     9e2:	7813      	ldrb	r3, [r2, #0]
     9e4:	2102      	movs	r1, #2
     9e6:	438b      	bics	r3, r1
     9e8:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     9ea:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     9ec:	6853      	ldr	r3, [r2, #4]
     9ee:	4219      	tst	r1, r3
     9f0:	d1fc      	bne.n	9ec <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     9f2:	6853      	ldr	r3, [r2, #4]
     9f4:	4218      	tst	r0, r3
     9f6:	d1f9      	bne.n	9ec <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     9f8:	4770      	bx	lr
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	40002400 	.word	0x40002400

00000a00 <_system_extint_init>:
{
     a00:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     a02:	4a12      	ldr	r2, [pc, #72]	; (a4c <_system_extint_init+0x4c>)
     a04:	6951      	ldr	r1, [r2, #20]
     a06:	2380      	movs	r3, #128	; 0x80
     a08:	009b      	lsls	r3, r3, #2
     a0a:	430b      	orrs	r3, r1
     a0c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     a0e:	4a10      	ldr	r2, [pc, #64]	; (a50 <_system_extint_init+0x50>)
     a10:	7813      	ldrb	r3, [r2, #0]
     a12:	2101      	movs	r1, #1
     a14:	430b      	orrs	r3, r1
     a16:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     a18:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     a1a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     a1c:	6853      	ldr	r3, [r2, #4]
     a1e:	4219      	tst	r1, r3
     a20:	d1fc      	bne.n	a1c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     a22:	6853      	ldr	r3, [r2, #4]
     a24:	4218      	tst	r0, r3
     a26:	d1f9      	bne.n	a1c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     a28:	4a09      	ldr	r2, [pc, #36]	; (a50 <_system_extint_init+0x50>)
     a2a:	7813      	ldrb	r3, [r2, #0]
     a2c:	2110      	movs	r1, #16
     a2e:	430b      	orrs	r3, r1
     a30:	7013      	strb	r3, [r2, #0]
     a32:	4b08      	ldr	r3, [pc, #32]	; (a54 <_system_extint_init+0x54>)
     a34:	0019      	movs	r1, r3
     a36:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     a38:	2200      	movs	r2, #0
     a3a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     a3c:	428b      	cmp	r3, r1
     a3e:	d1fc      	bne.n	a3a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a40:	2208      	movs	r2, #8
     a42:	4b05      	ldr	r3, [pc, #20]	; (a58 <_system_extint_init+0x58>)
     a44:	601a      	str	r2, [r3, #0]
	_extint_enable();
     a46:	4b05      	ldr	r3, [pc, #20]	; (a5c <_system_extint_init+0x5c>)
     a48:	4798      	blx	r3
}
     a4a:	bd10      	pop	{r4, pc}
     a4c:	40000400 	.word	0x40000400
     a50:	40002400 	.word	0x40002400
     a54:	20001104 	.word	0x20001104
     a58:	e000e100 	.word	0xe000e100
     a5c:	000009c1 	.word	0x000009c1

00000a60 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     a60:	2300      	movs	r3, #0
     a62:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     a64:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     a66:	2201      	movs	r2, #1
     a68:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     a6a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     a6c:	3201      	adds	r2, #1
     a6e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     a70:	7243      	strb	r3, [r0, #9]
}
     a72:	4770      	bx	lr

00000a74 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     a74:	b5f0      	push	{r4, r5, r6, r7, lr}
     a76:	b083      	sub	sp, #12
     a78:	0005      	movs	r5, r0
     a7a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     a7c:	4b1c      	ldr	r3, [pc, #112]	; (af0 <extint_chan_set_config+0x7c>)
     a7e:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a80:	a901      	add	r1, sp, #4
     a82:	2300      	movs	r3, #0
     a84:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a86:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     a88:	7923      	ldrb	r3, [r4, #4]
     a8a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     a8c:	7a23      	ldrb	r3, [r4, #8]
     a8e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     a90:	7820      	ldrb	r0, [r4, #0]
     a92:	4b18      	ldr	r3, [pc, #96]	; (af4 <extint_chan_set_config+0x80>)
     a94:	4798      	blx	r3
		return NULL;
     a96:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     a98:	2d1f      	cmp	r5, #31
     a9a:	d800      	bhi.n	a9e <extint_chan_set_config+0x2a>
		return eics[eic_index];
     a9c:	4916      	ldr	r1, [pc, #88]	; (af8 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     a9e:	2207      	movs	r2, #7
     aa0:	402a      	ands	r2, r5
     aa2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     aa4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     aa6:	7aa3      	ldrb	r3, [r4, #10]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d001      	beq.n	ab0 <extint_chan_set_config+0x3c>
     aac:	2308      	movs	r3, #8
     aae:	431f      	orrs	r7, r3
     ab0:	08eb      	lsrs	r3, r5, #3
     ab2:	009b      	lsls	r3, r3, #2
     ab4:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     ab6:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     ab8:	260f      	movs	r6, #15
     aba:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     abc:	43b0      	bics	r0, r6
			(new_config << config_pos);
     abe:	4097      	lsls	r7, r2
     ac0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     ac2:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     ac4:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     ac6:	7a63      	ldrb	r3, [r4, #9]
     ac8:	2b00      	cmp	r3, #0
     aca:	d10b      	bne.n	ae4 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     acc:	698a      	ldr	r2, [r1, #24]
     ace:	2301      	movs	r3, #1
     ad0:	40ab      	lsls	r3, r5
     ad2:	43db      	mvns	r3, r3
     ad4:	041b      	lsls	r3, r3, #16
     ad6:	0c1b      	lsrs	r3, r3, #16
     ad8:	4013      	ands	r3, r2
     ada:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     adc:	4b07      	ldr	r3, [pc, #28]	; (afc <extint_chan_set_config+0x88>)
     ade:	4798      	blx	r3
}
     ae0:	b003      	add	sp, #12
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     ae4:	698a      	ldr	r2, [r1, #24]
     ae6:	2301      	movs	r3, #1
     ae8:	40ab      	lsls	r3, r5
     aea:	4313      	orrs	r3, r2
     aec:	618b      	str	r3, [r1, #24]
     aee:	e7f5      	b.n	adc <extint_chan_set_config+0x68>
     af0:	000009e1 	.word	0x000009e1
     af4:	000031e1 	.word	0x000031e1
     af8:	40002400 	.word	0x40002400
     afc:	000009c1 	.word	0x000009c1

00000b00 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     b00:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
     b02:	4a1e      	ldr	r2, [pc, #120]	; (b7c <nvm_set_config+0x7c>)
     b04:	6993      	ldr	r3, [r2, #24]
     b06:	2104      	movs	r1, #4
     b08:	430b      	orrs	r3, r1
     b0a:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     b0c:	4b1c      	ldr	r3, [pc, #112]	; (b80 <nvm_set_config+0x80>)
     b0e:	2220      	movs	r2, #32
     b10:	32ff      	adds	r2, #255	; 0xff
     b12:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     b14:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     b16:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     b18:	07d2      	lsls	r2, r2, #31
     b1a:	d401      	bmi.n	b20 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     b1c:	0018      	movs	r0, r3
     b1e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     b20:	7803      	ldrb	r3, [r0, #0]
     b22:	021b      	lsls	r3, r3, #8
     b24:	22c0      	movs	r2, #192	; 0xc0
     b26:	0092      	lsls	r2, r2, #2
     b28:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     b2a:	7841      	ldrb	r1, [r0, #1]
     b2c:	01c9      	lsls	r1, r1, #7
     b2e:	22ff      	movs	r2, #255	; 0xff
     b30:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     b32:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	0049      	lsls	r1, r1, #1
     b38:	221e      	movs	r2, #30
     b3a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     b3c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     b3e:	78c2      	ldrb	r2, [r0, #3]
     b40:	0492      	lsls	r2, r2, #18
     b42:	2180      	movs	r1, #128	; 0x80
     b44:	02c9      	lsls	r1, r1, #11
     b46:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     b48:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     b4a:	7902      	ldrb	r2, [r0, #4]
     b4c:	0412      	lsls	r2, r2, #16
     b4e:	21c0      	movs	r1, #192	; 0xc0
     b50:	0289      	lsls	r1, r1, #10
     b52:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     b54:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     b56:	4a0a      	ldr	r2, [pc, #40]	; (b80 <nvm_set_config+0x80>)
     b58:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     b5a:	6893      	ldr	r3, [r2, #8]
     b5c:	035b      	lsls	r3, r3, #13
     b5e:	0f5b      	lsrs	r3, r3, #29
     b60:	4908      	ldr	r1, [pc, #32]	; (b84 <nvm_set_config+0x84>)
     b62:	2408      	movs	r4, #8
     b64:	409c      	lsls	r4, r3
     b66:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     b68:	6893      	ldr	r3, [r2, #8]
     b6a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     b6c:	7843      	ldrb	r3, [r0, #1]
     b6e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     b70:	8b13      	ldrh	r3, [r2, #24]
     b72:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     b74:	0fdb      	lsrs	r3, r3, #31
     b76:	011b      	lsls	r3, r3, #4
     b78:	e7d0      	b.n	b1c <nvm_set_config+0x1c>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	40000400 	.word	0x40000400
     b80:	41004000 	.word	0x41004000
     b84:	20000aa4 	.word	0x20000aa4

00000b88 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     b88:	b530      	push	{r4, r5, lr}
     b8a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     b8c:	4a25      	ldr	r2, [pc, #148]	; (c24 <nvm_execute_command+0x9c>)
     b8e:	8810      	ldrh	r0, [r2, #0]
     b90:	8853      	ldrh	r3, [r2, #2]
     b92:	4343      	muls	r3, r0
     b94:	428b      	cmp	r3, r1
     b96:	d20b      	bcs.n	bb0 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     b98:	2280      	movs	r2, #128	; 0x80
     b9a:	0192      	lsls	r2, r2, #6
     b9c:	4b22      	ldr	r3, [pc, #136]	; (c28 <nvm_execute_command+0xa0>)
     b9e:	18cb      	adds	r3, r1, r3
     ba0:	4293      	cmp	r3, r2
     ba2:	d905      	bls.n	bb0 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     ba4:	4a21      	ldr	r2, [pc, #132]	; (c2c <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     ba6:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     ba8:	4b21      	ldr	r3, [pc, #132]	; (c30 <nvm_execute_command+0xa8>)
     baa:	18cb      	adds	r3, r1, r3
     bac:	4293      	cmp	r3, r2
     bae:	d80e      	bhi.n	bce <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     bb0:	4b20      	ldr	r3, [pc, #128]	; (c34 <nvm_execute_command+0xac>)
     bb2:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     bb4:	2280      	movs	r2, #128	; 0x80
     bb6:	02d2      	lsls	r2, r2, #11
     bb8:	432a      	orrs	r2, r5
     bba:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     bbc:	2220      	movs	r2, #32
     bbe:	32ff      	adds	r2, #255	; 0xff
     bc0:	831a      	strh	r2, [r3, #24]
     bc2:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     bc4:	07db      	lsls	r3, r3, #31
     bc6:	d403      	bmi.n	bd0 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     bc8:	4b1a      	ldr	r3, [pc, #104]	; (c34 <nvm_execute_command+0xac>)
     bca:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     bcc:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     bce:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     bd0:	2c45      	cmp	r4, #69	; 0x45
     bd2:	d822      	bhi.n	c1a <nvm_execute_command+0x92>
     bd4:	00a3      	lsls	r3, r4, #2
     bd6:	4a18      	ldr	r2, [pc, #96]	; (c38 <nvm_execute_command+0xb0>)
     bd8:	58d3      	ldr	r3, [r2, r3]
     bda:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     bdc:	4b15      	ldr	r3, [pc, #84]	; (c34 <nvm_execute_command+0xac>)
     bde:	8b1b      	ldrh	r3, [r3, #24]
     be0:	05db      	lsls	r3, r3, #23
     be2:	d503      	bpl.n	bec <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
     be4:	4b13      	ldr	r3, [pc, #76]	; (c34 <nvm_execute_command+0xac>)
     be6:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     be8:	2010      	movs	r0, #16
     bea:	e7f0      	b.n	bce <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     bec:	0889      	lsrs	r1, r1, #2
     bee:	0049      	lsls	r1, r1, #1
     bf0:	4b10      	ldr	r3, [pc, #64]	; (c34 <nvm_execute_command+0xac>)
     bf2:	61d9      	str	r1, [r3, #28]
			break;
     bf4:	e003      	b.n	bfe <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     bf6:	0889      	lsrs	r1, r1, #2
     bf8:	0049      	lsls	r1, r1, #1
     bfa:	4b0e      	ldr	r3, [pc, #56]	; (c34 <nvm_execute_command+0xac>)
     bfc:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     bfe:	20a5      	movs	r0, #165	; 0xa5
     c00:	0200      	lsls	r0, r0, #8
     c02:	4304      	orrs	r4, r0
     c04:	4b0b      	ldr	r3, [pc, #44]	; (c34 <nvm_execute_command+0xac>)
     c06:	801c      	strh	r4, [r3, #0]
     c08:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     c0a:	2201      	movs	r2, #1
     c0c:	7d0b      	ldrb	r3, [r1, #20]
     c0e:	4213      	tst	r3, r2
     c10:	d0fc      	beq.n	c0c <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
     c12:	4b08      	ldr	r3, [pc, #32]	; (c34 <nvm_execute_command+0xac>)
     c14:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     c16:	2000      	movs	r0, #0
     c18:	e7d9      	b.n	bce <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
     c1a:	4b06      	ldr	r3, [pc, #24]	; (c34 <nvm_execute_command+0xac>)
     c1c:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     c1e:	2017      	movs	r0, #23
     c20:	e7d5      	b.n	bce <nvm_execute_command+0x46>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	20000aa4 	.word	0x20000aa4
     c28:	ff7fc000 	.word	0xff7fc000
     c2c:	00001fff 	.word	0x00001fff
     c30:	ffc00000 	.word	0xffc00000
     c34:	41004000 	.word	0x41004000
     c38:	0001c25c 	.word	0x0001c25c

00000c3c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     c3e:	4b2f      	ldr	r3, [pc, #188]	; (cfc <nvm_write_buffer+0xc0>)
     c40:	881c      	ldrh	r4, [r3, #0]
     c42:	885b      	ldrh	r3, [r3, #2]
     c44:	4363      	muls	r3, r4
	if (destination_address >
     c46:	4283      	cmp	r3, r0
     c48:	d207      	bcs.n	c5a <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     c4a:	4e2d      	ldr	r6, [pc, #180]	; (d00 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     c4c:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     c4e:	4b2d      	ldr	r3, [pc, #180]	; (d04 <nvm_write_buffer+0xc8>)
     c50:	18c3      	adds	r3, r0, r3
     c52:	42b3      	cmp	r3, r6
     c54:	d806      	bhi.n	c64 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
     c56:	2601      	movs	r6, #1
     c58:	e000      	b.n	c5c <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
     c5a:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     c5c:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     c5e:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
     c60:	4218      	tst	r0, r3
     c62:	d001      	beq.n	c68 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     c64:	0028      	movs	r0, r5
     c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     c68:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     c6a:	4294      	cmp	r4, r2
     c6c:	d3fa      	bcc.n	c64 <nvm_write_buffer+0x28>
     c6e:	4b26      	ldr	r3, [pc, #152]	; (d08 <nvm_write_buffer+0xcc>)
     c70:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     c72:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     c74:	07db      	lsls	r3, r3, #31
     c76:	d5f5      	bpl.n	c64 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     c78:	4c24      	ldr	r4, [pc, #144]	; (d0c <nvm_write_buffer+0xd0>)
     c7a:	4b23      	ldr	r3, [pc, #140]	; (d08 <nvm_write_buffer+0xcc>)
     c7c:	801c      	strh	r4, [r3, #0]
     c7e:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     c80:	2401      	movs	r4, #1
     c82:	7d2b      	ldrb	r3, [r5, #20]
     c84:	4223      	tst	r3, r4
     c86:	d0fc      	beq.n	c82 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     c88:	2420      	movs	r4, #32
     c8a:	34ff      	adds	r4, #255	; 0xff
     c8c:	4b1e      	ldr	r3, [pc, #120]	; (d08 <nvm_write_buffer+0xcc>)
     c8e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     c90:	2a00      	cmp	r2, #0
     c92:	d02c      	beq.n	cee <nvm_write_buffer+0xb2>
     c94:	2301      	movs	r3, #1
     c96:	0005      	movs	r5, r0
     c98:	439d      	bics	r5, r3
     c9a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     c9c:	1e54      	subs	r4, r2, #1
     c9e:	46a4      	mov	ip, r4
     ca0:	e009      	b.n	cb6 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
     ca2:	18cf      	adds	r7, r1, r3
     ca4:	787f      	ldrb	r7, [r7, #1]
     ca6:	023f      	lsls	r7, r7, #8
     ca8:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
     caa:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     cac:	3302      	adds	r3, #2
     cae:	b29b      	uxth	r3, r3
     cb0:	3502      	adds	r5, #2
     cb2:	429a      	cmp	r2, r3
     cb4:	d904      	bls.n	cc0 <nvm_write_buffer+0x84>
		data = buffer[i];
     cb6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     cb8:	4563      	cmp	r3, ip
     cba:	dbf2      	blt.n	ca2 <nvm_write_buffer+0x66>
		data = buffer[i];
     cbc:	b2a4      	uxth	r4, r4
     cbe:	e7f4      	b.n	caa <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     cc0:	4b0e      	ldr	r3, [pc, #56]	; (cfc <nvm_write_buffer+0xc0>)
     cc2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     cc4:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     cc6:	2b00      	cmp	r3, #0
     cc8:	d1cc      	bne.n	c64 <nvm_write_buffer+0x28>
     cca:	2a3f      	cmp	r2, #63	; 0x3f
     ccc:	d8ca      	bhi.n	c64 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
     cce:	2e00      	cmp	r6, #0
     cd0:	d106      	bne.n	ce0 <nvm_write_buffer+0xa4>
     cd2:	2200      	movs	r2, #0
     cd4:	0001      	movs	r1, r0
     cd6:	2004      	movs	r0, #4
     cd8:	4b0d      	ldr	r3, [pc, #52]	; (d10 <nvm_write_buffer+0xd4>)
     cda:	4798      	blx	r3
     cdc:	0005      	movs	r5, r0
     cde:	e7c1      	b.n	c64 <nvm_write_buffer+0x28>
     ce0:	2200      	movs	r2, #0
     ce2:	0001      	movs	r1, r0
     ce4:	201c      	movs	r0, #28
     ce6:	4b0a      	ldr	r3, [pc, #40]	; (d10 <nvm_write_buffer+0xd4>)
     ce8:	4798      	blx	r3
     cea:	0005      	movs	r5, r0
     cec:	e7ba      	b.n	c64 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     cee:	4b03      	ldr	r3, [pc, #12]	; (cfc <nvm_write_buffer+0xc0>)
     cf0:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     cf2:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     cf4:	2b00      	cmp	r3, #0
     cf6:	d0ea      	beq.n	cce <nvm_write_buffer+0x92>
     cf8:	e7b4      	b.n	c64 <nvm_write_buffer+0x28>
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	20000aa4 	.word	0x20000aa4
     d00:	00001fff 	.word	0x00001fff
     d04:	ffc00000 	.word	0xffc00000
     d08:	41004000 	.word	0x41004000
     d0c:	ffffa544 	.word	0xffffa544
     d10:	00000b89 	.word	0x00000b89

00000d14 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     d14:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     d16:	4b1b      	ldr	r3, [pc, #108]	; (d84 <nvm_read_buffer+0x70>)
     d18:	881c      	ldrh	r4, [r3, #0]
     d1a:	885b      	ldrh	r3, [r3, #2]
     d1c:	4363      	muls	r3, r4
	if (source_address >
     d1e:	4283      	cmp	r3, r0
     d20:	d205      	bcs.n	d2e <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     d22:	4e19      	ldr	r6, [pc, #100]	; (d88 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     d24:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     d26:	4b19      	ldr	r3, [pc, #100]	; (d8c <nvm_read_buffer+0x78>)
     d28:	18c3      	adds	r3, r0, r3
     d2a:	42b3      	cmp	r3, r6
     d2c:	d803      	bhi.n	d36 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
     d2e:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     d30:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
     d32:	4218      	tst	r0, r3
     d34:	d001      	beq.n	d3a <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     d36:	0028      	movs	r0, r5
     d38:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
     d3a:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     d3c:	4294      	cmp	r4, r2
     d3e:	d3fa      	bcc.n	d36 <nvm_read_buffer+0x22>
     d40:	4b13      	ldr	r3, [pc, #76]	; (d90 <nvm_read_buffer+0x7c>)
     d42:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     d44:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     d46:	07db      	lsls	r3, r3, #31
     d48:	d5f5      	bpl.n	d36 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     d4a:	2420      	movs	r4, #32
     d4c:	34ff      	adds	r4, #255	; 0xff
     d4e:	4b10      	ldr	r3, [pc, #64]	; (d90 <nvm_read_buffer+0x7c>)
     d50:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     d52:	2a00      	cmp	r2, #0
     d54:	d014      	beq.n	d80 <nvm_read_buffer+0x6c>
     d56:	2301      	movs	r3, #1
     d58:	4398      	bics	r0, r3
     d5a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     d5c:	1e56      	subs	r6, r2, #1
     d5e:	e004      	b.n	d6a <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
     d60:	3302      	adds	r3, #2
     d62:	b29b      	uxth	r3, r3
     d64:	3002      	adds	r0, #2
     d66:	429a      	cmp	r2, r3
     d68:	d908      	bls.n	d7c <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
     d6a:	8804      	ldrh	r4, [r0, #0]
     d6c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     d6e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     d70:	42b3      	cmp	r3, r6
     d72:	daf5      	bge.n	d60 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
     d74:	18cd      	adds	r5, r1, r3
     d76:	0a24      	lsrs	r4, r4, #8
     d78:	706c      	strb	r4, [r5, #1]
     d7a:	e7f1      	b.n	d60 <nvm_read_buffer+0x4c>
	return STATUS_OK;
     d7c:	2500      	movs	r5, #0
     d7e:	e7da      	b.n	d36 <nvm_read_buffer+0x22>
     d80:	2500      	movs	r5, #0
     d82:	e7d8      	b.n	d36 <nvm_read_buffer+0x22>
     d84:	20000aa4 	.word	0x20000aa4
     d88:	00001fff 	.word	0x00001fff
     d8c:	ffc00000 	.word	0xffc00000
     d90:	41004000 	.word	0x41004000

00000d94 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     d94:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     d96:	4a1b      	ldr	r2, [pc, #108]	; (e04 <nvm_erase_row+0x70>)
     d98:	8813      	ldrh	r3, [r2, #0]
     d9a:	8852      	ldrh	r2, [r2, #2]
     d9c:	435a      	muls	r2, r3
	if (row_address >
     d9e:	4282      	cmp	r2, r0
     da0:	d207      	bcs.n	db2 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     da2:	4c19      	ldr	r4, [pc, #100]	; (e08 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     da4:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     da6:	4919      	ldr	r1, [pc, #100]	; (e0c <nvm_erase_row+0x78>)
     da8:	1841      	adds	r1, r0, r1
     daa:	42a1      	cmp	r1, r4
     dac:	d807      	bhi.n	dbe <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
     dae:	2101      	movs	r1, #1
     db0:	e000      	b.n	db4 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
     db2:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     db4:	009b      	lsls	r3, r3, #2
     db6:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     db8:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     dba:	4218      	tst	r0, r3
     dbc:	d001      	beq.n	dc2 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     dbe:	0010      	movs	r0, r2
     dc0:	bd10      	pop	{r4, pc}
     dc2:	4b13      	ldr	r3, [pc, #76]	; (e10 <nvm_erase_row+0x7c>)
     dc4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     dc6:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
     dc8:	07db      	lsls	r3, r3, #31
     dca:	d5f8      	bpl.n	dbe <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     dcc:	4b10      	ldr	r3, [pc, #64]	; (e10 <nvm_erase_row+0x7c>)
     dce:	2220      	movs	r2, #32
     dd0:	32ff      	adds	r2, #255	; 0xff
     dd2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     dd4:	0880      	lsrs	r0, r0, #2
     dd6:	0040      	lsls	r0, r0, #1
     dd8:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     dda:	2900      	cmp	r1, #0
     ddc:	d10f      	bne.n	dfe <nvm_erase_row+0x6a>
     dde:	4a0d      	ldr	r2, [pc, #52]	; (e14 <nvm_erase_row+0x80>)
     de0:	4b0b      	ldr	r3, [pc, #44]	; (e10 <nvm_erase_row+0x7c>)
     de2:	801a      	strh	r2, [r3, #0]
     de4:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     de6:	2201      	movs	r2, #1
     de8:	7d0b      	ldrb	r3, [r1, #20]
     dea:	4213      	tst	r3, r2
     dec:	d0fc      	beq.n	de8 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     dee:	4b08      	ldr	r3, [pc, #32]	; (e10 <nvm_erase_row+0x7c>)
     df0:	8b1a      	ldrh	r2, [r3, #24]
     df2:	201c      	movs	r0, #28
     df4:	4002      	ands	r2, r0
	return STATUS_OK;
     df6:	1e50      	subs	r0, r2, #1
     df8:	4182      	sbcs	r2, r0
     dfa:	0092      	lsls	r2, r2, #2
     dfc:	e7df      	b.n	dbe <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     dfe:	4a06      	ldr	r2, [pc, #24]	; (e18 <nvm_erase_row+0x84>)
     e00:	e7ee      	b.n	de0 <nvm_erase_row+0x4c>
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	20000aa4 	.word	0x20000aa4
     e08:	00001fff 	.word	0x00001fff
     e0c:	ffc00000 	.word	0xffc00000
     e10:	41004000 	.word	0x41004000
     e14:	0000a502 	.word	0x0000a502
     e18:	0000a51a 	.word	0x0000a51a

00000e1c <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     e1c:	4b15      	ldr	r3, [pc, #84]	; (e74 <nvm_get_parameters+0x58>)
     e1e:	2220      	movs	r2, #32
     e20:	32ff      	adds	r2, #255	; 0xff
     e22:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     e24:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     e26:	0359      	lsls	r1, r3, #13
     e28:	0f49      	lsrs	r1, r1, #29
     e2a:	3a18      	subs	r2, #24
     e2c:	3aff      	subs	r2, #255	; 0xff
     e2e:	408a      	lsls	r2, r1
	parameters->page_size =
     e30:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     e32:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
     e34:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
     e36:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     e38:	4b0f      	ldr	r3, [pc, #60]	; (e78 <nvm_get_parameters+0x5c>)
     e3a:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     e3c:	065b      	lsls	r3, r3, #25
     e3e:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     e40:	2b07      	cmp	r3, #7
     e42:	d010      	beq.n	e66 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     e44:	2206      	movs	r2, #6
     e46:	1ad2      	subs	r2, r2, r3
     e48:	2304      	movs	r3, #4
     e4a:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     e4c:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     e4e:	4b0a      	ldr	r3, [pc, #40]	; (e78 <nvm_get_parameters+0x5c>)
     e50:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
     e52:	2207      	movs	r2, #7
     e54:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     e56:	2b07      	cmp	r3, #7
     e58:	d008      	beq.n	e6c <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     e5a:	2207      	movs	r2, #7
     e5c:	1ad2      	subs	r2, r2, r3
     e5e:	2304      	movs	r3, #4
     e60:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
     e62:	6083      	str	r3, [r0, #8]
	}
}
     e64:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
     e66:	2300      	movs	r3, #0
     e68:	6043      	str	r3, [r0, #4]
     e6a:	e7f0      	b.n	e4e <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
     e6c:	2300      	movs	r3, #0
     e6e:	6083      	str	r3, [r0, #8]
     e70:	e7f8      	b.n	e64 <nvm_get_parameters+0x48>
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	41004000 	.word	0x41004000
     e78:	00804000 	.word	0x00804000

00000e7c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e7c:	b500      	push	{lr}
     e7e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e80:	ab01      	add	r3, sp, #4
     e82:	2280      	movs	r2, #128	; 0x80
     e84:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e86:	780a      	ldrb	r2, [r1, #0]
     e88:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e8a:	784a      	ldrb	r2, [r1, #1]
     e8c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e8e:	788a      	ldrb	r2, [r1, #2]
     e90:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e92:	0019      	movs	r1, r3
     e94:	4b01      	ldr	r3, [pc, #4]	; (e9c <port_pin_set_config+0x20>)
     e96:	4798      	blx	r3
}
     e98:	b003      	add	sp, #12
     e9a:	bd00      	pop	{pc}
     e9c:	000031e1 	.word	0x000031e1

00000ea0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ea0:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
     ea2:	6918      	ldr	r0, [r3, #16]
     ea4:	1e43      	subs	r3, r0, #1
     ea6:	4198      	sbcs	r0, r3
     ea8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     eaa:	4770      	bx	lr

00000eac <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     eac:	b570      	push	{r4, r5, r6, lr}
     eae:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     eb0:	6806      	ldr	r6, [r0, #0]
     eb2:	2204      	movs	r2, #4
     eb4:	4b08      	ldr	r3, [pc, #32]	; (ed8 <rtc_count_enable+0x2c>)
     eb6:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     eb8:	4d08      	ldr	r5, [pc, #32]	; (edc <rtc_count_enable+0x30>)
     eba:	0020      	movs	r0, r4
     ebc:	47a8      	blx	r5
     ebe:	2800      	cmp	r0, #0
     ec0:	d1fb      	bne.n	eba <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     ec2:	8833      	ldrh	r3, [r6, #0]
     ec4:	2202      	movs	r2, #2
     ec6:	4313      	orrs	r3, r2
     ec8:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     eca:	4d04      	ldr	r5, [pc, #16]	; (edc <rtc_count_enable+0x30>)
     ecc:	0020      	movs	r0, r4
     ece:	47a8      	blx	r5
     ed0:	2800      	cmp	r0, #0
     ed2:	d1fb      	bne.n	ecc <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	e000e100 	.word	0xe000e100
     edc:	00000ea1 	.word	0x00000ea1

00000ee0 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ee4:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ee6:	2104      	movs	r1, #4
     ee8:	2380      	movs	r3, #128	; 0x80
     eea:	4a0a      	ldr	r2, [pc, #40]	; (f14 <rtc_count_disable+0x34>)
     eec:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     eee:	4d0a      	ldr	r5, [pc, #40]	; (f18 <rtc_count_disable+0x38>)
     ef0:	0020      	movs	r0, r4
     ef2:	47a8      	blx	r5
     ef4:	2800      	cmp	r0, #0
     ef6:	d1fb      	bne.n	ef0 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
     ef8:	4b08      	ldr	r3, [pc, #32]	; (f1c <rtc_count_disable+0x3c>)
     efa:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
     efc:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
     efe:	8833      	ldrh	r3, [r6, #0]
     f00:	2202      	movs	r2, #2
     f02:	4393      	bics	r3, r2
     f04:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     f06:	4d04      	ldr	r5, [pc, #16]	; (f18 <rtc_count_disable+0x38>)
     f08:	0020      	movs	r0, r4
     f0a:	47a8      	blx	r5
     f0c:	2800      	cmp	r0, #0
     f0e:	d1fb      	bne.n	f08 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
     f10:	bd70      	pop	{r4, r5, r6, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	e000e100 	.word	0xe000e100
     f18:	00000ea1 	.word	0x00000ea1
     f1c:	ffff81ff 	.word	0xffff81ff

00000f20 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f24:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     f26:	4b0a      	ldr	r3, [pc, #40]	; (f50 <rtc_count_reset+0x30>)
     f28:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     f2a:	2300      	movs	r3, #0
     f2c:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
     f2e:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
     f30:	4d08      	ldr	r5, [pc, #32]	; (f54 <rtc_count_reset+0x34>)
     f32:	0020      	movs	r0, r4
     f34:	47a8      	blx	r5
     f36:	2800      	cmp	r0, #0
     f38:	d1fb      	bne.n	f32 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
     f3a:	8833      	ldrh	r3, [r6, #0]
     f3c:	2201      	movs	r2, #1
     f3e:	4313      	orrs	r3, r2
     f40:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
     f42:	4d04      	ldr	r5, [pc, #16]	; (f54 <rtc_count_reset+0x34>)
     f44:	0020      	movs	r0, r4
     f46:	47a8      	blx	r5
     f48:	2800      	cmp	r0, #0
     f4a:	d1fb      	bne.n	f44 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
     f4c:	bd70      	pop	{r4, r5, r6, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	00000ee1 	.word	0x00000ee1
     f54:	00000ea1 	.word	0x00000ea1

00000f58 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
     f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f5a:	0004      	movs	r4, r0
     f5c:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f5e:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     f60:	4d0c      	ldr	r5, [pc, #48]	; (f94 <rtc_count_set_count+0x3c>)
     f62:	0020      	movs	r0, r4
     f64:	47a8      	blx	r5
     f66:	2800      	cmp	r0, #0
     f68:	d1fb      	bne.n	f62 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
     f6a:	7923      	ldrb	r3, [r4, #4]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d009      	beq.n	f84 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     f70:	2017      	movs	r0, #23
	switch(module->mode){
     f72:	2b01      	cmp	r3, #1
     f74:	d105      	bne.n	f82 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
     f76:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
     f78:	4d06      	ldr	r5, [pc, #24]	; (f94 <rtc_count_set_count+0x3c>)
     f7a:	0020      	movs	r0, r4
     f7c:	47a8      	blx	r5
     f7e:	2800      	cmp	r0, #0
     f80:	d1fb      	bne.n	f7a <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
     f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
     f84:	4b04      	ldr	r3, [pc, #16]	; (f98 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
     f86:	2017      	movs	r0, #23
			if(count_value > 0xffff){
     f88:	429e      	cmp	r6, r3
     f8a:	d8fa      	bhi.n	f82 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
     f8c:	b2b6      	uxth	r6, r6
     f8e:	833e      	strh	r6, [r7, #24]
			break;
     f90:	e7f2      	b.n	f78 <rtc_count_set_count+0x20>
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	00000ea1 	.word	0x00000ea1
     f98:	0000ffff 	.word	0x0000ffff

00000f9c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fa0:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
     fa2:	4d08      	ldr	r5, [pc, #32]	; (fc4 <rtc_count_get_count+0x28>)
     fa4:	0020      	movs	r0, r4
     fa6:	47a8      	blx	r5
     fa8:	2800      	cmp	r0, #0
     faa:	d1fb      	bne.n	fa4 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
     fac:	7923      	ldrb	r3, [r4, #4]
     fae:	2b00      	cmp	r3, #0
     fb0:	d004      	beq.n	fbc <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
     fb2:	2000      	movs	r0, #0
	switch (module->mode) {
     fb4:	2b01      	cmp	r3, #1
     fb6:	d100      	bne.n	fba <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
     fb8:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
     fba:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
     fbc:	8b30      	ldrh	r0, [r6, #24]
     fbe:	b280      	uxth	r0, r0
			break;
     fc0:	e7fb      	b.n	fba <rtc_count_get_count+0x1e>
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	00000ea1 	.word	0x00000ea1

00000fc8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	b083      	sub	sp, #12
     fcc:	0004      	movs	r4, r0
     fce:	9101      	str	r1, [sp, #4]
     fd0:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     fd2:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     fd4:	4f13      	ldr	r7, [pc, #76]	; (1024 <rtc_count_set_compare+0x5c>)
     fd6:	0020      	movs	r0, r4
     fd8:	47b8      	blx	r7
     fda:	2800      	cmp	r0, #0
     fdc:	d1fb      	bne.n	fd6 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     fde:	7923      	ldrb	r3, [r4, #4]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d00e      	beq.n	1002 <rtc_count_set_compare+0x3a>
     fe4:	2b01      	cmp	r3, #1
     fe6:	d119      	bne.n	101c <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
     fe8:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
     fea:	2d01      	cmp	r5, #1
     fec:	d817      	bhi.n	101e <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     fee:	3508      	adds	r5, #8
     ff0:	00ad      	lsls	r5, r5, #2
     ff2:	9b01      	ldr	r3, [sp, #4]
     ff4:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
     ff6:	4d0b      	ldr	r5, [pc, #44]	; (1024 <rtc_count_set_compare+0x5c>)
     ff8:	0020      	movs	r0, r4
     ffa:	47a8      	blx	r5
     ffc:	2800      	cmp	r0, #0
     ffe:	d1fb      	bne.n	ff8 <rtc_count_set_compare+0x30>
    1000:	e00d      	b.n	101e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    1002:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    1004:	2d02      	cmp	r5, #2
    1006:	d80a      	bhi.n	101e <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    1008:	4b07      	ldr	r3, [pc, #28]	; (1028 <rtc_count_set_compare+0x60>)
    100a:	9a01      	ldr	r2, [sp, #4]
    100c:	429a      	cmp	r2, r3
    100e:	d806      	bhi.n	101e <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1010:	466b      	mov	r3, sp
    1012:	889b      	ldrh	r3, [r3, #4]
    1014:	3510      	adds	r5, #16
    1016:	006d      	lsls	r5, r5, #1
    1018:	53ab      	strh	r3, [r5, r6]
			break;
    101a:	e7ec      	b.n	ff6 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    101c:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    101e:	b003      	add	sp, #12
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00000ea1 	.word	0x00000ea1
    1028:	0000ffff 	.word	0x0000ffff

0000102c <rtc_count_init>:
{
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0004      	movs	r4, r0
    1030:	0015      	movs	r5, r2
	module->hw = hw;
    1032:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    1034:	4a1f      	ldr	r2, [pc, #124]	; (10b4 <rtc_count_init+0x88>)
    1036:	6951      	ldr	r1, [r2, #20]
    1038:	2380      	movs	r3, #128	; 0x80
    103a:	005b      	lsls	r3, r3, #1
    103c:	430b      	orrs	r3, r1
    103e:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    1040:	2205      	movs	r2, #5
    1042:	4b1d      	ldr	r3, [pc, #116]	; (10b8 <rtc_count_init+0x8c>)
    1044:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    1046:	4b1d      	ldr	r3, [pc, #116]	; (10bc <rtc_count_init+0x90>)
    1048:	4798      	blx	r3
	module->mode                = config->mode;
    104a:	78ab      	ldrb	r3, [r5, #2]
    104c:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    104e:	4b1c      	ldr	r3, [pc, #112]	; (10c0 <rtc_count_init+0x94>)
    1050:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1052:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    1054:	792b      	ldrb	r3, [r5, #4]
    1056:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    1058:	8829      	ldrh	r1, [r5, #0]
    105a:	430b      	orrs	r3, r1
    105c:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    105e:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    1060:	78ab      	ldrb	r3, [r5, #2]
    1062:	2b00      	cmp	r3, #0
    1064:	d013      	beq.n	108e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    1066:	2017      	movs	r0, #23
	switch (config->mode) {
    1068:	2b01      	cmp	r3, #1
    106a:	d10f      	bne.n	108c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    106c:	8813      	ldrh	r3, [r2, #0]
    106e:	b29b      	uxth	r3, r3
    1070:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    1072:	78eb      	ldrb	r3, [r5, #3]
    1074:	2b00      	cmp	r3, #0
    1076:	d003      	beq.n	1080 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    1078:	8813      	ldrh	r3, [r2, #0]
    107a:	2180      	movs	r1, #128	; 0x80
    107c:	430b      	orrs	r3, r1
    107e:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    1080:	68a9      	ldr	r1, [r5, #8]
    1082:	2200      	movs	r2, #0
    1084:	0020      	movs	r0, r4
    1086:	4b0f      	ldr	r3, [pc, #60]	; (10c4 <rtc_count_init+0x98>)
    1088:	4798      	blx	r3
	return STATUS_OK;
    108a:	2000      	movs	r0, #0
}
    108c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    108e:	8813      	ldrh	r3, [r2, #0]
    1090:	2104      	movs	r1, #4
    1092:	430b      	orrs	r3, r1
    1094:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    1096:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    1098:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    109a:	2b00      	cmp	r3, #0
    109c:	d1f6      	bne.n	108c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    109e:	2200      	movs	r2, #0
    10a0:	68a9      	ldr	r1, [r5, #8]
    10a2:	0020      	movs	r0, r4
    10a4:	4e07      	ldr	r6, [pc, #28]	; (10c4 <rtc_count_init+0x98>)
    10a6:	47b0      	blx	r6
    10a8:	68e9      	ldr	r1, [r5, #12]
    10aa:	2201      	movs	r2, #1
    10ac:	0020      	movs	r0, r4
    10ae:	47b0      	blx	r6
	return STATUS_OK;
    10b0:	2000      	movs	r0, #0
    10b2:	e7eb      	b.n	108c <rtc_count_init+0x60>
    10b4:	40000400 	.word	0x40000400
    10b8:	40001000 	.word	0x40001000
    10bc:	00000f21 	.word	0x00000f21
    10c0:	20001144 	.word	0x20001144
    10c4:	00000fc9 	.word	0x00000fc9

000010c8 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    10c8:	2a0a      	cmp	r2, #10
    10ca:	d009      	beq.n	10e0 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    10cc:	2a07      	cmp	r2, #7
    10ce:	d907      	bls.n	10e0 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    10d0:	7903      	ldrb	r3, [r0, #4]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d010      	beq.n	10f8 <rtc_count_register_callback+0x30>
    10d6:	2b01      	cmp	r3, #1
    10d8:	d112      	bne.n	1100 <rtc_count_register_callback+0x38>
    10da:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    10dc:	2a09      	cmp	r2, #9
    10de:	d809      	bhi.n	10f4 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    10e0:	1c93      	adds	r3, r2, #2
    10e2:	009b      	lsls	r3, r3, #2
    10e4:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    10e6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    10e8:	2101      	movs	r1, #1
    10ea:	4091      	lsls	r1, r2
    10ec:	430b      	orrs	r3, r1
    10ee:	b29b      	uxth	r3, r3
    10f0:	8683      	strh	r3, [r0, #52]	; 0x34
    10f2:	2300      	movs	r3, #0
	}

	return status;
}
    10f4:	0018      	movs	r0, r3
    10f6:	4770      	bx	lr
    10f8:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    10fa:	2a0a      	cmp	r2, #10
    10fc:	d8fa      	bhi.n	10f4 <rtc_count_register_callback+0x2c>
    10fe:	e7ef      	b.n	10e0 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    1100:	2317      	movs	r3, #23
    1102:	e7f7      	b.n	10f4 <rtc_count_register_callback+0x2c>

00001104 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1104:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1106:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1108:	290a      	cmp	r1, #10
    110a:	d011      	beq.n	1130 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    110c:	2907      	cmp	r1, #7
    110e:	d912      	bls.n	1136 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1110:	2380      	movs	r3, #128	; 0x80
    1112:	005b      	lsls	r3, r3, #1
    1114:	000c      	movs	r4, r1
    1116:	3c08      	subs	r4, #8
    1118:	40a3      	lsls	r3, r4
    111a:	24c0      	movs	r4, #192	; 0xc0
    111c:	00a4      	lsls	r4, r4, #2
    111e:	4023      	ands	r3, r4
    1120:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    1122:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    1124:	2201      	movs	r2, #1
    1126:	408a      	lsls	r2, r1
    1128:	4313      	orrs	r3, r2
    112a:	b29b      	uxth	r3, r3
    112c:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    112e:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    1130:	4b04      	ldr	r3, [pc, #16]	; (1144 <rtc_count_enable_callback+0x40>)
    1132:	8153      	strh	r3, [r2, #10]
    1134:	e7f5      	b.n	1122 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    1136:	2401      	movs	r4, #1
    1138:	408c      	lsls	r4, r1
    113a:	23ff      	movs	r3, #255	; 0xff
    113c:	4023      	ands	r3, r4
    113e:	8153      	strh	r3, [r2, #10]
    1140:	e7ef      	b.n	1122 <rtc_count_enable_callback+0x1e>
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	ffff8000 	.word	0xffff8000

00001148 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1148:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    114a:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    114c:	290a      	cmp	r1, #10
    114e:	d010      	beq.n	1172 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1150:	2907      	cmp	r1, #7
    1152:	d911      	bls.n	1178 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1154:	2380      	movs	r3, #128	; 0x80
    1156:	005b      	lsls	r3, r3, #1
    1158:	000c      	movs	r4, r1
    115a:	3c08      	subs	r4, #8
    115c:	40a3      	lsls	r3, r4
    115e:	24c0      	movs	r4, #192	; 0xc0
    1160:	00a4      	lsls	r4, r4, #2
    1162:	4023      	ands	r3, r4
    1164:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    1166:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    1168:	2201      	movs	r2, #1
    116a:	408a      	lsls	r2, r1
    116c:	4393      	bics	r3, r2
    116e:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    1170:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <rtc_count_disable_callback+0x3c>)
    1174:	8113      	strh	r3, [r2, #8]
    1176:	e7f6      	b.n	1166 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    1178:	2401      	movs	r4, #1
    117a:	408c      	lsls	r4, r1
    117c:	23ff      	movs	r3, #255	; 0xff
    117e:	4023      	ands	r3, r4
    1180:	8113      	strh	r3, [r2, #8]
    1182:	e7f0      	b.n	1166 <rtc_count_disable_callback+0x1e>
    1184:	ffff8000 	.word	0xffff8000

00001188 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    118a:	46de      	mov	lr, fp
    118c:	4657      	mov	r7, sl
    118e:	464e      	mov	r6, r9
    1190:	4645      	mov	r5, r8
    1192:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    1194:	4b2b      	ldr	r3, [pc, #172]	; (1244 <RTC_Handler+0xbc>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    119a:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    119c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    119e:	4652      	mov	r2, sl
    11a0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    11a2:	401a      	ands	r2, r3
    11a4:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    11a6:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    11a8:	8973      	ldrh	r3, [r6, #10]
    11aa:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    11ac:	b21a      	sxth	r2, r3
    11ae:	2a00      	cmp	r2, #0
    11b0:	db08      	blt.n	11c4 <RTC_Handler+0x3c>
    11b2:	27ff      	movs	r7, #255	; 0xff
    11b4:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    11b6:	d02a      	beq.n	120e <RTC_Handler+0x86>
    11b8:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    11ba:	2301      	movs	r3, #1
    11bc:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    11be:	33fe      	adds	r3, #254	; 0xfe
    11c0:	469b      	mov	fp, r3
    11c2:	e014      	b.n	11ee <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    11c4:	4643      	mov	r3, r8
    11c6:	055b      	lsls	r3, r3, #21
    11c8:	d407      	bmi.n	11da <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    11ca:	4b1f      	ldr	r3, [pc, #124]	; (1248 <RTC_Handler+0xc0>)
    11cc:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    11ce:	bc3c      	pop	{r2, r3, r4, r5}
    11d0:	4690      	mov	r8, r2
    11d2:	4699      	mov	r9, r3
    11d4:	46a2      	mov	sl, r4
    11d6:	46ab      	mov	fp, r5
    11d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    11da:	4653      	mov	r3, sl
    11dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    11de:	4798      	blx	r3
    11e0:	e7f3      	b.n	11ca <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    11e2:	465b      	mov	r3, fp
    11e4:	401d      	ands	r5, r3
    11e6:	81b5      	strh	r5, [r6, #12]
    11e8:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    11ea:	2c08      	cmp	r4, #8
    11ec:	d0ef      	beq.n	11ce <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    11ee:	0023      	movs	r3, r4
    11f0:	464d      	mov	r5, r9
    11f2:	40a5      	lsls	r5, r4
    11f4:	422f      	tst	r7, r5
    11f6:	d0f4      	beq.n	11e2 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    11f8:	4642      	mov	r2, r8
    11fa:	4122      	asrs	r2, r4
    11fc:	4649      	mov	r1, r9
    11fe:	4211      	tst	r1, r2
    1200:	d0ef      	beq.n	11e2 <RTC_Handler+0x5a>
				module->callbacks[i]();
    1202:	3302      	adds	r3, #2
    1204:	009b      	lsls	r3, r3, #2
    1206:	4652      	mov	r2, sl
    1208:	589b      	ldr	r3, [r3, r2]
    120a:	4798      	blx	r3
    120c:	e7e9      	b.n	11e2 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    120e:	05da      	lsls	r2, r3, #23
    1210:	d50a      	bpl.n	1228 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1212:	4643      	mov	r3, r8
    1214:	05db      	lsls	r3, r3, #23
    1216:	d403      	bmi.n	1220 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1218:	2380      	movs	r3, #128	; 0x80
    121a:	005b      	lsls	r3, r3, #1
    121c:	81b3      	strh	r3, [r6, #12]
    121e:	e7d6      	b.n	11ce <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1220:	4653      	mov	r3, sl
    1222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1224:	4798      	blx	r3
    1226:	e7f7      	b.n	1218 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1228:	059b      	lsls	r3, r3, #22
    122a:	d5d0      	bpl.n	11ce <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    122c:	4643      	mov	r3, r8
    122e:	059b      	lsls	r3, r3, #22
    1230:	d403      	bmi.n	123a <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    1232:	2380      	movs	r3, #128	; 0x80
    1234:	009b      	lsls	r3, r3, #2
    1236:	81b3      	strh	r3, [r6, #12]
}
    1238:	e7c9      	b.n	11ce <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    123a:	4653      	mov	r3, sl
    123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    123e:	4798      	blx	r3
    1240:	e7f7      	b.n	1232 <RTC_Handler+0xaa>
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	20001144 	.word	0x20001144
    1248:	ffff8000 	.word	0xffff8000

0000124c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    124c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    124e:	2207      	movs	r2, #7
    1250:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1252:	421a      	tst	r2, r3
    1254:	d1fc      	bne.n	1250 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    1256:	4770      	bx	lr

00001258 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1258:	b5f0      	push	{r4, r5, r6, r7, lr}
    125a:	46d6      	mov	lr, sl
    125c:	464f      	mov	r7, r9
    125e:	4646      	mov	r6, r8
    1260:	b5c0      	push	{r6, r7, lr}
    1262:	b08a      	sub	sp, #40	; 0x28
    1264:	0007      	movs	r7, r0
    1266:	000e      	movs	r6, r1
    1268:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    126a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    126c:	0008      	movs	r0, r1
    126e:	4ba5      	ldr	r3, [pc, #660]	; (1504 <i2c_master_init+0x2ac>)
    1270:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1272:	2805      	cmp	r0, #5
    1274:	d100      	bne.n	1278 <i2c_master_init+0x20>
    1276:	e13d      	b.n	14f4 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1278:	0005      	movs	r5, r0
    127a:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    127c:	4aa2      	ldr	r2, [pc, #648]	; (1508 <i2c_master_init+0x2b0>)
    127e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1280:	2301      	movs	r3, #1
    1282:	4083      	lsls	r3, r0
    1284:	430b      	orrs	r3, r1
    1286:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1288:	a909      	add	r1, sp, #36	; 0x24
    128a:	7b23      	ldrb	r3, [r4, #12]
    128c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    128e:	b2ed      	uxtb	r5, r5
    1290:	0028      	movs	r0, r5
    1292:	4b9e      	ldr	r3, [pc, #632]	; (150c <i2c_master_init+0x2b4>)
    1294:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1296:	0028      	movs	r0, r5
    1298:	4b9d      	ldr	r3, [pc, #628]	; (1510 <i2c_master_init+0x2b8>)
    129a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    129c:	7b20      	ldrb	r0, [r4, #12]
    129e:	2100      	movs	r1, #0
    12a0:	4b9c      	ldr	r3, [pc, #624]	; (1514 <i2c_master_init+0x2bc>)
    12a2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12a4:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    12a6:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12a8:	079b      	lsls	r3, r3, #30
    12aa:	d505      	bpl.n	12b8 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    12ac:	b00a      	add	sp, #40	; 0x28
    12ae:	bc1c      	pop	{r2, r3, r4}
    12b0:	4690      	mov	r8, r2
    12b2:	4699      	mov	r9, r3
    12b4:	46a2      	mov	sl, r4
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12b8:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    12ba:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12bc:	07db      	lsls	r3, r3, #31
    12be:	d4f5      	bmi.n	12ac <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12c0:	6838      	ldr	r0, [r7, #0]
    12c2:	4b90      	ldr	r3, [pc, #576]	; (1504 <i2c_master_init+0x2ac>)
    12c4:	4699      	mov	r9, r3
    12c6:	4798      	blx	r3
    12c8:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    12ca:	4993      	ldr	r1, [pc, #588]	; (1518 <i2c_master_init+0x2c0>)
    12cc:	4b93      	ldr	r3, [pc, #588]	; (151c <i2c_master_init+0x2c4>)
    12ce:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12d0:	00ad      	lsls	r5, r5, #2
    12d2:	4b93      	ldr	r3, [pc, #588]	; (1520 <i2c_master_init+0x2c8>)
    12d4:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    12d6:	2300      	movs	r3, #0
    12d8:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    12da:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    12dc:	2500      	movs	r5, #0
    12de:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    12e0:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    12e2:	2225      	movs	r2, #37	; 0x25
    12e4:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    12e6:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    12e8:	3314      	adds	r3, #20
    12ea:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12ec:	683b      	ldr	r3, [r7, #0]
    12ee:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    12f0:	0018      	movs	r0, r3
    12f2:	47c8      	blx	r9
    12f4:	4681      	mov	r9, r0
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	aa08      	add	r2, sp, #32
    12fa:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12fc:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12fe:	2301      	movs	r3, #1
    1300:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1302:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1304:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1306:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1308:	2800      	cmp	r0, #0
    130a:	d100      	bne.n	130e <i2c_master_init+0xb6>
    130c:	e0af      	b.n	146e <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    130e:	ab08      	add	r3, sp, #32
    1310:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1312:	2302      	movs	r3, #2
    1314:	aa08      	add	r2, sp, #32
    1316:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1318:	0c00      	lsrs	r0, r0, #16
    131a:	b2c0      	uxtb	r0, r0
    131c:	0011      	movs	r1, r2
    131e:	4b81      	ldr	r3, [pc, #516]	; (1524 <i2c_master_init+0x2cc>)
    1320:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1322:	2e00      	cmp	r6, #0
    1324:	d100      	bne.n	1328 <i2c_master_init+0xd0>
    1326:	e0a7      	b.n	1478 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1328:	ab08      	add	r3, sp, #32
    132a:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    132c:	2302      	movs	r3, #2
    132e:	aa08      	add	r2, sp, #32
    1330:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1332:	0c36      	lsrs	r6, r6, #16
    1334:	b2f0      	uxtb	r0, r6
    1336:	0011      	movs	r1, r2
    1338:	4b7a      	ldr	r3, [pc, #488]	; (1524 <i2c_master_init+0x2cc>)
    133a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    133c:	8aa3      	ldrh	r3, [r4, #20]
    133e:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    1340:	8ae3      	ldrh	r3, [r4, #22]
    1342:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1344:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1346:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1348:	2b00      	cmp	r3, #0
    134a:	d104      	bne.n	1356 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    134c:	4b76      	ldr	r3, [pc, #472]	; (1528 <i2c_master_init+0x2d0>)
    134e:	789b      	ldrb	r3, [r3, #2]
    1350:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1352:	0fdb      	lsrs	r3, r3, #31
    1354:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1356:	68a1      	ldr	r1, [r4, #8]
    1358:	6923      	ldr	r3, [r4, #16]
    135a:	430b      	orrs	r3, r1
    135c:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    135e:	2224      	movs	r2, #36	; 0x24
    1360:	5ca2      	ldrb	r2, [r4, r2]
    1362:	2a00      	cmp	r2, #0
    1364:	d002      	beq.n	136c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1366:	2280      	movs	r2, #128	; 0x80
    1368:	05d2      	lsls	r2, r2, #23
    136a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    136c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    136e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1370:	222c      	movs	r2, #44	; 0x2c
    1372:	5ca2      	ldrb	r2, [r4, r2]
    1374:	2a00      	cmp	r2, #0
    1376:	d103      	bne.n	1380 <i2c_master_init+0x128>
    1378:	2280      	movs	r2, #128	; 0x80
    137a:	0492      	lsls	r2, r2, #18
    137c:	4291      	cmp	r1, r2
    137e:	d102      	bne.n	1386 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1380:	2280      	movs	r2, #128	; 0x80
    1382:	0512      	lsls	r2, r2, #20
    1384:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1386:	222d      	movs	r2, #45	; 0x2d
    1388:	5ca2      	ldrb	r2, [r4, r2]
    138a:	2a00      	cmp	r2, #0
    138c:	d002      	beq.n	1394 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    138e:	2280      	movs	r2, #128	; 0x80
    1390:	0412      	lsls	r2, r2, #16
    1392:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    1394:	222e      	movs	r2, #46	; 0x2e
    1396:	5ca2      	ldrb	r2, [r4, r2]
    1398:	2a00      	cmp	r2, #0
    139a:	d002      	beq.n	13a2 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    139c:	2280      	movs	r2, #128	; 0x80
    139e:	03d2      	lsls	r2, r2, #15
    13a0:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    13a2:	4642      	mov	r2, r8
    13a4:	6812      	ldr	r2, [r2, #0]
    13a6:	4313      	orrs	r3, r2
    13a8:	4642      	mov	r2, r8
    13aa:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    13ac:	2380      	movs	r3, #128	; 0x80
    13ae:	005b      	lsls	r3, r3, #1
    13b0:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    13b2:	464d      	mov	r5, r9
    13b4:	3512      	adds	r5, #18
    13b6:	b2e8      	uxtb	r0, r5
    13b8:	4b5c      	ldr	r3, [pc, #368]	; (152c <i2c_master_init+0x2d4>)
    13ba:	4798      	blx	r3
    13bc:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    13be:	23fa      	movs	r3, #250	; 0xfa
    13c0:	009b      	lsls	r3, r3, #2
    13c2:	6822      	ldr	r2, [r4, #0]
    13c4:	435a      	muls	r2, r3
    13c6:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    13c8:	6863      	ldr	r3, [r4, #4]
    13ca:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    13cc:	4d58      	ldr	r5, [pc, #352]	; (1530 <i2c_master_init+0x2d8>)
    13ce:	47a8      	blx	r5
    13d0:	9000      	str	r0, [sp, #0]
    13d2:	9101      	str	r1, [sp, #4]
    13d4:	464b      	mov	r3, r9
    13d6:	0058      	lsls	r0, r3, #1
    13d8:	47a8      	blx	r5
    13da:	9002      	str	r0, [sp, #8]
    13dc:	9103      	str	r1, [sp, #12]
    13de:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    13e0:	47a8      	blx	r5
    13e2:	9004      	str	r0, [sp, #16]
    13e4:	9105      	str	r1, [sp, #20]
    13e6:	4f53      	ldr	r7, [pc, #332]	; (1534 <i2c_master_init+0x2dc>)
    13e8:	4a53      	ldr	r2, [pc, #332]	; (1538 <i2c_master_init+0x2e0>)
    13ea:	4b54      	ldr	r3, [pc, #336]	; (153c <i2c_master_init+0x2e4>)
    13ec:	9800      	ldr	r0, [sp, #0]
    13ee:	9901      	ldr	r1, [sp, #4]
    13f0:	47b8      	blx	r7
    13f2:	0002      	movs	r2, r0
    13f4:	000b      	movs	r3, r1
    13f6:	9804      	ldr	r0, [sp, #16]
    13f8:	9905      	ldr	r1, [sp, #20]
    13fa:	47b8      	blx	r7
    13fc:	4e50      	ldr	r6, [pc, #320]	; (1540 <i2c_master_init+0x2e8>)
    13fe:	2200      	movs	r2, #0
    1400:	4b50      	ldr	r3, [pc, #320]	; (1544 <i2c_master_init+0x2ec>)
    1402:	47b0      	blx	r6
    1404:	9004      	str	r0, [sp, #16]
    1406:	9105      	str	r1, [sp, #20]
    1408:	4648      	mov	r0, r9
    140a:	47a8      	blx	r5
    140c:	0002      	movs	r2, r0
    140e:	000b      	movs	r3, r1
    1410:	9804      	ldr	r0, [sp, #16]
    1412:	9905      	ldr	r1, [sp, #20]
    1414:	47b8      	blx	r7
    1416:	0002      	movs	r2, r0
    1418:	000b      	movs	r3, r1
    141a:	4d4b      	ldr	r5, [pc, #300]	; (1548 <i2c_master_init+0x2f0>)
    141c:	9800      	ldr	r0, [sp, #0]
    141e:	9901      	ldr	r1, [sp, #4]
    1420:	47a8      	blx	r5
    1422:	9a02      	ldr	r2, [sp, #8]
    1424:	9b03      	ldr	r3, [sp, #12]
    1426:	47b0      	blx	r6
    1428:	2200      	movs	r2, #0
    142a:	4b48      	ldr	r3, [pc, #288]	; (154c <i2c_master_init+0x2f4>)
    142c:	47a8      	blx	r5
    142e:	9a02      	ldr	r2, [sp, #8]
    1430:	9b03      	ldr	r3, [sp, #12]
    1432:	4d47      	ldr	r5, [pc, #284]	; (1550 <i2c_master_init+0x2f8>)
    1434:	47a8      	blx	r5
    1436:	4b47      	ldr	r3, [pc, #284]	; (1554 <i2c_master_init+0x2fc>)
    1438:	4798      	blx	r3
    143a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    143c:	2380      	movs	r3, #128	; 0x80
    143e:	049b      	lsls	r3, r3, #18
    1440:	68a2      	ldr	r2, [r4, #8]
    1442:	429a      	cmp	r2, r3
    1444:	d01e      	beq.n	1484 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1446:	0003      	movs	r3, r0
    1448:	2040      	movs	r0, #64	; 0x40
    144a:	2dff      	cmp	r5, #255	; 0xff
    144c:	d900      	bls.n	1450 <i2c_master_init+0x1f8>
    144e:	e72d      	b.n	12ac <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    1450:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1452:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1454:	25ff      	movs	r5, #255	; 0xff
    1456:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1458:	0624      	lsls	r4, r4, #24
    145a:	4325      	orrs	r5, r4
    145c:	0400      	lsls	r0, r0, #16
    145e:	23ff      	movs	r3, #255	; 0xff
    1460:	041b      	lsls	r3, r3, #16
    1462:	4018      	ands	r0, r3
    1464:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1466:	4643      	mov	r3, r8
    1468:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    146a:	2000      	movs	r0, #0
    146c:	e71e      	b.n	12ac <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    146e:	2100      	movs	r1, #0
    1470:	4640      	mov	r0, r8
    1472:	4b39      	ldr	r3, [pc, #228]	; (1558 <i2c_master_init+0x300>)
    1474:	4798      	blx	r3
    1476:	e74a      	b.n	130e <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1478:	2101      	movs	r1, #1
    147a:	4640      	mov	r0, r8
    147c:	4b36      	ldr	r3, [pc, #216]	; (1558 <i2c_master_init+0x300>)
    147e:	4798      	blx	r3
    1480:	0006      	movs	r6, r0
    1482:	e751      	b.n	1328 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1484:	26fa      	movs	r6, #250	; 0xfa
    1486:	00b6      	lsls	r6, r6, #2
    1488:	4653      	mov	r3, sl
    148a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    148c:	9800      	ldr	r0, [sp, #0]
    148e:	9901      	ldr	r1, [sp, #4]
    1490:	0002      	movs	r2, r0
    1492:	000b      	movs	r3, r1
    1494:	4c2a      	ldr	r4, [pc, #168]	; (1540 <i2c_master_init+0x2e8>)
    1496:	47a0      	blx	r4
    1498:	9000      	str	r0, [sp, #0]
    149a:	9101      	str	r1, [sp, #4]
    149c:	0030      	movs	r0, r6
    149e:	4b24      	ldr	r3, [pc, #144]	; (1530 <i2c_master_init+0x2d8>)
    14a0:	4798      	blx	r3
    14a2:	2200      	movs	r2, #0
    14a4:	4b2d      	ldr	r3, [pc, #180]	; (155c <i2c_master_init+0x304>)
    14a6:	47b8      	blx	r7
    14a8:	0002      	movs	r2, r0
    14aa:	000b      	movs	r3, r1
    14ac:	9800      	ldr	r0, [sp, #0]
    14ae:	9901      	ldr	r1, [sp, #4]
    14b0:	4c27      	ldr	r4, [pc, #156]	; (1550 <i2c_master_init+0x2f8>)
    14b2:	47a0      	blx	r4
    14b4:	2200      	movs	r2, #0
    14b6:	4b25      	ldr	r3, [pc, #148]	; (154c <i2c_master_init+0x2f4>)
    14b8:	4c23      	ldr	r4, [pc, #140]	; (1548 <i2c_master_init+0x2f0>)
    14ba:	47a0      	blx	r4
    14bc:	4b25      	ldr	r3, [pc, #148]	; (1554 <i2c_master_init+0x2fc>)
    14be:	4798      	blx	r3
    14c0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    14c2:	d00c      	beq.n	14de <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    14c4:	0031      	movs	r1, r6
    14c6:	9807      	ldr	r0, [sp, #28]
    14c8:	4b25      	ldr	r3, [pc, #148]	; (1560 <i2c_master_init+0x308>)
    14ca:	4798      	blx	r3
    14cc:	3802      	subs	r0, #2
    14ce:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    14d0:	002b      	movs	r3, r5
    14d2:	2dff      	cmp	r5, #255	; 0xff
    14d4:	d80c      	bhi.n	14f0 <i2c_master_init+0x298>
    14d6:	28ff      	cmp	r0, #255	; 0xff
    14d8:	d9bc      	bls.n	1454 <i2c_master_init+0x1fc>
    14da:	2040      	movs	r0, #64	; 0x40
    14dc:	e6e6      	b.n	12ac <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    14de:	0071      	lsls	r1, r6, #1
    14e0:	1e48      	subs	r0, r1, #1
    14e2:	9b07      	ldr	r3, [sp, #28]
    14e4:	469c      	mov	ip, r3
    14e6:	4460      	add	r0, ip
    14e8:	4b1d      	ldr	r3, [pc, #116]	; (1560 <i2c_master_init+0x308>)
    14ea:	4798      	blx	r3
    14ec:	3801      	subs	r0, #1
    14ee:	e7ef      	b.n	14d0 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    14f0:	2040      	movs	r0, #64	; 0x40
    14f2:	e6db      	b.n	12ac <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    14f4:	4a04      	ldr	r2, [pc, #16]	; (1508 <i2c_master_init+0x2b0>)
    14f6:	6a13      	ldr	r3, [r2, #32]
    14f8:	2102      	movs	r1, #2
    14fa:	430b      	orrs	r3, r1
    14fc:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    14fe:	2518      	movs	r5, #24
    1500:	e6c2      	b.n	1288 <i2c_master_init+0x30>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00001e99 	.word	0x00001e99
    1508:	40000400 	.word	0x40000400
    150c:	000030e5 	.word	0x000030e5
    1510:	00003075 	.word	0x00003075
    1514:	00001cf1 	.word	0x00001cf1
    1518:	0000198d 	.word	0x0000198d
    151c:	00001ed5 	.word	0x00001ed5
    1520:	20001148 	.word	0x20001148
    1524:	000031e1 	.word	0x000031e1
    1528:	41002000 	.word	0x41002000
    152c:	00003109 	.word	0x00003109
    1530:	000152f5 	.word	0x000152f5
    1534:	00014761 	.word	0x00014761
    1538:	e826d695 	.word	0xe826d695
    153c:	3e112e0b 	.word	0x3e112e0b
    1540:	00013ad9 	.word	0x00013ad9
    1544:	40240000 	.word	0x40240000
    1548:	00014c61 	.word	0x00014c61
    154c:	3ff00000 	.word	0x3ff00000
    1550:	000140f9 	.word	0x000140f9
    1554:	0001528d 	.word	0x0001528d
    1558:	00001d3d 	.word	0x00001d3d
    155c:	40080000 	.word	0x40080000
    1560:	0001270d 	.word	0x0001270d

00001564 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1564:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1566:	7e1a      	ldrb	r2, [r3, #24]
    1568:	0792      	lsls	r2, r2, #30
    156a:	d507      	bpl.n	157c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    156c:	2202      	movs	r2, #2
    156e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1570:	8b5b      	ldrh	r3, [r3, #26]
    1572:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1574:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1576:	17db      	asrs	r3, r3, #31
    1578:	4018      	ands	r0, r3
}
    157a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    157c:	8b5a      	ldrh	r2, [r3, #26]
    157e:	0752      	lsls	r2, r2, #29
    1580:	d506      	bpl.n	1590 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1582:	6859      	ldr	r1, [r3, #4]
    1584:	22c0      	movs	r2, #192	; 0xc0
    1586:	0292      	lsls	r2, r2, #10
    1588:	430a      	orrs	r2, r1
    158a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    158c:	2018      	movs	r0, #24
    158e:	e7f4      	b.n	157a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1590:	2000      	movs	r0, #0
    1592:	e7f2      	b.n	157a <_i2c_master_address_response+0x16>

00001594 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1594:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1596:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1598:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    159a:	2401      	movs	r4, #1
    159c:	2502      	movs	r5, #2
    159e:	7e11      	ldrb	r1, [r2, #24]
    15a0:	4221      	tst	r1, r4
    15a2:	d10b      	bne.n	15bc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    15a4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    15a6:	4229      	tst	r1, r5
    15a8:	d106      	bne.n	15b8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    15aa:	3301      	adds	r3, #1
    15ac:	b29b      	uxth	r3, r3
    15ae:	8901      	ldrh	r1, [r0, #8]
    15b0:	4299      	cmp	r1, r3
    15b2:	d8f4      	bhi.n	159e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    15b4:	2012      	movs	r0, #18
    15b6:	e002      	b.n	15be <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    15b8:	2000      	movs	r0, #0
    15ba:	e000      	b.n	15be <_i2c_master_wait_for_bus+0x2a>
    15bc:	2000      	movs	r0, #0
}
    15be:	bd30      	pop	{r4, r5, pc}

000015c0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    15c0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15c2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15c4:	6862      	ldr	r2, [r4, #4]
    15c6:	2380      	movs	r3, #128	; 0x80
    15c8:	02db      	lsls	r3, r3, #11
    15ca:	4313      	orrs	r3, r2
    15cc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    15ce:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    15d0:	4b02      	ldr	r3, [pc, #8]	; (15dc <_i2c_master_send_hs_master_code+0x1c>)
    15d2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    15d4:	2301      	movs	r3, #1
    15d6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    15d8:	bd10      	pop	{r4, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	00001595 	.word	0x00001595

000015e0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    15e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e2:	46de      	mov	lr, fp
    15e4:	4657      	mov	r7, sl
    15e6:	464e      	mov	r6, r9
    15e8:	4645      	mov	r5, r8
    15ea:	b5e0      	push	{r5, r6, r7, lr}
    15ec:	b083      	sub	sp, #12
    15ee:	0006      	movs	r6, r0
    15f0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15f2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    15f4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15f6:	682b      	ldr	r3, [r5, #0]
    15f8:	011b      	lsls	r3, r3, #4
    15fa:	0fdb      	lsrs	r3, r3, #31
    15fc:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    15fe:	7a4b      	ldrb	r3, [r1, #9]
    1600:	2b00      	cmp	r3, #0
    1602:	d12b      	bne.n	165c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1604:	686b      	ldr	r3, [r5, #4]
    1606:	4a58      	ldr	r2, [pc, #352]	; (1768 <_i2c_master_read_packet+0x188>)
    1608:	4013      	ands	r3, r2
    160a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    160c:	464b      	mov	r3, r9
    160e:	7a1b      	ldrb	r3, [r3, #8]
    1610:	2b00      	cmp	r3, #0
    1612:	d127      	bne.n	1664 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1614:	464b      	mov	r3, r9
    1616:	881b      	ldrh	r3, [r3, #0]
    1618:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    161a:	464a      	mov	r2, r9
    161c:	7a52      	ldrb	r2, [r2, #9]
    161e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1620:	4313      	orrs	r3, r2
    1622:	2201      	movs	r2, #1
    1624:	4313      	orrs	r3, r2
    1626:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1628:	0030      	movs	r0, r6
    162a:	4b50      	ldr	r3, [pc, #320]	; (176c <_i2c_master_read_packet+0x18c>)
    162c:	4798      	blx	r3
    162e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1630:	4653      	mov	r3, sl
    1632:	2b00      	cmp	r3, #0
    1634:	d003      	beq.n	163e <_i2c_master_read_packet+0x5e>
    1636:	464b      	mov	r3, r9
    1638:	885b      	ldrh	r3, [r3, #2]
    163a:	2b01      	cmp	r3, #1
    163c:	d03b      	beq.n	16b6 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    163e:	686b      	ldr	r3, [r5, #4]
    1640:	4a49      	ldr	r2, [pc, #292]	; (1768 <_i2c_master_read_packet+0x188>)
    1642:	4013      	ands	r3, r2
    1644:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1646:	9b01      	ldr	r3, [sp, #4]
    1648:	2b00      	cmp	r3, #0
    164a:	d03a      	beq.n	16c2 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    164c:	9801      	ldr	r0, [sp, #4]
    164e:	b003      	add	sp, #12
    1650:	bc3c      	pop	{r2, r3, r4, r5}
    1652:	4690      	mov	r8, r2
    1654:	4699      	mov	r9, r3
    1656:	46a2      	mov	sl, r4
    1658:	46ab      	mov	fp, r5
    165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    165c:	7a89      	ldrb	r1, [r1, #10]
    165e:	4b44      	ldr	r3, [pc, #272]	; (1770 <_i2c_master_read_packet+0x190>)
    1660:	4798      	blx	r3
    1662:	e7cf      	b.n	1604 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    1664:	464b      	mov	r3, r9
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    166a:	464a      	mov	r2, r9
    166c:	7a52      	ldrb	r2, [r2, #9]
    166e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1670:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1672:	2280      	movs	r2, #128	; 0x80
    1674:	0212      	lsls	r2, r2, #8
    1676:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1678:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    167a:	0030      	movs	r0, r6
    167c:	4b3b      	ldr	r3, [pc, #236]	; (176c <_i2c_master_read_packet+0x18c>)
    167e:	4798      	blx	r3
    1680:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1682:	686b      	ldr	r3, [r5, #4]
    1684:	4a38      	ldr	r2, [pc, #224]	; (1768 <_i2c_master_read_packet+0x188>)
    1686:	4013      	ands	r3, r2
    1688:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    168a:	2800      	cmp	r0, #0
    168c:	d1de      	bne.n	164c <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    168e:	0030      	movs	r0, r6
    1690:	4b38      	ldr	r3, [pc, #224]	; (1774 <_i2c_master_read_packet+0x194>)
    1692:	4798      	blx	r3
    1694:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    1696:	2800      	cmp	r0, #0
    1698:	d1d8      	bne.n	164c <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    169a:	464b      	mov	r3, r9
    169c:	881b      	ldrh	r3, [r3, #0]
    169e:	0a1b      	lsrs	r3, r3, #8
    16a0:	2278      	movs	r2, #120	; 0x78
    16a2:	4313      	orrs	r3, r2
    16a4:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    16a6:	464a      	mov	r2, r9
    16a8:	7a52      	ldrb	r2, [r2, #9]
    16aa:	0392      	lsls	r2, r2, #14
    16ac:	2101      	movs	r1, #1
    16ae:	430a      	orrs	r2, r1
    16b0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    16b2:	626b      	str	r3, [r5, #36]	; 0x24
    16b4:	e7b8      	b.n	1628 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16b6:	686a      	ldr	r2, [r5, #4]
    16b8:	2380      	movs	r3, #128	; 0x80
    16ba:	02db      	lsls	r3, r3, #11
    16bc:	4313      	orrs	r3, r2
    16be:	606b      	str	r3, [r5, #4]
    16c0:	e7c1      	b.n	1646 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    16c2:	0030      	movs	r0, r6
    16c4:	4b2b      	ldr	r3, [pc, #172]	; (1774 <_i2c_master_read_packet+0x194>)
    16c6:	4798      	blx	r3
    16c8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    16ca:	2800      	cmp	r0, #0
    16cc:	d1be      	bne.n	164c <_i2c_master_read_packet+0x6c>
    16ce:	3c01      	subs	r4, #1
    16d0:	b2a4      	uxth	r4, r4
    16d2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    16d4:	4b28      	ldr	r3, [pc, #160]	; (1778 <_i2c_master_read_packet+0x198>)
    16d6:	469b      	mov	fp, r3
    16d8:	e015      	b.n	1706 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    16da:	2c01      	cmp	r4, #1
    16dc:	d020      	beq.n	1720 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    16de:	0030      	movs	r0, r6
    16e0:	4b26      	ldr	r3, [pc, #152]	; (177c <_i2c_master_read_packet+0x19c>)
    16e2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    16e4:	4643      	mov	r3, r8
    16e6:	1c5f      	adds	r7, r3, #1
    16e8:	b2bf      	uxth	r7, r7
    16ea:	2328      	movs	r3, #40	; 0x28
    16ec:	5ceb      	ldrb	r3, [r5, r3]
    16ee:	464a      	mov	r2, r9
    16f0:	6852      	ldr	r2, [r2, #4]
    16f2:	4641      	mov	r1, r8
    16f4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    16f6:	0030      	movs	r0, r6
    16f8:	4b1c      	ldr	r3, [pc, #112]	; (176c <_i2c_master_read_packet+0x18c>)
    16fa:	4798      	blx	r3
    16fc:	3c01      	subs	r4, #1
    16fe:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1700:	2800      	cmp	r0, #0
    1702:	d115      	bne.n	1730 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    1704:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    1706:	455c      	cmp	r4, fp
    1708:	d014      	beq.n	1734 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    170a:	8b6b      	ldrh	r3, [r5, #26]
    170c:	069b      	lsls	r3, r3, #26
    170e:	d527      	bpl.n	1760 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1710:	7af3      	ldrb	r3, [r6, #11]
    1712:	2b00      	cmp	r3, #0
    1714:	d0e3      	beq.n	16de <_i2c_master_read_packet+0xfe>
    1716:	4653      	mov	r3, sl
    1718:	2b00      	cmp	r3, #0
    171a:	d1de      	bne.n	16da <_i2c_master_read_packet+0xfa>
    171c:	2c00      	cmp	r4, #0
    171e:	d1de      	bne.n	16de <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1720:	686a      	ldr	r2, [r5, #4]
    1722:	2380      	movs	r3, #128	; 0x80
    1724:	02db      	lsls	r3, r3, #11
    1726:	4313      	orrs	r3, r2
    1728:	606b      	str	r3, [r5, #4]
    172a:	3c01      	subs	r4, #1
    172c:	b2a4      	uxth	r4, r4
    172e:	e7ea      	b.n	1706 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    1730:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    1732:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1734:	7ab3      	ldrb	r3, [r6, #10]
    1736:	2b00      	cmp	r3, #0
    1738:	d109      	bne.n	174e <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    173a:	0030      	movs	r0, r6
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <_i2c_master_read_packet+0x19c>)
    173e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1740:	2328      	movs	r3, #40	; 0x28
    1742:	5cea      	ldrb	r2, [r5, r3]
    1744:	464b      	mov	r3, r9
    1746:	685b      	ldr	r3, [r3, #4]
    1748:	4641      	mov	r1, r8
    174a:	545a      	strb	r2, [r3, r1]
    174c:	e77e      	b.n	164c <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    174e:	0030      	movs	r0, r6
    1750:	4b0a      	ldr	r3, [pc, #40]	; (177c <_i2c_master_read_packet+0x19c>)
    1752:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1754:	686a      	ldr	r2, [r5, #4]
    1756:	23c0      	movs	r3, #192	; 0xc0
    1758:	029b      	lsls	r3, r3, #10
    175a:	4313      	orrs	r3, r2
    175c:	606b      	str	r3, [r5, #4]
    175e:	e7ec      	b.n	173a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1760:	2341      	movs	r3, #65	; 0x41
    1762:	9301      	str	r3, [sp, #4]
    1764:	e772      	b.n	164c <_i2c_master_read_packet+0x6c>
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	fffbffff 	.word	0xfffbffff
    176c:	00001595 	.word	0x00001595
    1770:	000015c1 	.word	0x000015c1
    1774:	00001565 	.word	0x00001565
    1778:	0000ffff 	.word	0x0000ffff
    177c:	0000124d 	.word	0x0000124d

00001780 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	46de      	mov	lr, fp
    1784:	4657      	mov	r7, sl
    1786:	464e      	mov	r6, r9
    1788:	4645      	mov	r5, r8
    178a:	b5e0      	push	{r5, r6, r7, lr}
    178c:	b083      	sub	sp, #12
    178e:	0006      	movs	r6, r0
    1790:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1792:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1794:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    1796:	4b32      	ldr	r3, [pc, #200]	; (1860 <_i2c_master_write_packet+0xe0>)
    1798:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    179a:	7a7b      	ldrb	r3, [r7, #9]
    179c:	2b00      	cmp	r3, #0
    179e:	d11d      	bne.n	17dc <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17a0:	686b      	ldr	r3, [r5, #4]
    17a2:	4a30      	ldr	r2, [pc, #192]	; (1864 <_i2c_master_write_packet+0xe4>)
    17a4:	4013      	ands	r3, r2
    17a6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    17a8:	7a3b      	ldrb	r3, [r7, #8]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d01b      	beq.n	17e6 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17ae:	883b      	ldrh	r3, [r7, #0]
    17b0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17b2:	7a7a      	ldrb	r2, [r7, #9]
    17b4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17b6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17b8:	2280      	movs	r2, #128	; 0x80
    17ba:	0212      	lsls	r2, r2, #8
    17bc:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17be:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17c0:	0030      	movs	r0, r6
    17c2:	4b29      	ldr	r3, [pc, #164]	; (1868 <_i2c_master_write_packet+0xe8>)
    17c4:	4798      	blx	r3
    17c6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    17c8:	2800      	cmp	r0, #0
    17ca:	d013      	beq.n	17f4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    17cc:	9801      	ldr	r0, [sp, #4]
    17ce:	b003      	add	sp, #12
    17d0:	bc3c      	pop	{r2, r3, r4, r5}
    17d2:	4690      	mov	r8, r2
    17d4:	4699      	mov	r9, r3
    17d6:	46a2      	mov	sl, r4
    17d8:	46ab      	mov	fp, r5
    17da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    17dc:	7ab9      	ldrb	r1, [r7, #10]
    17de:	0030      	movs	r0, r6
    17e0:	4b22      	ldr	r3, [pc, #136]	; (186c <_i2c_master_write_packet+0xec>)
    17e2:	4798      	blx	r3
    17e4:	e7dc      	b.n	17a0 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17e6:	883b      	ldrh	r3, [r7, #0]
    17e8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    17ea:	7a7a      	ldrb	r2, [r7, #9]
    17ec:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17ee:	4313      	orrs	r3, r2
    17f0:	626b      	str	r3, [r5, #36]	; 0x24
    17f2:	e7e5      	b.n	17c0 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    17f4:	0030      	movs	r0, r6
    17f6:	4b1e      	ldr	r3, [pc, #120]	; (1870 <_i2c_master_write_packet+0xf0>)
    17f8:	4798      	blx	r3
    17fa:	1e03      	subs	r3, r0, #0
    17fc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    17fe:	d1e5      	bne.n	17cc <_i2c_master_write_packet+0x4c>
    1800:	46a0      	mov	r8, r4
    1802:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1804:	3320      	adds	r3, #32
    1806:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1808:	4b15      	ldr	r3, [pc, #84]	; (1860 <_i2c_master_write_packet+0xe0>)
    180a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    180c:	4b16      	ldr	r3, [pc, #88]	; (1868 <_i2c_master_write_packet+0xe8>)
    180e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1810:	4544      	cmp	r4, r8
    1812:	d015      	beq.n	1840 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1814:	8b6b      	ldrh	r3, [r5, #26]
    1816:	464a      	mov	r2, r9
    1818:	4213      	tst	r3, r2
    181a:	d01d      	beq.n	1858 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    181c:	0030      	movs	r0, r6
    181e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	5d1a      	ldrb	r2, [r3, r4]
    1824:	2328      	movs	r3, #40	; 0x28
    1826:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1828:	0030      	movs	r0, r6
    182a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    182c:	2800      	cmp	r0, #0
    182e:	d106      	bne.n	183e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1830:	8b6b      	ldrh	r3, [r5, #26]
    1832:	3401      	adds	r4, #1
    1834:	075b      	lsls	r3, r3, #29
    1836:	d5eb      	bpl.n	1810 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1838:	231e      	movs	r3, #30
    183a:	9301      	str	r3, [sp, #4]
    183c:	e000      	b.n	1840 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    183e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1840:	7ab3      	ldrb	r3, [r6, #10]
    1842:	2b00      	cmp	r3, #0
    1844:	d0c2      	beq.n	17cc <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    1846:	0030      	movs	r0, r6
    1848:	4b05      	ldr	r3, [pc, #20]	; (1860 <_i2c_master_write_packet+0xe0>)
    184a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    184c:	686a      	ldr	r2, [r5, #4]
    184e:	23c0      	movs	r3, #192	; 0xc0
    1850:	029b      	lsls	r3, r3, #10
    1852:	4313      	orrs	r3, r2
    1854:	606b      	str	r3, [r5, #4]
    1856:	e7b9      	b.n	17cc <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1858:	2341      	movs	r3, #65	; 0x41
    185a:	9301      	str	r3, [sp, #4]
    185c:	e7b6      	b.n	17cc <_i2c_master_write_packet+0x4c>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	0000124d 	.word	0x0000124d
    1864:	fffbffff 	.word	0xfffbffff
    1868:	00001595 	.word	0x00001595
    186c:	000015c1 	.word	0x000015c1
    1870:	00001565 	.word	0x00001565

00001874 <i2c_master_read_packet_wait>:
{
    1874:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    1876:	8b83      	ldrh	r3, [r0, #28]
    1878:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    187a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    187c:	2b00      	cmp	r3, #0
    187e:	d001      	beq.n	1884 <i2c_master_read_packet_wait+0x10>
}
    1880:	0010      	movs	r0, r2
    1882:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1884:	3301      	adds	r3, #1
    1886:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1888:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    188a:	4b02      	ldr	r3, [pc, #8]	; (1894 <i2c_master_read_packet_wait+0x20>)
    188c:	4798      	blx	r3
    188e:	0002      	movs	r2, r0
    1890:	e7f6      	b.n	1880 <i2c_master_read_packet_wait+0xc>
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	000015e1 	.word	0x000015e1

00001898 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1898:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    189a:	8b83      	ldrh	r3, [r0, #28]
    189c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    189e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    18a0:	2b00      	cmp	r3, #0
    18a2:	d001      	beq.n	18a8 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    18a4:	0010      	movs	r0, r2
    18a6:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    18a8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    18aa:	3301      	adds	r3, #1
    18ac:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    18ae:	4b02      	ldr	r3, [pc, #8]	; (18b8 <i2c_master_write_packet_wait_no_stop+0x20>)
    18b0:	4798      	blx	r3
    18b2:	0002      	movs	r2, r0
    18b4:	e7f6      	b.n	18a4 <i2c_master_write_packet_wait_no_stop+0xc>
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	00001781 	.word	0x00001781

000018bc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    18bc:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    18be:	2207      	movs	r2, #7
    18c0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    18c2:	421a      	tst	r2, r3
    18c4:	d1fc      	bne.n	18c0 <_i2c_master_wait_for_sync+0x4>
}
    18c6:	4770      	bx	lr

000018c8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    18c8:	b570      	push	{r4, r5, r6, lr}
    18ca:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18cc:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    18ce:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    18d0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    18d2:	8b83      	ldrh	r3, [r0, #28]
    18d4:	1aed      	subs	r5, r5, r3
    18d6:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    18d8:	8b83      	ldrh	r3, [r0, #28]
    18da:	3b01      	subs	r3, #1
    18dc:	b29b      	uxth	r3, r3
    18de:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    18e0:	0113      	lsls	r3, r2, #4
    18e2:	d51d      	bpl.n	1920 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    18e4:	7ac3      	ldrb	r3, [r0, #11]
    18e6:	2b00      	cmp	r3, #0
    18e8:	d003      	beq.n	18f2 <_i2c_master_read+0x2a>
    18ea:	8b83      	ldrh	r3, [r0, #28]
    18ec:	b29b      	uxth	r3, r3
    18ee:	2b01      	cmp	r3, #1
    18f0:	d010      	beq.n	1914 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    18f2:	8ba3      	ldrh	r3, [r4, #28]
    18f4:	b29b      	uxth	r3, r3
    18f6:	2b00      	cmp	r3, #0
    18f8:	d102      	bne.n	1900 <_i2c_master_read+0x38>
		if (module->send_stop) {
    18fa:	7aa3      	ldrb	r3, [r4, #10]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d11c      	bne.n	193a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1900:	0020      	movs	r0, r4
    1902:	4b12      	ldr	r3, [pc, #72]	; (194c <_i2c_master_read+0x84>)
    1904:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1906:	6a23      	ldr	r3, [r4, #32]
    1908:	195d      	adds	r5, r3, r5
    190a:	2328      	movs	r3, #40	; 0x28
    190c:	5cf3      	ldrb	r3, [r6, r3]
    190e:	b2db      	uxtb	r3, r3
    1910:	702b      	strb	r3, [r5, #0]
}
    1912:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1914:	6872      	ldr	r2, [r6, #4]
    1916:	2380      	movs	r3, #128	; 0x80
    1918:	02db      	lsls	r3, r3, #11
    191a:	4313      	orrs	r3, r2
    191c:	6073      	str	r3, [r6, #4]
    191e:	e7e8      	b.n	18f2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1920:	7ac3      	ldrb	r3, [r0, #11]
    1922:	2b00      	cmp	r3, #0
    1924:	d0e5      	beq.n	18f2 <_i2c_master_read+0x2a>
    1926:	8b83      	ldrh	r3, [r0, #28]
    1928:	b29b      	uxth	r3, r3
    192a:	2b00      	cmp	r3, #0
    192c:	d1e1      	bne.n	18f2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    192e:	6872      	ldr	r2, [r6, #4]
    1930:	2380      	movs	r3, #128	; 0x80
    1932:	02db      	lsls	r3, r3, #11
    1934:	4313      	orrs	r3, r2
    1936:	6073      	str	r3, [r6, #4]
    1938:	e7db      	b.n	18f2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    193a:	0020      	movs	r0, r4
    193c:	4b03      	ldr	r3, [pc, #12]	; (194c <_i2c_master_read+0x84>)
    193e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1940:	6872      	ldr	r2, [r6, #4]
    1942:	23c0      	movs	r3, #192	; 0xc0
    1944:	029b      	lsls	r3, r3, #10
    1946:	4313      	orrs	r3, r2
    1948:	6073      	str	r3, [r6, #4]
    194a:	e7d9      	b.n	1900 <_i2c_master_read+0x38>
    194c:	000018bd 	.word	0x000018bd

00001950 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1950:	b570      	push	{r4, r5, r6, lr}
    1952:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1954:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1956:	8b6b      	ldrh	r3, [r5, #26]
    1958:	075b      	lsls	r3, r3, #29
    195a:	d503      	bpl.n	1964 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    195c:	221e      	movs	r2, #30
    195e:	2325      	movs	r3, #37	; 0x25
    1960:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1962:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1964:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1966:	8b83      	ldrh	r3, [r0, #28]
    1968:	1af6      	subs	r6, r6, r3
    196a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    196c:	8b83      	ldrh	r3, [r0, #28]
    196e:	3b01      	subs	r3, #1
    1970:	b29b      	uxth	r3, r3
    1972:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1974:	4b04      	ldr	r3, [pc, #16]	; (1988 <_i2c_master_write+0x38>)
    1976:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1978:	6a23      	ldr	r3, [r4, #32]
    197a:	199e      	adds	r6, r3, r6
    197c:	7833      	ldrb	r3, [r6, #0]
    197e:	b2db      	uxtb	r3, r3
    1980:	2228      	movs	r2, #40	; 0x28
    1982:	54ab      	strb	r3, [r5, r2]
    1984:	e7ed      	b.n	1962 <_i2c_master_write+0x12>
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000018bd 	.word	0x000018bd

0000198c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    198c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    198e:	0080      	lsls	r0, r0, #2
    1990:	4b75      	ldr	r3, [pc, #468]	; (1b68 <_i2c_master_interrupt_handler+0x1dc>)
    1992:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1994:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1996:	682b      	ldr	r3, [r5, #0]
    1998:	011b      	lsls	r3, r3, #4
    199a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    199c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    199e:	7e26      	ldrb	r6, [r4, #24]
    19a0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    19a2:	8b63      	ldrh	r3, [r4, #26]
    19a4:	b29b      	uxth	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	d103      	bne.n	19b2 <_i2c_master_interrupt_handler+0x26>
    19aa:	8ba3      	ldrh	r3, [r4, #28]
    19ac:	b29b      	uxth	r3, r3
    19ae:	2b00      	cmp	r3, #0
    19b0:	d123      	bne.n	19fa <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    19b2:	8b63      	ldrh	r3, [r4, #26]
    19b4:	b29b      	uxth	r3, r3
    19b6:	2b00      	cmp	r3, #0
    19b8:	d008      	beq.n	19cc <_i2c_master_interrupt_handler+0x40>
    19ba:	8ba3      	ldrh	r3, [r4, #28]
    19bc:	b29b      	uxth	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	d104      	bne.n	19cc <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    19c2:	3325      	adds	r3, #37	; 0x25
    19c4:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    19c6:	2b05      	cmp	r3, #5
    19c8:	d100      	bne.n	19cc <_i2c_master_interrupt_handler+0x40>
    19ca:	e06d      	b.n	1aa8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    19cc:	8b63      	ldrh	r3, [r4, #26]
    19ce:	b29b      	uxth	r3, r3
    19d0:	2b00      	cmp	r3, #0
    19d2:	d024      	beq.n	1a1e <_i2c_master_interrupt_handler+0x92>
    19d4:	8ba3      	ldrh	r3, [r4, #28]
    19d6:	b29b      	uxth	r3, r3
    19d8:	2b00      	cmp	r3, #0
    19da:	d020      	beq.n	1a1e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    19dc:	8b6b      	ldrh	r3, [r5, #26]
    19de:	069b      	lsls	r3, r3, #26
    19e0:	d500      	bpl.n	19e4 <_i2c_master_interrupt_handler+0x58>
    19e2:	e081      	b.n	1ae8 <_i2c_master_interrupt_handler+0x15c>
    19e4:	2a00      	cmp	r2, #0
    19e6:	d004      	beq.n	19f2 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    19e8:	8ba3      	ldrh	r3, [r4, #28]
    19ea:	b29b      	uxth	r3, r3
    19ec:	2b01      	cmp	r3, #1
    19ee:	d100      	bne.n	19f2 <_i2c_master_interrupt_handler+0x66>
    19f0:	e07a      	b.n	1ae8 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    19f2:	2241      	movs	r2, #65	; 0x41
    19f4:	2325      	movs	r3, #37	; 0x25
    19f6:	54e2      	strb	r2, [r4, r3]
    19f8:	e011      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    19fa:	7e2b      	ldrb	r3, [r5, #24]
    19fc:	07db      	lsls	r3, r3, #31
    19fe:	d507      	bpl.n	1a10 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1a00:	2301      	movs	r3, #1
    1a02:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1a04:	8b6b      	ldrh	r3, [r5, #26]
    1a06:	079b      	lsls	r3, r3, #30
    1a08:	d52e      	bpl.n	1a68 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1a0a:	2241      	movs	r2, #65	; 0x41
    1a0c:	2325      	movs	r3, #37	; 0x25
    1a0e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1a10:	8ba3      	ldrh	r3, [r4, #28]
    1a12:	b29b      	uxth	r3, r3
    1a14:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1a16:	2325      	movs	r3, #37	; 0x25
    1a18:	5ce3      	ldrb	r3, [r4, r3]
    1a1a:	2b05      	cmp	r3, #5
    1a1c:	d038      	beq.n	1a90 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1a1e:	8b63      	ldrh	r3, [r4, #26]
    1a20:	b29b      	uxth	r3, r3
    1a22:	2b00      	cmp	r3, #0
    1a24:	d007      	beq.n	1a36 <_i2c_master_interrupt_handler+0xaa>
    1a26:	8ba3      	ldrh	r3, [r4, #28]
    1a28:	b29b      	uxth	r3, r3
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d103      	bne.n	1a36 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1a2e:	3325      	adds	r3, #37	; 0x25
    1a30:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1a32:	2b05      	cmp	r3, #5
    1a34:	d064      	beq.n	1b00 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1a36:	2325      	movs	r3, #37	; 0x25
    1a38:	5ce3      	ldrb	r3, [r4, r3]
    1a3a:	2b05      	cmp	r3, #5
    1a3c:	d013      	beq.n	1a66 <_i2c_master_interrupt_handler+0xda>
    1a3e:	2325      	movs	r3, #37	; 0x25
    1a40:	5ce3      	ldrb	r3, [r4, r3]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d00f      	beq.n	1a66 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1a46:	2303      	movs	r3, #3
    1a48:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1a4a:	2300      	movs	r3, #0
    1a4c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1a4e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1a50:	3325      	adds	r3, #37	; 0x25
    1a52:	5ce3      	ldrb	r3, [r4, r3]
    1a54:	2b41      	cmp	r3, #65	; 0x41
    1a56:	d003      	beq.n	1a60 <_i2c_master_interrupt_handler+0xd4>
    1a58:	7aa3      	ldrb	r3, [r4, #10]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d000      	beq.n	1a60 <_i2c_master_interrupt_handler+0xd4>
    1a5e:	e075      	b.n	1b4c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1a60:	0773      	lsls	r3, r6, #29
    1a62:	d500      	bpl.n	1a66 <_i2c_master_interrupt_handler+0xda>
    1a64:	e07b      	b.n	1b5e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1a66:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a68:	8b6b      	ldrh	r3, [r5, #26]
    1a6a:	075b      	lsls	r3, r3, #29
    1a6c:	d5d0      	bpl.n	1a10 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a6e:	2218      	movs	r2, #24
    1a70:	2325      	movs	r3, #37	; 0x25
    1a72:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1a74:	2300      	movs	r3, #0
    1a76:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1a78:	7aa3      	ldrb	r3, [r4, #10]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d0c8      	beq.n	1a10 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1a7e:	0020      	movs	r0, r4
    1a80:	4b3a      	ldr	r3, [pc, #232]	; (1b6c <_i2c_master_interrupt_handler+0x1e0>)
    1a82:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a84:	686a      	ldr	r2, [r5, #4]
    1a86:	23c0      	movs	r3, #192	; 0xc0
    1a88:	029b      	lsls	r3, r3, #10
    1a8a:	4313      	orrs	r3, r2
    1a8c:	606b      	str	r3, [r5, #4]
    1a8e:	e7bf      	b.n	1a10 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1a90:	331f      	adds	r3, #31
    1a92:	5ce3      	ldrb	r3, [r4, r3]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d003      	beq.n	1aa0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1a98:	0020      	movs	r0, r4
    1a9a:	4b35      	ldr	r3, [pc, #212]	; (1b70 <_i2c_master_interrupt_handler+0x1e4>)
    1a9c:	4798      	blx	r3
    1a9e:	e7be      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1aa0:	0020      	movs	r0, r4
    1aa2:	4b34      	ldr	r3, [pc, #208]	; (1b74 <_i2c_master_interrupt_handler+0x1e8>)
    1aa4:	4798      	blx	r3
    1aa6:	e7ba      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1aa8:	331f      	adds	r3, #31
    1aaa:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1aac:	2b00      	cmp	r3, #0
    1aae:	d000      	beq.n	1ab2 <_i2c_master_interrupt_handler+0x126>
    1ab0:	e78c      	b.n	19cc <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1ab2:	3303      	adds	r3, #3
    1ab4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1ab6:	2300      	movs	r3, #0
    1ab8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1aba:	3325      	adds	r3, #37	; 0x25
    1abc:	2200      	movs	r2, #0
    1abe:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1ac0:	7aa3      	ldrb	r3, [r4, #10]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d107      	bne.n	1ad6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1ac6:	2301      	movs	r3, #1
    1ac8:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1aca:	07f3      	lsls	r3, r6, #31
    1acc:	d5a7      	bpl.n	1a1e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ace:	68e3      	ldr	r3, [r4, #12]
    1ad0:	0020      	movs	r0, r4
    1ad2:	4798      	blx	r3
    1ad4:	e7a3      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1ad6:	0020      	movs	r0, r4
    1ad8:	4b24      	ldr	r3, [pc, #144]	; (1b6c <_i2c_master_interrupt_handler+0x1e0>)
    1ada:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1adc:	686a      	ldr	r2, [r5, #4]
    1ade:	23c0      	movs	r3, #192	; 0xc0
    1ae0:	029b      	lsls	r3, r3, #10
    1ae2:	4313      	orrs	r3, r2
    1ae4:	606b      	str	r3, [r5, #4]
    1ae6:	e7f0      	b.n	1aca <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1ae8:	2324      	movs	r3, #36	; 0x24
    1aea:	5ce3      	ldrb	r3, [r4, r3]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d103      	bne.n	1af8 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1af0:	0020      	movs	r0, r4
    1af2:	4b20      	ldr	r3, [pc, #128]	; (1b74 <_i2c_master_interrupt_handler+0x1e8>)
    1af4:	4798      	blx	r3
    1af6:	e792      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1af8:	0020      	movs	r0, r4
    1afa:	4b1d      	ldr	r3, [pc, #116]	; (1b70 <_i2c_master_interrupt_handler+0x1e4>)
    1afc:	4798      	blx	r3
    1afe:	e78e      	b.n	1a1e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1b00:	331f      	adds	r3, #31
    1b02:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1b04:	2b01      	cmp	r3, #1
    1b06:	d196      	bne.n	1a36 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1b08:	7e2b      	ldrb	r3, [r5, #24]
    1b0a:	079b      	lsls	r3, r3, #30
    1b0c:	d501      	bpl.n	1b12 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1b0e:	2302      	movs	r3, #2
    1b10:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1b12:	2303      	movs	r3, #3
    1b14:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1b16:	2300      	movs	r3, #0
    1b18:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1b1a:	3325      	adds	r3, #37	; 0x25
    1b1c:	2200      	movs	r2, #0
    1b1e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1b20:	07b3      	lsls	r3, r6, #30
    1b22:	d503      	bpl.n	1b2c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1b24:	2324      	movs	r3, #36	; 0x24
    1b26:	5ce3      	ldrb	r3, [r4, r3]
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d00b      	beq.n	1b44 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1b2c:	07f3      	lsls	r3, r6, #31
    1b2e:	d400      	bmi.n	1b32 <_i2c_master_interrupt_handler+0x1a6>
    1b30:	e781      	b.n	1a36 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1b32:	2324      	movs	r3, #36	; 0x24
    1b34:	5ce3      	ldrb	r3, [r4, r3]
    1b36:	2b00      	cmp	r3, #0
    1b38:	d000      	beq.n	1b3c <_i2c_master_interrupt_handler+0x1b0>
    1b3a:	e77c      	b.n	1a36 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1b3c:	68e3      	ldr	r3, [r4, #12]
    1b3e:	0020      	movs	r0, r4
    1b40:	4798      	blx	r3
    1b42:	e778      	b.n	1a36 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1b44:	6923      	ldr	r3, [r4, #16]
    1b46:	0020      	movs	r0, r4
    1b48:	4798      	blx	r3
    1b4a:	e774      	b.n	1a36 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1b4c:	0020      	movs	r0, r4
    1b4e:	4b07      	ldr	r3, [pc, #28]	; (1b6c <_i2c_master_interrupt_handler+0x1e0>)
    1b50:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1b52:	686a      	ldr	r2, [r5, #4]
    1b54:	23e0      	movs	r3, #224	; 0xe0
    1b56:	02db      	lsls	r3, r3, #11
    1b58:	4313      	orrs	r3, r2
    1b5a:	606b      	str	r3, [r5, #4]
    1b5c:	e780      	b.n	1a60 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1b5e:	6963      	ldr	r3, [r4, #20]
    1b60:	0020      	movs	r0, r4
    1b62:	4798      	blx	r3
}
    1b64:	e77f      	b.n	1a66 <_i2c_master_interrupt_handler+0xda>
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	20001148 	.word	0x20001148
    1b6c:	000018bd 	.word	0x000018bd
    1b70:	000018c9 	.word	0x000018c9
    1b74:	00001951 	.word	0x00001951

00001b78 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7a:	46de      	mov	lr, fp
    1b7c:	4657      	mov	r7, sl
    1b7e:	464e      	mov	r6, r9
    1b80:	4645      	mov	r5, r8
    1b82:	b5e0      	push	{r5, r6, r7, lr}
    1b84:	b087      	sub	sp, #28
    1b86:	4680      	mov	r8, r0
    1b88:	9104      	str	r1, [sp, #16]
    1b8a:	0016      	movs	r6, r2
    1b8c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1b8e:	2200      	movs	r2, #0
    1b90:	2300      	movs	r3, #0
    1b92:	2100      	movs	r1, #0
    1b94:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1b96:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1b98:	2001      	movs	r0, #1
    1b9a:	0021      	movs	r1, r4
    1b9c:	9600      	str	r6, [sp, #0]
    1b9e:	9701      	str	r7, [sp, #4]
    1ba0:	465c      	mov	r4, fp
    1ba2:	9403      	str	r4, [sp, #12]
    1ba4:	4644      	mov	r4, r8
    1ba6:	9405      	str	r4, [sp, #20]
    1ba8:	e013      	b.n	1bd2 <long_division+0x5a>
    1baa:	2420      	movs	r4, #32
    1bac:	1a64      	subs	r4, r4, r1
    1bae:	0005      	movs	r5, r0
    1bb0:	40e5      	lsrs	r5, r4
    1bb2:	46a8      	mov	r8, r5
    1bb4:	e014      	b.n	1be0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1bb6:	9c00      	ldr	r4, [sp, #0]
    1bb8:	9d01      	ldr	r5, [sp, #4]
    1bba:	1b12      	subs	r2, r2, r4
    1bbc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1bbe:	465c      	mov	r4, fp
    1bc0:	464d      	mov	r5, r9
    1bc2:	432c      	orrs	r4, r5
    1bc4:	46a3      	mov	fp, r4
    1bc6:	9c03      	ldr	r4, [sp, #12]
    1bc8:	4645      	mov	r5, r8
    1bca:	432c      	orrs	r4, r5
    1bcc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1bce:	3901      	subs	r1, #1
    1bd0:	d325      	bcc.n	1c1e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1bd2:	2420      	movs	r4, #32
    1bd4:	4264      	negs	r4, r4
    1bd6:	190c      	adds	r4, r1, r4
    1bd8:	d4e7      	bmi.n	1baa <long_division+0x32>
    1bda:	0005      	movs	r5, r0
    1bdc:	40a5      	lsls	r5, r4
    1bde:	46a8      	mov	r8, r5
    1be0:	0004      	movs	r4, r0
    1be2:	408c      	lsls	r4, r1
    1be4:	46a1      	mov	r9, r4
		r = r << 1;
    1be6:	1892      	adds	r2, r2, r2
    1be8:	415b      	adcs	r3, r3
    1bea:	0014      	movs	r4, r2
    1bec:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1bee:	9e05      	ldr	r6, [sp, #20]
    1bf0:	464f      	mov	r7, r9
    1bf2:	403e      	ands	r6, r7
    1bf4:	46b4      	mov	ip, r6
    1bf6:	9e04      	ldr	r6, [sp, #16]
    1bf8:	4647      	mov	r7, r8
    1bfa:	403e      	ands	r6, r7
    1bfc:	46b2      	mov	sl, r6
    1bfe:	4666      	mov	r6, ip
    1c00:	4657      	mov	r7, sl
    1c02:	433e      	orrs	r6, r7
    1c04:	d003      	beq.n	1c0e <long_division+0x96>
			r |= 0x01;
    1c06:	0006      	movs	r6, r0
    1c08:	4326      	orrs	r6, r4
    1c0a:	0032      	movs	r2, r6
    1c0c:	002b      	movs	r3, r5
		if (r >= d) {
    1c0e:	9c00      	ldr	r4, [sp, #0]
    1c10:	9d01      	ldr	r5, [sp, #4]
    1c12:	429d      	cmp	r5, r3
    1c14:	d8db      	bhi.n	1bce <long_division+0x56>
    1c16:	d1ce      	bne.n	1bb6 <long_division+0x3e>
    1c18:	4294      	cmp	r4, r2
    1c1a:	d8d8      	bhi.n	1bce <long_division+0x56>
    1c1c:	e7cb      	b.n	1bb6 <long_division+0x3e>
    1c1e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1c20:	4658      	mov	r0, fp
    1c22:	0019      	movs	r1, r3
    1c24:	b007      	add	sp, #28
    1c26:	bc3c      	pop	{r2, r3, r4, r5}
    1c28:	4690      	mov	r8, r2
    1c2a:	4699      	mov	r9, r3
    1c2c:	46a2      	mov	sl, r4
    1c2e:	46ab      	mov	fp, r5
    1c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c32 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1c32:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1c34:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c36:	2340      	movs	r3, #64	; 0x40
    1c38:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1c3a:	4281      	cmp	r1, r0
    1c3c:	d202      	bcs.n	1c44 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1c3e:	0018      	movs	r0, r3
    1c40:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1c42:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1c44:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1c46:	1c63      	adds	r3, r4, #1
    1c48:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1c4a:	4288      	cmp	r0, r1
    1c4c:	d9f9      	bls.n	1c42 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c4e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1c50:	2cff      	cmp	r4, #255	; 0xff
    1c52:	d8f4      	bhi.n	1c3e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1c54:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1c56:	2300      	movs	r3, #0
    1c58:	e7f1      	b.n	1c3e <_sercom_get_sync_baud_val+0xc>
	...

00001c5c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	b083      	sub	sp, #12
    1c60:	000f      	movs	r7, r1
    1c62:	0016      	movs	r6, r2
    1c64:	aa08      	add	r2, sp, #32
    1c66:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1c68:	0004      	movs	r4, r0
    1c6a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c6c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1c6e:	42bc      	cmp	r4, r7
    1c70:	d902      	bls.n	1c78 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1c72:	0010      	movs	r0, r2
    1c74:	b003      	add	sp, #12
    1c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d114      	bne.n	1ca6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1c7c:	0002      	movs	r2, r0
    1c7e:	0008      	movs	r0, r1
    1c80:	2100      	movs	r1, #0
    1c82:	4c19      	ldr	r4, [pc, #100]	; (1ce8 <_sercom_get_async_baud_val+0x8c>)
    1c84:	47a0      	blx	r4
    1c86:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1c88:	003a      	movs	r2, r7
    1c8a:	2300      	movs	r3, #0
    1c8c:	2000      	movs	r0, #0
    1c8e:	4c17      	ldr	r4, [pc, #92]	; (1cec <_sercom_get_async_baud_val+0x90>)
    1c90:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1c92:	2200      	movs	r2, #0
    1c94:	2301      	movs	r3, #1
    1c96:	1a12      	subs	r2, r2, r0
    1c98:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1c9a:	0c12      	lsrs	r2, r2, #16
    1c9c:	041b      	lsls	r3, r3, #16
    1c9e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ca0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1ca2:	2200      	movs	r2, #0
    1ca4:	e7e5      	b.n	1c72 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1ca6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1ca8:	2b01      	cmp	r3, #1
    1caa:	d1f9      	bne.n	1ca0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1cac:	000a      	movs	r2, r1
    1cae:	2300      	movs	r3, #0
    1cb0:	2100      	movs	r1, #0
    1cb2:	4c0d      	ldr	r4, [pc, #52]	; (1ce8 <_sercom_get_async_baud_val+0x8c>)
    1cb4:	47a0      	blx	r4
    1cb6:	0002      	movs	r2, r0
    1cb8:	000b      	movs	r3, r1
    1cba:	9200      	str	r2, [sp, #0]
    1cbc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1cbe:	0038      	movs	r0, r7
    1cc0:	2100      	movs	r1, #0
    1cc2:	4c0a      	ldr	r4, [pc, #40]	; (1cec <_sercom_get_async_baud_val+0x90>)
    1cc4:	47a0      	blx	r4
    1cc6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1cc8:	2380      	movs	r3, #128	; 0x80
    1cca:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ccc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1cce:	4298      	cmp	r0, r3
    1cd0:	d8cf      	bhi.n	1c72 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1cd2:	0f79      	lsrs	r1, r7, #29
    1cd4:	00f8      	lsls	r0, r7, #3
    1cd6:	9a00      	ldr	r2, [sp, #0]
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1cdc:	00ea      	lsls	r2, r5, #3
    1cde:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1ce0:	b2d2      	uxtb	r2, r2
    1ce2:	0352      	lsls	r2, r2, #13
    1ce4:	432a      	orrs	r2, r5
    1ce6:	e7db      	b.n	1ca0 <_sercom_get_async_baud_val+0x44>
    1ce8:	00012aad 	.word	0x00012aad
    1cec:	00001b79 	.word	0x00001b79

00001cf0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1cf0:	b510      	push	{r4, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1cf6:	4b0e      	ldr	r3, [pc, #56]	; (1d30 <sercom_set_gclk_generator+0x40>)
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d007      	beq.n	1d0e <sercom_set_gclk_generator+0x1e>
    1cfe:	2900      	cmp	r1, #0
    1d00:	d105      	bne.n	1d0e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1d02:	4b0b      	ldr	r3, [pc, #44]	; (1d30 <sercom_set_gclk_generator+0x40>)
    1d04:	785b      	ldrb	r3, [r3, #1]
    1d06:	4283      	cmp	r3, r0
    1d08:	d010      	beq.n	1d2c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1d0a:	201d      	movs	r0, #29
    1d0c:	e00c      	b.n	1d28 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1d0e:	a901      	add	r1, sp, #4
    1d10:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1d12:	2011      	movs	r0, #17
    1d14:	4b07      	ldr	r3, [pc, #28]	; (1d34 <sercom_set_gclk_generator+0x44>)
    1d16:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1d18:	2011      	movs	r0, #17
    1d1a:	4b07      	ldr	r3, [pc, #28]	; (1d38 <sercom_set_gclk_generator+0x48>)
    1d1c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1d1e:	4b04      	ldr	r3, [pc, #16]	; (1d30 <sercom_set_gclk_generator+0x40>)
    1d20:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1d22:	2201      	movs	r2, #1
    1d24:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1d26:	2000      	movs	r0, #0
}
    1d28:	b002      	add	sp, #8
    1d2a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1d2c:	2000      	movs	r0, #0
    1d2e:	e7fb      	b.n	1d28 <sercom_set_gclk_generator+0x38>
    1d30:	20000aac 	.word	0x20000aac
    1d34:	000030e5 	.word	0x000030e5
    1d38:	00003075 	.word	0x00003075

00001d3c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1d3c:	4b3c      	ldr	r3, [pc, #240]	; (1e30 <_sercom_get_default_pad+0xf4>)
    1d3e:	4298      	cmp	r0, r3
    1d40:	d032      	beq.n	1da8 <_sercom_get_default_pad+0x6c>
    1d42:	d90a      	bls.n	1d5a <_sercom_get_default_pad+0x1e>
    1d44:	4b3b      	ldr	r3, [pc, #236]	; (1e34 <_sercom_get_default_pad+0xf8>)
    1d46:	4298      	cmp	r0, r3
    1d48:	d04e      	beq.n	1de8 <_sercom_get_default_pad+0xac>
    1d4a:	4b3b      	ldr	r3, [pc, #236]	; (1e38 <_sercom_get_default_pad+0xfc>)
    1d4c:	4298      	cmp	r0, r3
    1d4e:	d055      	beq.n	1dfc <_sercom_get_default_pad+0xc0>
    1d50:	4b3a      	ldr	r3, [pc, #232]	; (1e3c <_sercom_get_default_pad+0x100>)
    1d52:	4298      	cmp	r0, r3
    1d54:	d038      	beq.n	1dc8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1d56:	2000      	movs	r0, #0
}
    1d58:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1d5a:	2384      	movs	r3, #132	; 0x84
    1d5c:	05db      	lsls	r3, r3, #23
    1d5e:	4298      	cmp	r0, r3
    1d60:	d00c      	beq.n	1d7c <_sercom_get_default_pad+0x40>
    1d62:	4b37      	ldr	r3, [pc, #220]	; (1e40 <_sercom_get_default_pad+0x104>)
    1d64:	4298      	cmp	r0, r3
    1d66:	d1f6      	bne.n	1d56 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d68:	2901      	cmp	r1, #1
    1d6a:	d017      	beq.n	1d9c <_sercom_get_default_pad+0x60>
    1d6c:	2900      	cmp	r1, #0
    1d6e:	d057      	beq.n	1e20 <_sercom_get_default_pad+0xe4>
    1d70:	2902      	cmp	r1, #2
    1d72:	d015      	beq.n	1da0 <_sercom_get_default_pad+0x64>
    1d74:	2903      	cmp	r1, #3
    1d76:	d015      	beq.n	1da4 <_sercom_get_default_pad+0x68>
	return 0;
    1d78:	2000      	movs	r0, #0
    1d7a:	e7ed      	b.n	1d58 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d7c:	2901      	cmp	r1, #1
    1d7e:	d007      	beq.n	1d90 <_sercom_get_default_pad+0x54>
    1d80:	2900      	cmp	r1, #0
    1d82:	d04b      	beq.n	1e1c <_sercom_get_default_pad+0xe0>
    1d84:	2902      	cmp	r1, #2
    1d86:	d005      	beq.n	1d94 <_sercom_get_default_pad+0x58>
    1d88:	2903      	cmp	r1, #3
    1d8a:	d005      	beq.n	1d98 <_sercom_get_default_pad+0x5c>
	return 0;
    1d8c:	2000      	movs	r0, #0
    1d8e:	e7e3      	b.n	1d58 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d90:	482c      	ldr	r0, [pc, #176]	; (1e44 <_sercom_get_default_pad+0x108>)
    1d92:	e7e1      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1d94:	482c      	ldr	r0, [pc, #176]	; (1e48 <_sercom_get_default_pad+0x10c>)
    1d96:	e7df      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1d98:	482c      	ldr	r0, [pc, #176]	; (1e4c <_sercom_get_default_pad+0x110>)
    1d9a:	e7dd      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1d9c:	482c      	ldr	r0, [pc, #176]	; (1e50 <_sercom_get_default_pad+0x114>)
    1d9e:	e7db      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1da0:	482c      	ldr	r0, [pc, #176]	; (1e54 <_sercom_get_default_pad+0x118>)
    1da2:	e7d9      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1da4:	482c      	ldr	r0, [pc, #176]	; (1e58 <_sercom_get_default_pad+0x11c>)
    1da6:	e7d7      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1da8:	2901      	cmp	r1, #1
    1daa:	d007      	beq.n	1dbc <_sercom_get_default_pad+0x80>
    1dac:	2900      	cmp	r1, #0
    1dae:	d039      	beq.n	1e24 <_sercom_get_default_pad+0xe8>
    1db0:	2902      	cmp	r1, #2
    1db2:	d005      	beq.n	1dc0 <_sercom_get_default_pad+0x84>
    1db4:	2903      	cmp	r1, #3
    1db6:	d005      	beq.n	1dc4 <_sercom_get_default_pad+0x88>
	return 0;
    1db8:	2000      	movs	r0, #0
    1dba:	e7cd      	b.n	1d58 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1dbc:	4827      	ldr	r0, [pc, #156]	; (1e5c <_sercom_get_default_pad+0x120>)
    1dbe:	e7cb      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1dc0:	4827      	ldr	r0, [pc, #156]	; (1e60 <_sercom_get_default_pad+0x124>)
    1dc2:	e7c9      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1dc4:	4827      	ldr	r0, [pc, #156]	; (1e64 <_sercom_get_default_pad+0x128>)
    1dc6:	e7c7      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1dc8:	2901      	cmp	r1, #1
    1dca:	d007      	beq.n	1ddc <_sercom_get_default_pad+0xa0>
    1dcc:	2900      	cmp	r1, #0
    1dce:	d02b      	beq.n	1e28 <_sercom_get_default_pad+0xec>
    1dd0:	2902      	cmp	r1, #2
    1dd2:	d005      	beq.n	1de0 <_sercom_get_default_pad+0xa4>
    1dd4:	2903      	cmp	r1, #3
    1dd6:	d005      	beq.n	1de4 <_sercom_get_default_pad+0xa8>
	return 0;
    1dd8:	2000      	movs	r0, #0
    1dda:	e7bd      	b.n	1d58 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ddc:	4822      	ldr	r0, [pc, #136]	; (1e68 <_sercom_get_default_pad+0x12c>)
    1dde:	e7bb      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1de0:	4822      	ldr	r0, [pc, #136]	; (1e6c <_sercom_get_default_pad+0x130>)
    1de2:	e7b9      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1de4:	4822      	ldr	r0, [pc, #136]	; (1e70 <_sercom_get_default_pad+0x134>)
    1de6:	e7b7      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1de8:	2902      	cmp	r1, #2
    1dea:	d003      	beq.n	1df4 <_sercom_get_default_pad+0xb8>
    1dec:	2903      	cmp	r1, #3
    1dee:	d003      	beq.n	1df8 <_sercom_get_default_pad+0xbc>
    1df0:	2000      	movs	r0, #0
    1df2:	e7b1      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1df4:	481f      	ldr	r0, [pc, #124]	; (1e74 <_sercom_get_default_pad+0x138>)
    1df6:	e7af      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1df8:	481f      	ldr	r0, [pc, #124]	; (1e78 <_sercom_get_default_pad+0x13c>)
    1dfa:	e7ad      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1dfc:	2901      	cmp	r1, #1
    1dfe:	d007      	beq.n	1e10 <_sercom_get_default_pad+0xd4>
    1e00:	2900      	cmp	r1, #0
    1e02:	d013      	beq.n	1e2c <_sercom_get_default_pad+0xf0>
    1e04:	2902      	cmp	r1, #2
    1e06:	d005      	beq.n	1e14 <_sercom_get_default_pad+0xd8>
    1e08:	2903      	cmp	r1, #3
    1e0a:	d005      	beq.n	1e18 <_sercom_get_default_pad+0xdc>
	return 0;
    1e0c:	2000      	movs	r0, #0
    1e0e:	e7a3      	b.n	1d58 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e10:	481a      	ldr	r0, [pc, #104]	; (1e7c <_sercom_get_default_pad+0x140>)
    1e12:	e7a1      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e14:	481a      	ldr	r0, [pc, #104]	; (1e80 <_sercom_get_default_pad+0x144>)
    1e16:	e79f      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e18:	481a      	ldr	r0, [pc, #104]	; (1e84 <_sercom_get_default_pad+0x148>)
    1e1a:	e79d      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e1c:	481a      	ldr	r0, [pc, #104]	; (1e88 <_sercom_get_default_pad+0x14c>)
    1e1e:	e79b      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e20:	2003      	movs	r0, #3
    1e22:	e799      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e24:	4819      	ldr	r0, [pc, #100]	; (1e8c <_sercom_get_default_pad+0x150>)
    1e26:	e797      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e28:	4819      	ldr	r0, [pc, #100]	; (1e90 <_sercom_get_default_pad+0x154>)
    1e2a:	e795      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e2c:	4819      	ldr	r0, [pc, #100]	; (1e94 <_sercom_get_default_pad+0x158>)
    1e2e:	e793      	b.n	1d58 <_sercom_get_default_pad+0x1c>
    1e30:	42000800 	.word	0x42000800
    1e34:	42001000 	.word	0x42001000
    1e38:	43000400 	.word	0x43000400
    1e3c:	42000c00 	.word	0x42000c00
    1e40:	42000400 	.word	0x42000400
    1e44:	00050003 	.word	0x00050003
    1e48:	00060003 	.word	0x00060003
    1e4c:	00070003 	.word	0x00070003
    1e50:	00010003 	.word	0x00010003
    1e54:	001e0003 	.word	0x001e0003
    1e58:	001f0003 	.word	0x001f0003
    1e5c:	00090003 	.word	0x00090003
    1e60:	000a0003 	.word	0x000a0003
    1e64:	000b0003 	.word	0x000b0003
    1e68:	00110003 	.word	0x00110003
    1e6c:	00120003 	.word	0x00120003
    1e70:	00130003 	.word	0x00130003
    1e74:	000e0003 	.word	0x000e0003
    1e78:	000f0003 	.word	0x000f0003
    1e7c:	00170003 	.word	0x00170003
    1e80:	00180003 	.word	0x00180003
    1e84:	00190003 	.word	0x00190003
    1e88:	00040003 	.word	0x00040003
    1e8c:	00080003 	.word	0x00080003
    1e90:	00100003 	.word	0x00100003
    1e94:	00160003 	.word	0x00160003

00001e98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1e98:	b530      	push	{r4, r5, lr}
    1e9a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1e9c:	4b0b      	ldr	r3, [pc, #44]	; (1ecc <_sercom_get_sercom_inst_index+0x34>)
    1e9e:	466a      	mov	r2, sp
    1ea0:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ea2:	c232      	stmia	r2!, {r1, r4, r5}
    1ea4:	cb32      	ldmia	r3!, {r1, r4, r5}
    1ea6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1ea8:	9b00      	ldr	r3, [sp, #0]
    1eaa:	4283      	cmp	r3, r0
    1eac:	d00b      	beq.n	1ec6 <_sercom_get_sercom_inst_index+0x2e>
    1eae:	2301      	movs	r3, #1
    1eb0:	009a      	lsls	r2, r3, #2
    1eb2:	4669      	mov	r1, sp
    1eb4:	5852      	ldr	r2, [r2, r1]
    1eb6:	4282      	cmp	r2, r0
    1eb8:	d006      	beq.n	1ec8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1eba:	3301      	adds	r3, #1
    1ebc:	2b06      	cmp	r3, #6
    1ebe:	d1f7      	bne.n	1eb0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1ec0:	2000      	movs	r0, #0
}
    1ec2:	b007      	add	sp, #28
    1ec4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ec6:	2300      	movs	r3, #0
			return i;
    1ec8:	b2d8      	uxtb	r0, r3
    1eca:	e7fa      	b.n	1ec2 <_sercom_get_sercom_inst_index+0x2a>
    1ecc:	0001c374 	.word	0x0001c374

00001ed0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1ed0:	4770      	bx	lr
	...

00001ed4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1ed6:	4b0a      	ldr	r3, [pc, #40]	; (1f00 <_sercom_set_handler+0x2c>)
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d10c      	bne.n	1ef8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ede:	4f09      	ldr	r7, [pc, #36]	; (1f04 <_sercom_set_handler+0x30>)
    1ee0:	4e09      	ldr	r6, [pc, #36]	; (1f08 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1ee2:	4d0a      	ldr	r5, [pc, #40]	; (1f0c <_sercom_set_handler+0x38>)
    1ee4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ee6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1ee8:	195a      	adds	r2, r3, r5
    1eea:	6014      	str	r4, [r2, #0]
    1eec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1eee:	2b18      	cmp	r3, #24
    1ef0:	d1f9      	bne.n	1ee6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ef2:	2201      	movs	r2, #1
    1ef4:	4b02      	ldr	r3, [pc, #8]	; (1f00 <_sercom_set_handler+0x2c>)
    1ef6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ef8:	0080      	lsls	r0, r0, #2
    1efa:	4b02      	ldr	r3, [pc, #8]	; (1f04 <_sercom_set_handler+0x30>)
    1efc:	50c1      	str	r1, [r0, r3]
}
    1efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f00:	20000aae 	.word	0x20000aae
    1f04:	20000ab0 	.word	0x20000ab0
    1f08:	00001ed1 	.word	0x00001ed1
    1f0c:	20001148 	.word	0x20001148

00001f10 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1f10:	b500      	push	{lr}
    1f12:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1f14:	2308      	movs	r3, #8
    1f16:	466a      	mov	r2, sp
    1f18:	7013      	strb	r3, [r2, #0]
    1f1a:	3301      	adds	r3, #1
    1f1c:	7053      	strb	r3, [r2, #1]
    1f1e:	3301      	adds	r3, #1
    1f20:	7093      	strb	r3, [r2, #2]
    1f22:	3301      	adds	r3, #1
    1f24:	70d3      	strb	r3, [r2, #3]
    1f26:	3301      	adds	r3, #1
    1f28:	7113      	strb	r3, [r2, #4]
    1f2a:	3301      	adds	r3, #1
    1f2c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1f2e:	4b03      	ldr	r3, [pc, #12]	; (1f3c <_sercom_get_interrupt_vector+0x2c>)
    1f30:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1f32:	466b      	mov	r3, sp
    1f34:	5618      	ldrsb	r0, [r3, r0]
}
    1f36:	b003      	add	sp, #12
    1f38:	bd00      	pop	{pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	00001e99 	.word	0x00001e99

00001f40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1f40:	b510      	push	{r4, lr}
    1f42:	4b02      	ldr	r3, [pc, #8]	; (1f4c <SERCOM0_Handler+0xc>)
    1f44:	681b      	ldr	r3, [r3, #0]
    1f46:	2000      	movs	r0, #0
    1f48:	4798      	blx	r3
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	20000ab0 	.word	0x20000ab0

00001f50 <SERCOM1_Handler>:
    1f50:	b510      	push	{r4, lr}
    1f52:	4b02      	ldr	r3, [pc, #8]	; (1f5c <SERCOM1_Handler+0xc>)
    1f54:	685b      	ldr	r3, [r3, #4]
    1f56:	2001      	movs	r0, #1
    1f58:	4798      	blx	r3
    1f5a:	bd10      	pop	{r4, pc}
    1f5c:	20000ab0 	.word	0x20000ab0

00001f60 <SERCOM2_Handler>:
    1f60:	b510      	push	{r4, lr}
    1f62:	4b02      	ldr	r3, [pc, #8]	; (1f6c <SERCOM2_Handler+0xc>)
    1f64:	689b      	ldr	r3, [r3, #8]
    1f66:	2002      	movs	r0, #2
    1f68:	4798      	blx	r3
    1f6a:	bd10      	pop	{r4, pc}
    1f6c:	20000ab0 	.word	0x20000ab0

00001f70 <SERCOM3_Handler>:
    1f70:	b510      	push	{r4, lr}
    1f72:	4b02      	ldr	r3, [pc, #8]	; (1f7c <SERCOM3_Handler+0xc>)
    1f74:	68db      	ldr	r3, [r3, #12]
    1f76:	2003      	movs	r0, #3
    1f78:	4798      	blx	r3
    1f7a:	bd10      	pop	{r4, pc}
    1f7c:	20000ab0 	.word	0x20000ab0

00001f80 <SERCOM4_Handler>:
    1f80:	b510      	push	{r4, lr}
    1f82:	4b02      	ldr	r3, [pc, #8]	; (1f8c <SERCOM4_Handler+0xc>)
    1f84:	691b      	ldr	r3, [r3, #16]
    1f86:	2004      	movs	r0, #4
    1f88:	4798      	blx	r3
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	20000ab0 	.word	0x20000ab0

00001f90 <SERCOM5_Handler>:
    1f90:	b510      	push	{r4, lr}
    1f92:	4b02      	ldr	r3, [pc, #8]	; (1f9c <SERCOM5_Handler+0xc>)
    1f94:	695b      	ldr	r3, [r3, #20]
    1f96:	2005      	movs	r0, #5
    1f98:	4798      	blx	r3
    1f9a:	bd10      	pop	{r4, pc}
    1f9c:	20000ab0 	.word	0x20000ab0

00001fa0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa2:	46d6      	mov	lr, sl
    1fa4:	464f      	mov	r7, r9
    1fa6:	4646      	mov	r6, r8
    1fa8:	b5c0      	push	{r6, r7, lr}
    1faa:	b08a      	sub	sp, #40	; 0x28
    1fac:	0006      	movs	r6, r0
    1fae:	000f      	movs	r7, r1
    1fb0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1fb2:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1fb4:	680b      	ldr	r3, [r1, #0]
    1fb6:	079b      	lsls	r3, r3, #30
    1fb8:	d40a      	bmi.n	1fd0 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1fba:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1fbc:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1fbe:	07db      	lsls	r3, r3, #31
    1fc0:	d400      	bmi.n	1fc4 <spi_init+0x24>
    1fc2:	e097      	b.n	20f4 <STACK_SIZE+0xf4>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1fc4:	b00a      	add	sp, #40	; 0x28
    1fc6:	bc1c      	pop	{r2, r3, r4}
    1fc8:	4690      	mov	r8, r2
    1fca:	4699      	mov	r9, r3
    1fcc:	46a2      	mov	sl, r4
    1fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1fd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1fd2:	9305      	str	r3, [sp, #20]
    1fd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1fd6:	9306      	str	r3, [sp, #24]
    1fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1fda:	9307      	str	r3, [sp, #28]
    1fdc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1fde:	9308      	str	r3, [sp, #32]
    1fe0:	2500      	movs	r5, #0
    1fe2:	e00a      	b.n	1ffa <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1fe4:	0038      	movs	r0, r7
    1fe6:	4b9a      	ldr	r3, [pc, #616]	; (2250 <STACK_SIZE+0x250>)
    1fe8:	4798      	blx	r3
    1fea:	e00e      	b.n	200a <STACK_SIZE+0xa>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1fec:	230f      	movs	r3, #15
    1fee:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1ff0:	4581      	cmp	r9, r0
    1ff2:	d130      	bne.n	2056 <STACK_SIZE+0x56>
    1ff4:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1ff6:	2d04      	cmp	r5, #4
    1ff8:	d031      	beq.n	205e <STACK_SIZE+0x5e>
    1ffa:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1ffc:	00ab      	lsls	r3, r5, #2
    1ffe:	aa02      	add	r2, sp, #8
    2000:	200c      	movs	r0, #12
    2002:	1812      	adds	r2, r2, r0
    2004:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2006:	2800      	cmp	r0, #0
    2008:	d0ec      	beq.n	1fe4 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    200a:	1c43      	adds	r3, r0, #1
    200c:	d0f2      	beq.n	1ff4 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    200e:	0401      	lsls	r1, r0, #16
    2010:	0c0b      	lsrs	r3, r1, #16
    2012:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    2014:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    2016:	b2c3      	uxtb	r3, r0
    2018:	469c      	mov	ip, r3
		return NULL;
    201a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    201c:	0602      	lsls	r2, r0, #24
    201e:	d405      	bmi.n	202c <STACK_SIZE+0x2c>
		return &(ports[port_index]->Group[group_index]);
    2020:	4663      	mov	r3, ip
    2022:	095b      	lsrs	r3, r3, #5
    2024:	01db      	lsls	r3, r3, #7
    2026:	4a8b      	ldr	r2, [pc, #556]	; (2254 <STACK_SIZE+0x254>)
    2028:	4690      	mov	r8, r2
    202a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    202c:	221f      	movs	r2, #31
    202e:	4660      	mov	r0, ip
    2030:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2032:	1898      	adds	r0, r3, r2
    2034:	3040      	adds	r0, #64	; 0x40
    2036:	7800      	ldrb	r0, [r0, #0]
    2038:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    203a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    203c:	4651      	mov	r1, sl
    203e:	07c9      	lsls	r1, r1, #31
    2040:	d5d6      	bpl.n	1ff0 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    2042:	0852      	lsrs	r2, r2, #1
    2044:	189b      	adds	r3, r3, r2
    2046:	3330      	adds	r3, #48	; 0x30
    2048:	7818      	ldrb	r0, [r3, #0]
    204a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    204c:	4663      	mov	r3, ip
    204e:	07db      	lsls	r3, r3, #31
    2050:	d5cc      	bpl.n	1fec <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    2052:	0900      	lsrs	r0, r0, #4
    2054:	e7cc      	b.n	1ff0 <spi_init+0x50>
			module->hw = NULL;
    2056:	2300      	movs	r3, #0
    2058:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    205a:	201c      	movs	r0, #28
    205c:	e7b2      	b.n	1fc4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    205e:	2011      	movs	r0, #17
    2060:	4b7d      	ldr	r3, [pc, #500]	; (2258 <STACK_SIZE+0x258>)
    2062:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2064:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    2066:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    2068:	2a01      	cmp	r2, #1
    206a:	d026      	beq.n	20ba <STACK_SIZE+0xba>
	ctrla |= config->mux_setting;
    206c:	6863      	ldr	r3, [r4, #4]
    206e:	68a2      	ldr	r2, [r4, #8]
    2070:	4313      	orrs	r3, r2
    2072:	68e2      	ldr	r2, [r4, #12]
    2074:	4313      	orrs	r3, r2
    2076:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    2078:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    207a:	7c61      	ldrb	r1, [r4, #17]
    207c:	2900      	cmp	r1, #0
    207e:	d001      	beq.n	2084 <STACK_SIZE+0x84>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2080:	2180      	movs	r1, #128	; 0x80
    2082:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    2084:	7ca1      	ldrb	r1, [r4, #18]
    2086:	2900      	cmp	r1, #0
    2088:	d002      	beq.n	2090 <STACK_SIZE+0x90>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    208a:	2180      	movs	r1, #128	; 0x80
    208c:	0289      	lsls	r1, r1, #10
    208e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    2090:	7ce1      	ldrb	r1, [r4, #19]
    2092:	2900      	cmp	r1, #0
    2094:	d002      	beq.n	209c <STACK_SIZE+0x9c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2096:	2180      	movs	r1, #128	; 0x80
    2098:	0089      	lsls	r1, r1, #2
    209a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    209c:	7d21      	ldrb	r1, [r4, #20]
    209e:	2900      	cmp	r1, #0
    20a0:	d002      	beq.n	20a8 <STACK_SIZE+0xa8>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    20a2:	2180      	movs	r1, #128	; 0x80
    20a4:	0189      	lsls	r1, r1, #6
    20a6:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    20a8:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    20aa:	2002      	movs	r0, #2
    20ac:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    20ae:	428b      	cmp	r3, r1
    20b0:	d017      	beq.n	20e2 <STACK_SIZE+0xe2>
	module->hw = NULL;
    20b2:	2300      	movs	r3, #0
    20b4:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    20b6:	201c      	movs	r0, #28
    20b8:	e784      	b.n	1fc4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    20ba:	aa04      	add	r2, sp, #16
    20bc:	0001      	movs	r1, r0
    20be:	69a0      	ldr	r0, [r4, #24]
    20c0:	4b66      	ldr	r3, [pc, #408]	; (225c <STACK_SIZE+0x25c>)
    20c2:	4798      	blx	r3
    20c4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    20c6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    20c8:	2b00      	cmp	r3, #0
    20ca:	d000      	beq.n	20ce <STACK_SIZE+0xce>
    20cc:	e77a      	b.n	1fc4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    20ce:	7b3b      	ldrb	r3, [r7, #12]
    20d0:	b2db      	uxtb	r3, r3
    20d2:	aa04      	add	r2, sp, #16
    20d4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    20d6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    20d8:	429a      	cmp	r2, r3
    20da:	d000      	beq.n	20de <STACK_SIZE+0xde>
    20dc:	e772      	b.n	1fc4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    20de:	350c      	adds	r5, #12
    20e0:	e7c4      	b.n	206c <STACK_SIZE+0x6c>
			spi_module->CTRLB.reg == ctrlb) {
    20e2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    20e4:	4293      	cmp	r3, r2
    20e6:	d1e4      	bne.n	20b2 <STACK_SIZE+0xb2>
		module->mode           = config->mode;
    20e8:	7823      	ldrb	r3, [r4, #0]
    20ea:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    20ec:	7c23      	ldrb	r3, [r4, #16]
    20ee:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    20f0:	2000      	movs	r0, #0
    20f2:	e767      	b.n	1fc4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20f4:	0008      	movs	r0, r1
    20f6:	4b5a      	ldr	r3, [pc, #360]	; (2260 <STACK_SIZE+0x260>)
    20f8:	4798      	blx	r3
	if (sercom_index == 5) {
    20fa:	2805      	cmp	r0, #5
    20fc:	d100      	bne.n	2100 <STACK_SIZE+0x100>
    20fe:	e09f      	b.n	2240 <STACK_SIZE+0x240>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2100:	0003      	movs	r3, r0
    2102:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    2104:	4957      	ldr	r1, [pc, #348]	; (2264 <STACK_SIZE+0x264>)
    2106:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2108:	2201      	movs	r2, #1
    210a:	4082      	lsls	r2, r0
    210c:	432a      	orrs	r2, r5
    210e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2110:	a909      	add	r1, sp, #36	; 0x24
    2112:	2524      	movs	r5, #36	; 0x24
    2114:	5d62      	ldrb	r2, [r4, r5]
    2116:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2118:	b2db      	uxtb	r3, r3
    211a:	9301      	str	r3, [sp, #4]
    211c:	0018      	movs	r0, r3
    211e:	4b52      	ldr	r3, [pc, #328]	; (2268 <STACK_SIZE+0x268>)
    2120:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2122:	9801      	ldr	r0, [sp, #4]
    2124:	4b51      	ldr	r3, [pc, #324]	; (226c <STACK_SIZE+0x26c>)
    2126:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2128:	5d60      	ldrb	r0, [r4, r5]
    212a:	2100      	movs	r1, #0
    212c:	4b50      	ldr	r3, [pc, #320]	; (2270 <STACK_SIZE+0x270>)
    212e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2130:	7823      	ldrb	r3, [r4, #0]
    2132:	2b01      	cmp	r3, #1
    2134:	d019      	beq.n	216a <STACK_SIZE+0x16a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2136:	6833      	ldr	r3, [r6, #0]
    2138:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    213a:	ab04      	add	r3, sp, #16
    213c:	2280      	movs	r2, #128	; 0x80
    213e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2140:	2200      	movs	r2, #0
    2142:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2144:	2101      	movs	r1, #1
    2146:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2148:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    214a:	7823      	ldrb	r3, [r4, #0]
    214c:	2b00      	cmp	r3, #0
    214e:	d101      	bne.n	2154 <STACK_SIZE+0x154>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2150:	ab04      	add	r3, sp, #16
    2152:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2156:	9305      	str	r3, [sp, #20]
    2158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    215a:	9306      	str	r3, [sp, #24]
    215c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    215e:	9307      	str	r3, [sp, #28]
    2160:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2162:	9308      	str	r3, [sp, #32]
    2164:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2166:	ad05      	add	r5, sp, #20
    2168:	e011      	b.n	218e <STACK_SIZE+0x18e>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    216a:	683b      	ldr	r3, [r7, #0]
    216c:	220c      	movs	r2, #12
    216e:	4313      	orrs	r3, r2
    2170:	603b      	str	r3, [r7, #0]
    2172:	e7e0      	b.n	2136 <STACK_SIZE+0x136>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2174:	4640      	mov	r0, r8
    2176:	4b36      	ldr	r3, [pc, #216]	; (2250 <STACK_SIZE+0x250>)
    2178:	4798      	blx	r3
    217a:	e00d      	b.n	2198 <STACK_SIZE+0x198>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    217c:	a904      	add	r1, sp, #16
    217e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2180:	0c00      	lsrs	r0, r0, #16
    2182:	b2c0      	uxtb	r0, r0
    2184:	4b3b      	ldr	r3, [pc, #236]	; (2274 <STACK_SIZE+0x274>)
    2186:	4798      	blx	r3
    2188:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    218a:	2f04      	cmp	r7, #4
    218c:	d007      	beq.n	219e <STACK_SIZE+0x19e>
    218e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2190:	00bb      	lsls	r3, r7, #2
    2192:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    2194:	2800      	cmp	r0, #0
    2196:	d0ed      	beq.n	2174 <STACK_SIZE+0x174>
		if (current_pinmux != PINMUX_UNUSED) {
    2198:	1c43      	adds	r3, r0, #1
    219a:	d1ef      	bne.n	217c <STACK_SIZE+0x17c>
    219c:	e7f4      	b.n	2188 <STACK_SIZE+0x188>
	module->mode             = config->mode;
    219e:	7823      	ldrb	r3, [r4, #0]
    21a0:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    21a2:	7c23      	ldrb	r3, [r4, #16]
    21a4:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    21a6:	7ca3      	ldrb	r3, [r4, #18]
    21a8:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    21aa:	7d23      	ldrb	r3, [r4, #20]
    21ac:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    21ae:	2200      	movs	r2, #0
    21b0:	ab02      	add	r3, sp, #8
    21b2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    21b4:	7823      	ldrb	r3, [r4, #0]
    21b6:	2b01      	cmp	r3, #1
    21b8:	d02a      	beq.n	2210 <STACK_SIZE+0x210>
	ctrla |= config->transfer_mode;
    21ba:	6863      	ldr	r3, [r4, #4]
    21bc:	68a2      	ldr	r2, [r4, #8]
    21be:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    21c0:	68e2      	ldr	r2, [r4, #12]
    21c2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    21c4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    21c6:	7c62      	ldrb	r2, [r4, #17]
    21c8:	2a00      	cmp	r2, #0
    21ca:	d103      	bne.n	21d4 <STACK_SIZE+0x1d4>
    21cc:	4a2a      	ldr	r2, [pc, #168]	; (2278 <STACK_SIZE+0x278>)
    21ce:	7892      	ldrb	r2, [r2, #2]
    21d0:	0792      	lsls	r2, r2, #30
    21d2:	d501      	bpl.n	21d8 <STACK_SIZE+0x1d8>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    21d4:	2280      	movs	r2, #128	; 0x80
    21d6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    21d8:	7ca2      	ldrb	r2, [r4, #18]
    21da:	2a00      	cmp	r2, #0
    21dc:	d002      	beq.n	21e4 <STACK_SIZE+0x1e4>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    21de:	2280      	movs	r2, #128	; 0x80
    21e0:	0292      	lsls	r2, r2, #10
    21e2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    21e4:	7ce2      	ldrb	r2, [r4, #19]
    21e6:	2a00      	cmp	r2, #0
    21e8:	d002      	beq.n	21f0 <STACK_SIZE+0x1f0>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    21ea:	2280      	movs	r2, #128	; 0x80
    21ec:	0092      	lsls	r2, r2, #2
    21ee:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    21f0:	7d22      	ldrb	r2, [r4, #20]
    21f2:	2a00      	cmp	r2, #0
    21f4:	d002      	beq.n	21fc <STACK_SIZE+0x1fc>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    21f6:	2280      	movs	r2, #128	; 0x80
    21f8:	0192      	lsls	r2, r2, #6
    21fa:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    21fc:	4642      	mov	r2, r8
    21fe:	6812      	ldr	r2, [r2, #0]
    2200:	4313      	orrs	r3, r2
    2202:	4642      	mov	r2, r8
    2204:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2206:	6853      	ldr	r3, [r2, #4]
    2208:	430b      	orrs	r3, r1
    220a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    220c:	2000      	movs	r0, #0
    220e:	e6d9      	b.n	1fc4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2210:	6830      	ldr	r0, [r6, #0]
    2212:	4b13      	ldr	r3, [pc, #76]	; (2260 <STACK_SIZE+0x260>)
    2214:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2216:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2218:	b2c0      	uxtb	r0, r0
    221a:	4b0f      	ldr	r3, [pc, #60]	; (2258 <STACK_SIZE+0x258>)
    221c:	4798      	blx	r3
    221e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2220:	ab02      	add	r3, sp, #8
    2222:	1d9a      	adds	r2, r3, #6
    2224:	69a0      	ldr	r0, [r4, #24]
    2226:	4b0d      	ldr	r3, [pc, #52]	; (225c <STACK_SIZE+0x25c>)
    2228:	4798      	blx	r3
    222a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    222c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    222e:	2b00      	cmp	r3, #0
    2230:	d000      	beq.n	2234 <STACK_SIZE+0x234>
    2232:	e6c7      	b.n	1fc4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    2234:	ab02      	add	r3, sp, #8
    2236:	3306      	adds	r3, #6
    2238:	781b      	ldrb	r3, [r3, #0]
    223a:	4642      	mov	r2, r8
    223c:	7313      	strb	r3, [r2, #12]
    223e:	e7bc      	b.n	21ba <STACK_SIZE+0x1ba>
			MCLK->APBDMASK.reg |= mask;
    2240:	4a08      	ldr	r2, [pc, #32]	; (2264 <STACK_SIZE+0x264>)
    2242:	6a13      	ldr	r3, [r2, #32]
    2244:	2102      	movs	r1, #2
    2246:	430b      	orrs	r3, r1
    2248:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    224a:	2318      	movs	r3, #24
    224c:	e760      	b.n	2110 <STACK_SIZE+0x110>
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	00001d3d 	.word	0x00001d3d
    2254:	40002800 	.word	0x40002800
    2258:	00003109 	.word	0x00003109
    225c:	00001c33 	.word	0x00001c33
    2260:	00001e99 	.word	0x00001e99
    2264:	40000400 	.word	0x40000400
    2268:	000030e5 	.word	0x000030e5
    226c:	00003075 	.word	0x00003075
    2270:	00001cf1 	.word	0x00001cf1
    2274:	000031e1 	.word	0x000031e1
    2278:	41002000 	.word	0x41002000

0000227c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    227c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    227e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2280:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2282:	2c01      	cmp	r4, #1
    2284:	d001      	beq.n	228a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2286:	0018      	movs	r0, r3
    2288:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    228a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    228c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    228e:	2c00      	cmp	r4, #0
    2290:	d1f9      	bne.n	2286 <spi_select_slave+0xa>
		if (select) {
    2292:	2a00      	cmp	r2, #0
    2294:	d058      	beq.n	2348 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2296:	784b      	ldrb	r3, [r1, #1]
    2298:	2b00      	cmp	r3, #0
    229a:	d044      	beq.n	2326 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    229c:	6803      	ldr	r3, [r0, #0]
    229e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    22a0:	07db      	lsls	r3, r3, #31
    22a2:	d410      	bmi.n	22c6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    22a4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    22a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    22a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22aa:	2900      	cmp	r1, #0
    22ac:	d104      	bne.n	22b8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    22ae:	0953      	lsrs	r3, r2, #5
    22b0:	01db      	lsls	r3, r3, #7
    22b2:	492e      	ldr	r1, [pc, #184]	; (236c <spi_select_slave+0xf0>)
    22b4:	468c      	mov	ip, r1
    22b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22b8:	211f      	movs	r1, #31
    22ba:	4011      	ands	r1, r2
    22bc:	2201      	movs	r2, #1
    22be:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    22c0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    22c2:	2305      	movs	r3, #5
    22c4:	e7df      	b.n	2286 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    22c6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    22c8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    22ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22cc:	2c00      	cmp	r4, #0
    22ce:	d104      	bne.n	22da <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    22d0:	0953      	lsrs	r3, r2, #5
    22d2:	01db      	lsls	r3, r3, #7
    22d4:	4c25      	ldr	r4, [pc, #148]	; (236c <spi_select_slave+0xf0>)
    22d6:	46a4      	mov	ip, r4
    22d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22da:	241f      	movs	r4, #31
    22dc:	4014      	ands	r4, r2
    22de:	2201      	movs	r2, #1
    22e0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    22e2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22e4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22e6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    22e8:	07d2      	lsls	r2, r2, #31
    22ea:	d501      	bpl.n	22f0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22ec:	788a      	ldrb	r2, [r1, #2]
    22ee:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    22f0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    22f2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    22f4:	2a00      	cmp	r2, #0
    22f6:	d1c6      	bne.n	2286 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22f8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    22fa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    22fc:	7e13      	ldrb	r3, [r2, #24]
    22fe:	420b      	tst	r3, r1
    2300:	d0fc      	beq.n	22fc <spi_select_slave+0x80>
    2302:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2304:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2306:	0749      	lsls	r1, r1, #29
    2308:	d5bd      	bpl.n	2286 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    230a:	8b53      	ldrh	r3, [r2, #26]
    230c:	075b      	lsls	r3, r3, #29
    230e:	d501      	bpl.n	2314 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2310:	2304      	movs	r3, #4
    2312:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2314:	7983      	ldrb	r3, [r0, #6]
    2316:	2b01      	cmp	r3, #1
    2318:	d002      	beq.n	2320 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    231a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    231c:	2300      	movs	r3, #0
    231e:	e7b2      	b.n	2286 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2320:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2322:	2300      	movs	r3, #0
    2324:	e7af      	b.n	2286 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2326:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2328:	09d1      	lsrs	r1, r2, #7
		return NULL;
    232a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    232c:	2900      	cmp	r1, #0
    232e:	d104      	bne.n	233a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2330:	0953      	lsrs	r3, r2, #5
    2332:	01db      	lsls	r3, r3, #7
    2334:	490d      	ldr	r1, [pc, #52]	; (236c <spi_select_slave+0xf0>)
    2336:	468c      	mov	ip, r1
    2338:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    233a:	211f      	movs	r1, #31
    233c:	4011      	ands	r1, r2
    233e:	2201      	movs	r2, #1
    2340:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2342:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2344:	2300      	movs	r3, #0
    2346:	e79e      	b.n	2286 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2348:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    234a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    234c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    234e:	2900      	cmp	r1, #0
    2350:	d104      	bne.n	235c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2352:	0953      	lsrs	r3, r2, #5
    2354:	01db      	lsls	r3, r3, #7
    2356:	4905      	ldr	r1, [pc, #20]	; (236c <spi_select_slave+0xf0>)
    2358:	468c      	mov	ip, r1
    235a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    235c:	211f      	movs	r1, #31
    235e:	4011      	ands	r1, r2
    2360:	2201      	movs	r2, #1
    2362:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2364:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2366:	2300      	movs	r3, #0
    2368:	e78d      	b.n	2286 <spi_select_slave+0xa>
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	40002800 	.word	0x40002800

00002370 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2370:	b5f0      	push	{r4, r5, r6, r7, lr}
    2372:	46de      	mov	lr, fp
    2374:	4657      	mov	r7, sl
    2376:	464e      	mov	r6, r9
    2378:	4645      	mov	r5, r8
    237a:	b5e0      	push	{r5, r6, r7, lr}
    237c:	b091      	sub	sp, #68	; 0x44
    237e:	0005      	movs	r5, r0
    2380:	000c      	movs	r4, r1
    2382:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2384:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2386:	0008      	movs	r0, r1
    2388:	4bc4      	ldr	r3, [pc, #784]	; (269c <usart_init+0x32c>)
    238a:	4798      	blx	r3
    238c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    238e:	2805      	cmp	r0, #5
    2390:	d00d      	beq.n	23ae <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2392:	0007      	movs	r7, r0
    2394:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2396:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2398:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    239a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    239c:	07c9      	lsls	r1, r1, #31
    239e:	d509      	bpl.n	23b4 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    23a0:	b011      	add	sp, #68	; 0x44
    23a2:	bc3c      	pop	{r2, r3, r4, r5}
    23a4:	4690      	mov	r8, r2
    23a6:	4699      	mov	r9, r3
    23a8:	46a2      	mov	sl, r4
    23aa:	46ab      	mov	fp, r5
    23ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    23ae:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    23b0:	2301      	movs	r3, #1
    23b2:	e7f1      	b.n	2398 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    23b4:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    23b6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    23b8:	0789      	lsls	r1, r1, #30
    23ba:	d4f1      	bmi.n	23a0 <usart_init+0x30>
	if (sercom_index == 5) {
    23bc:	2a05      	cmp	r2, #5
    23be:	d047      	beq.n	2450 <usart_init+0xe0>
			MCLK->APBCMASK.reg |= mask;
    23c0:	49b7      	ldr	r1, [pc, #732]	; (26a0 <usart_init+0x330>)
    23c2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    23c4:	2201      	movs	r2, #1
    23c6:	409a      	lsls	r2, r3
    23c8:	0013      	movs	r3, r2
    23ca:	4303      	orrs	r3, r0
    23cc:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    23ce:	a90f      	add	r1, sp, #60	; 0x3c
    23d0:	232d      	movs	r3, #45	; 0x2d
    23d2:	4698      	mov	r8, r3
    23d4:	5cf3      	ldrb	r3, [r6, r3]
    23d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    23d8:	b2ff      	uxtb	r7, r7
    23da:	0038      	movs	r0, r7
    23dc:	4bb1      	ldr	r3, [pc, #708]	; (26a4 <usart_init+0x334>)
    23de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    23e0:	0038      	movs	r0, r7
    23e2:	4bb1      	ldr	r3, [pc, #708]	; (26a8 <usart_init+0x338>)
    23e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    23e6:	4643      	mov	r3, r8
    23e8:	5cf0      	ldrb	r0, [r6, r3]
    23ea:	2100      	movs	r1, #0
    23ec:	4baf      	ldr	r3, [pc, #700]	; (26ac <usart_init+0x33c>)
    23ee:	4798      	blx	r3
	module->character_size = config->character_size;
    23f0:	7af3      	ldrb	r3, [r6, #11]
    23f2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    23f4:	2324      	movs	r3, #36	; 0x24
    23f6:	5cf3      	ldrb	r3, [r6, r3]
    23f8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    23fa:	2325      	movs	r3, #37	; 0x25
    23fc:	5cf3      	ldrb	r3, [r6, r3]
    23fe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2400:	7ef3      	ldrb	r3, [r6, #27]
    2402:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2404:	7f33      	ldrb	r3, [r6, #28]
    2406:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2408:	682b      	ldr	r3, [r5, #0]
    240a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    240c:	0018      	movs	r0, r3
    240e:	4ba3      	ldr	r3, [pc, #652]	; (269c <usart_init+0x32c>)
    2410:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2412:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    2414:	2200      	movs	r2, #0
    2416:	230e      	movs	r3, #14
    2418:	a906      	add	r1, sp, #24
    241a:	468c      	mov	ip, r1
    241c:	4463      	add	r3, ip
    241e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2420:	8a32      	ldrh	r2, [r6, #16]
    2422:	9202      	str	r2, [sp, #8]
    2424:	2380      	movs	r3, #128	; 0x80
    2426:	01db      	lsls	r3, r3, #7
    2428:	429a      	cmp	r2, r3
    242a:	d100      	bne.n	242e <usart_init+0xbe>
    242c:	e0a9      	b.n	2582 <usart_init+0x212>
    242e:	d917      	bls.n	2460 <usart_init+0xf0>
    2430:	23c0      	movs	r3, #192	; 0xc0
    2432:	01db      	lsls	r3, r3, #7
    2434:	9a02      	ldr	r2, [sp, #8]
    2436:	429a      	cmp	r2, r3
    2438:	d100      	bne.n	243c <usart_init+0xcc>
    243a:	e09d      	b.n	2578 <usart_init+0x208>
    243c:	2380      	movs	r3, #128	; 0x80
    243e:	021b      	lsls	r3, r3, #8
    2440:	429a      	cmp	r2, r3
    2442:	d000      	beq.n	2446 <usart_init+0xd6>
    2444:	e125      	b.n	2692 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2446:	2303      	movs	r3, #3
    2448:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    244a:	2300      	movs	r3, #0
    244c:	9307      	str	r3, [sp, #28]
    244e:	e010      	b.n	2472 <usart_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    2450:	4993      	ldr	r1, [pc, #588]	; (26a0 <usart_init+0x330>)
    2452:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2454:	3a04      	subs	r2, #4
    2456:	409a      	lsls	r2, r3
    2458:	0013      	movs	r3, r2
    245a:	4303      	orrs	r3, r0
    245c:	620b      	str	r3, [r1, #32]
    245e:	e7b6      	b.n	23ce <usart_init+0x5e>
	switch (config->sample_rate) {
    2460:	2380      	movs	r3, #128	; 0x80
    2462:	019b      	lsls	r3, r3, #6
    2464:	429a      	cmp	r2, r3
    2466:	d000      	beq.n	246a <usart_init+0xfa>
    2468:	e113      	b.n	2692 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    246a:	2310      	movs	r3, #16
    246c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    246e:	3b0f      	subs	r3, #15
    2470:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2472:	6833      	ldr	r3, [r6, #0]
    2474:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2476:	68f3      	ldr	r3, [r6, #12]
    2478:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    247a:	6973      	ldr	r3, [r6, #20]
    247c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    247e:	7e33      	ldrb	r3, [r6, #24]
    2480:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2482:	2326      	movs	r3, #38	; 0x26
    2484:	5cf3      	ldrb	r3, [r6, r3]
    2486:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2488:	6873      	ldr	r3, [r6, #4]
    248a:	4699      	mov	r9, r3
	switch (transfer_mode)
    248c:	2b00      	cmp	r3, #0
    248e:	d100      	bne.n	2492 <usart_init+0x122>
    2490:	e09f      	b.n	25d2 <usart_init+0x262>
    2492:	2380      	movs	r3, #128	; 0x80
    2494:	055b      	lsls	r3, r3, #21
    2496:	4599      	cmp	r9, r3
    2498:	d104      	bne.n	24a4 <usart_init+0x134>
			if (!config->use_external_clock) {
    249a:	2327      	movs	r3, #39	; 0x27
    249c:	5cf3      	ldrb	r3, [r6, r3]
    249e:	2b00      	cmp	r3, #0
    24a0:	d100      	bne.n	24a4 <usart_init+0x134>
    24a2:	e084      	b.n	25ae <usart_init+0x23e>
	if(config->encoding_format_enable) {
    24a4:	7e73      	ldrb	r3, [r6, #25]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d002      	beq.n	24b0 <usart_init+0x140>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    24aa:	7eb3      	ldrb	r3, [r6, #26]
    24ac:	4642      	mov	r2, r8
    24ae:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    24b0:	682a      	ldr	r2, [r5, #0]
    24b2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    24b4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    24b6:	2b00      	cmp	r3, #0
    24b8:	d1fc      	bne.n	24b4 <usart_init+0x144>
	usart_hw->BAUD.reg = baud;
    24ba:	330e      	adds	r3, #14
    24bc:	aa06      	add	r2, sp, #24
    24be:	4694      	mov	ip, r2
    24c0:	4463      	add	r3, ip
    24c2:	881b      	ldrh	r3, [r3, #0]
    24c4:	4642      	mov	r2, r8
    24c6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    24c8:	9b05      	ldr	r3, [sp, #20]
    24ca:	9a03      	ldr	r2, [sp, #12]
    24cc:	4313      	orrs	r3, r2
    24ce:	9a04      	ldr	r2, [sp, #16]
    24d0:	4313      	orrs	r3, r2
    24d2:	464a      	mov	r2, r9
    24d4:	4313      	orrs	r3, r2
    24d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    24d8:	465b      	mov	r3, fp
    24da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    24dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    24de:	4653      	mov	r3, sl
    24e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    24e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    24e4:	2327      	movs	r3, #39	; 0x27
    24e6:	5cf3      	ldrb	r3, [r6, r3]
    24e8:	2b00      	cmp	r3, #0
    24ea:	d101      	bne.n	24f0 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    24ec:	3304      	adds	r3, #4
    24ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24f0:	7e73      	ldrb	r3, [r6, #25]
    24f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24f4:	7f32      	ldrb	r2, [r6, #28]
    24f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    24fa:	7f72      	ldrb	r2, [r6, #29]
    24fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2500:	2224      	movs	r2, #36	; 0x24
    2502:	5cb2      	ldrb	r2, [r6, r2]
    2504:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2506:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2508:	2225      	movs	r2, #37	; 0x25
    250a:	5cb2      	ldrb	r2, [r6, r2]
    250c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    250e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2510:	7ab1      	ldrb	r1, [r6, #10]
    2512:	7af2      	ldrb	r2, [r6, #11]
    2514:	4311      	orrs	r1, r2
    2516:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2518:	8933      	ldrh	r3, [r6, #8]
    251a:	2bff      	cmp	r3, #255	; 0xff
    251c:	d07d      	beq.n	261a <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    251e:	2280      	movs	r2, #128	; 0x80
    2520:	0452      	lsls	r2, r2, #17
    2522:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2524:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2526:	232c      	movs	r3, #44	; 0x2c
    2528:	5cf3      	ldrb	r3, [r6, r3]
    252a:	2b00      	cmp	r3, #0
    252c:	d103      	bne.n	2536 <usart_init+0x1c6>
    252e:	4b60      	ldr	r3, [pc, #384]	; (26b0 <usart_init+0x340>)
    2530:	789b      	ldrb	r3, [r3, #2]
    2532:	079b      	lsls	r3, r3, #30
    2534:	d501      	bpl.n	253a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2536:	2380      	movs	r3, #128	; 0x80
    2538:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    253a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    253c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    253e:	2b00      	cmp	r3, #0
    2540:	d1fc      	bne.n	253c <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    2542:	4643      	mov	r3, r8
    2544:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2546:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2548:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    254a:	2b00      	cmp	r3, #0
    254c:	d1fc      	bne.n	2548 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    254e:	4643      	mov	r3, r8
    2550:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2552:	ab0e      	add	r3, sp, #56	; 0x38
    2554:	2280      	movs	r2, #128	; 0x80
    2556:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2558:	2200      	movs	r2, #0
    255a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    255c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    255e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2560:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2562:	930a      	str	r3, [sp, #40]	; 0x28
    2564:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2566:	930b      	str	r3, [sp, #44]	; 0x2c
    2568:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    256a:	930c      	str	r3, [sp, #48]	; 0x30
    256c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    256e:	9302      	str	r3, [sp, #8]
    2570:	930d      	str	r3, [sp, #52]	; 0x34
    2572:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2574:	ae0a      	add	r6, sp, #40	; 0x28
    2576:	e05e      	b.n	2636 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2578:	2308      	movs	r3, #8
    257a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    257c:	3b07      	subs	r3, #7
    257e:	9307      	str	r3, [sp, #28]
    2580:	e777      	b.n	2472 <usart_init+0x102>
	ctrla = (uint32_t)config->data_order |
    2582:	6833      	ldr	r3, [r6, #0]
    2584:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2586:	68f3      	ldr	r3, [r6, #12]
    2588:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    258a:	6973      	ldr	r3, [r6, #20]
    258c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    258e:	7e33      	ldrb	r3, [r6, #24]
    2590:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2592:	2326      	movs	r3, #38	; 0x26
    2594:	5cf3      	ldrb	r3, [r6, r3]
    2596:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2598:	6873      	ldr	r3, [r6, #4]
    259a:	4699      	mov	r9, r3
	switch (transfer_mode)
    259c:	2b00      	cmp	r3, #0
    259e:	d014      	beq.n	25ca <usart_init+0x25a>
    25a0:	2380      	movs	r3, #128	; 0x80
    25a2:	055b      	lsls	r3, r3, #21
    25a4:	4599      	cmp	r9, r3
    25a6:	d100      	bne.n	25aa <usart_init+0x23a>
    25a8:	e777      	b.n	249a <usart_init+0x12a>
	enum status_code status_code = STATUS_OK;
    25aa:	2000      	movs	r0, #0
    25ac:	e020      	b.n	25f0 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    25ae:	6a33      	ldr	r3, [r6, #32]
    25b0:	001f      	movs	r7, r3
    25b2:	b2c0      	uxtb	r0, r0
    25b4:	4b3f      	ldr	r3, [pc, #252]	; (26b4 <usart_init+0x344>)
    25b6:	4798      	blx	r3
    25b8:	0001      	movs	r1, r0
    25ba:	220e      	movs	r2, #14
    25bc:	ab06      	add	r3, sp, #24
    25be:	469c      	mov	ip, r3
    25c0:	4462      	add	r2, ip
    25c2:	0038      	movs	r0, r7
    25c4:	4b3c      	ldr	r3, [pc, #240]	; (26b8 <usart_init+0x348>)
    25c6:	4798      	blx	r3
    25c8:	e012      	b.n	25f0 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    25ca:	2308      	movs	r3, #8
    25cc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    25ce:	2300      	movs	r3, #0
    25d0:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    25d2:	2327      	movs	r3, #39	; 0x27
    25d4:	5cf3      	ldrb	r3, [r6, r3]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d00e      	beq.n	25f8 <usart_init+0x288>
				status_code =
    25da:	9b06      	ldr	r3, [sp, #24]
    25dc:	9300      	str	r3, [sp, #0]
    25de:	9b07      	ldr	r3, [sp, #28]
    25e0:	220e      	movs	r2, #14
    25e2:	a906      	add	r1, sp, #24
    25e4:	468c      	mov	ip, r1
    25e6:	4462      	add	r2, ip
    25e8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    25ea:	6a30      	ldr	r0, [r6, #32]
    25ec:	4f33      	ldr	r7, [pc, #204]	; (26bc <usart_init+0x34c>)
    25ee:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    25f0:	2800      	cmp	r0, #0
    25f2:	d000      	beq.n	25f6 <usart_init+0x286>
    25f4:	e6d4      	b.n	23a0 <usart_init+0x30>
    25f6:	e755      	b.n	24a4 <usart_init+0x134>
						_sercom_get_async_baud_val(config->baudrate,
    25f8:	6a33      	ldr	r3, [r6, #32]
    25fa:	001f      	movs	r7, r3
    25fc:	b2c0      	uxtb	r0, r0
    25fe:	4b2d      	ldr	r3, [pc, #180]	; (26b4 <usart_init+0x344>)
    2600:	4798      	blx	r3
    2602:	0001      	movs	r1, r0
				status_code =
    2604:	9b06      	ldr	r3, [sp, #24]
    2606:	9300      	str	r3, [sp, #0]
    2608:	9b07      	ldr	r3, [sp, #28]
    260a:	220e      	movs	r2, #14
    260c:	a806      	add	r0, sp, #24
    260e:	4684      	mov	ip, r0
    2610:	4462      	add	r2, ip
    2612:	0038      	movs	r0, r7
    2614:	4f29      	ldr	r7, [pc, #164]	; (26bc <usart_init+0x34c>)
    2616:	47b8      	blx	r7
    2618:	e7ea      	b.n	25f0 <usart_init+0x280>
		if(config->lin_slave_enable) {
    261a:	7ef3      	ldrb	r3, [r6, #27]
    261c:	2b00      	cmp	r3, #0
    261e:	d082      	beq.n	2526 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2620:	2380      	movs	r3, #128	; 0x80
    2622:	04db      	lsls	r3, r3, #19
    2624:	431f      	orrs	r7, r3
    2626:	e77e      	b.n	2526 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2628:	0020      	movs	r0, r4
    262a:	4b25      	ldr	r3, [pc, #148]	; (26c0 <usart_init+0x350>)
    262c:	4798      	blx	r3
    262e:	e007      	b.n	2640 <usart_init+0x2d0>
    2630:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2632:	2f04      	cmp	r7, #4
    2634:	d00d      	beq.n	2652 <usart_init+0x2e2>
    2636:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2638:	00bb      	lsls	r3, r7, #2
    263a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    263c:	2800      	cmp	r0, #0
    263e:	d0f3      	beq.n	2628 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    2640:	1c43      	adds	r3, r0, #1
    2642:	d0f5      	beq.n	2630 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2644:	a90e      	add	r1, sp, #56	; 0x38
    2646:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2648:	0c00      	lsrs	r0, r0, #16
    264a:	b2c0      	uxtb	r0, r0
    264c:	4b1d      	ldr	r3, [pc, #116]	; (26c4 <usart_init+0x354>)
    264e:	4798      	blx	r3
    2650:	e7ee      	b.n	2630 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    2652:	2300      	movs	r3, #0
    2654:	60eb      	str	r3, [r5, #12]
    2656:	612b      	str	r3, [r5, #16]
    2658:	616b      	str	r3, [r5, #20]
    265a:	61ab      	str	r3, [r5, #24]
    265c:	61eb      	str	r3, [r5, #28]
    265e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2660:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2662:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2664:	2200      	movs	r2, #0
    2666:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2668:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    266a:	3330      	adds	r3, #48	; 0x30
    266c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    266e:	3301      	adds	r3, #1
    2670:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2672:	3301      	adds	r3, #1
    2674:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2676:	3301      	adds	r3, #1
    2678:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    267a:	6828      	ldr	r0, [r5, #0]
    267c:	4b07      	ldr	r3, [pc, #28]	; (269c <usart_init+0x32c>)
    267e:	4798      	blx	r3
    2680:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2682:	4911      	ldr	r1, [pc, #68]	; (26c8 <usart_init+0x358>)
    2684:	4b11      	ldr	r3, [pc, #68]	; (26cc <usart_init+0x35c>)
    2686:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2688:	00a4      	lsls	r4, r4, #2
    268a:	4b11      	ldr	r3, [pc, #68]	; (26d0 <usart_init+0x360>)
    268c:	50e5      	str	r5, [r4, r3]
	return status_code;
    268e:	2000      	movs	r0, #0
    2690:	e686      	b.n	23a0 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2692:	2310      	movs	r3, #16
    2694:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2696:	2300      	movs	r3, #0
    2698:	9307      	str	r3, [sp, #28]
    269a:	e6ea      	b.n	2472 <usart_init+0x102>
    269c:	00001e99 	.word	0x00001e99
    26a0:	40000400 	.word	0x40000400
    26a4:	000030e5 	.word	0x000030e5
    26a8:	00003075 	.word	0x00003075
    26ac:	00001cf1 	.word	0x00001cf1
    26b0:	41002000 	.word	0x41002000
    26b4:	00003109 	.word	0x00003109
    26b8:	00001c33 	.word	0x00001c33
    26bc:	00001c5d 	.word	0x00001c5d
    26c0:	00001d3d 	.word	0x00001d3d
    26c4:	000031e1 	.word	0x000031e1
    26c8:	00002809 	.word	0x00002809
    26cc:	00001ed5 	.word	0x00001ed5
    26d0:	20001148 	.word	0x20001148

000026d4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    26d4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    26d6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    26d8:	2a00      	cmp	r2, #0
    26da:	d101      	bne.n	26e0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    26dc:	0018      	movs	r0, r3
    26de:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    26e0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    26e2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    26e4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    26e6:	2a00      	cmp	r2, #0
    26e8:	d1f8      	bne.n	26dc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    26ea:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    26ec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    26ee:	2a00      	cmp	r2, #0
    26f0:	d1fc      	bne.n	26ec <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    26f2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    26f4:	2102      	movs	r1, #2
    26f6:	7e1a      	ldrb	r2, [r3, #24]
    26f8:	420a      	tst	r2, r1
    26fa:	d0fc      	beq.n	26f6 <usart_write_wait+0x22>
	return STATUS_OK;
    26fc:	2300      	movs	r3, #0
    26fe:	e7ed      	b.n	26dc <usart_write_wait+0x8>

00002700 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2700:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2702:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2704:	2a00      	cmp	r2, #0
    2706:	d101      	bne.n	270c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2708:	0018      	movs	r0, r3
    270a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    270c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    270e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2710:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2712:	2a00      	cmp	r2, #0
    2714:	d1f8      	bne.n	2708 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2716:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2718:	7e10      	ldrb	r0, [r2, #24]
    271a:	0740      	lsls	r0, r0, #29
    271c:	d5f4      	bpl.n	2708 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    271e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2720:	2b00      	cmp	r3, #0
    2722:	d1fc      	bne.n	271e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2724:	8b53      	ldrh	r3, [r2, #26]
    2726:	b2db      	uxtb	r3, r3
	if (error_code) {
    2728:	0698      	lsls	r0, r3, #26
    272a:	d01d      	beq.n	2768 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    272c:	0798      	lsls	r0, r3, #30
    272e:	d503      	bpl.n	2738 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2730:	2302      	movs	r3, #2
    2732:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2734:	3318      	adds	r3, #24
    2736:	e7e7      	b.n	2708 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2738:	0758      	lsls	r0, r3, #29
    273a:	d503      	bpl.n	2744 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    273c:	2304      	movs	r3, #4
    273e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2740:	331a      	adds	r3, #26
    2742:	e7e1      	b.n	2708 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2744:	07d8      	lsls	r0, r3, #31
    2746:	d503      	bpl.n	2750 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2748:	2301      	movs	r3, #1
    274a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    274c:	3312      	adds	r3, #18
    274e:	e7db      	b.n	2708 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2750:	06d8      	lsls	r0, r3, #27
    2752:	d503      	bpl.n	275c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2754:	2310      	movs	r3, #16
    2756:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2758:	3332      	adds	r3, #50	; 0x32
    275a:	e7d5      	b.n	2708 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    275c:	069b      	lsls	r3, r3, #26
    275e:	d503      	bpl.n	2768 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2760:	2320      	movs	r3, #32
    2762:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2764:	3321      	adds	r3, #33	; 0x21
    2766:	e7cf      	b.n	2708 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2768:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    276a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    276c:	2300      	movs	r3, #0
    276e:	e7cb      	b.n	2708 <usart_read_wait+0x8>

00002770 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2770:	b5f0      	push	{r4, r5, r6, r7, lr}
    2772:	46d6      	mov	lr, sl
    2774:	b500      	push	{lr}
    2776:	b084      	sub	sp, #16
    2778:	0004      	movs	r4, r0
    277a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    277c:	2017      	movs	r0, #23
	if (length == 0) {
    277e:	2a00      	cmp	r2, #0
    2780:	d103      	bne.n	278a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2782:	b004      	add	sp, #16
    2784:	bc04      	pop	{r2}
    2786:	4692      	mov	sl, r2
    2788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    278a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    278c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    278e:	2b00      	cmp	r3, #0
    2790:	d0f7      	beq.n	2782 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2792:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    2794:	3a01      	subs	r2, #1
    2796:	b293      	uxth	r3, r2
    2798:	469a      	mov	sl, r3
    279a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    279c:	2704      	movs	r7, #4
    279e:	e019      	b.n	27d4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    27a0:	2300      	movs	r3, #0
    27a2:	aa02      	add	r2, sp, #8
    27a4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    27a6:	1d91      	adds	r1, r2, #6
    27a8:	0020      	movs	r0, r4
    27aa:	4b15      	ldr	r3, [pc, #84]	; (2800 <usart_read_buffer_wait+0x90>)
    27ac:	4798      	blx	r3
		if (retval != STATUS_OK) {
    27ae:	2800      	cmp	r0, #0
    27b0:	d1e7      	bne.n	2782 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    27b2:	1c69      	adds	r1, r5, #1
    27b4:	b289      	uxth	r1, r1
    27b6:	ab02      	add	r3, sp, #8
    27b8:	88db      	ldrh	r3, [r3, #6]
    27ba:	9a01      	ldr	r2, [sp, #4]
    27bc:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27be:	7962      	ldrb	r2, [r4, #5]
    27c0:	2a01      	cmp	r2, #1
    27c2:	d014      	beq.n	27ee <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    27c4:	000d      	movs	r5, r1
	while (length--) {
    27c6:	4653      	mov	r3, sl
    27c8:	3b01      	subs	r3, #1
    27ca:	b29b      	uxth	r3, r3
    27cc:	469a      	mov	sl, r3
    27ce:	4b0d      	ldr	r3, [pc, #52]	; (2804 <usart_read_buffer_wait+0x94>)
    27d0:	459a      	cmp	sl, r3
    27d2:	d0d6      	beq.n	2782 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    27d4:	7e33      	ldrb	r3, [r6, #24]
    27d6:	423b      	tst	r3, r7
    27d8:	d1e2      	bne.n	27a0 <usart_read_buffer_wait+0x30>
    27da:	4b0a      	ldr	r3, [pc, #40]	; (2804 <usart_read_buffer_wait+0x94>)
    27dc:	7e32      	ldrb	r2, [r6, #24]
    27de:	423a      	tst	r2, r7
    27e0:	d1de      	bne.n	27a0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    27e2:	2b01      	cmp	r3, #1
    27e4:	d009      	beq.n	27fa <usart_read_buffer_wait+0x8a>
    27e6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    27e8:	2b00      	cmp	r3, #0
    27ea:	d1f7      	bne.n	27dc <usart_read_buffer_wait+0x6c>
    27ec:	e7d8      	b.n	27a0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    27ee:	3502      	adds	r5, #2
    27f0:	b2ad      	uxth	r5, r5
    27f2:	0a1b      	lsrs	r3, r3, #8
    27f4:	9a01      	ldr	r2, [sp, #4]
    27f6:	5453      	strb	r3, [r2, r1]
    27f8:	e7e5      	b.n	27c6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    27fa:	2012      	movs	r0, #18
    27fc:	e7c1      	b.n	2782 <usart_read_buffer_wait+0x12>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00002701 	.word	0x00002701
    2804:	0000ffff 	.word	0x0000ffff

00002808 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    280a:	0080      	lsls	r0, r0, #2
    280c:	4b62      	ldr	r3, [pc, #392]	; (2998 <_usart_interrupt_handler+0x190>)
    280e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2810:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2812:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2814:	2b00      	cmp	r3, #0
    2816:	d1fc      	bne.n	2812 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2818:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    281a:	7da6      	ldrb	r6, [r4, #22]
    281c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    281e:	2330      	movs	r3, #48	; 0x30
    2820:	5ceb      	ldrb	r3, [r5, r3]
    2822:	2231      	movs	r2, #49	; 0x31
    2824:	5caf      	ldrb	r7, [r5, r2]
    2826:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2828:	07f3      	lsls	r3, r6, #31
    282a:	d522      	bpl.n	2872 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    282c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    282e:	b29b      	uxth	r3, r3
    2830:	2b00      	cmp	r3, #0
    2832:	d01c      	beq.n	286e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2834:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2836:	7813      	ldrb	r3, [r2, #0]
    2838:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    283a:	1c51      	adds	r1, r2, #1
    283c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    283e:	7969      	ldrb	r1, [r5, #5]
    2840:	2901      	cmp	r1, #1
    2842:	d00e      	beq.n	2862 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2844:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2846:	05db      	lsls	r3, r3, #23
    2848:	0ddb      	lsrs	r3, r3, #23
    284a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    284c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    284e:	3b01      	subs	r3, #1
    2850:	b29b      	uxth	r3, r3
    2852:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2854:	2b00      	cmp	r3, #0
    2856:	d10c      	bne.n	2872 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2858:	3301      	adds	r3, #1
    285a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    285c:	3301      	adds	r3, #1
    285e:	75a3      	strb	r3, [r4, #22]
    2860:	e007      	b.n	2872 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2862:	7851      	ldrb	r1, [r2, #1]
    2864:	0209      	lsls	r1, r1, #8
    2866:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2868:	3202      	adds	r2, #2
    286a:	62aa      	str	r2, [r5, #40]	; 0x28
    286c:	e7eb      	b.n	2846 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    286e:	2301      	movs	r3, #1
    2870:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2872:	07b3      	lsls	r3, r6, #30
    2874:	d506      	bpl.n	2884 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2876:	2302      	movs	r3, #2
    2878:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    287a:	2200      	movs	r2, #0
    287c:	3331      	adds	r3, #49	; 0x31
    287e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2880:	07fb      	lsls	r3, r7, #31
    2882:	d41a      	bmi.n	28ba <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2884:	0773      	lsls	r3, r6, #29
    2886:	d565      	bpl.n	2954 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2888:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    288a:	b29b      	uxth	r3, r3
    288c:	2b00      	cmp	r3, #0
    288e:	d05f      	beq.n	2950 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2890:	8b63      	ldrh	r3, [r4, #26]
    2892:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2894:	071a      	lsls	r2, r3, #28
    2896:	d414      	bmi.n	28c2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2898:	223f      	movs	r2, #63	; 0x3f
    289a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    289c:	2b00      	cmp	r3, #0
    289e:	d034      	beq.n	290a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    28a0:	079a      	lsls	r2, r3, #30
    28a2:	d511      	bpl.n	28c8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    28a4:	221a      	movs	r2, #26
    28a6:	2332      	movs	r3, #50	; 0x32
    28a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    28aa:	3b30      	subs	r3, #48	; 0x30
    28ac:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    28ae:	077b      	lsls	r3, r7, #29
    28b0:	d550      	bpl.n	2954 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    28b2:	0028      	movs	r0, r5
    28b4:	696b      	ldr	r3, [r5, #20]
    28b6:	4798      	blx	r3
    28b8:	e04c      	b.n	2954 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    28ba:	0028      	movs	r0, r5
    28bc:	68eb      	ldr	r3, [r5, #12]
    28be:	4798      	blx	r3
    28c0:	e7e0      	b.n	2884 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    28c2:	2237      	movs	r2, #55	; 0x37
    28c4:	4013      	ands	r3, r2
    28c6:	e7e9      	b.n	289c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28c8:	075a      	lsls	r2, r3, #29
    28ca:	d505      	bpl.n	28d8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    28cc:	221e      	movs	r2, #30
    28ce:	2332      	movs	r3, #50	; 0x32
    28d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    28d2:	3b2e      	subs	r3, #46	; 0x2e
    28d4:	8363      	strh	r3, [r4, #26]
    28d6:	e7ea      	b.n	28ae <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    28d8:	07da      	lsls	r2, r3, #31
    28da:	d505      	bpl.n	28e8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    28dc:	2213      	movs	r2, #19
    28de:	2332      	movs	r3, #50	; 0x32
    28e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    28e2:	3b31      	subs	r3, #49	; 0x31
    28e4:	8363      	strh	r3, [r4, #26]
    28e6:	e7e2      	b.n	28ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    28e8:	06da      	lsls	r2, r3, #27
    28ea:	d505      	bpl.n	28f8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    28ec:	2242      	movs	r2, #66	; 0x42
    28ee:	2332      	movs	r3, #50	; 0x32
    28f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    28f2:	3b22      	subs	r3, #34	; 0x22
    28f4:	8363      	strh	r3, [r4, #26]
    28f6:	e7da      	b.n	28ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    28f8:	2220      	movs	r2, #32
    28fa:	421a      	tst	r2, r3
    28fc:	d0d7      	beq.n	28ae <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    28fe:	3221      	adds	r2, #33	; 0x21
    2900:	2332      	movs	r3, #50	; 0x32
    2902:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2904:	3b12      	subs	r3, #18
    2906:	8363      	strh	r3, [r4, #26]
    2908:	e7d1      	b.n	28ae <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    290a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    290c:	05db      	lsls	r3, r3, #23
    290e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2910:	b2da      	uxtb	r2, r3
    2912:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2914:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2916:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2918:	1c51      	adds	r1, r2, #1
    291a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    291c:	7969      	ldrb	r1, [r5, #5]
    291e:	2901      	cmp	r1, #1
    2920:	d010      	beq.n	2944 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2922:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2924:	3b01      	subs	r3, #1
    2926:	b29b      	uxth	r3, r3
    2928:	85ab      	strh	r3, [r5, #44]	; 0x2c
    292a:	2b00      	cmp	r3, #0
    292c:	d112      	bne.n	2954 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    292e:	3304      	adds	r3, #4
    2930:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2932:	2200      	movs	r2, #0
    2934:	332e      	adds	r3, #46	; 0x2e
    2936:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2938:	07bb      	lsls	r3, r7, #30
    293a:	d50b      	bpl.n	2954 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    293c:	0028      	movs	r0, r5
    293e:	692b      	ldr	r3, [r5, #16]
    2940:	4798      	blx	r3
    2942:	e007      	b.n	2954 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2944:	0a1b      	lsrs	r3, r3, #8
    2946:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2948:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    294a:	3301      	adds	r3, #1
    294c:	626b      	str	r3, [r5, #36]	; 0x24
    294e:	e7e8      	b.n	2922 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2950:	2304      	movs	r3, #4
    2952:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2954:	06f3      	lsls	r3, r6, #27
    2956:	d504      	bpl.n	2962 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2958:	2310      	movs	r3, #16
    295a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    295c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    295e:	06fb      	lsls	r3, r7, #27
    2960:	d40e      	bmi.n	2980 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2962:	06b3      	lsls	r3, r6, #26
    2964:	d504      	bpl.n	2970 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2966:	2320      	movs	r3, #32
    2968:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    296a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    296c:	073b      	lsls	r3, r7, #28
    296e:	d40b      	bmi.n	2988 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2970:	0733      	lsls	r3, r6, #28
    2972:	d504      	bpl.n	297e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2974:	2308      	movs	r3, #8
    2976:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2978:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    297a:	06bb      	lsls	r3, r7, #26
    297c:	d408      	bmi.n	2990 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2980:	0028      	movs	r0, r5
    2982:	69eb      	ldr	r3, [r5, #28]
    2984:	4798      	blx	r3
    2986:	e7ec      	b.n	2962 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2988:	0028      	movs	r0, r5
    298a:	69ab      	ldr	r3, [r5, #24]
    298c:	4798      	blx	r3
    298e:	e7ef      	b.n	2970 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2990:	6a2b      	ldr	r3, [r5, #32]
    2992:	0028      	movs	r0, r5
    2994:	4798      	blx	r3
}
    2996:	e7f2      	b.n	297e <_usart_interrupt_handler+0x176>
    2998:	20001148 	.word	0x20001148

0000299c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    299c:	b510      	push	{r4, lr}
	switch (clock_source) {
    299e:	2808      	cmp	r0, #8
    29a0:	d803      	bhi.n	29aa <system_clock_source_get_hz+0xe>
    29a2:	0080      	lsls	r0, r0, #2
    29a4:	4b1c      	ldr	r3, [pc, #112]	; (2a18 <system_clock_source_get_hz+0x7c>)
    29a6:	581b      	ldr	r3, [r3, r0]
    29a8:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    29aa:	2000      	movs	r0, #0
    29ac:	e032      	b.n	2a14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    29ae:	4b1b      	ldr	r3, [pc, #108]	; (2a1c <system_clock_source_get_hz+0x80>)
    29b0:	6918      	ldr	r0, [r3, #16]
    29b2:	e02f      	b.n	2a14 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    29b4:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <system_clock_source_get_hz+0x84>)
    29b6:	7d18      	ldrb	r0, [r3, #20]
    29b8:	0700      	lsls	r0, r0, #28
    29ba:	0f80      	lsrs	r0, r0, #30
    29bc:	1c43      	adds	r3, r0, #1
    29be:	4819      	ldr	r0, [pc, #100]	; (2a24 <system_clock_source_get_hz+0x88>)
    29c0:	4358      	muls	r0, r3
    29c2:	e027      	b.n	2a14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    29c4:	4b15      	ldr	r3, [pc, #84]	; (2a1c <system_clock_source_get_hz+0x80>)
    29c6:	6958      	ldr	r0, [r3, #20]
    29c8:	e024      	b.n	2a14 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    29ca:	4b14      	ldr	r3, [pc, #80]	; (2a1c <system_clock_source_get_hz+0x80>)
    29cc:	681b      	ldr	r3, [r3, #0]
			return 0;
    29ce:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    29d0:	079b      	lsls	r3, r3, #30
    29d2:	d51f      	bpl.n	2a14 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    29d4:	4912      	ldr	r1, [pc, #72]	; (2a20 <system_clock_source_get_hz+0x84>)
    29d6:	2280      	movs	r2, #128	; 0x80
    29d8:	0052      	lsls	r2, r2, #1
    29da:	68cb      	ldr	r3, [r1, #12]
    29dc:	4213      	tst	r3, r2
    29de:	d0fc      	beq.n	29da <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    29e0:	4b0e      	ldr	r3, [pc, #56]	; (2a1c <system_clock_source_get_hz+0x80>)
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	075b      	lsls	r3, r3, #29
    29e6:	d401      	bmi.n	29ec <system_clock_source_get_hz+0x50>
		return 48000000UL;
    29e8:	480f      	ldr	r0, [pc, #60]	; (2a28 <system_clock_source_get_hz+0x8c>)
    29ea:	e013      	b.n	2a14 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    29ec:	2000      	movs	r0, #0
    29ee:	4b0f      	ldr	r3, [pc, #60]	; (2a2c <system_clock_source_get_hz+0x90>)
    29f0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    29f2:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <system_clock_source_get_hz+0x80>)
    29f4:	689b      	ldr	r3, [r3, #8]
    29f6:	041b      	lsls	r3, r3, #16
    29f8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    29fa:	4358      	muls	r0, r3
    29fc:	e00a      	b.n	2a14 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    29fe:	2328      	movs	r3, #40	; 0x28
    2a00:	4a07      	ldr	r2, [pc, #28]	; (2a20 <system_clock_source_get_hz+0x84>)
    2a02:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2a04:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2a06:	079b      	lsls	r3, r3, #30
    2a08:	d504      	bpl.n	2a14 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2a0a:	4b04      	ldr	r3, [pc, #16]	; (2a1c <system_clock_source_get_hz+0x80>)
    2a0c:	68d8      	ldr	r0, [r3, #12]
    2a0e:	e001      	b.n	2a14 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2a10:	2080      	movs	r0, #128	; 0x80
    2a12:	0200      	lsls	r0, r0, #8
	}
}
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	0001c38c 	.word	0x0001c38c
    2a1c:	20000ac8 	.word	0x20000ac8
    2a20:	40000c00 	.word	0x40000c00
    2a24:	003d0900 	.word	0x003d0900
    2a28:	02dc6c00 	.word	0x02dc6c00
    2a2c:	00003109 	.word	0x00003109

00002a30 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    2a30:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    2a32:	4c0b      	ldr	r4, [pc, #44]	; (2a60 <system_clock_source_osc16m_set_config+0x30>)
    2a34:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    2a36:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a38:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    2a3a:	7802      	ldrb	r2, [r0, #0]
    2a3c:	2103      	movs	r1, #3
    2a3e:	4011      	ands	r1, r2
    2a40:	0089      	lsls	r1, r1, #2
    2a42:	220c      	movs	r2, #12
    2a44:	4393      	bics	r3, r2
    2a46:	430b      	orrs	r3, r1
    2a48:	3a0b      	subs	r2, #11
    2a4a:	4032      	ands	r2, r6
    2a4c:	0192      	lsls	r2, r2, #6
    2a4e:	2140      	movs	r1, #64	; 0x40
    2a50:	438b      	bics	r3, r1
    2a52:	4313      	orrs	r3, r2
    2a54:	01ed      	lsls	r5, r5, #7
    2a56:	227f      	movs	r2, #127	; 0x7f
    2a58:	4013      	ands	r3, r2
    2a5a:	432b      	orrs	r3, r5
    2a5c:	7523      	strb	r3, [r4, #20]
}
    2a5e:	bd70      	pop	{r4, r5, r6, pc}
    2a60:	40000c00 	.word	0x40000c00

00002a64 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a66:	46d6      	mov	lr, sl
    2a68:	464f      	mov	r7, r9
    2a6a:	4646      	mov	r6, r8
    2a6c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2a6e:	4b20      	ldr	r3, [pc, #128]	; (2af0 <system_clock_source_xosc32k_set_config+0x8c>)
    2a70:	469a      	mov	sl, r3
    2a72:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2a74:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2a76:	7801      	ldrb	r1, [r0, #0]
    2a78:	424c      	negs	r4, r1
    2a7a:	414c      	adcs	r4, r1
    2a7c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2a7e:	7881      	ldrb	r1, [r0, #2]
    2a80:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2a82:	78c1      	ldrb	r1, [r0, #3]
    2a84:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2a86:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a88:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2a8a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2a8c:	6840      	ldr	r0, [r0, #4]
    2a8e:	4919      	ldr	r1, [pc, #100]	; (2af4 <system_clock_source_xosc32k_set_config+0x90>)
    2a90:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    2a92:	2101      	movs	r1, #1
    2a94:	4648      	mov	r0, r9
    2a96:	0080      	lsls	r0, r0, #2
    2a98:	2204      	movs	r2, #4
    2a9a:	4393      	bics	r3, r2
    2a9c:	4303      	orrs	r3, r0
    2a9e:	4640      	mov	r0, r8
    2aa0:	4008      	ands	r0, r1
    2aa2:	00c0      	lsls	r0, r0, #3
    2aa4:	3204      	adds	r2, #4
    2aa6:	4393      	bics	r3, r2
    2aa8:	4303      	orrs	r3, r0
    2aaa:	4660      	mov	r0, ip
    2aac:	4008      	ands	r0, r1
    2aae:	0100      	lsls	r0, r0, #4
    2ab0:	3208      	adds	r2, #8
    2ab2:	4393      	bics	r3, r2
    2ab4:	4303      	orrs	r3, r0
    2ab6:	400f      	ands	r7, r1
    2ab8:	01bf      	lsls	r7, r7, #6
    2aba:	2040      	movs	r0, #64	; 0x40
    2abc:	4383      	bics	r3, r0
    2abe:	433b      	orrs	r3, r7
    2ac0:	400e      	ands	r6, r1
    2ac2:	01f6      	lsls	r6, r6, #7
    2ac4:	3040      	adds	r0, #64	; 0x40
    2ac6:	4383      	bics	r3, r0
    2ac8:	4333      	orrs	r3, r6
    2aca:	3879      	subs	r0, #121	; 0x79
    2acc:	4005      	ands	r5, r0
    2ace:	022d      	lsls	r5, r5, #8
    2ad0:	4809      	ldr	r0, [pc, #36]	; (2af8 <system_clock_source_xosc32k_set_config+0x94>)
    2ad2:	4003      	ands	r3, r0
    2ad4:	432b      	orrs	r3, r5
    2ad6:	4021      	ands	r1, r4
    2ad8:	0309      	lsls	r1, r1, #12
    2ada:	4808      	ldr	r0, [pc, #32]	; (2afc <system_clock_source_xosc32k_set_config+0x98>)
    2adc:	4003      	ands	r3, r0
    2ade:	430b      	orrs	r3, r1
    2ae0:	4652      	mov	r2, sl
    2ae2:	6153      	str	r3, [r2, #20]
}
    2ae4:	bc1c      	pop	{r2, r3, r4}
    2ae6:	4690      	mov	r8, r2
    2ae8:	4699      	mov	r9, r3
    2aea:	46a2      	mov	sl, r4
    2aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	40001000 	.word	0x40001000
    2af4:	20000ac8 	.word	0x20000ac8
    2af8:	fffff8ff 	.word	0xfffff8ff
    2afc:	ffffefff 	.word	0xffffefff

00002b00 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2b00:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b02:	7a83      	ldrb	r3, [r0, #10]
    2b04:	069b      	lsls	r3, r3, #26
    2b06:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2b08:	8982      	ldrh	r2, [r0, #12]
    2b0a:	0592      	lsls	r2, r2, #22
    2b0c:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b0e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2b10:	491a      	ldr	r1, [pc, #104]	; (2b7c <system_clock_source_dfll_set_config+0x7c>)
    2b12:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2b14:	7a03      	ldrb	r3, [r0, #8]
    2b16:	7a42      	ldrb	r2, [r0, #9]
    2b18:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2b1a:	8882      	ldrh	r2, [r0, #4]
    2b1c:	88c4      	ldrh	r4, [r0, #6]
    2b1e:	4322      	orrs	r2, r4
    2b20:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2b22:	7842      	ldrb	r2, [r0, #1]
    2b24:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2b26:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    2b28:	7882      	ldrb	r2, [r0, #2]
    2b2a:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2b2c:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2b2e:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2b30:	7803      	ldrb	r3, [r0, #0]
    2b32:	2b04      	cmp	r3, #4
    2b34:	d011      	beq.n	2b5a <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2b36:	2b20      	cmp	r3, #32
    2b38:	d10e      	bne.n	2b58 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b3a:	7b83      	ldrb	r3, [r0, #14]
    2b3c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b3e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b40:	4313      	orrs	r3, r2
    2b42:	8a02      	ldrh	r2, [r0, #16]
    2b44:	0412      	lsls	r2, r2, #16
    2b46:	490e      	ldr	r1, [pc, #56]	; (2b80 <system_clock_source_dfll_set_config+0x80>)
    2b48:	400a      	ands	r2, r1
    2b4a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b4c:	4a0b      	ldr	r2, [pc, #44]	; (2b7c <system_clock_source_dfll_set_config+0x7c>)
    2b4e:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2b50:	6811      	ldr	r1, [r2, #0]
    2b52:	4b0c      	ldr	r3, [pc, #48]	; (2b84 <system_clock_source_dfll_set_config+0x84>)
    2b54:	430b      	orrs	r3, r1
    2b56:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    2b58:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b5a:	7b83      	ldrb	r3, [r0, #14]
    2b5c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b5e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b60:	4313      	orrs	r3, r2
    2b62:	8a02      	ldrh	r2, [r0, #16]
    2b64:	0412      	lsls	r2, r2, #16
    2b66:	4906      	ldr	r1, [pc, #24]	; (2b80 <system_clock_source_dfll_set_config+0x80>)
    2b68:	400a      	ands	r2, r1
    2b6a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b6c:	4a03      	ldr	r2, [pc, #12]	; (2b7c <system_clock_source_dfll_set_config+0x7c>)
    2b6e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b70:	6813      	ldr	r3, [r2, #0]
    2b72:	2104      	movs	r1, #4
    2b74:	430b      	orrs	r3, r1
    2b76:	6013      	str	r3, [r2, #0]
    2b78:	e7ee      	b.n	2b58 <system_clock_source_dfll_set_config+0x58>
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	20000ac8 	.word	0x20000ac8
    2b80:	03ff0000 	.word	0x03ff0000
    2b84:	00000424 	.word	0x00000424

00002b88 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b88:	2808      	cmp	r0, #8
    2b8a:	d803      	bhi.n	2b94 <system_clock_source_enable+0xc>
    2b8c:	0080      	lsls	r0, r0, #2
    2b8e:	4b29      	ldr	r3, [pc, #164]	; (2c34 <system_clock_source_enable+0xac>)
    2b90:	581b      	ldr	r3, [r3, r0]
    2b92:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b94:	2017      	movs	r0, #23
    2b96:	e04b      	b.n	2c30 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2b98:	4a27      	ldr	r2, [pc, #156]	; (2c38 <system_clock_source_enable+0xb0>)
    2b9a:	7d13      	ldrb	r3, [r2, #20]
    2b9c:	2102      	movs	r1, #2
    2b9e:	430b      	orrs	r3, r1
    2ba0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2ba2:	2000      	movs	r0, #0
    2ba4:	e044      	b.n	2c30 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2ba6:	4a25      	ldr	r2, [pc, #148]	; (2c3c <system_clock_source_enable+0xb4>)
    2ba8:	6993      	ldr	r3, [r2, #24]
    2baa:	2102      	movs	r1, #2
    2bac:	430b      	orrs	r3, r1
    2bae:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2bb0:	2000      	movs	r0, #0
		break;
    2bb2:	e03d      	b.n	2c30 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2bb4:	4a20      	ldr	r2, [pc, #128]	; (2c38 <system_clock_source_enable+0xb0>)
    2bb6:	8a13      	ldrh	r3, [r2, #16]
    2bb8:	2102      	movs	r1, #2
    2bba:	430b      	orrs	r3, r1
    2bbc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2bbe:	2000      	movs	r0, #0
		break;
    2bc0:	e036      	b.n	2c30 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2bc2:	4a1e      	ldr	r2, [pc, #120]	; (2c3c <system_clock_source_enable+0xb4>)
    2bc4:	6953      	ldr	r3, [r2, #20]
    2bc6:	2102      	movs	r1, #2
    2bc8:	430b      	orrs	r3, r1
    2bca:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2bcc:	2000      	movs	r0, #0
		break;
    2bce:	e02f      	b.n	2c30 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2bd0:	491b      	ldr	r1, [pc, #108]	; (2c40 <system_clock_source_enable+0xb8>)
    2bd2:	680b      	ldr	r3, [r1, #0]
    2bd4:	2202      	movs	r2, #2
    2bd6:	4313      	orrs	r3, r2
    2bd8:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2bda:	4b17      	ldr	r3, [pc, #92]	; (2c38 <system_clock_source_enable+0xb0>)
    2bdc:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2bde:	0019      	movs	r1, r3
    2be0:	32fe      	adds	r2, #254	; 0xfe
    2be2:	68cb      	ldr	r3, [r1, #12]
    2be4:	4213      	tst	r3, r2
    2be6:	d0fc      	beq.n	2be2 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2be8:	4a15      	ldr	r2, [pc, #84]	; (2c40 <system_clock_source_enable+0xb8>)
    2bea:	6891      	ldr	r1, [r2, #8]
    2bec:	4b12      	ldr	r3, [pc, #72]	; (2c38 <system_clock_source_enable+0xb0>)
    2bee:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2bf0:	6852      	ldr	r2, [r2, #4]
    2bf2:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    2bf4:	2200      	movs	r2, #0
    2bf6:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2bf8:	0019      	movs	r1, r3
    2bfa:	3201      	adds	r2, #1
    2bfc:	32ff      	adds	r2, #255	; 0xff
    2bfe:	68cb      	ldr	r3, [r1, #12]
    2c00:	4213      	tst	r3, r2
    2c02:	d0fc      	beq.n	2bfe <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2c04:	4b0e      	ldr	r3, [pc, #56]	; (2c40 <system_clock_source_enable+0xb8>)
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	b29b      	uxth	r3, r3
    2c0a:	4a0b      	ldr	r2, [pc, #44]	; (2c38 <system_clock_source_enable+0xb0>)
    2c0c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2c0e:	2000      	movs	r0, #0
    2c10:	e00e      	b.n	2c30 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2c12:	4909      	ldr	r1, [pc, #36]	; (2c38 <system_clock_source_enable+0xb0>)
    2c14:	2228      	movs	r2, #40	; 0x28
    2c16:	5c8b      	ldrb	r3, [r1, r2]
    2c18:	2002      	movs	r0, #2
    2c1a:	4303      	orrs	r3, r0
    2c1c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2c1e:	0008      	movs	r0, r1
    2c20:	2138      	movs	r1, #56	; 0x38
    2c22:	3a26      	subs	r2, #38	; 0x26
    2c24:	5c43      	ldrb	r3, [r0, r1]
    2c26:	4213      	tst	r3, r2
    2c28:	d1fc      	bne.n	2c24 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    2c2a:	2000      	movs	r0, #0
    2c2c:	e000      	b.n	2c30 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    2c2e:	2000      	movs	r0, #0
}
    2c30:	4770      	bx	lr
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	0001c3b0 	.word	0x0001c3b0
    2c38:	40000c00 	.word	0x40000c00
    2c3c:	40001000 	.word	0x40001000
    2c40:	20000ac8 	.word	0x20000ac8

00002c44 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2c44:	2808      	cmp	r0, #8
    2c46:	d832      	bhi.n	2cae <system_clock_source_disable+0x6a>
    2c48:	0080      	lsls	r0, r0, #2
    2c4a:	4b1a      	ldr	r3, [pc, #104]	; (2cb4 <system_clock_source_disable+0x70>)
    2c4c:	581b      	ldr	r3, [r3, r0]
    2c4e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    2c50:	4a19      	ldr	r2, [pc, #100]	; (2cb8 <system_clock_source_disable+0x74>)
    2c52:	7d13      	ldrb	r3, [r2, #20]
    2c54:	2102      	movs	r1, #2
    2c56:	438b      	bics	r3, r1
    2c58:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    2c5a:	2000      	movs	r0, #0
}
    2c5c:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    2c5e:	4a17      	ldr	r2, [pc, #92]	; (2cbc <system_clock_source_disable+0x78>)
    2c60:	6993      	ldr	r3, [r2, #24]
    2c62:	2102      	movs	r1, #2
    2c64:	438b      	bics	r3, r1
    2c66:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    2c68:	2000      	movs	r0, #0
		break;
    2c6a:	e7f7      	b.n	2c5c <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    2c6c:	4a12      	ldr	r2, [pc, #72]	; (2cb8 <system_clock_source_disable+0x74>)
    2c6e:	8a13      	ldrh	r3, [r2, #16]
    2c70:	2102      	movs	r1, #2
    2c72:	438b      	bics	r3, r1
    2c74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2c76:	2000      	movs	r0, #0
		break;
    2c78:	e7f0      	b.n	2c5c <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    2c7a:	4a10      	ldr	r2, [pc, #64]	; (2cbc <system_clock_source_disable+0x78>)
    2c7c:	6953      	ldr	r3, [r2, #20]
    2c7e:	2102      	movs	r1, #2
    2c80:	438b      	bics	r3, r1
    2c82:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2c84:	2000      	movs	r0, #0
		break;
    2c86:	e7e9      	b.n	2c5c <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    2c88:	4b0d      	ldr	r3, [pc, #52]	; (2cc0 <system_clock_source_disable+0x7c>)
    2c8a:	681a      	ldr	r2, [r3, #0]
    2c8c:	2102      	movs	r1, #2
    2c8e:	438a      	bics	r2, r1
    2c90:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	b29b      	uxth	r3, r3
    2c96:	4a08      	ldr	r2, [pc, #32]	; (2cb8 <system_clock_source_disable+0x74>)
    2c98:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2c9a:	2000      	movs	r0, #0
		break;
    2c9c:	e7de      	b.n	2c5c <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    2c9e:	4906      	ldr	r1, [pc, #24]	; (2cb8 <system_clock_source_disable+0x74>)
    2ca0:	2228      	movs	r2, #40	; 0x28
    2ca2:	5c8b      	ldrb	r3, [r1, r2]
    2ca4:	2002      	movs	r0, #2
    2ca6:	4383      	bics	r3, r0
    2ca8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2caa:	2000      	movs	r0, #0
		break;
    2cac:	e7d6      	b.n	2c5c <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    2cae:	2017      	movs	r0, #23
    2cb0:	e7d4      	b.n	2c5c <system_clock_source_disable+0x18>
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	0001c3d4 	.word	0x0001c3d4
    2cb8:	40000c00 	.word	0x40000c00
    2cbc:	40001000 	.word	0x40001000
    2cc0:	20000ac8 	.word	0x20000ac8

00002cc4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc6:	46ce      	mov	lr, r9
    2cc8:	4647      	mov	r7, r8
    2cca:	b580      	push	{r7, lr}
    2ccc:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2cce:	2280      	movs	r2, #128	; 0x80
    2cd0:	0052      	lsls	r2, r2, #1
    2cd2:	4b76      	ldr	r3, [pc, #472]	; (2eac <system_clock_init+0x1e8>)
    2cd4:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2cd6:	3afd      	subs	r2, #253	; 0xfd
    2cd8:	4b75      	ldr	r3, [pc, #468]	; (2eb0 <system_clock_init+0x1ec>)
    2cda:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2cdc:	4a75      	ldr	r2, [pc, #468]	; (2eb4 <system_clock_init+0x1f0>)
    2cde:	6853      	ldr	r3, [r2, #4]
    2ce0:	211e      	movs	r1, #30
    2ce2:	438b      	bics	r3, r1
    2ce4:	391a      	subs	r1, #26
    2ce6:	430b      	orrs	r3, r1
    2ce8:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2cea:	2380      	movs	r3, #128	; 0x80
    2cec:	05db      	lsls	r3, r3, #23
    2cee:	789b      	ldrb	r3, [r3, #2]
    2cf0:	2b02      	cmp	r3, #2
    2cf2:	d00f      	beq.n	2d14 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2cf4:	2380      	movs	r3, #128	; 0x80
    2cf6:	05db      	lsls	r3, r3, #23
    2cf8:	789b      	ldrb	r3, [r3, #2]
    2cfa:	b25b      	sxtb	r3, r3
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	db09      	blt.n	2d14 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2d00:	2380      	movs	r3, #128	; 0x80
    2d02:	05db      	lsls	r3, r3, #23
    2d04:	2201      	movs	r2, #1
    2d06:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2d08:	3201      	adds	r2, #1
    2d0a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2d0c:	001a      	movs	r2, r3
    2d0e:	7993      	ldrb	r3, [r2, #6]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d0fc      	beq.n	2d0e <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2d14:	a809      	add	r0, sp, #36	; 0x24
    2d16:	2300      	movs	r3, #0
    2d18:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2d1a:	2280      	movs	r2, #128	; 0x80
    2d1c:	0212      	lsls	r2, r2, #8
    2d1e:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2d20:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2d22:	2201      	movs	r2, #1
    2d24:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    2d26:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    2d28:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2d2a:	3203      	adds	r2, #3
    2d2c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2d2e:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2d30:	4b61      	ldr	r3, [pc, #388]	; (2eb8 <system_clock_init+0x1f4>)
    2d32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2d34:	2005      	movs	r0, #5
    2d36:	4b61      	ldr	r3, [pc, #388]	; (2ebc <system_clock_init+0x1f8>)
    2d38:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2d3a:	4961      	ldr	r1, [pc, #388]	; (2ec0 <system_clock_init+0x1fc>)
    2d3c:	2201      	movs	r2, #1
    2d3e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2d40:	421a      	tst	r2, r3
    2d42:	d0fc      	beq.n	2d3e <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2d44:	a901      	add	r1, sp, #4
    2d46:	2501      	movs	r5, #1
    2d48:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2d4a:	2400      	movs	r4, #0
    2d4c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2d4e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2d50:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2d52:	2303      	movs	r3, #3
    2d54:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2d56:	2000      	movs	r0, #0
    2d58:	4b5a      	ldr	r3, [pc, #360]	; (2ec4 <system_clock_init+0x200>)
    2d5a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2d5c:	2006      	movs	r0, #6
    2d5e:	4b5a      	ldr	r3, [pc, #360]	; (2ec8 <system_clock_init+0x204>)
    2d60:	4798      	blx	r3
	config->run_in_standby  = false;
    2d62:	466b      	mov	r3, sp
    2d64:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    2d66:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    2d68:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    2d6a:	4668      	mov	r0, sp
    2d6c:	4b57      	ldr	r3, [pc, #348]	; (2ecc <system_clock_init+0x208>)
    2d6e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2d70:	2006      	movs	r0, #6
    2d72:	4b52      	ldr	r3, [pc, #328]	; (2ebc <system_clock_init+0x1f8>)
    2d74:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2d76:	494d      	ldr	r1, [pc, #308]	; (2eac <system_clock_init+0x1e8>)
    2d78:	2210      	movs	r2, #16
    2d7a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2d7c:	421a      	tst	r2, r3
    2d7e:	d0fc      	beq.n	2d7a <system_clock_init+0xb6>
	config->division_factor    = 1;
    2d80:	a901      	add	r1, sp, #4
    2d82:	2301      	movs	r3, #1
    2d84:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2d86:	2400      	movs	r4, #0
    2d88:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2d8a:	3305      	adds	r3, #5
    2d8c:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2d8e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2d90:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2d92:	2000      	movs	r0, #0
    2d94:	4b4b      	ldr	r3, [pc, #300]	; (2ec4 <system_clock_init+0x200>)
    2d96:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2d98:	ab04      	add	r3, sp, #16
    2d9a:	2200      	movs	r2, #0
    2d9c:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2d9e:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2da0:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2da2:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2da4:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2da6:	213f      	movs	r1, #63	; 0x3f
    2da8:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2daa:	393b      	subs	r1, #59	; 0x3b
    2dac:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2dae:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2db0:	4b47      	ldr	r3, [pc, #284]	; (2ed0 <system_clock_init+0x20c>)
    2db2:	681b      	ldr	r3, [r3, #0]
    2db4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    2db6:	2b3f      	cmp	r3, #63	; 0x3f
    2db8:	d100      	bne.n	2dbc <system_clock_init+0xf8>
    2dba:	e074      	b.n	2ea6 <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2dbc:	a804      	add	r0, sp, #16
    2dbe:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2dc0:	23b7      	movs	r3, #183	; 0xb7
    2dc2:	00db      	lsls	r3, r3, #3
    2dc4:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2dc6:	2307      	movs	r3, #7
    2dc8:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2dca:	3338      	adds	r3, #56	; 0x38
    2dcc:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2dce:	4b41      	ldr	r3, [pc, #260]	; (2ed4 <system_clock_init+0x210>)
    2dd0:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2dd2:	4b41      	ldr	r3, [pc, #260]	; (2ed8 <system_clock_init+0x214>)
    2dd4:	4798      	blx	r3
	config->division_factor    = 1;
    2dd6:	ac01      	add	r4, sp, #4
    2dd8:	2601      	movs	r6, #1
    2dda:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2ddc:	2500      	movs	r5, #0
    2dde:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2de0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2de2:	2305      	movs	r3, #5
    2de4:	4699      	mov	r9, r3
    2de6:	7023      	strb	r3, [r4, #0]
    2de8:	7226      	strb	r6, [r4, #8]
    2dea:	0021      	movs	r1, r4
    2dec:	2001      	movs	r0, #1
    2dee:	4b35      	ldr	r3, [pc, #212]	; (2ec4 <system_clock_init+0x200>)
    2df0:	4698      	mov	r8, r3
    2df2:	4798      	blx	r3
    2df4:	2001      	movs	r0, #1
    2df6:	4f39      	ldr	r7, [pc, #228]	; (2edc <system_clock_init+0x218>)
    2df8:	47b8      	blx	r7
	config->high_when_disabled = false;
    2dfa:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2dfc:	2306      	movs	r3, #6
    2dfe:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2e00:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2e02:	7265      	strb	r5, [r4, #9]
    2e04:	464b      	mov	r3, r9
    2e06:	6063      	str	r3, [r4, #4]
    2e08:	0021      	movs	r1, r4
    2e0a:	2002      	movs	r0, #2
    2e0c:	47c0      	blx	r8
    2e0e:	2002      	movs	r0, #2
    2e10:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2e12:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2e14:	0021      	movs	r1, r4
    2e16:	2000      	movs	r0, #0
    2e18:	4b31      	ldr	r3, [pc, #196]	; (2ee0 <system_clock_init+0x21c>)
    2e1a:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2e1c:	2000      	movs	r0, #0
    2e1e:	4b31      	ldr	r3, [pc, #196]	; (2ee4 <system_clock_init+0x220>)
    2e20:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2e22:	2007      	movs	r0, #7
    2e24:	4b25      	ldr	r3, [pc, #148]	; (2ebc <system_clock_init+0x1f8>)
    2e26:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2e28:	4920      	ldr	r1, [pc, #128]	; (2eac <system_clock_init+0x1e8>)
    2e2a:	22d0      	movs	r2, #208	; 0xd0
    2e2c:	0112      	lsls	r2, r2, #4
    2e2e:	68cb      	ldr	r3, [r1, #12]
    2e30:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2e32:	4293      	cmp	r3, r2
    2e34:	d1fb      	bne.n	2e2e <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2e36:	4c2c      	ldr	r4, [pc, #176]	; (2ee8 <system_clock_init+0x224>)
    2e38:	2301      	movs	r3, #1
    2e3a:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2e3c:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2e3e:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    2e40:	a901      	add	r1, sp, #4
    2e42:	2300      	movs	r3, #0
    2e44:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2e46:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2e48:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2e4a:	3307      	adds	r3, #7
    2e4c:	700b      	strb	r3, [r1, #0]
    2e4e:	3b01      	subs	r3, #1
    2e50:	604b      	str	r3, [r1, #4]
    2e52:	2000      	movs	r0, #0
    2e54:	4b1b      	ldr	r3, [pc, #108]	; (2ec4 <system_clock_init+0x200>)
    2e56:	4798      	blx	r3
    2e58:	2000      	movs	r0, #0
    2e5a:	4b20      	ldr	r3, [pc, #128]	; (2edc <system_clock_init+0x218>)
    2e5c:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    2e5e:	2000      	movs	r0, #0
    2e60:	4b22      	ldr	r3, [pc, #136]	; (2eec <system_clock_init+0x228>)
    2e62:	4798      	blx	r3
    2e64:	7921      	ldrb	r1, [r4, #4]
    2e66:	b2c9      	uxtb	r1, r1
    2e68:	4b21      	ldr	r3, [pc, #132]	; (2ef0 <system_clock_init+0x22c>)
    2e6a:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    2e6c:	4b21      	ldr	r3, [pc, #132]	; (2ef4 <system_clock_init+0x230>)
    2e6e:	4298      	cmp	r0, r3
    2e70:	d814      	bhi.n	2e9c <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2e72:	2380      	movs	r3, #128	; 0x80
    2e74:	05db      	lsls	r3, r3, #23
    2e76:	789b      	ldrb	r3, [r3, #2]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d00f      	beq.n	2e9c <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2e7c:	2380      	movs	r3, #128	; 0x80
    2e7e:	05db      	lsls	r3, r3, #23
    2e80:	789b      	ldrb	r3, [r3, #2]
    2e82:	b25b      	sxtb	r3, r3
    2e84:	2b00      	cmp	r3, #0
    2e86:	db09      	blt.n	2e9c <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2e88:	2380      	movs	r3, #128	; 0x80
    2e8a:	05db      	lsls	r3, r3, #23
    2e8c:	2201      	movs	r2, #1
    2e8e:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    2e90:	2200      	movs	r2, #0
    2e92:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    2e94:	001a      	movs	r2, r3
    2e96:	7993      	ldrb	r3, [r2, #6]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d0fc      	beq.n	2e96 <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    2e9c:	b00d      	add	sp, #52	; 0x34
    2e9e:	bc0c      	pop	{r2, r3}
    2ea0:	4690      	mov	r8, r2
    2ea2:	4699      	mov	r9, r3
    2ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2ea6:	3b20      	subs	r3, #32
    2ea8:	e788      	b.n	2dbc <system_clock_init+0xf8>
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	40000c00 	.word	0x40000c00
    2eb0:	40001400 	.word	0x40001400
    2eb4:	41004000 	.word	0x41004000
    2eb8:	00002a65 	.word	0x00002a65
    2ebc:	00002b89 	.word	0x00002b89
    2ec0:	40001000 	.word	0x40001000
    2ec4:	00002f1d 	.word	0x00002f1d
    2ec8:	00002c45 	.word	0x00002c45
    2ecc:	00002a31 	.word	0x00002a31
    2ed0:	00806020 	.word	0x00806020
    2ed4:	00002b01 	.word	0x00002b01
    2ed8:	00002ef9 	.word	0x00002ef9
    2edc:	00002fc9 	.word	0x00002fc9
    2ee0:	000030e5 	.word	0x000030e5
    2ee4:	00003075 	.word	0x00003075
    2ee8:	40000400 	.word	0x40000400
    2eec:	00003009 	.word	0x00003009
    2ef0:	0001270d 	.word	0x0001270d
    2ef4:	00b71b00 	.word	0x00b71b00

00002ef8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2ef8:	4a06      	ldr	r2, [pc, #24]	; (2f14 <system_gclk_init+0x1c>)
    2efa:	6953      	ldr	r3, [r2, #20]
    2efc:	2140      	movs	r1, #64	; 0x40
    2efe:	430b      	orrs	r3, r1
    2f00:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2f02:	2201      	movs	r2, #1
    2f04:	4b04      	ldr	r3, [pc, #16]	; (2f18 <system_gclk_init+0x20>)
    2f06:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2f08:	0019      	movs	r1, r3
    2f0a:	780b      	ldrb	r3, [r1, #0]
    2f0c:	4213      	tst	r3, r2
    2f0e:	d1fc      	bne.n	2f0a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2f10:	4770      	bx	lr
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	40000400 	.word	0x40000400
    2f18:	40001800 	.word	0x40001800

00002f1c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2f1c:	b570      	push	{r4, r5, r6, lr}
    2f1e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f20:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f22:	784b      	ldrb	r3, [r1, #1]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d002      	beq.n	2f2e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f28:	2380      	movs	r3, #128	; 0x80
    2f2a:	00db      	lsls	r3, r3, #3
    2f2c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f2e:	7a4b      	ldrb	r3, [r1, #9]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d002      	beq.n	2f3a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f34:	2380      	movs	r3, #128	; 0x80
    2f36:	011b      	lsls	r3, r3, #4
    2f38:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f3a:	6848      	ldr	r0, [r1, #4]
    2f3c:	2801      	cmp	r0, #1
    2f3e:	d90f      	bls.n	2f60 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f40:	1e43      	subs	r3, r0, #1
    2f42:	4218      	tst	r0, r3
    2f44:	d131      	bne.n	2faa <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f46:	2802      	cmp	r0, #2
    2f48:	d92d      	bls.n	2fa6 <system_gclk_gen_set_config+0x8a>
    2f4a:	2302      	movs	r3, #2
    2f4c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2f4e:	3201      	adds	r2, #1
						mask <<= 1) {
    2f50:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2f52:	4298      	cmp	r0, r3
    2f54:	d8fb      	bhi.n	2f4e <system_gclk_gen_set_config+0x32>
    2f56:	2380      	movs	r3, #128	; 0x80
    2f58:	015b      	lsls	r3, r3, #5
    2f5a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2f5c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f5e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2f60:	7a0b      	ldrb	r3, [r1, #8]
    2f62:	2b00      	cmp	r3, #0
    2f64:	d002      	beq.n	2f6c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2f66:	2380      	movs	r3, #128	; 0x80
    2f68:	019b      	lsls	r3, r3, #6
    2f6a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2f6c:	2604      	movs	r6, #4
    2f6e:	40a6      	lsls	r6, r4
    2f70:	4911      	ldr	r1, [pc, #68]	; (2fb8 <system_gclk_gen_set_config+0x9c>)
    2f72:	4a12      	ldr	r2, [pc, #72]	; (2fbc <system_gclk_gen_set_config+0xa0>)
    2f74:	684b      	ldr	r3, [r1, #4]
    2f76:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2f78:	421e      	tst	r6, r3
    2f7a:	d1fb      	bne.n	2f74 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2f7c:	4b10      	ldr	r3, [pc, #64]	; (2fc0 <system_gclk_gen_set_config+0xa4>)
    2f7e:	4798      	blx	r3
    2f80:	00a4      	lsls	r4, r4, #2
    2f82:	4b0d      	ldr	r3, [pc, #52]	; (2fb8 <system_gclk_gen_set_config+0x9c>)
    2f84:	469c      	mov	ip, r3
    2f86:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2f88:	6a22      	ldr	r2, [r4, #32]
    2f8a:	2380      	movs	r3, #128	; 0x80
    2f8c:	005b      	lsls	r3, r3, #1
    2f8e:	401a      	ands	r2, r3
    2f90:	432a      	orrs	r2, r5
    2f92:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2f94:	4661      	mov	r1, ip
    2f96:	4a09      	ldr	r2, [pc, #36]	; (2fbc <system_gclk_gen_set_config+0xa0>)
    2f98:	684b      	ldr	r3, [r1, #4]
    2f9a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2f9c:	421e      	tst	r6, r3
    2f9e:	d1fb      	bne.n	2f98 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    2fa0:	4b08      	ldr	r3, [pc, #32]	; (2fc4 <system_gclk_gen_set_config+0xa8>)
    2fa2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2fa6:	2200      	movs	r2, #0
    2fa8:	e7d5      	b.n	2f56 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2faa:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2fac:	2380      	movs	r3, #128	; 0x80
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	4318      	orrs	r0, r3
    2fb2:	4305      	orrs	r5, r0
    2fb4:	e7d4      	b.n	2f60 <system_gclk_gen_set_config+0x44>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	40001800 	.word	0x40001800
    2fbc:	000007fc 	.word	0x000007fc
    2fc0:	000001ad 	.word	0x000001ad
    2fc4:	000001ed 	.word	0x000001ed

00002fc8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2fc8:	b510      	push	{r4, lr}
    2fca:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2fcc:	2204      	movs	r2, #4
    2fce:	4082      	lsls	r2, r0
    2fd0:	4809      	ldr	r0, [pc, #36]	; (2ff8 <system_gclk_gen_enable+0x30>)
    2fd2:	490a      	ldr	r1, [pc, #40]	; (2ffc <system_gclk_gen_enable+0x34>)
    2fd4:	6843      	ldr	r3, [r0, #4]
    2fd6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2fd8:	421a      	tst	r2, r3
    2fda:	d1fb      	bne.n	2fd4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    2fdc:	4b08      	ldr	r3, [pc, #32]	; (3000 <system_gclk_gen_enable+0x38>)
    2fde:	4798      	blx	r3
    2fe0:	00a4      	lsls	r4, r4, #2
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <system_gclk_gen_enable+0x30>)
    2fe4:	469c      	mov	ip, r3
    2fe6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2fe8:	6a22      	ldr	r2, [r4, #32]
    2fea:	2380      	movs	r3, #128	; 0x80
    2fec:	005b      	lsls	r3, r3, #1
    2fee:	4313      	orrs	r3, r2
    2ff0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    2ff2:	4b04      	ldr	r3, [pc, #16]	; (3004 <system_gclk_gen_enable+0x3c>)
    2ff4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	40001800 	.word	0x40001800
    2ffc:	000007fc 	.word	0x000007fc
    3000:	000001ad 	.word	0x000001ad
    3004:	000001ed 	.word	0x000001ed

00003008 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    300c:	2204      	movs	r2, #4
    300e:	4082      	lsls	r2, r0
    3010:	4812      	ldr	r0, [pc, #72]	; (305c <system_gclk_gen_get_hz+0x54>)
    3012:	4913      	ldr	r1, [pc, #76]	; (3060 <system_gclk_gen_get_hz+0x58>)
    3014:	6843      	ldr	r3, [r0, #4]
    3016:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3018:	421a      	tst	r2, r3
    301a:	d1fb      	bne.n	3014 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    301c:	4b11      	ldr	r3, [pc, #68]	; (3064 <system_gclk_gen_get_hz+0x5c>)
    301e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3020:	4f0e      	ldr	r7, [pc, #56]	; (305c <system_gclk_gen_get_hz+0x54>)
    3022:	3408      	adds	r4, #8
    3024:	00a4      	lsls	r4, r4, #2
    3026:	59e0      	ldr	r0, [r4, r7]
    3028:	0700      	lsls	r0, r0, #28
    302a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    302c:	4b0e      	ldr	r3, [pc, #56]	; (3068 <system_gclk_gen_get_hz+0x60>)
    302e:	4798      	blx	r3
    3030:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3032:	59e5      	ldr	r5, [r4, r7]
    3034:	04ed      	lsls	r5, r5, #19
    3036:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3038:	59e4      	ldr	r4, [r4, r7]
    303a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    303c:	4b0b      	ldr	r3, [pc, #44]	; (306c <system_gclk_gen_get_hz+0x64>)
    303e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3040:	2d00      	cmp	r5, #0
    3042:	d107      	bne.n	3054 <system_gclk_gen_get_hz+0x4c>
    3044:	2c01      	cmp	r4, #1
    3046:	d907      	bls.n	3058 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3048:	0021      	movs	r1, r4
    304a:	0030      	movs	r0, r6
    304c:	4b08      	ldr	r3, [pc, #32]	; (3070 <system_gclk_gen_get_hz+0x68>)
    304e:	4798      	blx	r3
    3050:	0006      	movs	r6, r0
    3052:	e001      	b.n	3058 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3054:	3401      	adds	r4, #1
    3056:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3058:	0030      	movs	r0, r6
    305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305c:	40001800 	.word	0x40001800
    3060:	000007fc 	.word	0x000007fc
    3064:	000001ad 	.word	0x000001ad
    3068:	0000299d 	.word	0x0000299d
    306c:	000001ed 	.word	0x000001ed
    3070:	0001270d 	.word	0x0001270d

00003074 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3074:	b510      	push	{r4, lr}
    3076:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3078:	4b09      	ldr	r3, [pc, #36]	; (30a0 <system_gclk_chan_enable+0x2c>)
    307a:	4798      	blx	r3
    307c:	00a0      	lsls	r0, r4, #2
    307e:	4b09      	ldr	r3, [pc, #36]	; (30a4 <system_gclk_chan_enable+0x30>)
    3080:	469c      	mov	ip, r3
    3082:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3084:	2280      	movs	r2, #128	; 0x80
    3086:	5883      	ldr	r3, [r0, r2]
    3088:	2140      	movs	r1, #64	; 0x40
    308a:	430b      	orrs	r3, r1
    308c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    308e:	3140      	adds	r1, #64	; 0x40
    3090:	3a40      	subs	r2, #64	; 0x40
    3092:	5843      	ldr	r3, [r0, r1]
    3094:	421a      	tst	r2, r3
    3096:	d0fc      	beq.n	3092 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    3098:	4b03      	ldr	r3, [pc, #12]	; (30a8 <system_gclk_chan_enable+0x34>)
    309a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    309c:	bd10      	pop	{r4, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	000001ad 	.word	0x000001ad
    30a4:	40001800 	.word	0x40001800
    30a8:	000001ed 	.word	0x000001ed

000030ac <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    30ac:	b510      	push	{r4, lr}
    30ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30b0:	4b09      	ldr	r3, [pc, #36]	; (30d8 <system_gclk_chan_disable+0x2c>)
    30b2:	4798      	blx	r3
    30b4:	00a0      	lsls	r0, r4, #2
    30b6:	4b09      	ldr	r3, [pc, #36]	; (30dc <system_gclk_chan_disable+0x30>)
    30b8:	469c      	mov	ip, r3
    30ba:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    30bc:	2280      	movs	r2, #128	; 0x80
    30be:	5883      	ldr	r3, [r0, r2]
    30c0:	2140      	movs	r1, #64	; 0x40
    30c2:	438b      	bics	r3, r1
    30c4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    30c6:	3140      	adds	r1, #64	; 0x40
    30c8:	3a40      	subs	r2, #64	; 0x40
    30ca:	5843      	ldr	r3, [r0, r1]
    30cc:	421a      	tst	r2, r3
    30ce:	d1fc      	bne.n	30ca <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    30d0:	4b03      	ldr	r3, [pc, #12]	; (30e0 <system_gclk_chan_disable+0x34>)
    30d2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    30d4:	bd10      	pop	{r4, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	000001ad 	.word	0x000001ad
    30dc:	40001800 	.word	0x40001800
    30e0:	000001ed 	.word	0x000001ed

000030e4 <system_gclk_chan_set_config>:
{
    30e4:	b570      	push	{r4, r5, r6, lr}
    30e6:	0004      	movs	r4, r0
    30e8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    30ea:	4b05      	ldr	r3, [pc, #20]	; (3100 <system_gclk_chan_set_config+0x1c>)
    30ec:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    30ee:	782a      	ldrb	r2, [r5, #0]
    30f0:	230f      	movs	r3, #15
    30f2:	4013      	ands	r3, r2
    30f4:	3420      	adds	r4, #32
    30f6:	00a4      	lsls	r4, r4, #2
    30f8:	4a02      	ldr	r2, [pc, #8]	; (3104 <system_gclk_chan_set_config+0x20>)
    30fa:	50a3      	str	r3, [r4, r2]
}
    30fc:	bd70      	pop	{r4, r5, r6, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	000030ad 	.word	0x000030ad
    3104:	40001800 	.word	0x40001800

00003108 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3108:	b510      	push	{r4, lr}
    310a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    310c:	4b06      	ldr	r3, [pc, #24]	; (3128 <system_gclk_chan_get_hz+0x20>)
    310e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3110:	3420      	adds	r4, #32
    3112:	00a4      	lsls	r4, r4, #2
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <system_gclk_chan_get_hz+0x24>)
    3116:	58e4      	ldr	r4, [r4, r3]
    3118:	0724      	lsls	r4, r4, #28
    311a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    311c:	4b04      	ldr	r3, [pc, #16]	; (3130 <system_gclk_chan_get_hz+0x28>)
    311e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3120:	0020      	movs	r0, r4
    3122:	4b04      	ldr	r3, [pc, #16]	; (3134 <system_gclk_chan_get_hz+0x2c>)
    3124:	4798      	blx	r3
}
    3126:	bd10      	pop	{r4, pc}
    3128:	000001ad 	.word	0x000001ad
    312c:	40001800 	.word	0x40001800
    3130:	000001ed 	.word	0x000001ed
    3134:	00003009 	.word	0x00003009

00003138 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3138:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    313a:	78d3      	ldrb	r3, [r2, #3]
    313c:	2b00      	cmp	r3, #0
    313e:	d135      	bne.n	31ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3140:	7813      	ldrb	r3, [r2, #0]
    3142:	2b80      	cmp	r3, #128	; 0x80
    3144:	d029      	beq.n	319a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3146:	061b      	lsls	r3, r3, #24
    3148:	2480      	movs	r4, #128	; 0x80
    314a:	0264      	lsls	r4, r4, #9
    314c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    314e:	7854      	ldrb	r4, [r2, #1]
    3150:	2502      	movs	r5, #2
    3152:	43ac      	bics	r4, r5
    3154:	d106      	bne.n	3164 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3156:	7894      	ldrb	r4, [r2, #2]
    3158:	2c00      	cmp	r4, #0
    315a:	d120      	bne.n	319e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    315c:	2480      	movs	r4, #128	; 0x80
    315e:	02a4      	lsls	r4, r4, #10
    3160:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3162:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3164:	7854      	ldrb	r4, [r2, #1]
    3166:	3c01      	subs	r4, #1
    3168:	2c01      	cmp	r4, #1
    316a:	d91c      	bls.n	31a6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    316c:	040d      	lsls	r5, r1, #16
    316e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3170:	24a0      	movs	r4, #160	; 0xa0
    3172:	05e4      	lsls	r4, r4, #23
    3174:	432c      	orrs	r4, r5
    3176:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3178:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    317a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    317c:	24d0      	movs	r4, #208	; 0xd0
    317e:	0624      	lsls	r4, r4, #24
    3180:	432c      	orrs	r4, r5
    3182:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3184:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3186:	78d4      	ldrb	r4, [r2, #3]
    3188:	2c00      	cmp	r4, #0
    318a:	d122      	bne.n	31d2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    318c:	035b      	lsls	r3, r3, #13
    318e:	d51c      	bpl.n	31ca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3190:	7893      	ldrb	r3, [r2, #2]
    3192:	2b01      	cmp	r3, #1
    3194:	d01e      	beq.n	31d4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3196:	6141      	str	r1, [r0, #20]
    3198:	e017      	b.n	31ca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    319a:	2300      	movs	r3, #0
    319c:	e7d7      	b.n	314e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    319e:	24c0      	movs	r4, #192	; 0xc0
    31a0:	02e4      	lsls	r4, r4, #11
    31a2:	4323      	orrs	r3, r4
    31a4:	e7dd      	b.n	3162 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    31a6:	4c0d      	ldr	r4, [pc, #52]	; (31dc <_system_pinmux_config+0xa4>)
    31a8:	4023      	ands	r3, r4
    31aa:	e7df      	b.n	316c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    31ac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    31ae:	040c      	lsls	r4, r1, #16
    31b0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31b2:	23a0      	movs	r3, #160	; 0xa0
    31b4:	05db      	lsls	r3, r3, #23
    31b6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31b8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    31ba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    31bc:	23d0      	movs	r3, #208	; 0xd0
    31be:	061b      	lsls	r3, r3, #24
    31c0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31c2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    31c4:	78d3      	ldrb	r3, [r2, #3]
    31c6:	2b00      	cmp	r3, #0
    31c8:	d103      	bne.n	31d2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31ca:	7853      	ldrb	r3, [r2, #1]
    31cc:	3b01      	subs	r3, #1
    31ce:	2b01      	cmp	r3, #1
    31d0:	d902      	bls.n	31d8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    31d2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    31d4:	6181      	str	r1, [r0, #24]
    31d6:	e7f8      	b.n	31ca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    31d8:	6081      	str	r1, [r0, #8]
}
    31da:	e7fa      	b.n	31d2 <_system_pinmux_config+0x9a>
    31dc:	fffbffff 	.word	0xfffbffff

000031e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    31e0:	b510      	push	{r4, lr}
    31e2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    31e4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    31e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    31e8:	2900      	cmp	r1, #0
    31ea:	d104      	bne.n	31f6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    31ec:	0943      	lsrs	r3, r0, #5
    31ee:	01db      	lsls	r3, r3, #7
    31f0:	4905      	ldr	r1, [pc, #20]	; (3208 <system_pinmux_pin_set_config+0x28>)
    31f2:	468c      	mov	ip, r1
    31f4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    31f6:	241f      	movs	r4, #31
    31f8:	4020      	ands	r0, r4
    31fa:	2101      	movs	r1, #1
    31fc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    31fe:	0018      	movs	r0, r3
    3200:	4b02      	ldr	r3, [pc, #8]	; (320c <system_pinmux_pin_set_config+0x2c>)
    3202:	4798      	blx	r3
}
    3204:	bd10      	pop	{r4, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	40002800 	.word	0x40002800
    320c:	00003139 	.word	0x00003139

00003210 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3210:	4770      	bx	lr
	...

00003214 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3214:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3216:	4b05      	ldr	r3, [pc, #20]	; (322c <system_init+0x18>)
    3218:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    321a:	4b05      	ldr	r3, [pc, #20]	; (3230 <system_init+0x1c>)
    321c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    321e:	4b05      	ldr	r3, [pc, #20]	; (3234 <system_init+0x20>)
    3220:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3222:	4b05      	ldr	r3, [pc, #20]	; (3238 <system_init+0x24>)
    3224:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <system_init+0x28>)
    3228:	4798      	blx	r3
}
    322a:	bd10      	pop	{r4, pc}
    322c:	00002cc5 	.word	0x00002cc5
    3230:	0000021d 	.word	0x0000021d
    3234:	00003211 	.word	0x00003211
    3238:	00000a01 	.word	0x00000a01
    323c:	00003211 	.word	0x00003211

00003240 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3240:	1c93      	adds	r3, r2, #2
    3242:	009b      	lsls	r3, r3, #2
    3244:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    3246:	2a02      	cmp	r2, #2
    3248:	d009      	beq.n	325e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    324a:	2a03      	cmp	r2, #3
    324c:	d00c      	beq.n	3268 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    324e:	2301      	movs	r3, #1
    3250:	4093      	lsls	r3, r2
    3252:	001a      	movs	r2, r3
    3254:	7e03      	ldrb	r3, [r0, #24]
    3256:	4313      	orrs	r3, r2
    3258:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    325a:	2000      	movs	r0, #0
    325c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    325e:	7e03      	ldrb	r3, [r0, #24]
    3260:	2210      	movs	r2, #16
    3262:	4313      	orrs	r3, r2
    3264:	7603      	strb	r3, [r0, #24]
    3266:	e7f8      	b.n	325a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3268:	7e03      	ldrb	r3, [r0, #24]
    326a:	2220      	movs	r2, #32
    326c:	4313      	orrs	r3, r2
    326e:	7603      	strb	r3, [r0, #24]
    3270:	e7f3      	b.n	325a <tc_register_callback+0x1a>
	...

00003274 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3274:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3276:	0080      	lsls	r0, r0, #2
    3278:	4b16      	ldr	r3, [pc, #88]	; (32d4 <_tc_interrupt_handler+0x60>)
    327a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    327c:	6823      	ldr	r3, [r4, #0]
    327e:	7a9d      	ldrb	r5, [r3, #10]
    3280:	7e22      	ldrb	r2, [r4, #24]
    3282:	7e63      	ldrb	r3, [r4, #25]
    3284:	4013      	ands	r3, r2
    3286:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3288:	07eb      	lsls	r3, r5, #31
    328a:	d406      	bmi.n	329a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    328c:	07ab      	lsls	r3, r5, #30
    328e:	d40b      	bmi.n	32a8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3290:	06eb      	lsls	r3, r5, #27
    3292:	d410      	bmi.n	32b6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3294:	06ab      	lsls	r3, r5, #26
    3296:	d415      	bmi.n	32c4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    3298:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    329a:	0020      	movs	r0, r4
    329c:	68a3      	ldr	r3, [r4, #8]
    329e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    32a0:	2301      	movs	r3, #1
    32a2:	6822      	ldr	r2, [r4, #0]
    32a4:	7293      	strb	r3, [r2, #10]
    32a6:	e7f1      	b.n	328c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    32a8:	0020      	movs	r0, r4
    32aa:	68e3      	ldr	r3, [r4, #12]
    32ac:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    32ae:	2302      	movs	r3, #2
    32b0:	6822      	ldr	r2, [r4, #0]
    32b2:	7293      	strb	r3, [r2, #10]
    32b4:	e7ec      	b.n	3290 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    32b6:	0020      	movs	r0, r4
    32b8:	6923      	ldr	r3, [r4, #16]
    32ba:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    32bc:	2310      	movs	r3, #16
    32be:	6822      	ldr	r2, [r4, #0]
    32c0:	7293      	strb	r3, [r2, #10]
    32c2:	e7e7      	b.n	3294 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    32c4:	0020      	movs	r0, r4
    32c6:	6963      	ldr	r3, [r4, #20]
    32c8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    32ca:	6823      	ldr	r3, [r4, #0]
    32cc:	2220      	movs	r2, #32
    32ce:	729a      	strb	r2, [r3, #10]
}
    32d0:	e7e2      	b.n	3298 <_tc_interrupt_handler+0x24>
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	20001160 	.word	0x20001160

000032d8 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    32d8:	b510      	push	{r4, lr}
    32da:	2000      	movs	r0, #0
    32dc:	4b01      	ldr	r3, [pc, #4]	; (32e4 <TC0_Handler+0xc>)
    32de:	4798      	blx	r3
    32e0:	bd10      	pop	{r4, pc}
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	00003275 	.word	0x00003275

000032e8 <TC1_Handler>:
    32e8:	b510      	push	{r4, lr}
    32ea:	2001      	movs	r0, #1
    32ec:	4b01      	ldr	r3, [pc, #4]	; (32f4 <TC1_Handler+0xc>)
    32ee:	4798      	blx	r3
    32f0:	bd10      	pop	{r4, pc}
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	00003275 	.word	0x00003275

000032f8 <TC2_Handler>:
    32f8:	b510      	push	{r4, lr}
    32fa:	2002      	movs	r0, #2
    32fc:	4b01      	ldr	r3, [pc, #4]	; (3304 <TC2_Handler+0xc>)
    32fe:	4798      	blx	r3
    3300:	bd10      	pop	{r4, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	00003275 	.word	0x00003275

00003308 <TC3_Handler>:
    3308:	b510      	push	{r4, lr}
    330a:	2003      	movs	r0, #3
    330c:	4b01      	ldr	r3, [pc, #4]	; (3314 <TC3_Handler+0xc>)
    330e:	4798      	blx	r3
    3310:	bd10      	pop	{r4, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00003275 	.word	0x00003275

00003318 <TC4_Handler>:
    3318:	b510      	push	{r4, lr}
    331a:	2004      	movs	r0, #4
    331c:	4b01      	ldr	r3, [pc, #4]	; (3324 <TC4_Handler+0xc>)
    331e:	4798      	blx	r3
    3320:	bd10      	pop	{r4, pc}
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	00003275 	.word	0x00003275

00003328 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3328:	b530      	push	{r4, r5, lr}
    332a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    332c:	a901      	add	r1, sp, #4
    332e:	4b0c      	ldr	r3, [pc, #48]	; (3360 <_tc_get_inst_index+0x38>)
    3330:	000a      	movs	r2, r1
    3332:	cb32      	ldmia	r3!, {r1, r4, r5}
    3334:	c232      	stmia	r2!, {r1, r4, r5}
    3336:	cb12      	ldmia	r3!, {r1, r4}
    3338:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    333a:	9b01      	ldr	r3, [sp, #4]
    333c:	4298      	cmp	r0, r3
    333e:	d00b      	beq.n	3358 <_tc_get_inst_index+0x30>
    3340:	2301      	movs	r3, #1
    3342:	a901      	add	r1, sp, #4
    3344:	009a      	lsls	r2, r3, #2
    3346:	5852      	ldr	r2, [r2, r1]
    3348:	4282      	cmp	r2, r0
    334a:	d006      	beq.n	335a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    334c:	3301      	adds	r3, #1
    334e:	2b05      	cmp	r3, #5
    3350:	d1f8      	bne.n	3344 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3352:	2000      	movs	r0, #0
}
    3354:	b007      	add	sp, #28
    3356:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3358:	2300      	movs	r3, #0
			return i;
    335a:	b2d8      	uxtb	r0, r3
    335c:	e7fa      	b.n	3354 <_tc_get_inst_index+0x2c>
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	0001c420 	.word	0x0001c420

00003364 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    3364:	b5f0      	push	{r4, r5, r6, r7, lr}
    3366:	46c6      	mov	lr, r8
    3368:	b500      	push	{lr}
    336a:	b08e      	sub	sp, #56	; 0x38
    336c:	0004      	movs	r4, r0
    336e:	000d      	movs	r5, r1
    3370:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    3372:	0008      	movs	r0, r1
    3374:	4bae      	ldr	r3, [pc, #696]	; (3630 <tc_init+0x2cc>)
    3376:	4798      	blx	r3
    3378:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    337a:	ab0c      	add	r3, sp, #48	; 0x30
    337c:	221b      	movs	r2, #27
    337e:	701a      	strb	r2, [r3, #0]
    3380:	705a      	strb	r2, [r3, #1]
    3382:	3201      	adds	r2, #1
    3384:	709a      	strb	r2, [r3, #2]
    3386:	70da      	strb	r2, [r3, #3]
    3388:	3201      	adds	r2, #1
    338a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    338c:	a902      	add	r1, sp, #8
    338e:	4ba9      	ldr	r3, [pc, #676]	; (3634 <tc_init+0x2d0>)
    3390:	3314      	adds	r3, #20
    3392:	000a      	movs	r2, r1
    3394:	cb83      	ldmia	r3!, {r0, r1, r7}
    3396:	c283      	stmia	r2!, {r0, r1, r7}
    3398:	cb83      	ldmia	r3!, {r0, r1, r7}
    339a:	c283      	stmia	r2!, {r0, r1, r7}
    339c:	cb83      	ldmia	r3!, {r0, r1, r7}
    339e:	c283      	stmia	r2!, {r0, r1, r7}
    33a0:	681b      	ldr	r3, [r3, #0]
    33a2:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    33a4:	2300      	movs	r3, #0
    33a6:	60a3      	str	r3, [r4, #8]
    33a8:	60e3      	str	r3, [r4, #12]
    33aa:	6123      	str	r3, [r4, #16]
    33ac:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    33ae:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    33b0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    33b2:	4643      	mov	r3, r8
    33b4:	009a      	lsls	r2, r3, #2
    33b6:	4ba0      	ldr	r3, [pc, #640]	; (3638 <tc_init+0x2d4>)
    33b8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    33ba:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    33bc:	2334      	movs	r3, #52	; 0x34
    33be:	5cf3      	ldrb	r3, [r6, r3]
    33c0:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    33c2:	78f3      	ldrb	r3, [r6, #3]
    33c4:	2b08      	cmp	r3, #8
    33c6:	d008      	beq.n	33da <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    33c8:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    33ca:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    33cc:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    33ce:	07db      	lsls	r3, r3, #31
    33d0:	d508      	bpl.n	33e4 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    33d2:	b00e      	add	sp, #56	; 0x38
    33d4:	bc04      	pop	{r2}
    33d6:	4690      	mov	r8, r2
    33d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    33da:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    33dc:	4642      	mov	r2, r8
    33de:	07d2      	lsls	r2, r2, #31
    33e0:	d4f7      	bmi.n	33d2 <tc_init+0x6e>
    33e2:	e7f1      	b.n	33c8 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    33e4:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    33e6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    33e8:	079b      	lsls	r3, r3, #30
    33ea:	d4f2      	bmi.n	33d2 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    33ec:	682b      	ldr	r3, [r5, #0]
    33ee:	079b      	lsls	r3, r3, #30
    33f0:	d4ef      	bmi.n	33d2 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    33f2:	7c33      	ldrb	r3, [r6, #16]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d112      	bne.n	341e <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    33f8:	7f33      	ldrb	r3, [r6, #28]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d11b      	bne.n	3436 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    33fe:	4643      	mov	r3, r8
    3400:	005a      	lsls	r2, r3, #1
    3402:	a902      	add	r1, sp, #8
    3404:	1c53      	adds	r3, r2, #1
    3406:	009b      	lsls	r3, r3, #2
    3408:	5858      	ldr	r0, [r3, r1]
    340a:	4643      	mov	r3, r8
    340c:	00db      	lsls	r3, r3, #3
    340e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    3410:	b2d9      	uxtb	r1, r3
    3412:	2904      	cmp	r1, #4
    3414:	d823      	bhi.n	345e <tc_init+0xfa>
    3416:	008b      	lsls	r3, r1, #2
    3418:	4988      	ldr	r1, [pc, #544]	; (363c <tc_init+0x2d8>)
    341a:	58cb      	ldr	r3, [r1, r3]
    341c:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    341e:	a901      	add	r1, sp, #4
    3420:	2301      	movs	r3, #1
    3422:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3424:	2200      	movs	r2, #0
    3426:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3428:	7e32      	ldrb	r2, [r6, #24]
    342a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    342c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    342e:	7d30      	ldrb	r0, [r6, #20]
    3430:	4b83      	ldr	r3, [pc, #524]	; (3640 <tc_init+0x2dc>)
    3432:	4798      	blx	r3
    3434:	e7e0      	b.n	33f8 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3436:	a901      	add	r1, sp, #4
    3438:	2301      	movs	r3, #1
    343a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    343c:	2200      	movs	r2, #0
    343e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3440:	3224      	adds	r2, #36	; 0x24
    3442:	18b2      	adds	r2, r6, r2
    3444:	7812      	ldrb	r2, [r2, #0]
    3446:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3448:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    344a:	331f      	adds	r3, #31
    344c:	18f3      	adds	r3, r6, r3
    344e:	7818      	ldrb	r0, [r3, #0]
    3450:	4b7b      	ldr	r3, [pc, #492]	; (3640 <tc_init+0x2dc>)
    3452:	4798      	blx	r3
    3454:	e7d3      	b.n	33fe <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    3456:	497b      	ldr	r1, [pc, #492]	; (3644 <tc_init+0x2e0>)
    3458:	694b      	ldr	r3, [r1, #20]
    345a:	4318      	orrs	r0, r3
    345c:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    345e:	78f3      	ldrb	r3, [r6, #3]
    3460:	2b08      	cmp	r3, #8
    3462:	d100      	bne.n	3466 <tc_init+0x102>
    3464:	e086      	b.n	3574 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    3466:	7833      	ldrb	r3, [r6, #0]
    3468:	466a      	mov	r2, sp
    346a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    346c:	ab0c      	add	r3, sp, #48	; 0x30
    346e:	4642      	mov	r2, r8
    3470:	5c9f      	ldrb	r7, [r3, r2]
    3472:	4669      	mov	r1, sp
    3474:	0038      	movs	r0, r7
    3476:	4b74      	ldr	r3, [pc, #464]	; (3648 <tc_init+0x2e4>)
    3478:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    347a:	0038      	movs	r0, r7
    347c:	4b73      	ldr	r3, [pc, #460]	; (364c <tc_init+0x2e8>)
    347e:	4798      	blx	r3
			(uint32_t)config->counter_size |
    3480:	78f3      	ldrb	r3, [r6, #3]
    3482:	79f2      	ldrb	r2, [r6, #7]
    3484:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    3486:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    3488:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    348a:	7a72      	ldrb	r2, [r6, #9]
    348c:	2a00      	cmp	r2, #0
    348e:	d002      	beq.n	3496 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    3490:	2280      	movs	r2, #128	; 0x80
    3492:	0252      	lsls	r2, r2, #9
    3494:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    3496:	7ab2      	ldrb	r2, [r6, #10]
    3498:	2a00      	cmp	r2, #0
    349a:	d002      	beq.n	34a2 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    349c:	2280      	movs	r2, #128	; 0x80
    349e:	0292      	lsls	r2, r2, #10
    34a0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    34a2:	7af2      	ldrb	r2, [r6, #11]
    34a4:	2a00      	cmp	r2, #0
    34a6:	d002      	beq.n	34ae <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    34a8:	2280      	movs	r2, #128	; 0x80
    34aa:	0352      	lsls	r2, r2, #13
    34ac:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    34ae:	7b32      	ldrb	r2, [r6, #12]
    34b0:	2a00      	cmp	r2, #0
    34b2:	d002      	beq.n	34ba <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    34b4:	2280      	movs	r2, #128	; 0x80
    34b6:	0392      	lsls	r2, r2, #14
    34b8:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    34ba:	7871      	ldrb	r1, [r6, #1]
    34bc:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    34be:	78b2      	ldrb	r2, [r6, #2]
    34c0:	01d2      	lsls	r2, r2, #7
    34c2:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    34c4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    34c6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    34c8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    34ca:	2b00      	cmp	r3, #0
    34cc:	d1fc      	bne.n	34c8 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    34ce:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    34d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    34d2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    34d4:	2b00      	cmp	r3, #0
    34d6:	d1fc      	bne.n	34d2 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    34d8:	79b3      	ldrb	r3, [r6, #6]
    34da:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    34dc:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    34de:	1e4b      	subs	r3, r1, #1
    34e0:	4199      	sbcs	r1, r3
    34e2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    34e4:	7bb3      	ldrb	r3, [r6, #14]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d001      	beq.n	34ee <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    34ea:	2301      	movs	r3, #1
    34ec:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    34ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    34f0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    34f2:	2b00      	cmp	r3, #0
    34f4:	d1fc      	bne.n	34f0 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    34f6:	33ff      	adds	r3, #255	; 0xff
    34f8:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    34fa:	2900      	cmp	r1, #0
    34fc:	d004      	beq.n	3508 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    34fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3500:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    3502:	2b00      	cmp	r3, #0
    3504:	d1fc      	bne.n	3500 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3506:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    3508:	7a33      	ldrb	r3, [r6, #8]
    350a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    350c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    350e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3510:	2b00      	cmp	r3, #0
    3512:	d1fc      	bne.n	350e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    3514:	7923      	ldrb	r3, [r4, #4]
    3516:	2b04      	cmp	r3, #4
    3518:	d059      	beq.n	35ce <tc_init+0x26a>
    351a:	2b08      	cmp	r3, #8
    351c:	d074      	beq.n	3608 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    351e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    3520:	2b00      	cmp	r3, #0
    3522:	d000      	beq.n	3526 <tc_init+0x1c2>
    3524:	e755      	b.n	33d2 <tc_init+0x6e>
    3526:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3528:	2b00      	cmp	r3, #0
    352a:	d1fc      	bne.n	3526 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    352c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    352e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3530:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3532:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3534:	2b00      	cmp	r3, #0
    3536:	d1fc      	bne.n	3532 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    3538:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    353a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    353c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    353e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3540:	2b00      	cmp	r3, #0
    3542:	d1fc      	bne.n	353e <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    3544:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    3546:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    3548:	2000      	movs	r0, #0
    354a:	e742      	b.n	33d2 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    354c:	493d      	ldr	r1, [pc, #244]	; (3644 <tc_init+0x2e0>)
    354e:	698b      	ldr	r3, [r1, #24]
    3550:	4318      	orrs	r0, r3
    3552:	6188      	str	r0, [r1, #24]
    3554:	e783      	b.n	345e <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    3556:	493b      	ldr	r1, [pc, #236]	; (3644 <tc_init+0x2e0>)
    3558:	69cb      	ldr	r3, [r1, #28]
    355a:	4318      	orrs	r0, r3
    355c:	61c8      	str	r0, [r1, #28]
    355e:	e77e      	b.n	345e <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    3560:	4938      	ldr	r1, [pc, #224]	; (3644 <tc_init+0x2e0>)
    3562:	6a0b      	ldr	r3, [r1, #32]
    3564:	4318      	orrs	r0, r3
    3566:	6208      	str	r0, [r1, #32]
    3568:	e779      	b.n	345e <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    356a:	4b36      	ldr	r3, [pc, #216]	; (3644 <tc_init+0x2e0>)
    356c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    356e:	4308      	orrs	r0, r1
    3570:	6258      	str	r0, [r3, #36]	; 0x24
    3572:	e774      	b.n	345e <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3574:	4643      	mov	r3, r8
    3576:	3301      	adds	r3, #1
    3578:	2b04      	cmp	r3, #4
    357a:	dd00      	ble.n	357e <tc_init+0x21a>
    357c:	e773      	b.n	3466 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    357e:	ab02      	add	r3, sp, #8
    3580:	1cd1      	adds	r1, r2, #3
    3582:	0089      	lsls	r1, r1, #2
    3584:	58c9      	ldr	r1, [r1, r3]
    3586:	3202      	adds	r2, #2
    3588:	0092      	lsls	r2, r2, #2
    358a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    358c:	b2da      	uxtb	r2, r3
    358e:	2a04      	cmp	r2, #4
    3590:	d900      	bls.n	3594 <tc_init+0x230>
    3592:	e768      	b.n	3466 <tc_init+0x102>
    3594:	0093      	lsls	r3, r2, #2
    3596:	4a2e      	ldr	r2, [pc, #184]	; (3650 <tc_init+0x2ec>)
    3598:	58d3      	ldr	r3, [r2, r3]
    359a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    359c:	4a29      	ldr	r2, [pc, #164]	; (3644 <tc_init+0x2e0>)
    359e:	6953      	ldr	r3, [r2, #20]
    35a0:	4319      	orrs	r1, r3
    35a2:	6151      	str	r1, [r2, #20]
    35a4:	e75f      	b.n	3466 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    35a6:	4a27      	ldr	r2, [pc, #156]	; (3644 <tc_init+0x2e0>)
    35a8:	6993      	ldr	r3, [r2, #24]
    35aa:	4319      	orrs	r1, r3
    35ac:	6191      	str	r1, [r2, #24]
    35ae:	e75a      	b.n	3466 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    35b0:	4a24      	ldr	r2, [pc, #144]	; (3644 <tc_init+0x2e0>)
    35b2:	69d3      	ldr	r3, [r2, #28]
    35b4:	4319      	orrs	r1, r3
    35b6:	61d1      	str	r1, [r2, #28]
    35b8:	e755      	b.n	3466 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    35ba:	4a22      	ldr	r2, [pc, #136]	; (3644 <tc_init+0x2e0>)
    35bc:	6a13      	ldr	r3, [r2, #32]
    35be:	4319      	orrs	r1, r3
    35c0:	6211      	str	r1, [r2, #32]
    35c2:	e750      	b.n	3466 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    35c4:	4b1f      	ldr	r3, [pc, #124]	; (3644 <tc_init+0x2e0>)
    35c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    35c8:	4311      	orrs	r1, r2
    35ca:	6259      	str	r1, [r3, #36]	; 0x24
    35cc:	e74b      	b.n	3466 <tc_init+0x102>
    35ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    35d0:	2b00      	cmp	r3, #0
    35d2:	d1fc      	bne.n	35ce <tc_init+0x26a>
					config->counter_8_bit.value;
    35d4:	3328      	adds	r3, #40	; 0x28
    35d6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    35d8:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    35da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    35dc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    35de:	2b00      	cmp	r3, #0
    35e0:	d1fc      	bne.n	35dc <tc_init+0x278>
					config->counter_8_bit.period;
    35e2:	3329      	adds	r3, #41	; 0x29
    35e4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    35e6:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    35e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    35ea:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    35ec:	2b00      	cmp	r3, #0
    35ee:	d1fc      	bne.n	35ea <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    35f0:	332a      	adds	r3, #42	; 0x2a
    35f2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    35f4:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    35f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    35f8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    35fa:	2b00      	cmp	r3, #0
    35fc:	d1fc      	bne.n	35f8 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    35fe:	332b      	adds	r3, #43	; 0x2b
    3600:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    3602:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    3604:	2000      	movs	r0, #0
    3606:	e6e4      	b.n	33d2 <tc_init+0x6e>
    3608:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    360a:	2b00      	cmp	r3, #0
    360c:	d1fc      	bne.n	3608 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    360e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3610:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3612:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3614:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3616:	2b00      	cmp	r3, #0
    3618:	d1fc      	bne.n	3614 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    361a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    361c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    361e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3620:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3622:	2b00      	cmp	r3, #0
    3624:	d1fc      	bne.n	3620 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    3626:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    3628:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    362a:	2000      	movs	r0, #0
    362c:	e6d1      	b.n	33d2 <tc_init+0x6e>
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	00003329 	.word	0x00003329
    3634:	0001c420 	.word	0x0001c420
    3638:	20001160 	.word	0x20001160
    363c:	0001c3f8 	.word	0x0001c3f8
    3640:	000031e1 	.word	0x000031e1
    3644:	40000400 	.word	0x40000400
    3648:	000030e5 	.word	0x000030e5
    364c:	00003075 	.word	0x00003075
    3650:	0001c40c 	.word	0x0001c40c

00003654 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3654:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3656:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3658:	2b00      	cmp	r3, #0
    365a:	d1fc      	bne.n	3656 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    365c:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    365e:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3660:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    3662:	2b00      	cmp	r3, #0
    3664:	d1fc      	bne.n	3660 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    3666:	3380      	adds	r3, #128	; 0x80
    3668:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    366a:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    366c:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    366e:	2b00      	cmp	r3, #0
    3670:	d1fc      	bne.n	366c <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3672:	7903      	ldrb	r3, [r0, #4]
    3674:	2b04      	cmp	r3, #4
    3676:	d005      	beq.n	3684 <tc_get_count_value+0x30>
    3678:	2b08      	cmp	r3, #8
    367a:	d009      	beq.n	3690 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    367c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    367e:	2b00      	cmp	r3, #0
    3680:	d003      	beq.n	368a <tc_get_count_value+0x36>
}
    3682:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3684:	7d10      	ldrb	r0, [r2, #20]
    3686:	b2c0      	uxtb	r0, r0
    3688:	e7fb      	b.n	3682 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    368a:	8a90      	ldrh	r0, [r2, #20]
    368c:	b280      	uxth	r0, r0
    368e:	e7f8      	b.n	3682 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    3690:	6950      	ldr	r0, [r2, #20]
    3692:	e7f6      	b.n	3682 <tc_get_count_value+0x2e>

00003694 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    3694:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3696:	6804      	ldr	r4, [r0, #0]
    3698:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    369a:	2b00      	cmp	r3, #0
    369c:	d1fc      	bne.n	3698 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    369e:	7903      	ldrb	r3, [r0, #4]
    36a0:	2b04      	cmp	r3, #4
    36a2:	d006      	beq.n	36b2 <tc_set_compare_value+0x1e>
    36a4:	2b08      	cmp	r3, #8
    36a6:	d028      	beq.n	36fa <tc_set_compare_value+0x66>
    36a8:	2b00      	cmp	r3, #0
    36aa:	d013      	beq.n	36d4 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    36ac:	2317      	movs	r3, #23
}
    36ae:	0018      	movs	r0, r3
    36b0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    36b2:	2317      	movs	r3, #23
			if (channel_index <
    36b4:	2901      	cmp	r1, #1
    36b6:	d8fa      	bhi.n	36ae <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    36b8:	7e83      	ldrb	r3, [r0, #26]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d005      	beq.n	36ca <tc_set_compare_value+0x36>
							(uint8_t)compare;
    36be:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    36c0:	1861      	adds	r1, r4, r1
    36c2:	3130      	adds	r1, #48	; 0x30
    36c4:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    36c6:	2300      	movs	r3, #0
    36c8:	e7f1      	b.n	36ae <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    36ca:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    36cc:	1864      	adds	r4, r4, r1
    36ce:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    36d0:	2300      	movs	r3, #0
    36d2:	e7ec      	b.n	36ae <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    36d4:	2317      	movs	r3, #23
			if (channel_index <
    36d6:	2901      	cmp	r1, #1
    36d8:	d8e9      	bhi.n	36ae <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    36da:	7e83      	ldrb	r3, [r0, #26]
    36dc:	2b00      	cmp	r3, #0
    36de:	d005      	beq.n	36ec <tc_set_compare_value+0x58>
							(uint16_t)compare;
    36e0:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    36e2:	3118      	adds	r1, #24
    36e4:	0049      	lsls	r1, r1, #1
    36e6:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    36e8:	2300      	movs	r3, #0
    36ea:	e7e0      	b.n	36ae <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    36ec:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    36ee:	310c      	adds	r1, #12
    36f0:	0049      	lsls	r1, r1, #1
    36f2:	1864      	adds	r4, r4, r1
    36f4:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    36f6:	2300      	movs	r3, #0
    36f8:	e7d9      	b.n	36ae <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    36fa:	2317      	movs	r3, #23
			if (channel_index <
    36fc:	2901      	cmp	r1, #1
    36fe:	d8d6      	bhi.n	36ae <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3700:	7e83      	ldrb	r3, [r0, #26]
    3702:	2b00      	cmp	r3, #0
    3704:	d105      	bne.n	3712 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    3706:	3106      	adds	r1, #6
    3708:	0089      	lsls	r1, r1, #2
    370a:	1864      	adds	r4, r4, r1
    370c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    370e:	2300      	movs	r3, #0
    3710:	e7cd      	b.n	36ae <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    3712:	310c      	adds	r1, #12
    3714:	0089      	lsls	r1, r1, #2
    3716:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    3718:	2300      	movs	r3, #0
    371a:	e7c8      	b.n	36ae <tc_set_compare_value+0x1a>

0000371c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    371c:	e7fe      	b.n	371c <Dummy_Handler>
	...

00003720 <Reset_Handler>:
{
    3720:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3722:	4a1a      	ldr	r2, [pc, #104]	; (378c <Reset_Handler+0x6c>)
    3724:	4b1a      	ldr	r3, [pc, #104]	; (3790 <Reset_Handler+0x70>)
    3726:	429a      	cmp	r2, r3
    3728:	d011      	beq.n	374e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    372a:	001a      	movs	r2, r3
    372c:	4b19      	ldr	r3, [pc, #100]	; (3794 <Reset_Handler+0x74>)
    372e:	429a      	cmp	r2, r3
    3730:	d20d      	bcs.n	374e <Reset_Handler+0x2e>
    3732:	4a19      	ldr	r2, [pc, #100]	; (3798 <Reset_Handler+0x78>)
    3734:	3303      	adds	r3, #3
    3736:	1a9b      	subs	r3, r3, r2
    3738:	089b      	lsrs	r3, r3, #2
    373a:	3301      	adds	r3, #1
    373c:	009b      	lsls	r3, r3, #2
    373e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3740:	4813      	ldr	r0, [pc, #76]	; (3790 <Reset_Handler+0x70>)
    3742:	4912      	ldr	r1, [pc, #72]	; (378c <Reset_Handler+0x6c>)
    3744:	588c      	ldr	r4, [r1, r2]
    3746:	5084      	str	r4, [r0, r2]
    3748:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    374a:	429a      	cmp	r2, r3
    374c:	d1fa      	bne.n	3744 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    374e:	4a13      	ldr	r2, [pc, #76]	; (379c <Reset_Handler+0x7c>)
    3750:	4b13      	ldr	r3, [pc, #76]	; (37a0 <Reset_Handler+0x80>)
    3752:	429a      	cmp	r2, r3
    3754:	d20a      	bcs.n	376c <Reset_Handler+0x4c>
    3756:	43d3      	mvns	r3, r2
    3758:	4911      	ldr	r1, [pc, #68]	; (37a0 <Reset_Handler+0x80>)
    375a:	185b      	adds	r3, r3, r1
    375c:	2103      	movs	r1, #3
    375e:	438b      	bics	r3, r1
    3760:	3304      	adds	r3, #4
    3762:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3764:	2100      	movs	r1, #0
    3766:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3768:	4293      	cmp	r3, r2
    376a:	d1fc      	bne.n	3766 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    376c:	4a0d      	ldr	r2, [pc, #52]	; (37a4 <Reset_Handler+0x84>)
    376e:	21ff      	movs	r1, #255	; 0xff
    3770:	4b0d      	ldr	r3, [pc, #52]	; (37a8 <Reset_Handler+0x88>)
    3772:	438b      	bics	r3, r1
    3774:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3776:	4a0d      	ldr	r2, [pc, #52]	; (37ac <Reset_Handler+0x8c>)
    3778:	6853      	ldr	r3, [r2, #4]
    377a:	397f      	subs	r1, #127	; 0x7f
    377c:	430b      	orrs	r3, r1
    377e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3780:	4b0b      	ldr	r3, [pc, #44]	; (37b0 <Reset_Handler+0x90>)
    3782:	4798      	blx	r3
        main();
    3784:	4b0b      	ldr	r3, [pc, #44]	; (37b4 <Reset_Handler+0x94>)
    3786:	4798      	blx	r3
    3788:	e7fe      	b.n	3788 <Reset_Handler+0x68>
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	0001e4d4 	.word	0x0001e4d4
    3790:	20000000 	.word	0x20000000
    3794:	20000a80 	.word	0x20000a80
    3798:	20000004 	.word	0x20000004
    379c:	20000a80 	.word	0x20000a80
    37a0:	20002068 	.word	0x20002068
    37a4:	e000ed00 	.word	0xe000ed00
    37a8:	00000000 	.word	0x00000000
    37ac:	41004000 	.word	0x41004000
    37b0:	00015835 	.word	0x00015835
    37b4:	0000c645 	.word	0x0000c645

000037b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    37b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ba:	46c6      	mov	lr, r8
    37bc:	b500      	push	{lr}
    37be:	000c      	movs	r4, r1
    37c0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    37c2:	2800      	cmp	r0, #0
    37c4:	d10f      	bne.n	37e6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    37c6:	2a00      	cmp	r2, #0
    37c8:	dd11      	ble.n	37ee <_read+0x36>
    37ca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    37cc:	4e09      	ldr	r6, [pc, #36]	; (37f4 <_read+0x3c>)
    37ce:	4d0a      	ldr	r5, [pc, #40]	; (37f8 <_read+0x40>)
    37d0:	6830      	ldr	r0, [r6, #0]
    37d2:	0021      	movs	r1, r4
    37d4:	682b      	ldr	r3, [r5, #0]
    37d6:	4798      	blx	r3
		ptr++;
    37d8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    37da:	42bc      	cmp	r4, r7
    37dc:	d1f8      	bne.n	37d0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    37de:	4640      	mov	r0, r8
    37e0:	bc04      	pop	{r2}
    37e2:	4690      	mov	r8, r2
    37e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    37e6:	2301      	movs	r3, #1
    37e8:	425b      	negs	r3, r3
    37ea:	4698      	mov	r8, r3
    37ec:	e7f7      	b.n	37de <_read+0x26>
	for (; len > 0; --len) {
    37ee:	4680      	mov	r8, r0
    37f0:	e7f5      	b.n	37de <_read+0x26>
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	2000117c 	.word	0x2000117c
    37f8:	20001174 	.word	0x20001174

000037fc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    37fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fe:	46c6      	mov	lr, r8
    3800:	b500      	push	{lr}
    3802:	000e      	movs	r6, r1
    3804:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3806:	3801      	subs	r0, #1
    3808:	2802      	cmp	r0, #2
    380a:	d810      	bhi.n	382e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    380c:	2a00      	cmp	r2, #0
    380e:	d011      	beq.n	3834 <_write+0x38>
    3810:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3812:	4b0c      	ldr	r3, [pc, #48]	; (3844 <_write+0x48>)
    3814:	4698      	mov	r8, r3
    3816:	4f0c      	ldr	r7, [pc, #48]	; (3848 <_write+0x4c>)
    3818:	4643      	mov	r3, r8
    381a:	6818      	ldr	r0, [r3, #0]
    381c:	5d31      	ldrb	r1, [r6, r4]
    381e:	683b      	ldr	r3, [r7, #0]
    3820:	4798      	blx	r3
    3822:	2800      	cmp	r0, #0
    3824:	db08      	blt.n	3838 <_write+0x3c>
			return -1;
		}
		++nChars;
    3826:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3828:	42a5      	cmp	r5, r4
    382a:	d1f5      	bne.n	3818 <_write+0x1c>
    382c:	e006      	b.n	383c <_write+0x40>
		return -1;
    382e:	2401      	movs	r4, #1
    3830:	4264      	negs	r4, r4
    3832:	e003      	b.n	383c <_write+0x40>
	for (; len != 0; --len) {
    3834:	0014      	movs	r4, r2
    3836:	e001      	b.n	383c <_write+0x40>
			return -1;
    3838:	2401      	movs	r4, #1
    383a:	4264      	negs	r4, r4
	}
	return nChars;
}
    383c:	0020      	movs	r0, r4
    383e:	bc04      	pop	{r2}
    3840:	4690      	mov	r8, r2
    3842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3844:	2000117c 	.word	0x2000117c
    3848:	20001178 	.word	0x20001178

0000384c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    384c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    384e:	4a06      	ldr	r2, [pc, #24]	; (3868 <_sbrk+0x1c>)
    3850:	6812      	ldr	r2, [r2, #0]
    3852:	2a00      	cmp	r2, #0
    3854:	d004      	beq.n	3860 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3856:	4a04      	ldr	r2, [pc, #16]	; (3868 <_sbrk+0x1c>)
    3858:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    385a:	18c3      	adds	r3, r0, r3
    385c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    385e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3860:	4902      	ldr	r1, [pc, #8]	; (386c <_sbrk+0x20>)
    3862:	4a01      	ldr	r2, [pc, #4]	; (3868 <_sbrk+0x1c>)
    3864:	6011      	str	r1, [r2, #0]
    3866:	e7f6      	b.n	3856 <_sbrk+0xa>
    3868:	20000ae0 	.word	0x20000ae0
    386c:	20004068 	.word	0x20004068

00003870 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3870:	2001      	movs	r0, #1
    3872:	4240      	negs	r0, r0
    3874:	4770      	bx	lr

00003876 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3876:	2380      	movs	r3, #128	; 0x80
    3878:	019b      	lsls	r3, r3, #6
    387a:	604b      	str	r3, [r1, #4]

	return 0;
}
    387c:	2000      	movs	r0, #0
    387e:	4770      	bx	lr

00003880 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3880:	2001      	movs	r0, #1
    3882:	4770      	bx	lr

00003884 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3884:	2000      	movs	r0, #0
    3886:	4770      	bx	lr

00003888 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3888:	b570      	push	{r4, r5, r6, lr}
    388a:	b082      	sub	sp, #8
    388c:	0005      	movs	r5, r0
    388e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3890:	2200      	movs	r2, #0
    3892:	466b      	mov	r3, sp
    3894:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3896:	4c06      	ldr	r4, [pc, #24]	; (38b0 <usart_serial_getchar+0x28>)
    3898:	466b      	mov	r3, sp
    389a:	1d99      	adds	r1, r3, #6
    389c:	0028      	movs	r0, r5
    389e:	47a0      	blx	r4
    38a0:	2800      	cmp	r0, #0
    38a2:	d1f9      	bne.n	3898 <usart_serial_getchar+0x10>

	*c = temp;
    38a4:	466b      	mov	r3, sp
    38a6:	3306      	adds	r3, #6
    38a8:	881b      	ldrh	r3, [r3, #0]
    38aa:	7033      	strb	r3, [r6, #0]
}
    38ac:	b002      	add	sp, #8
    38ae:	bd70      	pop	{r4, r5, r6, pc}
    38b0:	00002701 	.word	0x00002701

000038b4 <usart_serial_putchar>:
{
    38b4:	b570      	push	{r4, r5, r6, lr}
    38b6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    38b8:	b28c      	uxth	r4, r1
    38ba:	4e03      	ldr	r6, [pc, #12]	; (38c8 <usart_serial_putchar+0x14>)
    38bc:	0021      	movs	r1, r4
    38be:	0028      	movs	r0, r5
    38c0:	47b0      	blx	r6
    38c2:	2800      	cmp	r0, #0
    38c4:	d1fa      	bne.n	38bc <usart_serial_putchar+0x8>
}
    38c6:	bd70      	pop	{r4, r5, r6, pc}
    38c8:	000026d5 	.word	0x000026d5

000038cc <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    38cc:	b510      	push	{r4, lr}
    38ce:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    38d0:	466b      	mov	r3, sp
    38d2:	1ddc      	adds	r4, r3, #7
    38d4:	2201      	movs	r2, #1
    38d6:	0021      	movs	r1, r4
    38d8:	480f      	ldr	r0, [pc, #60]	; (3918 <USART_HOST_ISR_VECT+0x4c>)
    38da:	4b10      	ldr	r3, [pc, #64]	; (391c <USART_HOST_ISR_VECT+0x50>)
    38dc:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    38de:	b672      	cpsid	i
    38e0:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    38e4:	2200      	movs	r2, #0
    38e6:	4b0e      	ldr	r3, [pc, #56]	; (3920 <USART_HOST_ISR_VECT+0x54>)
    38e8:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    38ea:	4b0e      	ldr	r3, [pc, #56]	; (3924 <USART_HOST_ISR_VECT+0x58>)
    38ec:	781b      	ldrb	r3, [r3, #0]
    38ee:	7821      	ldrb	r1, [r4, #0]
    38f0:	4a0d      	ldr	r2, [pc, #52]	; (3928 <USART_HOST_ISR_VECT+0x5c>)
    38f2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    38f4:	2b7f      	cmp	r3, #127	; 0x7f
    38f6:	d00a      	beq.n	390e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    38f8:	3301      	adds	r3, #1
    38fa:	4a0a      	ldr	r2, [pc, #40]	; (3924 <USART_HOST_ISR_VECT+0x58>)
    38fc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    38fe:	2201      	movs	r2, #1
    3900:	4b07      	ldr	r3, [pc, #28]	; (3920 <USART_HOST_ISR_VECT+0x54>)
    3902:	701a      	strb	r2, [r3, #0]
    3904:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3908:	b662      	cpsie	i
}
    390a:	b002      	add	sp, #8
    390c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    390e:	2200      	movs	r2, #0
    3910:	4b04      	ldr	r3, [pc, #16]	; (3924 <USART_HOST_ISR_VECT+0x58>)
    3912:	701a      	strb	r2, [r3, #0]
    3914:	e7f3      	b.n	38fe <USART_HOST_ISR_VECT+0x32>
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	20000ae4 	.word	0x20000ae4
    391c:	00002771 	.word	0x00002771
    3920:	20000008 	.word	0x20000008
    3924:	20000b99 	.word	0x20000b99
    3928:	20000b18 	.word	0x20000b18

0000392c <sio2host_init>:
{
    392c:	b5f0      	push	{r4, r5, r6, r7, lr}
    392e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3930:	2380      	movs	r3, #128	; 0x80
    3932:	05db      	lsls	r3, r3, #23
    3934:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3936:	2300      	movs	r3, #0
    3938:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    393a:	22ff      	movs	r2, #255	; 0xff
    393c:	4669      	mov	r1, sp
    393e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3940:	2200      	movs	r2, #0
    3942:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3944:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3946:	2401      	movs	r4, #1
    3948:	2124      	movs	r1, #36	; 0x24
    394a:	4668      	mov	r0, sp
    394c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    394e:	3101      	adds	r1, #1
    3950:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3952:	3101      	adds	r1, #1
    3954:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3956:	3101      	adds	r1, #1
    3958:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    395a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    395c:	3105      	adds	r1, #5
    395e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3960:	3101      	adds	r1, #1
    3962:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3964:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3966:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3968:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    396a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    396c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    396e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3970:	2313      	movs	r3, #19
    3972:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3974:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3976:	2380      	movs	r3, #128	; 0x80
    3978:	035b      	lsls	r3, r3, #13
    397a:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    397c:	4b2f      	ldr	r3, [pc, #188]	; (3a3c <sio2host_init+0x110>)
    397e:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3980:	4b2f      	ldr	r3, [pc, #188]	; (3a40 <sio2host_init+0x114>)
    3982:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3984:	2301      	movs	r3, #1
    3986:	425b      	negs	r3, r3
    3988:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    398a:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    398c:	23e1      	movs	r3, #225	; 0xe1
    398e:	025b      	lsls	r3, r3, #9
    3990:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3992:	4d2c      	ldr	r5, [pc, #176]	; (3a44 <sio2host_init+0x118>)
    3994:	4b2c      	ldr	r3, [pc, #176]	; (3a48 <sio2host_init+0x11c>)
    3996:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3998:	4a2c      	ldr	r2, [pc, #176]	; (3a4c <sio2host_init+0x120>)
    399a:	4b2d      	ldr	r3, [pc, #180]	; (3a50 <sio2host_init+0x124>)
    399c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    399e:	4a2d      	ldr	r2, [pc, #180]	; (3a54 <sio2host_init+0x128>)
    39a0:	4b2d      	ldr	r3, [pc, #180]	; (3a58 <sio2host_init+0x12c>)
    39a2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    39a4:	466a      	mov	r2, sp
    39a6:	2184      	movs	r1, #132	; 0x84
    39a8:	05c9      	lsls	r1, r1, #23
    39aa:	0028      	movs	r0, r5
    39ac:	4b2b      	ldr	r3, [pc, #172]	; (3a5c <sio2host_init+0x130>)
    39ae:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    39b0:	4f2b      	ldr	r7, [pc, #172]	; (3a60 <sio2host_init+0x134>)
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	6898      	ldr	r0, [r3, #8]
    39b6:	2100      	movs	r1, #0
    39b8:	4e2a      	ldr	r6, [pc, #168]	; (3a64 <sio2host_init+0x138>)
    39ba:	47b0      	blx	r6
	setbuf(stdin, NULL);
    39bc:	683b      	ldr	r3, [r7, #0]
    39be:	6858      	ldr	r0, [r3, #4]
    39c0:	2100      	movs	r1, #0
    39c2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    39c4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    39c6:	0030      	movs	r0, r6
    39c8:	4b27      	ldr	r3, [pc, #156]	; (3a68 <sio2host_init+0x13c>)
    39ca:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    39cc:	231f      	movs	r3, #31
    39ce:	4018      	ands	r0, r3
    39d0:	4084      	lsls	r4, r0
    39d2:	4b26      	ldr	r3, [pc, #152]	; (3a6c <sio2host_init+0x140>)
    39d4:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    39d6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    39d8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    39da:	2b00      	cmp	r3, #0
    39dc:	d1fc      	bne.n	39d8 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    39de:	6833      	ldr	r3, [r6, #0]
    39e0:	2202      	movs	r2, #2
    39e2:	4313      	orrs	r3, r2
    39e4:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    39e6:	4b17      	ldr	r3, [pc, #92]	; (3a44 <sio2host_init+0x118>)
    39e8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    39ea:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    39ec:	2a00      	cmp	r2, #0
    39ee:	d1fc      	bne.n	39ea <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    39f0:	6859      	ldr	r1, [r3, #4]
    39f2:	2280      	movs	r2, #128	; 0x80
    39f4:	0252      	lsls	r2, r2, #9
    39f6:	430a      	orrs	r2, r1
    39f8:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    39fa:	2101      	movs	r1, #1
    39fc:	4a11      	ldr	r2, [pc, #68]	; (3a44 <sio2host_init+0x118>)
    39fe:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3a00:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3a02:	2a00      	cmp	r2, #0
    3a04:	d1fc      	bne.n	3a00 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    3a06:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3a08:	2a00      	cmp	r2, #0
    3a0a:	d1fc      	bne.n	3a06 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3a0c:	6859      	ldr	r1, [r3, #4]
    3a0e:	2280      	movs	r2, #128	; 0x80
    3a10:	0292      	lsls	r2, r2, #10
    3a12:	430a      	orrs	r2, r1
    3a14:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3a16:	2101      	movs	r1, #1
    3a18:	4a0a      	ldr	r2, [pc, #40]	; (3a44 <sio2host_init+0x118>)
    3a1a:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3a1c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3a1e:	2a00      	cmp	r2, #0
    3a20:	d1fc      	bne.n	3a1c <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    3a22:	4913      	ldr	r1, [pc, #76]	; (3a70 <sio2host_init+0x144>)
    3a24:	2000      	movs	r0, #0
    3a26:	4b13      	ldr	r3, [pc, #76]	; (3a74 <sio2host_init+0x148>)
    3a28:	4798      	blx	r3
    3a2a:	2204      	movs	r2, #4
    3a2c:	2384      	movs	r3, #132	; 0x84
    3a2e:	05db      	lsls	r3, r3, #23
    3a30:	759a      	strb	r2, [r3, #22]
    3a32:	32fc      	adds	r2, #252	; 0xfc
    3a34:	4b0d      	ldr	r3, [pc, #52]	; (3a6c <sio2host_init+0x140>)
    3a36:	601a      	str	r2, [r3, #0]
}
    3a38:	b011      	add	sp, #68	; 0x44
    3a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a3c:	00040003 	.word	0x00040003
    3a40:	00050003 	.word	0x00050003
    3a44:	20000ae4 	.word	0x20000ae4
    3a48:	2000117c 	.word	0x2000117c
    3a4c:	000038b5 	.word	0x000038b5
    3a50:	20001178 	.word	0x20001178
    3a54:	00003889 	.word	0x00003889
    3a58:	20001174 	.word	0x20001174
    3a5c:	00002371 	.word	0x00002371
    3a60:	200000d4 	.word	0x200000d4
    3a64:	00015b01 	.word	0x00015b01
    3a68:	00001f11 	.word	0x00001f11
    3a6c:	e000e100 	.word	0xe000e100
    3a70:	000038cd 	.word	0x000038cd
    3a74:	00001ed5 	.word	0x00001ed5

00003a78 <sio2host_deinit>:
{
    3a78:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3a7a:	4d15      	ldr	r5, [pc, #84]	; (3ad0 <sio2host_deinit+0x58>)
    3a7c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3a7e:	0020      	movs	r0, r4
    3a80:	4b14      	ldr	r3, [pc, #80]	; (3ad4 <sio2host_deinit+0x5c>)
    3a82:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3a84:	231f      	movs	r3, #31
    3a86:	4018      	ands	r0, r3
    3a88:	3b1e      	subs	r3, #30
    3a8a:	4083      	lsls	r3, r0
    3a8c:	2280      	movs	r2, #128	; 0x80
    3a8e:	4912      	ldr	r1, [pc, #72]	; (3ad8 <sio2host_deinit+0x60>)
    3a90:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3a92:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3a94:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3a96:	2b00      	cmp	r3, #0
    3a98:	d1fc      	bne.n	3a94 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3a9a:	6823      	ldr	r3, [r4, #0]
    3a9c:	2202      	movs	r2, #2
    3a9e:	4393      	bics	r3, r2
    3aa0:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3aa2:	4b0b      	ldr	r3, [pc, #44]	; (3ad0 <sio2host_deinit+0x58>)
    3aa4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3aa6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3aa8:	2a00      	cmp	r2, #0
    3aaa:	d1fc      	bne.n	3aa6 <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    3aac:	685a      	ldr	r2, [r3, #4]
    3aae:	490b      	ldr	r1, [pc, #44]	; (3adc <sio2host_deinit+0x64>)
    3ab0:	400a      	ands	r2, r1
    3ab2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    3ab4:	2100      	movs	r1, #0
    3ab6:	4a06      	ldr	r2, [pc, #24]	; (3ad0 <sio2host_deinit+0x58>)
    3ab8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3aba:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3abc:	2a00      	cmp	r2, #0
    3abe:	d1fc      	bne.n	3aba <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3ac0:	685a      	ldr	r2, [r3, #4]
    3ac2:	4907      	ldr	r1, [pc, #28]	; (3ae0 <sio2host_deinit+0x68>)
    3ac4:	400a      	ands	r2, r1
    3ac6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    3ac8:	2200      	movs	r2, #0
    3aca:	4b01      	ldr	r3, [pc, #4]	; (3ad0 <sio2host_deinit+0x58>)
    3acc:	719a      	strb	r2, [r3, #6]
}
    3ace:	bd70      	pop	{r4, r5, r6, pc}
    3ad0:	20000ae4 	.word	0x20000ae4
    3ad4:	00001f11 	.word	0x00001f11
    3ad8:	e000e100 	.word	0xe000e100
    3adc:	fffeffff 	.word	0xfffeffff
    3ae0:	fffdffff 	.word	0xfffdffff

00003ae4 <sio2host_rx>:
{
    3ae4:	b570      	push	{r4, r5, r6, lr}
    3ae6:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    3ae8:	4b1f      	ldr	r3, [pc, #124]	; (3b68 <sio2host_rx+0x84>)
    3aea:	781c      	ldrb	r4, [r3, #0]
    3aec:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <sio2host_rx+0x88>)
    3aee:	781b      	ldrb	r3, [r3, #0]
    3af0:	429c      	cmp	r4, r3
    3af2:	d319      	bcc.n	3b28 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    3af4:	1ae3      	subs	r3, r4, r3
    3af6:	481e      	ldr	r0, [pc, #120]	; (3b70 <sio2host_rx+0x8c>)
    3af8:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    3afa:	4b1d      	ldr	r3, [pc, #116]	; (3b70 <sio2host_rx+0x8c>)
    3afc:	7818      	ldrb	r0, [r3, #0]
    3afe:	2800      	cmp	r0, #0
    3b00:	d031      	beq.n	3b66 <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    3b02:	b243      	sxtb	r3, r0
    3b04:	2b00      	cmp	r3, #0
    3b06:	db15      	blt.n	3b34 <sio2host_rx+0x50>
    3b08:	1c03      	adds	r3, r0, #0
    3b0a:	4288      	cmp	r0, r1
    3b0c:	d900      	bls.n	3b10 <sio2host_rx+0x2c>
    3b0e:	1c0b      	adds	r3, r1, #0
    3b10:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    3b12:	2800      	cmp	r0, #0
    3b14:	d027      	beq.n	3b66 <sio2host_rx+0x82>
    3b16:	4b15      	ldr	r3, [pc, #84]	; (3b6c <sio2host_rx+0x88>)
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	1e44      	subs	r4, r0, #1
    3b1c:	b2e4      	uxtb	r4, r4
    3b1e:	3401      	adds	r4, #1
    3b20:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    3b22:	4d14      	ldr	r5, [pc, #80]	; (3b74 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    3b24:	2600      	movs	r6, #0
    3b26:	e014      	b.n	3b52 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    3b28:	0020      	movs	r0, r4
    3b2a:	3880      	subs	r0, #128	; 0x80
    3b2c:	1ac3      	subs	r3, r0, r3
    3b2e:	4810      	ldr	r0, [pc, #64]	; (3b70 <sio2host_rx+0x8c>)
    3b30:	7003      	strb	r3, [r0, #0]
    3b32:	e7e2      	b.n	3afa <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    3b34:	4b0d      	ldr	r3, [pc, #52]	; (3b6c <sio2host_rx+0x88>)
    3b36:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    3b38:	2080      	movs	r0, #128	; 0x80
    3b3a:	4b0d      	ldr	r3, [pc, #52]	; (3b70 <sio2host_rx+0x8c>)
    3b3c:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    3b3e:	b24b      	sxtb	r3, r1
    3b40:	2b00      	cmp	r3, #0
    3b42:	db01      	blt.n	3b48 <sio2host_rx+0x64>
    3b44:	0008      	movs	r0, r1
    3b46:	e7e4      	b.n	3b12 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    3b48:	2080      	movs	r0, #128	; 0x80
    3b4a:	e7e4      	b.n	3b16 <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    3b4c:	0033      	movs	r3, r6
	while (max_length > 0) {
    3b4e:	4294      	cmp	r4, r2
    3b50:	d007      	beq.n	3b62 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    3b52:	5ce9      	ldrb	r1, [r5, r3]
    3b54:	7011      	strb	r1, [r2, #0]
		data++;
    3b56:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    3b58:	2b7f      	cmp	r3, #127	; 0x7f
    3b5a:	d0f7      	beq.n	3b4c <sio2host_rx+0x68>
			serial_rx_buf_head++;
    3b5c:	3301      	adds	r3, #1
    3b5e:	b2db      	uxtb	r3, r3
    3b60:	e7f5      	b.n	3b4e <sio2host_rx+0x6a>
    3b62:	4a02      	ldr	r2, [pc, #8]	; (3b6c <sio2host_rx+0x88>)
    3b64:	7013      	strb	r3, [r2, #0]
}
    3b66:	bd70      	pop	{r4, r5, r6, pc}
    3b68:	20000b99 	.word	0x20000b99
    3b6c:	20000b98 	.word	0x20000b98
    3b70:	20000b9a 	.word	0x20000b9a
    3b74:	20000b18 	.word	0x20000b18

00003b78 <sio2host_getchar>:
{
    3b78:	b510      	push	{r4, lr}
    3b7a:	b082      	sub	sp, #8
	while (0 == sio2host_rx(&c, 1)) {
    3b7c:	4c05      	ldr	r4, [pc, #20]	; (3b94 <sio2host_getchar+0x1c>)
    3b7e:	2101      	movs	r1, #1
    3b80:	466b      	mov	r3, sp
    3b82:	1dd8      	adds	r0, r3, #7
    3b84:	47a0      	blx	r4
    3b86:	2800      	cmp	r0, #0
    3b88:	d0f9      	beq.n	3b7e <sio2host_getchar+0x6>
	return c;
    3b8a:	466b      	mov	r3, sp
    3b8c:	79d8      	ldrb	r0, [r3, #7]
}
    3b8e:	b002      	add	sp, #8
    3b90:	bd10      	pop	{r4, pc}
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	00003ae5 	.word	0x00003ae5

00003b98 <sio2host_getchar_nowait>:
{
    3b98:	b500      	push	{lr}
    3b9a:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    3b9c:	2101      	movs	r1, #1
    3b9e:	466b      	mov	r3, sp
    3ba0:	1dd8      	adds	r0, r3, #7
    3ba2:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <sio2host_getchar_nowait+0x20>)
    3ba4:	4798      	blx	r3
	if (back >= 1) {
    3ba6:	2800      	cmp	r0, #0
    3ba8:	dd03      	ble.n	3bb2 <sio2host_getchar_nowait+0x1a>
		return c;
    3baa:	466b      	mov	r3, sp
    3bac:	79d8      	ldrb	r0, [r3, #7]
}
    3bae:	b003      	add	sp, #12
    3bb0:	bd00      	pop	{pc}
		return (-1);
    3bb2:	2001      	movs	r0, #1
    3bb4:	4240      	negs	r0, r0
    3bb6:	e7fa      	b.n	3bae <sio2host_getchar_nowait+0x16>
    3bb8:	00003ae5 	.word	0x00003ae5

00003bbc <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3bbc:	4b13      	ldr	r3, [pc, #76]	; (3c0c <HAL_SPISend+0x50>)
    3bbe:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    3bc0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bc2:	7e1a      	ldrb	r2, [r3, #24]
    3bc4:	420a      	tst	r2, r1
    3bc6:	d0fc      	beq.n	3bc2 <HAL_SPISend+0x6>
    3bc8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3bca:	07d2      	lsls	r2, r2, #31
    3bcc:	d500      	bpl.n	3bd0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bce:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    3bd0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bd2:	7e1a      	ldrb	r2, [r3, #24]
    3bd4:	420a      	tst	r2, r1
    3bd6:	d0fc      	beq.n	3bd2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    3bd8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bda:	7e1a      	ldrb	r2, [r3, #24]
    3bdc:	420a      	tst	r2, r1
    3bde:	d0fc      	beq.n	3bda <HAL_SPISend+0x1e>
    3be0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    3be2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    3be4:	0752      	lsls	r2, r2, #29
    3be6:	d50a      	bpl.n	3bfe <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3be8:	8b5a      	ldrh	r2, [r3, #26]
    3bea:	0752      	lsls	r2, r2, #29
    3bec:	d501      	bpl.n	3bf2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3bee:	2204      	movs	r2, #4
    3bf0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bf2:	4a06      	ldr	r2, [pc, #24]	; (3c0c <HAL_SPISend+0x50>)
    3bf4:	7992      	ldrb	r2, [r2, #6]
    3bf6:	2a01      	cmp	r2, #1
    3bf8:	d003      	beq.n	3c02 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3bfc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    3bfe:	b2c0      	uxtb	r0, r0
}
    3c00:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c02:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3c04:	05c0      	lsls	r0, r0, #23
    3c06:	0dc0      	lsrs	r0, r0, #23
    3c08:	e7f9      	b.n	3bfe <HAL_SPISend+0x42>
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	20000ba8 	.word	0x20000ba8

00003c10 <HAL_ResetPinMakeOutput>:
{
    3c10:	b500      	push	{lr}
    3c12:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3c14:	a901      	add	r1, sp, #4
    3c16:	2301      	movs	r3, #1
    3c18:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    3c1a:	2200      	movs	r2, #0
    3c1c:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3c1e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3c20:	202f      	movs	r0, #47	; 0x2f
    3c22:	4b02      	ldr	r3, [pc, #8]	; (3c2c <HAL_ResetPinMakeOutput+0x1c>)
    3c24:	4798      	blx	r3
}
    3c26:	b003      	add	sp, #12
    3c28:	bd00      	pop	{pc}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	00000e7d 	.word	0x00000e7d

00003c30 <HAL_RadioDIO2Callback>:
{
    3c30:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    3c32:	4b05      	ldr	r3, [pc, #20]	; (3c48 <HAL_RadioDIO2Callback+0x18>)
    3c34:	681b      	ldr	r3, [r3, #0]
    3c36:	2b00      	cmp	r3, #0
    3c38:	d004      	beq.n	3c44 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    3c3a:	4b04      	ldr	r3, [pc, #16]	; (3c4c <HAL_RadioDIO2Callback+0x1c>)
    3c3c:	4798      	blx	r3
    interruptHandlerDio2();
    3c3e:	4b02      	ldr	r3, [pc, #8]	; (3c48 <HAL_RadioDIO2Callback+0x18>)
    3c40:	681b      	ldr	r3, [r3, #0]
    3c42:	4798      	blx	r3
}
    3c44:	bd10      	pop	{r4, pc}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	20000ba4 	.word	0x20000ba4
    3c4c:	0000417d 	.word	0x0000417d

00003c50 <HAL_RadioDIO1Callback>:
{
    3c50:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    3c52:	4b05      	ldr	r3, [pc, #20]	; (3c68 <HAL_RadioDIO1Callback+0x18>)
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d004      	beq.n	3c64 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    3c5a:	4b04      	ldr	r3, [pc, #16]	; (3c6c <HAL_RadioDIO1Callback+0x1c>)
    3c5c:	4798      	blx	r3
    interruptHandlerDio1();
    3c5e:	4b02      	ldr	r3, [pc, #8]	; (3c68 <HAL_RadioDIO1Callback+0x18>)
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	4798      	blx	r3
}
    3c64:	bd10      	pop	{r4, pc}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	20000ba0 	.word	0x20000ba0
    3c6c:	0000417d 	.word	0x0000417d

00003c70 <HAL_RadioDIO0Callback>:
{
    3c70:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    3c72:	4b05      	ldr	r3, [pc, #20]	; (3c88 <HAL_RadioDIO0Callback+0x18>)
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d004      	beq.n	3c84 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    3c7a:	4b04      	ldr	r3, [pc, #16]	; (3c8c <HAL_RadioDIO0Callback+0x1c>)
    3c7c:	4798      	blx	r3
    interruptHandlerDio0();
    3c7e:	4b02      	ldr	r3, [pc, #8]	; (3c88 <HAL_RadioDIO0Callback+0x18>)
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	4798      	blx	r3
}
    3c84:	bd10      	pop	{r4, pc}
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	20000b9c 	.word	0x20000b9c
    3c8c:	0000417d 	.word	0x0000417d

00003c90 <HAL_SPICSAssert>:
{
    3c90:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    3c92:	2201      	movs	r2, #1
    3c94:	4902      	ldr	r1, [pc, #8]	; (3ca0 <HAL_SPICSAssert+0x10>)
    3c96:	4803      	ldr	r0, [pc, #12]	; (3ca4 <HAL_SPICSAssert+0x14>)
    3c98:	4b03      	ldr	r3, [pc, #12]	; (3ca8 <HAL_SPICSAssert+0x18>)
    3c9a:	4798      	blx	r3
}
    3c9c:	bd10      	pop	{r4, pc}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	20001180 	.word	0x20001180
    3ca4:	20000ba8 	.word	0x20000ba8
    3ca8:	0000227d 	.word	0x0000227d

00003cac <HAL_SPICSDeassert>:
{
    3cac:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    3cae:	2200      	movs	r2, #0
    3cb0:	4902      	ldr	r1, [pc, #8]	; (3cbc <HAL_SPICSDeassert+0x10>)
    3cb2:	4803      	ldr	r0, [pc, #12]	; (3cc0 <HAL_SPICSDeassert+0x14>)
    3cb4:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <HAL_SPICSDeassert+0x18>)
    3cb6:	4798      	blx	r3
}
    3cb8:	bd10      	pop	{r4, pc}
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	20001180 	.word	0x20001180
    3cc0:	20000ba8 	.word	0x20000ba8
    3cc4:	0000227d 	.word	0x0000227d

00003cc8 <HAL_RadioInit>:
{
    3cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cca:	46d6      	mov	lr, sl
    3ccc:	464f      	mov	r7, r9
    3cce:	4646      	mov	r6, r8
    3cd0:	b5c0      	push	{r6, r7, lr}
    3cd2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    3cd4:	ac01      	add	r4, sp, #4
    3cd6:	2601      	movs	r6, #1
    3cd8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3cda:	2500      	movs	r5, #0
    3cdc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3cde:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    3ce0:	0021      	movs	r1, r4
    3ce2:	2052      	movs	r0, #82	; 0x52
    3ce4:	4f52      	ldr	r7, [pc, #328]	; (3e30 <HAL_RadioInit+0x168>)
    3ce6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    3ce8:	0021      	movs	r1, r4
    3cea:	203e      	movs	r0, #62	; 0x3e
    3cec:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    3cee:	0021      	movs	r1, r4
    3cf0:	203f      	movs	r0, #63	; 0x3f
    3cf2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    3cf4:	0021      	movs	r1, r4
    3cf6:	202f      	movs	r0, #47	; 0x2f
    3cf8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    3cfa:	2280      	movs	r2, #128	; 0x80
    3cfc:	02d2      	lsls	r2, r2, #11
    3cfe:	4b4d      	ldr	r3, [pc, #308]	; (3e34 <HAL_RadioInit+0x16c>)
    3d00:	619a      	str	r2, [r3, #24]
    3d02:	4b4d      	ldr	r3, [pc, #308]	; (3e38 <HAL_RadioInit+0x170>)
    3d04:	2280      	movs	r2, #128	; 0x80
    3d06:	05d2      	lsls	r2, r2, #23
    3d08:	619a      	str	r2, [r3, #24]
    3d0a:	2280      	movs	r2, #128	; 0x80
    3d0c:	0612      	lsls	r2, r2, #24
    3d0e:	619a      	str	r2, [r3, #24]
    3d10:	2280      	movs	r2, #128	; 0x80
    3d12:	0212      	lsls	r2, r2, #8
    3d14:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3d16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    3d18:	0021      	movs	r1, r4
    3d1a:	2053      	movs	r0, #83	; 0x53
    3d1c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    3d1e:	ac02      	add	r4, sp, #8
    3d20:	0020      	movs	r0, r4
    3d22:	4b46      	ldr	r3, [pc, #280]	; (3e3c <HAL_RadioInit+0x174>)
    3d24:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    3d26:	2330      	movs	r3, #48	; 0x30
    3d28:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    3d2a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3d2c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3d2e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    3d30:	0021      	movs	r1, r4
    3d32:	2000      	movs	r0, #0
    3d34:	4b42      	ldr	r3, [pc, #264]	; (3e40 <HAL_RadioInit+0x178>)
    3d36:	469a      	mov	sl, r3
    3d38:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d3a:	2200      	movs	r2, #0
    3d3c:	2100      	movs	r1, #0
    3d3e:	4841      	ldr	r0, [pc, #260]	; (3e44 <HAL_RadioInit+0x17c>)
    3d40:	4b41      	ldr	r3, [pc, #260]	; (3e48 <HAL_RadioInit+0x180>)
    3d42:	4699      	mov	r9, r3
    3d44:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d46:	2100      	movs	r1, #0
    3d48:	2000      	movs	r0, #0
    3d4a:	4b40      	ldr	r3, [pc, #256]	; (3e4c <HAL_RadioInit+0x184>)
    3d4c:	4698      	mov	r8, r3
    3d4e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    3d50:	230b      	movs	r3, #11
    3d52:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    3d54:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3d56:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3d58:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    3d5a:	0021      	movs	r1, r4
    3d5c:	200b      	movs	r0, #11
    3d5e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d60:	2200      	movs	r2, #0
    3d62:	210b      	movs	r1, #11
    3d64:	483a      	ldr	r0, [pc, #232]	; (3e50 <HAL_RadioInit+0x188>)
    3d66:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d68:	2100      	movs	r1, #0
    3d6a:	200b      	movs	r0, #11
    3d6c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    3d6e:	230c      	movs	r3, #12
    3d70:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    3d72:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3d74:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3d76:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    3d78:	0021      	movs	r1, r4
    3d7a:	200c      	movs	r0, #12
    3d7c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d7e:	2200      	movs	r2, #0
    3d80:	210c      	movs	r1, #12
    3d82:	4834      	ldr	r0, [pc, #208]	; (3e54 <HAL_RadioInit+0x18c>)
    3d84:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3d86:	2100      	movs	r1, #0
    3d88:	200c      	movs	r0, #12
    3d8a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    3d8c:	4b32      	ldr	r3, [pc, #200]	; (3e58 <HAL_RadioInit+0x190>)
    3d8e:	4698      	mov	r8, r3
    3d90:	233f      	movs	r3, #63	; 0x3f
    3d92:	4642      	mov	r2, r8
    3d94:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    3d96:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    3d98:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3d9a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3d9c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3d9e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3da0:	0021      	movs	r1, r4
    3da2:	203f      	movs	r0, #63	; 0x3f
    3da4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    3da6:	4643      	mov	r3, r8
    3da8:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    3daa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3dac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3dae:	2900      	cmp	r1, #0
    3db0:	d104      	bne.n	3dbc <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    3db2:	0953      	lsrs	r3, r2, #5
    3db4:	01db      	lsls	r3, r3, #7
    3db6:	4929      	ldr	r1, [pc, #164]	; (3e5c <HAL_RadioInit+0x194>)
    3db8:	468c      	mov	ip, r1
    3dba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3dbc:	211f      	movs	r1, #31
    3dbe:	4011      	ands	r1, r2
    3dc0:	2201      	movs	r2, #1
    3dc2:	0010      	movs	r0, r2
    3dc4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3dc6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3dc8:	ac02      	add	r4, sp, #8
    3dca:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3dcc:	2300      	movs	r3, #0
    3dce:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3dd0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3dd2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3dd4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3dd6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3dd8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3dda:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3ddc:	3223      	adds	r2, #35	; 0x23
    3dde:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3de0:	3a18      	subs	r2, #24
    3de2:	2100      	movs	r1, #0
    3de4:	a808      	add	r0, sp, #32
    3de6:	4b1e      	ldr	r3, [pc, #120]	; (3e60 <HAL_RadioInit+0x198>)
    3de8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    3dea:	4b1e      	ldr	r3, [pc, #120]	; (3e64 <HAL_RadioInit+0x19c>)
    3dec:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    3dee:	2380      	movs	r3, #128	; 0x80
    3df0:	025b      	lsls	r3, r3, #9
    3df2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    3df4:	4b1c      	ldr	r3, [pc, #112]	; (3e68 <HAL_RadioInit+0x1a0>)
    3df6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    3df8:	2301      	movs	r3, #1
    3dfa:	425b      	negs	r3, r3
    3dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    3dfe:	4b1b      	ldr	r3, [pc, #108]	; (3e6c <HAL_RadioInit+0x1a4>)
    3e00:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    3e02:	4b1b      	ldr	r3, [pc, #108]	; (3e70 <HAL_RadioInit+0x1a8>)
    3e04:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    3e06:	4d1b      	ldr	r5, [pc, #108]	; (3e74 <HAL_RadioInit+0x1ac>)
    3e08:	0022      	movs	r2, r4
    3e0a:	491b      	ldr	r1, [pc, #108]	; (3e78 <HAL_RadioInit+0x1b0>)
    3e0c:	0028      	movs	r0, r5
    3e0e:	4b1b      	ldr	r3, [pc, #108]	; (3e7c <HAL_RadioInit+0x1b4>)
    3e10:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e12:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3e14:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3e16:	2b00      	cmp	r3, #0
    3e18:	d1fc      	bne.n	3e14 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e1a:	6813      	ldr	r3, [r2, #0]
    3e1c:	2102      	movs	r1, #2
    3e1e:	430b      	orrs	r3, r1
    3e20:	6013      	str	r3, [r2, #0]
}
    3e22:	b010      	add	sp, #64	; 0x40
    3e24:	bc1c      	pop	{r2, r3, r4}
    3e26:	4690      	mov	r8, r2
    3e28:	4699      	mov	r9, r3
    3e2a:	46a2      	mov	sl, r4
    3e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	00000e7d 	.word	0x00000e7d
    3e34:	40002900 	.word	0x40002900
    3e38:	40002880 	.word	0x40002880
    3e3c:	00000a61 	.word	0x00000a61
    3e40:	00000a75 	.word	0x00000a75
    3e44:	00003c71 	.word	0x00003c71
    3e48:	00000921 	.word	0x00000921
    3e4c:	0000094d 	.word	0x0000094d
    3e50:	00003c51 	.word	0x00003c51
    3e54:	00003c31 	.word	0x00003c31
    3e58:	20001180 	.word	0x20001180
    3e5c:	40002800 	.word	0x40002800
    3e60:	0001594d 	.word	0x0001594d
    3e64:	001e8480 	.word	0x001e8480
    3e68:	00530005 	.word	0x00530005
    3e6c:	003e0005 	.word	0x003e0005
    3e70:	00520005 	.word	0x00520005
    3e74:	20000ba8 	.word	0x20000ba8
    3e78:	42001000 	.word	0x42001000
    3e7c:	00001fa1 	.word	0x00001fa1

00003e80 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e80:	4b07      	ldr	r3, [pc, #28]	; (3ea0 <HAL_Radio_resources_init+0x20>)
    3e82:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3e84:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3e86:	2b00      	cmp	r3, #0
    3e88:	d1fc      	bne.n	3e84 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e8a:	6813      	ldr	r3, [r2, #0]
    3e8c:	2102      	movs	r1, #2
    3e8e:	430b      	orrs	r3, r1
    3e90:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e92:	4b03      	ldr	r3, [pc, #12]	; (3ea0 <HAL_Radio_resources_init+0x20>)
    3e94:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3e96:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d1fc      	bne.n	3e96 <HAL_Radio_resources_init+0x16>
}
    3e9c:	4770      	bx	lr
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	20000ba8 	.word	0x20000ba8

00003ea4 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <HAL_RadioDeInit+0x1c>)
    3ea6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3ea8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d1fc      	bne.n	3ea8 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3eae:	338f      	adds	r3, #143	; 0x8f
    3eb0:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3eb2:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3eb4:	6813      	ldr	r3, [r2, #0]
    3eb6:	2102      	movs	r1, #2
    3eb8:	438b      	bics	r3, r1
    3eba:	6013      	str	r3, [r2, #0]
}
    3ebc:	4770      	bx	lr
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	20000ba8 	.word	0x20000ba8

00003ec4 <RADIO_Reset>:
{
    3ec4:	b570      	push	{r4, r5, r6, lr}
    3ec6:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    3ec8:	4c0a      	ldr	r4, [pc, #40]	; (3ef4 <RADIO_Reset+0x30>)
    3eca:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    3ecc:	4d0a      	ldr	r5, [pc, #40]	; (3ef8 <RADIO_Reset+0x34>)
    3ece:	2680      	movs	r6, #128	; 0x80
    3ed0:	0236      	lsls	r6, r6, #8
    3ed2:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    3ed4:	2001      	movs	r0, #1
    3ed6:	4b09      	ldr	r3, [pc, #36]	; (3efc <RADIO_Reset+0x38>)
    3ed8:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    3eda:	a901      	add	r1, sp, #4
    3edc:	2300      	movs	r3, #0
    3ede:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3ee0:	2201      	movs	r2, #1
    3ee2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3ee4:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3ee6:	202f      	movs	r0, #47	; 0x2f
    3ee8:	4b05      	ldr	r3, [pc, #20]	; (3f00 <RADIO_Reset+0x3c>)
    3eea:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3eec:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    3eee:	47a0      	blx	r4
}
    3ef0:	b002      	add	sp, #8
    3ef2:	bd70      	pop	{r4, r5, r6, pc}
    3ef4:	00003c11 	.word	0x00003c11
    3ef8:	40002880 	.word	0x40002880
    3efc:	00004149 	.word	0x00004149
    3f00:	00000e7d 	.word	0x00000e7d

00003f04 <RADIO_RegisterWrite>:
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	0004      	movs	r4, r0
    3f08:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    3f0a:	4b05      	ldr	r3, [pc, #20]	; (3f20 <RADIO_RegisterWrite+0x1c>)
    3f0c:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    3f0e:	2080      	movs	r0, #128	; 0x80
    3f10:	4320      	orrs	r0, r4
    3f12:	4c04      	ldr	r4, [pc, #16]	; (3f24 <RADIO_RegisterWrite+0x20>)
    3f14:	47a0      	blx	r4
	HAL_SPISend(value);
    3f16:	0028      	movs	r0, r5
    3f18:	47a0      	blx	r4
	HAL_SPICSDeassert();
    3f1a:	4b03      	ldr	r3, [pc, #12]	; (3f28 <RADIO_RegisterWrite+0x24>)
    3f1c:	4798      	blx	r3
}
    3f1e:	bd70      	pop	{r4, r5, r6, pc}
    3f20:	00003c91 	.word	0x00003c91
    3f24:	00003bbd 	.word	0x00003bbd
    3f28:	00003cad 	.word	0x00003cad

00003f2c <RADIO_RegisterRead>:
{
    3f2c:	b510      	push	{r4, lr}
    3f2e:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    3f30:	4b06      	ldr	r3, [pc, #24]	; (3f4c <RADIO_RegisterRead+0x20>)
    3f32:	4798      	blx	r3
	HAL_SPISend(reg);
    3f34:	207f      	movs	r0, #127	; 0x7f
    3f36:	4020      	ands	r0, r4
    3f38:	4c05      	ldr	r4, [pc, #20]	; (3f50 <RADIO_RegisterRead+0x24>)
    3f3a:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    3f3c:	20ff      	movs	r0, #255	; 0xff
    3f3e:	47a0      	blx	r4
    3f40:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    3f42:	4b04      	ldr	r3, [pc, #16]	; (3f54 <RADIO_RegisterRead+0x28>)
    3f44:	4798      	blx	r3
}
    3f46:	0020      	movs	r0, r4
    3f48:	bd10      	pop	{r4, pc}
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00003c91 	.word	0x00003c91
    3f50:	00003bbd 	.word	0x00003bbd
    3f54:	00003cad 	.word	0x00003cad

00003f58 <RADIO_FrameWrite>:
{
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	0004      	movs	r4, r0
    3f5c:	000e      	movs	r6, r1
    3f5e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    3f60:	4b0a      	ldr	r3, [pc, #40]	; (3f8c <RADIO_FrameWrite+0x34>)
    3f62:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    3f64:	2080      	movs	r0, #128	; 0x80
    3f66:	4320      	orrs	r0, r4
    3f68:	4b09      	ldr	r3, [pc, #36]	; (3f90 <RADIO_FrameWrite+0x38>)
    3f6a:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    3f6c:	2d00      	cmp	r5, #0
    3f6e:	d00a      	beq.n	3f86 <RADIO_FrameWrite+0x2e>
    3f70:	0034      	movs	r4, r6
    3f72:	3d01      	subs	r5, #1
    3f74:	b2ed      	uxtb	r5, r5
    3f76:	3501      	adds	r5, #1
    3f78:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    3f7a:	4e05      	ldr	r6, [pc, #20]	; (3f90 <RADIO_FrameWrite+0x38>)
    3f7c:	7820      	ldrb	r0, [r4, #0]
    3f7e:	47b0      	blx	r6
    3f80:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    3f82:	42ac      	cmp	r4, r5
    3f84:	d1fa      	bne.n	3f7c <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    3f86:	4b03      	ldr	r3, [pc, #12]	; (3f94 <RADIO_FrameWrite+0x3c>)
    3f88:	4798      	blx	r3
}
    3f8a:	bd70      	pop	{r4, r5, r6, pc}
    3f8c:	00003c91 	.word	0x00003c91
    3f90:	00003bbd 	.word	0x00003bbd
    3f94:	00003cad 	.word	0x00003cad

00003f98 <RADIO_FrameRead>:
{
    3f98:	b570      	push	{r4, r5, r6, lr}
    3f9a:	0004      	movs	r4, r0
    3f9c:	000e      	movs	r6, r1
    3f9e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    3fa0:	4b0a      	ldr	r3, [pc, #40]	; (3fcc <RADIO_FrameRead+0x34>)
    3fa2:	4798      	blx	r3
    HAL_SPISend(offset);
    3fa4:	0020      	movs	r0, r4
    3fa6:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <RADIO_FrameRead+0x38>)
    3fa8:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    3faa:	2d00      	cmp	r5, #0
    3fac:	d00b      	beq.n	3fc6 <RADIO_FrameRead+0x2e>
    3fae:	0034      	movs	r4, r6
    3fb0:	3d01      	subs	r5, #1
    3fb2:	b2ed      	uxtb	r5, r5
    3fb4:	3501      	adds	r5, #1
    3fb6:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    3fb8:	4e05      	ldr	r6, [pc, #20]	; (3fd0 <RADIO_FrameRead+0x38>)
    3fba:	20ff      	movs	r0, #255	; 0xff
    3fbc:	47b0      	blx	r6
    3fbe:	7020      	strb	r0, [r4, #0]
    3fc0:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    3fc2:	42ac      	cmp	r4, r5
    3fc4:	d1f9      	bne.n	3fba <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    3fc6:	4b03      	ldr	r3, [pc, #12]	; (3fd4 <RADIO_FrameRead+0x3c>)
    3fc8:	4798      	blx	r3
}
    3fca:	bd70      	pop	{r4, r5, r6, pc}
    3fcc:	00003c91 	.word	0x00003c91
    3fd0:	00003bbd 	.word	0x00003bbd
    3fd4:	00003cad 	.word	0x00003cad

00003fd8 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    3fd8:	2802      	cmp	r0, #2
    3fda:	d007      	beq.n	3fec <HAL_RegisterDioInterruptHandler+0x14>
    3fdc:	2804      	cmp	r0, #4
    3fde:	d008      	beq.n	3ff2 <HAL_RegisterDioInterruptHandler+0x1a>
    3fe0:	2801      	cmp	r0, #1
    3fe2:	d000      	beq.n	3fe6 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    3fe4:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    3fe6:	4b04      	ldr	r3, [pc, #16]	; (3ff8 <HAL_RegisterDioInterruptHandler+0x20>)
    3fe8:	6019      	str	r1, [r3, #0]
      break;
    3fea:	e7fb      	b.n	3fe4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    3fec:	4b03      	ldr	r3, [pc, #12]	; (3ffc <HAL_RegisterDioInterruptHandler+0x24>)
    3fee:	6019      	str	r1, [r3, #0]
      break;
    3ff0:	e7f8      	b.n	3fe4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    3ff2:	4b03      	ldr	r3, [pc, #12]	; (4000 <HAL_RegisterDioInterruptHandler+0x28>)
    3ff4:	6019      	str	r1, [r3, #0]
}
    3ff6:	e7f5      	b.n	3fe4 <HAL_RegisterDioInterruptHandler+0xc>
    3ff8:	20000b9c 	.word	0x20000b9c
    3ffc:	20000ba0 	.word	0x20000ba0
    4000:	20000ba4 	.word	0x20000ba4

00004004 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    4004:	2801      	cmp	r0, #1
    4006:	d000      	beq.n	400a <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    4008:	4770      	bx	lr
    400a:	2280      	movs	r2, #128	; 0x80
    400c:	0192      	lsls	r2, r2, #6
    400e:	4b01      	ldr	r3, [pc, #4]	; (4014 <HAL_EnableRFCtrl+0x10>)
    4010:	619a      	str	r2, [r3, #24]
    4012:	e7f9      	b.n	4008 <HAL_EnableRFCtrl+0x4>
    4014:	40002800 	.word	0x40002800

00004018 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    4018:	2801      	cmp	r0, #1
    401a:	d000      	beq.n	401e <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    401c:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    401e:	2280      	movs	r2, #128	; 0x80
    4020:	0192      	lsls	r2, r2, #6
    4022:	4b01      	ldr	r3, [pc, #4]	; (4028 <HAL_DisableRFCtrl+0x10>)
    4024:	615a      	str	r2, [r3, #20]
    4026:	e7f9      	b.n	401c <HAL_DisableRFCtrl+0x4>
    4028:	40002800 	.word	0x40002800

0000402c <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    402c:	2002      	movs	r0, #2
    402e:	4770      	bx	lr

00004030 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    4030:	2000      	movs	r0, #0
    4032:	4770      	bx	lr

00004034 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    4034:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    4036:	2280      	movs	r2, #128	; 0x80
    4038:	0092      	lsls	r2, r2, #2
    403a:	4b03      	ldr	r3, [pc, #12]	; (4048 <HAL_TCXOPowerOn+0x14>)
    403c:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    403e:	2002      	movs	r0, #2
    4040:	4b02      	ldr	r3, [pc, #8]	; (404c <HAL_TCXOPowerOn+0x18>)
    4042:	4798      	blx	r3
#endif
}
    4044:	bd10      	pop	{r4, pc}
    4046:	46c0      	nop			; (mov r8, r8)
    4048:	40002800 	.word	0x40002800
    404c:	00000181 	.word	0x00000181

00004050 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    4050:	2280      	movs	r2, #128	; 0x80
    4052:	0092      	lsls	r2, r2, #2
    4054:	4b01      	ldr	r3, [pc, #4]	; (405c <HAL_TCXOPowerOff+0xc>)
    4056:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    4058:	4770      	bx	lr
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	40002800 	.word	0x40002800

00004060 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    4060:	2801      	cmp	r0, #1
    4062:	d002      	beq.n	406a <HAL_Sleep+0xa>
    4064:	2802      	cmp	r0, #2
    4066:	d00c      	beq.n	4082 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    4068:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    406a:	2204      	movs	r2, #4
    406c:	2380      	movs	r3, #128	; 0x80
    406e:	05db      	lsls	r3, r3, #23
    4070:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    4072:	001a      	movs	r2, r3
    4074:	7853      	ldrb	r3, [r2, #1]
    4076:	2b04      	cmp	r3, #4
    4078:	d1fc      	bne.n	4074 <HAL_Sleep+0x14>
  __ASM volatile ("dsb");
    407a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    407e:	bf30      	wfi
    4080:	e7f2      	b.n	4068 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    4082:	2205      	movs	r2, #5
    4084:	2380      	movs	r3, #128	; 0x80
    4086:	05db      	lsls	r3, r3, #23
    4088:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    408a:	001a      	movs	r2, r3
    408c:	7853      	ldrb	r3, [r2, #1]
    408e:	2b05      	cmp	r3, #5
    4090:	d1fc      	bne.n	408c <HAL_Sleep+0x2c>
  __ASM volatile ("dsb");
    4092:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4096:	bf30      	wfi
    4098:	e7e6      	b.n	4068 <HAL_Sleep+0x8>
	...

0000409c <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    409c:	b510      	push	{r4, lr}
    409e:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    40a0:	2201      	movs	r2, #1
    40a2:	466b      	mov	r3, sp
    40a4:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    40a6:	2300      	movs	r3, #0
    40a8:	4669      	mov	r1, sp
    40aa:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    40ac:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    40ae:	466a      	mov	r2, sp
    40b0:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    40b2:	3b01      	subs	r3, #1
    40b4:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    40b6:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    40b8:	4c04      	ldr	r4, [pc, #16]	; (40cc <SleepTimerInit+0x30>)
    40ba:	4905      	ldr	r1, [pc, #20]	; (40d0 <SleepTimerInit+0x34>)
    40bc:	0020      	movs	r0, r4
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <SleepTimerInit+0x38>)
    40c0:	4798      	blx	r3
	rtc_count_enable(&rtc);
    40c2:	0020      	movs	r0, r4
    40c4:	4b04      	ldr	r3, [pc, #16]	; (40d8 <SleepTimerInit+0x3c>)
    40c6:	4798      	blx	r3
}
    40c8:	b004      	add	sp, #16
    40ca:	bd10      	pop	{r4, pc}
    40cc:	20001184 	.word	0x20001184
    40d0:	40002000 	.word	0x40002000
    40d4:	0000102d 	.word	0x0000102d
    40d8:	00000ead 	.word	0x00000ead

000040dc <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    40dc:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    40de:	4802      	ldr	r0, [pc, #8]	; (40e8 <SleepTimerGetElapsedTime+0xc>)
    40e0:	4b02      	ldr	r3, [pc, #8]	; (40ec <SleepTimerGetElapsedTime+0x10>)
    40e2:	4798      	blx	r3
}
    40e4:	bd10      	pop	{r4, pc}
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	20001184 	.word	0x20001184
    40ec:	00000f9d 	.word	0x00000f9d

000040f0 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	0005      	movs	r5, r0
    40f4:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    40f6:	4c0a      	ldr	r4, [pc, #40]	; (4120 <SleepTimerStart+0x30>)
    40f8:	2100      	movs	r1, #0
    40fa:	0020      	movs	r0, r4
    40fc:	4b09      	ldr	r3, [pc, #36]	; (4124 <SleepTimerStart+0x34>)
    40fe:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    4100:	2208      	movs	r2, #8
    4102:	0031      	movs	r1, r6
    4104:	0020      	movs	r0, r4
    4106:	4b08      	ldr	r3, [pc, #32]	; (4128 <SleepTimerStart+0x38>)
    4108:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    410a:	2200      	movs	r2, #0
    410c:	0029      	movs	r1, r5
    410e:	0020      	movs	r0, r4
    4110:	4b06      	ldr	r3, [pc, #24]	; (412c <SleepTimerStart+0x3c>)
    4112:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    4114:	2108      	movs	r1, #8
    4116:	0020      	movs	r0, r4
    4118:	4b05      	ldr	r3, [pc, #20]	; (4130 <SleepTimerStart+0x40>)
    411a:	4798      	blx	r3
}
    411c:	bd70      	pop	{r4, r5, r6, pc}
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	20001184 	.word	0x20001184
    4124:	00000f59 	.word	0x00000f59
    4128:	000010c9 	.word	0x000010c9
    412c:	00000fc9 	.word	0x00000fc9
    4130:	00001105 	.word	0x00001105

00004134 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    4134:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    4136:	2108      	movs	r1, #8
    4138:	4801      	ldr	r0, [pc, #4]	; (4140 <SleepTimerStop+0xc>)
    413a:	4b02      	ldr	r3, [pc, #8]	; (4144 <SleepTimerStop+0x10>)
    413c:	4798      	blx	r3
}
    413e:	bd10      	pop	{r4, pc}
    4140:	20001184 	.word	0x20001184
    4144:	00001149 	.word	0x00001149

00004148 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    4148:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    414a:	2800      	cmp	r0, #0
    414c:	d103      	bne.n	4156 <SystemBlockingWaitMs+0xe>
    414e:	2001      	movs	r0, #1
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <SystemBlockingWaitMs+0x14>)
    4152:	4798      	blx	r3
#endif
}
    4154:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    4156:	4b02      	ldr	r3, [pc, #8]	; (4160 <SystemBlockingWaitMs+0x18>)
    4158:	4798      	blx	r3
    415a:	e7fb      	b.n	4154 <SystemBlockingWaitMs+0xc>
    415c:	00000155 	.word	0x00000155
    4160:	00000181 	.word	0x00000181

00004164 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    4164:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    4166:	4b01      	ldr	r3, [pc, #4]	; (416c <system_enter_critical_section+0x8>)
    4168:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    416a:	bd10      	pop	{r4, pc}
    416c:	000001ad 	.word	0x000001ad

00004170 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    4170:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    4172:	4b01      	ldr	r3, [pc, #4]	; (4178 <system_leave_critical_section+0x8>)
    4174:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    4176:	bd10      	pop	{r4, pc}
    4178:	000001ed 	.word	0x000001ed

0000417c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    417c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    417e:	4b16      	ldr	r3, [pc, #88]	; (41d8 <PMM_Wakeup+0x5c>)
    4180:	781b      	ldrb	r3, [r3, #0]
    4182:	2b01      	cmp	r3, #1
    4184:	d000      	beq.n	4188 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    4186:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    4188:	2200      	movs	r2, #0
    418a:	4b13      	ldr	r3, [pc, #76]	; (41d8 <PMM_Wakeup+0x5c>)
    418c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    418e:	4b13      	ldr	r3, [pc, #76]	; (41dc <PMM_Wakeup+0x60>)
    4190:	4798      	blx	r3
    4192:	4b13      	ldr	r3, [pc, #76]	; (41e0 <PMM_Wakeup+0x64>)
    4194:	4798      	blx	r3
    4196:	4913      	ldr	r1, [pc, #76]	; (41e4 <PMM_Wakeup+0x68>)
    4198:	4b13      	ldr	r3, [pc, #76]	; (41e8 <PMM_Wakeup+0x6c>)
    419a:	4798      	blx	r3
    419c:	4b13      	ldr	r3, [pc, #76]	; (41ec <PMM_Wakeup+0x70>)
    419e:	4798      	blx	r3
    41a0:	0004      	movs	r4, r0
    41a2:	000d      	movs	r5, r1
        SleepTimerStop();
    41a4:	4b12      	ldr	r3, [pc, #72]	; (41f0 <PMM_Wakeup+0x74>)
    41a6:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    41a8:	0020      	movs	r0, r4
    41aa:	0029      	movs	r1, r5
    41ac:	4b11      	ldr	r3, [pc, #68]	; (41f4 <PMM_Wakeup+0x78>)
    41ae:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    41b0:	4b11      	ldr	r3, [pc, #68]	; (41f8 <PMM_Wakeup+0x7c>)
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d0e6      	beq.n	4186 <PMM_Wakeup+0xa>
    41b8:	689e      	ldr	r6, [r3, #8]
    41ba:	2e00      	cmp	r6, #0
    41bc:	d0e3      	beq.n	4186 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    41be:	22fa      	movs	r2, #250	; 0xfa
    41c0:	0092      	lsls	r2, r2, #2
    41c2:	2300      	movs	r3, #0
    41c4:	0020      	movs	r0, r4
    41c6:	0029      	movs	r1, r5
    41c8:	4c0c      	ldr	r4, [pc, #48]	; (41fc <PMM_Wakeup+0x80>)
    41ca:	47a0      	blx	r4
    41cc:	47b0      	blx	r6
            sleepReq = NULL;
    41ce:	2200      	movs	r2, #0
    41d0:	4b09      	ldr	r3, [pc, #36]	; (41f8 <PMM_Wakeup+0x7c>)
    41d2:	601a      	str	r2, [r3, #0]
}
    41d4:	e7d7      	b.n	4186 <PMM_Wakeup+0xa>
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	20000bb4 	.word	0x20000bb4
    41dc:	000040dd 	.word	0x000040dd
    41e0:	00013a4d 	.word	0x00013a4d
    41e4:	41f423d7 	.word	0x41f423d7
    41e8:	000133f5 	.word	0x000133f5
    41ec:	00012b31 	.word	0x00012b31
    41f0:	00004135 	.word	0x00004135
    41f4:	0000a3cd 	.word	0x0000a3cd
    41f8:	20000bb8 	.word	0x20000bb8
    41fc:	00012a6d 	.word	0x00012a6d

00004200 <PMM_Sleep>:
{
    4200:	b570      	push	{r4, r5, r6, lr}
    4202:	1e04      	subs	r4, r0, #0
    if (NULL != req)
    4204:	d03b      	beq.n	427e <PMM_Sleep+0x7e>
        if (SYSTEM_ReadyToSleep())
    4206:	4b1f      	ldr	r3, [pc, #124]	; (4284 <PMM_Sleep+0x84>)
    4208:	4798      	blx	r3
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    420a:	2300      	movs	r3, #0
        if (SYSTEM_ReadyToSleep())
    420c:	2800      	cmp	r0, #0
    420e:	d008      	beq.n	4222 <PMM_Sleep+0x22>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    4210:	6823      	ldr	r3, [r4, #0]
    4212:	491d      	ldr	r1, [pc, #116]	; (4288 <PMM_Sleep+0x88>)
    4214:	468c      	mov	ip, r1
    4216:	4463      	add	r3, ip
    4218:	001a      	movs	r2, r3
            if (validateSleepDuration(req->sleepTimeMs))
    421a:	491c      	ldr	r1, [pc, #112]	; (428c <PMM_Sleep+0x8c>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    421c:	2300      	movs	r3, #0
            if (validateSleepDuration(req->sleepTimeMs))
    421e:	428a      	cmp	r2, r1
    4220:	d901      	bls.n	4226 <PMM_Sleep+0x26>
}
    4222:	0018      	movs	r0, r3
    4224:	bd70      	pop	{r4, r5, r6, pc}
                    sysSleepTime = SwTimerNextExpiryDuration();
    4226:	4b1a      	ldr	r3, [pc, #104]	; (4290 <PMM_Sleep+0x90>)
    4228:	4798      	blx	r3
                    if (SWTIMER_INVALID_TIMEOUT == sysSleepTime)
    422a:	1c43      	adds	r3, r0, #1
    422c:	d025      	beq.n	427a <PMM_Sleep+0x7a>
                        sysSleepTime = US_TO_MS(sysSleepTime);
    422e:	21fa      	movs	r1, #250	; 0xfa
    4230:	0089      	lsls	r1, r1, #2
    4232:	4b18      	ldr	r3, [pc, #96]	; (4294 <PMM_Sleep+0x94>)
    4234:	4798      	blx	r3
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    4236:	4b14      	ldr	r3, [pc, #80]	; (4288 <PMM_Sleep+0x88>)
    4238:	18c1      	adds	r1, r0, r3
                    if (validateSleepDuration(sysSleepTime))
    423a:	4a14      	ldr	r2, [pc, #80]	; (428c <PMM_Sleep+0x8c>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    423c:	2300      	movs	r3, #0
                    if (validateSleepDuration(sysSleepTime))
    423e:	4291      	cmp	r1, r2
    4240:	d8ef      	bhi.n	4222 <PMM_Sleep+0x22>
    4242:	6825      	ldr	r5, [r4, #0]
    4244:	4285      	cmp	r5, r0
    4246:	d900      	bls.n	424a <PMM_Sleep+0x4a>
    4248:	0005      	movs	r5, r0
                        SystemTimerSuspend();
    424a:	4b13      	ldr	r3, [pc, #76]	; (4298 <PMM_Sleep+0x98>)
    424c:	4798      	blx	r3
                            MS_TO_SLEEP_TICKS(sysSleepTime - PMM_WAKEUPTIME_MS),
    424e:	0028      	movs	r0, r5
    4250:	380a      	subs	r0, #10
    4252:	4b12      	ldr	r3, [pc, #72]	; (429c <PMM_Sleep+0x9c>)
    4254:	4798      	blx	r3
    4256:	4912      	ldr	r1, [pc, #72]	; (42a0 <PMM_Sleep+0xa0>)
    4258:	4b12      	ldr	r3, [pc, #72]	; (42a4 <PMM_Sleep+0xa4>)
    425a:	4798      	blx	r3
                        SleepTimerStart(
    425c:	4b12      	ldr	r3, [pc, #72]	; (42a8 <PMM_Sleep+0xa8>)
    425e:	4798      	blx	r3
    4260:	4912      	ldr	r1, [pc, #72]	; (42ac <PMM_Sleep+0xac>)
    4262:	4b13      	ldr	r3, [pc, #76]	; (42b0 <PMM_Sleep+0xb0>)
    4264:	4798      	blx	r3
                        pmmState = PMM_STATE_SLEEP;
    4266:	2201      	movs	r2, #1
    4268:	4b12      	ldr	r3, [pc, #72]	; (42b4 <PMM_Sleep+0xb4>)
    426a:	701a      	strb	r2, [r3, #0]
                        sleepReq = req;
    426c:	4b12      	ldr	r3, [pc, #72]	; (42b8 <PMM_Sleep+0xb8>)
    426e:	601c      	str	r4, [r3, #0]
                        HAL_Sleep(req->sleep_mode);
    4270:	7920      	ldrb	r0, [r4, #4]
    4272:	4b12      	ldr	r3, [pc, #72]	; (42bc <PMM_Sleep+0xbc>)
    4274:	4798      	blx	r3
                        status = PMM_SLEEP_REQ_PROCESSED;
    4276:	2301      	movs	r3, #1
    4278:	e7d3      	b.n	4222 <PMM_Sleep+0x22>
                        sysSleepTime = PMM_SLEEPTIME_MAX_MS;
    427a:	4811      	ldr	r0, [pc, #68]	; (42c0 <PMM_Sleep+0xc0>)
    427c:	e7e1      	b.n	4242 <PMM_Sleep+0x42>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    427e:	2300      	movs	r3, #0
    4280:	e7cf      	b.n	4222 <PMM_Sleep+0x22>
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	0000a535 	.word	0x0000a535
    4288:	fffffc18 	.word	0xfffffc18
    428c:	07cebbc8 	.word	0x07cebbc8
    4290:	0000a0d5 	.word	0x0000a0d5
    4294:	0001270d 	.word	0x0001270d
    4298:	0000a399 	.word	0x0000a399
    429c:	00013a4d 	.word	0x00013a4d
    42a0:	42031375 	.word	0x42031375
    42a4:	000133f5 	.word	0x000133f5
    42a8:	00012b01 	.word	0x00012b01
    42ac:	0000417d 	.word	0x0000417d
    42b0:	000040f1 	.word	0x000040f1
    42b4:	20000bb4 	.word	0x20000bb4
    42b8:	20000bb8 	.word	0x20000bb8
    42bc:	00004061 	.word	0x00004061
    42c0:	07cebfb0 	.word	0x07cebfb0

000042c4 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    42c4:	4770      	bx	lr
	...

000042c8 <LORAReg_InitAS>:
{
    42c8:	b530      	push	{r4, r5, lr}
    42ca:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    42cc:	4b7a      	ldr	r3, [pc, #488]	; (44b8 <LORAReg_InitAS+0x1f0>)
    42ce:	2203      	movs	r2, #3
    42d0:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    42d2:	2110      	movs	r1, #16
    42d4:	321f      	adds	r2, #31
    42d6:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    42d8:	3a21      	subs	r2, #33	; 0x21
    42da:	2421      	movs	r4, #33	; 0x21
    42dc:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    42de:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    42e0:	001a      	movs	r2, r3
    42e2:	326c      	adds	r2, #108	; 0x6c
    42e4:	711a      	strb	r2, [r3, #4]
    42e6:	0a14      	lsrs	r4, r2, #8
    42e8:	715c      	strb	r4, [r3, #5]
    42ea:	0c14      	lsrs	r4, r2, #16
    42ec:	719c      	strb	r4, [r3, #6]
    42ee:	0e12      	lsrs	r2, r2, #24
    42f0:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    42f2:	001a      	movs	r2, r3
    42f4:	322c      	adds	r2, #44	; 0x2c
    42f6:	701a      	strb	r2, [r3, #0]
    42f8:	0a14      	lsrs	r4, r2, #8
    42fa:	705c      	strb	r4, [r3, #1]
    42fc:	0c14      	lsrs	r4, r2, #16
    42fe:	709c      	strb	r4, [r3, #2]
    4300:	0e12      	lsrs	r2, r2, #24
    4302:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4304:	001a      	movs	r2, r3
    4306:	328c      	adds	r2, #140	; 0x8c
    4308:	721a      	strb	r2, [r3, #8]
    430a:	0a14      	lsrs	r4, r2, #8
    430c:	725c      	strb	r4, [r3, #9]
    430e:	0c14      	lsrs	r4, r2, #16
    4310:	729c      	strb	r4, [r3, #10]
    4312:	0e12      	lsrs	r2, r2, #24
    4314:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4316:	001a      	movs	r2, r3
    4318:	324d      	adds	r2, #77	; 0x4d
    431a:	32ff      	adds	r2, #255	; 0xff
    431c:	741a      	strb	r2, [r3, #16]
    431e:	0a14      	lsrs	r4, r2, #8
    4320:	745c      	strb	r4, [r3, #17]
    4322:	0c14      	lsrs	r4, r2, #16
    4324:	749c      	strb	r4, [r3, #18]
    4326:	0e12      	lsrs	r2, r2, #24
    4328:	74da      	strb	r2, [r3, #19]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    432a:	001a      	movs	r2, r3
    432c:	32ad      	adds	r2, #173	; 0xad
    432e:	32ff      	adds	r2, #255	; 0xff
    4330:	731a      	strb	r2, [r3, #12]
    4332:	0a14      	lsrs	r4, r2, #8
    4334:	735c      	strb	r4, [r3, #13]
    4336:	0c14      	lsrs	r4, r2, #16
    4338:	739c      	strb	r4, [r3, #14]
    433a:	0e12      	lsrs	r2, r2, #24
    433c:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    433e:	2202      	movs	r2, #2
    4340:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    4342:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    4344:	2400      	movs	r4, #0
    4346:	751c      	strb	r4, [r3, #20]
    4348:	3c16      	subs	r4, #22
    434a:	755c      	strb	r4, [r3, #21]
    434c:	341c      	adds	r4, #28
    434e:	759c      	strb	r4, [r3, #22]
    4350:	3431      	adds	r4, #49	; 0x31
    4352:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    4354:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    4356:	3c25      	subs	r4, #37	; 0x25
    4358:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    435a:	3c0b      	subs	r4, #11
    435c:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    435e:	2500      	movs	r5, #0
    4360:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 7;
    4362:	3524      	adds	r5, #36	; 0x24
    4364:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    4366:	3501      	adds	r5, #1
    4368:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwr = 16;
    436a:	3419      	adds	r4, #25
    436c:	5519      	strb	r1, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    436e:	21aa      	movs	r1, #170	; 0xaa
    4370:	31ff      	adds	r1, #255	; 0xff
    4372:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    4374:	4a51      	ldr	r2, [pc, #324]	; (44bc <LORAReg_InitAS+0x1f4>)
    4376:	7811      	ldrb	r1, [r2, #0]
    4378:	22a8      	movs	r2, #168	; 0xa8
    437a:	0052      	lsls	r2, r2, #1
    437c:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    437e:	3a2b      	subs	r2, #43	; 0x2b
    4380:	3aff      	subs	r2, #255	; 0xff
    4382:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    4384:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    4386:	3c16      	subs	r4, #22
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    4388:	2808      	cmp	r0, #8
    438a:	d91c      	bls.n	43c6 <LORAReg_InitAS+0xfe>
	if(!initialized)
    438c:	4b4c      	ldr	r3, [pc, #304]	; (44c0 <LORAReg_InitAS+0x1f8>)
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	d102      	bne.n	439a <LORAReg_InitAS+0xd2>
		initialized = true;
    4394:	2201      	movs	r2, #1
    4396:	4b4a      	ldr	r3, [pc, #296]	; (44c0 <LORAReg_InitAS+0x1f8>)
    4398:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    439a:	4b4a      	ldr	r3, [pc, #296]	; (44c4 <LORAReg_InitAS+0x1fc>)
    439c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    439e:	4b4a      	ldr	r3, [pc, #296]	; (44c8 <LORAReg_InitAS+0x200>)
    43a0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    43a2:	4b4a      	ldr	r3, [pc, #296]	; (44cc <LORAReg_InitAS+0x204>)
    43a4:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    43a6:	4b44      	ldr	r3, [pc, #272]	; (44b8 <LORAReg_InitAS+0x1f0>)
    43a8:	22fe      	movs	r2, #254	; 0xfe
    43aa:	32ff      	adds	r2, #255	; 0xff
    43ac:	5c9a      	ldrb	r2, [r3, r2]
    43ae:	21ff      	movs	r1, #255	; 0xff
    43b0:	0049      	lsls	r1, r1, #1
    43b2:	5c58      	ldrb	r0, [r3, r1]
    43b4:	0200      	lsls	r0, r0, #8
    43b6:	4310      	orrs	r0, r2
    43b8:	b2c1      	uxtb	r1, r0
    43ba:	0a00      	lsrs	r0, r0, #8
    43bc:	4b44      	ldr	r3, [pc, #272]	; (44d0 <LORAReg_InitAS+0x208>)
    43be:	4798      	blx	r3
}
    43c0:	0020      	movs	r0, r4
    43c2:	b007      	add	sp, #28
    43c4:	bd30      	pop	{r4, r5, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    43c6:	001c      	movs	r4, r3
    43c8:	0018      	movs	r0, r3
    43ca:	306c      	adds	r0, #108	; 0x6c
    43cc:	3a22      	subs	r2, #34	; 0x22
    43ce:	4941      	ldr	r1, [pc, #260]	; (44d4 <LORAReg_InitAS+0x20c>)
    43d0:	4d41      	ldr	r5, [pc, #260]	; (44d8 <LORAReg_InitAS+0x210>)
    43d2:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    43d4:	0020      	movs	r0, r4
    43d6:	308c      	adds	r0, #140	; 0x8c
    43d8:	2218      	movs	r2, #24
    43da:	4940      	ldr	r1, [pc, #256]	; (44dc <LORAReg_InitAS+0x214>)
    43dc:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    43de:	0020      	movs	r0, r4
    43e0:	30ad      	adds	r0, #173	; 0xad
    43e2:	30ff      	adds	r0, #255	; 0xff
    43e4:	220c      	movs	r2, #12
    43e6:	493e      	ldr	r1, [pc, #248]	; (44e0 <LORAReg_InitAS+0x218>)
    43e8:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    43ea:	0020      	movs	r0, r4
    43ec:	3097      	adds	r0, #151	; 0x97
    43ee:	30ff      	adds	r0, #255	; 0xff
    43f0:	2202      	movs	r2, #2
    43f2:	493c      	ldr	r1, [pc, #240]	; (44e4 <LORAReg_InitAS+0x21c>)
    43f4:	47a8      	blx	r5
    43f6:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    43f8:	482f      	ldr	r0, [pc, #188]	; (44b8 <LORAReg_InitAS+0x1f0>)
    43fa:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    43fc:	2422      	movs	r4, #34	; 0x22
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    43fe:	7902      	ldrb	r2, [r0, #4]
    4400:	7941      	ldrb	r1, [r0, #5]
    4402:	0209      	lsls	r1, r1, #8
    4404:	4311      	orrs	r1, r2
    4406:	7982      	ldrb	r2, [r0, #6]
    4408:	0412      	lsls	r2, r2, #16
    440a:	4311      	orrs	r1, r2
    440c:	79c2      	ldrb	r2, [r0, #7]
    440e:	0612      	lsls	r2, r2, #24
    4410:	430a      	orrs	r2, r1
    4412:	0059      	lsls	r1, r3, #1
    4414:	188a      	adds	r2, r1, r2
    4416:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    4418:	3301      	adds	r3, #1
    441a:	b2db      	uxtb	r3, r3
    441c:	5702      	ldrsb	r2, [r0, r4]
    441e:	4293      	cmp	r3, r2
    4420:	dbed      	blt.n	43fe <LORAReg_InitAS+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    4422:	4c25      	ldr	r4, [pc, #148]	; (44b8 <LORAReg_InitAS+0x1f0>)
    4424:	2210      	movs	r2, #16
    4426:	23d5      	movs	r3, #213	; 0xd5
    4428:	005b      	lsls	r3, r3, #1
    442a:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    442c:	7820      	ldrb	r0, [r4, #0]
    442e:	7863      	ldrb	r3, [r4, #1]
    4430:	021b      	lsls	r3, r3, #8
    4432:	4303      	orrs	r3, r0
    4434:	78a0      	ldrb	r0, [r4, #2]
    4436:	0400      	lsls	r0, r0, #16
    4438:	4303      	orrs	r3, r0
    443a:	78e0      	ldrb	r0, [r4, #3]
    443c:	0600      	lsls	r0, r0, #24
    443e:	4318      	orrs	r0, r3
    4440:	3230      	adds	r2, #48	; 0x30
    4442:	4929      	ldr	r1, [pc, #164]	; (44e8 <LORAReg_InitAS+0x220>)
    4444:	4b24      	ldr	r3, [pc, #144]	; (44d8 <LORAReg_InitAS+0x210>)
    4446:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    4448:	2304      	movs	r3, #4
    444a:	2104      	movs	r1, #4
    444c:	22fa      	movs	r2, #250	; 0xfa
    444e:	0052      	lsls	r2, r2, #1
    4450:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4452:	2100      	movs	r1, #0
    4454:	22f6      	movs	r2, #246	; 0xf6
    4456:	32ff      	adds	r2, #255	; 0xff
    4458:	54a1      	strb	r1, [r4, r2]
    445a:	0022      	movs	r2, r4
    445c:	32f6      	adds	r2, #246	; 0xf6
    445e:	32ff      	adds	r2, #255	; 0xff
    4460:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    4462:	22f8      	movs	r2, #248	; 0xf8
    4464:	32ff      	adds	r2, #255	; 0xff
    4466:	54a1      	strb	r1, [r4, r2]
    4468:	0022      	movs	r2, r4
    446a:	32f8      	adds	r2, #248	; 0xf8
    446c:	32ff      	adds	r2, #255	; 0xff
    446e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    4470:	3101      	adds	r1, #1
    4472:	22fa      	movs	r2, #250	; 0xfa
    4474:	32ff      	adds	r2, #255	; 0xff
    4476:	54a1      	strb	r1, [r4, r2]
    4478:	0022      	movs	r2, r4
    447a:	32fa      	adds	r2, #250	; 0xfa
    447c:	32ff      	adds	r2, #255	; 0xff
    447e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    4480:	2100      	movs	r1, #0
    4482:	22fc      	movs	r2, #252	; 0xfc
    4484:	32ff      	adds	r2, #255	; 0xff
    4486:	54a1      	strb	r1, [r4, r2]
    4488:	0022      	movs	r2, r4
    448a:	32fc      	adds	r2, #252	; 0xfc
    448c:	32ff      	adds	r2, #255	; 0xff
    448e:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    4490:	3102      	adds	r1, #2
    4492:	22fe      	movs	r2, #254	; 0xfe
    4494:	32ff      	adds	r2, #255	; 0xff
    4496:	54a1      	strb	r1, [r4, r2]
    4498:	18a4      	adds	r4, r4, r2
    449a:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    449c:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    449e:	3afb      	subs	r2, #251	; 0xfb
    44a0:	3aff      	subs	r2, #255	; 0xff
    44a2:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    44a4:	4a11      	ldr	r2, [pc, #68]	; (44ec <LORAReg_InitAS+0x224>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    44a6:	9200      	str	r2, [sp, #0]
    44a8:	4911      	ldr	r1, [pc, #68]	; (44f0 <LORAReg_InitAS+0x228>)
    44aa:	9a03      	ldr	r2, [sp, #12]
    44ac:	4b11      	ldr	r3, [pc, #68]	; (44f4 <LORAReg_InitAS+0x22c>)
    44ae:	2004      	movs	r0, #4
    44b0:	4c11      	ldr	r4, [pc, #68]	; (44f8 <LORAReg_InitAS+0x230>)
    44b2:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    44b4:	2408      	movs	r4, #8
    44b6:	e769      	b.n	438c <LORAReg_InitAS+0xc4>
    44b8:	200013e0 	.word	0x200013e0
    44bc:	200013dc 	.word	0x200013dc
    44c0:	20000bbc 	.word	0x20000bbc
    44c4:	00007fe5 	.word	0x00007fe5
    44c8:	000086d1 	.word	0x000086d1
    44cc:	00008949 	.word	0x00008949
    44d0:	00008ec5 	.word	0x00008ec5
    44d4:	0001c474 	.word	0x0001c474
    44d8:	000158c9 	.word	0x000158c9
    44dc:	0001c45c 	.word	0x0001c45c
    44e0:	0001c4bc 	.word	0x0001c4bc
    44e4:	0001c4b8 	.word	0x0001c4b8
    44e8:	0001c478 	.word	0x0001c478
    44ec:	000042c5 	.word	0x000042c5
    44f0:	200011bc 	.word	0x200011bc
    44f4:	0001c4c8 	.word	0x0001c4c8
    44f8:	000090dd 	.word	0x000090dd

000044fc <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    44fc:	4770      	bx	lr
	...

00004500 <LORAReg_InitAU>:
{
    4500:	b5f0      	push	{r4, r5, r6, r7, lr}
    4502:	46de      	mov	lr, fp
    4504:	4657      	mov	r7, sl
    4506:	464e      	mov	r6, r9
    4508:	4645      	mov	r5, r8
    450a:	b5e0      	push	{r5, r6, r7, lr}
    450c:	b087      	sub	sp, #28
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    450e:	4c69      	ldr	r4, [pc, #420]	; (46b4 <LORAReg_InitAU+0x1b4>)
    4510:	2303      	movs	r3, #3
    4512:	77a3      	strb	r3, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_AU;
    4514:	2248      	movs	r2, #72	; 0x48
    4516:	331f      	adds	r3, #31
    4518:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    451a:	3b1b      	subs	r3, #27
    451c:	77e3      	strb	r3, [r4, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    451e:	0023      	movs	r3, r4
    4520:	339c      	adds	r3, #156	; 0x9c
    4522:	2200      	movs	r2, #0
    4524:	4690      	mov	r8, r2
    4526:	7123      	strb	r3, [r4, #4]
    4528:	0a1a      	lsrs	r2, r3, #8
    452a:	7162      	strb	r2, [r4, #5]
    452c:	0c1a      	lsrs	r2, r3, #16
    452e:	71a2      	strb	r2, [r4, #6]
    4530:	0e1a      	lsrs	r2, r3, #24
    4532:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    4534:	0026      	movs	r6, r4
    4536:	362c      	adds	r6, #44	; 0x2c
    4538:	7026      	strb	r6, [r4, #0]
    453a:	0a32      	lsrs	r2, r6, #8
    453c:	7062      	strb	r2, [r4, #1]
    453e:	0c32      	lsrs	r2, r6, #16
    4540:	70a2      	strb	r2, [r4, #2]
    4542:	0e32      	lsrs	r2, r6, #24
    4544:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    4546:	22ff      	movs	r2, #255	; 0xff
    4548:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    454a:	2508      	movs	r5, #8
    454c:	2708      	movs	r7, #8
    454e:	76a5      	strb	r5, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    4550:	76e5      	strb	r5, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    4552:	3a60      	subs	r2, #96	; 0x60
    4554:	3aff      	subs	r2, #255	; 0xff
    4556:	4692      	mov	sl, r2
    4558:	7522      	strb	r2, [r4, #20]
    455a:	2270      	movs	r2, #112	; 0x70
    455c:	7562      	strb	r2, [r4, #21]
    455e:	75a7      	strb	r7, [r4, #22]
    4560:	3a39      	subs	r2, #57	; 0x39
    4562:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    4564:	3a1f      	subs	r2, #31
    4566:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    4568:	3a12      	subs	r2, #18
    456a:	4693      	mov	fp, r2
    456c:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    456e:	4641      	mov	r1, r8
    4570:	7761      	strb	r1, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU;
    4572:	2140      	movs	r1, #64	; 0x40
    4574:	4689      	mov	r9, r1
    4576:	31fc      	adds	r1, #252	; 0xfc
    4578:	464a      	mov	r2, r9
    457a:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU;
    457c:	223e      	movs	r2, #62	; 0x3e
    457e:	32ff      	adds	r2, #255	; 0xff
    4580:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    4582:	3a05      	subs	r2, #5
    4584:	4641      	mov	r1, r8
    4586:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    4588:	223a      	movs	r2, #58	; 0x3a
    458a:	32ff      	adds	r2, #255	; 0xff
    458c:	4659      	mov	r1, fp
    458e:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    4590:	3201      	adds	r2, #1
    4592:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    4594:	3a2e      	subs	r2, #46	; 0x2e
    4596:	3aff      	subs	r2, #255	; 0xff
    4598:	4694      	mov	ip, r2
    459a:	223c      	movs	r2, #60	; 0x3c
    459c:	32ff      	adds	r2, #255	; 0xff
    459e:	4661      	mov	r1, ip
    45a0:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    45a2:	3203      	adds	r2, #3
    45a4:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    45a6:	2200      	movs	r2, #0
    45a8:	4694      	mov	ip, r2
    45aa:	322d      	adds	r2, #45	; 0x2d
    45ac:	32ff      	adds	r2, #255	; 0xff
    45ae:	4661      	mov	r1, ip
    45b0:	54a1      	strb	r1, [r4, r2]
    45b2:	0022      	movs	r2, r4
    45b4:	322d      	adds	r2, #45	; 0x2d
    45b6:	32ff      	adds	r2, #255	; 0xff
    45b8:	2128      	movs	r1, #40	; 0x28
    45ba:	4249      	negs	r1, r1
    45bc:	7051      	strb	r1, [r2, #1]
    45be:	2174      	movs	r1, #116	; 0x74
    45c0:	4249      	negs	r1, r1
    45c2:	7091      	strb	r1, [r2, #2]
    45c4:	2136      	movs	r1, #54	; 0x36
    45c6:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    45c8:	2260      	movs	r2, #96	; 0x60
    45ca:	4694      	mov	ip, r2
    45cc:	32d0      	adds	r2, #208	; 0xd0
    45ce:	4661      	mov	r1, ip
    45d0:	54a1      	strb	r1, [r4, r2]
    45d2:	0022      	movs	r2, r4
    45d4:	3231      	adds	r2, #49	; 0x31
    45d6:	32ff      	adds	r2, #255	; 0xff
    45d8:	217a      	movs	r1, #122	; 0x7a
    45da:	4249      	negs	r1, r1
    45dc:	7051      	strb	r1, [r2, #1]
    45de:	2169      	movs	r1, #105	; 0x69
    45e0:	4249      	negs	r1, r1
    45e2:	7091      	strb	r1, [r2, #2]
    45e4:	2136      	movs	r1, #54	; 0x36
    45e6:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    45e8:	229a      	movs	r2, #154	; 0x9a
    45ea:	0052      	lsls	r2, r2, #1
    45ec:	4651      	mov	r1, sl
    45ee:	54a1      	strb	r1, [r4, r2]
    45f0:	0022      	movs	r2, r4
    45f2:	3235      	adds	r2, #53	; 0x35
    45f4:	32ff      	adds	r2, #255	; 0xff
    45f6:	2170      	movs	r1, #112	; 0x70
    45f8:	7051      	strb	r1, [r2, #1]
    45fa:	7097      	strb	r7, [r2, #2]
    45fc:	2137      	movs	r1, #55	; 0x37
    45fe:	70d1      	strb	r1, [r2, #3]
	RegParams.Rx1DrOffset = 5;
    4600:	2105      	movs	r1, #5
    4602:	2224      	movs	r2, #36	; 0x24
    4604:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    4606:	3105      	adds	r1, #5
    4608:	3201      	adds	r2, #1
    460a:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwr = 30;
    460c:	3114      	adds	r1, #20
    460e:	3a05      	subs	r2, #5
    4610:	54a1      	strb	r1, [r4, r2]
	RegParams.band = ismBand;
    4612:	3206      	adds	r2, #6
    4614:	54a0      	strb	r0, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    4616:	326a      	adds	r2, #106	; 0x6a
    4618:	4927      	ldr	r1, [pc, #156]	; (46b8 <LORAReg_InitAU+0x1b8>)
    461a:	0018      	movs	r0, r3
    461c:	4b27      	ldr	r3, [pc, #156]	; (46bc <LORAReg_InitAU+0x1bc>)
    461e:	4699      	mov	r9, r3
    4620:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    4622:	2270      	movs	r2, #112	; 0x70
    4624:	4926      	ldr	r1, [pc, #152]	; (46c0 <LORAReg_InitAU+0x1c0>)
    4626:	0030      	movs	r0, r6
    4628:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    462a:	2340      	movs	r3, #64	; 0x40
    462c:	33ff      	adds	r3, #255	; 0xff
    462e:	4642      	mov	r2, r8
    4630:	54e2      	strb	r2, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    4632:	33b5      	adds	r3, #181	; 0xb5
    4634:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_AU_ALT_CH;
    4636:	2200      	movs	r2, #0
    4638:	23f6      	movs	r3, #246	; 0xf6
    463a:	33ff      	adds	r3, #255	; 0xff
    463c:	54e2      	strb	r2, [r4, r3]
    463e:	0023      	movs	r3, r4
    4640:	33f6      	adds	r3, #246	; 0xf6
    4642:	33ff      	adds	r3, #255	; 0xff
    4644:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    4646:	3201      	adds	r2, #1
    4648:	23f8      	movs	r3, #248	; 0xf8
    464a:	33ff      	adds	r3, #255	; 0xff
    464c:	54e2      	strb	r2, [r4, r3]
    464e:	0023      	movs	r3, r4
    4650:	33f8      	adds	r3, #248	; 0xf8
    4652:	33ff      	adds	r3, #255	; 0xff
    4654:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    4656:	2200      	movs	r2, #0
    4658:	23fa      	movs	r3, #250	; 0xfa
    465a:	33ff      	adds	r3, #255	; 0xff
    465c:	54e2      	strb	r2, [r4, r3]
    465e:	0023      	movs	r3, r4
    4660:	33fa      	adds	r3, #250	; 0xfa
    4662:	33ff      	adds	r3, #255	; 0xff
    4664:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    4666:	23fc      	movs	r3, #252	; 0xfc
    4668:	33ff      	adds	r3, #255	; 0xff
    466a:	54e2      	strb	r2, [r4, r3]
    466c:	0023      	movs	r3, r4
    466e:	33fc      	adds	r3, #252	; 0xfc
    4670:	33ff      	adds	r3, #255	; 0xff
    4672:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    4674:	23fe      	movs	r3, #254	; 0xfe
    4676:	33ff      	adds	r3, #255	; 0xff
    4678:	54e2      	strb	r2, [r4, r3]
    467a:	18e4      	adds	r4, r4, r3
    467c:	2300      	movs	r3, #0
    467e:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    4680:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    4682:	3202      	adds	r2, #2
    4684:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    4686:	4a0f      	ldr	r2, [pc, #60]	; (46c4 <LORAReg_InitAU+0x1c4>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    4688:	9200      	str	r2, [sp, #0]
    468a:	490f      	ldr	r1, [pc, #60]	; (46c8 <LORAReg_InitAU+0x1c8>)
    468c:	9a03      	ldr	r2, [sp, #12]
    468e:	4b0f      	ldr	r3, [pc, #60]	; (46cc <LORAReg_InitAU+0x1cc>)
    4690:	2008      	movs	r0, #8
    4692:	4c0f      	ldr	r4, [pc, #60]	; (46d0 <LORAReg_InitAU+0x1d0>)
    4694:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    4696:	4b0f      	ldr	r3, [pc, #60]	; (46d4 <LORAReg_InitAU+0x1d4>)
    4698:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    469a:	4b0f      	ldr	r3, [pc, #60]	; (46d8 <LORAReg_InitAU+0x1d8>)
    469c:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    469e:	4b0f      	ldr	r3, [pc, #60]	; (46dc <LORAReg_InitAU+0x1dc>)
    46a0:	4798      	blx	r3
}
    46a2:	2008      	movs	r0, #8
    46a4:	b007      	add	sp, #28
    46a6:	bc3c      	pop	{r2, r3, r4, r5}
    46a8:	4690      	mov	r8, r2
    46aa:	4699      	mov	r9, r3
    46ac:	46a2      	mov	sl, r4
    46ae:	46ab      	mov	fp, r5
    46b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	200013e0 	.word	0x200013e0
    46b8:	0001c4e0 	.word	0x0001c4e0
    46bc:	000158c9 	.word	0x000158c9
    46c0:	0001c570 	.word	0x0001c570
    46c4:	000044fd 	.word	0x000044fd
    46c8:	200011c0 	.word	0x200011c0
    46cc:	0001c5e0 	.word	0x0001c5e0
    46d0:	000090dd 	.word	0x000090dd
    46d4:	00008121 	.word	0x00008121
    46d8:	0000873d 	.word	0x0000873d
    46dc:	00008995 	.word	0x00008995

000046e0 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    46e0:	4770      	bx	lr
	...

000046e4 <LORAReg_InitEU>:
{
    46e4:	b570      	push	{r4, r5, r6, lr}
    46e6:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    46e8:	4b91      	ldr	r3, [pc, #580]	; (4930 <LORAReg_InitEU+0x24c>)
    46ea:	2103      	movs	r1, #3
    46ec:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    46ee:	2410      	movs	r4, #16
    46f0:	2222      	movs	r2, #34	; 0x22
    46f2:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    46f4:	2506      	movs	r5, #6
    46f6:	3a01      	subs	r2, #1
    46f8:	549d      	strb	r5, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    46fa:	3a20      	subs	r2, #32
    46fc:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    46fe:	001a      	movs	r2, r3
    4700:	326c      	adds	r2, #108	; 0x6c
    4702:	711a      	strb	r2, [r3, #4]
    4704:	0a15      	lsrs	r5, r2, #8
    4706:	715d      	strb	r5, [r3, #5]
    4708:	0c15      	lsrs	r5, r2, #16
    470a:	719d      	strb	r5, [r3, #6]
    470c:	0e12      	lsrs	r2, r2, #24
    470e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4710:	001a      	movs	r2, r3
    4712:	322c      	adds	r2, #44	; 0x2c
    4714:	701a      	strb	r2, [r3, #0]
    4716:	0a15      	lsrs	r5, r2, #8
    4718:	705d      	strb	r5, [r3, #1]
    471a:	0c15      	lsrs	r5, r2, #16
    471c:	709d      	strb	r5, [r3, #2]
    471e:	0e12      	lsrs	r2, r2, #24
    4720:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4722:	001a      	movs	r2, r3
    4724:	32ad      	adds	r2, #173	; 0xad
    4726:	32ff      	adds	r2, #255	; 0xff
    4728:	731a      	strb	r2, [r3, #12]
    472a:	0a15      	lsrs	r5, r2, #8
    472c:	735d      	strb	r5, [r3, #13]
    472e:	0c15      	lsrs	r5, r2, #16
    4730:	739d      	strb	r5, [r3, #14]
    4732:	0e12      	lsrs	r2, r2, #24
    4734:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4736:	001a      	movs	r2, r3
    4738:	328c      	adds	r2, #140	; 0x8c
    473a:	721a      	strb	r2, [r3, #8]
    473c:	0a15      	lsrs	r5, r2, #8
    473e:	725d      	strb	r5, [r3, #9]
    4740:	0c15      	lsrs	r5, r2, #16
    4742:	729d      	strb	r5, [r3, #10]
    4744:	0e12      	lsrs	r2, r2, #24
    4746:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4748:	001a      	movs	r2, r3
    474a:	324d      	adds	r2, #77	; 0x4d
    474c:	32ff      	adds	r2, #255	; 0xff
    474e:	741a      	strb	r2, [r3, #16]
    4750:	0a15      	lsrs	r5, r2, #8
    4752:	745d      	strb	r5, [r3, #17]
    4754:	0c15      	lsrs	r5, r2, #16
    4756:	749d      	strb	r5, [r3, #18]
    4758:	0e12      	lsrs	r2, r2, #24
    475a:	74da      	strb	r2, [r3, #19]
	RegParams.MinNewChIndex = 3;
    475c:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    475e:	2202      	movs	r2, #2
    4760:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    4762:	3205      	adds	r2, #5
    4764:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    4766:	2500      	movs	r5, #0
    4768:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 5;
    476a:	2605      	movs	r6, #5
    476c:	3524      	adds	r5, #36	; 0x24
    476e:	555e      	strb	r6, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    4770:	3501      	adds	r5, #1
    4772:	555a      	strb	r2, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4774:	22aa      	movs	r2, #170	; 0xaa
    4776:	32ff      	adds	r2, #255	; 0xff
    4778:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 16;
    477a:	3a8a      	subs	r2, #138	; 0x8a
    477c:	3aff      	subs	r2, #255	; 0xff
    477e:	549c      	strb	r4, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    4780:	4a6c      	ldr	r2, [pc, #432]	; (4934 <LORAReg_InitEU+0x250>)
    4782:	7811      	ldrb	r1, [r2, #0]
    4784:	22a8      	movs	r2, #168	; 0xa8
    4786:	0052      	lsls	r2, r2, #1
    4788:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    478a:	3a2b      	subs	r2, #43	; 0x2b
    478c:	3aff      	subs	r2, #255	; 0xff
    478e:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    4790:	2800      	cmp	r0, #0
    4792:	d006      	beq.n	47a2 <LORAReg_InitEU+0xbe>
		return UNSUPPORTED_BAND;
    4794:	23c8      	movs	r3, #200	; 0xc8
	else if(ismBand == ISM_EU433)
    4796:	2801      	cmp	r0, #1
    4798:	d100      	bne.n	479c <LORAReg_InitEU+0xb8>
    479a:	e092      	b.n	48c2 <LORAReg_InitEU+0x1de>
}
    479c:	0018      	movs	r0, r3
    479e:	b00a      	add	sp, #40	; 0x28
    47a0:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    47a2:	001c      	movs	r4, r3
    47a4:	0018      	movs	r0, r3
    47a6:	306c      	adds	r0, #108	; 0x6c
    47a8:	3a20      	subs	r2, #32
    47aa:	4963      	ldr	r1, [pc, #396]	; (4938 <LORAReg_InitEU+0x254>)
    47ac:	4d63      	ldr	r5, [pc, #396]	; (493c <LORAReg_InitEU+0x258>)
    47ae:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    47b0:	0020      	movs	r0, r4
    47b2:	308c      	adds	r0, #140	; 0x8c
    47b4:	2224      	movs	r2, #36	; 0x24
    47b6:	4962      	ldr	r1, [pc, #392]	; (4940 <LORAReg_InitEU+0x25c>)
    47b8:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    47ba:	0020      	movs	r0, r4
    47bc:	30ad      	adds	r0, #173	; 0xad
    47be:	30ff      	adds	r0, #255	; 0xff
    47c0:	2248      	movs	r2, #72	; 0x48
    47c2:	4960      	ldr	r1, [pc, #384]	; (4944 <LORAReg_InitEU+0x260>)
    47c4:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    47c6:	0020      	movs	r0, r4
    47c8:	3097      	adds	r0, #151	; 0x97
    47ca:	30ff      	adds	r0, #255	; 0xff
    47cc:	220c      	movs	r2, #12
    47ce:	495e      	ldr	r1, [pc, #376]	; (4948 <LORAReg_InitEU+0x264>)
    47d0:	47a8      	blx	r5
    47d2:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    47d4:	4856      	ldr	r0, [pc, #344]	; (4930 <LORAReg_InitEU+0x24c>)
    47d6:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    47d8:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    47da:	7902      	ldrb	r2, [r0, #4]
    47dc:	7941      	ldrb	r1, [r0, #5]
    47de:	0209      	lsls	r1, r1, #8
    47e0:	4311      	orrs	r1, r2
    47e2:	7982      	ldrb	r2, [r0, #6]
    47e4:	0412      	lsls	r2, r2, #16
    47e6:	4311      	orrs	r1, r2
    47e8:	79c2      	ldrb	r2, [r0, #7]
    47ea:	0612      	lsls	r2, r2, #24
    47ec:	430a      	orrs	r2, r1
    47ee:	0059      	lsls	r1, r3, #1
    47f0:	188a      	adds	r2, r1, r2
    47f2:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    47f4:	3301      	adds	r3, #1
    47f6:	b2db      	uxtb	r3, r3
    47f8:	5702      	ldrsb	r2, [r0, r4]
    47fa:	4293      	cmp	r3, r2
    47fc:	dbed      	blt.n	47da <LORAReg_InitEU+0xf6>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    47fe:	4b4c      	ldr	r3, [pc, #304]	; (4930 <LORAReg_InitEU+0x24c>)
    4800:	2200      	movs	r2, #0
    4802:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    4804:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    4806:	3208      	adds	r2, #8
    4808:	751a      	strb	r2, [r3, #20]
    480a:	3a22      	subs	r2, #34	; 0x22
    480c:	755a      	strb	r2, [r3, #21]
    480e:	3a13      	subs	r2, #19
    4810:	759a      	strb	r2, [r3, #22]
    4812:	3260      	adds	r2, #96	; 0x60
    4814:	75da      	strb	r2, [r3, #23]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    4816:	2203      	movs	r2, #3
    4818:	2003      	movs	r0, #3
    481a:	21fa      	movs	r1, #250	; 0xfa
    481c:	0049      	lsls	r1, r1, #1
    481e:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4820:	2000      	movs	r0, #0
    4822:	21f6      	movs	r1, #246	; 0xf6
    4824:	31ff      	adds	r1, #255	; 0xff
    4826:	5458      	strb	r0, [r3, r1]
    4828:	0019      	movs	r1, r3
    482a:	31f6      	adds	r1, #246	; 0xf6
    482c:	31ff      	adds	r1, #255	; 0xff
    482e:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    4830:	21f8      	movs	r1, #248	; 0xf8
    4832:	31ff      	adds	r1, #255	; 0xff
    4834:	5458      	strb	r0, [r3, r1]
    4836:	0019      	movs	r1, r3
    4838:	31f8      	adds	r1, #248	; 0xf8
    483a:	31ff      	adds	r1, #255	; 0xff
    483c:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    483e:	21fa      	movs	r1, #250	; 0xfa
    4840:	31ff      	adds	r1, #255	; 0xff
    4842:	5458      	strb	r0, [r3, r1]
    4844:	0019      	movs	r1, r3
    4846:	31fa      	adds	r1, #250	; 0xfa
    4848:	31ff      	adds	r1, #255	; 0xff
    484a:	300b      	adds	r0, #11
    484c:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = PDS_REG_EU868_SB_DUTY_PRESCLAR;
    484e:	380a      	subs	r0, #10
    4850:	21fc      	movs	r1, #252	; 0xfc
    4852:	31ff      	adds	r1, #255	; 0xff
    4854:	5458      	strb	r0, [r3, r1]
    4856:	0019      	movs	r1, r3
    4858:	31fc      	adds	r1, #252	; 0xfc
    485a:	31ff      	adds	r1, #255	; 0xff
    485c:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    485e:	2100      	movs	r1, #0
    4860:	22fe      	movs	r2, #254	; 0xfe
    4862:	32ff      	adds	r2, #255	; 0xff
    4864:	5499      	strb	r1, [r3, r2]
    4866:	189b      	adds	r3, r3, r2
    4868:	2200      	movs	r2, #0
    486a:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    486c:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    486e:	3202      	adds	r2, #2
    4870:	711a      	strb	r2, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    4872:	4d36      	ldr	r5, [pc, #216]	; (494c <LORAReg_InitEU+0x268>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    4874:	9500      	str	r5, [sp, #0]
    4876:	4936      	ldr	r1, [pc, #216]	; (4950 <LORAReg_InitEU+0x26c>)
    4878:	9a03      	ldr	r2, [sp, #12]
    487a:	4b36      	ldr	r3, [pc, #216]	; (4954 <LORAReg_InitEU+0x270>)
    487c:	3002      	adds	r0, #2
    487e:	4c36      	ldr	r4, [pc, #216]	; (4958 <LORAReg_InitEU+0x274>)
    4880:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    4882:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    4884:	2201      	movs	r2, #1
    4886:	711a      	strb	r2, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    4888:	9500      	str	r5, [sp, #0]
    488a:	4934      	ldr	r1, [pc, #208]	; (495c <LORAReg_InitEU+0x278>)
    488c:	9a07      	ldr	r2, [sp, #28]
    488e:	4b34      	ldr	r3, [pc, #208]	; (4960 <LORAReg_InitEU+0x27c>)
    4890:	200b      	movs	r0, #11
    4892:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    4894:	4a26      	ldr	r2, [pc, #152]	; (4930 <LORAReg_InitEU+0x24c>)
    4896:	7810      	ldrb	r0, [r2, #0]
    4898:	7853      	ldrb	r3, [r2, #1]
    489a:	021b      	lsls	r3, r3, #8
    489c:	4303      	orrs	r3, r0
    489e:	7890      	ldrb	r0, [r2, #2]
    48a0:	0400      	lsls	r0, r0, #16
    48a2:	4303      	orrs	r3, r0
    48a4:	78d0      	ldrb	r0, [r2, #3]
    48a6:	0600      	lsls	r0, r0, #24
    48a8:	4318      	orrs	r0, r3
    48aa:	2240      	movs	r2, #64	; 0x40
    48ac:	492d      	ldr	r1, [pc, #180]	; (4964 <LORAReg_InitEU+0x280>)
    48ae:	4b23      	ldr	r3, [pc, #140]	; (493c <LORAReg_InitEU+0x258>)
    48b0:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    48b2:	4b2d      	ldr	r3, [pc, #180]	; (4968 <LORAReg_InitEU+0x284>)
    48b4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    48b6:	4b2d      	ldr	r3, [pc, #180]	; (496c <LORAReg_InitEU+0x288>)
    48b8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    48ba:	4b2d      	ldr	r3, [pc, #180]	; (4970 <LORAReg_InitEU+0x28c>)
    48bc:	4798      	blx	r3
	return status;
    48be:	2308      	movs	r3, #8
    48c0:	e76c      	b.n	479c <LORAReg_InitEU+0xb8>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    48c2:	4c1b      	ldr	r4, [pc, #108]	; (4930 <LORAReg_InitEU+0x24c>)
    48c4:	0020      	movs	r0, r4
    48c6:	306c      	adds	r0, #108	; 0x6c
    48c8:	2206      	movs	r2, #6
    48ca:	492a      	ldr	r1, [pc, #168]	; (4974 <LORAReg_InitEU+0x290>)
    48cc:	4d1b      	ldr	r5, [pc, #108]	; (493c <LORAReg_InitEU+0x258>)
    48ce:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    48d0:	0020      	movs	r0, r4
    48d2:	308c      	adds	r0, #140	; 0x8c
    48d4:	2224      	movs	r2, #36	; 0x24
    48d6:	4928      	ldr	r1, [pc, #160]	; (4978 <LORAReg_InitEU+0x294>)
    48d8:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    48da:	0020      	movs	r0, r4
    48dc:	30ad      	adds	r0, #173	; 0xad
    48de:	30ff      	adds	r0, #255	; 0xff
    48e0:	220c      	movs	r2, #12
    48e2:	4926      	ldr	r1, [pc, #152]	; (497c <LORAReg_InitEU+0x298>)
    48e4:	47a8      	blx	r5
    48e6:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    48e8:	4811      	ldr	r0, [pc, #68]	; (4930 <LORAReg_InitEU+0x24c>)
    48ea:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    48ec:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    48ee:	7902      	ldrb	r2, [r0, #4]
    48f0:	7941      	ldrb	r1, [r0, #5]
    48f2:	0209      	lsls	r1, r1, #8
    48f4:	4311      	orrs	r1, r2
    48f6:	7982      	ldrb	r2, [r0, #6]
    48f8:	0412      	lsls	r2, r2, #16
    48fa:	4311      	orrs	r1, r2
    48fc:	79c2      	ldrb	r2, [r0, #7]
    48fe:	0612      	lsls	r2, r2, #24
    4900:	430a      	orrs	r2, r1
    4902:	0059      	lsls	r1, r3, #1
    4904:	188a      	adds	r2, r1, r2
    4906:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    4908:	3301      	adds	r3, #1
    490a:	b2db      	uxtb	r3, r3
    490c:	5702      	ldrsb	r2, [r0, r4]
    490e:	4293      	cmp	r3, r2
    4910:	dbed      	blt.n	48ee <LORAReg_InitEU+0x20a>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    4912:	4b07      	ldr	r3, [pc, #28]	; (4930 <LORAReg_InitEU+0x24c>)
    4914:	2205      	movs	r2, #5
    4916:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    4918:	2200      	movs	r2, #0
    491a:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    491c:	3a70      	subs	r2, #112	; 0x70
    491e:	751a      	strb	r2, [r3, #20]
    4920:	3241      	adds	r2, #65	; 0x41
    4922:	755a      	strb	r2, [r3, #21]
    4924:	3a02      	subs	r2, #2
    4926:	759a      	strb	r2, [r3, #22]
    4928:	324a      	adds	r2, #74	; 0x4a
    492a:	75da      	strb	r2, [r3, #23]
    492c:	e7b2      	b.n	4894 <LORAReg_InitEU+0x1b0>
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	200013e0 	.word	0x200013e0
    4934:	200013dc 	.word	0x200013dc
    4938:	0001c640 	.word	0x0001c640
    493c:	000158c9 	.word	0x000158c9
    4940:	0001c614 	.word	0x0001c614
    4944:	0001c6a0 	.word	0x0001c6a0
    4948:	0001c688 	.word	0x0001c688
    494c:	000046e1 	.word	0x000046e1
    4950:	200011c4 	.word	0x200011c4
    4954:	0001c6e8 	.word	0x0001c6e8
    4958:	000090dd 	.word	0x000090dd
    495c:	200011c8 	.word	0x200011c8
    4960:	0001c6f8 	.word	0x0001c6f8
    4964:	0001c648 	.word	0x0001c648
    4968:	00007ea9 	.word	0x00007ea9
    496c:	00008669 	.word	0x00008669
    4970:	00008905 	.word	0x00008905
    4974:	0001c638 	.word	0x0001c638
    4978:	0001c5f0 	.word	0x0001c5f0
    497c:	0001c694 	.word	0x0001c694

00004980 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    4980:	4770      	bx	lr
	...

00004984 <LORAReg_InitIN>:
{
    4984:	b570      	push	{r4, r5, r6, lr}
    4986:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    4988:	4b60      	ldr	r3, [pc, #384]	; (4b0c <LORAReg_InitIN+0x188>)
    498a:	2103      	movs	r1, #3
    498c:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    498e:	2510      	movs	r5, #16
    4990:	2222      	movs	r2, #34	; 0x22
    4992:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    4994:	3a21      	subs	r2, #33	; 0x21
    4996:	2421      	movs	r4, #33	; 0x21
    4998:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    499a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    499c:	001a      	movs	r2, r3
    499e:	326c      	adds	r2, #108	; 0x6c
    49a0:	2400      	movs	r4, #0
    49a2:	711a      	strb	r2, [r3, #4]
    49a4:	0a16      	lsrs	r6, r2, #8
    49a6:	715e      	strb	r6, [r3, #5]
    49a8:	0c16      	lsrs	r6, r2, #16
    49aa:	719e      	strb	r6, [r3, #6]
    49ac:	0e12      	lsrs	r2, r2, #24
    49ae:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    49b0:	001a      	movs	r2, r3
    49b2:	322c      	adds	r2, #44	; 0x2c
    49b4:	701a      	strb	r2, [r3, #0]
    49b6:	0a16      	lsrs	r6, r2, #8
    49b8:	705e      	strb	r6, [r3, #1]
    49ba:	0c16      	lsrs	r6, r2, #16
    49bc:	709e      	strb	r6, [r3, #2]
    49be:	0e12      	lsrs	r2, r2, #24
    49c0:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    49c2:	001a      	movs	r2, r3
    49c4:	328c      	adds	r2, #140	; 0x8c
    49c6:	721a      	strb	r2, [r3, #8]
    49c8:	0a16      	lsrs	r6, r2, #8
    49ca:	725e      	strb	r6, [r3, #9]
    49cc:	0c16      	lsrs	r6, r2, #16
    49ce:	729e      	strb	r6, [r3, #10]
    49d0:	0e12      	lsrs	r2, r2, #24
    49d2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    49d4:	001a      	movs	r2, r3
    49d6:	324d      	adds	r2, #77	; 0x4d
    49d8:	32ff      	adds	r2, #255	; 0xff
    49da:	741a      	strb	r2, [r3, #16]
    49dc:	0a16      	lsrs	r6, r2, #8
    49de:	745e      	strb	r6, [r3, #17]
    49e0:	0c16      	lsrs	r6, r2, #16
    49e2:	749e      	strb	r6, [r3, #18]
    49e4:	0e12      	lsrs	r2, r2, #24
    49e6:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    49e8:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    49ea:	2202      	movs	r2, #2
    49ec:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    49ee:	3a12      	subs	r2, #18
    49f0:	751a      	strb	r2, [r3, #20]
    49f2:	3a70      	subs	r2, #112	; 0x70
    49f4:	755a      	strb	r2, [r3, #21]
    49f6:	3226      	adds	r2, #38	; 0x26
    49f8:	759a      	strb	r2, [r3, #22]
    49fa:	328d      	adds	r2, #141	; 0x8d
    49fc:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    49fe:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    4a00:	761d      	strb	r5, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    4a02:	3a2c      	subs	r2, #44	; 0x2c
    4a04:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    4a06:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4a08:	24aa      	movs	r4, #170	; 0xaa
    4a0a:	34ff      	adds	r4, #255	; 0xff
    4a0c:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 7;
    4a0e:	3121      	adds	r1, #33	; 0x21
    4a10:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 10;
    4a12:	391a      	subs	r1, #26
    4a14:	321e      	adds	r2, #30
    4a16:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 30;
    4a18:	3114      	adds	r1, #20
    4a1a:	3a05      	subs	r2, #5
    4a1c:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4a1e:	3206      	adds	r2, #6
    4a20:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4a22:	3ca0      	subs	r4, #160	; 0xa0
    4a24:	3cff      	subs	r4, #255	; 0xff
	if(ismBand == ISM_IND865)
    4a26:	280f      	cmp	r0, #15
    4a28:	d008      	beq.n	4a3c <LORAReg_InitIN+0xb8>
    LORAREG_InitGetAttrFnPtrsIN();
    4a2a:	4b39      	ldr	r3, [pc, #228]	; (4b10 <LORAReg_InitIN+0x18c>)
    4a2c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    4a2e:	4b39      	ldr	r3, [pc, #228]	; (4b14 <LORAReg_InitIN+0x190>)
    4a30:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    4a32:	4b39      	ldr	r3, [pc, #228]	; (4b18 <LORAReg_InitIN+0x194>)
    4a34:	4798      	blx	r3
}
    4a36:	0020      	movs	r0, r4
    4a38:	b006      	add	sp, #24
    4a3a:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    4a3c:	001c      	movs	r4, r3
    4a3e:	0018      	movs	r0, r3
    4a40:	306c      	adds	r0, #108	; 0x6c
    4a42:	3a20      	subs	r2, #32
    4a44:	4935      	ldr	r1, [pc, #212]	; (4b1c <LORAReg_InitIN+0x198>)
    4a46:	4d36      	ldr	r5, [pc, #216]	; (4b20 <LORAReg_InitIN+0x19c>)
    4a48:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    4a4a:	0020      	movs	r0, r4
    4a4c:	308c      	adds	r0, #140	; 0x8c
    4a4e:	2224      	movs	r2, #36	; 0x24
    4a50:	4934      	ldr	r1, [pc, #208]	; (4b24 <LORAReg_InitIN+0x1a0>)
    4a52:	47a8      	blx	r5
    4a54:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4a56:	492d      	ldr	r1, [pc, #180]	; (4b0c <LORAReg_InitIN+0x188>)
    4a58:	24ff      	movs	r4, #255	; 0xff
    4a5a:	790b      	ldrb	r3, [r1, #4]
    4a5c:	794a      	ldrb	r2, [r1, #5]
    4a5e:	0212      	lsls	r2, r2, #8
    4a60:	431a      	orrs	r2, r3
    4a62:	798b      	ldrb	r3, [r1, #6]
    4a64:	041b      	lsls	r3, r3, #16
    4a66:	431a      	orrs	r2, r3
    4a68:	79cb      	ldrb	r3, [r1, #7]
    4a6a:	061b      	lsls	r3, r3, #24
    4a6c:	4313      	orrs	r3, r2
    4a6e:	181b      	adds	r3, r3, r0
    4a70:	705c      	strb	r4, [r3, #1]
    4a72:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    4a74:	2820      	cmp	r0, #32
    4a76:	d1f0      	bne.n	4a5a <LORAReg_InitIN+0xd6>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = MAX_EIRP_IN;
    4a78:	4c24      	ldr	r4, [pc, #144]	; (4b0c <LORAReg_InitIN+0x188>)
    4a7a:	221e      	movs	r2, #30
    4a7c:	23d5      	movs	r3, #213	; 0xd5
    4a7e:	005b      	lsls	r3, r3, #1
    4a80:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    4a82:	7820      	ldrb	r0, [r4, #0]
    4a84:	7863      	ldrb	r3, [r4, #1]
    4a86:	021b      	lsls	r3, r3, #8
    4a88:	4303      	orrs	r3, r0
    4a8a:	78a0      	ldrb	r0, [r4, #2]
    4a8c:	0400      	lsls	r0, r0, #16
    4a8e:	4303      	orrs	r3, r0
    4a90:	78e0      	ldrb	r0, [r4, #3]
    4a92:	0600      	lsls	r0, r0, #24
    4a94:	4318      	orrs	r0, r3
    4a96:	3222      	adds	r2, #34	; 0x22
    4a98:	4923      	ldr	r1, [pc, #140]	; (4b28 <LORAReg_InitIN+0x1a4>)
    4a9a:	4b21      	ldr	r3, [pc, #132]	; (4b20 <LORAReg_InitIN+0x19c>)
    4a9c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    4a9e:	2306      	movs	r3, #6
    4aa0:	2106      	movs	r1, #6
    4aa2:	22fa      	movs	r2, #250	; 0xfa
    4aa4:	0052      	lsls	r2, r2, #1
    4aa6:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4aa8:	2100      	movs	r1, #0
    4aaa:	22f6      	movs	r2, #246	; 0xf6
    4aac:	32ff      	adds	r2, #255	; 0xff
    4aae:	54a1      	strb	r1, [r4, r2]
    4ab0:	0022      	movs	r2, r4
    4ab2:	32f6      	adds	r2, #246	; 0xf6
    4ab4:	32ff      	adds	r2, #255	; 0xff
    4ab6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    4ab8:	22f8      	movs	r2, #248	; 0xf8
    4aba:	32ff      	adds	r2, #255	; 0xff
    4abc:	54a1      	strb	r1, [r4, r2]
    4abe:	0022      	movs	r2, r4
    4ac0:	32f8      	adds	r2, #248	; 0xf8
    4ac2:	32ff      	adds	r2, #255	; 0xff
    4ac4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    4ac6:	3101      	adds	r1, #1
    4ac8:	22fa      	movs	r2, #250	; 0xfa
    4aca:	32ff      	adds	r2, #255	; 0xff
    4acc:	54a1      	strb	r1, [r4, r2]
    4ace:	0022      	movs	r2, r4
    4ad0:	32fa      	adds	r2, #250	; 0xfa
    4ad2:	32ff      	adds	r2, #255	; 0xff
    4ad4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    4ad6:	2200      	movs	r2, #0
    4ad8:	23fc      	movs	r3, #252	; 0xfc
    4ada:	33ff      	adds	r3, #255	; 0xff
    4adc:	54e2      	strb	r2, [r4, r3]
    4ade:	0023      	movs	r3, r4
    4ae0:	33fc      	adds	r3, #252	; 0xfc
    4ae2:	33ff      	adds	r3, #255	; 0xff
    4ae4:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    4ae6:	23fe      	movs	r3, #254	; 0xfe
    4ae8:	33ff      	adds	r3, #255	; 0xff
    4aea:	54e2      	strb	r2, [r4, r3]
    4aec:	18e4      	adds	r4, r4, r3
    4aee:	2300      	movs	r3, #0
    4af0:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    4af2:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    4af4:	3202      	adds	r2, #2
    4af6:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    4af8:	4a0c      	ldr	r2, [pc, #48]	; (4b2c <LORAReg_InitIN+0x1a8>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    4afa:	9200      	str	r2, [sp, #0]
    4afc:	490c      	ldr	r1, [pc, #48]	; (4b30 <LORAReg_InitIN+0x1ac>)
    4afe:	9a03      	ldr	r2, [sp, #12]
    4b00:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <LORAReg_InitIN+0x1b0>)
    4b02:	2006      	movs	r0, #6
    4b04:	4c0c      	ldr	r4, [pc, #48]	; (4b38 <LORAReg_InitIN+0x1b4>)
    4b06:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4b08:	2408      	movs	r4, #8
    4b0a:	e78e      	b.n	4a2a <LORAReg_InitIN+0xa6>
    4b0c:	200013e0 	.word	0x200013e0
    4b10:	00008251 	.word	0x00008251
    4b14:	000087a9 	.word	0x000087a9
    4b18:	000089b5 	.word	0x000089b5
    4b1c:	0001c724 	.word	0x0001c724
    4b20:	000158c9 	.word	0x000158c9
    4b24:	0001c700 	.word	0x0001c700
    4b28:	0001c72c 	.word	0x0001c72c
    4b2c:	00004981 	.word	0x00004981
    4b30:	200011cc 	.word	0x200011cc
    4b34:	0001c76c 	.word	0x0001c76c
    4b38:	000090dd 	.word	0x000090dd

00004b3c <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    4b3c:	4770      	bx	lr
	...

00004b40 <LORAReg_InitJP>:
{
    4b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b42:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    4b44:	4b7d      	ldr	r3, [pc, #500]	; (4d3c <LORAReg_InitJP+0x1fc>)
    4b46:	2203      	movs	r2, #3
    4b48:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    4b4a:	2110      	movs	r1, #16
    4b4c:	321f      	adds	r2, #31
    4b4e:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    4b50:	3a21      	subs	r2, #33	; 0x21
    4b52:	2421      	movs	r4, #33	; 0x21
    4b54:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    4b56:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4b58:	001a      	movs	r2, r3
    4b5a:	326c      	adds	r2, #108	; 0x6c
    4b5c:	711a      	strb	r2, [r3, #4]
    4b5e:	0a14      	lsrs	r4, r2, #8
    4b60:	715c      	strb	r4, [r3, #5]
    4b62:	0c14      	lsrs	r4, r2, #16
    4b64:	719c      	strb	r4, [r3, #6]
    4b66:	0e12      	lsrs	r2, r2, #24
    4b68:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4b6a:	001a      	movs	r2, r3
    4b6c:	322c      	adds	r2, #44	; 0x2c
    4b6e:	701a      	strb	r2, [r3, #0]
    4b70:	0a14      	lsrs	r4, r2, #8
    4b72:	705c      	strb	r4, [r3, #1]
    4b74:	0c14      	lsrs	r4, r2, #16
    4b76:	709c      	strb	r4, [r3, #2]
    4b78:	0e12      	lsrs	r2, r2, #24
    4b7a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4b7c:	001a      	movs	r2, r3
    4b7e:	32ad      	adds	r2, #173	; 0xad
    4b80:	32ff      	adds	r2, #255	; 0xff
    4b82:	731a      	strb	r2, [r3, #12]
    4b84:	0a14      	lsrs	r4, r2, #8
    4b86:	735c      	strb	r4, [r3, #13]
    4b88:	0c14      	lsrs	r4, r2, #16
    4b8a:	739c      	strb	r4, [r3, #14]
    4b8c:	0e12      	lsrs	r2, r2, #24
    4b8e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4b90:	001a      	movs	r2, r3
    4b92:	328c      	adds	r2, #140	; 0x8c
    4b94:	721a      	strb	r2, [r3, #8]
    4b96:	0a14      	lsrs	r4, r2, #8
    4b98:	725c      	strb	r4, [r3, #9]
    4b9a:	0c14      	lsrs	r4, r2, #16
    4b9c:	729c      	strb	r4, [r3, #10]
    4b9e:	0e12      	lsrs	r2, r2, #24
    4ba0:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4ba2:	001a      	movs	r2, r3
    4ba4:	324d      	adds	r2, #77	; 0x4d
    4ba6:	32ff      	adds	r2, #255	; 0xff
    4ba8:	741a      	strb	r2, [r3, #16]
    4baa:	0a14      	lsrs	r4, r2, #8
    4bac:	745c      	strb	r4, [r3, #17]
    4bae:	0c14      	lsrs	r4, r2, #16
    4bb0:	749c      	strb	r4, [r3, #18]
    4bb2:	0e12      	lsrs	r2, r2, #24
    4bb4:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    4bb6:	2202      	movs	r2, #2
    4bb8:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    4bba:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    4bbc:	2400      	movs	r4, #0
    4bbe:	751c      	strb	r4, [r3, #20]
    4bc0:	3c16      	subs	r4, #22
    4bc2:	755c      	strb	r4, [r3, #21]
    4bc4:	341c      	adds	r4, #28
    4bc6:	759c      	strb	r4, [r3, #22]
    4bc8:	3431      	adds	r4, #49	; 0x31
    4bca:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    4bcc:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    4bce:	3c23      	subs	r4, #35	; 0x23
    4bd0:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    4bd2:	3c0d      	subs	r4, #13
    4bd4:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    4bd6:	2500      	movs	r5, #0
    4bd8:	775d      	strb	r5, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    4bda:	260a      	movs	r6, #10
    4bdc:	35a7      	adds	r5, #167	; 0xa7
    4bde:	35ff      	adds	r5, #255	; 0xff
    4be0:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    4be2:	36a6      	adds	r6, #166	; 0xa6
    4be4:	25a8      	movs	r5, #168	; 0xa8
    4be6:	35ff      	adds	r5, #255	; 0xff
    4be8:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    4bea:	3eab      	subs	r6, #171	; 0xab
    4bec:	3501      	adds	r5, #1
    4bee:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    4bf0:	25aa      	movs	r5, #170	; 0xaa
    4bf2:	35ff      	adds	r5, #255	; 0xff
    4bf4:	555a      	strb	r2, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    4bf6:	3222      	adds	r2, #34	; 0x22
    4bf8:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    4bfa:	3201      	adds	r2, #1
    4bfc:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 16;
    4bfe:	3a05      	subs	r2, #5
    4c00:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4c02:	4a4f      	ldr	r2, [pc, #316]	; (4d40 <LORAReg_InitJP+0x200>)
    4c04:	7814      	ldrb	r4, [r2, #0]
    4c06:	2196      	movs	r1, #150	; 0x96
    4c08:	31ff      	adds	r1, #255	; 0xff
    4c0a:	545c      	strb	r4, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    4c0c:	7851      	ldrb	r1, [r2, #1]
    4c0e:	22a8      	movs	r2, #168	; 0xa8
    4c10:	0052      	lsls	r2, r2, #1
    4c12:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4c14:	3a2b      	subs	r2, #43	; 0x2b
    4c16:	3aff      	subs	r2, #255	; 0xff
    4c18:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4c1a:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    4c1c:	2805      	cmp	r0, #5
    4c1e:	d008      	beq.n	4c32 <LORAReg_InitJP+0xf2>
    LORAREG_InitGetAttrFnPtrsJP();
    4c20:	4b48      	ldr	r3, [pc, #288]	; (4d44 <LORAReg_InitJP+0x204>)
    4c22:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    4c24:	4b48      	ldr	r3, [pc, #288]	; (4d48 <LORAReg_InitJP+0x208>)
    4c26:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    4c28:	4b48      	ldr	r3, [pc, #288]	; (4d4c <LORAReg_InitJP+0x20c>)
    4c2a:	4798      	blx	r3
}
    4c2c:	0020      	movs	r0, r4
    4c2e:	b007      	add	sp, #28
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    4c32:	001c      	movs	r4, r3
    4c34:	0018      	movs	r0, r3
    4c36:	306c      	adds	r0, #108	; 0x6c
    4c38:	3a22      	subs	r2, #34	; 0x22
    4c3a:	4945      	ldr	r1, [pc, #276]	; (4d50 <LORAReg_InitJP+0x210>)
    4c3c:	4d45      	ldr	r5, [pc, #276]	; (4d54 <LORAReg_InitJP+0x214>)
    4c3e:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    4c40:	0020      	movs	r0, r4
    4c42:	308c      	adds	r0, #140	; 0x8c
    4c44:	2218      	movs	r2, #24
    4c46:	4944      	ldr	r1, [pc, #272]	; (4d58 <LORAReg_InitJP+0x218>)
    4c48:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    4c4a:	0020      	movs	r0, r4
    4c4c:	30ad      	adds	r0, #173	; 0xad
    4c4e:	30ff      	adds	r0, #255	; 0xff
    4c50:	220c      	movs	r2, #12
    4c52:	4942      	ldr	r1, [pc, #264]	; (4d5c <LORAReg_InitJP+0x21c>)
    4c54:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    4c56:	0020      	movs	r0, r4
    4c58:	3097      	adds	r0, #151	; 0x97
    4c5a:	30ff      	adds	r0, #255	; 0xff
    4c5c:	2202      	movs	r2, #2
    4c5e:	4940      	ldr	r1, [pc, #256]	; (4d60 <LORAReg_InitJP+0x220>)
    4c60:	47a8      	blx	r5
    4c62:	2302      	movs	r3, #2
    4c64:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4c66:	4935      	ldr	r1, [pc, #212]	; (4d3c <LORAReg_InitJP+0x1fc>)
    4c68:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4c6a:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    4c6c:	361d      	adds	r6, #29
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4c6e:	7908      	ldrb	r0, [r1, #4]
    4c70:	794c      	ldrb	r4, [r1, #5]
    4c72:	0224      	lsls	r4, r4, #8
    4c74:	4304      	orrs	r4, r0
    4c76:	7988      	ldrb	r0, [r1, #6]
    4c78:	0400      	lsls	r0, r0, #16
    4c7a:	4304      	orrs	r4, r0
    4c7c:	79c8      	ldrb	r0, [r1, #7]
    4c7e:	0600      	lsls	r0, r0, #24
    4c80:	4320      	orrs	r0, r4
    4c82:	0054      	lsls	r4, r2, #1
    4c84:	1820      	adds	r0, r4, r0
    4c86:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4c88:	3352      	adds	r3, #82	; 0x52
    4c8a:	009b      	lsls	r3, r3, #2
    4c8c:	18cb      	adds	r3, r1, r3
    4c8e:	725d      	strb	r5, [r3, #9]
    4c90:	729d      	strb	r5, [r3, #10]
    4c92:	72dd      	strb	r5, [r3, #11]
    4c94:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    4c96:	3201      	adds	r2, #1
    4c98:	b2d2      	uxtb	r2, r2
    4c9a:	0013      	movs	r3, r2
    4c9c:	5788      	ldrsb	r0, [r1, r6]
    4c9e:	4282      	cmp	r2, r0
    4ca0:	dbe5      	blt.n	4c6e <LORAReg_InitJP+0x12e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4ca2:	4c26      	ldr	r4, [pc, #152]	; (4d3c <LORAReg_InitJP+0x1fc>)
    4ca4:	22ff      	movs	r2, #255	; 0xff
    4ca6:	2327      	movs	r3, #39	; 0x27
    4ca8:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    4caa:	3aef      	subs	r2, #239	; 0xef
    4cac:	3384      	adds	r3, #132	; 0x84
    4cae:	33ff      	adds	r3, #255	; 0xff
    4cb0:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    4cb2:	7820      	ldrb	r0, [r4, #0]
    4cb4:	7863      	ldrb	r3, [r4, #1]
    4cb6:	021b      	lsls	r3, r3, #8
    4cb8:	4303      	orrs	r3, r0
    4cba:	78a0      	ldrb	r0, [r4, #2]
    4cbc:	0400      	lsls	r0, r0, #16
    4cbe:	4303      	orrs	r3, r0
    4cc0:	78e0      	ldrb	r0, [r4, #3]
    4cc2:	0600      	lsls	r0, r0, #24
    4cc4:	4318      	orrs	r0, r3
    4cc6:	3230      	adds	r2, #48	; 0x30
    4cc8:	4926      	ldr	r1, [pc, #152]	; (4d64 <LORAReg_InitJP+0x224>)
    4cca:	4b22      	ldr	r3, [pc, #136]	; (4d54 <LORAReg_InitJP+0x214>)
    4ccc:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    4cce:	2307      	movs	r3, #7
    4cd0:	2107      	movs	r1, #7
    4cd2:	22fa      	movs	r2, #250	; 0xfa
    4cd4:	0052      	lsls	r2, r2, #1
    4cd6:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4cd8:	2100      	movs	r1, #0
    4cda:	22f6      	movs	r2, #246	; 0xf6
    4cdc:	32ff      	adds	r2, #255	; 0xff
    4cde:	54a1      	strb	r1, [r4, r2]
    4ce0:	0022      	movs	r2, r4
    4ce2:	32f6      	adds	r2, #246	; 0xf6
    4ce4:	32ff      	adds	r2, #255	; 0xff
    4ce6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    4ce8:	22f8      	movs	r2, #248	; 0xf8
    4cea:	32ff      	adds	r2, #255	; 0xff
    4cec:	54a1      	strb	r1, [r4, r2]
    4cee:	0022      	movs	r2, r4
    4cf0:	32f8      	adds	r2, #248	; 0xf8
    4cf2:	32ff      	adds	r2, #255	; 0xff
    4cf4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    4cf6:	3101      	adds	r1, #1
    4cf8:	22fa      	movs	r2, #250	; 0xfa
    4cfa:	32ff      	adds	r2, #255	; 0xff
    4cfc:	54a1      	strb	r1, [r4, r2]
    4cfe:	0022      	movs	r2, r4
    4d00:	32fa      	adds	r2, #250	; 0xfa
    4d02:	32ff      	adds	r2, #255	; 0xff
    4d04:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    4d06:	2200      	movs	r2, #0
    4d08:	23fc      	movs	r3, #252	; 0xfc
    4d0a:	33ff      	adds	r3, #255	; 0xff
    4d0c:	54e2      	strb	r2, [r4, r3]
    4d0e:	0023      	movs	r3, r4
    4d10:	33fc      	adds	r3, #252	; 0xfc
    4d12:	33ff      	adds	r3, #255	; 0xff
    4d14:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    4d16:	23fe      	movs	r3, #254	; 0xfe
    4d18:	33ff      	adds	r3, #255	; 0xff
    4d1a:	54e2      	strb	r2, [r4, r3]
    4d1c:	18e4      	adds	r4, r4, r3
    4d1e:	2300      	movs	r3, #0
    4d20:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    4d22:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    4d24:	3202      	adds	r2, #2
    4d26:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    4d28:	4a0f      	ldr	r2, [pc, #60]	; (4d68 <LORAReg_InitJP+0x228>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    4d2a:	9200      	str	r2, [sp, #0]
    4d2c:	490f      	ldr	r1, [pc, #60]	; (4d6c <LORAReg_InitJP+0x22c>)
    4d2e:	9a03      	ldr	r2, [sp, #12]
    4d30:	4b0f      	ldr	r3, [pc, #60]	; (4d70 <LORAReg_InitJP+0x230>)
    4d32:	2007      	movs	r0, #7
    4d34:	4c0f      	ldr	r4, [pc, #60]	; (4d74 <LORAReg_InitJP+0x234>)
    4d36:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4d38:	2408      	movs	r4, #8
    4d3a:	e771      	b.n	4c20 <LORAReg_InitJP+0xe0>
    4d3c:	200013e0 	.word	0x200013e0
    4d40:	200013dc 	.word	0x200013dc
    4d44:	0000837d 	.word	0x0000837d
    4d48:	00008811 	.word	0x00008811
    4d4c:	000089f1 	.word	0x000089f1
    4d50:	0001c794 	.word	0x0001c794
    4d54:	000158c9 	.word	0x000158c9
    4d58:	0001c77c 	.word	0x0001c77c
    4d5c:	0001c7dc 	.word	0x0001c7dc
    4d60:	0001c7d8 	.word	0x0001c7d8
    4d64:	0001c798 	.word	0x0001c798
    4d68:	00004b3d 	.word	0x00004b3d
    4d6c:	200011d0 	.word	0x200011d0
    4d70:	0001c7e8 	.word	0x0001c7e8
    4d74:	000090dd 	.word	0x000090dd

00004d78 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    4d78:	4770      	bx	lr
	...

00004d7c <LORAReg_InitKR>:
{
    4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d7e:	46d6      	mov	lr, sl
    4d80:	464f      	mov	r7, r9
    4d82:	4646      	mov	r6, r8
    4d84:	b5c0      	push	{r6, r7, lr}
    4d86:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    4d88:	4b93      	ldr	r3, [pc, #588]	; (4fd8 <LORAReg_InitKR+0x25c>)
    4d8a:	2103      	movs	r1, #3
    4d8c:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    4d8e:	2410      	movs	r4, #16
    4d90:	2222      	movs	r2, #34	; 0x22
    4d92:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    4d94:	3a21      	subs	r2, #33	; 0x21
    4d96:	3411      	adds	r4, #17
    4d98:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    4d9a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4d9c:	001a      	movs	r2, r3
    4d9e:	326c      	adds	r2, #108	; 0x6c
    4da0:	2400      	movs	r4, #0
    4da2:	711a      	strb	r2, [r3, #4]
    4da4:	0a15      	lsrs	r5, r2, #8
    4da6:	715d      	strb	r5, [r3, #5]
    4da8:	0c15      	lsrs	r5, r2, #16
    4daa:	719d      	strb	r5, [r3, #6]
    4dac:	0e12      	lsrs	r2, r2, #24
    4dae:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4db0:	001a      	movs	r2, r3
    4db2:	322c      	adds	r2, #44	; 0x2c
    4db4:	701a      	strb	r2, [r3, #0]
    4db6:	0a15      	lsrs	r5, r2, #8
    4db8:	705d      	strb	r5, [r3, #1]
    4dba:	0c15      	lsrs	r5, r2, #16
    4dbc:	709d      	strb	r5, [r3, #2]
    4dbe:	0e12      	lsrs	r2, r2, #24
    4dc0:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4dc2:	001a      	movs	r2, r3
    4dc4:	328c      	adds	r2, #140	; 0x8c
    4dc6:	721a      	strb	r2, [r3, #8]
    4dc8:	0a15      	lsrs	r5, r2, #8
    4dca:	725d      	strb	r5, [r3, #9]
    4dcc:	0c15      	lsrs	r5, r2, #16
    4dce:	729d      	strb	r5, [r3, #10]
    4dd0:	0e12      	lsrs	r2, r2, #24
    4dd2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4dd4:	001a      	movs	r2, r3
    4dd6:	324d      	adds	r2, #77	; 0x4d
    4dd8:	32ff      	adds	r2, #255	; 0xff
    4dda:	741a      	strb	r2, [r3, #16]
    4ddc:	0a15      	lsrs	r5, r2, #8
    4dde:	745d      	strb	r5, [r3, #17]
    4de0:	0c15      	lsrs	r5, r2, #16
    4de2:	749d      	strb	r5, [r3, #18]
    4de4:	0e12      	lsrs	r2, r2, #24
    4de6:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    4de8:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    4dea:	76dc      	strb	r4, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    4dec:	2220      	movs	r2, #32
    4dee:	4252      	negs	r2, r2
    4df0:	751a      	strb	r2, [r3, #20]
    4df2:	3233      	adds	r2, #51	; 0x33
    4df4:	755a      	strb	r2, [r3, #21]
    4df6:	3a20      	subs	r2, #32
    4df8:	759a      	strb	r2, [r3, #22]
    4dfa:	3243      	adds	r2, #67	; 0x43
    4dfc:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    4dfe:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    4e00:	3a22      	subs	r2, #34	; 0x22
    4e02:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    4e04:	3a0f      	subs	r2, #15
    4e06:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    4e08:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    4e0a:	340a      	adds	r4, #10
    4e0c:	25d3      	movs	r5, #211	; 0xd3
    4e0e:	006d      	lsls	r5, r5, #1
    4e10:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    4e12:	26bf      	movs	r6, #191	; 0xbf
    4e14:	25a8      	movs	r5, #168	; 0xa8
    4e16:	35ff      	adds	r5, #255	; 0xff
    4e18:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    4e1a:	3501      	adds	r5, #1
    4e1c:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4e1e:	24aa      	movs	r4, #170	; 0xaa
    4e20:	34ff      	adds	r4, #255	; 0xff
    4e22:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 5;
    4e24:	3121      	adds	r1, #33	; 0x21
    4e26:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    4e28:	391d      	subs	r1, #29
    4e2a:	3220      	adds	r2, #32
    4e2c:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 14;
    4e2e:	3107      	adds	r1, #7
    4e30:	3a05      	subs	r2, #5
    4e32:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4e34:	4a69      	ldr	r2, [pc, #420]	; (4fdc <LORAReg_InitKR+0x260>)
    4e36:	7811      	ldrb	r1, [r2, #0]
    4e38:	2296      	movs	r2, #150	; 0x96
    4e3a:	32ff      	adds	r2, #255	; 0xff
    4e3c:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4e3e:	3a70      	subs	r2, #112	; 0x70
    4e40:	3aff      	subs	r2, #255	; 0xff
    4e42:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    4e44:	3ce1      	subs	r4, #225	; 0xe1
	if(ismBand == ISM_KR920)
    4e46:	2804      	cmp	r0, #4
    4e48:	d00c      	beq.n	4e64 <LORAReg_InitKR+0xe8>
    LORAREG_InitGetAttrFnPtrsKR();
    4e4a:	4b65      	ldr	r3, [pc, #404]	; (4fe0 <LORAReg_InitKR+0x264>)
    4e4c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    4e4e:	4b65      	ldr	r3, [pc, #404]	; (4fe4 <LORAReg_InitKR+0x268>)
    4e50:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    4e52:	4b65      	ldr	r3, [pc, #404]	; (4fe8 <LORAReg_InitKR+0x26c>)
    4e54:	4798      	blx	r3
}
    4e56:	0020      	movs	r0, r4
    4e58:	b006      	add	sp, #24
    4e5a:	bc1c      	pop	{r2, r3, r4}
    4e5c:	4690      	mov	r8, r2
    4e5e:	4699      	mov	r9, r3
    4e60:	46a2      	mov	sl, r4
    4e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    4e64:	001c      	movs	r4, r3
    4e66:	0018      	movs	r0, r3
    4e68:	306c      	adds	r0, #108	; 0x6c
    4e6a:	3a20      	subs	r2, #32
    4e6c:	495f      	ldr	r1, [pc, #380]	; (4fec <LORAReg_InitKR+0x270>)
    4e6e:	4d60      	ldr	r5, [pc, #384]	; (4ff0 <LORAReg_InitKR+0x274>)
    4e70:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    4e72:	0020      	movs	r0, r4
    4e74:	308c      	adds	r0, #140	; 0x8c
    4e76:	2224      	movs	r2, #36	; 0x24
    4e78:	495e      	ldr	r1, [pc, #376]	; (4ff4 <LORAReg_InitKR+0x278>)
    4e7a:	47a8      	blx	r5
    4e7c:	2103      	movs	r1, #3
    4e7e:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4e80:	4b55      	ldr	r3, [pc, #340]	; (4fd8 <LORAReg_InitKR+0x25c>)
    4e82:	3640      	adds	r6, #64	; 0x40
		RegParams.pChParams[i].status = DISABLED;
    4e84:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4e86:	22d5      	movs	r2, #213	; 0xd5
    4e88:	0052      	lsls	r2, r2, #1
    4e8a:	4690      	mov	r8, r2
    4e8c:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    4e8e:	3a89      	subs	r2, #137	; 0x89
    4e90:	3aff      	subs	r2, #255	; 0xff
    4e92:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4e94:	0042      	lsls	r2, r0, #1
    4e96:	791c      	ldrb	r4, [r3, #4]
    4e98:	46a1      	mov	r9, r4
    4e9a:	795c      	ldrb	r4, [r3, #5]
    4e9c:	0224      	lsls	r4, r4, #8
    4e9e:	464f      	mov	r7, r9
    4ea0:	4327      	orrs	r7, r4
    4ea2:	799c      	ldrb	r4, [r3, #6]
    4ea4:	0424      	lsls	r4, r4, #16
    4ea6:	4327      	orrs	r7, r4
    4ea8:	79dc      	ldrb	r4, [r3, #7]
    4eaa:	0624      	lsls	r4, r4, #24
    4eac:	433c      	orrs	r4, r7
    4eae:	18a4      	adds	r4, r4, r2
    4eb0:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    4eb2:	791c      	ldrb	r4, [r3, #4]
    4eb4:	46a1      	mov	r9, r4
    4eb6:	795c      	ldrb	r4, [r3, #5]
    4eb8:	0224      	lsls	r4, r4, #8
    4eba:	464f      	mov	r7, r9
    4ebc:	4327      	orrs	r7, r4
    4ebe:	799c      	ldrb	r4, [r3, #6]
    4ec0:	0424      	lsls	r4, r4, #16
    4ec2:	4327      	orrs	r7, r4
    4ec4:	79dc      	ldrb	r4, [r3, #7]
    4ec6:	0624      	lsls	r4, r4, #24
    4ec8:	433c      	orrs	r4, r7
    4eca:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    4ecc:	7a1c      	ldrb	r4, [r3, #8]
    4ece:	46a1      	mov	r9, r4
    4ed0:	7a5c      	ldrb	r4, [r3, #9]
    4ed2:	0224      	lsls	r4, r4, #8
    4ed4:	464f      	mov	r7, r9
    4ed6:	4327      	orrs	r7, r4
    4ed8:	7a9c      	ldrb	r4, [r3, #10]
    4eda:	0424      	lsls	r4, r4, #16
    4edc:	4327      	orrs	r7, r4
    4ede:	7adc      	ldrb	r4, [r3, #11]
    4ee0:	0624      	lsls	r4, r4, #24
    4ee2:	433c      	orrs	r4, r7
    4ee4:	1812      	adds	r2, r2, r0
    4ee6:	0092      	lsls	r2, r2, #2
    4ee8:	1912      	adds	r2, r2, r4
    4eea:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4eec:	4642      	mov	r2, r8
    4eee:	4664      	mov	r4, ip
    4ef0:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4ef2:	3152      	adds	r1, #82	; 0x52
    4ef4:	0089      	lsls	r1, r1, #2
    4ef6:	1859      	adds	r1, r3, r1
    4ef8:	724d      	strb	r5, [r1, #9]
    4efa:	728d      	strb	r5, [r1, #10]
    4efc:	72cd      	strb	r5, [r1, #11]
    4efe:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    4f00:	3001      	adds	r0, #1
    4f02:	b2c0      	uxtb	r0, r0
    4f04:	0001      	movs	r1, r0
    4f06:	4652      	mov	r2, sl
    4f08:	569a      	ldrsb	r2, [r3, r2]
    4f0a:	4290      	cmp	r0, r2
    4f0c:	dbc2      	blt.n	4e94 <LORAReg_InitKR+0x118>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4f0e:	4c32      	ldr	r4, [pc, #200]	; (4fd8 <LORAReg_InitKR+0x25c>)
    4f10:	22ff      	movs	r2, #255	; 0xff
    4f12:	2327      	movs	r3, #39	; 0x27
    4f14:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    4f16:	7820      	ldrb	r0, [r4, #0]
    4f18:	7863      	ldrb	r3, [r4, #1]
    4f1a:	021b      	lsls	r3, r3, #8
    4f1c:	4303      	orrs	r3, r0
    4f1e:	78a0      	ldrb	r0, [r4, #2]
    4f20:	0400      	lsls	r0, r0, #16
    4f22:	4303      	orrs	r3, r0
    4f24:	78e0      	ldrb	r0, [r4, #3]
    4f26:	0600      	lsls	r0, r0, #24
    4f28:	4318      	orrs	r0, r3
    4f2a:	3acf      	subs	r2, #207	; 0xcf
    4f2c:	4932      	ldr	r1, [pc, #200]	; (4ff8 <LORAReg_InitKR+0x27c>)
    4f2e:	4b30      	ldr	r3, [pc, #192]	; (4ff0 <LORAReg_InitKR+0x274>)
    4f30:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4f32:	7f63      	ldrb	r3, [r4, #29]
    4f34:	2b00      	cmp	r3, #0
    4f36:	dd17      	ble.n	4f68 <LORAReg_InitKR+0x1ec>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    4f38:	4a27      	ldr	r2, [pc, #156]	; (4fd8 <LORAReg_InitKR+0x25c>)
    4f3a:	7811      	ldrb	r1, [r2, #0]
    4f3c:	7853      	ldrb	r3, [r2, #1]
    4f3e:	021b      	lsls	r3, r3, #8
    4f40:	430b      	orrs	r3, r1
    4f42:	7891      	ldrb	r1, [r2, #2]
    4f44:	0409      	lsls	r1, r1, #16
    4f46:	430b      	orrs	r3, r1
    4f48:	78d1      	ldrb	r1, [r2, #3]
    4f4a:	0609      	lsls	r1, r1, #24
    4f4c:	4319      	orrs	r1, r3
    4f4e:	2300      	movs	r3, #0
    4f50:	2501      	movs	r5, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4f52:	2407      	movs	r4, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4f54:	0010      	movs	r0, r2
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    4f56:	00da      	lsls	r2, r3, #3
    4f58:	188a      	adds	r2, r1, r2
    4f5a:	71d5      	strb	r5, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    4f5c:	7194      	strb	r4, [r2, #6]
    4f5e:	3301      	adds	r3, #1
    4f60:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    4f62:	7f42      	ldrb	r2, [r0, #29]
    4f64:	4293      	cmp	r3, r2
    4f66:	dbf6      	blt.n	4f56 <LORAReg_InitKR+0x1da>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    4f68:	4b1b      	ldr	r3, [pc, #108]	; (4fd8 <LORAReg_InitKR+0x25c>)
    4f6a:	2205      	movs	r2, #5
    4f6c:	2005      	movs	r0, #5
    4f6e:	21fa      	movs	r1, #250	; 0xfa
    4f70:	0049      	lsls	r1, r1, #1
    4f72:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4f74:	2000      	movs	r0, #0
    4f76:	21f6      	movs	r1, #246	; 0xf6
    4f78:	31ff      	adds	r1, #255	; 0xff
    4f7a:	5458      	strb	r0, [r3, r1]
    4f7c:	0019      	movs	r1, r3
    4f7e:	31f6      	adds	r1, #246	; 0xf6
    4f80:	31ff      	adds	r1, #255	; 0xff
    4f82:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    4f84:	21f8      	movs	r1, #248	; 0xf8
    4f86:	31ff      	adds	r1, #255	; 0xff
    4f88:	5458      	strb	r0, [r3, r1]
    4f8a:	0019      	movs	r1, r3
    4f8c:	31f8      	adds	r1, #248	; 0xf8
    4f8e:	31ff      	adds	r1, #255	; 0xff
    4f90:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    4f92:	3001      	adds	r0, #1
    4f94:	21fa      	movs	r1, #250	; 0xfa
    4f96:	31ff      	adds	r1, #255	; 0xff
    4f98:	5458      	strb	r0, [r3, r1]
    4f9a:	0019      	movs	r1, r3
    4f9c:	31fa      	adds	r1, #250	; 0xfa
    4f9e:	31ff      	adds	r1, #255	; 0xff
    4fa0:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    4fa2:	2100      	movs	r1, #0
    4fa4:	22fc      	movs	r2, #252	; 0xfc
    4fa6:	32ff      	adds	r2, #255	; 0xff
    4fa8:	5499      	strb	r1, [r3, r2]
    4faa:	001a      	movs	r2, r3
    4fac:	32fc      	adds	r2, #252	; 0xfc
    4fae:	32ff      	adds	r2, #255	; 0xff
    4fb0:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    4fb2:	22fe      	movs	r2, #254	; 0xfe
    4fb4:	32ff      	adds	r2, #255	; 0xff
    4fb6:	5499      	strb	r1, [r3, r2]
    4fb8:	189b      	adds	r3, r3, r2
    4fba:	2200      	movs	r2, #0
    4fbc:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    4fbe:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    4fc0:	3202      	adds	r2, #2
    4fc2:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    4fc4:	4a0d      	ldr	r2, [pc, #52]	; (4ffc <LORAReg_InitKR+0x280>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    4fc6:	9200      	str	r2, [sp, #0]
    4fc8:	490d      	ldr	r1, [pc, #52]	; (5000 <LORAReg_InitKR+0x284>)
    4fca:	9a03      	ldr	r2, [sp, #12]
    4fcc:	4b0d      	ldr	r3, [pc, #52]	; (5004 <LORAReg_InitKR+0x288>)
    4fce:	3004      	adds	r0, #4
    4fd0:	4c0d      	ldr	r4, [pc, #52]	; (5008 <LORAReg_InitKR+0x28c>)
    4fd2:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4fd4:	2408      	movs	r4, #8
    4fd6:	e738      	b.n	4e4a <LORAReg_InitKR+0xce>
    4fd8:	200013e0 	.word	0x200013e0
    4fdc:	200013dc 	.word	0x200013dc
    4fe0:	000084bd 	.word	0x000084bd
    4fe4:	0000887d 	.word	0x0000887d
    4fe8:	00008a3d 	.word	0x00008a3d
    4fec:	0001c81c 	.word	0x0001c81c
    4ff0:	000158c9 	.word	0x000158c9
    4ff4:	0001c7f8 	.word	0x0001c7f8
    4ff8:	0001c824 	.word	0x0001c824
    4ffc:	00004d79 	.word	0x00004d79
    5000:	200011d4 	.word	0x200011d4
    5004:	0001c854 	.word	0x0001c854
    5008:	000090dd 	.word	0x000090dd

0000500c <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    500c:	4770      	bx	lr
	...

00005010 <LORAReg_InitNA>:
{
    5010:	b5f0      	push	{r4, r5, r6, r7, lr}
    5012:	46de      	mov	lr, fp
    5014:	4657      	mov	r7, sl
    5016:	464e      	mov	r6, r9
    5018:	4645      	mov	r5, r8
    501a:	b5e0      	push	{r5, r6, r7, lr}
    501c:	b089      	sub	sp, #36	; 0x24
    501e:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    5020:	4c68      	ldr	r4, [pc, #416]	; (51c4 <LORAReg_InitNA+0x1b4>)
    5022:	2602      	movs	r6, #2
    5024:	2302      	movs	r3, #2
    5026:	4698      	mov	r8, r3
    5028:	77a6      	strb	r6, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    502a:	2248      	movs	r2, #72	; 0x48
    502c:	2322      	movs	r3, #34	; 0x22
    502e:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    5030:	3b1b      	subs	r3, #27
    5032:	77e3      	strb	r3, [r4, #31]
	RegParams.maxTxPwr = MAX_TX_PWR_NA;
    5034:	3a2a      	subs	r2, #42	; 0x2a
    5036:	3319      	adds	r3, #25
    5038:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    503a:	0023      	movs	r3, r4
    503c:	339c      	adds	r3, #156	; 0x9c
    503e:	2700      	movs	r7, #0
    5040:	7123      	strb	r3, [r4, #4]
    5042:	0a1a      	lsrs	r2, r3, #8
    5044:	7162      	strb	r2, [r4, #5]
    5046:	0c1a      	lsrs	r2, r3, #16
    5048:	71a2      	strb	r2, [r4, #6]
    504a:	0e1a      	lsrs	r2, r3, #24
    504c:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    504e:	0025      	movs	r5, r4
    5050:	352c      	adds	r5, #44	; 0x2c
    5052:	7025      	strb	r5, [r4, #0]
    5054:	0a2a      	lsrs	r2, r5, #8
    5056:	7062      	strb	r2, [r4, #1]
    5058:	0c2a      	lsrs	r2, r5, #16
    505a:	70a2      	strb	r2, [r4, #2]
    505c:	0e2a      	lsrs	r2, r5, #24
    505e:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    5060:	22ff      	movs	r2, #255	; 0xff
    5062:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    5064:	3af5      	subs	r2, #245	; 0xf5
    5066:	76a2      	strb	r2, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    5068:	2008      	movs	r0, #8
    506a:	2208      	movs	r2, #8
    506c:	76e2      	strb	r2, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    506e:	2260      	movs	r2, #96	; 0x60
    5070:	4252      	negs	r2, r2
    5072:	4694      	mov	ip, r2
    5074:	7522      	strb	r2, [r4, #20]
    5076:	2270      	movs	r2, #112	; 0x70
    5078:	7562      	strb	r2, [r4, #21]
    507a:	75a0      	strb	r0, [r4, #22]
    507c:	2237      	movs	r2, #55	; 0x37
    507e:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    5080:	2218      	movs	r2, #24
    5082:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    5084:	2204      	movs	r2, #4
    5086:	4691      	mov	r9, r2
    5088:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    508a:	7767      	strb	r7, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_NA;
    508c:	2240      	movs	r2, #64	; 0x40
    508e:	4692      	mov	sl, r2
    5090:	32fc      	adds	r2, #252	; 0xfc
    5092:	4651      	mov	r1, sl
    5094:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_NA;
    5096:	223e      	movs	r2, #62	; 0x3e
    5098:	32ff      	adds	r2, #255	; 0xff
    509a:	2108      	movs	r1, #8
    509c:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    509e:	3a05      	subs	r2, #5
    50a0:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    50a2:	223a      	movs	r2, #58	; 0x3a
    50a4:	32ff      	adds	r2, #255	; 0xff
    50a6:	4649      	mov	r1, r9
    50a8:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    50aa:	3201      	adds	r2, #1
    50ac:	2108      	movs	r1, #8
    50ae:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    50b0:	3a2e      	subs	r2, #46	; 0x2e
    50b2:	3aff      	subs	r2, #255	; 0xff
    50b4:	213c      	movs	r1, #60	; 0x3c
    50b6:	31ff      	adds	r1, #255	; 0xff
    50b8:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    50ba:	3103      	adds	r1, #3
    50bc:	220a      	movs	r2, #10
    50be:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    50c0:	2260      	movs	r2, #96	; 0x60
    50c2:	3912      	subs	r1, #18
    50c4:	5462      	strb	r2, [r4, r1]
    50c6:	0021      	movs	r1, r4
    50c8:	312d      	adds	r1, #45	; 0x2d
    50ca:	31ff      	adds	r1, #255	; 0xff
    50cc:	2201      	movs	r2, #1
    50ce:	704a      	strb	r2, [r1, #1]
    50d0:	2238      	movs	r2, #56	; 0x38
    50d2:	4252      	negs	r2, r2
    50d4:	708a      	strb	r2, [r1, #2]
    50d6:	2235      	movs	r2, #53	; 0x35
    50d8:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    50da:	2240      	movs	r2, #64	; 0x40
    50dc:	4252      	negs	r2, r2
    50de:	2198      	movs	r1, #152	; 0x98
    50e0:	0049      	lsls	r1, r1, #1
    50e2:	5462      	strb	r2, [r4, r1]
    50e4:	0021      	movs	r1, r4
    50e6:	3131      	adds	r1, #49	; 0x31
    50e8:	31ff      	adds	r1, #255	; 0xff
    50ea:	2251      	movs	r2, #81	; 0x51
    50ec:	4252      	negs	r2, r2
    50ee:	704a      	strb	r2, [r1, #1]
    50f0:	222e      	movs	r2, #46	; 0x2e
    50f2:	4252      	negs	r2, r2
    50f4:	708a      	strb	r2, [r1, #2]
    50f6:	2235      	movs	r2, #53	; 0x35
    50f8:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    50fa:	219a      	movs	r1, #154	; 0x9a
    50fc:	0049      	lsls	r1, r1, #1
    50fe:	4662      	mov	r2, ip
    5100:	5462      	strb	r2, [r4, r1]
    5102:	0021      	movs	r1, r4
    5104:	3135      	adds	r1, #53	; 0x35
    5106:	31ff      	adds	r1, #255	; 0xff
    5108:	2270      	movs	r2, #112	; 0x70
    510a:	704a      	strb	r2, [r1, #1]
    510c:	7088      	strb	r0, [r1, #2]
    510e:	2037      	movs	r0, #55	; 0x37
    5110:	70c8      	strb	r0, [r1, #3]
	RegParams.Rx1DrOffset = 3;
    5112:	2003      	movs	r0, #3
    5114:	2124      	movs	r1, #36	; 0x24
    5116:	5460      	strb	r0, [r4, r1]
	RegParams.maxTxPwrIndx = 10;
    5118:	3101      	adds	r1, #1
    511a:	220a      	movs	r2, #10
    511c:	5462      	strb	r2, [r4, r1]
	RegParams.band = ismBand;
    511e:	2226      	movs	r2, #38	; 0x26
    5120:	4669      	mov	r1, sp
    5122:	7b09      	ldrb	r1, [r1, #12]
    5124:	54a1      	strb	r1, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    5126:	326a      	adds	r2, #106	; 0x6a
    5128:	4927      	ldr	r1, [pc, #156]	; (51c8 <LORAReg_InitNA+0x1b8>)
    512a:	0018      	movs	r0, r3
    512c:	4b27      	ldr	r3, [pc, #156]	; (51cc <LORAReg_InitNA+0x1bc>)
    512e:	4699      	mov	r9, r3
    5130:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    5132:	2270      	movs	r2, #112	; 0x70
    5134:	4926      	ldr	r1, [pc, #152]	; (51d0 <LORAReg_InitNA+0x1c0>)
    5136:	0028      	movs	r0, r5
    5138:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    513a:	2340      	movs	r3, #64	; 0x40
    513c:	33ff      	adds	r3, #255	; 0xff
    513e:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    5140:	33b5      	adds	r3, #181	; 0xb5
    5142:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_NA_ALT_CH;
    5144:	2200      	movs	r2, #0
    5146:	23f6      	movs	r3, #246	; 0xf6
    5148:	33ff      	adds	r3, #255	; 0xff
    514a:	54e2      	strb	r2, [r4, r3]
    514c:	0023      	movs	r3, r4
    514e:	33f6      	adds	r3, #246	; 0xf6
    5150:	33ff      	adds	r3, #255	; 0xff
    5152:	4642      	mov	r2, r8
    5154:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    5156:	23f8      	movs	r3, #248	; 0xf8
    5158:	33ff      	adds	r3, #255	; 0xff
    515a:	2201      	movs	r2, #1
    515c:	54e2      	strb	r2, [r4, r3]
    515e:	0023      	movs	r3, r4
    5160:	33f8      	adds	r3, #248	; 0xf8
    5162:	33ff      	adds	r3, #255	; 0xff
    5164:	4642      	mov	r2, r8
    5166:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    5168:	2200      	movs	r2, #0
    516a:	23fa      	movs	r3, #250	; 0xfa
    516c:	33ff      	adds	r3, #255	; 0xff
    516e:	54e2      	strb	r2, [r4, r3]
    5170:	0023      	movs	r3, r4
    5172:	33fa      	adds	r3, #250	; 0xfa
    5174:	33ff      	adds	r3, #255	; 0xff
    5176:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.sb_dc_prescalr_item_id = 0;
    5178:	23fc      	movs	r3, #252	; 0xfc
    517a:	33ff      	adds	r3, #255	; 0xff
    517c:	54e2      	strb	r2, [r4, r3]
    517e:	0023      	movs	r3, r4
    5180:	33fc      	adds	r3, #252	; 0xfc
    5182:	33ff      	adds	r3, #255	; 0xff
    5184:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    5186:	23fe      	movs	r3, #254	; 0xfe
    5188:	33ff      	adds	r3, #255	; 0xff
    518a:	54e2      	strb	r2, [r4, r3]
    518c:	18e4      	adds	r4, r4, r3
    518e:	2300      	movs	r3, #0
    5190:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    5192:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    5194:	711e      	strb	r6, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    5196:	4a0f      	ldr	r2, [pc, #60]	; (51d4 <LORAReg_InitNA+0x1c4>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    5198:	9200      	str	r2, [sp, #0]
    519a:	490f      	ldr	r1, [pc, #60]	; (51d8 <LORAReg_InitNA+0x1c8>)
    519c:	9a05      	ldr	r2, [sp, #20]
    519e:	4b0f      	ldr	r3, [pc, #60]	; (51dc <LORAReg_InitNA+0x1cc>)
    51a0:	2002      	movs	r0, #2
    51a2:	4c0f      	ldr	r4, [pc, #60]	; (51e0 <LORAReg_InitNA+0x1d0>)
    51a4:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    51a6:	4b0f      	ldr	r3, [pc, #60]	; (51e4 <LORAReg_InitNA+0x1d4>)
    51a8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    51aa:	4b0f      	ldr	r3, [pc, #60]	; (51e8 <LORAReg_InitNA+0x1d8>)
    51ac:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    51ae:	4b0f      	ldr	r3, [pc, #60]	; (51ec <LORAReg_InitNA+0x1dc>)
    51b0:	4798      	blx	r3
}
    51b2:	2008      	movs	r0, #8
    51b4:	b009      	add	sp, #36	; 0x24
    51b6:	bc3c      	pop	{r2, r3, r4, r5}
    51b8:	4690      	mov	r8, r2
    51ba:	4699      	mov	r9, r3
    51bc:	46a2      	mov	sl, r4
    51be:	46ab      	mov	fp, r5
    51c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	200013e0 	.word	0x200013e0
    51c8:	0001c864 	.word	0x0001c864
    51cc:	000158c9 	.word	0x000158c9
    51d0:	0001c8f4 	.word	0x0001c8f4
    51d4:	0000500d 	.word	0x0000500d
    51d8:	200011d8 	.word	0x200011d8
    51dc:	0001c964 	.word	0x0001c964
    51e0:	000090dd 	.word	0x000090dd
    51e4:	00007d75 	.word	0x00007d75
    51e8:	000085fd 	.word	0x000085fd
    51ec:	000088e5 	.word	0x000088e5

000051f0 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    51f0:	2015      	movs	r0, #21
    51f2:	4770      	bx	lr

000051f4 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    51f4:	2015      	movs	r0, #21
    51f6:	4770      	bx	lr

000051f8 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    51f8:	2322      	movs	r3, #34	; 0x22
    51fa:	4902      	ldr	r1, [pc, #8]	; (5204 <LORAREG_GetAttr_MaxChannel+0xc>)
    51fc:	5ccb      	ldrb	r3, [r1, r3]
    51fe:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5200:	2008      	movs	r0, #8
    5202:	4770      	bx	lr
    5204:	200013e0 	.word	0x200013e0

00005208 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    5208:	4b04      	ldr	r3, [pc, #16]	; (521c <LORAREG_GetAttr_MinNewChIndex+0x14>)
    520a:	7e59      	ldrb	r1, [r3, #25]
    520c:	7011      	strb	r1, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    520e:	7e5b      	ldrb	r3, [r3, #25]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5210:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    5212:	2bff      	cmp	r3, #255	; 0xff
    5214:	d000      	beq.n	5218 <LORAREG_GetAttr_MinNewChIndex+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    5216:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    5218:	3002      	adds	r0, #2
    521a:	e7fc      	b.n	5216 <LORAREG_GetAttr_MinNewChIndex+0xe>
    521c:	200013e0 	.word	0x200013e0

00005220 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    5220:	4b02      	ldr	r3, [pc, #8]	; (522c <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    5222:	7e9b      	ldrb	r3, [r3, #26]
    5224:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5226:	2008      	movs	r0, #8
    5228:	4770      	bx	lr
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	200013e0 	.word	0x200013e0

00005230 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    5230:	4b02      	ldr	r3, [pc, #8]	; (523c <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    5232:	7edb      	ldrb	r3, [r3, #27]
    5234:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5236:	2008      	movs	r0, #8
    5238:	4770      	bx	lr
    523a:	46c0      	nop			; (mov r8, r8)
    523c:	200013e0 	.word	0x200013e0

00005240 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    5240:	4b02      	ldr	r3, [pc, #8]	; (524c <LORAREG_GetAttr_RegFeatures+0xc>)
    5242:	7e1b      	ldrb	r3, [r3, #24]
    5244:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5246:	2008      	movs	r0, #8
    5248:	4770      	bx	lr
    524a:	46c0      	nop			; (mov r8, r8)
    524c:	200013e0 	.word	0x200013e0

00005250 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    5250:	b530      	push	{r4, r5, lr}
    5252:	b083      	sub	sp, #12
    5254:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    5256:	780c      	ldrb	r4, [r1, #0]
    5258:	a901      	add	r1, sp, #4
    525a:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    525c:	2301      	movs	r3, #1
    525e:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5260:	4b0d      	ldr	r3, [pc, #52]	; (5298 <LORAREG_GetAttr_DataRange+0x48>)
    5262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5264:	2015      	movs	r0, #21
    5266:	4798      	blx	r3
    5268:	2808      	cmp	r0, #8
    526a:	d004      	beq.n	5276 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    526c:	23ff      	movs	r3, #255	; 0xff
    526e:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    5270:	200a      	movs	r0, #10
	}
	return result;
}
    5272:	b003      	add	sp, #12
    5274:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    5276:	4909      	ldr	r1, [pc, #36]	; (529c <LORAREG_GetAttr_DataRange+0x4c>)
    5278:	790b      	ldrb	r3, [r1, #4]
    527a:	794a      	ldrb	r2, [r1, #5]
    527c:	0212      	lsls	r2, r2, #8
    527e:	4313      	orrs	r3, r2
    5280:	798a      	ldrb	r2, [r1, #6]
    5282:	0412      	lsls	r2, r2, #16
    5284:	431a      	orrs	r2, r3
    5286:	79cb      	ldrb	r3, [r1, #7]
    5288:	061b      	lsls	r3, r3, #24
    528a:	431a      	orrs	r2, r3
    528c:	0063      	lsls	r3, r4, #1
    528e:	189b      	adds	r3, r3, r2
    5290:	785b      	ldrb	r3, [r3, #1]
    5292:	702b      	strb	r3, [r5, #0]
    5294:	e7ed      	b.n	5272 <LORAREG_GetAttr_DataRange+0x22>
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	20000d78 	.word	0x20000d78
    529c:	200013e0 	.word	0x200013e0

000052a0 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    52a0:	b530      	push	{r4, r5, lr}
    52a2:	b083      	sub	sp, #12
    52a4:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    52a6:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    52a8:	a901      	add	r1, sp, #4
    52aa:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    52ac:	2301      	movs	r3, #1
    52ae:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    52b0:	4b0c      	ldr	r3, [pc, #48]	; (52e4 <LORAREG_GetAttr_ChIdStatus+0x44>)
    52b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    52b4:	2015      	movs	r0, #21
    52b6:	4798      	blx	r3
    52b8:	2808      	cmp	r0, #8
    52ba:	d004      	beq.n	52c6 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    52bc:	2300      	movs	r3, #0
    52be:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    52c0:	200a      	movs	r0, #10
	}
	return result;
}
    52c2:	b003      	add	sp, #12
    52c4:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    52c6:	4908      	ldr	r1, [pc, #32]	; (52e8 <LORAREG_GetAttr_ChIdStatus+0x48>)
    52c8:	790a      	ldrb	r2, [r1, #4]
    52ca:	794b      	ldrb	r3, [r1, #5]
    52cc:	021b      	lsls	r3, r3, #8
    52ce:	4313      	orrs	r3, r2
    52d0:	798a      	ldrb	r2, [r1, #6]
    52d2:	0412      	lsls	r2, r2, #16
    52d4:	4313      	orrs	r3, r2
    52d6:	79ca      	ldrb	r2, [r1, #7]
    52d8:	0612      	lsls	r2, r2, #24
    52da:	431a      	orrs	r2, r3
    52dc:	0064      	lsls	r4, r4, #1
    52de:	5ca3      	ldrb	r3, [r4, r2]
    52e0:	702b      	strb	r3, [r5, #0]
    52e2:	e7ee      	b.n	52c2 <LORAREG_GetAttr_ChIdStatus+0x22>
    52e4:	20000d78 	.word	0x20000d78
    52e8:	200013e0 	.word	0x200013e0

000052ec <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    52ec:	2301      	movs	r3, #1
    52ee:	425b      	negs	r3, r3
    52f0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    52f2:	200a      	movs	r0, #10
    52f4:	4770      	bx	lr

000052f6 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    52f6:	2301      	movs	r3, #1
    52f8:	425b      	negs	r3, r3
    52fa:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    52fc:	200a      	movs	r0, #10
    52fe:	4770      	bx	lr

00005300 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    5300:	23fa      	movs	r3, #250	; 0xfa
    5302:	009b      	lsls	r3, r3, #2
    5304:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5306:	2008      	movs	r0, #8
    5308:	4770      	bx	lr

0000530a <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    530a:	23fa      	movs	r3, #250	; 0xfa
    530c:	00db      	lsls	r3, r3, #3
    530e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5310:	2008      	movs	r0, #8
    5312:	4770      	bx	lr

00005314 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    5314:	4b01      	ldr	r3, [pc, #4]	; (531c <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    5316:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5318:	2008      	movs	r0, #8
    531a:	4770      	bx	lr
    531c:	00001388 	.word	0x00001388

00005320 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    5320:	4b01      	ldr	r3, [pc, #4]	; (5328 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    5322:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5324:	2008      	movs	r0, #8
    5326:	4770      	bx	lr
    5328:	00001770 	.word	0x00001770

0000532c <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    532c:	23fa      	movs	r3, #250	; 0xfa
    532e:	00db      	lsls	r3, r3, #3
    5330:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5332:	2008      	movs	r0, #8
    5334:	4770      	bx	lr

00005336 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    5336:	2320      	movs	r3, #32
    5338:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    533a:	2008      	movs	r0, #8
    533c:	4770      	bx	lr

0000533e <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    533e:	2340      	movs	r3, #64	; 0x40
    5340:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5342:	2008      	movs	r0, #8
    5344:	4770      	bx	lr

00005346 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    5346:	2380      	movs	r3, #128	; 0x80
    5348:	01db      	lsls	r3, r3, #7
    534a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    534c:	2008      	movs	r0, #8
    534e:	4770      	bx	lr

00005350 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    5350:	4b02      	ldr	r3, [pc, #8]	; (535c <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    5352:	7fdb      	ldrb	r3, [r3, #31]
    5354:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5356:	2008      	movs	r0, #8
    5358:	4770      	bx	lr
    535a:	46c0      	nop			; (mov r8, r8)
    535c:	200013e0 	.word	0x200013e0

00005360 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    5360:	4b02      	ldr	r3, [pc, #8]	; (536c <LORAREG_GetAttr_RegDefTxDR+0xc>)
    5362:	7f9b      	ldrb	r3, [r3, #30]
    5364:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5366:	2008      	movs	r0, #8
    5368:	4770      	bx	lr
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	200013e0 	.word	0x200013e0

00005370 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    5370:	2327      	movs	r3, #39	; 0x27
    5372:	4902      	ldr	r1, [pc, #8]	; (537c <LORAREG_GetAttr_CurChIndx+0xc>)
    5374:	5ccb      	ldrb	r3, [r1, r3]
    5376:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5378:	2008      	movs	r0, #8
    537a:	4770      	bx	lr
    537c:	200013e0 	.word	0x200013e0

00005380 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    5380:	4b09      	ldr	r3, [pc, #36]	; (53a8 <LORAREG_GetAttr_DefLBTParams+0x28>)
    5382:	21d4      	movs	r1, #212	; 0xd4
    5384:	0049      	lsls	r1, r1, #1
    5386:	5c59      	ldrb	r1, [r3, r1]
    5388:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    538a:	21d3      	movs	r1, #211	; 0xd3
    538c:	0049      	lsls	r1, r1, #1
    538e:	5c59      	ldrb	r1, [r3, r1]
    5390:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    5392:	21a8      	movs	r1, #168	; 0xa8
    5394:	31ff      	adds	r1, #255	; 0xff
    5396:	565b      	ldrsb	r3, [r3, r1]
    5398:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    539a:	2301      	movs	r3, #1
    539c:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    539e:	3304      	adds	r3, #4
    53a0:	8093      	strh	r3, [r2, #4]
	return 0;
}
    53a2:	2000      	movs	r0, #0
    53a4:	4770      	bx	lr
    53a6:	46c0      	nop			; (mov r8, r8)
    53a8:	200013e0 	.word	0x200013e0

000053ac <LORAREG_GetAttr_FreqT1>:
{
    53ac:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    53ae:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    53b0:	2122      	movs	r1, #34	; 0x22
    53b2:	4820      	ldr	r0, [pc, #128]	; (5434 <LORAREG_GetAttr_FreqT1+0x88>)
    53b4:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    53b6:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    53b8:	428b      	cmp	r3, r1
    53ba:	dc3a      	bgt.n	5432 <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    53bc:	3033      	adds	r0, #51	; 0x33
    53be:	30ff      	adds	r0, #255	; 0xff
    53c0:	4c1c      	ldr	r4, [pc, #112]	; (5434 <LORAREG_GetAttr_FreqT1+0x88>)
    53c2:	5c24      	ldrb	r4, [r4, r0]
    53c4:	42a3      	cmp	r3, r4
    53c6:	d31c      	bcc.n	5402 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    53c8:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    53ca:	428b      	cmp	r3, r1
    53cc:	da31      	bge.n	5432 <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    53ce:	1b1b      	subs	r3, r3, r4
    53d0:	4919      	ldr	r1, [pc, #100]	; (5438 <LORAREG_GetAttr_FreqT1+0x8c>)
    53d2:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    53d4:	4c17      	ldr	r4, [pc, #92]	; (5434 <LORAREG_GetAttr_FreqT1+0x88>)
    53d6:	2198      	movs	r1, #152	; 0x98
    53d8:	0049      	lsls	r1, r1, #1
    53da:	5c61      	ldrb	r1, [r4, r1]
    53dc:	2032      	movs	r0, #50	; 0x32
    53de:	30ff      	adds	r0, #255	; 0xff
    53e0:	5c20      	ldrb	r0, [r4, r0]
    53e2:	0200      	lsls	r0, r0, #8
    53e4:	4301      	orrs	r1, r0
    53e6:	2099      	movs	r0, #153	; 0x99
    53e8:	0040      	lsls	r0, r0, #1
    53ea:	5c20      	ldrb	r0, [r4, r0]
    53ec:	0400      	lsls	r0, r0, #16
    53ee:	4308      	orrs	r0, r1
    53f0:	2134      	movs	r1, #52	; 0x34
    53f2:	31ff      	adds	r1, #255	; 0xff
    53f4:	5c61      	ldrb	r1, [r4, r1]
    53f6:	0609      	lsls	r1, r1, #24
    53f8:	4301      	orrs	r1, r0
    53fa:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    53fc:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    53fe:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    5400:	e017      	b.n	5432 <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    5402:	4c0c      	ldr	r4, [pc, #48]	; (5434 <LORAREG_GetAttr_FreqT1+0x88>)
    5404:	2196      	movs	r1, #150	; 0x96
    5406:	0049      	lsls	r1, r1, #1
    5408:	5c61      	ldrb	r1, [r4, r1]
    540a:	202e      	movs	r0, #46	; 0x2e
    540c:	30ff      	adds	r0, #255	; 0xff
    540e:	5c20      	ldrb	r0, [r4, r0]
    5410:	0200      	lsls	r0, r0, #8
    5412:	4308      	orrs	r0, r1
    5414:	2197      	movs	r1, #151	; 0x97
    5416:	0049      	lsls	r1, r1, #1
    5418:	5c61      	ldrb	r1, [r4, r1]
    541a:	0409      	lsls	r1, r1, #16
    541c:	4308      	orrs	r0, r1
    541e:	2130      	movs	r1, #48	; 0x30
    5420:	31ff      	adds	r1, #255	; 0xff
    5422:	5c61      	ldrb	r1, [r4, r1]
    5424:	0609      	lsls	r1, r1, #24
    5426:	4301      	orrs	r1, r0
    5428:	4804      	ldr	r0, [pc, #16]	; (543c <LORAREG_GetAttr_FreqT1+0x90>)
    542a:	4343      	muls	r3, r0
    542c:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    542e:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5430:	2008      	movs	r0, #8
}
    5432:	bd30      	pop	{r4, r5, pc}
    5434:	200013e0 	.word	0x200013e0
    5438:	00186a00 	.word	0x00186a00
    543c:	00030d40 	.word	0x00030d40

00005440 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5440:	780a      	ldrb	r2, [r1, #0]
    5442:	233a      	movs	r3, #58	; 0x3a
    5444:	33ff      	adds	r3, #255	; 0xff
    5446:	4903      	ldr	r1, [pc, #12]	; (5454 <ValidateDataRateTxT1+0x14>)
    5448:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    544a:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    544c:	429a      	cmp	r2, r3
    544e:	d900      	bls.n	5452 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    5450:	3002      	adds	r0, #2
	}
	
	return result;
}
    5452:	4770      	bx	lr
    5454:	200013e0 	.word	0x200013e0

00005458 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5458:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    545a:	4a08      	ldr	r2, [pc, #32]	; (547c <ValidateDataRateTxT2+0x24>)
    545c:	7f12      	ldrb	r2, [r2, #28]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    545e:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    5460:	429a      	cmp	r2, r3
    5462:	d30a      	bcc.n	547a <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5464:	22ac      	movs	r2, #172	; 0xac
    5466:	32ff      	adds	r2, #255	; 0xff
    5468:	4904      	ldr	r1, [pc, #16]	; (547c <ValidateDataRateTxT2+0x24>)
    546a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    546c:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    546e:	07d2      	lsls	r2, r2, #31
    5470:	d503      	bpl.n	547a <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5472:	7e8a      	ldrb	r2, [r1, #26]
    5474:	429a      	cmp	r2, r3
    5476:	d900      	bls.n	547a <ValidateDataRateTxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    5478:	3002      	adds	r0, #2
	}
	
	return result;
}
    547a:	4770      	bx	lr
    547c:	200013e0 	.word	0x200013e0

00005480 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5480:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5482:	223c      	movs	r2, #60	; 0x3c
    5484:	32ff      	adds	r2, #255	; 0xff
    5486:	4906      	ldr	r1, [pc, #24]	; (54a0 <ValidateDataRateRxT1+0x20>)
    5488:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    548a:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    548c:	429a      	cmp	r2, r3
    548e:	d306      	bcc.n	549e <ValidateDataRateRxT1+0x1e>
    5490:	229d      	movs	r2, #157	; 0x9d
    5492:	0052      	lsls	r2, r2, #1
    5494:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5496:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5498:	429a      	cmp	r2, r3
    549a:	d900      	bls.n	549e <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    549c:	3002      	adds	r0, #2
	}
	return result;
}
    549e:	4770      	bx	lr
    54a0:	200013e0 	.word	0x200013e0

000054a4 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    54a4:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    54a6:	4a08      	ldr	r2, [pc, #32]	; (54c8 <ValidateDataRateRxT2+0x24>)
    54a8:	7f12      	ldrb	r2, [r2, #28]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    54aa:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    54ac:	429a      	cmp	r2, r3
    54ae:	d30a      	bcc.n	54c6 <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    54b0:	22ac      	movs	r2, #172	; 0xac
    54b2:	32ff      	adds	r2, #255	; 0xff
    54b4:	4904      	ldr	r1, [pc, #16]	; (54c8 <ValidateDataRateRxT2+0x24>)
    54b6:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    54b8:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    54ba:	0792      	lsls	r2, r2, #30
    54bc:	d503      	bpl.n	54c6 <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    54be:	7e8a      	ldrb	r2, [r1, #26]
    54c0:	429a      	cmp	r2, r3
    54c2:	d900      	bls.n	54c6 <ValidateDataRateRxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    54c4:	3002      	adds	r0, #2
	}

	return result;
}
    54c6:	4770      	bx	lr
    54c8:	200013e0 	.word	0x200013e0

000054cc <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    54cc:	780a      	ldrb	r2, [r1, #0]
    54ce:	2322      	movs	r3, #34	; 0x22
    54d0:	4903      	ldr	r1, [pc, #12]	; (54e0 <ValidateChannelId+0x14>)
    54d2:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    54d4:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    54d6:	429a      	cmp	r2, r3
    54d8:	db00      	blt.n	54dc <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    54da:	3002      	adds	r0, #2
    }
	
    return result;
}
    54dc:	4770      	bx	lr
    54de:	46c0      	nop			; (mov r8, r8)
    54e0:	200013e0 	.word	0x200013e0

000054e4 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    54e4:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    54e6:	2222      	movs	r2, #34	; 0x22
    54e8:	4808      	ldr	r0, [pc, #32]	; (550c <ValidateChannelIdT2+0x28>)
    54ea:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    54ec:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    54ee:	4293      	cmp	r3, r2
    54f0:	da0a      	bge.n	5508 <ValidateChannelIdT2+0x24>
    54f2:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    54f4:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    54f6:	2a00      	cmp	r2, #0
    54f8:	d106      	bne.n	5508 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    54fa:	22aa      	movs	r2, #170	; 0xaa
    54fc:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    54fe:	4903      	ldr	r1, [pc, #12]	; (550c <ValidateChannelIdT2+0x28>)
    5500:	5c8a      	ldrb	r2, [r1, r2]
    5502:	429a      	cmp	r2, r3
    5504:	d900      	bls.n	5508 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    5506:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    5508:	4770      	bx	lr
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	200013e0 	.word	0x200013e0

00005510 <LORAREG_GetAttr_DutyCycleT2>:
{
    5510:	b530      	push	{r4, r5, lr}
    5512:	b083      	sub	sp, #12
    5514:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    5516:	780d      	ldrb	r5, [r1, #0]
    5518:	a901      	add	r1, sp, #4
    551a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    551c:	2301      	movs	r3, #1
    551e:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5520:	2015      	movs	r0, #21
    5522:	4b0b      	ldr	r3, [pc, #44]	; (5550 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    5524:	4798      	blx	r3
    5526:	2808      	cmp	r0, #8
    5528:	d002      	beq.n	5530 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    552a:	200a      	movs	r0, #10
}
    552c:	b003      	add	sp, #12
    552e:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    5530:	4a08      	ldr	r2, [pc, #32]	; (5554 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    5532:	006b      	lsls	r3, r5, #1
    5534:	195b      	adds	r3, r3, r5
    5536:	009b      	lsls	r3, r3, #2
    5538:	18d3      	adds	r3, r2, r3
    553a:	3394      	adds	r3, #148	; 0x94
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    553c:	781b      	ldrb	r3, [r3, #0]
    553e:	33c8      	adds	r3, #200	; 0xc8
    5540:	005b      	lsls	r3, r3, #1
    5542:	18d2      	adds	r2, r2, r3
    5544:	7991      	ldrb	r1, [r2, #6]
    5546:	79d3      	ldrb	r3, [r2, #7]
    5548:	021b      	lsls	r3, r3, #8
    554a:	430b      	orrs	r3, r1
    554c:	8023      	strh	r3, [r4, #0]
    554e:	e7ed      	b.n	552c <LORAREG_GetAttr_DutyCycleT2+0x1c>
    5550:	000054e5 	.word	0x000054e5
    5554:	200013e0 	.word	0x200013e0

00005558 <LORAREG_GetAttr_MinMaxDr>:
{
    5558:	b5f0      	push	{r4, r5, r6, r7, lr}
    555a:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    555c:	4b1a      	ldr	r3, [pc, #104]	; (55c8 <LORAREG_GetAttr_MinMaxDr+0x70>)
    555e:	7f1c      	ldrb	r4, [r3, #28]
	uint8_t maxDataRate = RegParams.maxDataRate;
    5560:	7f5f      	ldrb	r7, [r3, #29]

	for (i = 0; i < RegParams.maxChannels; i++)
    5562:	2122      	movs	r1, #34	; 0x22
    5564:	565e      	ldrsb	r6, [r3, r1]
    5566:	2e00      	cmp	r6, #0
    5568:	dd28      	ble.n	55bc <LORAREG_GetAttr_MinMaxDr+0x64>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    556a:	0019      	movs	r1, r3
    556c:	791d      	ldrb	r5, [r3, #4]
    556e:	795b      	ldrb	r3, [r3, #5]
    5570:	021b      	lsls	r3, r3, #8
    5572:	432b      	orrs	r3, r5
    5574:	798d      	ldrb	r5, [r1, #6]
    5576:	042d      	lsls	r5, r5, #16
    5578:	432b      	orrs	r3, r5
    557a:	79cd      	ldrb	r5, [r1, #7]
    557c:	062d      	lsls	r5, r5, #24
    557e:	431d      	orrs	r5, r3
    5580:	2100      	movs	r1, #0
    5582:	e00b      	b.n	559c <LORAREG_GetAttr_MinMaxDr+0x44>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5584:	7843      	ldrb	r3, [r0, #1]
    5586:	091b      	lsrs	r3, r3, #4
    5588:	42bb      	cmp	r3, r7
    558a:	dd03      	ble.n	5594 <LORAREG_GetAttr_MinMaxDr+0x3c>
    558c:	7800      	ldrb	r0, [r0, #0]
    558e:	2800      	cmp	r0, #0
    5590:	d000      	beq.n	5594 <LORAREG_GetAttr_MinMaxDr+0x3c>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    5592:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    5594:	3101      	adds	r1, #1
    5596:	b2c9      	uxtb	r1, r1
    5598:	42b1      	cmp	r1, r6
    559a:	da0f      	bge.n	55bc <LORAREG_GetAttr_MinMaxDr+0x64>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    559c:	0048      	lsls	r0, r1, #1
    559e:	1828      	adds	r0, r5, r0
    55a0:	7843      	ldrb	r3, [r0, #1]
    55a2:	071b      	lsls	r3, r3, #28
    55a4:	0f1b      	lsrs	r3, r3, #28
    55a6:	42a3      	cmp	r3, r4
    55a8:	daec      	bge.n	5584 <LORAREG_GetAttr_MinMaxDr+0x2c>
    55aa:	7802      	ldrb	r2, [r0, #0]
    55ac:	2a00      	cmp	r2, #0
    55ae:	d0f1      	beq.n	5594 <LORAREG_GetAttr_MinMaxDr+0x3c>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    55b0:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    55b2:	7843      	ldrb	r3, [r0, #1]
    55b4:	091b      	lsrs	r3, r3, #4
    55b6:	42bb      	cmp	r3, r7
    55b8:	dceb      	bgt.n	5592 <LORAREG_GetAttr_MinMaxDr+0x3a>
    55ba:	e7eb      	b.n	5594 <LORAREG_GetAttr_MinMaxDr+0x3c>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    55bc:	4663      	mov	r3, ip
    55be:	701c      	strb	r4, [r3, #0]
    55c0:	705f      	strb	r7, [r3, #1]
}
    55c2:	2008      	movs	r0, #8
    55c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	200013e0 	.word	0x200013e0

000055cc <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    55cc:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    55ce:	2b05      	cmp	r3, #5
    55d0:	d004      	beq.n	55dc <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    55d2:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    55d4:	2b07      	cmp	r3, #7
    55d6:	d900      	bls.n	55da <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    55d8:	3002      	adds	r0, #2
    }

    return result;
}
    55da:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    55dc:	200a      	movs	r0, #10
    55de:	e7fc      	b.n	55da <ValidateChannelMaskCntl+0xe>

000055e0 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    55e0:	780a      	ldrb	r2, [r1, #0]
    55e2:	2325      	movs	r3, #37	; 0x25
    55e4:	4903      	ldr	r1, [pc, #12]	; (55f4 <ValidateTxPower+0x14>)
    55e6:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    55e8:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    55ea:	429a      	cmp	r2, r3
    55ec:	dd00      	ble.n	55f0 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    55ee:	3002      	adds	r0, #2
	}

	return result;
}
    55f0:	4770      	bx	lr
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	200013e0 	.word	0x200013e0

000055f8 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    55f8:	2008      	movs	r0, #8
    55fa:	4770      	bx	lr

000055fc <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    55fc:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    55fe:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    5600:	2900      	cmp	r1, #0
    5602:	d020      	beq.n	5646 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    5604:	2322      	movs	r3, #34	; 0x22
    5606:	4a11      	ldr	r2, [pc, #68]	; (564c <ValidateChannelMaskT2+0x50>)
    5608:	56d0      	ldrsb	r0, [r2, r3]
    560a:	2800      	cmp	r0, #0
    560c:	dd1b      	ble.n	5646 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    560e:	7a14      	ldrb	r4, [r2, #8]
    5610:	7a53      	ldrb	r3, [r2, #9]
    5612:	021b      	lsls	r3, r3, #8
    5614:	4323      	orrs	r3, r4
    5616:	7a94      	ldrb	r4, [r2, #10]
    5618:	0424      	lsls	r4, r4, #16
    561a:	4323      	orrs	r3, r4
    561c:	7ad4      	ldrb	r4, [r2, #11]
    561e:	0624      	lsls	r4, r4, #24
    5620:	431c      	orrs	r4, r3
    5622:	2300      	movs	r3, #0
    5624:	2503      	movs	r5, #3
    5626:	e004      	b.n	5632 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    5628:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    562a:	3301      	adds	r3, #1
    562c:	b2db      	uxtb	r3, r3
    562e:	4283      	cmp	r3, r0
    5630:	da09      	bge.n	5646 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    5632:	2900      	cmp	r1, #0
    5634:	d0f8      	beq.n	5628 <ValidateChannelMaskT2+0x2c>
    5636:	005a      	lsls	r2, r3, #1
    5638:	18d2      	adds	r2, r2, r3
    563a:	0092      	lsls	r2, r2, #2
    563c:	18a2      	adds	r2, r4, r2
    563e:	7ad2      	ldrb	r2, [r2, #11]
    5640:	402a      	ands	r2, r5
    5642:	2a03      	cmp	r2, #3
    5644:	d0f0      	beq.n	5628 <ValidateChannelMaskT2+0x2c>
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
}
    5646:	2008      	movs	r0, #8
    5648:	bd30      	pop	{r4, r5, pc}
    564a:	46c0      	nop			; (mov r8, r8)
    564c:	200013e0 	.word	0x200013e0

00005650 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    5650:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5652:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    5654:	2b00      	cmp	r3, #0
    5656:	d002      	beq.n	565e <ValidateChannelMaskCntlT2+0xe>
    5658:	2b06      	cmp	r3, #6
    565a:	d001      	beq.n	5660 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    565c:	3002      	adds	r0, #2
    }
	return result;
}
    565e:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5660:	2008      	movs	r0, #8
    5662:	e7fc      	b.n	565e <ValidateChannelMaskCntlT2+0xe>

00005664 <ValidateChMaskChCntlT2>:
{
    5664:	b510      	push	{r4, lr}
    5666:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    5668:	ac01      	add	r4, sp, #4
    566a:	2204      	movs	r2, #4
    566c:	0020      	movs	r0, r4
    566e:	4b0f      	ldr	r3, [pc, #60]	; (56ac <ValidateChMaskChCntlT2+0x48>)
    5670:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    5672:	8863      	ldrh	r3, [r4, #2]
    5674:	2b00      	cmp	r3, #0
    5676:	d104      	bne.n	5682 <ValidateChMaskChCntlT2+0x1e>
    5678:	ab01      	add	r3, sp, #4
    567a:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    567c:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    567e:	2a00      	cmp	r2, #0
    5680:	d007      	beq.n	5692 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5682:	466b      	mov	r3, sp
    5684:	1d99      	adds	r1, r3, #6
    5686:	201a      	movs	r0, #26
    5688:	4b09      	ldr	r3, [pc, #36]	; (56b0 <ValidateChMaskChCntlT2+0x4c>)
    568a:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    568c:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    568e:	2808      	cmp	r0, #8
    5690:	d002      	beq.n	5698 <ValidateChMaskChCntlT2+0x34>
}
    5692:	0018      	movs	r0, r3
    5694:	b002      	add	sp, #8
    5696:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5698:	a901      	add	r1, sp, #4
    569a:	3013      	adds	r0, #19
    569c:	4b05      	ldr	r3, [pc, #20]	; (56b4 <ValidateChMaskChCntlT2+0x50>)
    569e:	4798      	blx	r3
    56a0:	0003      	movs	r3, r0
    56a2:	2808      	cmp	r0, #8
    56a4:	d0f5      	beq.n	5692 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    56a6:	230a      	movs	r3, #10
    56a8:	e7f3      	b.n	5692 <ValidateChMaskChCntlT2+0x2e>
    56aa:	46c0      	nop			; (mov r8, r8)
    56ac:	000158c9 	.word	0x000158c9
    56b0:	000055fd 	.word	0x000055fd
    56b4:	00005651 	.word	0x00005651

000056b8 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    56b8:	780a      	ldrb	r2, [r1, #0]
    56ba:	4b03      	ldr	r3, [pc, #12]	; (56c8 <ValidateDataRate+0x10>)
    56bc:	7f1b      	ldrb	r3, [r3, #28]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    56be:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    56c0:	429a      	cmp	r2, r3
    56c2:	d900      	bls.n	56c6 <ValidateDataRate+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    56c4:	3002      	adds	r0, #2
    }

    return result;
}
    56c6:	4770      	bx	lr
    56c8:	200013e0 	.word	0x200013e0

000056cc <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    56cc:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    56ce:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    56d0:	2322      	movs	r3, #34	; 0x22
    56d2:	4a14      	ldr	r2, [pc, #80]	; (5724 <ValidateSupportedDr+0x58>)
    56d4:	56d4      	ldrsb	r4, [r2, r3]
    56d6:	2c00      	cmp	r4, #0
    56d8:	dd22      	ble.n	5720 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    56da:	7910      	ldrb	r0, [r2, #4]
    56dc:	7953      	ldrb	r3, [r2, #5]
    56de:	021b      	lsls	r3, r3, #8
    56e0:	4303      	orrs	r3, r0
    56e2:	7990      	ldrb	r0, [r2, #6]
    56e4:	0400      	lsls	r0, r0, #16
    56e6:	4303      	orrs	r3, r0
    56e8:	79d0      	ldrb	r0, [r2, #7]
    56ea:	0600      	lsls	r0, r0, #24
    56ec:	4318      	orrs	r0, r3
    56ee:	2300      	movs	r3, #0
    56f0:	002e      	movs	r6, r5
    56f2:	e003      	b.n	56fc <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    56f4:	3301      	adds	r3, #1
    56f6:	b2db      	uxtb	r3, r3
    56f8:	42a3      	cmp	r3, r4
    56fa:	da0f      	bge.n	571c <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    56fc:	005a      	lsls	r2, r3, #1
    56fe:	1882      	adds	r2, r0, r2
    5700:	7811      	ldrb	r1, [r2, #0]
    5702:	2900      	cmp	r1, #0
    5704:	d0f6      	beq.n	56f4 <ValidateSupportedDr+0x28>
    5706:	7851      	ldrb	r1, [r2, #1]
    5708:	0709      	lsls	r1, r1, #28
    570a:	0f09      	lsrs	r1, r1, #28
    570c:	428d      	cmp	r5, r1
    570e:	dbf1      	blt.n	56f4 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    5710:	7852      	ldrb	r2, [r2, #1]
    5712:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    5714:	4296      	cmp	r6, r2
    5716:	dced      	bgt.n	56f4 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    5718:	2008      	movs	r0, #8
    571a:	e000      	b.n	571e <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    571c:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    571e:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    5720:	200a      	movs	r0, #10
    5722:	e7fc      	b.n	571e <ValidateSupportedDr+0x52>
    5724:	200013e0 	.word	0x200013e0

00005728 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    5728:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    572a:	6808      	ldr	r0, [r1, #0]
    572c:	4b07      	ldr	r3, [pc, #28]	; (574c <ValidateRxFreqT1+0x24>)
    572e:	469c      	mov	ip, r3
    5730:	4460      	add	r0, ip
    5732:	4a07      	ldr	r2, [pc, #28]	; (5750 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    5734:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    5736:	4290      	cmp	r0, r2
    5738:	d806      	bhi.n	5748 <ValidateRxFreqT1+0x20>
    573a:	4906      	ldr	r1, [pc, #24]	; (5754 <ValidateRxFreqT1+0x2c>)
    573c:	4b06      	ldr	r3, [pc, #24]	; (5758 <ValidateRxFreqT1+0x30>)
    573e:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5740:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    5742:	2900      	cmp	r1, #0
    5744:	d000      	beq.n	5748 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    5746:	3302      	adds	r3, #2
	}
	return result;
}
    5748:	0018      	movs	r0, r3
    574a:	bd10      	pop	{r4, pc}
    574c:	c8f78f60 	.word	0xc8f78f60
    5750:	00401640 	.word	0x00401640
    5754:	000927c0 	.word	0x000927c0
    5758:	00012819 	.word	0x00012819

0000575c <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    575c:	780a      	ldrb	r2, [r1, #0]
    575e:	2324      	movs	r3, #36	; 0x24
    5760:	4903      	ldr	r1, [pc, #12]	; (5770 <ValidateRx1DataRateOffset+0x14>)
    5762:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    5764:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    5766:	429a      	cmp	r2, r3
    5768:	dc00      	bgt.n	576c <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    576a:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    576c:	4770      	bx	lr
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	200013e0 	.word	0x200013e0

00005774 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    5774:	b530      	push	{r4, r5, lr}
    5776:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5778:	2321      	movs	r3, #33	; 0x21
    577a:	4a19      	ldr	r2, [pc, #100]	; (57e0 <getSubBandId+0x6c>)
    577c:	5cd5      	ldrb	r5, [r2, r3]
    577e:	2d00      	cmp	r5, #0
    5780:	d02c      	beq.n	57dc <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    5782:	0011      	movs	r1, r2
    5784:	7b13      	ldrb	r3, [r2, #12]
    5786:	7b52      	ldrb	r2, [r2, #13]
    5788:	0212      	lsls	r2, r2, #8
    578a:	431a      	orrs	r2, r3
    578c:	7b8b      	ldrb	r3, [r1, #14]
    578e:	041b      	lsls	r3, r3, #16
    5790:	431a      	orrs	r2, r3
    5792:	7bcb      	ldrb	r3, [r1, #15]
    5794:	061b      	lsls	r3, r3, #24
    5796:	4313      	orrs	r3, r2
    5798:	2000      	movs	r0, #0
    579a:	e004      	b.n	57a6 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    579c:	3001      	adds	r0, #1
    579e:	b2c0      	uxtb	r0, r0
    57a0:	330c      	adds	r3, #12
    57a2:	42a8      	cmp	r0, r5
    57a4:	d018      	beq.n	57d8 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    57a6:	781a      	ldrb	r2, [r3, #0]
    57a8:	7859      	ldrb	r1, [r3, #1]
    57aa:	0209      	lsls	r1, r1, #8
    57ac:	4311      	orrs	r1, r2
    57ae:	789a      	ldrb	r2, [r3, #2]
    57b0:	0412      	lsls	r2, r2, #16
    57b2:	4311      	orrs	r1, r2
    57b4:	78da      	ldrb	r2, [r3, #3]
    57b6:	0612      	lsls	r2, r2, #24
    57b8:	430a      	orrs	r2, r1
    57ba:	42a2      	cmp	r2, r4
    57bc:	d8ee      	bhi.n	579c <getSubBandId+0x28>
    57be:	791a      	ldrb	r2, [r3, #4]
    57c0:	7959      	ldrb	r1, [r3, #5]
    57c2:	0209      	lsls	r1, r1, #8
    57c4:	4311      	orrs	r1, r2
    57c6:	799a      	ldrb	r2, [r3, #6]
    57c8:	0412      	lsls	r2, r2, #16
    57ca:	4311      	orrs	r1, r2
    57cc:	79da      	ldrb	r2, [r3, #7]
    57ce:	0612      	lsls	r2, r2, #24
    57d0:	430a      	orrs	r2, r1
    57d2:	4294      	cmp	r4, r2
    57d4:	d8e2      	bhi.n	579c <getSubBandId+0x28>
    57d6:	e000      	b.n	57da <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    57d8:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    57da:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    57dc:	20ff      	movs	r0, #255	; 0xff
    57de:	e7fc      	b.n	57da <getSubBandId+0x66>
    57e0:	200013e0 	.word	0x200013e0

000057e4 <ValidateFreq>:
{
    57e4:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    57e6:	6808      	ldr	r0, [r1, #0]
    57e8:	4b04      	ldr	r3, [pc, #16]	; (57fc <ValidateFreq+0x18>)
    57ea:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    57ec:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    57ee:	28ff      	cmp	r0, #255	; 0xff
    57f0:	d001      	beq.n	57f6 <ValidateFreq+0x12>
}
    57f2:	0018      	movs	r0, r3
    57f4:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    57f6:	3302      	adds	r3, #2
    57f8:	e7fb      	b.n	57f2 <ValidateFreq+0xe>
    57fa:	46c0      	nop			; (mov r8, r8)
    57fc:	00005775 	.word	0x00005775

00005800 <ValidateFrequencyAS>:
 */
#if(AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    5800:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    5802:	2226      	movs	r2, #38	; 0x26
    5804:	4919      	ldr	r1, [pc, #100]	; (586c <ValidateFrequencyAS+0x6c>)
    5806:	5c8a      	ldrb	r2, [r1, r2]
    5808:	1f91      	subs	r1, r2, #6
    580a:	2903      	cmp	r1, #3
    580c:	d808      	bhi.n	5820 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    580e:	4a18      	ldr	r2, [pc, #96]	; (5870 <ValidateFrequencyAS+0x70>)
    5810:	4694      	mov	ip, r2
    5812:	4463      	add	r3, ip
    5814:	4a17      	ldr	r2, [pc, #92]	; (5874 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5816:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5818:	4293      	cmp	r3, r2
    581a:	d900      	bls.n	581e <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    581c:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    581e:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    5820:	2a0a      	cmp	r2, #10
    5822:	d011      	beq.n	5848 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    5824:	2a0b      	cmp	r2, #11
    5826:	d018      	beq.n	585a <ValidateFrequencyAS+0x5a>
    5828:	0011      	movs	r1, r2
    582a:	390d      	subs	r1, #13
    582c:	2901      	cmp	r1, #1
    582e:	d914      	bls.n	585a <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    5830:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    5832:	2a0c      	cmp	r2, #12
    5834:	d1f3      	bne.n	581e <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5836:	4a10      	ldr	r2, [pc, #64]	; (5878 <ValidateFrequencyAS+0x78>)
    5838:	4694      	mov	ip, r2
    583a:	4463      	add	r3, ip
    583c:	4a0f      	ldr	r2, [pc, #60]	; (587c <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    583e:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5840:	4293      	cmp	r3, r2
    5842:	d9ec      	bls.n	581e <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5844:	3002      	adds	r0, #2
    5846:	e7ea      	b.n	581e <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5848:	4a0d      	ldr	r2, [pc, #52]	; (5880 <ValidateFrequencyAS+0x80>)
    584a:	4694      	mov	ip, r2
    584c:	4463      	add	r3, ip
    584e:	4a0d      	ldr	r2, [pc, #52]	; (5884 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5850:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5852:	4293      	cmp	r3, r2
    5854:	d9e3      	bls.n	581e <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5856:	3002      	adds	r0, #2
    5858:	e7e1      	b.n	581e <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    585a:	4a0b      	ldr	r2, [pc, #44]	; (5888 <ValidateFrequencyAS+0x88>)
    585c:	4694      	mov	ip, r2
    585e:	4463      	add	r3, ip
    5860:	4a0a      	ldr	r2, [pc, #40]	; (588c <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5862:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5864:	4293      	cmp	r3, r2
    5866:	d9da      	bls.n	581e <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5868:	3002      	adds	r0, #2
    586a:	e7d8      	b.n	581e <ValidateFrequencyAS+0x1e>
    586c:	200013e0 	.word	0x200013e0
    5870:	c8fc2340 	.word	0xc8fc2340
    5874:	001e8480 	.word	0x001e8480
    5878:	c90b6580 	.word	0xc90b6580
    587c:	005b8d80 	.word	0x005b8d80
    5880:	c9763540 	.word	0xc9763540
    5884:	00c65d40 	.word	0x00c65d40
    5888:	c929ea00 	.word	0xc929ea00
    588c:	004c4b40 	.word	0x004c4b40

00005890 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    5890:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    5892:	780d      	ldrb	r5, [r1, #0]
    5894:	7849      	ldrb	r1, [r1, #1]
    5896:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    5898:	4809      	ldr	r0, [pc, #36]	; (58c0 <setTxParams+0x30>)
    589a:	24ac      	movs	r4, #172	; 0xac
    589c:	34ff      	adds	r4, #255	; 0xff
    589e:	2601      	movs	r6, #1
    58a0:	4031      	ands	r1, r6
    58a2:	5d03      	ldrb	r3, [r0, r4]
    58a4:	2701      	movs	r7, #1
    58a6:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    58a8:	4032      	ands	r2, r6
    58aa:	0052      	lsls	r2, r2, #1
    58ac:	430b      	orrs	r3, r1
    58ae:	2102      	movs	r1, #2
    58b0:	438b      	bics	r3, r1
    58b2:	4313      	orrs	r3, r2
    58b4:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    58b6:	2320      	movs	r3, #32
    58b8:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    58ba:	2008      	movs	r0, #8
    58bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58be:	46c0      	nop			; (mov r8, r8)
    58c0:	200013e0 	.word	0x200013e0

000058c4 <SearchAvailableChannel1>:
{
    58c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58c6:	46de      	mov	lr, fp
    58c8:	464f      	mov	r7, r9
    58ca:	4646      	mov	r6, r8
    58cc:	b5c0      	push	{r6, r7, lr}
    58ce:	b082      	sub	sp, #8
    58d0:	9001      	str	r0, [sp, #4]
    58d2:	0015      	movs	r5, r2
    58d4:	4698      	mov	r8, r3
	uint8_t startingIndex = 0;
    58d6:	2300      	movs	r3, #0
    58d8:	4699      	mov	r9, r3
	if (maxChannels == 8)
    58da:	0003      	movs	r3, r0
    58dc:	2808      	cmp	r0, #8
    58de:	d01d      	beq.n	591c <SearchAvailableChannel1+0x58>
	randomNumber =  (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    58e0:	4b2d      	ldr	r3, [pc, #180]	; (5998 <SearchAvailableChannel1+0xd4>)
    58e2:	4798      	blx	r3
    58e4:	9901      	ldr	r1, [sp, #4]
    58e6:	000f      	movs	r7, r1
    58e8:	4b2c      	ldr	r3, [pc, #176]	; (599c <SearchAvailableChannel1+0xd8>)
    58ea:	4798      	blx	r3
    58ec:	3101      	adds	r1, #1
    58ee:	b2cb      	uxtb	r3, r1
    58f0:	469b      	mov	fp, r3
	while (randomNumber)
    58f2:	2b00      	cmp	r3, #0
    58f4:	d04e      	beq.n	5994 <SearchAvailableChannel1+0xd0>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    58f6:	492a      	ldr	r1, [pc, #168]	; (59a0 <SearchAvailableChannel1+0xdc>)
    58f8:	790a      	ldrb	r2, [r1, #4]
    58fa:	794b      	ldrb	r3, [r1, #5]
    58fc:	021b      	lsls	r3, r3, #8
    58fe:	431a      	orrs	r2, r3
    5900:	798b      	ldrb	r3, [r1, #6]
    5902:	041b      	lsls	r3, r3, #16
    5904:	4313      	orrs	r3, r2
    5906:	79ca      	ldrb	r2, [r1, #7]
    5908:	0612      	lsls	r2, r2, #24
    590a:	431a      	orrs	r2, r3
    590c:	0016      	movs	r6, r2
    590e:	465c      	mov	r4, fp
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5910:	0038      	movs	r0, r7
    5912:	4448      	add	r0, r9
    5914:	464b      	mov	r3, r9
    5916:	9300      	str	r3, [sp, #0]
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    5918:	002f      	movs	r7, r5
    591a:	e021      	b.n	5960 <SearchAvailableChannel1+0x9c>
		startingIndex = RegParams.cmnParams.paramsType1.Max_125khzChan;
    591c:	3335      	adds	r3, #53	; 0x35
    591e:	33ff      	adds	r3, #255	; 0xff
    5920:	4a1f      	ldr	r2, [pc, #124]	; (59a0 <SearchAvailableChannel1+0xdc>)
    5922:	5cd3      	ldrb	r3, [r2, r3]
    5924:	4699      	mov	r9, r3
    5926:	e7db      	b.n	58e0 <SearchAvailableChannel1+0x1c>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5928:	3301      	adds	r3, #1
    592a:	b2db      	uxtb	r3, r3
    592c:	4283      	cmp	r3, r0
    592e:	da13      	bge.n	5958 <SearchAvailableChannel1+0x94>
    5930:	2c00      	cmp	r4, #0
    5932:	d01c      	beq.n	596e <SearchAvailableChannel1+0xaa>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    5934:	0059      	lsls	r1, r3, #1
    5936:	1871      	adds	r1, r6, r1
    5938:	784a      	ldrb	r2, [r1, #1]
    593a:	0712      	lsls	r2, r2, #28
    593c:	0f12      	lsrs	r2, r2, #28
    593e:	4295      	cmp	r5, r2
    5940:	dbf2      	blt.n	5928 <SearchAvailableChannel1+0x64>
    5942:	784a      	ldrb	r2, [r1, #1]
    5944:	0912      	lsrs	r2, r2, #4
    5946:	4297      	cmp	r7, r2
    5948:	dcee      	bgt.n	5928 <SearchAvailableChannel1+0x64>
    594a:	780a      	ldrb	r2, [r1, #0]
    594c:	2a00      	cmp	r2, #0
    594e:	d0eb      	beq.n	5928 <SearchAvailableChannel1+0x64>
				randomNumber --;
    5950:	3c01      	subs	r4, #1
    5952:	b2e4      	uxtb	r4, r4
    5954:	e7e8      	b.n	5928 <SearchAvailableChannel1+0x64>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5956:	9b00      	ldr	r3, [sp, #0]
		if ( randomNumber == randomNumberCopy )
    5958:	45a3      	cmp	fp, r4
    595a:	d00a      	beq.n	5972 <SearchAvailableChannel1+0xae>
	while (randomNumber)
    595c:	2c00      	cmp	r4, #0
    595e:	d006      	beq.n	596e <SearchAvailableChannel1+0xaa>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5960:	4581      	cmp	r9, r0
    5962:	daf8      	bge.n	5956 <SearchAvailableChannel1+0x92>
    5964:	2c00      	cmp	r4, #0
    5966:	d001      	beq.n	596c <SearchAvailableChannel1+0xa8>
    5968:	9b00      	ldr	r3, [sp, #0]
    596a:	e7e3      	b.n	5934 <SearchAvailableChannel1+0x70>
    596c:	464b      	mov	r3, r9
	StackRetStatus_t result = LORAWAN_SUCCESS;
    596e:	2008      	movs	r0, #8
    5970:	e000      	b.n	5974 <SearchAvailableChannel1+0xb0>
			result = LORAWAN_NO_CHANNELS_FOUND;
    5972:	2010      	movs	r0, #16
	if (i != 0)
    5974:	2b00      	cmp	r3, #0
    5976:	d109      	bne.n	598c <SearchAvailableChannel1+0xc8>
		*channelIndex = maxChannels - 1;
    5978:	9c01      	ldr	r4, [sp, #4]
    597a:	3c01      	subs	r4, #1
    597c:	4643      	mov	r3, r8
    597e:	701c      	strb	r4, [r3, #0]
}
    5980:	b002      	add	sp, #8
    5982:	bc1c      	pop	{r2, r3, r4}
    5984:	4690      	mov	r8, r2
    5986:	4699      	mov	r9, r3
    5988:	46a3      	mov	fp, r4
    598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*channelIndex = i - 1;
    598c:	3b01      	subs	r3, #1
    598e:	4642      	mov	r2, r8
    5990:	7013      	strb	r3, [r2, #0]
    5992:	e7f5      	b.n	5980 <SearchAvailableChannel1+0xbc>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5994:	2008      	movs	r0, #8
    5996:	e7ef      	b.n	5978 <SearchAvailableChannel1+0xb4>
    5998:	00015acd 	.word	0x00015acd
    599c:	000129ed 	.word	0x000129ed
    59a0:	200013e0 	.word	0x200013e0

000059a4 <LORAREG_GetAttr_FreeChannel1>:
{
    59a4:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    59a6:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    59a8:	2022      	movs	r0, #34	; 0x22
    59aa:	4d07      	ldr	r5, [pc, #28]	; (59c8 <LORAREG_GetAttr_FreeChannel1+0x24>)
    59ac:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    59ae:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    59b0:	42ac      	cmp	r4, r5
    59b2:	dd00      	ble.n	59b6 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    59b4:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    59b6:	7888      	ldrb	r0, [r1, #2]
    59b8:	7809      	ldrb	r1, [r1, #0]
    59ba:	0013      	movs	r3, r2
    59bc:	0002      	movs	r2, r0
    59be:	0020      	movs	r0, r4
    59c0:	4c02      	ldr	r4, [pc, #8]	; (59cc <LORAREG_GetAttr_FreeChannel1+0x28>)
    59c2:	47a0      	blx	r4
	return result;
    59c4:	e7f6      	b.n	59b4 <LORAREG_GetAttr_FreeChannel1+0x10>
    59c6:	46c0      	nop			; (mov r8, r8)
    59c8:	200013e0 	.word	0x200013e0
    59cc:	000058c5 	.word	0x000058c5

000059d0 <SearchAvailableChannel2>:
{
    59d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    59d2:	46de      	mov	lr, fp
    59d4:	4657      	mov	r7, sl
    59d6:	464e      	mov	r6, r9
    59d8:	4645      	mov	r5, r8
    59da:	b5e0      	push	{r5, r6, r7, lr}
    59dc:	b087      	sub	sp, #28
    59de:	9003      	str	r0, [sp, #12]
    59e0:	9102      	str	r1, [sp, #8]
    59e2:	0015      	movs	r5, r2
    59e4:	9304      	str	r3, [sp, #16]
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    59e6:	4958      	ldr	r1, [pc, #352]	; (5b48 <SearchAvailableChannel2+0x178>)
    59e8:	23d1      	movs	r3, #209	; 0xd1
    59ea:	005b      	lsls	r3, r3, #1
    59ec:	5ccb      	ldrb	r3, [r1, r3]
    59ee:	22a4      	movs	r2, #164	; 0xa4
    59f0:	32ff      	adds	r2, #255	; 0xff
    59f2:	5c8a      	ldrb	r2, [r1, r2]
    59f4:	0212      	lsls	r2, r2, #8
    59f6:	431a      	orrs	r2, r3
    59f8:	23d2      	movs	r3, #210	; 0xd2
    59fa:	005b      	lsls	r3, r3, #1
    59fc:	5ccb      	ldrb	r3, [r1, r3]
    59fe:	041b      	lsls	r3, r3, #16
    5a00:	431a      	orrs	r2, r3
    5a02:	23a6      	movs	r3, #166	; 0xa6
    5a04:	33ff      	adds	r3, #255	; 0xff
    5a06:	5ccb      	ldrb	r3, [r1, r3]
    5a08:	061b      	lsls	r3, r3, #24
    5a0a:	4313      	orrs	r3, r2
		return LORAWAN_NO_CHANNELS_FOUND;
    5a0c:	2010      	movs	r0, #16
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d006      	beq.n	5a20 <SearchAvailableChannel2+0x50>
}
    5a12:	b007      	add	sp, #28
    5a14:	bc3c      	pop	{r2, r3, r4, r5}
    5a16:	4690      	mov	r8, r2
    5a18:	4699      	mov	r9, r3
    5a1a:	46a2      	mov	sl, r4
    5a1c:	46ab      	mov	fp, r5
    5a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	randomNumber = (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    5a20:	4b4a      	ldr	r3, [pc, #296]	; (5b4c <SearchAvailableChannel2+0x17c>)
    5a22:	4798      	blx	r3
    5a24:	9903      	ldr	r1, [sp, #12]
    5a26:	000c      	movs	r4, r1
    5a28:	4b49      	ldr	r3, [pc, #292]	; (5b50 <SearchAvailableChannel2+0x180>)
    5a2a:	4798      	blx	r3
    5a2c:	3101      	adds	r1, #1
    5a2e:	b2cb      	uxtb	r3, r1
    5a30:	1e18      	subs	r0, r3, #0
    5a32:	9305      	str	r3, [sp, #20]
	while (randomNumber)
    5a34:	d100      	bne.n	5a38 <SearchAvailableChannel2+0x68>
    5a36:	e085      	b.n	5b44 <SearchAvailableChannel2+0x174>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    5a38:	4b43      	ldr	r3, [pc, #268]	; (5b48 <SearchAvailableChannel2+0x178>)
    5a3a:	791e      	ldrb	r6, [r3, #4]
    5a3c:	795a      	ldrb	r2, [r3, #5]
    5a3e:	0212      	lsls	r2, r2, #8
    5a40:	4332      	orrs	r2, r6
    5a42:	799e      	ldrb	r6, [r3, #6]
    5a44:	0436      	lsls	r6, r6, #16
    5a46:	4332      	orrs	r2, r6
    5a48:	79de      	ldrb	r6, [r3, #7]
    5a4a:	0636      	lsls	r6, r6, #24
    5a4c:	4316      	orrs	r6, r2
			bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    5a4e:	2226      	movs	r2, #38	; 0x26
    5a50:	5c99      	ldrb	r1, [r3, r2]
    5a52:	4a40      	ldr	r2, [pc, #256]	; (5b54 <SearchAvailableChannel2+0x184>)
    5a54:	410a      	asrs	r2, r1
    5a56:	2101      	movs	r1, #1
    5a58:	4011      	ands	r1, r2
    5a5a:	468a      	mov	sl, r1
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    5a5c:	7b19      	ldrb	r1, [r3, #12]
    5a5e:	7b5a      	ldrb	r2, [r3, #13]
    5a60:	0212      	lsls	r2, r2, #8
    5a62:	4311      	orrs	r1, r2
    5a64:	7b9a      	ldrb	r2, [r3, #14]
    5a66:	0412      	lsls	r2, r2, #16
    5a68:	430a      	orrs	r2, r1
    5a6a:	7bd9      	ldrb	r1, [r3, #15]
    5a6c:	0609      	lsls	r1, r1, #24
    5a6e:	4311      	orrs	r1, r2
    5a70:	4689      	mov	r9, r1
    5a72:	7a19      	ldrb	r1, [r3, #8]
    5a74:	7a5a      	ldrb	r2, [r3, #9]
    5a76:	0212      	lsls	r2, r2, #8
    5a78:	4311      	orrs	r1, r2
    5a7a:	7a9a      	ldrb	r2, [r3, #10]
    5a7c:	0412      	lsls	r2, r2, #16
    5a7e:	430a      	orrs	r2, r1
    5a80:	7adb      	ldrb	r3, [r3, #11]
    5a82:	061b      	lsls	r3, r3, #24
    5a84:	4313      	orrs	r3, r2
    5a86:	469b      	mov	fp, r3
    5a88:	0001      	movs	r1, r0
    5a8a:	46a8      	mov	r8, r5
    5a8c:	e045      	b.n	5b1a <SearchAvailableChannel2+0x14a>
				    randomNumber --;					
    5a8e:	3901      	subs	r1, #1
    5a90:	b2c9      	uxtb	r1, r1
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5a92:	3301      	adds	r3, #1
    5a94:	b2db      	uxtb	r3, r3
    5a96:	429c      	cmp	r4, r3
    5a98:	dd3a      	ble.n	5b10 <SearchAvailableChannel2+0x140>
    5a9a:	2900      	cmp	r1, #0
    5a9c:	d044      	beq.n	5b28 <SearchAvailableChannel2+0x158>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    5a9e:	001f      	movs	r7, r3
    5aa0:	0058      	lsls	r0, r3, #1
    5aa2:	1830      	adds	r0, r6, r0
    5aa4:	7842      	ldrb	r2, [r0, #1]
    5aa6:	0712      	lsls	r2, r2, #28
    5aa8:	0f12      	lsrs	r2, r2, #28
    5aaa:	4295      	cmp	r5, r2
    5aac:	dbf1      	blt.n	5a92 <SearchAvailableChannel2+0xc2>
    5aae:	7842      	ldrb	r2, [r0, #1]
    5ab0:	0912      	lsrs	r2, r2, #4
    5ab2:	4590      	cmp	r8, r2
    5ab4:	dced      	bgt.n	5a92 <SearchAvailableChannel2+0xc2>
    5ab6:	7802      	ldrb	r2, [r0, #0]
    5ab8:	2a00      	cmp	r2, #0
    5aba:	d0ea      	beq.n	5a92 <SearchAvailableChannel2+0xc2>
				(RegParams.pChParams[i].status == ENABLED) && \
    5abc:	4652      	mov	r2, sl
    5abe:	2a00      	cmp	r2, #0
    5ac0:	d018      	beq.n	5af4 <SearchAvailableChannel2+0x124>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    5ac2:	005a      	lsls	r2, r3, #1
    5ac4:	18d2      	adds	r2, r2, r3
    5ac6:	0092      	lsls	r2, r2, #2
    5ac8:	445a      	add	r2, fp
    5aca:	7a10      	ldrb	r0, [r2, #8]
    5acc:	0042      	lsls	r2, r0, #1
    5ace:	1812      	adds	r2, r2, r0
    5ad0:	0092      	lsls	r2, r2, #2
    5ad2:	444a      	add	r2, r9
    5ad4:	7a10      	ldrb	r0, [r2, #8]
    5ad6:	4684      	mov	ip, r0
    5ad8:	9201      	str	r2, [sp, #4]
    5ada:	7a50      	ldrb	r0, [r2, #9]
    5adc:	0200      	lsls	r0, r0, #8
    5ade:	4662      	mov	r2, ip
    5ae0:	4310      	orrs	r0, r2
    5ae2:	9a01      	ldr	r2, [sp, #4]
    5ae4:	7a92      	ldrb	r2, [r2, #10]
    5ae6:	0412      	lsls	r2, r2, #16
    5ae8:	4310      	orrs	r0, r2
    5aea:	9a01      	ldr	r2, [sp, #4]
    5aec:	7ad2      	ldrb	r2, [r2, #11]
    5aee:	0612      	lsls	r2, r2, #24
    5af0:	4302      	orrs	r2, r0
    5af2:	d1ce      	bne.n	5a92 <SearchAvailableChannel2+0xc2>
				if(transmissionType == 0  && RegParams.pOtherChParams[i].joinRequestChannel == 1)
    5af4:	9a02      	ldr	r2, [sp, #8]
    5af6:	2a00      	cmp	r2, #0
    5af8:	d1c9      	bne.n	5a8e <SearchAvailableChannel2+0xbe>
    5afa:	007a      	lsls	r2, r7, #1
    5afc:	19d7      	adds	r7, r2, r7
    5afe:	00bf      	lsls	r7, r7, #2
    5b00:	445f      	add	r7, fp
    5b02:	7a7a      	ldrb	r2, [r7, #9]
    5b04:	2a00      	cmp	r2, #0
    5b06:	d0c4      	beq.n	5a92 <SearchAvailableChannel2+0xc2>
					randomNumber --;
    5b08:	3901      	subs	r1, #1
    5b0a:	b2c9      	uxtb	r1, r1
    5b0c:	e7c1      	b.n	5a92 <SearchAvailableChannel2+0xc2>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5b0e:	2300      	movs	r3, #0
		if ( randomNumber == randomNumberCopy )
    5b10:	9a05      	ldr	r2, [sp, #20]
    5b12:	428a      	cmp	r2, r1
    5b14:	d00a      	beq.n	5b2c <SearchAvailableChannel2+0x15c>
	while (randomNumber)
    5b16:	2900      	cmp	r1, #0
    5b18:	d006      	beq.n	5b28 <SearchAvailableChannel2+0x158>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5b1a:	2c00      	cmp	r4, #0
    5b1c:	ddf7      	ble.n	5b0e <SearchAvailableChannel2+0x13e>
    5b1e:	2900      	cmp	r1, #0
    5b20:	d001      	beq.n	5b26 <SearchAvailableChannel2+0x156>
    5b22:	2300      	movs	r3, #0
    5b24:	e7bb      	b.n	5a9e <SearchAvailableChannel2+0xce>
    5b26:	000b      	movs	r3, r1
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5b28:	2008      	movs	r0, #8
    5b2a:	e000      	b.n	5b2e <SearchAvailableChannel2+0x15e>
			result = LORAWAN_NO_CHANNELS_FOUND;
    5b2c:	2010      	movs	r0, #16
	if (i != 0)
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d104      	bne.n	5b3c <SearchAvailableChannel2+0x16c>
		*channelIndex = maxChannels - 1;
    5b32:	9b03      	ldr	r3, [sp, #12]
    5b34:	3b01      	subs	r3, #1
    5b36:	9a04      	ldr	r2, [sp, #16]
    5b38:	7013      	strb	r3, [r2, #0]
    5b3a:	e76a      	b.n	5a12 <SearchAvailableChannel2+0x42>
		*channelIndex = i - 1;
    5b3c:	3b01      	subs	r3, #1
    5b3e:	9a04      	ldr	r2, [sp, #16]
    5b40:	7013      	strb	r3, [r2, #0]
    5b42:	e766      	b.n	5a12 <SearchAvailableChannel2+0x42>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5b44:	2008      	movs	r0, #8
    5b46:	e7f4      	b.n	5b32 <SearchAvailableChannel2+0x162>
    5b48:	200013e0 	.word	0x200013e0
    5b4c:	00015acd 	.word	0x00015acd
    5b50:	000129ed 	.word	0x000129ed
    5b54:	00007fe3 	.word	0x00007fe3

00005b58 <LORAREG_GetAttr_FreeChannel2>:
{
    5b58:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    5b5a:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5b5c:	2022      	movs	r0, #34	; 0x22
    5b5e:	4d07      	ldr	r5, [pc, #28]	; (5b7c <LORAREG_GetAttr_FreeChannel2+0x24>)
    5b60:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    5b62:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5b64:	42ac      	cmp	r4, r5
    5b66:	dd00      	ble.n	5b6a <LORAREG_GetAttr_FreeChannel2+0x12>
}
    5b68:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    5b6a:	7888      	ldrb	r0, [r1, #2]
    5b6c:	7809      	ldrb	r1, [r1, #0]
    5b6e:	0013      	movs	r3, r2
    5b70:	0002      	movs	r2, r0
    5b72:	0020      	movs	r0, r4
    5b74:	4c02      	ldr	r4, [pc, #8]	; (5b80 <LORAREG_GetAttr_FreeChannel2+0x28>)
    5b76:	47a0      	blx	r4
	return result;
    5b78:	e7f6      	b.n	5b68 <LORAREG_GetAttr_FreeChannel2+0x10>
    5b7a:	46c0      	nop			; (mov r8, r8)
    5b7c:	200013e0 	.word	0x200013e0
    5b80:	000059d1 	.word	0x000059d1

00005b84 <UpdateChannelIdStatus>:
{
    5b84:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    5b86:	2322      	movs	r3, #34	; 0x22
    5b88:	4a14      	ldr	r2, [pc, #80]	; (5bdc <UpdateChannelIdStatus+0x58>)
    5b8a:	56d3      	ldrsb	r3, [r2, r3]
    5b8c:	4298      	cmp	r0, r3
    5b8e:	db0b      	blt.n	5ba8 <UpdateChannelIdStatus+0x24>
    5b90:	2326      	movs	r3, #38	; 0x26
    5b92:	5cd2      	ldrb	r2, [r2, r3]
    5b94:	3b1a      	subs	r3, #26
    5b96:	4113      	asrs	r3, r2
    5b98:	07db      	lsls	r3, r3, #31
    5b9a:	d41e      	bmi.n	5bda <UpdateChannelIdStatus+0x56>
    5b9c:	23aa      	movs	r3, #170	; 0xaa
    5b9e:	33ff      	adds	r3, #255	; 0xff
    5ba0:	4a0e      	ldr	r2, [pc, #56]	; (5bdc <UpdateChannelIdStatus+0x58>)
    5ba2:	5cd3      	ldrb	r3, [r2, r3]
    5ba4:	4283      	cmp	r3, r0
    5ba6:	d818      	bhi.n	5bda <UpdateChannelIdStatus+0x56>
		RegParams.pChParams[chid].status = statusNew;
    5ba8:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <UpdateChannelIdStatus+0x58>)
    5baa:	791a      	ldrb	r2, [r3, #4]
    5bac:	795c      	ldrb	r4, [r3, #5]
    5bae:	0224      	lsls	r4, r4, #8
    5bb0:	4314      	orrs	r4, r2
    5bb2:	799a      	ldrb	r2, [r3, #6]
    5bb4:	0412      	lsls	r2, r2, #16
    5bb6:	4314      	orrs	r4, r2
    5bb8:	79da      	ldrb	r2, [r3, #7]
    5bba:	0612      	lsls	r2, r2, #24
    5bbc:	4322      	orrs	r2, r4
    5bbe:	0040      	lsls	r0, r0, #1
    5bc0:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5bc2:	22f8      	movs	r2, #248	; 0xf8
    5bc4:	32ff      	adds	r2, #255	; 0xff
    5bc6:	5c9a      	ldrb	r2, [r3, r2]
    5bc8:	21fc      	movs	r1, #252	; 0xfc
    5bca:	0049      	lsls	r1, r1, #1
    5bcc:	5c58      	ldrb	r0, [r3, r1]
    5bce:	0200      	lsls	r0, r0, #8
    5bd0:	4310      	orrs	r0, r2
    5bd2:	b2c1      	uxtb	r1, r0
    5bd4:	0a00      	lsrs	r0, r0, #8
    5bd6:	4b02      	ldr	r3, [pc, #8]	; (5be0 <UpdateChannelIdStatus+0x5c>)
    5bd8:	4798      	blx	r3
}
    5bda:	bd10      	pop	{r4, pc}
    5bdc:	200013e0 	.word	0x200013e0
    5be0:	00008ec5 	.word	0x00008ec5

00005be4 <EnableChannels2>:
{
    5be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be6:	46ce      	mov	lr, r9
    5be8:	4647      	mov	r7, r8
    5bea:	b580      	push	{r7, lr}
    5bec:	0004      	movs	r4, r0
    5bee:	000f      	movs	r7, r1
    5bf0:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    5bf2:	4288      	cmp	r0, r1
    5bf4:	d812      	bhi.n	5c1c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    5bf6:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    5bf8:	4b0a      	ldr	r3, [pc, #40]	; (5c24 <EnableChannels2+0x40>)
    5bfa:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    5bfc:	4698      	mov	r8, r3
    5bfe:	e007      	b.n	5c10 <EnableChannels2+0x2c>
    5c00:	2100      	movs	r1, #0
    5c02:	0020      	movs	r0, r4
    5c04:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    5c06:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    5c08:	3401      	adds	r4, #1
    5c0a:	b2e4      	uxtb	r4, r4
    5c0c:	42a7      	cmp	r7, r4
    5c0e:	d305      	bcc.n	5c1c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    5c10:	422e      	tst	r6, r5
    5c12:	d0f5      	beq.n	5c00 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    5c14:	0031      	movs	r1, r6
    5c16:	0020      	movs	r0, r4
    5c18:	47c8      	blx	r9
    5c1a:	e7f4      	b.n	5c06 <EnableChannels2+0x22>
}
    5c1c:	bc0c      	pop	{r2, r3}
    5c1e:	4690      	mov	r8, r2
    5c20:	4699      	mov	r9, r3
    5c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c24:	00005b85 	.word	0x00005b85

00005c28 <UpdateChannelIdStatusT2>:
{
    5c28:	b570      	push	{r4, r5, r6, lr}
    5c2a:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5c2c:	2322      	movs	r3, #34	; 0x22
    5c2e:	4a40      	ldr	r2, [pc, #256]	; (5d30 <UpdateChannelIdStatusT2+0x108>)
    5c30:	56d3      	ldrsb	r3, [r2, r3]
    5c32:	4298      	cmp	r0, r3
    5c34:	da17      	bge.n	5c66 <UpdateChannelIdStatusT2+0x3e>
    5c36:	23aa      	movs	r3, #170	; 0xaa
    5c38:	33ff      	adds	r3, #255	; 0xff
    5c3a:	5cd3      	ldrb	r3, [r2, r3]
    5c3c:	4283      	cmp	r3, r0
    5c3e:	d812      	bhi.n	5c66 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    5c40:	0045      	lsls	r5, r0, #1
    5c42:	182d      	adds	r5, r5, r0
    5c44:	00ad      	lsls	r5, r5, #2
    5c46:	0011      	movs	r1, r2
    5c48:	7a13      	ldrb	r3, [r2, #8]
    5c4a:	7a52      	ldrb	r2, [r2, #9]
    5c4c:	0212      	lsls	r2, r2, #8
    5c4e:	431a      	orrs	r2, r3
    5c50:	7a8b      	ldrb	r3, [r1, #10]
    5c52:	041b      	lsls	r3, r3, #16
    5c54:	431a      	orrs	r2, r3
    5c56:	7acb      	ldrb	r3, [r1, #11]
    5c58:	061b      	lsls	r3, r3, #24
    5c5a:	4313      	orrs	r3, r2
    5c5c:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5c5e:	7adb      	ldrb	r3, [r3, #11]
    5c60:	43db      	mvns	r3, r3
    5c62:	079b      	lsls	r3, r3, #30
    5c64:	d000      	beq.n	5c68 <UpdateChannelIdStatusT2+0x40>
}
    5c66:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    5c68:	000e      	movs	r6, r1
    5c6a:	790b      	ldrb	r3, [r1, #4]
    5c6c:	794a      	ldrb	r2, [r1, #5]
    5c6e:	0212      	lsls	r2, r2, #8
    5c70:	431a      	orrs	r2, r3
    5c72:	798b      	ldrb	r3, [r1, #6]
    5c74:	041b      	lsls	r3, r3, #16
    5c76:	431a      	orrs	r2, r3
    5c78:	79cb      	ldrb	r3, [r1, #7]
    5c7a:	061b      	lsls	r3, r3, #24
    5c7c:	4313      	orrs	r3, r2
    5c7e:	0040      	lsls	r0, r0, #1
    5c80:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5c82:	23f8      	movs	r3, #248	; 0xf8
    5c84:	33ff      	adds	r3, #255	; 0xff
    5c86:	5ccb      	ldrb	r3, [r1, r3]
    5c88:	22fc      	movs	r2, #252	; 0xfc
    5c8a:	0052      	lsls	r2, r2, #1
    5c8c:	5c88      	ldrb	r0, [r1, r2]
    5c8e:	0200      	lsls	r0, r0, #8
    5c90:	4318      	orrs	r0, r3
    5c92:	b2c1      	uxtb	r1, r0
    5c94:	0a00      	lsrs	r0, r0, #8
    5c96:	4b27      	ldr	r3, [pc, #156]	; (5d34 <UpdateChannelIdStatusT2+0x10c>)
    5c98:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    5c9a:	2326      	movs	r3, #38	; 0x26
    5c9c:	5cf2      	ldrb	r2, [r6, r3]
    5c9e:	3b23      	subs	r3, #35	; 0x23
    5ca0:	4113      	asrs	r3, r2
    5ca2:	07db      	lsls	r3, r3, #31
    5ca4:	d5df      	bpl.n	5c66 <UpdateChannelIdStatusT2+0x3e>
    5ca6:	2c00      	cmp	r4, #0
    5ca8:	d1dd      	bne.n	5c66 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    5caa:	4b21      	ldr	r3, [pc, #132]	; (5d30 <UpdateChannelIdStatusT2+0x108>)
    5cac:	7a18      	ldrb	r0, [r3, #8]
    5cae:	7a5a      	ldrb	r2, [r3, #9]
    5cb0:	0212      	lsls	r2, r2, #8
    5cb2:	4302      	orrs	r2, r0
    5cb4:	7a98      	ldrb	r0, [r3, #10]
    5cb6:	0400      	lsls	r0, r0, #16
    5cb8:	4302      	orrs	r2, r0
    5cba:	7ad8      	ldrb	r0, [r3, #11]
    5cbc:	0600      	lsls	r0, r0, #24
    5cbe:	4310      	orrs	r0, r2
    5cc0:	1945      	adds	r5, r0, r5
    5cc2:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    5cc4:	2222      	movs	r2, #34	; 0x22
    5cc6:	569c      	ldrsb	r4, [r3, r2]
    5cc8:	2c00      	cmp	r4, #0
    5cca:	dd1c      	ble.n	5d06 <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    5ccc:	001a      	movs	r2, r3
    5cce:	7919      	ldrb	r1, [r3, #4]
    5cd0:	795b      	ldrb	r3, [r3, #5]
    5cd2:	021b      	lsls	r3, r3, #8
    5cd4:	430b      	orrs	r3, r1
    5cd6:	7991      	ldrb	r1, [r2, #6]
    5cd8:	0409      	lsls	r1, r1, #16
    5cda:	430b      	orrs	r3, r1
    5cdc:	79d1      	ldrb	r1, [r2, #7]
    5cde:	0609      	lsls	r1, r1, #24
    5ce0:	4319      	orrs	r1, r3
    5ce2:	2300      	movs	r3, #0
    5ce4:	e003      	b.n	5cee <UpdateChannelIdStatusT2+0xc6>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    5ce6:	3301      	adds	r3, #1
    5ce8:	b2db      	uxtb	r3, r3
    5cea:	42a3      	cmp	r3, r4
    5cec:	da0b      	bge.n	5d06 <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    5cee:	005a      	lsls	r2, r3, #1
    5cf0:	5c52      	ldrb	r2, [r2, r1]
    5cf2:	2a00      	cmp	r2, #0
    5cf4:	d0f7      	beq.n	5ce6 <UpdateChannelIdStatusT2+0xbe>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    5cf6:	005a      	lsls	r2, r3, #1
    5cf8:	18d2      	adds	r2, r2, r3
    5cfa:	0092      	lsls	r2, r2, #2
    5cfc:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    5cfe:	7a12      	ldrb	r2, [r2, #8]
    5d00:	42aa      	cmp	r2, r5
    5d02:	d1f0      	bne.n	5ce6 <UpdateChannelIdStatusT2+0xbe>
    5d04:	e7af      	b.n	5c66 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    5d06:	490a      	ldr	r1, [pc, #40]	; (5d30 <UpdateChannelIdStatusT2+0x108>)
    5d08:	7b0a      	ldrb	r2, [r1, #12]
    5d0a:	7b4b      	ldrb	r3, [r1, #13]
    5d0c:	021b      	lsls	r3, r3, #8
    5d0e:	4313      	orrs	r3, r2
    5d10:	7b8a      	ldrb	r2, [r1, #14]
    5d12:	0412      	lsls	r2, r2, #16
    5d14:	4313      	orrs	r3, r2
    5d16:	7bca      	ldrb	r2, [r1, #15]
    5d18:	0612      	lsls	r2, r2, #24
    5d1a:	431a      	orrs	r2, r3
    5d1c:	006b      	lsls	r3, r5, #1
    5d1e:	195d      	adds	r5, r3, r5
    5d20:	00ad      	lsls	r5, r5, #2
    5d22:	18ad      	adds	r5, r5, r2
    5d24:	2300      	movs	r3, #0
    5d26:	722b      	strb	r3, [r5, #8]
    5d28:	726b      	strb	r3, [r5, #9]
    5d2a:	72ab      	strb	r3, [r5, #10]
    5d2c:	72eb      	strb	r3, [r5, #11]
    5d2e:	e79a      	b.n	5c66 <UpdateChannelIdStatusT2+0x3e>
    5d30:	200013e0 	.word	0x200013e0
    5d34:	00008ec5 	.word	0x00008ec5

00005d38 <setChannelIdStatusT2>:
{
    5d38:	b570      	push	{r4, r5, r6, lr}
    5d3a:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5d3c:	780d      	ldrb	r5, [r1, #0]
    5d3e:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5d40:	a901      	add	r1, sp, #4
    5d42:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    5d44:	2300      	movs	r3, #0
    5d46:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5d48:	2015      	movs	r0, #21
    5d4a:	4b0c      	ldr	r3, [pc, #48]	; (5d7c <setChannelIdStatusT2+0x44>)
    5d4c:	4798      	blx	r3
    5d4e:	0004      	movs	r4, r0
    5d50:	2808      	cmp	r0, #8
    5d52:	d003      	beq.n	5d5c <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5d54:	240a      	movs	r4, #10
}
    5d56:	0020      	movs	r0, r4
    5d58:	b002      	add	sp, #8
    5d5a:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    5d5c:	2326      	movs	r3, #38	; 0x26
    5d5e:	4a08      	ldr	r2, [pc, #32]	; (5d80 <setChannelIdStatusT2+0x48>)
    5d60:	5cd3      	ldrb	r3, [r2, r3]
    5d62:	2b0f      	cmp	r3, #15
    5d64:	d004      	beq.n	5d70 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    5d66:	0031      	movs	r1, r6
    5d68:	0028      	movs	r0, r5
    5d6a:	4b06      	ldr	r3, [pc, #24]	; (5d84 <setChannelIdStatusT2+0x4c>)
    5d6c:	4798      	blx	r3
    5d6e:	e7f2      	b.n	5d56 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5d70:	0031      	movs	r1, r6
    5d72:	0028      	movs	r0, r5
    5d74:	4b04      	ldr	r3, [pc, #16]	; (5d88 <setChannelIdStatusT2+0x50>)
    5d76:	4798      	blx	r3
    5d78:	e7ed      	b.n	5d56 <setChannelIdStatusT2+0x1e>
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	000054e5 	.word	0x000054e5
    5d80:	200013e0 	.word	0x200013e0
    5d84:	00005c29 	.word	0x00005c29
    5d88:	00005b85 	.word	0x00005b85

00005d8c <UpdateChannelIdStatusT4>:
{
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	0004      	movs	r4, r0
    5d90:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    5d92:	4925      	ldr	r1, [pc, #148]	; (5e28 <UpdateChannelIdStatusT4+0x9c>)
    5d94:	790b      	ldrb	r3, [r1, #4]
    5d96:	794a      	ldrb	r2, [r1, #5]
    5d98:	0212      	lsls	r2, r2, #8
    5d9a:	431a      	orrs	r2, r3
    5d9c:	798b      	ldrb	r3, [r1, #6]
    5d9e:	041b      	lsls	r3, r3, #16
    5da0:	431a      	orrs	r2, r3
    5da2:	79cb      	ldrb	r3, [r1, #7]
    5da4:	061b      	lsls	r3, r3, #24
    5da6:	4313      	orrs	r3, r2
    5da8:	0042      	lsls	r2, r0, #1
    5daa:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5dac:	23f8      	movs	r3, #248	; 0xf8
    5dae:	33ff      	adds	r3, #255	; 0xff
    5db0:	5ccb      	ldrb	r3, [r1, r3]
    5db2:	22fc      	movs	r2, #252	; 0xfc
    5db4:	0052      	lsls	r2, r2, #1
    5db6:	5c88      	ldrb	r0, [r1, r2]
    5db8:	0200      	lsls	r0, r0, #8
    5dba:	4318      	orrs	r0, r3
    5dbc:	b2c1      	uxtb	r1, r0
    5dbe:	0a00      	lsrs	r0, r0, #8
    5dc0:	4b1a      	ldr	r3, [pc, #104]	; (5e2c <UpdateChannelIdStatusT4+0xa0>)
    5dc2:	4798      	blx	r3
	if(statusNew == ENABLED)
    5dc4:	2d00      	cmp	r5, #0
    5dc6:	d02a      	beq.n	5e1e <UpdateChannelIdStatusT4+0x92>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    5dc8:	4a17      	ldr	r2, [pc, #92]	; (5e28 <UpdateChannelIdStatusT4+0x9c>)
    5dca:	7a10      	ldrb	r0, [r2, #8]
    5dcc:	7a53      	ldrb	r3, [r2, #9]
    5dce:	021b      	lsls	r3, r3, #8
    5dd0:	4303      	orrs	r3, r0
    5dd2:	7a90      	ldrb	r0, [r2, #10]
    5dd4:	0400      	lsls	r0, r0, #16
    5dd6:	4303      	orrs	r3, r0
    5dd8:	7ad0      	ldrb	r0, [r2, #11]
    5dda:	0600      	lsls	r0, r0, #24
    5ddc:	4318      	orrs	r0, r3
    5dde:	0063      	lsls	r3, r4, #1
    5de0:	191c      	adds	r4, r3, r4
    5de2:	00a4      	lsls	r4, r4, #2
    5de4:	1900      	adds	r0, r0, r4
    5de6:	7803      	ldrb	r3, [r0, #0]
    5de8:	7842      	ldrb	r2, [r0, #1]
    5dea:	0212      	lsls	r2, r2, #8
    5dec:	431a      	orrs	r2, r3
    5dee:	7883      	ldrb	r3, [r0, #2]
    5df0:	041b      	lsls	r3, r3, #16
    5df2:	431a      	orrs	r2, r3
    5df4:	78c3      	ldrb	r3, [r0, #3]
    5df6:	061b      	lsls	r3, r3, #24
    5df8:	4313      	orrs	r3, r2
    5dfa:	4a0d      	ldr	r2, [pc, #52]	; (5e30 <UpdateChannelIdStatusT4+0xa4>)
    5dfc:	4293      	cmp	r3, r2
    5dfe:	d80f      	bhi.n	5e20 <UpdateChannelIdStatusT4+0x94>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_LF;
    5e00:	230a      	movs	r3, #10
    5e02:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5e04:	4b08      	ldr	r3, [pc, #32]	; (5e28 <UpdateChannelIdStatusT4+0x9c>)
    5e06:	22fa      	movs	r2, #250	; 0xfa
    5e08:	32ff      	adds	r2, #255	; 0xff
    5e0a:	5c9a      	ldrb	r2, [r3, r2]
    5e0c:	21fd      	movs	r1, #253	; 0xfd
    5e0e:	0049      	lsls	r1, r1, #1
    5e10:	5c58      	ldrb	r0, [r3, r1]
    5e12:	0200      	lsls	r0, r0, #8
    5e14:	4310      	orrs	r0, r2
    5e16:	b2c1      	uxtb	r1, r0
    5e18:	0a00      	lsrs	r0, r0, #8
    5e1a:	4b04      	ldr	r3, [pc, #16]	; (5e2c <UpdateChannelIdStatusT4+0xa0>)
    5e1c:	4798      	blx	r3
}
    5e1e:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_HF;
    5e20:	230e      	movs	r3, #14
    5e22:	7283      	strb	r3, [r0, #10]
    5e24:	e7ee      	b.n	5e04 <UpdateChannelIdStatusT4+0x78>
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	200013e0 	.word	0x200013e0
    5e2c:	00008ec5 	.word	0x00008ec5
    5e30:	36f6211f 	.word	0x36f6211f

00005e34 <UpdateChannelIdStatusT3>:
{
    5e34:	b570      	push	{r4, r5, r6, lr}
    5e36:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    5e38:	0046      	lsls	r6, r0, #1
    5e3a:	4c2a      	ldr	r4, [pc, #168]	; (5ee4 <UpdateChannelIdStatusT3+0xb0>)
    5e3c:	7923      	ldrb	r3, [r4, #4]
    5e3e:	7962      	ldrb	r2, [r4, #5]
    5e40:	0212      	lsls	r2, r2, #8
    5e42:	431a      	orrs	r2, r3
    5e44:	79a3      	ldrb	r3, [r4, #6]
    5e46:	041b      	lsls	r3, r3, #16
    5e48:	431a      	orrs	r2, r3
    5e4a:	79e3      	ldrb	r3, [r4, #7]
    5e4c:	061b      	lsls	r3, r3, #24
    5e4e:	4313      	orrs	r3, r2
    5e50:	5599      	strb	r1, [r3, r6]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5e52:	23f8      	movs	r3, #248	; 0xf8
    5e54:	33ff      	adds	r3, #255	; 0xff
    5e56:	5ce3      	ldrb	r3, [r4, r3]
    5e58:	22fc      	movs	r2, #252	; 0xfc
    5e5a:	0052      	lsls	r2, r2, #1
    5e5c:	5ca0      	ldrb	r0, [r4, r2]
    5e5e:	0200      	lsls	r0, r0, #8
    5e60:	4318      	orrs	r0, r3
    5e62:	b2c1      	uxtb	r1, r0
    5e64:	0a00      	lsrs	r0, r0, #8
    5e66:	4b20      	ldr	r3, [pc, #128]	; (5ee8 <UpdateChannelIdStatusT3+0xb4>)
    5e68:	4798      	blx	r3
	if(RegParams.pChParams[chid].status == DISABLED)
    5e6a:	7923      	ldrb	r3, [r4, #4]
    5e6c:	7962      	ldrb	r2, [r4, #5]
    5e6e:	0212      	lsls	r2, r2, #8
    5e70:	431a      	orrs	r2, r3
    5e72:	79a3      	ldrb	r3, [r4, #6]
    5e74:	041b      	lsls	r3, r3, #16
    5e76:	431a      	orrs	r2, r3
    5e78:	79e3      	ldrb	r3, [r4, #7]
    5e7a:	061b      	lsls	r3, r3, #24
    5e7c:	4313      	orrs	r3, r2
    5e7e:	5d9b      	ldrb	r3, [r3, r6]
    5e80:	2b00      	cmp	r3, #0
    5e82:	d000      	beq.n	5e86 <UpdateChannelIdStatusT3+0x52>
}
    5e84:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pOtherChParams[chid].ulfrequency = 0;
    5e86:	4c17      	ldr	r4, [pc, #92]	; (5ee4 <UpdateChannelIdStatusT3+0xb0>)
    5e88:	7a23      	ldrb	r3, [r4, #8]
    5e8a:	7a62      	ldrb	r2, [r4, #9]
    5e8c:	0212      	lsls	r2, r2, #8
    5e8e:	4313      	orrs	r3, r2
    5e90:	7aa2      	ldrb	r2, [r4, #10]
    5e92:	0412      	lsls	r2, r2, #16
    5e94:	431a      	orrs	r2, r3
    5e96:	7ae3      	ldrb	r3, [r4, #11]
    5e98:	061b      	lsls	r3, r3, #24
    5e9a:	431a      	orrs	r2, r3
    5e9c:	1973      	adds	r3, r6, r5
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	2100      	movs	r1, #0
    5ea2:	5499      	strb	r1, [r3, r2]
    5ea4:	189b      	adds	r3, r3, r2
    5ea6:	2200      	movs	r2, #0
    5ea8:	705a      	strb	r2, [r3, #1]
    5eaa:	709a      	strb	r2, [r3, #2]
    5eac:	70da      	strb	r2, [r3, #3]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5eae:	23fa      	movs	r3, #250	; 0xfa
    5eb0:	33ff      	adds	r3, #255	; 0xff
    5eb2:	5ce3      	ldrb	r3, [r4, r3]
    5eb4:	32fb      	adds	r2, #251	; 0xfb
    5eb6:	32ff      	adds	r2, #255	; 0xff
    5eb8:	5ca0      	ldrb	r0, [r4, r2]
    5eba:	0200      	lsls	r0, r0, #8
    5ebc:	4318      	orrs	r0, r3
    5ebe:	b2c1      	uxtb	r1, r0
    5ec0:	0a00      	lsrs	r0, r0, #8
    5ec2:	4b09      	ldr	r3, [pc, #36]	; (5ee8 <UpdateChannelIdStatusT3+0xb4>)
    5ec4:	4798      	blx	r3
		if( RegParams.band == ISM_JPN923)
    5ec6:	2326      	movs	r3, #38	; 0x26
    5ec8:	5ce3      	ldrb	r3, [r4, r3]
    5eca:	2b05      	cmp	r3, #5
    5ecc:	d1da      	bne.n	5e84 <UpdateChannelIdStatusT3+0x50>
			RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    5ece:	3552      	adds	r5, #82	; 0x52
    5ed0:	00ad      	lsls	r5, r5, #2
    5ed2:	4b04      	ldr	r3, [pc, #16]	; (5ee4 <UpdateChannelIdStatusT3+0xb0>)
    5ed4:	195d      	adds	r5, r3, r5
    5ed6:	2200      	movs	r2, #0
    5ed8:	726a      	strb	r2, [r5, #9]
    5eda:	72aa      	strb	r2, [r5, #10]
    5edc:	72ea      	strb	r2, [r5, #11]
    5ede:	732a      	strb	r2, [r5, #12]
}
    5ee0:	e7d0      	b.n	5e84 <UpdateChannelIdStatusT3+0x50>
    5ee2:	46c0      	nop			; (mov r8, r8)
    5ee4:	200013e0 	.word	0x200013e0
    5ee8:	00008ec5 	.word	0x00008ec5

00005eec <setChannelIdStatusT3>:
{
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5ef0:	780d      	ldrb	r5, [r1, #0]
    5ef2:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5ef4:	a901      	add	r1, sp, #4
    5ef6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5ef8:	2301      	movs	r3, #1
    5efa:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5efc:	2015      	movs	r0, #21
    5efe:	4b0c      	ldr	r3, [pc, #48]	; (5f30 <setChannelIdStatusT3+0x44>)
    5f00:	4798      	blx	r3
    5f02:	0004      	movs	r4, r0
    5f04:	2808      	cmp	r0, #8
    5f06:	d003      	beq.n	5f10 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5f08:	240a      	movs	r4, #10
}
    5f0a:	0020      	movs	r0, r4
    5f0c:	b002      	add	sp, #8
    5f0e:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    5f10:	2326      	movs	r3, #38	; 0x26
    5f12:	4a08      	ldr	r2, [pc, #32]	; (5f34 <setChannelIdStatusT3+0x48>)
    5f14:	5cd3      	ldrb	r3, [r2, r3]
    5f16:	2b04      	cmp	r3, #4
    5f18:	d004      	beq.n	5f24 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    5f1a:	0031      	movs	r1, r6
    5f1c:	0028      	movs	r0, r5
    5f1e:	4b06      	ldr	r3, [pc, #24]	; (5f38 <setChannelIdStatusT3+0x4c>)
    5f20:	4798      	blx	r3
    5f22:	e7f2      	b.n	5f0a <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    5f24:	0031      	movs	r1, r6
    5f26:	0028      	movs	r0, r5
    5f28:	4b04      	ldr	r3, [pc, #16]	; (5f3c <setChannelIdStatusT3+0x50>)
    5f2a:	4798      	blx	r3
    5f2c:	e7ed      	b.n	5f0a <setChannelIdStatusT3+0x1e>
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	000054e5 	.word	0x000054e5
    5f34:	200013e0 	.word	0x200013e0
    5f38:	00005e35 	.word	0x00005e35
    5f3c:	00005d8d 	.word	0x00005d8d

00005f40 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    5f40:	b510      	push	{r4, lr}
    5f42:	b082      	sub	sp, #8
    5f44:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    5f46:	784c      	ldrb	r4, [r1, #1]
    5f48:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    5f4a:	780a      	ldrb	r2, [r1, #0]
    5f4c:	2a00      	cmp	r2, #0
    5f4e:	d009      	beq.n	5f64 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 1) 
    5f50:	2340      	movs	r3, #64	; 0x40
    5f52:	33ff      	adds	r3, #255	; 0xff
    5f54:	4a23      	ldr	r2, [pc, #140]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5f56:	5cd3      	ldrb	r3, [r2, r3]
    5f58:	2b01      	cmp	r3, #1
    5f5a:	d01a      	beq.n	5f92 <LORAREG_GetAttr_Rx1WindowparamsType1+0x52>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    5f5c:	233a      	movs	r3, #58	; 0x3a
    5f5e:	33ff      	adds	r3, #255	; 0xff
    5f60:	4a20      	ldr	r2, [pc, #128]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5f62:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    5f64:	491f      	ldr	r1, [pc, #124]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5f66:	229f      	movs	r2, #159	; 0x9f
    5f68:	0052      	lsls	r2, r2, #1
    5f6a:	5c8a      	ldrb	r2, [r1, r2]
    5f6c:	1b12      	subs	r2, r2, r4
    5f6e:	189b      	adds	r3, r3, r2
    5f70:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    5f72:	466a      	mov	r2, sp
    5f74:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    5f76:	223c      	movs	r2, #60	; 0x3c
    5f78:	32ff      	adds	r2, #255	; 0xff
    5f7a:	5c8a      	ldrb	r2, [r1, r2]
    5f7c:	4293      	cmp	r3, r2
    5f7e:	d80c      	bhi.n	5f9a <LORAREG_GetAttr_Rx1WindowparamsType1+0x5a>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    5f80:	229d      	movs	r2, #157	; 0x9d
    5f82:	0052      	lsls	r2, r2, #1
    5f84:	4917      	ldr	r1, [pc, #92]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5f86:	5c8a      	ldrb	r2, [r1, r2]
    5f88:	4293      	cmp	r3, r2
    5f8a:	d208      	bcs.n	5f9e <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    5f8c:	466b      	mov	r3, sp
    5f8e:	711a      	strb	r2, [r3, #4]
    5f90:	e005      	b.n	5f9e <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    5f92:	3338      	adds	r3, #56	; 0x38
    5f94:	33ff      	adds	r3, #255	; 0xff
    5f96:	5cd3      	ldrb	r3, [r2, r3]
    5f98:	e7e4      	b.n	5f64 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    5f9a:	466b      	mov	r3, sp
    5f9c:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5f9e:	4911      	ldr	r1, [pc, #68]	; (5fe4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    5fa0:	2327      	movs	r3, #39	; 0x27
    5fa2:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    5fa4:	3b20      	subs	r3, #32
    5fa6:	4023      	ands	r3, r4
    5fa8:	4c0f      	ldr	r4, [pc, #60]	; (5fe8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    5faa:	435c      	muls	r4, r3
    5fac:	239a      	movs	r3, #154	; 0x9a
    5fae:	005b      	lsls	r3, r3, #1
    5fb0:	5ccb      	ldrb	r3, [r1, r3]
    5fb2:	2236      	movs	r2, #54	; 0x36
    5fb4:	32ff      	adds	r2, #255	; 0xff
    5fb6:	5c8a      	ldrb	r2, [r1, r2]
    5fb8:	0212      	lsls	r2, r2, #8
    5fba:	4313      	orrs	r3, r2
    5fbc:	229b      	movs	r2, #155	; 0x9b
    5fbe:	0052      	lsls	r2, r2, #1
    5fc0:	5c8a      	ldrb	r2, [r1, r2]
    5fc2:	0412      	lsls	r2, r2, #16
    5fc4:	431a      	orrs	r2, r3
    5fc6:	2338      	movs	r3, #56	; 0x38
    5fc8:	33ff      	adds	r3, #255	; 0xff
    5fca:	5ccb      	ldrb	r3, [r1, r3]
    5fcc:	061b      	lsls	r3, r3, #24
    5fce:	4313      	orrs	r3, r2
    5fd0:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    5fd2:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    5fd4:	2208      	movs	r2, #8
    5fd6:	4669      	mov	r1, sp
    5fd8:	4b04      	ldr	r3, [pc, #16]	; (5fec <LORAREG_GetAttr_Rx1WindowparamsType1+0xac>)
    5fda:	4798      	blx	r3
}
    5fdc:	2008      	movs	r0, #8
    5fde:	b002      	add	sp, #8
    5fe0:	bd10      	pop	{r4, pc}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	200013e0 	.word	0x200013e0
    5fe8:	000927c0 	.word	0x000927c0
    5fec:	000158c9 	.word	0x000158c9

00005ff0 <LORAREG_GetAttr_DRangeChBandT1>:
{
    5ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ff2:	46c6      	mov	lr, r8
    5ff4:	b500      	push	{lr}
    5ff6:	b084      	sub	sp, #16
    5ff8:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    5ffa:	2204      	movs	r2, #4
    5ffc:	a803      	add	r0, sp, #12
    5ffe:	4b43      	ldr	r3, [pc, #268]	; (610c <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    6000:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    6002:	a903      	add	r1, sp, #12
    6004:	201b      	movs	r0, #27
    6006:	4b42      	ldr	r3, [pc, #264]	; (6110 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    6008:	4798      	blx	r3
    600a:	2808      	cmp	r0, #8
    600c:	d004      	beq.n	6018 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    600e:	200a      	movs	r0, #10
}
    6010:	b004      	add	sp, #16
    6012:	bc04      	pop	{r2}
    6014:	4690      	mov	r8, r2
    6016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    6018:	aa03      	add	r2, sp, #12
    601a:	7813      	ldrb	r3, [r2, #0]
    601c:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    601e:	2226      	movs	r2, #38	; 0x26
    6020:	493c      	ldr	r1, [pc, #240]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6022:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    6024:	3903      	subs	r1, #3
    6026:	1e4a      	subs	r2, r1, #1
    6028:	4191      	sbcs	r1, r2
    602a:	3106      	adds	r1, #6
	switch (chMaskCntl)
    602c:	2b07      	cmp	r3, #7
    602e:	d869      	bhi.n	6104 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    6030:	009a      	lsls	r2, r3, #2
    6032:	4d39      	ldr	r5, [pc, #228]	; (6118 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    6034:	58aa      	ldr	r2, [r5, r2]
    6036:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    6038:	011b      	lsls	r3, r3, #4
    603a:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    603c:	001a      	movs	r2, r3
    603e:	3210      	adds	r2, #16
    6040:	b2d2      	uxtb	r2, r2
    6042:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    6044:	4293      	cmp	r3, r2
    6046:	d25f      	bcs.n	6108 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6048:	4e32      	ldr	r6, [pc, #200]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    604a:	7935      	ldrb	r5, [r6, #4]
    604c:	7972      	ldrb	r2, [r6, #5]
    604e:	0212      	lsls	r2, r2, #8
    6050:	4315      	orrs	r5, r2
    6052:	79b2      	ldrb	r2, [r6, #6]
    6054:	0412      	lsls	r2, r2, #16
    6056:	432a      	orrs	r2, r5
    6058:	79f5      	ldrb	r5, [r6, #7]
    605a:	062d      	lsls	r5, r5, #24
    605c:	4315      	orrs	r5, r2
    605e:	46ac      	mov	ip, r5
    6060:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6062:	2401      	movs	r4, #1
    6064:	e00c      	b.n	6080 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    6066:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6068:	7872      	ldrb	r2, [r6, #1]
    606a:	0912      	lsrs	r2, r2, #4
    606c:	42aa      	cmp	r2, r5
    606e:	dd02      	ble.n	6076 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    6070:	423c      	tst	r4, r7
    6072:	d011      	beq.n	6098 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6074:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    6076:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    6078:	3301      	adds	r3, #1
    607a:	b2db      	uxtb	r3, r3
    607c:	4598      	cmp	r8, r3
    607e:	d013      	beq.n	60a8 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6080:	005e      	lsls	r6, r3, #1
    6082:	4466      	add	r6, ip
    6084:	7872      	ldrb	r2, [r6, #1]
    6086:	0712      	lsls	r2, r2, #28
    6088:	0f12      	lsrs	r2, r2, #28
    608a:	428a      	cmp	r2, r1
    608c:	daec      	bge.n	6068 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    608e:	423c      	tst	r4, r7
    6090:	d1e9      	bne.n	6066 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    6092:	2f00      	cmp	r7, #0
    6094:	d1ef      	bne.n	6076 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    6096:	e7e6      	b.n	6066 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6098:	2f00      	cmp	r7, #0
    609a:	d0eb      	beq.n	6074 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    609c:	e7eb      	b.n	6076 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    609e:	233a      	movs	r3, #58	; 0x3a
    60a0:	33ff      	adds	r3, #255	; 0xff
    60a2:	4a1c      	ldr	r2, [pc, #112]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60a4:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    60a6:	000d      	movs	r5, r1
    60a8:	012d      	lsls	r5, r5, #4
    60aa:	230f      	movs	r3, #15
    60ac:	4019      	ands	r1, r3
    60ae:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	701d      	strb	r5, [r3, #0]
    60b4:	e7ac      	b.n	6010 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    60b6:	4d17      	ldr	r5, [pc, #92]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60b8:	792b      	ldrb	r3, [r5, #4]
    60ba:	796a      	ldrb	r2, [r5, #5]
    60bc:	0212      	lsls	r2, r2, #8
    60be:	431a      	orrs	r2, r3
    60c0:	79ab      	ldrb	r3, [r5, #6]
    60c2:	041b      	lsls	r3, r3, #16
    60c4:	431a      	orrs	r2, r3
    60c6:	79eb      	ldrb	r3, [r5, #7]
    60c8:	061b      	lsls	r3, r3, #24
    60ca:	4313      	orrs	r3, r2
    60cc:	001a      	movs	r2, r3
    60ce:	3380      	adds	r3, #128	; 0x80
    60d0:	001c      	movs	r4, r3
    60d2:	2500      	movs	r5, #0
    60d4:	e002      	b.n	60dc <LORAREG_GetAttr_DRangeChBandT1+0xec>
    60d6:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    60d8:	42a2      	cmp	r2, r4
    60da:	d00c      	beq.n	60f6 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    60dc:	0016      	movs	r6, r2
    60de:	7853      	ldrb	r3, [r2, #1]
    60e0:	071b      	lsls	r3, r3, #28
    60e2:	0f1b      	lsrs	r3, r3, #28
    60e4:	428b      	cmp	r3, r1
    60e6:	da00      	bge.n	60ea <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    60e8:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    60ea:	7873      	ldrb	r3, [r6, #1]
    60ec:	091b      	lsrs	r3, r3, #4
    60ee:	42ab      	cmp	r3, r5
    60f0:	ddf1      	ble.n	60d6 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    60f2:	001d      	movs	r5, r3
    60f4:	e7ef      	b.n	60d6 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    60f6:	2f00      	cmp	r7, #0
    60f8:	d0d6      	beq.n	60a8 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    60fa:	233a      	movs	r3, #58	; 0x3a
    60fc:	33ff      	adds	r3, #255	; 0xff
    60fe:	4a05      	ldr	r2, [pc, #20]	; (6114 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6100:	5cd5      	ldrb	r5, [r2, r3]
    6102:	e7d1      	b.n	60a8 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    6104:	2500      	movs	r5, #0
    6106:	e7cf      	b.n	60a8 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    6108:	2500      	movs	r5, #0
    610a:	e7cd      	b.n	60a8 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    610c:	000158c9 	.word	0x000158c9
    6110:	000055cd 	.word	0x000055cd
    6114:	200013e0 	.word	0x200013e0
    6118:	0001c974 	.word	0x0001c974

0000611c <LORAREG_GetAttr_DefRx2Freq>:
{
    611c:	b510      	push	{r4, lr}
    611e:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    6120:	2204      	movs	r2, #4
    6122:	4902      	ldr	r1, [pc, #8]	; (612c <LORAREG_GetAttr_DefRx2Freq+0x10>)
    6124:	4b02      	ldr	r3, [pc, #8]	; (6130 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    6126:	4798      	blx	r3
}
    6128:	2008      	movs	r0, #8
    612a:	bd10      	pop	{r4, pc}
    612c:	200013f4 	.word	0x200013f4
    6130:	000158c9 	.word	0x000158c9

00006134 <LORAREG_GetAttr_DlFrequency>:
{
    6134:	b510      	push	{r4, lr}
    6136:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    6138:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    613a:	2122      	movs	r1, #34	; 0x22
    613c:	480d      	ldr	r0, [pc, #52]	; (6174 <LORAREG_GetAttr_DlFrequency+0x40>)
    613e:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    6140:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    6142:	428a      	cmp	r2, r1
    6144:	dd00      	ble.n	6148 <LORAREG_GetAttr_DlFrequency+0x14>
}
    6146:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    6148:	4c0a      	ldr	r4, [pc, #40]	; (6174 <LORAREG_GetAttr_DlFrequency+0x40>)
    614a:	7a21      	ldrb	r1, [r4, #8]
    614c:	7a60      	ldrb	r0, [r4, #9]
    614e:	0200      	lsls	r0, r0, #8
    6150:	4308      	orrs	r0, r1
    6152:	7aa1      	ldrb	r1, [r4, #10]
    6154:	0409      	lsls	r1, r1, #16
    6156:	4308      	orrs	r0, r1
    6158:	7ae1      	ldrb	r1, [r4, #11]
    615a:	0609      	lsls	r1, r1, #24
    615c:	4301      	orrs	r1, r0
    615e:	0050      	lsls	r0, r2, #1
    6160:	1882      	adds	r2, r0, r2
    6162:	0092      	lsls	r2, r2, #2
    6164:	1889      	adds	r1, r1, r2
    6166:	3104      	adds	r1, #4
    6168:	2204      	movs	r2, #4
    616a:	0018      	movs	r0, r3
    616c:	4b02      	ldr	r3, [pc, #8]	; (6178 <LORAREG_GetAttr_DlFrequency+0x44>)
    616e:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6170:	2008      	movs	r0, #8
    6172:	e7e8      	b.n	6146 <LORAREG_GetAttr_DlFrequency+0x12>
    6174:	200013e0 	.word	0x200013e0
    6178:	000158c9 	.word	0x000158c9

0000617c <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    617c:	b500      	push	{lr}
    617e:	b083      	sub	sp, #12
    6180:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6182:	784a      	ldrb	r2, [r1, #1]
    6184:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    6186:	429a      	cmp	r2, r3
    6188:	d925      	bls.n	61d6 <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    618a:	2300      	movs	r3, #0
    618c:	466a      	mov	r2, sp
    618e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    6190:	4913      	ldr	r1, [pc, #76]	; (61e0 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    6192:	7a0b      	ldrb	r3, [r1, #8]
    6194:	7a4a      	ldrb	r2, [r1, #9]
    6196:	0212      	lsls	r2, r2, #8
    6198:	4313      	orrs	r3, r2
    619a:	7a8a      	ldrb	r2, [r1, #10]
    619c:	0412      	lsls	r2, r2, #16
    619e:	431a      	orrs	r2, r3
    61a0:	7acb      	ldrb	r3, [r1, #11]
    61a2:	061b      	lsls	r3, r3, #24
    61a4:	431a      	orrs	r2, r3
    61a6:	2327      	movs	r3, #39	; 0x27
    61a8:	5cc9      	ldrb	r1, [r1, r3]
    61aa:	004b      	lsls	r3, r1, #1
    61ac:	185b      	adds	r3, r3, r1
    61ae:	009b      	lsls	r3, r3, #2
    61b0:	189b      	adds	r3, r3, r2
    61b2:	7919      	ldrb	r1, [r3, #4]
    61b4:	795a      	ldrb	r2, [r3, #5]
    61b6:	0212      	lsls	r2, r2, #8
    61b8:	4311      	orrs	r1, r2
    61ba:	799a      	ldrb	r2, [r3, #6]
    61bc:	0412      	lsls	r2, r2, #16
    61be:	430a      	orrs	r2, r1
    61c0:	79db      	ldrb	r3, [r3, #7]
    61c2:	061b      	lsls	r3, r3, #24
    61c4:	4313      	orrs	r3, r2
    61c6:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    61c8:	2208      	movs	r2, #8
    61ca:	4669      	mov	r1, sp
    61cc:	4b05      	ldr	r3, [pc, #20]	; (61e4 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    61ce:	4798      	blx	r3
}
    61d0:	2008      	movs	r0, #8
    61d2:	b003      	add	sp, #12
    61d4:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    61d6:	1a9b      	subs	r3, r3, r2
    61d8:	466a      	mov	r2, sp
    61da:	7113      	strb	r3, [r2, #4]
    61dc:	e7d8      	b.n	6190 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	200013e0 	.word	0x200013e0
    61e4:	000158c9 	.word	0x000158c9

000061e8 <LORAREG_GetAttr_DRangeChBandT2>:
{
    61e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61ea:	46c6      	mov	lr, r8
    61ec:	b500      	push	{lr}
    61ee:	b082      	sub	sp, #8
    61f0:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    61f2:	ad01      	add	r5, sp, #4
    61f4:	2204      	movs	r2, #4
    61f6:	0028      	movs	r0, r5
    61f8:	4b38      	ldr	r3, [pc, #224]	; (62dc <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    61fa:	4798      	blx	r3
	switch (chMaskCntl)
    61fc:	782b      	ldrb	r3, [r5, #0]
    61fe:	2b00      	cmp	r3, #0
    6200:	d017      	beq.n	6232 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    6202:	2b06      	cmp	r3, #6
    6204:	d159      	bne.n	62ba <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    6206:	331c      	adds	r3, #28
    6208:	4a35      	ldr	r2, [pc, #212]	; (62e0 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    620a:	56d7      	ldrsb	r7, [r2, r3]
    620c:	2000      	movs	r0, #0
    620e:	2507      	movs	r5, #7
    6210:	2f00      	cmp	r7, #0
    6212:	dd54      	ble.n	62be <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    6214:	4a32      	ldr	r2, [pc, #200]	; (62e0 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    6216:	7916      	ldrb	r6, [r2, #4]
    6218:	7953      	ldrb	r3, [r2, #5]
    621a:	021b      	lsls	r3, r3, #8
    621c:	4333      	orrs	r3, r6
    621e:	7996      	ldrb	r6, [r2, #6]
    6220:	0436      	lsls	r6, r6, #16
    6222:	4333      	orrs	r3, r6
    6224:	79d6      	ldrb	r6, [r2, #7]
    6226:	0636      	lsls	r6, r6, #24
    6228:	431e      	orrs	r6, r3
    622a:	2000      	movs	r0, #0
    622c:	2507      	movs	r5, #7
    622e:	2200      	movs	r2, #0
    6230:	e035      	b.n	629e <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    6232:	2322      	movs	r3, #34	; 0x22
    6234:	4a2a      	ldr	r2, [pc, #168]	; (62e0 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    6236:	56d3      	ldrsb	r3, [r2, r3]
    6238:	469c      	mov	ip, r3
    623a:	2b00      	cmp	r3, #0
    623c:	dd4a      	ble.n	62d4 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    623e:	ab01      	add	r3, sp, #4
    6240:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6242:	7917      	ldrb	r7, [r2, #4]
    6244:	7953      	ldrb	r3, [r2, #5]
    6246:	021b      	lsls	r3, r3, #8
    6248:	433b      	orrs	r3, r7
    624a:	7997      	ldrb	r7, [r2, #6]
    624c:	043f      	lsls	r7, r7, #16
    624e:	433b      	orrs	r3, r7
    6250:	79d7      	ldrb	r7, [r2, #7]
    6252:	063f      	lsls	r7, r7, #24
    6254:	431f      	orrs	r7, r3
    6256:	2000      	movs	r0, #0
    6258:	2507      	movs	r5, #7
    625a:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    625c:	2401      	movs	r4, #1
    625e:	e00b      	b.n	6278 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    6260:	784b      	ldrb	r3, [r1, #1]
    6262:	091b      	lsrs	r3, r3, #4
    6264:	4283      	cmp	r3, r0
    6266:	dd02      	ble.n	626e <LORAREG_GetAttr_DRangeChBandT2+0x86>
    6268:	4234      	tst	r4, r6
    626a:	d000      	beq.n	626e <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    626c:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    626e:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    6270:	3201      	adds	r2, #1
    6272:	b2d2      	uxtb	r2, r2
    6274:	4562      	cmp	r2, ip
    6276:	da22      	bge.n	62be <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6278:	0051      	lsls	r1, r2, #1
    627a:	1879      	adds	r1, r7, r1
    627c:	784b      	ldrb	r3, [r1, #1]
    627e:	071b      	lsls	r3, r3, #28
    6280:	0f1b      	lsrs	r3, r3, #28
    6282:	42ab      	cmp	r3, r5
    6284:	daec      	bge.n	6260 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    6286:	4234      	tst	r4, r6
    6288:	d0f1      	beq.n	626e <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    628a:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    628c:	784b      	ldrb	r3, [r1, #1]
    628e:	091b      	lsrs	r3, r3, #4
    6290:	4298      	cmp	r0, r3
    6292:	dbeb      	blt.n	626c <LORAREG_GetAttr_DRangeChBandT2+0x84>
    6294:	e7eb      	b.n	626e <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    6296:	3201      	adds	r2, #1
    6298:	b2d2      	uxtb	r2, r2
    629a:	42ba      	cmp	r2, r7
    629c:	da0f      	bge.n	62be <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    629e:	0051      	lsls	r1, r2, #1
    62a0:	1871      	adds	r1, r6, r1
    62a2:	784b      	ldrb	r3, [r1, #1]
    62a4:	071b      	lsls	r3, r3, #28
    62a6:	0f1b      	lsrs	r3, r3, #28
    62a8:	42ab      	cmp	r3, r5
    62aa:	da00      	bge.n	62ae <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    62ac:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    62ae:	784b      	ldrb	r3, [r1, #1]
    62b0:	091b      	lsrs	r3, r3, #4
    62b2:	4283      	cmp	r3, r0
    62b4:	ddef      	ble.n	6296 <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    62b6:	0018      	movs	r0, r3
    62b8:	e7ed      	b.n	6296 <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    62ba:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    62bc:	25ff      	movs	r5, #255	; 0xff
    62be:	0100      	lsls	r0, r0, #4
    62c0:	230f      	movs	r3, #15
    62c2:	401d      	ands	r5, r3
    62c4:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    62c6:	4643      	mov	r3, r8
    62c8:	7018      	strb	r0, [r3, #0]
}
    62ca:	2008      	movs	r0, #8
    62cc:	b002      	add	sp, #8
    62ce:	bc04      	pop	{r2}
    62d0:	4690      	mov	r8, r2
    62d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    62d4:	2000      	movs	r0, #0
    62d6:	2507      	movs	r5, #7
    62d8:	e7f1      	b.n	62be <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    62da:	46c0      	nop			; (mov r8, r8)
    62dc:	000158c9 	.word	0x000158c9
    62e0:	200013e0 	.word	0x200013e0

000062e4 <LORAREG_GetAttr_FreqT2>:
{
    62e4:	b510      	push	{r4, lr}
    62e6:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    62e8:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    62ea:	2222      	movs	r2, #34	; 0x22
    62ec:	490d      	ldr	r1, [pc, #52]	; (6324 <LORAREG_GetAttr_FreqT2+0x40>)
    62ee:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    62f0:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    62f2:	4293      	cmp	r3, r2
    62f4:	dd00      	ble.n	62f8 <LORAREG_GetAttr_FreqT2+0x14>
}
    62f6:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    62f8:	0008      	movs	r0, r1
    62fa:	7a09      	ldrb	r1, [r1, #8]
    62fc:	7a42      	ldrb	r2, [r0, #9]
    62fe:	0212      	lsls	r2, r2, #8
    6300:	430a      	orrs	r2, r1
    6302:	7a81      	ldrb	r1, [r0, #10]
    6304:	0409      	lsls	r1, r1, #16
    6306:	430a      	orrs	r2, r1
    6308:	7ac1      	ldrb	r1, [r0, #11]
    630a:	0609      	lsls	r1, r1, #24
    630c:	4311      	orrs	r1, r2
    630e:	005a      	lsls	r2, r3, #1
    6310:	18d3      	adds	r3, r2, r3
    6312:	009b      	lsls	r3, r3, #2
    6314:	18c9      	adds	r1, r1, r3
    6316:	2204      	movs	r2, #4
    6318:	0020      	movs	r0, r4
    631a:	4b03      	ldr	r3, [pc, #12]	; (6328 <LORAREG_GetAttr_FreqT2+0x44>)
    631c:	4798      	blx	r3
	return result;
    631e:	2008      	movs	r0, #8
    6320:	e7e9      	b.n	62f6 <LORAREG_GetAttr_FreqT2+0x12>
    6322:	46c0      	nop			; (mov r8, r8)
    6324:	200013e0 	.word	0x200013e0
    6328:	000158c9 	.word	0x000158c9

0000632c <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    632c:	b510      	push	{r4, lr}
    632e:	b082      	sub	sp, #8
    6330:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    6332:	2326      	movs	r3, #38	; 0x26
    6334:	4a37      	ldr	r2, [pc, #220]	; (6414 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6336:	5cd2      	ldrb	r2, [r2, r3]
    6338:	4b37      	ldr	r3, [pc, #220]	; (6418 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    633a:	4113      	asrs	r3, r2
    633c:	07db      	lsls	r3, r3, #31
    633e:	d502      	bpl.n	6346 <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    6340:	780b      	ldrb	r3, [r1, #0]
    6342:	2b00      	cmp	r3, #0
    6344:	d116      	bne.n	6374 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    6346:	23ac      	movs	r3, #172	; 0xac
    6348:	33ff      	adds	r3, #255	; 0xff
    634a:	4a32      	ldr	r2, [pc, #200]	; (6414 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    634c:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    634e:	3baa      	subs	r3, #170	; 0xaa
    6350:	3bff      	subs	r3, #255	; 0xff
    6352:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6354:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6356:	2b05      	cmp	r3, #5
    6358:	d92c      	bls.n	63b4 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    635a:	2205      	movs	r2, #5
    635c:	1ad3      	subs	r3, r2, r3
    635e:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6360:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    6362:	429a      	cmp	r2, r3
    6364:	db31      	blt.n	63ca <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6366:	1ad3      	subs	r3, r2, r3
    6368:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    636a:	42a3      	cmp	r3, r4
    636c:	d224      	bcs.n	63b8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    636e:	466b      	mov	r3, sp
    6370:	711c      	strb	r4, [r3, #4]
    6372:	e02c      	b.n	63ce <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    6374:	2302      	movs	r3, #2
    6376:	466a      	mov	r2, sp
    6378:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    637a:	4926      	ldr	r1, [pc, #152]	; (6414 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    637c:	7a0b      	ldrb	r3, [r1, #8]
    637e:	7a4a      	ldrb	r2, [r1, #9]
    6380:	0212      	lsls	r2, r2, #8
    6382:	4313      	orrs	r3, r2
    6384:	7a8a      	ldrb	r2, [r1, #10]
    6386:	0412      	lsls	r2, r2, #16
    6388:	431a      	orrs	r2, r3
    638a:	7acb      	ldrb	r3, [r1, #11]
    638c:	061b      	lsls	r3, r3, #24
    638e:	431a      	orrs	r2, r3
    6390:	2327      	movs	r3, #39	; 0x27
    6392:	5cc9      	ldrb	r1, [r1, r3]
    6394:	004b      	lsls	r3, r1, #1
    6396:	185b      	adds	r3, r3, r1
    6398:	009b      	lsls	r3, r3, #2
    639a:	189b      	adds	r3, r3, r2
    639c:	7919      	ldrb	r1, [r3, #4]
    639e:	795a      	ldrb	r2, [r3, #5]
    63a0:	0212      	lsls	r2, r2, #8
    63a2:	4311      	orrs	r1, r2
    63a4:	799a      	ldrb	r2, [r3, #6]
    63a6:	0412      	lsls	r2, r2, #16
    63a8:	430a      	orrs	r2, r1
    63aa:	79db      	ldrb	r3, [r3, #7]
    63ac:	061b      	lsls	r3, r3, #24
    63ae:	4313      	orrs	r3, r2
    63b0:	9300      	str	r3, [sp, #0]
    63b2:	e028      	b.n	6406 <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    63b4:	b25b      	sxtb	r3, r3
    63b6:	e7d3      	b.n	6360 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    63b8:	2b05      	cmp	r3, #5
    63ba:	d802      	bhi.n	63c2 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    63bc:	466a      	mov	r2, sp
    63be:	7113      	strb	r3, [r2, #4]
    63c0:	e005      	b.n	63ce <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    63c2:	2305      	movs	r3, #5
    63c4:	466a      	mov	r2, sp
    63c6:	7113      	strb	r3, [r2, #4]
    63c8:	e001      	b.n	63ce <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    63ca:	466b      	mov	r3, sp
    63cc:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    63ce:	4911      	ldr	r1, [pc, #68]	; (6414 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    63d0:	7a0b      	ldrb	r3, [r1, #8]
    63d2:	7a4a      	ldrb	r2, [r1, #9]
    63d4:	0212      	lsls	r2, r2, #8
    63d6:	4313      	orrs	r3, r2
    63d8:	7a8a      	ldrb	r2, [r1, #10]
    63da:	0412      	lsls	r2, r2, #16
    63dc:	431a      	orrs	r2, r3
    63de:	7acb      	ldrb	r3, [r1, #11]
    63e0:	061b      	lsls	r3, r3, #24
    63e2:	431a      	orrs	r2, r3
    63e4:	2327      	movs	r3, #39	; 0x27
    63e6:	5cc9      	ldrb	r1, [r1, r3]
    63e8:	004b      	lsls	r3, r1, #1
    63ea:	185b      	adds	r3, r3, r1
    63ec:	009b      	lsls	r3, r3, #2
    63ee:	189b      	adds	r3, r3, r2
    63f0:	7919      	ldrb	r1, [r3, #4]
    63f2:	795a      	ldrb	r2, [r3, #5]
    63f4:	0212      	lsls	r2, r2, #8
    63f6:	4311      	orrs	r1, r2
    63f8:	799a      	ldrb	r2, [r3, #6]
    63fa:	0412      	lsls	r2, r2, #16
    63fc:	430a      	orrs	r2, r1
    63fe:	79db      	ldrb	r3, [r3, #7]
    6400:	061b      	lsls	r3, r3, #24
    6402:	4313      	orrs	r3, r2
    6404:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6406:	2208      	movs	r2, #8
    6408:	4669      	mov	r1, sp
    640a:	4b04      	ldr	r3, [pc, #16]	; (641c <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    640c:	4798      	blx	r3
}
    640e:	2008      	movs	r0, #8
    6410:	b002      	add	sp, #8
    6412:	bd10      	pop	{r4, pc}
    6414:	200013e0 	.word	0x200013e0
    6418:	00007fe0 	.word	0x00007fe0
    641c:	000158c9 	.word	0x000158c9

00006420 <LORAREG_GetAttr_FreqT3>:
{
    6420:	b510      	push	{r4, lr}
    6422:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    6424:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    6426:	2222      	movs	r2, #34	; 0x22
    6428:	490d      	ldr	r1, [pc, #52]	; (6460 <LORAREG_GetAttr_FreqT3+0x40>)
    642a:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    642c:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    642e:	4293      	cmp	r3, r2
    6430:	dd00      	ble.n	6434 <LORAREG_GetAttr_FreqT3+0x14>
}
    6432:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    6434:	0008      	movs	r0, r1
    6436:	7a09      	ldrb	r1, [r1, #8]
    6438:	7a42      	ldrb	r2, [r0, #9]
    643a:	0212      	lsls	r2, r2, #8
    643c:	430a      	orrs	r2, r1
    643e:	7a81      	ldrb	r1, [r0, #10]
    6440:	0409      	lsls	r1, r1, #16
    6442:	430a      	orrs	r2, r1
    6444:	7ac1      	ldrb	r1, [r0, #11]
    6446:	0609      	lsls	r1, r1, #24
    6448:	4311      	orrs	r1, r2
    644a:	005a      	lsls	r2, r3, #1
    644c:	18d3      	adds	r3, r2, r3
    644e:	009b      	lsls	r3, r3, #2
    6450:	18c9      	adds	r1, r1, r3
    6452:	2204      	movs	r2, #4
    6454:	0020      	movs	r0, r4
    6456:	4b03      	ldr	r3, [pc, #12]	; (6464 <LORAREG_GetAttr_FreqT3+0x44>)
    6458:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    645a:	2008      	movs	r0, #8
    645c:	e7e9      	b.n	6432 <LORAREG_GetAttr_FreqT3+0x12>
    645e:	46c0      	nop			; (mov r8, r8)
    6460:	200013e0 	.word	0x200013e0
    6464:	000158c9 	.word	0x000158c9

00006468 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    6468:	b500      	push	{lr}
    646a:	b083      	sub	sp, #12
    646c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    646e:	784b      	ldrb	r3, [r1, #1]
    6470:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6472:	2b05      	cmp	r3, #5
    6474:	d90b      	bls.n	648e <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    6476:	2105      	movs	r1, #5
    6478:	1acb      	subs	r3, r1, r3
    647a:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    647c:	429a      	cmp	r2, r3
    647e:	db0c      	blt.n	649a <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6480:	1ad3      	subs	r3, r2, r3
    6482:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    6484:	2b05      	cmp	r3, #5
    6486:	d804      	bhi.n	6492 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6488:	466a      	mov	r2, sp
    648a:	7113      	strb	r3, [r2, #4]
    648c:	e008      	b.n	64a0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    648e:	b25b      	sxtb	r3, r3
    6490:	e7f4      	b.n	647c <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    6492:	2305      	movs	r3, #5
    6494:	466a      	mov	r2, sp
    6496:	7113      	strb	r3, [r2, #4]
    6498:	e002      	b.n	64a0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    649a:	2300      	movs	r3, #0
    649c:	466a      	mov	r2, sp
    649e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    64a0:	4911      	ldr	r1, [pc, #68]	; (64e8 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    64a2:	7a0b      	ldrb	r3, [r1, #8]
    64a4:	7a4a      	ldrb	r2, [r1, #9]
    64a6:	0212      	lsls	r2, r2, #8
    64a8:	4313      	orrs	r3, r2
    64aa:	7a8a      	ldrb	r2, [r1, #10]
    64ac:	0412      	lsls	r2, r2, #16
    64ae:	431a      	orrs	r2, r3
    64b0:	7acb      	ldrb	r3, [r1, #11]
    64b2:	061b      	lsls	r3, r3, #24
    64b4:	431a      	orrs	r2, r3
    64b6:	2327      	movs	r3, #39	; 0x27
    64b8:	5cc9      	ldrb	r1, [r1, r3]
    64ba:	004b      	lsls	r3, r1, #1
    64bc:	185b      	adds	r3, r3, r1
    64be:	009b      	lsls	r3, r3, #2
    64c0:	189b      	adds	r3, r3, r2
    64c2:	7919      	ldrb	r1, [r3, #4]
    64c4:	795a      	ldrb	r2, [r3, #5]
    64c6:	0212      	lsls	r2, r2, #8
    64c8:	4311      	orrs	r1, r2
    64ca:	799a      	ldrb	r2, [r3, #6]
    64cc:	0412      	lsls	r2, r2, #16
    64ce:	430a      	orrs	r2, r1
    64d0:	79db      	ldrb	r3, [r3, #7]
    64d2:	061b      	lsls	r3, r3, #24
    64d4:	4313      	orrs	r3, r2
    64d6:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    64d8:	2208      	movs	r2, #8
    64da:	4669      	mov	r1, sp
    64dc:	4b03      	ldr	r3, [pc, #12]	; (64ec <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    64de:	4798      	blx	r3
}
    64e0:	2008      	movs	r0, #8
    64e2:	b003      	add	sp, #12
    64e4:	bd00      	pop	{pc}
    64e6:	46c0      	nop			; (mov r8, r8)
    64e8:	200013e0 	.word	0x200013e0
    64ec:	000158c9 	.word	0x000158c9

000064f0 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    64f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64f2:	46de      	mov	lr, fp
    64f4:	4657      	mov	r7, sl
    64f6:	464e      	mov	r6, r9
    64f8:	4645      	mov	r5, r8
    64fa:	b5e0      	push	{r5, r6, r7, lr}
    64fc:	b085      	sub	sp, #20
    64fe:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    6500:	2301      	movs	r3, #1
    6502:	425b      	negs	r3, r3
    6504:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    6506:	780b      	ldrb	r3, [r1, #0]
    6508:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    650a:	2322      	movs	r3, #34	; 0x22
    650c:	4a2a      	ldr	r2, [pc, #168]	; (65b8 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    650e:	56d7      	ldrsb	r7, [r2, r3]
    6510:	2f00      	cmp	r7, #0
    6512:	dd40      	ble.n	6596 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    6514:	7916      	ldrb	r6, [r2, #4]
    6516:	7953      	ldrb	r3, [r2, #5]
    6518:	021b      	lsls	r3, r3, #8
    651a:	4333      	orrs	r3, r6
    651c:	7996      	ldrb	r6, [r2, #6]
    651e:	0436      	lsls	r6, r6, #16
    6520:	4333      	orrs	r3, r6
    6522:	79d6      	ldrb	r6, [r2, #7]
    6524:	0636      	lsls	r6, r6, #24
    6526:	431e      	orrs	r6, r3
    6528:	2300      	movs	r3, #0
    652a:	469a      	mov	sl, r3
    652c:	3b01      	subs	r3, #1
    652e:	4698      	mov	r8, r3
    6530:	2300      	movs	r3, #0
    6532:	2100      	movs	r1, #0
    6534:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    6536:	464a      	mov	r2, r9
    6538:	9201      	str	r2, [sp, #4]
    653a:	46c3      	mov	fp, r8
    653c:	e004      	b.n	6548 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    653e:	3101      	adds	r1, #1
    6540:	b2c9      	uxtb	r1, r1
    6542:	000b      	movs	r3, r1
    6544:	42b9      	cmp	r1, r7
    6546:	da23      	bge.n	6590 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    6548:	004a      	lsls	r2, r1, #1
    654a:	18b2      	adds	r2, r6, r2
    654c:	7814      	ldrb	r4, [r2, #0]
    654e:	2c00      	cmp	r4, #0
    6550:	d0f5      	beq.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    6552:	3352      	adds	r3, #82	; 0x52
    6554:	009b      	lsls	r3, r3, #2
    6556:	4463      	add	r3, ip
    6558:	7a58      	ldrb	r0, [r3, #9]
    655a:	4680      	mov	r8, r0
    655c:	7a98      	ldrb	r0, [r3, #10]
    655e:	0200      	lsls	r0, r0, #8
    6560:	4645      	mov	r5, r8
    6562:	4305      	orrs	r5, r0
    6564:	7ad8      	ldrb	r0, [r3, #11]
    6566:	0400      	lsls	r0, r0, #16
    6568:	4328      	orrs	r0, r5
    656a:	7b1b      	ldrb	r3, [r3, #12]
    656c:	061b      	lsls	r3, r3, #24
    656e:	4303      	orrs	r3, r0
    6570:	d0e5      	beq.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    6572:	459b      	cmp	fp, r3
    6574:	d3e3      	bcc.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    6576:	7850      	ldrb	r0, [r2, #1]
    6578:	0700      	lsls	r0, r0, #28
    657a:	0f00      	lsrs	r0, r0, #28
    657c:	4581      	cmp	r9, r0
    657e:	dbde      	blt.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    6580:	7852      	ldrb	r2, [r2, #1]
    6582:	0912      	lsrs	r2, r2, #4
    6584:	9801      	ldr	r0, [sp, #4]
    6586:	4290      	cmp	r0, r2
    6588:	dcd9      	bgt.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    658a:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    658c:	469b      	mov	fp, r3
    658e:	e7d6      	b.n	653e <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    6590:	4653      	mov	r3, sl
    6592:	2b00      	cmp	r3, #0
    6594:	d10c      	bne.n	65b0 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    6596:	2204      	movs	r2, #4
    6598:	a903      	add	r1, sp, #12
    659a:	9800      	ldr	r0, [sp, #0]
    659c:	4b07      	ldr	r3, [pc, #28]	; (65bc <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    659e:	4798      	blx	r3
}
    65a0:	2008      	movs	r0, #8
    65a2:	b005      	add	sp, #20
    65a4:	bc3c      	pop	{r2, r3, r4, r5}
    65a6:	4690      	mov	r8, r2
    65a8:	4699      	mov	r9, r3
    65aa:	46a2      	mov	sl, r4
    65ac:	46ab      	mov	fp, r5
    65ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65b0:	465b      	mov	r3, fp
    65b2:	9303      	str	r3, [sp, #12]
    65b4:	e7ef      	b.n	6596 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	200013e0 	.word	0x200013e0
    65bc:	000158c9 	.word	0x000158c9

000065c0 <ValidateTxFreqT2>:
{
    65c0:	b500      	push	{lr}
    65c2:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    65c4:	2208      	movs	r2, #8
    65c6:	4668      	mov	r0, sp
    65c8:	4b04      	ldr	r3, [pc, #16]	; (65dc <ValidateTxFreqT2+0x1c>)
    65ca:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    65cc:	4b04      	ldr	r3, [pc, #16]	; (65e0 <ValidateTxFreqT2+0x20>)
    65ce:	685b      	ldr	r3, [r3, #4]
    65d0:	4669      	mov	r1, sp
    65d2:	2001      	movs	r0, #1
    65d4:	4798      	blx	r3
}
    65d6:	b003      	add	sp, #12
    65d8:	bd00      	pop	{pc}
    65da:	46c0      	nop			; (mov r8, r8)
    65dc:	000158c9 	.word	0x000158c9
    65e0:	20000d78 	.word	0x20000d78

000065e4 <ValidateFreqIN>:
{
    65e4:	b500      	push	{lr}
    65e6:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    65e8:	2204      	movs	r2, #4
    65ea:	a801      	add	r0, sp, #4
    65ec:	4b06      	ldr	r3, [pc, #24]	; (6608 <ValidateFreqIN+0x24>)
    65ee:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    65f0:	9b01      	ldr	r3, [sp, #4]
    65f2:	4a06      	ldr	r2, [pc, #24]	; (660c <ValidateFreqIN+0x28>)
    65f4:	4694      	mov	ip, r2
    65f6:	4463      	add	r3, ip
    65f8:	4a05      	ldr	r2, [pc, #20]	; (6610 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    65fa:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    65fc:	4293      	cmp	r3, r2
    65fe:	d900      	bls.n	6602 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6600:	3002      	adds	r0, #2
}
    6602:	b003      	add	sp, #12
    6604:	bd00      	pop	{pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	000158c9 	.word	0x000158c9
    660c:	cc7125c0 	.word	0xcc7125c0
    6610:	001e8480 	.word	0x001e8480

00006614 <ValidateFreqJP>:
{
    6614:	b500      	push	{lr}
    6616:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    6618:	2204      	movs	r2, #4
    661a:	a801      	add	r0, sp, #4
    661c:	4b06      	ldr	r3, [pc, #24]	; (6638 <ValidateFreqJP+0x24>)
    661e:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	4a06      	ldr	r2, [pc, #24]	; (663c <ValidateFreqJP+0x28>)
    6624:	4694      	mov	ip, r2
    6626:	4463      	add	r3, ip
    6628:	4a05      	ldr	r2, [pc, #20]	; (6640 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    662a:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    662c:	4293      	cmp	r3, r2
    662e:	d900      	bls.n	6632 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6630:	3002      	adds	r0, #2
}
    6632:	b003      	add	sp, #12
    6634:	bd00      	pop	{pc}
    6636:	46c0      	nop			; (mov r8, r8)
    6638:	000158c9 	.word	0x000158c9
    663c:	c929ea00 	.word	0xc929ea00
    6640:	007a1200 	.word	0x007a1200

00006644 <ValidateFreqKR>:
{
    6644:	b500      	push	{lr}
    6646:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    6648:	2204      	movs	r2, #4
    664a:	a801      	add	r0, sp, #4
    664c:	4b0a      	ldr	r3, [pc, #40]	; (6678 <ValidateFreqKR+0x34>)
    664e:	4798      	blx	r3
		if(freq == freqNew)
    6650:	9a01      	ldr	r2, [sp, #4]
    6652:	4b0a      	ldr	r3, [pc, #40]	; (667c <ValidateFreqKR+0x38>)
    6654:	429a      	cmp	r2, r3
    6656:	d00b      	beq.n	6670 <ValidateFreqKR+0x2c>
    6658:	4b09      	ldr	r3, [pc, #36]	; (6680 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    665a:	490a      	ldr	r1, [pc, #40]	; (6684 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    665c:	429a      	cmp	r2, r3
    665e:	d009      	beq.n	6674 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    6660:	4809      	ldr	r0, [pc, #36]	; (6688 <ValidateFreqKR+0x44>)
    6662:	4684      	mov	ip, r0
    6664:	4463      	add	r3, ip
    6666:	428b      	cmp	r3, r1
    6668:	d1f8      	bne.n	665c <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    666a:	200a      	movs	r0, #10
}
    666c:	b003      	add	sp, #12
    666e:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    6670:	2008      	movs	r0, #8
    6672:	e7fb      	b.n	666c <ValidateFreqKR+0x28>
    6674:	2008      	movs	r0, #8
    6676:	e7f9      	b.n	666c <ValidateFreqKR+0x28>
    6678:	000158c9 	.word	0x000158c9
    667c:	36e3d1a0 	.word	0x36e3d1a0
    6680:	36e6dee0 	.word	0x36e6dee0
    6684:	370870a0 	.word	0x370870a0
    6688:	00030d40 	.word	0x00030d40

0000668c <setNewChannelsT1>:
{
    668c:	b5f0      	push	{r4, r5, r6, r7, lr}
    668e:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    6690:	ac01      	add	r4, sp, #4
    6692:	2204      	movs	r2, #4
    6694:	0020      	movs	r0, r4
    6696:	4b1f      	ldr	r3, [pc, #124]	; (6714 <setNewChannelsT1+0x88>)
    6698:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    669a:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    669c:	78a6      	ldrb	r6, [r4, #2]
    669e:	466b      	mov	r3, sp
    66a0:	1cd9      	adds	r1, r3, #3
    66a2:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    66a4:	201b      	movs	r0, #27
    66a6:	4b1c      	ldr	r3, [pc, #112]	; (6718 <setNewChannelsT1+0x8c>)
    66a8:	4798      	blx	r3
    66aa:	0005      	movs	r5, r0
    66ac:	2808      	cmp	r0, #8
    66ae:	d003      	beq.n	66b8 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    66b0:	250a      	movs	r5, #10
}
    66b2:	0028      	movs	r0, r5
    66b4:	b003      	add	sp, #12
    66b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    66b8:	2e06      	cmp	r6, #6
    66ba:	d01c      	beq.n	66f6 <setNewChannelsT1+0x6a>
    66bc:	d80a      	bhi.n	66d4 <setNewChannelsT1+0x48>
    66be:	2e04      	cmp	r6, #4
    66c0:	d8f7      	bhi.n	66b2 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    66c2:	0136      	lsls	r6, r6, #4
    66c4:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    66c6:	0001      	movs	r1, r0
    66c8:	310f      	adds	r1, #15
    66ca:	b2c9      	uxtb	r1, r1
    66cc:	003a      	movs	r2, r7
    66ce:	4b13      	ldr	r3, [pc, #76]	; (671c <setNewChannelsT1+0x90>)
    66d0:	4798      	blx	r3
				break;
    66d2:	e7ee      	b.n	66b2 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    66d4:	2400      	movs	r4, #0
    66d6:	2e07      	cmp	r6, #7
    66d8:	d1eb      	bne.n	66b2 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    66da:	4e11      	ldr	r6, [pc, #68]	; (6720 <setNewChannelsT1+0x94>)
    66dc:	2100      	movs	r1, #0
    66de:	0020      	movs	r0, r4
    66e0:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    66e2:	3401      	adds	r4, #1
    66e4:	b2e4      	uxtb	r4, r4
    66e6:	2c3f      	cmp	r4, #63	; 0x3f
    66e8:	d1f8      	bne.n	66dc <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    66ea:	003a      	movs	r2, r7
    66ec:	2147      	movs	r1, #71	; 0x47
    66ee:	2040      	movs	r0, #64	; 0x40
    66f0:	4b0a      	ldr	r3, [pc, #40]	; (671c <setNewChannelsT1+0x90>)
    66f2:	4798      	blx	r3
				break;
    66f4:	e7dd      	b.n	66b2 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    66f6:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    66f8:	4e09      	ldr	r6, [pc, #36]	; (6720 <setNewChannelsT1+0x94>)
    66fa:	2101      	movs	r1, #1
    66fc:	0020      	movs	r0, r4
    66fe:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    6700:	3401      	adds	r4, #1
    6702:	b2e4      	uxtb	r4, r4
    6704:	2c3f      	cmp	r4, #63	; 0x3f
    6706:	d1f8      	bne.n	66fa <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    6708:	003a      	movs	r2, r7
    670a:	2147      	movs	r1, #71	; 0x47
    670c:	2040      	movs	r0, #64	; 0x40
    670e:	4b03      	ldr	r3, [pc, #12]	; (671c <setNewChannelsT1+0x90>)
    6710:	4798      	blx	r3
			    break;
    6712:	e7ce      	b.n	66b2 <setNewChannelsT1+0x26>
    6714:	000158c9 	.word	0x000158c9
    6718:	000055cd 	.word	0x000055cd
    671c:	00005be5 	.word	0x00005be5
    6720:	00005b85 	.word	0x00005b85

00006724 <setDlFrequency>:
{
    6724:	b530      	push	{r4, r5, lr}
    6726:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    6728:	ac02      	add	r4, sp, #8
    672a:	2208      	movs	r2, #8
    672c:	0020      	movs	r0, r4
    672e:	4b20      	ldr	r3, [pc, #128]	; (67b0 <setDlFrequency+0x8c>)
    6730:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    6732:	ab01      	add	r3, sp, #4
    6734:	7922      	ldrb	r2, [r4, #4]
    6736:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    6738:	2201      	movs	r2, #1
    673a:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    673c:	4b1d      	ldr	r3, [pc, #116]	; (67b4 <setDlFrequency+0x90>)
    673e:	685b      	ldr	r3, [r3, #4]
    6740:	0021      	movs	r1, r4
    6742:	2001      	movs	r0, #1
    6744:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    6746:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6748:	2808      	cmp	r0, #8
    674a:	d002      	beq.n	6752 <setDlFrequency+0x2e>
}
    674c:	0020      	movs	r0, r4
    674e:	b005      	add	sp, #20
    6750:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6752:	a901      	add	r1, sp, #4
    6754:	300d      	adds	r0, #13
    6756:	4b18      	ldr	r3, [pc, #96]	; (67b8 <setDlFrequency+0x94>)
    6758:	4798      	blx	r3
    675a:	0004      	movs	r4, r0
    675c:	2808      	cmp	r0, #8
    675e:	d001      	beq.n	6764 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    6760:	240a      	movs	r4, #10
    6762:	e7f3      	b.n	674c <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    6764:	4a15      	ldr	r2, [pc, #84]	; (67bc <setDlFrequency+0x98>)
    6766:	7a13      	ldrb	r3, [r2, #8]
    6768:	7a50      	ldrb	r0, [r2, #9]
    676a:	0200      	lsls	r0, r0, #8
    676c:	4303      	orrs	r3, r0
    676e:	7a90      	ldrb	r0, [r2, #10]
    6770:	0400      	lsls	r0, r0, #16
    6772:	4318      	orrs	r0, r3
    6774:	7ad3      	ldrb	r3, [r2, #11]
    6776:	061b      	lsls	r3, r3, #24
    6778:	4318      	orrs	r0, r3
    677a:	a902      	add	r1, sp, #8
    677c:	790d      	ldrb	r5, [r1, #4]
    677e:	006b      	lsls	r3, r5, #1
    6780:	195b      	adds	r3, r3, r5
    6782:	009b      	lsls	r3, r3, #2
    6784:	181b      	adds	r3, r3, r0
    6786:	7808      	ldrb	r0, [r1, #0]
    6788:	7118      	strb	r0, [r3, #4]
    678a:	7848      	ldrb	r0, [r1, #1]
    678c:	7158      	strb	r0, [r3, #5]
    678e:	7888      	ldrb	r0, [r1, #2]
    6790:	7198      	strb	r0, [r3, #6]
    6792:	78c9      	ldrb	r1, [r1, #3]
    6794:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    6796:	23fa      	movs	r3, #250	; 0xfa
    6798:	33ff      	adds	r3, #255	; 0xff
    679a:	5cd3      	ldrb	r3, [r2, r3]
    679c:	21fd      	movs	r1, #253	; 0xfd
    679e:	0049      	lsls	r1, r1, #1
    67a0:	5c50      	ldrb	r0, [r2, r1]
    67a2:	0200      	lsls	r0, r0, #8
    67a4:	4318      	orrs	r0, r3
    67a6:	b2c1      	uxtb	r1, r0
    67a8:	0a00      	lsrs	r0, r0, #8
    67aa:	4b05      	ldr	r3, [pc, #20]	; (67c0 <setDlFrequency+0x9c>)
    67ac:	4798      	blx	r3
    67ae:	e7cd      	b.n	674c <setDlFrequency+0x28>
    67b0:	000158c9 	.word	0x000158c9
    67b4:	20000d78 	.word	0x20000d78
    67b8:	000054e5 	.word	0x000054e5
    67bc:	200013e0 	.word	0x200013e0
    67c0:	00008ec5 	.word	0x00008ec5

000067c4 <setNewChannel>:
{
    67c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67c6:	46d6      	mov	lr, sl
    67c8:	464f      	mov	r7, r9
    67ca:	4646      	mov	r6, r8
    67cc:	b5c0      	push	{r6, r7, lr}
    67ce:	b082      	sub	sp, #8
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    67d0:	2326      	movs	r3, #38	; 0x26
    67d2:	4a31      	ldr	r2, [pc, #196]	; (6898 <setNewChannel+0xd4>)
    67d4:	5cd2      	ldrb	r2, [r2, r3]
    67d6:	4b31      	ldr	r3, [pc, #196]	; (689c <setNewChannel+0xd8>)
    67d8:	4113      	asrs	r3, r2
    67da:	07db      	lsls	r3, r3, #31
    67dc:	d407      	bmi.n	67ee <setNewChannel+0x2a>
    67de:	2a05      	cmp	r2, #5
    67e0:	d01f      	beq.n	6822 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    67e2:	2a04      	cmp	r2, #4
    67e4:	d01f      	beq.n	6826 <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    67e6:	2a0f      	cmp	r2, #15
    67e8:	d01f      	beq.n	682a <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    67ea:	4f2d      	ldr	r7, [pc, #180]	; (68a0 <setNewChannel+0xdc>)
    67ec:	e000      	b.n	67f0 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    67ee:	4f2d      	ldr	r7, [pc, #180]	; (68a4 <setNewChannel+0xe0>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    67f0:	ac01      	add	r4, sp, #4
    67f2:	2204      	movs	r2, #4
    67f4:	0020      	movs	r0, r4
    67f6:	4b2c      	ldr	r3, [pc, #176]	; (68a8 <setNewChannel+0xe4>)
    67f8:	4798      	blx	r3
	chMask = newCh.channelMask;
    67fa:	8825      	ldrh	r5, [r4, #0]
		result = LORAWAN_INVALID_PARAMETER;
    67fc:	260a      	movs	r6, #10
	if(/*ValidateChannelMaskT2(&chMask) != LORAWAN_SUCCESS*/ chMask == 0 || ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, &newCh.channelMaskCntl) != LORAWAN_SUCCESS)
    67fe:	2d00      	cmp	r5, #0
    6800:	d008      	beq.n	6814 <setNewChannel+0x50>
    6802:	466b      	mov	r3, sp
    6804:	1d99      	adds	r1, r3, #6
    6806:	201b      	movs	r0, #27
    6808:	4b28      	ldr	r3, [pc, #160]	; (68ac <setNewChannel+0xe8>)
    680a:	4798      	blx	r3
    680c:	0006      	movs	r6, r0
    680e:	2808      	cmp	r0, #8
    6810:	d00d      	beq.n	682e <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    6812:	260a      	movs	r6, #10
}
    6814:	0030      	movs	r0, r6
    6816:	b002      	add	sp, #8
    6818:	bc1c      	pop	{r2, r3, r4}
    681a:	4690      	mov	r8, r2
    681c:	4699      	mov	r9, r3
    681e:	46a2      	mov	sl, r4
    6820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    6822:	4f20      	ldr	r7, [pc, #128]	; (68a4 <setNewChannel+0xe0>)
    6824:	e7e4      	b.n	67f0 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    6826:	4f22      	ldr	r7, [pc, #136]	; (68b0 <setNewChannel+0xec>)
    6828:	e7e2      	b.n	67f0 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatus;
    682a:	4f22      	ldr	r7, [pc, #136]	; (68b4 <setNewChannel+0xf0>)
    682c:	e7e0      	b.n	67f0 <setNewChannel+0x2c>
		if(newCh.channelMaskCntl == 6)
    682e:	ab01      	add	r3, sp, #4
    6830:	789c      	ldrb	r4, [r3, #2]
    6832:	2c06      	cmp	r4, #6
    6834:	d00c      	beq.n	6850 <setNewChannel+0x8c>
		else if(newCh.channelMaskCntl == 0)
    6836:	2c00      	cmp	r4, #0
    6838:	d1ec      	bne.n	6814 <setNewChannel+0x50>
			for(i = 0; i < RegParams.maxChannels; i++)
    683a:	2322      	movs	r3, #34	; 0x22
    683c:	4a16      	ldr	r2, [pc, #88]	; (6898 <setNewChannel+0xd4>)
    683e:	56d3      	ldrsb	r3, [r2, r3]
    6840:	2b00      	cmp	r3, #0
    6842:	dde7      	ble.n	6814 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    6844:	2301      	movs	r3, #1
    6846:	4698      	mov	r8, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    6848:	4692      	mov	sl, r2
    684a:	2322      	movs	r3, #34	; 0x22
    684c:	4699      	mov	r9, r3
    684e:	e01c      	b.n	688a <setNewChannel+0xc6>
			for(i = 0; i < RegParams.maxChannels; i++)
    6850:	2322      	movs	r3, #34	; 0x22
    6852:	4a11      	ldr	r2, [pc, #68]	; (6898 <setNewChannel+0xd4>)
    6854:	56d3      	ldrsb	r3, [r2, r3]
    6856:	2b00      	cmp	r3, #0
    6858:	dddc      	ble.n	6814 <setNewChannel+0x50>
    685a:	2400      	movs	r4, #0
    685c:	4690      	mov	r8, r2
    685e:	2522      	movs	r5, #34	; 0x22
				pUpdateChidStatus(i,ENABLED);
    6860:	2101      	movs	r1, #1
    6862:	0020      	movs	r0, r4
    6864:	47b8      	blx	r7
			for(i = 0; i < RegParams.maxChannels; i++)
    6866:	3401      	adds	r4, #1
    6868:	b2e4      	uxtb	r4, r4
    686a:	4643      	mov	r3, r8
    686c:	575b      	ldrsb	r3, [r3, r5]
    686e:	429c      	cmp	r4, r3
    6870:	dbf6      	blt.n	6860 <setNewChannel+0x9c>
    6872:	e7cf      	b.n	6814 <setNewChannel+0x50>
					pUpdateChidStatus(i,DISABLED);
    6874:	2100      	movs	r1, #0
    6876:	0020      	movs	r0, r4
    6878:	47b8      	blx	r7
				chMask = chMask >> SHIFT1;
    687a:	086d      	lsrs	r5, r5, #1
			for(i = 0; i < RegParams.maxChannels; i++)
    687c:	3401      	adds	r4, #1
    687e:	b2e4      	uxtb	r4, r4
    6880:	4653      	mov	r3, sl
    6882:	464a      	mov	r2, r9
    6884:	569b      	ldrsb	r3, [r3, r2]
    6886:	429c      	cmp	r4, r3
    6888:	dac4      	bge.n	6814 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    688a:	4643      	mov	r3, r8
    688c:	422b      	tst	r3, r5
    688e:	d0f1      	beq.n	6874 <setNewChannel+0xb0>
					pUpdateChidStatus(i, ENABLED);
    6890:	4641      	mov	r1, r8
    6892:	0020      	movs	r0, r4
    6894:	47b8      	blx	r7
    6896:	e7f0      	b.n	687a <setNewChannel+0xb6>
    6898:	200013e0 	.word	0x200013e0
    689c:	00007fc0 	.word	0x00007fc0
    68a0:	00005c29 	.word	0x00005c29
    68a4:	00005e35 	.word	0x00005e35
    68a8:	000158c9 	.word	0x000158c9
    68ac:	00005651 	.word	0x00005651
    68b0:	00005d8d 	.word	0x00005d8d
    68b4:	00005b85 	.word	0x00005b85

000068b8 <setFrequency>:
{
    68b8:	b570      	push	{r4, r5, r6, lr}
    68ba:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    68bc:	ac02      	add	r4, sp, #8
    68be:	2208      	movs	r2, #8
    68c0:	0020      	movs	r0, r4
    68c2:	4b3f      	ldr	r3, [pc, #252]	; (69c0 <setFrequency+0x108>)
    68c4:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    68c6:	ab01      	add	r3, sp, #4
    68c8:	7922      	ldrb	r2, [r4, #4]
    68ca:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    68cc:	2200      	movs	r2, #0
    68ce:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    68d0:	4b3c      	ldr	r3, [pc, #240]	; (69c4 <setFrequency+0x10c>)
    68d2:	685b      	ldr	r3, [r3, #4]
    68d4:	0021      	movs	r1, r4
    68d6:	2001      	movs	r0, #1
    68d8:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    68da:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    68dc:	2808      	cmp	r0, #8
    68de:	d002      	beq.n	68e6 <setFrequency+0x2e>
}
    68e0:	0020      	movs	r0, r4
    68e2:	b004      	add	sp, #16
    68e4:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    68e6:	a901      	add	r1, sp, #4
    68e8:	300d      	adds	r0, #13
    68ea:	4b37      	ldr	r3, [pc, #220]	; (69c8 <setFrequency+0x110>)
    68ec:	4798      	blx	r3
    68ee:	0004      	movs	r4, r0
    68f0:	2808      	cmp	r0, #8
    68f2:	d001      	beq.n	68f8 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    68f4:	240a      	movs	r4, #10
    68f6:	e7f3      	b.n	68e0 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    68f8:	ab02      	add	r3, sp, #8
    68fa:	791d      	ldrb	r5, [r3, #4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0)
    68fc:	2326      	movs	r3, #38	; 0x26
    68fe:	4a33      	ldr	r2, [pc, #204]	; (69cc <setFrequency+0x114>)
    6900:	5cd2      	ldrb	r2, [r2, r3]
    6902:	3b23      	subs	r3, #35	; 0x23
    6904:	4113      	asrs	r3, r2
    6906:	07db      	lsls	r3, r3, #31
    6908:	d446      	bmi.n	6998 <setFrequency+0xe0>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    690a:	006a      	lsls	r2, r5, #1
    690c:	1952      	adds	r2, r2, r5
    690e:	0090      	lsls	r0, r2, #2
    6910:	a902      	add	r1, sp, #8
    6912:	9d02      	ldr	r5, [sp, #8]
    6914:	4b2d      	ldr	r3, [pc, #180]	; (69cc <setFrequency+0x114>)
    6916:	7a1a      	ldrb	r2, [r3, #8]
    6918:	7a5e      	ldrb	r6, [r3, #9]
    691a:	0236      	lsls	r6, r6, #8
    691c:	4316      	orrs	r6, r2
    691e:	7a9a      	ldrb	r2, [r3, #10]
    6920:	0412      	lsls	r2, r2, #16
    6922:	4316      	orrs	r6, r2
    6924:	7ada      	ldrb	r2, [r3, #11]
    6926:	0612      	lsls	r2, r2, #24
    6928:	4332      	orrs	r2, r6
    692a:	5415      	strb	r5, [r2, r0]
    692c:	0a2e      	lsrs	r6, r5, #8
    692e:	1812      	adds	r2, r2, r0
    6930:	7056      	strb	r6, [r2, #1]
    6932:	0c2e      	lsrs	r6, r5, #16
    6934:	7096      	strb	r6, [r2, #2]
    6936:	0e2d      	lsrs	r5, r5, #24
    6938:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    693a:	7a1a      	ldrb	r2, [r3, #8]
    693c:	7a5d      	ldrb	r5, [r3, #9]
    693e:	022d      	lsls	r5, r5, #8
    6940:	4315      	orrs	r5, r2
    6942:	7a9a      	ldrb	r2, [r3, #10]
    6944:	0412      	lsls	r2, r2, #16
    6946:	4315      	orrs	r5, r2
    6948:	7ada      	ldrb	r2, [r3, #11]
    694a:	0612      	lsls	r2, r2, #24
    694c:	432a      	orrs	r2, r5
    694e:	1812      	adds	r2, r2, r0
    6950:	780d      	ldrb	r5, [r1, #0]
    6952:	7115      	strb	r5, [r2, #4]
    6954:	784d      	ldrb	r5, [r1, #1]
    6956:	7155      	strb	r5, [r2, #5]
    6958:	788d      	ldrb	r5, [r1, #2]
    695a:	7195      	strb	r5, [r2, #6]
    695c:	78c9      	ldrb	r1, [r1, #3]
    695e:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    6960:	7a1a      	ldrb	r2, [r3, #8]
    6962:	7a59      	ldrb	r1, [r3, #9]
    6964:	0209      	lsls	r1, r1, #8
    6966:	4311      	orrs	r1, r2
    6968:	7a9a      	ldrb	r2, [r3, #10]
    696a:	0412      	lsls	r2, r2, #16
    696c:	4311      	orrs	r1, r2
    696e:	7ada      	ldrb	r2, [r3, #11]
    6970:	0612      	lsls	r2, r2, #24
    6972:	430a      	orrs	r2, r1
    6974:	1812      	adds	r2, r2, r0
    6976:	7ad1      	ldrb	r1, [r2, #11]
    6978:	2001      	movs	r0, #1
    697a:	4301      	orrs	r1, r0
    697c:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    697e:	22fa      	movs	r2, #250	; 0xfa
    6980:	32ff      	adds	r2, #255	; 0xff
    6982:	5c9a      	ldrb	r2, [r3, r2]
    6984:	21fd      	movs	r1, #253	; 0xfd
    6986:	0049      	lsls	r1, r1, #1
    6988:	5c58      	ldrb	r0, [r3, r1]
    698a:	0200      	lsls	r0, r0, #8
    698c:	4310      	orrs	r0, r2
    698e:	b2c1      	uxtb	r1, r0
    6990:	0a00      	lsrs	r0, r0, #8
    6992:	4b0f      	ldr	r3, [pc, #60]	; (69d0 <setFrequency+0x118>)
    6994:	4798      	blx	r3
    6996:	e7a3      	b.n	68e0 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    6998:	4a0c      	ldr	r2, [pc, #48]	; (69cc <setFrequency+0x114>)
    699a:	7a16      	ldrb	r6, [r2, #8]
    699c:	7a53      	ldrb	r3, [r2, #9]
    699e:	021b      	lsls	r3, r3, #8
    69a0:	4333      	orrs	r3, r6
    69a2:	7a96      	ldrb	r6, [r2, #10]
    69a4:	0436      	lsls	r6, r6, #16
    69a6:	4333      	orrs	r3, r6
    69a8:	7ad6      	ldrb	r6, [r2, #11]
    69aa:	0636      	lsls	r6, r6, #24
    69ac:	431e      	orrs	r6, r3
    69ae:	006b      	lsls	r3, r5, #1
    69b0:	195b      	adds	r3, r3, r5
    69b2:	009b      	lsls	r3, r3, #2
    69b4:	18f6      	adds	r6, r6, r3
    69b6:	9802      	ldr	r0, [sp, #8]
    69b8:	4b06      	ldr	r3, [pc, #24]	; (69d4 <setFrequency+0x11c>)
    69ba:	4798      	blx	r3
    69bc:	7230      	strb	r0, [r6, #8]
    69be:	e7a4      	b.n	690a <setFrequency+0x52>
    69c0:	000158c9 	.word	0x000158c9
    69c4:	20000d78 	.word	0x20000d78
    69c8:	000054e5 	.word	0x000054e5
    69cc:	200013e0 	.word	0x200013e0
    69d0:	00008ec5 	.word	0x00008ec5
    69d4:	00005775 	.word	0x00005775

000069d8 <setDutyCycle>:
{
    69d8:	b570      	push	{r4, r5, r6, lr}
    69da:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    69dc:	ac01      	add	r4, sp, #4
    69de:	2204      	movs	r2, #4
    69e0:	0020      	movs	r0, r4
    69e2:	4b2d      	ldr	r3, [pc, #180]	; (6a98 <setDutyCycle+0xc0>)
    69e4:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    69e6:	78a5      	ldrb	r5, [r4, #2]
    69e8:	466b      	mov	r3, sp
    69ea:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    69ec:	2301      	movs	r3, #1
    69ee:	466a      	mov	r2, sp
    69f0:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    69f2:	4669      	mov	r1, sp
    69f4:	2015      	movs	r0, #21
    69f6:	4b29      	ldr	r3, [pc, #164]	; (6a9c <setDutyCycle+0xc4>)
    69f8:	4798      	blx	r3
    69fa:	0004      	movs	r4, r0
    69fc:	2808      	cmp	r0, #8
    69fe:	d003      	beq.n	6a08 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    6a00:	240a      	movs	r4, #10
}
    6a02:	0020      	movs	r0, r4
    6a04:	b002      	add	sp, #8
    6a06:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    6a08:	0069      	lsls	r1, r5, #1
    6a0a:	1949      	adds	r1, r1, r5
    6a0c:	0089      	lsls	r1, r1, #2
    6a0e:	4b24      	ldr	r3, [pc, #144]	; (6aa0 <setDutyCycle+0xc8>)
    6a10:	7a1a      	ldrb	r2, [r3, #8]
    6a12:	7a58      	ldrb	r0, [r3, #9]
    6a14:	0200      	lsls	r0, r0, #8
    6a16:	4310      	orrs	r0, r2
    6a18:	7a9a      	ldrb	r2, [r3, #10]
    6a1a:	0412      	lsls	r2, r2, #16
    6a1c:	4310      	orrs	r0, r2
    6a1e:	7ada      	ldrb	r2, [r3, #11]
    6a20:	0612      	lsls	r2, r2, #24
    6a22:	4302      	orrs	r2, r0
    6a24:	1852      	adds	r2, r2, r1
    6a26:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    6a28:	0028      	movs	r0, r5
    6a2a:	30c8      	adds	r0, #200	; 0xc8
    6a2c:	0040      	lsls	r0, r0, #1
    6a2e:	aa01      	add	r2, sp, #4
    6a30:	1818      	adds	r0, r3, r0
    6a32:	7816      	ldrb	r6, [r2, #0]
    6a34:	7186      	strb	r6, [r0, #6]
    6a36:	7852      	ldrb	r2, [r2, #1]
    6a38:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    6a3a:	7b18      	ldrb	r0, [r3, #12]
    6a3c:	7b5a      	ldrb	r2, [r3, #13]
    6a3e:	0212      	lsls	r2, r2, #8
    6a40:	4302      	orrs	r2, r0
    6a42:	7b98      	ldrb	r0, [r3, #14]
    6a44:	0400      	lsls	r0, r0, #16
    6a46:	4302      	orrs	r2, r0
    6a48:	7bd8      	ldrb	r0, [r3, #15]
    6a4a:	0600      	lsls	r0, r0, #24
    6a4c:	4310      	orrs	r0, r2
    6a4e:	006a      	lsls	r2, r5, #1
    6a50:	1952      	adds	r2, r2, r5
    6a52:	0092      	lsls	r2, r2, #2
    6a54:	1812      	adds	r2, r2, r0
    6a56:	2000      	movs	r0, #0
    6a58:	7210      	strb	r0, [r2, #8]
    6a5a:	7250      	strb	r0, [r2, #9]
    6a5c:	7290      	strb	r0, [r2, #10]
    6a5e:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    6a60:	7a1d      	ldrb	r5, [r3, #8]
    6a62:	7a5a      	ldrb	r2, [r3, #9]
    6a64:	0212      	lsls	r2, r2, #8
    6a66:	432a      	orrs	r2, r5
    6a68:	7a9d      	ldrb	r5, [r3, #10]
    6a6a:	042d      	lsls	r5, r5, #16
    6a6c:	432a      	orrs	r2, r5
    6a6e:	7add      	ldrb	r5, [r3, #11]
    6a70:	062d      	lsls	r5, r5, #24
    6a72:	4315      	orrs	r5, r2
    6a74:	186d      	adds	r5, r5, r1
    6a76:	7aea      	ldrb	r2, [r5, #11]
    6a78:	2104      	movs	r1, #4
    6a7a:	430a      	orrs	r2, r1
    6a7c:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    6a7e:	22fa      	movs	r2, #250	; 0xfa
    6a80:	32ff      	adds	r2, #255	; 0xff
    6a82:	5c9a      	ldrb	r2, [r3, r2]
    6a84:	21fd      	movs	r1, #253	; 0xfd
    6a86:	0049      	lsls	r1, r1, #1
    6a88:	5c58      	ldrb	r0, [r3, r1]
    6a8a:	0200      	lsls	r0, r0, #8
    6a8c:	4310      	orrs	r0, r2
    6a8e:	b2c1      	uxtb	r1, r0
    6a90:	0a00      	lsrs	r0, r0, #8
    6a92:	4b04      	ldr	r3, [pc, #16]	; (6aa4 <setDutyCycle+0xcc>)
    6a94:	4798      	blx	r3
    6a96:	e7b4      	b.n	6a02 <setDutyCycle+0x2a>
    6a98:	000158c9 	.word	0x000158c9
    6a9c:	000054e5 	.word	0x000054e5
    6aa0:	200013e0 	.word	0x200013e0
    6aa4:	00008ec5 	.word	0x00008ec5

00006aa8 <LORAREG_GetAttr_DutyCycleTimer>:
{
    6aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aaa:	46d6      	mov	lr, sl
    6aac:	464f      	mov	r7, r9
    6aae:	4646      	mov	r6, r8
    6ab0:	b5c0      	push	{r6, r7, lr}
    6ab2:	b084      	sub	sp, #16
    6ab4:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    6ab6:	780b      	ldrb	r3, [r1, #0]
    6ab8:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6aba:	2322      	movs	r3, #34	; 0x22
    6abc:	4a51      	ldr	r2, [pc, #324]	; (6c04 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    6abe:	56d6      	ldrsb	r6, [r2, r3]
    6ac0:	2e00      	cmp	r6, #0
    6ac2:	dc00      	bgt.n	6ac6 <LORAREG_GetAttr_DutyCycleTimer+0x1e>
    6ac4:	e097      	b.n	6bf6 <LORAREG_GetAttr_DutyCycleTimer+0x14e>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    6ac6:	0013      	movs	r3, r2
    6ac8:	7910      	ldrb	r0, [r2, #4]
    6aca:	7952      	ldrb	r2, [r2, #5]
    6acc:	0212      	lsls	r2, r2, #8
    6ace:	4302      	orrs	r2, r0
    6ad0:	7998      	ldrb	r0, [r3, #6]
    6ad2:	0400      	lsls	r0, r0, #16
    6ad4:	4302      	orrs	r2, r0
    6ad6:	79d8      	ldrb	r0, [r3, #7]
    6ad8:	0600      	lsls	r0, r0, #24
    6ada:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    6adc:	7b1f      	ldrb	r7, [r3, #12]
    6ade:	7b5a      	ldrb	r2, [r3, #13]
    6ae0:	0212      	lsls	r2, r2, #8
    6ae2:	433a      	orrs	r2, r7
    6ae4:	7b9f      	ldrb	r7, [r3, #14]
    6ae6:	043f      	lsls	r7, r7, #16
    6ae8:	433a      	orrs	r2, r7
    6aea:	7bdf      	ldrb	r7, [r3, #15]
    6aec:	063f      	lsls	r7, r7, #24
    6aee:	4317      	orrs	r7, r2
    6af0:	2500      	movs	r5, #0
    6af2:	2300      	movs	r3, #0
    6af4:	2201      	movs	r2, #1
    6af6:	4252      	negs	r2, r2
    6af8:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    6afa:	4a42      	ldr	r2, [pc, #264]	; (6c04 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    6afc:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6afe:	4662      	mov	r2, ip
    6b00:	9201      	str	r2, [sp, #4]
    6b02:	e004      	b.n	6b0e <LORAREG_GetAttr_DutyCycleTimer+0x66>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6b04:	3301      	adds	r3, #1
    6b06:	b2db      	uxtb	r3, r3
    6b08:	001d      	movs	r5, r3
    6b0a:	42b3      	cmp	r3, r6
    6b0c:	da27      	bge.n	6b5e <LORAREG_GetAttr_DutyCycleTimer+0xb6>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    6b0e:	0059      	lsls	r1, r3, #1
    6b10:	1841      	adds	r1, r0, r1
    6b12:	780a      	ldrb	r2, [r1, #0]
    6b14:	2a00      	cmp	r2, #0
    6b16:	d0f5      	beq.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    6b18:	006a      	lsls	r2, r5, #1
    6b1a:	1952      	adds	r2, r2, r5
    6b1c:	0092      	lsls	r2, r2, #2
    6b1e:	4442      	add	r2, r8
    6b20:	3294      	adds	r2, #148	; 0x94
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    6b22:	7815      	ldrb	r5, [r2, #0]
    6b24:	006a      	lsls	r2, r5, #1
    6b26:	1952      	adds	r2, r2, r5
    6b28:	0092      	lsls	r2, r2, #2
    6b2a:	18ba      	adds	r2, r7, r2
    6b2c:	7a15      	ldrb	r5, [r2, #8]
    6b2e:	7a54      	ldrb	r4, [r2, #9]
    6b30:	0224      	lsls	r4, r4, #8
    6b32:	4325      	orrs	r5, r4
    6b34:	7a94      	ldrb	r4, [r2, #10]
    6b36:	0424      	lsls	r4, r4, #16
    6b38:	4325      	orrs	r5, r4
    6b3a:	7ad2      	ldrb	r2, [r2, #11]
    6b3c:	0612      	lsls	r2, r2, #24
    6b3e:	432a      	orrs	r2, r5
    6b40:	d0e0      	beq.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
    6b42:	454a      	cmp	r2, r9
    6b44:	d8de      	bhi.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6b46:	784d      	ldrb	r5, [r1, #1]
    6b48:	072d      	lsls	r5, r5, #28
    6b4a:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    6b4c:	45ac      	cmp	ip, r5
    6b4e:	dbd9      	blt.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    6b50:	7849      	ldrb	r1, [r1, #1]
    6b52:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6b54:	9c01      	ldr	r4, [sp, #4]
    6b56:	428c      	cmp	r4, r1
    6b58:	dcd4      	bgt.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6b5a:	4691      	mov	r9, r2
    6b5c:	e7d2      	b.n	6b04 <LORAREG_GetAttr_DutyCycleTimer+0x5c>
    if(minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    6b5e:	4929      	ldr	r1, [pc, #164]	; (6c04 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    6b60:	23d1      	movs	r3, #209	; 0xd1
    6b62:	005b      	lsls	r3, r3, #1
    6b64:	5ccb      	ldrb	r3, [r1, r3]
    6b66:	22a4      	movs	r2, #164	; 0xa4
    6b68:	32ff      	adds	r2, #255	; 0xff
    6b6a:	5c8a      	ldrb	r2, [r1, r2]
    6b6c:	0212      	lsls	r2, r2, #8
    6b6e:	431a      	orrs	r2, r3
    6b70:	23d2      	movs	r3, #210	; 0xd2
    6b72:	005b      	lsls	r3, r3, #1
    6b74:	5ccb      	ldrb	r3, [r1, r3]
    6b76:	041b      	lsls	r3, r3, #16
    6b78:	431a      	orrs	r2, r3
    6b7a:	23a6      	movs	r3, #166	; 0xa6
    6b7c:	33ff      	adds	r3, #255	; 0xff
    6b7e:	5ccb      	ldrb	r3, [r1, r3]
    6b80:	061b      	lsls	r3, r3, #24
    6b82:	4313      	orrs	r3, r2
    6b84:	4599      	cmp	r9, r3
    6b86:	d239      	bcs.n	6bfc <LORAREG_GetAttr_DutyCycleTimer+0x154>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    6b88:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    6b8a:	4d1e      	ldr	r5, [pc, #120]	; (6c04 <LORAREG_GetAttr_DutyCycleTimer+0x15c>)
    6b8c:	7c2b      	ldrb	r3, [r5, #16]
    6b8e:	7c6a      	ldrb	r2, [r5, #17]
    6b90:	0212      	lsls	r2, r2, #8
    6b92:	431a      	orrs	r2, r3
    6b94:	7cab      	ldrb	r3, [r5, #18]
    6b96:	041b      	lsls	r3, r3, #16
    6b98:	431a      	orrs	r2, r3
    6b9a:	7ceb      	ldrb	r3, [r5, #19]
    6b9c:	061b      	lsls	r3, r3, #24
    6b9e:	4313      	orrs	r3, r2
    6ba0:	7918      	ldrb	r0, [r3, #4]
    6ba2:	4b19      	ldr	r3, [pc, #100]	; (6c08 <LORAREG_GetAttr_DutyCycleTimer+0x160>)
    6ba4:	4798      	blx	r3
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6ba6:	7c2b      	ldrb	r3, [r5, #16]
    6ba8:	7c6a      	ldrb	r2, [r5, #17]
    6baa:	0212      	lsls	r2, r2, #8
    6bac:	431a      	orrs	r2, r3
    6bae:	7cab      	ldrb	r3, [r5, #18]
    6bb0:	041b      	lsls	r3, r3, #16
    6bb2:	431a      	orrs	r2, r3
    6bb4:	7ceb      	ldrb	r3, [r5, #19]
    6bb6:	061b      	lsls	r3, r3, #24
    6bb8:	4313      	orrs	r3, r2
    6bba:	781d      	ldrb	r5, [r3, #0]
    6bbc:	785a      	ldrb	r2, [r3, #1]
    6bbe:	0212      	lsls	r2, r2, #8
    6bc0:	432a      	orrs	r2, r5
    6bc2:	789d      	ldrb	r5, [r3, #2]
    6bc4:	042d      	lsls	r5, r5, #16
    6bc6:	432a      	orrs	r2, r5
    6bc8:	78dd      	ldrb	r5, [r3, #3]
    6bca:	062d      	lsls	r5, r5, #24
    6bcc:	4315      	orrs	r5, r2
    6bce:	21fa      	movs	r1, #250	; 0xfa
    6bd0:	0089      	lsls	r1, r1, #2
    6bd2:	4b0e      	ldr	r3, [pc, #56]	; (6c0c <LORAREG_GetAttr_DutyCycleTimer+0x164>)
    6bd4:	4798      	blx	r3
    6bd6:	1a2d      	subs	r5, r5, r0
    minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    6bd8:	9b03      	ldr	r3, [sp, #12]
    6bda:	1b5d      	subs	r5, r3, r5
    6bdc:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    6bde:	2204      	movs	r2, #4
    6be0:	a903      	add	r1, sp, #12
    6be2:	9800      	ldr	r0, [sp, #0]
    6be4:	4b0a      	ldr	r3, [pc, #40]	; (6c10 <LORAREG_GetAttr_DutyCycleTimer+0x168>)
    6be6:	4798      	blx	r3
}
    6be8:	2008      	movs	r0, #8
    6bea:	b004      	add	sp, #16
    6bec:	bc1c      	pop	{r2, r3, r4}
    6bee:	4690      	mov	r8, r2
    6bf0:	4699      	mov	r9, r3
    6bf2:	46a2      	mov	sl, r4
    6bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t minimSubBandTimer = UINT32_MAX;
    6bf6:	2301      	movs	r3, #1
    6bf8:	425b      	negs	r3, r3
    6bfa:	4699      	mov	r9, r3
	    minDutyCycleTimer = minimSubBandTimer;
    6bfc:	464b      	mov	r3, r9
    6bfe:	9303      	str	r3, [sp, #12]
    6c00:	e7c3      	b.n	6b8a <LORAREG_GetAttr_DutyCycleTimer+0xe2>
    6c02:	46c0      	nop			; (mov r8, r8)
    6c04:	200013e0 	.word	0x200013e0
    6c08:	0000a099 	.word	0x0000a099
    6c0c:	0001270d 	.word	0x0001270d
    6c10:	000158c9 	.word	0x000158c9

00006c14 <setDutyCycleTimer>:
{
    6c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c16:	46de      	mov	lr, fp
    6c18:	4657      	mov	r7, sl
    6c1a:	464e      	mov	r6, r9
    6c1c:	4645      	mov	r5, r8
    6c1e:	b5e0      	push	{r5, r6, r7, lr}
    6c20:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    6c22:	ac04      	add	r4, sp, #16
    6c24:	2206      	movs	r2, #6
    6c26:	0020      	movs	r0, r4
    6c28:	4bbc      	ldr	r3, [pc, #752]	; (6f1c <setDutyCycleTimer+0x308>)
    6c2a:	4798      	blx	r3
	if(updateDCTimer.joining != 1)
    6c2c:	7923      	ldrb	r3, [r4, #4]
    6c2e:	2b00      	cmp	r3, #0
    6c30:	d007      	beq.n	6c42 <setDutyCycleTimer+0x2e>
}
    6c32:	2008      	movs	r0, #8
    6c34:	b007      	add	sp, #28
    6c36:	bc3c      	pop	{r2, r3, r4, r5}
    6c38:	4690      	mov	r8, r2
    6c3a:	4699      	mov	r9, r3
    6c3c:	46a2      	mov	sl, r4
    6c3e:	46ab      	mov	fp, r5
    6c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    6c42:	49b7      	ldr	r1, [pc, #732]	; (6f20 <setDutyCycleTimer+0x30c>)
    6c44:	7a0b      	ldrb	r3, [r1, #8]
    6c46:	7a4a      	ldrb	r2, [r1, #9]
    6c48:	0212      	lsls	r2, r2, #8
    6c4a:	4313      	orrs	r3, r2
    6c4c:	7a8a      	ldrb	r2, [r1, #10]
    6c4e:	0412      	lsls	r2, r2, #16
    6c50:	431a      	orrs	r2, r3
    6c52:	7acb      	ldrb	r3, [r1, #11]
    6c54:	061b      	lsls	r3, r3, #24
    6c56:	431a      	orrs	r2, r3
    6c58:	2327      	movs	r3, #39	; 0x27
    6c5a:	5cc8      	ldrb	r0, [r1, r3]
    6c5c:	0043      	lsls	r3, r0, #1
    6c5e:	181b      	adds	r3, r3, r0
    6c60:	009b      	lsls	r3, r3, #2
    6c62:	189b      	adds	r3, r3, r2
    6c64:	7a1f      	ldrb	r7, [r3, #8]
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    6c66:	007c      	lsls	r4, r7, #1
    6c68:	19e4      	adds	r4, r4, r7
    6c6a:	00a4      	lsls	r4, r4, #2
    6c6c:	aa04      	add	r2, sp, #16
    6c6e:	8815      	ldrh	r5, [r2, #0]
    6c70:	7b08      	ldrb	r0, [r1, #12]
    6c72:	7b4b      	ldrb	r3, [r1, #13]
    6c74:	021b      	lsls	r3, r3, #8
    6c76:	4303      	orrs	r3, r0
    6c78:	7b88      	ldrb	r0, [r1, #14]
    6c7a:	0400      	lsls	r0, r0, #16
    6c7c:	4303      	orrs	r3, r0
    6c7e:	7bc8      	ldrb	r0, [r1, #15]
    6c80:	0600      	lsls	r0, r0, #24
    6c82:	4318      	orrs	r0, r3
    6c84:	003e      	movs	r6, r7
    6c86:	36c8      	adds	r6, #200	; 0xc8
    6c88:	0076      	lsls	r6, r6, #1
    6c8a:	198e      	adds	r6, r1, r6
    6c8c:	79b3      	ldrb	r3, [r6, #6]
    6c8e:	469c      	mov	ip, r3
    6c90:	79f3      	ldrb	r3, [r6, #7]
    6c92:	021b      	lsls	r3, r3, #8
    6c94:	4666      	mov	r6, ip
    6c96:	4333      	orrs	r3, r6
    6c98:	3b01      	subs	r3, #1
    6c9a:	436b      	muls	r3, r5
    6c9c:	1900      	adds	r0, r0, r4
    6c9e:	7203      	strb	r3, [r0, #8]
    6ca0:	0a1e      	lsrs	r6, r3, #8
    6ca2:	7246      	strb	r6, [r0, #9]
    6ca4:	0c1e      	lsrs	r6, r3, #16
    6ca6:	7286      	strb	r6, [r0, #10]
    6ca8:	0e1b      	lsrs	r3, r3, #24
    6caa:	72c3      	strb	r3, [r0, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    6cac:	8853      	ldrh	r3, [r2, #2]
    6cae:	3b01      	subs	r3, #1
    6cb0:	436b      	muls	r3, r5
    6cb2:	22d1      	movs	r2, #209	; 0xd1
    6cb4:	0052      	lsls	r2, r2, #1
    6cb6:	548b      	strb	r3, [r1, r2]
    6cb8:	0a18      	lsrs	r0, r3, #8
    6cba:	000a      	movs	r2, r1
    6cbc:	32a3      	adds	r2, #163	; 0xa3
    6cbe:	32ff      	adds	r2, #255	; 0xff
    6cc0:	7050      	strb	r0, [r2, #1]
    6cc2:	0c18      	lsrs	r0, r3, #16
    6cc4:	7090      	strb	r0, [r2, #2]
    6cc6:	0e1b      	lsrs	r3, r3, #24
    6cc8:	70d3      	strb	r3, [r2, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6cca:	7c0b      	ldrb	r3, [r1, #16]
    6ccc:	7c4a      	ldrb	r2, [r1, #17]
    6cce:	0212      	lsls	r2, r2, #8
    6cd0:	431a      	orrs	r2, r3
    6cd2:	7c8b      	ldrb	r3, [r1, #18]
    6cd4:	041b      	lsls	r3, r3, #16
    6cd6:	431a      	orrs	r2, r3
    6cd8:	7ccb      	ldrb	r3, [r1, #19]
    6cda:	061b      	lsls	r3, r3, #24
    6cdc:	4313      	orrs	r3, r2
    6cde:	7918      	ldrb	r0, [r3, #4]
    6ce0:	4b90      	ldr	r3, [pc, #576]	; (6f24 <setDutyCycleTimer+0x310>)
    6ce2:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    6ce4:	2300      	movs	r3, #0
    6ce6:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6ce8:	2800      	cmp	r0, #0
    6cea:	d124      	bne.n	6d36 <setDutyCycleTimer+0x122>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6cec:	4a8c      	ldr	r2, [pc, #560]	; (6f20 <setDutyCycleTimer+0x30c>)
    6cee:	7b13      	ldrb	r3, [r2, #12]
    6cf0:	7b51      	ldrb	r1, [r2, #13]
    6cf2:	0209      	lsls	r1, r1, #8
    6cf4:	4319      	orrs	r1, r3
    6cf6:	7b93      	ldrb	r3, [r2, #14]
    6cf8:	041b      	lsls	r3, r3, #16
    6cfa:	4319      	orrs	r1, r3
    6cfc:	7bd3      	ldrb	r3, [r2, #15]
    6cfe:	061b      	lsls	r3, r3, #24
    6d00:	430b      	orrs	r3, r1
    6d02:	191c      	adds	r4, r3, r4
    6d04:	7a20      	ldrb	r0, [r4, #8]
    6d06:	7a63      	ldrb	r3, [r4, #9]
    6d08:	021b      	lsls	r3, r3, #8
    6d0a:	4303      	orrs	r3, r0
    6d0c:	7aa0      	ldrb	r0, [r4, #10]
    6d0e:	0400      	lsls	r0, r0, #16
    6d10:	4303      	orrs	r3, r0
    6d12:	7ae0      	ldrb	r0, [r4, #11]
    6d14:	0600      	lsls	r0, r0, #24
    6d16:	4318      	orrs	r0, r3
    6d18:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    6d1a:	2321      	movs	r3, #33	; 0x21
    6d1c:	5cd3      	ldrb	r3, [r2, r3]
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d100      	bne.n	6d24 <setDutyCycleTimer+0x110>
    6d22:	e08d      	b.n	6e40 <setDutyCycleTimer+0x22c>
    6d24:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6d26:	4d7e      	ldr	r5, [pc, #504]	; (6f20 <setDutyCycleTimer+0x30c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6d28:	002e      	movs	r6, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6d2a:	2300      	movs	r3, #0
    6d2c:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    6d2e:	46a8      	mov	r8, r5
    6d30:	2321      	movs	r3, #33	; 0x21
    6d32:	469c      	mov	ip, r3
    6d34:	e042      	b.n	6dbc <setDutyCycleTimer+0x1a8>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    6d36:	4d7a      	ldr	r5, [pc, #488]	; (6f20 <setDutyCycleTimer+0x30c>)
    6d38:	7c2b      	ldrb	r3, [r5, #16]
    6d3a:	7c6a      	ldrb	r2, [r5, #17]
    6d3c:	0212      	lsls	r2, r2, #8
    6d3e:	431a      	orrs	r2, r3
    6d40:	7cab      	ldrb	r3, [r5, #18]
    6d42:	041b      	lsls	r3, r3, #16
    6d44:	431a      	orrs	r2, r3
    6d46:	7ceb      	ldrb	r3, [r5, #19]
    6d48:	061b      	lsls	r3, r3, #24
    6d4a:	4313      	orrs	r3, r2
    6d4c:	7918      	ldrb	r0, [r3, #4]
    6d4e:	4b76      	ldr	r3, [pc, #472]	; (6f28 <setDutyCycleTimer+0x314>)
    6d50:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    6d52:	7c2b      	ldrb	r3, [r5, #16]
    6d54:	7c6a      	ldrb	r2, [r5, #17]
    6d56:	0212      	lsls	r2, r2, #8
    6d58:	431a      	orrs	r2, r3
    6d5a:	7cab      	ldrb	r3, [r5, #18]
    6d5c:	041b      	lsls	r3, r3, #16
    6d5e:	431a      	orrs	r2, r3
    6d60:	7ceb      	ldrb	r3, [r5, #19]
    6d62:	061b      	lsls	r3, r3, #24
    6d64:	4313      	orrs	r3, r2
    6d66:	7918      	ldrb	r0, [r3, #4]
    6d68:	4b70      	ldr	r3, [pc, #448]	; (6f2c <setDutyCycleTimer+0x318>)
    6d6a:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6d6c:	7c2b      	ldrb	r3, [r5, #16]
    6d6e:	7c6a      	ldrb	r2, [r5, #17]
    6d70:	0212      	lsls	r2, r2, #8
    6d72:	431a      	orrs	r2, r3
    6d74:	7cab      	ldrb	r3, [r5, #18]
    6d76:	041b      	lsls	r3, r3, #16
    6d78:	431a      	orrs	r2, r3
    6d7a:	7ceb      	ldrb	r3, [r5, #19]
    6d7c:	061b      	lsls	r3, r3, #24
    6d7e:	4313      	orrs	r3, r2
    6d80:	781d      	ldrb	r5, [r3, #0]
    6d82:	785a      	ldrb	r2, [r3, #1]
    6d84:	0212      	lsls	r2, r2, #8
    6d86:	432a      	orrs	r2, r5
    6d88:	789d      	ldrb	r5, [r3, #2]
    6d8a:	042d      	lsls	r5, r5, #16
    6d8c:	432a      	orrs	r2, r5
    6d8e:	78dd      	ldrb	r5, [r3, #3]
    6d90:	062d      	lsls	r5, r5, #24
    6d92:	4315      	orrs	r5, r2
    6d94:	21fa      	movs	r1, #250	; 0xfa
    6d96:	0089      	lsls	r1, r1, #2
    6d98:	4b65      	ldr	r3, [pc, #404]	; (6f30 <setDutyCycleTimer+0x31c>)
    6d9a:	4798      	blx	r3
    6d9c:	1a2b      	subs	r3, r5, r0
    6d9e:	4699      	mov	r9, r3
    6da0:	e7a4      	b.n	6cec <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6da2:	4651      	mov	r1, sl
    6da4:	7219      	strb	r1, [r3, #8]
    6da6:	7259      	strb	r1, [r3, #9]
    6da8:	7299      	strb	r1, [r3, #10]
    6daa:	72d9      	strb	r1, [r3, #11]
    6dac:	e02c      	b.n	6e08 <setDutyCycleTimer+0x1f4>
	for(i = 0; i < RegParams.maxSubBands; i++)
    6dae:	3201      	adds	r2, #1
    6db0:	b2d2      	uxtb	r2, r2
    6db2:	4643      	mov	r3, r8
    6db4:	4661      	mov	r1, ip
    6db6:	5c5b      	ldrb	r3, [r3, r1]
    6db8:	4293      	cmp	r3, r2
    6dba:	d941      	bls.n	6e40 <setDutyCycleTimer+0x22c>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6dbc:	4297      	cmp	r7, r2
    6dbe:	d0f6      	beq.n	6dae <setDutyCycleTimer+0x19a>
    6dc0:	0054      	lsls	r4, r2, #1
    6dc2:	18a4      	adds	r4, r4, r2
    6dc4:	00a4      	lsls	r4, r4, #2
    6dc6:	7b2b      	ldrb	r3, [r5, #12]
    6dc8:	7b69      	ldrb	r1, [r5, #13]
    6dca:	0209      	lsls	r1, r1, #8
    6dcc:	4319      	orrs	r1, r3
    6dce:	7bab      	ldrb	r3, [r5, #14]
    6dd0:	041b      	lsls	r3, r3, #16
    6dd2:	4319      	orrs	r1, r3
    6dd4:	7beb      	ldrb	r3, [r5, #15]
    6dd6:	061b      	lsls	r3, r3, #24
    6dd8:	430b      	orrs	r3, r1
    6dda:	191b      	adds	r3, r3, r4
    6ddc:	7a18      	ldrb	r0, [r3, #8]
    6dde:	7a59      	ldrb	r1, [r3, #9]
    6de0:	0209      	lsls	r1, r1, #8
    6de2:	4301      	orrs	r1, r0
    6de4:	7a98      	ldrb	r0, [r3, #10]
    6de6:	0400      	lsls	r0, r0, #16
    6de8:	4308      	orrs	r0, r1
    6dea:	7ad9      	ldrb	r1, [r3, #11]
    6dec:	0609      	lsls	r1, r1, #24
    6dee:	4301      	orrs	r1, r0
    6df0:	d0dd      	beq.n	6dae <setDutyCycleTimer+0x19a>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    6df2:	4589      	cmp	r9, r1
    6df4:	d2d5      	bcs.n	6da2 <setDutyCycleTimer+0x18e>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    6df6:	4648      	mov	r0, r9
    6df8:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    6dfa:	7219      	strb	r1, [r3, #8]
    6dfc:	0a08      	lsrs	r0, r1, #8
    6dfe:	7258      	strb	r0, [r3, #9]
    6e00:	0c08      	lsrs	r0, r1, #16
    6e02:	7298      	strb	r0, [r3, #10]
    6e04:	0e09      	lsrs	r1, r1, #24
    6e06:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6e08:	7b33      	ldrb	r3, [r6, #12]
    6e0a:	7b71      	ldrb	r1, [r6, #13]
    6e0c:	0209      	lsls	r1, r1, #8
    6e0e:	4319      	orrs	r1, r3
    6e10:	7bb3      	ldrb	r3, [r6, #14]
    6e12:	041b      	lsls	r3, r3, #16
    6e14:	4319      	orrs	r1, r3
    6e16:	7bf3      	ldrb	r3, [r6, #15]
    6e18:	061b      	lsls	r3, r3, #24
    6e1a:	430b      	orrs	r3, r1
    6e1c:	191c      	adds	r4, r3, r4
    6e1e:	7a23      	ldrb	r3, [r4, #8]
    6e20:	7a61      	ldrb	r1, [r4, #9]
    6e22:	0209      	lsls	r1, r1, #8
    6e24:	4319      	orrs	r1, r3
    6e26:	7aa3      	ldrb	r3, [r4, #10]
    6e28:	041b      	lsls	r3, r3, #16
    6e2a:	4319      	orrs	r1, r3
    6e2c:	7ae3      	ldrb	r3, [r4, #11]
    6e2e:	061b      	lsls	r3, r3, #24
    6e30:	430b      	orrs	r3, r1
    6e32:	9903      	ldr	r1, [sp, #12]
    6e34:	428b      	cmp	r3, r1
    6e36:	d8ba      	bhi.n	6dae <setDutyCycleTimer+0x19a>
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d0b8      	beq.n	6dae <setDutyCycleTimer+0x19a>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    6e3c:	9303      	str	r3, [sp, #12]
    6e3e:	e7b6      	b.n	6dae <setDutyCycleTimer+0x19a>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    6e40:	4937      	ldr	r1, [pc, #220]	; (6f20 <setDutyCycleTimer+0x30c>)
    6e42:	23d1      	movs	r3, #209	; 0xd1
    6e44:	005b      	lsls	r3, r3, #1
    6e46:	5ccb      	ldrb	r3, [r1, r3]
    6e48:	22a4      	movs	r2, #164	; 0xa4
    6e4a:	32ff      	adds	r2, #255	; 0xff
    6e4c:	5c8a      	ldrb	r2, [r1, r2]
    6e4e:	0212      	lsls	r2, r2, #8
    6e50:	431a      	orrs	r2, r3
    6e52:	23d2      	movs	r3, #210	; 0xd2
    6e54:	005b      	lsls	r3, r3, #1
    6e56:	5ccb      	ldrb	r3, [r1, r3]
    6e58:	041b      	lsls	r3, r3, #16
    6e5a:	431a      	orrs	r2, r3
    6e5c:	23a6      	movs	r3, #166	; 0xa6
    6e5e:	33ff      	adds	r3, #255	; 0xff
    6e60:	5ccb      	ldrb	r3, [r1, r3]
    6e62:	061b      	lsls	r3, r3, #24
    6e64:	4313      	orrs	r3, r2
    6e66:	d00f      	beq.n	6e88 <setDutyCycleTimer+0x274>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    6e68:	4599      	cmp	r9, r3
    6e6a:	d24b      	bcs.n	6f04 <setDutyCycleTimer+0x2f0>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    6e6c:	000a      	movs	r2, r1
    6e6e:	4649      	mov	r1, r9
    6e70:	1a5b      	subs	r3, r3, r1
    6e72:	21d1      	movs	r1, #209	; 0xd1
    6e74:	0049      	lsls	r1, r1, #1
    6e76:	5453      	strb	r3, [r2, r1]
    6e78:	0a19      	lsrs	r1, r3, #8
    6e7a:	32a3      	adds	r2, #163	; 0xa3
    6e7c:	32ff      	adds	r2, #255	; 0xff
    6e7e:	7051      	strb	r1, [r2, #1]
    6e80:	0c19      	lsrs	r1, r3, #16
    6e82:	7091      	strb	r1, [r2, #2]
    6e84:	0e1b      	lsrs	r3, r3, #24
    6e86:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    6e88:	4a25      	ldr	r2, [pc, #148]	; (6f20 <setDutyCycleTimer+0x30c>)
    6e8a:	23d1      	movs	r3, #209	; 0xd1
    6e8c:	005b      	lsls	r3, r3, #1
    6e8e:	5cd1      	ldrb	r1, [r2, r3]
    6e90:	23a4      	movs	r3, #164	; 0xa4
    6e92:	33ff      	adds	r3, #255	; 0xff
    6e94:	5cd3      	ldrb	r3, [r2, r3]
    6e96:	021b      	lsls	r3, r3, #8
    6e98:	430b      	orrs	r3, r1
    6e9a:	21d2      	movs	r1, #210	; 0xd2
    6e9c:	0049      	lsls	r1, r1, #1
    6e9e:	5c51      	ldrb	r1, [r2, r1]
    6ea0:	0409      	lsls	r1, r1, #16
    6ea2:	430b      	orrs	r3, r1
    6ea4:	21a6      	movs	r1, #166	; 0xa6
    6ea6:	31ff      	adds	r1, #255	; 0xff
    6ea8:	5c51      	ldrb	r1, [r2, r1]
    6eaa:	0609      	lsls	r1, r1, #24
    6eac:	4319      	orrs	r1, r3
    6eae:	9a03      	ldr	r2, [sp, #12]
    6eb0:	4291      	cmp	r1, r2
    6eb2:	d200      	bcs.n	6eb6 <setDutyCycleTimer+0x2a2>
    6eb4:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    6eb6:	4b1a      	ldr	r3, [pc, #104]	; (6f20 <setDutyCycleTimer+0x30c>)
    6eb8:	7c1a      	ldrb	r2, [r3, #16]
    6eba:	7c58      	ldrb	r0, [r3, #17]
    6ebc:	0200      	lsls	r0, r0, #8
    6ebe:	4310      	orrs	r0, r2
    6ec0:	7c9a      	ldrb	r2, [r3, #18]
    6ec2:	0412      	lsls	r2, r2, #16
    6ec4:	4310      	orrs	r0, r2
    6ec6:	7cda      	ldrb	r2, [r3, #19]
    6ec8:	0612      	lsls	r2, r2, #24
    6eca:	4302      	orrs	r2, r0
    6ecc:	7011      	strb	r1, [r2, #0]
    6ece:	0a08      	lsrs	r0, r1, #8
    6ed0:	7050      	strb	r0, [r2, #1]
    6ed2:	0c08      	lsrs	r0, r1, #16
    6ed4:	7090      	strb	r0, [r2, #2]
    6ed6:	0e08      	lsrs	r0, r1, #24
    6ed8:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    6eda:	22fa      	movs	r2, #250	; 0xfa
    6edc:	0092      	lsls	r2, r2, #2
    6ede:	4351      	muls	r1, r2
    6ee0:	7c18      	ldrb	r0, [r3, #16]
    6ee2:	7c5a      	ldrb	r2, [r3, #17]
    6ee4:	0212      	lsls	r2, r2, #8
    6ee6:	4310      	orrs	r0, r2
    6ee8:	7c9a      	ldrb	r2, [r3, #18]
    6eea:	0412      	lsls	r2, r2, #16
    6eec:	4302      	orrs	r2, r0
    6eee:	7cdb      	ldrb	r3, [r3, #19]
    6ef0:	061b      	lsls	r3, r3, #24
    6ef2:	4313      	orrs	r3, r2
    6ef4:	7918      	ldrb	r0, [r3, #4]
    6ef6:	2300      	movs	r3, #0
    6ef8:	9300      	str	r3, [sp, #0]
    6efa:	4b0e      	ldr	r3, [pc, #56]	; (6f34 <setDutyCycleTimer+0x320>)
    6efc:	2200      	movs	r2, #0
    6efe:	4c0e      	ldr	r4, [pc, #56]	; (6f38 <setDutyCycleTimer+0x324>)
    6f00:	47a0      	blx	r4
	return result;
    6f02:	e696      	b.n	6c32 <setDutyCycleTimer+0x1e>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    6f04:	4b06      	ldr	r3, [pc, #24]	; (6f20 <setDutyCycleTimer+0x30c>)
    6f06:	2100      	movs	r1, #0
    6f08:	22d1      	movs	r2, #209	; 0xd1
    6f0a:	0052      	lsls	r2, r2, #1
    6f0c:	5499      	strb	r1, [r3, r2]
    6f0e:	189b      	adds	r3, r3, r2
    6f10:	2200      	movs	r2, #0
    6f12:	705a      	strb	r2, [r3, #1]
    6f14:	709a      	strb	r2, [r3, #2]
    6f16:	70da      	strb	r2, [r3, #3]
    6f18:	e7b6      	b.n	6e88 <setDutyCycleTimer+0x274>
    6f1a:	46c0      	nop			; (mov r8, r8)
    6f1c:	000158c9 	.word	0x000158c9
    6f20:	200013e0 	.word	0x200013e0
    6f24:	0000a085 	.word	0x0000a085
    6f28:	0000a1f1 	.word	0x0000a1f1
    6f2c:	0000a099 	.word	0x0000a099
    6f30:	0001270d 	.word	0x0001270d
    6f34:	00006f3d 	.word	0x00006f3d
    6f38:	00009eed 	.word	0x00009eed

00006f3c <DutyCycleCallback>:
{
    6f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f3e:	46de      	mov	lr, fp
    6f40:	4657      	mov	r7, sl
    6f42:	464e      	mov	r6, r9
    6f44:	4645      	mov	r5, r8
    6f46:	b5e0      	push	{r5, r6, r7, lr}
    6f48:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    6f4a:	4980      	ldr	r1, [pc, #512]	; (714c <DutyCycleCallback+0x210>)
    6f4c:	23d1      	movs	r3, #209	; 0xd1
    6f4e:	005b      	lsls	r3, r3, #1
    6f50:	5cca      	ldrb	r2, [r1, r3]
    6f52:	23a4      	movs	r3, #164	; 0xa4
    6f54:	33ff      	adds	r3, #255	; 0xff
    6f56:	5ccb      	ldrb	r3, [r1, r3]
    6f58:	021b      	lsls	r3, r3, #8
    6f5a:	431a      	orrs	r2, r3
    6f5c:	23d2      	movs	r3, #210	; 0xd2
    6f5e:	005b      	lsls	r3, r3, #1
    6f60:	5ccb      	ldrb	r3, [r1, r3]
    6f62:	041b      	lsls	r3, r3, #16
    6f64:	4313      	orrs	r3, r2
    6f66:	22a6      	movs	r2, #166	; 0xa6
    6f68:	32ff      	adds	r2, #255	; 0xff
    6f6a:	5c8a      	ldrb	r2, [r1, r2]
    6f6c:	0612      	lsls	r2, r2, #24
    6f6e:	431a      	orrs	r2, r3
    6f70:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    6f72:	2321      	movs	r3, #33	; 0x21
    6f74:	5ccb      	ldrb	r3, [r1, r3]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d100      	bne.n	6f7c <DutyCycleCallback+0x40>
    6f7a:	e0df      	b.n	713c <DutyCycleCallback+0x200>
    6f7c:	2600      	movs	r6, #0
    6f7e:	2300      	movs	r3, #0
    6f80:	9304      	str	r3, [sp, #16]
    6f82:	3b01      	subs	r3, #1
    6f84:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    6f86:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    6f88:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    6f8a:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    6f8c:	2300      	movs	r3, #0
    6f8e:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    6f90:	468a      	mov	sl, r1
    6f92:	2321      	movs	r3, #33	; 0x21
    6f94:	4699      	mov	r9, r3
    6f96:	e00c      	b.n	6fb2 <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    6f98:	465a      	mov	r2, fp
    6f9a:	721a      	strb	r2, [r3, #8]
    6f9c:	725a      	strb	r2, [r3, #9]
    6f9e:	729a      	strb	r2, [r3, #10]
    6fa0:	72da      	strb	r2, [r3, #11]
    6fa2:	e03f      	b.n	7024 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    6fa4:	3601      	adds	r6, #1
    6fa6:	b2f6      	uxtb	r6, r6
    6fa8:	4653      	mov	r3, sl
    6faa:	464a      	mov	r2, r9
    6fac:	5c9b      	ldrb	r3, [r3, r2]
    6fae:	42b3      	cmp	r3, r6
    6fb0:	d95a      	bls.n	7068 <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    6fb2:	0071      	lsls	r1, r6, #1
    6fb4:	1989      	adds	r1, r1, r6
    6fb6:	0089      	lsls	r1, r1, #2
    6fb8:	7b3b      	ldrb	r3, [r7, #12]
    6fba:	7b7a      	ldrb	r2, [r7, #13]
    6fbc:	0212      	lsls	r2, r2, #8
    6fbe:	431a      	orrs	r2, r3
    6fc0:	7bbb      	ldrb	r3, [r7, #14]
    6fc2:	041b      	lsls	r3, r3, #16
    6fc4:	431a      	orrs	r2, r3
    6fc6:	7bfb      	ldrb	r3, [r7, #15]
    6fc8:	061b      	lsls	r3, r3, #24
    6fca:	4313      	orrs	r3, r2
    6fcc:	185b      	adds	r3, r3, r1
    6fce:	7a1a      	ldrb	r2, [r3, #8]
    6fd0:	7a58      	ldrb	r0, [r3, #9]
    6fd2:	0200      	lsls	r0, r0, #8
    6fd4:	4310      	orrs	r0, r2
    6fd6:	7a9a      	ldrb	r2, [r3, #10]
    6fd8:	0412      	lsls	r2, r2, #16
    6fda:	4310      	orrs	r0, r2
    6fdc:	7ada      	ldrb	r2, [r3, #11]
    6fde:	0612      	lsls	r2, r2, #24
    6fe0:	4302      	orrs	r2, r0
    6fe2:	d0df      	beq.n	6fa4 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    6fe4:	4640      	mov	r0, r8
    6fe6:	7c05      	ldrb	r5, [r0, #16]
    6fe8:	7c44      	ldrb	r4, [r0, #17]
    6fea:	0224      	lsls	r4, r4, #8
    6fec:	4325      	orrs	r5, r4
    6fee:	7c80      	ldrb	r0, [r0, #18]
    6ff0:	0400      	lsls	r0, r0, #16
    6ff2:	4305      	orrs	r5, r0
    6ff4:	4640      	mov	r0, r8
    6ff6:	7cc0      	ldrb	r0, [r0, #19]
    6ff8:	0600      	lsls	r0, r0, #24
    6ffa:	4328      	orrs	r0, r5
    6ffc:	7804      	ldrb	r4, [r0, #0]
    6ffe:	7845      	ldrb	r5, [r0, #1]
    7000:	022d      	lsls	r5, r5, #8
    7002:	4325      	orrs	r5, r4
    7004:	7884      	ldrb	r4, [r0, #2]
    7006:	0424      	lsls	r4, r4, #16
    7008:	4325      	orrs	r5, r4
    700a:	78c4      	ldrb	r4, [r0, #3]
    700c:	0624      	lsls	r4, r4, #24
    700e:	432c      	orrs	r4, r5
    7010:	42a2      	cmp	r2, r4
    7012:	d9c1      	bls.n	6f98 <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    7014:	1b12      	subs	r2, r2, r4
    7016:	721a      	strb	r2, [r3, #8]
    7018:	0a10      	lsrs	r0, r2, #8
    701a:	7258      	strb	r0, [r3, #9]
    701c:	0c10      	lsrs	r0, r2, #16
    701e:	7298      	strb	r0, [r3, #10]
    7020:	0e12      	lsrs	r2, r2, #24
    7022:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    7024:	4663      	mov	r3, ip
    7026:	7b1b      	ldrb	r3, [r3, #12]
    7028:	4662      	mov	r2, ip
    702a:	7b52      	ldrb	r2, [r2, #13]
    702c:	0212      	lsls	r2, r2, #8
    702e:	431a      	orrs	r2, r3
    7030:	4663      	mov	r3, ip
    7032:	7b9b      	ldrb	r3, [r3, #14]
    7034:	041b      	lsls	r3, r3, #16
    7036:	431a      	orrs	r2, r3
    7038:	4663      	mov	r3, ip
    703a:	7bdb      	ldrb	r3, [r3, #15]
    703c:	061b      	lsls	r3, r3, #24
    703e:	4313      	orrs	r3, r2
    7040:	1859      	adds	r1, r3, r1
    7042:	7a0b      	ldrb	r3, [r1, #8]
    7044:	7a4a      	ldrb	r2, [r1, #9]
    7046:	0212      	lsls	r2, r2, #8
    7048:	431a      	orrs	r2, r3
    704a:	7a8b      	ldrb	r3, [r1, #10]
    704c:	041b      	lsls	r3, r3, #16
    704e:	431a      	orrs	r2, r3
    7050:	7acb      	ldrb	r3, [r1, #11]
    7052:	061b      	lsls	r3, r3, #24
    7054:	4313      	orrs	r3, r2
    7056:	9a03      	ldr	r2, [sp, #12]
    7058:	4293      	cmp	r3, r2
    705a:	d8a3      	bhi.n	6fa4 <DutyCycleCallback+0x68>
    705c:	2b00      	cmp	r3, #0
    705e:	d0a1      	beq.n	6fa4 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    7060:	9303      	str	r3, [sp, #12]
                found = 1;
    7062:	2301      	movs	r3, #1
    7064:	9304      	str	r3, [sp, #16]
    7066:	e79d      	b.n	6fa4 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    7068:	9b05      	ldr	r3, [sp, #20]
    706a:	2b00      	cmp	r3, #0
    706c:	d031      	beq.n	70d2 <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    706e:	4937      	ldr	r1, [pc, #220]	; (714c <DutyCycleCallback+0x210>)
    7070:	7c0b      	ldrb	r3, [r1, #16]
    7072:	7c4a      	ldrb	r2, [r1, #17]
    7074:	0212      	lsls	r2, r2, #8
    7076:	431a      	orrs	r2, r3
    7078:	7c8b      	ldrb	r3, [r1, #18]
    707a:	041b      	lsls	r3, r3, #16
    707c:	431a      	orrs	r2, r3
    707e:	7ccb      	ldrb	r3, [r1, #19]
    7080:	061b      	lsls	r3, r3, #24
    7082:	4313      	orrs	r3, r2
    7084:	7819      	ldrb	r1, [r3, #0]
    7086:	785a      	ldrb	r2, [r3, #1]
    7088:	0212      	lsls	r2, r2, #8
    708a:	430a      	orrs	r2, r1
    708c:	7899      	ldrb	r1, [r3, #2]
    708e:	0409      	lsls	r1, r1, #16
    7090:	430a      	orrs	r2, r1
    7092:	78d9      	ldrb	r1, [r3, #3]
    7094:	0609      	lsls	r1, r1, #24
    7096:	4311      	orrs	r1, r2
    7098:	9a05      	ldr	r2, [sp, #20]
    709a:	428a      	cmp	r2, r1
    709c:	d90f      	bls.n	70be <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    709e:	1a51      	subs	r1, r2, r1
    70a0:	4b2a      	ldr	r3, [pc, #168]	; (714c <DutyCycleCallback+0x210>)
    70a2:	22d1      	movs	r2, #209	; 0xd1
    70a4:	0052      	lsls	r2, r2, #1
    70a6:	5499      	strb	r1, [r3, r2]
    70a8:	0a0a      	lsrs	r2, r1, #8
    70aa:	33a3      	adds	r3, #163	; 0xa3
    70ac:	33ff      	adds	r3, #255	; 0xff
    70ae:	705a      	strb	r2, [r3, #1]
    70b0:	0c0a      	lsrs	r2, r1, #16
    70b2:	709a      	strb	r2, [r3, #2]
    70b4:	0e0a      	lsrs	r2, r1, #24
    70b6:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    70b8:	2900      	cmp	r1, #0
    70ba:	d10e      	bne.n	70da <DutyCycleCallback+0x19e>
    70bc:	e009      	b.n	70d2 <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    70be:	4b23      	ldr	r3, [pc, #140]	; (714c <DutyCycleCallback+0x210>)
    70c0:	2100      	movs	r1, #0
    70c2:	22d1      	movs	r2, #209	; 0xd1
    70c4:	0052      	lsls	r2, r2, #1
    70c6:	5499      	strb	r1, [r3, r2]
    70c8:	189b      	adds	r3, r3, r2
    70ca:	2200      	movs	r2, #0
    70cc:	705a      	strb	r2, [r3, #1]
    70ce:	709a      	strb	r2, [r3, #2]
    70d0:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    70d2:	9b04      	ldr	r3, [sp, #16]
    70d4:	2b00      	cmp	r3, #0
    70d6:	d02a      	beq.n	712e <DutyCycleCallback+0x1f2>
    70d8:	2100      	movs	r1, #0
    70da:	9a03      	ldr	r2, [sp, #12]
    70dc:	4291      	cmp	r1, r2
    70de:	d200      	bcs.n	70e2 <DutyCycleCallback+0x1a6>
    70e0:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    70e2:	4b1a      	ldr	r3, [pc, #104]	; (714c <DutyCycleCallback+0x210>)
    70e4:	7c1a      	ldrb	r2, [r3, #16]
    70e6:	7c58      	ldrb	r0, [r3, #17]
    70e8:	0200      	lsls	r0, r0, #8
    70ea:	4310      	orrs	r0, r2
    70ec:	7c9a      	ldrb	r2, [r3, #18]
    70ee:	0412      	lsls	r2, r2, #16
    70f0:	4310      	orrs	r0, r2
    70f2:	7cda      	ldrb	r2, [r3, #19]
    70f4:	0612      	lsls	r2, r2, #24
    70f6:	4302      	orrs	r2, r0
    70f8:	7011      	strb	r1, [r2, #0]
    70fa:	0a08      	lsrs	r0, r1, #8
    70fc:	7050      	strb	r0, [r2, #1]
    70fe:	0c08      	lsrs	r0, r1, #16
    7100:	7090      	strb	r0, [r2, #2]
    7102:	0e08      	lsrs	r0, r1, #24
    7104:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    7106:	22fa      	movs	r2, #250	; 0xfa
    7108:	0092      	lsls	r2, r2, #2
    710a:	4351      	muls	r1, r2
    710c:	7c18      	ldrb	r0, [r3, #16]
    710e:	7c5a      	ldrb	r2, [r3, #17]
    7110:	0212      	lsls	r2, r2, #8
    7112:	4310      	orrs	r0, r2
    7114:	7c9a      	ldrb	r2, [r3, #18]
    7116:	0412      	lsls	r2, r2, #16
    7118:	4302      	orrs	r2, r0
    711a:	7cdb      	ldrb	r3, [r3, #19]
    711c:	061b      	lsls	r3, r3, #24
    711e:	4313      	orrs	r3, r2
    7120:	7918      	ldrb	r0, [r3, #4]
    7122:	2300      	movs	r3, #0
    7124:	9300      	str	r3, [sp, #0]
    7126:	4b0a      	ldr	r3, [pc, #40]	; (7150 <DutyCycleCallback+0x214>)
    7128:	2200      	movs	r2, #0
    712a:	4c0a      	ldr	r4, [pc, #40]	; (7154 <DutyCycleCallback+0x218>)
    712c:	47a0      	blx	r4
}
    712e:	b007      	add	sp, #28
    7130:	bc3c      	pop	{r2, r3, r4, r5}
    7132:	4690      	mov	r8, r2
    7134:	4699      	mov	r9, r3
    7136:	46a2      	mov	sl, r4
    7138:	46ab      	mov	fp, r5
    713a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    713c:	9b05      	ldr	r3, [sp, #20]
    713e:	2b00      	cmp	r3, #0
    7140:	d0f5      	beq.n	712e <DutyCycleCallback+0x1f2>
    bool found = 0;
    7142:	2300      	movs	r3, #0
    7144:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    7146:	3b01      	subs	r3, #1
    7148:	9303      	str	r3, [sp, #12]
    714a:	e790      	b.n	706e <DutyCycleCallback+0x132>
    714c:	200013e0 	.word	0x200013e0
    7150:	00006f3d 	.word	0x00006f3d
    7154:	00009eed 	.word	0x00009eed

00007158 <setLBTTimer>:
    }
}


static StackRetStatus_t setLBTTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
    7158:	b5f0      	push	{r4, r5, r6, r7, lr}
    715a:	46de      	mov	lr, fp
    715c:	4657      	mov	r7, sl
    715e:	464e      	mov	r6, r9
    7160:	4645      	mov	r5, r8
    7162:	b5e0      	push	{r5, r6, r7, lr}
    7164:	b085      	sub	sp, #20
    bool found = 0;
    uint8_t i;
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
	LBTTimer_t *pLBTTimer;

    i = RegParams.lastUsedChannelIndex;
    7166:	4a71      	ldr	r2, [pc, #452]	; (732c <setLBTTimer+0x1d4>)
    7168:	2327      	movs	r3, #39	; 0x27
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
	
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    716a:	5cd4      	ldrb	r4, [r2, r3]
    716c:	0023      	movs	r3, r4
    716e:	3352      	adds	r3, #82	; 0x52
    7170:	009b      	lsls	r3, r3, #2
    7172:	18d3      	adds	r3, r2, r3
    7174:	0019      	movs	r1, r3
    7176:	2032      	movs	r0, #50	; 0x32
    7178:	7258      	strb	r0, [r3, #9]
    717a:	2300      	movs	r3, #0
    717c:	728b      	strb	r3, [r1, #10]
    717e:	72cb      	strb	r3, [r1, #11]
    7180:	730b      	strb	r3, [r1, #12]
	
	if(SwTimerIsRunning(pLBTTimer->timerId))
    7182:	2396      	movs	r3, #150	; 0x96
    7184:	33ff      	adds	r3, #255	; 0xff
    7186:	5cd0      	ldrb	r0, [r2, r3]
    7188:	4b69      	ldr	r3, [pc, #420]	; (7330 <setLBTTimer+0x1d8>)
    718a:	4798      	blx	r3
    718c:	2800      	cmp	r0, #0
    718e:	d12f      	bne.n	71f0 <setLBTTimer+0x98>
		ticks = SwTimerReadValue(pLBTTimer->timerId);
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
	}
	else
	{
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    7190:	4866      	ldr	r0, [pc, #408]	; (732c <setLBTTimer+0x1d4>)
    7192:	0023      	movs	r3, r4
    7194:	3352      	adds	r3, #82	; 0x52
    7196:	009b      	lsls	r3, r3, #2
    7198:	18c3      	adds	r3, r0, r3
    719a:	7a59      	ldrb	r1, [r3, #9]
    719c:	7a9a      	ldrb	r2, [r3, #10]
    719e:	0212      	lsls	r2, r2, #8
    71a0:	4311      	orrs	r1, r2
    71a2:	7ada      	ldrb	r2, [r3, #11]
    71a4:	0412      	lsls	r2, r2, #16
    71a6:	430a      	orrs	r2, r1
    71a8:	7b19      	ldrb	r1, [r3, #12]
    71aa:	0609      	lsls	r1, r1, #24
    71ac:	4311      	orrs	r1, r2
    71ae:	4689      	mov	r9, r1
		found = 1;
	}
	
	for(i = 0; i < RegParams.maxChannels; i++)
    71b0:	2322      	movs	r3, #34	; 0x22
    71b2:	56c3      	ldrsb	r3, [r0, r3]
    71b4:	4698      	mov	r8, r3
    71b6:	2b00      	cmp	r3, #0
    71b8:	dc00      	bgt.n	71bc <setLBTTimer+0x64>
    71ba:	e08d      	b.n	72d8 <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    71bc:	2300      	movs	r3, #0
    71be:	469a      	mov	sl, r3
		found = 1;
    71c0:	3301      	adds	r3, #1
    71c2:	9303      	str	r3, [sp, #12]
	{
		if(i != RegParams.lastUsedChannelIndex)
    71c4:	4a59      	ldr	r2, [pc, #356]	; (732c <setLBTTimer+0x1d4>)
    71c6:	2327      	movs	r3, #39	; 0x27
    71c8:	5cd0      	ldrb	r0, [r2, r3]
		{
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    71ca:	7911      	ldrb	r1, [r2, #4]
    71cc:	7953      	ldrb	r3, [r2, #5]
    71ce:	021b      	lsls	r3, r3, #8
    71d0:	430b      	orrs	r3, r1
    71d2:	7991      	ldrb	r1, [r2, #6]
    71d4:	0409      	lsls	r1, r1, #16
    71d6:	430b      	orrs	r3, r1
    71d8:	79d1      	ldrb	r1, [r2, #7]
    71da:	0609      	lsls	r1, r1, #24
    71dc:	4319      	orrs	r1, r3
    71de:	2600      	movs	r6, #0
    71e0:	2200      	movs	r2, #0
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
				}
				else
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    71e2:	2300      	movs	r3, #0
    71e4:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    71e6:	4653      	mov	r3, sl
    71e8:	9302      	str	r3, [sp, #8]
    71ea:	468b      	mov	fp, r1
    71ec:	4645      	mov	r5, r8
    71ee:	e039      	b.n	7264 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    71f0:	4c4e      	ldr	r4, [pc, #312]	; (732c <setLBTTimer+0x1d4>)
    71f2:	2596      	movs	r5, #150	; 0x96
    71f4:	35ff      	adds	r5, #255	; 0xff
    71f6:	5d60      	ldrb	r0, [r4, r5]
    71f8:	4b4e      	ldr	r3, [pc, #312]	; (7334 <setLBTTimer+0x1dc>)
    71fa:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    71fc:	5d60      	ldrb	r0, [r4, r5]
    71fe:	4b4e      	ldr	r3, [pc, #312]	; (7338 <setLBTTimer+0x1e0>)
    7200:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    7202:	2322      	movs	r3, #34	; 0x22
    7204:	56e3      	ldrsb	r3, [r4, r3]
    7206:	4698      	mov	r8, r3
    7208:	2b00      	cmp	r3, #0
    720a:	dd68      	ble.n	72de <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    720c:	4a47      	ldr	r2, [pc, #284]	; (732c <setLBTTimer+0x1d4>)
    720e:	2392      	movs	r3, #146	; 0x92
    7210:	33ff      	adds	r3, #255	; 0xff
    7212:	5cd4      	ldrb	r4, [r2, r3]
    7214:	3301      	adds	r3, #1
    7216:	5cd3      	ldrb	r3, [r2, r3]
    7218:	021b      	lsls	r3, r3, #8
    721a:	4323      	orrs	r3, r4
    721c:	2194      	movs	r1, #148	; 0x94
    721e:	31ff      	adds	r1, #255	; 0xff
    7220:	5c54      	ldrb	r4, [r2, r1]
    7222:	0424      	lsls	r4, r4, #16
    7224:	4323      	orrs	r3, r4
    7226:	3101      	adds	r1, #1
    7228:	5c54      	ldrb	r4, [r2, r1]
    722a:	0624      	lsls	r4, r4, #24
    722c:	431c      	orrs	r4, r3
    722e:	21fa      	movs	r1, #250	; 0xfa
    7230:	0089      	lsls	r1, r1, #2
    7232:	4b42      	ldr	r3, [pc, #264]	; (733c <setLBTTimer+0x1e4>)
    7234:	4798      	blx	r3
    7236:	1a23      	subs	r3, r4, r0
    7238:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    723a:	2301      	movs	r3, #1
    723c:	425b      	negs	r3, r3
    723e:	4699      	mov	r9, r3
    bool found = 0;
    7240:	2300      	movs	r3, #0
    7242:	9303      	str	r3, [sp, #12]
    7244:	e7be      	b.n	71c4 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7246:	3652      	adds	r6, #82	; 0x52
    7248:	00b6      	lsls	r6, r6, #2
    724a:	4b38      	ldr	r3, [pc, #224]	; (732c <setLBTTimer+0x1d4>)
    724c:	4698      	mov	r8, r3
    724e:	4446      	add	r6, r8
    7250:	4661      	mov	r1, ip
    7252:	7271      	strb	r1, [r6, #9]
    7254:	72b1      	strb	r1, [r6, #10]
    7256:	72f1      	strb	r1, [r6, #11]
    7258:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    725a:	3201      	adds	r2, #1
    725c:	b2d2      	uxtb	r2, r2
    725e:	0016      	movs	r6, r2
    7260:	42aa      	cmp	r2, r5
    7262:	da36      	bge.n	72d2 <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    7264:	4290      	cmp	r0, r2
    7266:	d0f8      	beq.n	725a <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    7268:	0053      	lsls	r3, r2, #1
    726a:	4659      	mov	r1, fp
    726c:	5c5c      	ldrb	r4, [r3, r1]
    726e:	2c00      	cmp	r4, #0
    7270:	d0f3      	beq.n	725a <setLBTTimer+0x102>
    7272:	0033      	movs	r3, r6
    7274:	3352      	adds	r3, #82	; 0x52
    7276:	009b      	lsls	r3, r3, #2
    7278:	4f2c      	ldr	r7, [pc, #176]	; (732c <setLBTTimer+0x1d4>)
    727a:	46b8      	mov	r8, r7
    727c:	4443      	add	r3, r8
    727e:	7a5f      	ldrb	r7, [r3, #9]
    7280:	46ba      	mov	sl, r7
    7282:	7a9f      	ldrb	r7, [r3, #10]
    7284:	023f      	lsls	r7, r7, #8
    7286:	46b8      	mov	r8, r7
    7288:	4657      	mov	r7, sl
    728a:	4641      	mov	r1, r8
    728c:	430f      	orrs	r7, r1
    728e:	7ad9      	ldrb	r1, [r3, #11]
    7290:	0409      	lsls	r1, r1, #16
    7292:	430f      	orrs	r7, r1
    7294:	7b1b      	ldrb	r3, [r3, #12]
    7296:	061b      	lsls	r3, r3, #24
    7298:	433b      	orrs	r3, r7
    729a:	d0de      	beq.n	725a <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    729c:	9f02      	ldr	r7, [sp, #8]
    729e:	42bb      	cmp	r3, r7
    72a0:	d9d1      	bls.n	7246 <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    72a2:	1bdb      	subs	r3, r3, r7
    72a4:	3652      	adds	r6, #82	; 0x52
    72a6:	00b6      	lsls	r6, r6, #2
    72a8:	4920      	ldr	r1, [pc, #128]	; (732c <setLBTTimer+0x1d4>)
    72aa:	4688      	mov	r8, r1
    72ac:	4446      	add	r6, r8
    72ae:	2109      	movs	r1, #9
    72b0:	4688      	mov	r8, r1
    72b2:	44b0      	add	r8, r6
    72b4:	7273      	strb	r3, [r6, #9]
    72b6:	0a1e      	lsrs	r6, r3, #8
    72b8:	4641      	mov	r1, r8
    72ba:	704e      	strb	r6, [r1, #1]
    72bc:	0c1e      	lsrs	r6, r3, #16
    72be:	708e      	strb	r6, [r1, #2]
    72c0:	0e1e      	lsrs	r6, r3, #24
    72c2:	70ce      	strb	r6, [r1, #3]
				}
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    72c4:	454b      	cmp	r3, r9
    72c6:	d8c8      	bhi.n	725a <setLBTTimer+0x102>
    72c8:	2b00      	cmp	r3, #0
    72ca:	d0c6      	beq.n	725a <setLBTTimer+0x102>
    72cc:	4699      	mov	r9, r3
				{
					minim = RegParams.cmnParams.paramsType2.channelTimer[i];
					found = 1;
    72ce:	9403      	str	r4, [sp, #12]
    72d0:	e7c3      	b.n	725a <setLBTTimer+0x102>
				}
			}
		}
	}
	if((found == 1) && minim)
    72d2:	9b03      	ldr	r3, [sp, #12]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d002      	beq.n	72de <setLBTTimer+0x186>
    72d8:	464b      	mov	r3, r9
    72da:	2b00      	cmp	r3, #0
    72dc:	d107      	bne.n	72ee <setLBTTimer+0x196>
	{
		pLBTTimer->lastTimerValue = minim;
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
	}
	return LORAWAN_SUCCESS;
}
    72de:	2008      	movs	r0, #8
    72e0:	b005      	add	sp, #20
    72e2:	bc3c      	pop	{r2, r3, r4, r5}
    72e4:	4690      	mov	r8, r2
    72e6:	4699      	mov	r9, r3
    72e8:	46a2      	mov	sl, r4
    72ea:	46ab      	mov	fp, r5
    72ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    72ee:	4b0f      	ldr	r3, [pc, #60]	; (732c <setLBTTimer+0x1d4>)
    72f0:	2292      	movs	r2, #146	; 0x92
    72f2:	32ff      	adds	r2, #255	; 0xff
    72f4:	4649      	mov	r1, r9
    72f6:	5499      	strb	r1, [r3, r2]
    72f8:	464a      	mov	r2, r9
    72fa:	0a11      	lsrs	r1, r2, #8
    72fc:	001a      	movs	r2, r3
    72fe:	3292      	adds	r2, #146	; 0x92
    7300:	32ff      	adds	r2, #255	; 0xff
    7302:	7051      	strb	r1, [r2, #1]
    7304:	4649      	mov	r1, r9
    7306:	0c09      	lsrs	r1, r1, #16
    7308:	7091      	strb	r1, [r2, #2]
    730a:	4649      	mov	r1, r9
    730c:	0e09      	lsrs	r1, r1, #24
    730e:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    7310:	21fa      	movs	r1, #250	; 0xfa
    7312:	0089      	lsls	r1, r1, #2
    7314:	464a      	mov	r2, r9
    7316:	4351      	muls	r1, r2
    7318:	2296      	movs	r2, #150	; 0x96
    731a:	32ff      	adds	r2, #255	; 0xff
    731c:	5c98      	ldrb	r0, [r3, r2]
    731e:	2300      	movs	r3, #0
    7320:	9300      	str	r3, [sp, #0]
    7322:	4b07      	ldr	r3, [pc, #28]	; (7340 <setLBTTimer+0x1e8>)
    7324:	2200      	movs	r2, #0
    7326:	4c07      	ldr	r4, [pc, #28]	; (7344 <setLBTTimer+0x1ec>)
    7328:	47a0      	blx	r4
    732a:	e7d8      	b.n	72de <setLBTTimer+0x186>
    732c:	200013e0 	.word	0x200013e0
    7330:	0000a085 	.word	0x0000a085
    7334:	0000a1f1 	.word	0x0000a1f1
    7338:	0000a099 	.word	0x0000a099
    733c:	0001270d 	.word	0x0001270d
    7340:	00007349 	.word	0x00007349
    7344:	00009eed 	.word	0x00009eed

00007348 <LBTChannelPauseCallback>:
{
    7348:	b5f0      	push	{r4, r5, r6, r7, lr}
    734a:	46de      	mov	lr, fp
    734c:	4657      	mov	r7, sl
    734e:	464e      	mov	r6, r9
    7350:	4645      	mov	r5, r8
    7352:	b5e0      	push	{r5, r6, r7, lr}
    7354:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    7356:	2322      	movs	r3, #34	; 0x22
    7358:	4a4a      	ldr	r2, [pc, #296]	; (7484 <LBTChannelPauseCallback+0x13c>)
    735a:	56d6      	ldrsb	r6, [r2, r3]
    735c:	2e00      	cmp	r6, #0
    735e:	dd6a      	ble.n	7436 <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    7360:	0013      	movs	r3, r2
    7362:	7915      	ldrb	r5, [r2, #4]
    7364:	7952      	ldrb	r2, [r2, #5]
    7366:	0212      	lsls	r2, r2, #8
    7368:	432a      	orrs	r2, r5
    736a:	799d      	ldrb	r5, [r3, #6]
    736c:	042d      	lsls	r5, r5, #16
    736e:	432a      	orrs	r2, r5
    7370:	79dd      	ldrb	r5, [r3, #7]
    7372:	062d      	lsls	r5, r5, #24
    7374:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    7376:	2292      	movs	r2, #146	; 0x92
    7378:	32ff      	adds	r2, #255	; 0xff
    737a:	5c9f      	ldrb	r7, [r3, r2]
    737c:	3201      	adds	r2, #1
    737e:	5c9a      	ldrb	r2, [r3, r2]
    7380:	0212      	lsls	r2, r2, #8
    7382:	433a      	orrs	r2, r7
    7384:	2194      	movs	r1, #148	; 0x94
    7386:	31ff      	adds	r1, #255	; 0xff
    7388:	5c5f      	ldrb	r7, [r3, r1]
    738a:	043f      	lsls	r7, r7, #16
    738c:	433a      	orrs	r2, r7
    738e:	3101      	adds	r1, #1
    7390:	5c5f      	ldrb	r7, [r3, r1]
    7392:	063f      	lsls	r7, r7, #24
    7394:	4317      	orrs	r7, r2
    7396:	9703      	str	r7, [sp, #12]
    7398:	2000      	movs	r0, #0
    739a:	2300      	movs	r3, #0
    739c:	2200      	movs	r2, #0
    739e:	4691      	mov	r9, r2
    73a0:	3a01      	subs	r2, #1
    73a2:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    73a4:	2200      	movs	r2, #0
    73a6:	4694      	mov	ip, r2
    73a8:	e00e      	b.n	73c8 <LBTChannelPauseCallback+0x80>
    73aa:	3052      	adds	r0, #82	; 0x52
    73ac:	0080      	lsls	r0, r0, #2
    73ae:	4a35      	ldr	r2, [pc, #212]	; (7484 <LBTChannelPauseCallback+0x13c>)
    73b0:	4692      	mov	sl, r2
    73b2:	4450      	add	r0, sl
    73b4:	4661      	mov	r1, ip
    73b6:	7241      	strb	r1, [r0, #9]
    73b8:	7281      	strb	r1, [r0, #10]
    73ba:	72c1      	strb	r1, [r0, #11]
    73bc:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    73be:	3301      	adds	r3, #1
    73c0:	b2db      	uxtb	r3, r3
    73c2:	0018      	movs	r0, r3
    73c4:	42b3      	cmp	r3, r6
    73c6:	da33      	bge.n	7430 <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    73c8:	005a      	lsls	r2, r3, #1
    73ca:	5d54      	ldrb	r4, [r2, r5]
    73cc:	2c00      	cmp	r4, #0
    73ce:	d0f6      	beq.n	73be <LBTChannelPauseCallback+0x76>
    73d0:	0002      	movs	r2, r0
    73d2:	3252      	adds	r2, #82	; 0x52
    73d4:	0092      	lsls	r2, r2, #2
    73d6:	492b      	ldr	r1, [pc, #172]	; (7484 <LBTChannelPauseCallback+0x13c>)
    73d8:	468a      	mov	sl, r1
    73da:	4452      	add	r2, sl
    73dc:	7a57      	ldrb	r7, [r2, #9]
    73de:	46bb      	mov	fp, r7
    73e0:	7a97      	ldrb	r7, [r2, #10]
    73e2:	023f      	lsls	r7, r7, #8
    73e4:	46ba      	mov	sl, r7
    73e6:	465f      	mov	r7, fp
    73e8:	4651      	mov	r1, sl
    73ea:	430f      	orrs	r7, r1
    73ec:	7ad1      	ldrb	r1, [r2, #11]
    73ee:	0409      	lsls	r1, r1, #16
    73f0:	430f      	orrs	r7, r1
    73f2:	7b12      	ldrb	r2, [r2, #12]
    73f4:	0612      	lsls	r2, r2, #24
    73f6:	433a      	orrs	r2, r7
    73f8:	d0e1      	beq.n	73be <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    73fa:	9f03      	ldr	r7, [sp, #12]
    73fc:	42ba      	cmp	r2, r7
    73fe:	d9d4      	bls.n	73aa <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    7400:	1bd2      	subs	r2, r2, r7
    7402:	3052      	adds	r0, #82	; 0x52
    7404:	0080      	lsls	r0, r0, #2
    7406:	491f      	ldr	r1, [pc, #124]	; (7484 <LBTChannelPauseCallback+0x13c>)
    7408:	468a      	mov	sl, r1
    740a:	4450      	add	r0, sl
    740c:	2109      	movs	r1, #9
    740e:	468a      	mov	sl, r1
    7410:	4482      	add	sl, r0
    7412:	7242      	strb	r2, [r0, #9]
    7414:	0a10      	lsrs	r0, r2, #8
    7416:	4651      	mov	r1, sl
    7418:	7048      	strb	r0, [r1, #1]
    741a:	0c10      	lsrs	r0, r2, #16
    741c:	7088      	strb	r0, [r1, #2]
    741e:	0e10      	lsrs	r0, r2, #24
    7420:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    7422:	4542      	cmp	r2, r8
    7424:	d8cb      	bhi.n	73be <LBTChannelPauseCallback+0x76>
    7426:	2a00      	cmp	r2, #0
    7428:	d0c9      	beq.n	73be <LBTChannelPauseCallback+0x76>
                found = 1;
    742a:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    742c:	4690      	mov	r8, r2
    742e:	e7c6      	b.n	73be <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    7430:	464b      	mov	r3, r9
    7432:	2b00      	cmp	r3, #0
    7434:	d106      	bne.n	7444 <LBTChannelPauseCallback+0xfc>
}
    7436:	b005      	add	sp, #20
    7438:	bc3c      	pop	{r2, r3, r4, r5}
    743a:	4690      	mov	r8, r2
    743c:	4699      	mov	r9, r3
    743e:	46a2      	mov	sl, r4
    7440:	46ab      	mov	fp, r5
    7442:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    7444:	4b0f      	ldr	r3, [pc, #60]	; (7484 <LBTChannelPauseCallback+0x13c>)
    7446:	2292      	movs	r2, #146	; 0x92
    7448:	32ff      	adds	r2, #255	; 0xff
    744a:	4641      	mov	r1, r8
    744c:	5499      	strb	r1, [r3, r2]
    744e:	4642      	mov	r2, r8
    7450:	0a11      	lsrs	r1, r2, #8
    7452:	001a      	movs	r2, r3
    7454:	3292      	adds	r2, #146	; 0x92
    7456:	32ff      	adds	r2, #255	; 0xff
    7458:	7051      	strb	r1, [r2, #1]
    745a:	4641      	mov	r1, r8
    745c:	0c09      	lsrs	r1, r1, #16
    745e:	7091      	strb	r1, [r2, #2]
    7460:	4641      	mov	r1, r8
    7462:	0e09      	lsrs	r1, r1, #24
    7464:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    7466:	21fa      	movs	r1, #250	; 0xfa
    7468:	0089      	lsls	r1, r1, #2
    746a:	4642      	mov	r2, r8
    746c:	4351      	muls	r1, r2
    746e:	2296      	movs	r2, #150	; 0x96
    7470:	32ff      	adds	r2, #255	; 0xff
    7472:	5c98      	ldrb	r0, [r3, r2]
    7474:	2300      	movs	r3, #0
    7476:	9300      	str	r3, [sp, #0]
    7478:	4b03      	ldr	r3, [pc, #12]	; (7488 <LBTChannelPauseCallback+0x140>)
    747a:	2200      	movs	r2, #0
    747c:	4c03      	ldr	r4, [pc, #12]	; (748c <LBTChannelPauseCallback+0x144>)
    747e:	47a0      	blx	r4
}
    7480:	e7d9      	b.n	7436 <LBTChannelPauseCallback+0xee>
    7482:	46c0      	nop			; (mov r8, r8)
    7484:	200013e0 	.word	0x200013e0
    7488:	00007349 	.word	0x00007349
    748c:	00009eed 	.word	0x00009eed

00007490 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7490:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7492:	230f      	movs	r3, #15
    7494:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    7496:	4907      	ldr	r1, [pc, #28]	; (74b4 <ValidateDataRangeT2+0x24>)
    7498:	7f09      	ldrb	r1, [r1, #28]
		retVal = LORAWAN_INVALID_PARAMETER;
    749a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    749c:	428b      	cmp	r3, r1
    749e:	d900      	bls.n	74a2 <ValidateDataRangeT2+0x12>
}
    74a0:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    74a2:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    74a4:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    74a6:	428a      	cmp	r2, r1
    74a8:	d8fa      	bhi.n	74a0 <ValidateDataRangeT2+0x10>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    74aa:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    74ac:	4293      	cmp	r3, r2
    74ae:	d9f7      	bls.n	74a0 <ValidateDataRangeT2+0x10>
		retVal = LORAWAN_INVALID_PARAMETER;
    74b0:	3002      	adds	r0, #2
	return retVal;
    74b2:	e7f5      	b.n	74a0 <ValidateDataRangeT2+0x10>
    74b4:	200013e0 	.word	0x200013e0

000074b8 <setDataRangeT2>:
{
    74b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    74ba:	46c6      	mov	lr, r8
    74bc:	b500      	push	{lr}
    74be:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    74c0:	780d      	ldrb	r5, [r1, #0]
    74c2:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    74c4:	ab01      	add	r3, sp, #4
    74c6:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    74c8:	2201      	movs	r2, #1
    74ca:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    74cc:	2012      	movs	r0, #18
    74ce:	4b25      	ldr	r3, [pc, #148]	; (7564 <setDataRangeT2+0xac>)
    74d0:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    74d2:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    74d4:	2808      	cmp	r0, #8
    74d6:	d004      	beq.n	74e2 <setDataRangeT2+0x2a>
}
    74d8:	0020      	movs	r0, r4
    74da:	b002      	add	sp, #8
    74dc:	bc04      	pop	{r2}
    74de:	4690      	mov	r8, r2
    74e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    74e2:	a901      	add	r1, sp, #4
    74e4:	300d      	adds	r0, #13
    74e6:	4b20      	ldr	r3, [pc, #128]	; (7568 <setDataRangeT2+0xb0>)
    74e8:	4798      	blx	r3
    74ea:	0004      	movs	r4, r0
    74ec:	2808      	cmp	r0, #8
    74ee:	d001      	beq.n	74f4 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    74f0:	240a      	movs	r4, #10
    74f2:	e7f1      	b.n	74d8 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    74f4:	4f1d      	ldr	r7, [pc, #116]	; (756c <setDataRangeT2+0xb4>)
    74f6:	793b      	ldrb	r3, [r7, #4]
    74f8:	797a      	ldrb	r2, [r7, #5]
    74fa:	0212      	lsls	r2, r2, #8
    74fc:	431a      	orrs	r2, r3
    74fe:	79bb      	ldrb	r3, [r7, #6]
    7500:	041b      	lsls	r3, r3, #16
    7502:	431a      	orrs	r2, r3
    7504:	79fb      	ldrb	r3, [r7, #7]
    7506:	061b      	lsls	r3, r3, #24
    7508:	4313      	orrs	r3, r2
    750a:	006a      	lsls	r2, r5, #1
    750c:	4690      	mov	r8, r2
    750e:	4443      	add	r3, r8
    7510:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7512:	23f8      	movs	r3, #248	; 0xf8
    7514:	33ff      	adds	r3, #255	; 0xff
    7516:	5cfb      	ldrb	r3, [r7, r3]
    7518:	22fc      	movs	r2, #252	; 0xfc
    751a:	0052      	lsls	r2, r2, #1
    751c:	5cb8      	ldrb	r0, [r7, r2]
    751e:	0200      	lsls	r0, r0, #8
    7520:	4318      	orrs	r0, r3
    7522:	b2c1      	uxtb	r1, r0
    7524:	0a00      	lsrs	r0, r0, #8
    7526:	4e12      	ldr	r6, [pc, #72]	; (7570 <setDataRangeT2+0xb8>)
    7528:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    752a:	7a3b      	ldrb	r3, [r7, #8]
    752c:	7a7a      	ldrb	r2, [r7, #9]
    752e:	0212      	lsls	r2, r2, #8
    7530:	431a      	orrs	r2, r3
    7532:	7abb      	ldrb	r3, [r7, #10]
    7534:	041b      	lsls	r3, r3, #16
    7536:	431a      	orrs	r2, r3
    7538:	7afb      	ldrb	r3, [r7, #11]
    753a:	061b      	lsls	r3, r3, #24
    753c:	4313      	orrs	r3, r2
    753e:	4445      	add	r5, r8
    7540:	00ad      	lsls	r5, r5, #2
    7542:	195d      	adds	r5, r3, r5
    7544:	7aeb      	ldrb	r3, [r5, #11]
    7546:	2202      	movs	r2, #2
    7548:	4313      	orrs	r3, r2
    754a:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    754c:	23fa      	movs	r3, #250	; 0xfa
    754e:	33ff      	adds	r3, #255	; 0xff
    7550:	5cfb      	ldrb	r3, [r7, r3]
    7552:	22fd      	movs	r2, #253	; 0xfd
    7554:	0052      	lsls	r2, r2, #1
    7556:	5cb8      	ldrb	r0, [r7, r2]
    7558:	0200      	lsls	r0, r0, #8
    755a:	4318      	orrs	r0, r3
    755c:	b2c1      	uxtb	r1, r0
    755e:	0a00      	lsrs	r0, r0, #8
    7560:	47b0      	blx	r6
    7562:	e7b9      	b.n	74d8 <setDataRangeT2+0x20>
    7564:	00007491 	.word	0x00007491
    7568:	000054e5 	.word	0x000054e5
    756c:	200013e0 	.word	0x200013e0
    7570:	00008ec5 	.word	0x00008ec5

00007574 <LORAREG_GetAttr_MaxPayloadT3>:
{
    7574:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    7576:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7578:	4916      	ldr	r1, [pc, #88]	; (75d4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    757a:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    757c:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    757e:	4299      	cmp	r1, r3
    7580:	d215      	bcs.n	75ae <LORAREG_GetAttr_MaxPayloadT3+0x3a>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    7582:	21ac      	movs	r1, #172	; 0xac
    7584:	31ff      	adds	r1, #255	; 0xff
    7586:	4c13      	ldr	r4, [pc, #76]	; (75d4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7588:	5c61      	ldrb	r1, [r4, r1]
    758a:	07c9      	lsls	r1, r1, #31
    758c:	d411      	bmi.n	75b2 <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    758e:	4d11      	ldr	r5, [pc, #68]	; (75d4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7590:	7829      	ldrb	r1, [r5, #0]
    7592:	786c      	ldrb	r4, [r5, #1]
    7594:	0224      	lsls	r4, r4, #8
    7596:	430c      	orrs	r4, r1
    7598:	78a9      	ldrb	r1, [r5, #2]
    759a:	0409      	lsls	r1, r1, #16
    759c:	430c      	orrs	r4, r1
    759e:	78e9      	ldrb	r1, [r5, #3]
    75a0:	0609      	lsls	r1, r1, #24
    75a2:	4321      	orrs	r1, r4
    75a4:	00db      	lsls	r3, r3, #3
    75a6:	185b      	adds	r3, r3, r1
    75a8:	789b      	ldrb	r3, [r3, #2]
    75aa:	7013      	strb	r3, [r2, #0]
}
    75ac:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    75ae:	3802      	subs	r0, #2
    75b0:	e7e7      	b.n	7582 <LORAREG_GetAttr_MaxPayloadT3+0xe>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    75b2:	0025      	movs	r5, r4
    75b4:	7821      	ldrb	r1, [r4, #0]
    75b6:	7864      	ldrb	r4, [r4, #1]
    75b8:	0224      	lsls	r4, r4, #8
    75ba:	430c      	orrs	r4, r1
    75bc:	78a9      	ldrb	r1, [r5, #2]
    75be:	0409      	lsls	r1, r1, #16
    75c0:	430c      	orrs	r4, r1
    75c2:	78e9      	ldrb	r1, [r5, #3]
    75c4:	0609      	lsls	r1, r1, #24
    75c6:	4321      	orrs	r1, r4
    75c8:	00db      	lsls	r3, r3, #3
    75ca:	1859      	adds	r1, r3, r1
    75cc:	78cb      	ldrb	r3, [r1, #3]
    75ce:	7013      	strb	r3, [r2, #0]
    75d0:	e7ec      	b.n	75ac <LORAREG_GetAttr_MaxPayloadT3+0x38>
    75d2:	46c0      	nop			; (mov r8, r8)
    75d4:	200013e0 	.word	0x200013e0

000075d8 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    75d8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    75da:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    75dc:	490c      	ldr	r1, [pc, #48]	; (7610 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    75de:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    75e0:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    75e2:	4299      	cmp	r1, r3
    75e4:	d200      	bcs.n	75e8 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
}
    75e6:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    75e8:	4c09      	ldr	r4, [pc, #36]	; (7610 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    75ea:	7821      	ldrb	r1, [r4, #0]
    75ec:	7860      	ldrb	r0, [r4, #1]
    75ee:	0200      	lsls	r0, r0, #8
    75f0:	4308      	orrs	r0, r1
    75f2:	78a1      	ldrb	r1, [r4, #2]
    75f4:	0409      	lsls	r1, r1, #16
    75f6:	4308      	orrs	r0, r1
    75f8:	78e1      	ldrb	r1, [r4, #3]
    75fa:	0609      	lsls	r1, r1, #24
    75fc:	4301      	orrs	r1, r0
    75fe:	00db      	lsls	r3, r3, #3
    7600:	5c58      	ldrb	r0, [r3, r1]
    7602:	185b      	adds	r3, r3, r1
    7604:	785b      	ldrb	r3, [r3, #1]
    7606:	021b      	lsls	r3, r3, #8
    7608:	4303      	orrs	r3, r0
    760a:	8013      	strh	r3, [r2, #0]
	return result;
    760c:	2008      	movs	r0, #8
    760e:	e7ea      	b.n	75e6 <LORAREG_GetAttr_RxWindowSizeT2+0xe>
    7610:	200013e0 	.word	0x200013e0

00007614 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7614:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7616:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7618:	490b      	ldr	r1, [pc, #44]	; (7648 <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    761a:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    761c:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    761e:	4299      	cmp	r1, r3
    7620:	d200      	bcs.n	7624 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
}
    7622:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7624:	4c08      	ldr	r4, [pc, #32]	; (7648 <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    7626:	7821      	ldrb	r1, [r4, #0]
    7628:	7860      	ldrb	r0, [r4, #1]
    762a:	0200      	lsls	r0, r0, #8
    762c:	4308      	orrs	r0, r1
    762e:	78a1      	ldrb	r1, [r4, #2]
    7630:	0409      	lsls	r1, r1, #16
    7632:	4308      	orrs	r0, r1
    7634:	78e1      	ldrb	r1, [r4, #3]
    7636:	0609      	lsls	r1, r1, #24
    7638:	4301      	orrs	r1, r0
    763a:	00db      	lsls	r3, r3, #3
    763c:	185b      	adds	r3, r3, r1
    763e:	791b      	ldrb	r3, [r3, #4]
    7640:	b25b      	sxtb	r3, r3
    7642:	7013      	strb	r3, [r2, #0]
	return result;
    7644:	2008      	movs	r0, #8
    7646:	e7ec      	b.n	7622 <LORAREG_GetAttr_RxWindowOffsetT2+0xe>
    7648:	200013e0 	.word	0x200013e0

0000764c <LORAREG_GetAttr_MaxPayloadT2>:
{
    764c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    764e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7650:	490b      	ldr	r1, [pc, #44]	; (7680 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    7652:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    7654:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7656:	4299      	cmp	r1, r3
    7658:	d200      	bcs.n	765c <LORAREG_GetAttr_MaxPayloadT2+0x10>
}
    765a:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    765c:	4c08      	ldr	r4, [pc, #32]	; (7680 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    765e:	7821      	ldrb	r1, [r4, #0]
    7660:	7860      	ldrb	r0, [r4, #1]
    7662:	0200      	lsls	r0, r0, #8
    7664:	4308      	orrs	r0, r1
    7666:	78a1      	ldrb	r1, [r4, #2]
    7668:	0409      	lsls	r1, r1, #16
    766a:	4308      	orrs	r0, r1
    766c:	78e1      	ldrb	r1, [r4, #3]
    766e:	0609      	lsls	r1, r1, #24
    7670:	4301      	orrs	r1, r0
    7672:	00db      	lsls	r3, r3, #3
    7674:	185b      	adds	r3, r3, r1
    7676:	789b      	ldrb	r3, [r3, #2]
    7678:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    767a:	2008      	movs	r0, #8
	return result;
    767c:	e7ed      	b.n	765a <LORAREG_GetAttr_MaxPayloadT2+0xe>
    767e:	46c0      	nop			; (mov r8, r8)
    7680:	200013e0 	.word	0x200013e0

00007684 <LORAREG_GetAttr_ModulationAttrT2>:
{
    7684:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7686:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7688:	490b      	ldr	r1, [pc, #44]	; (76b8 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    768a:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    768c:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    768e:	4299      	cmp	r1, r3
    7690:	d200      	bcs.n	7694 <LORAREG_GetAttr_ModulationAttrT2+0x10>
}
    7692:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7694:	4c08      	ldr	r4, [pc, #32]	; (76b8 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    7696:	7821      	ldrb	r1, [r4, #0]
    7698:	7860      	ldrb	r0, [r4, #1]
    769a:	0200      	lsls	r0, r0, #8
    769c:	4308      	orrs	r0, r1
    769e:	78a1      	ldrb	r1, [r4, #2]
    76a0:	0409      	lsls	r1, r1, #16
    76a2:	4308      	orrs	r0, r1
    76a4:	78e1      	ldrb	r1, [r4, #3]
    76a6:	0609      	lsls	r1, r1, #24
    76a8:	4301      	orrs	r1, r0
    76aa:	00db      	lsls	r3, r3, #3
    76ac:	185b      	adds	r3, r3, r1
    76ae:	79db      	ldrb	r3, [r3, #7]
    76b0:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76b2:	2008      	movs	r0, #8
	return result;
    76b4:	e7ed      	b.n	7692 <LORAREG_GetAttr_ModulationAttrT2+0xe>
    76b6:	46c0      	nop			; (mov r8, r8)
    76b8:	200013e0 	.word	0x200013e0

000076bc <LORAREG_GetAttr_BandwidthAttrT2>:
{
    76bc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    76be:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    76c0:	490b      	ldr	r1, [pc, #44]	; (76f0 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    76c2:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    76c4:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    76c6:	4299      	cmp	r1, r3
    76c8:	d200      	bcs.n	76cc <LORAREG_GetAttr_BandwidthAttrT2+0x10>
}
    76ca:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    76cc:	4c08      	ldr	r4, [pc, #32]	; (76f0 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    76ce:	7821      	ldrb	r1, [r4, #0]
    76d0:	7860      	ldrb	r0, [r4, #1]
    76d2:	0200      	lsls	r0, r0, #8
    76d4:	4308      	orrs	r0, r1
    76d6:	78a1      	ldrb	r1, [r4, #2]
    76d8:	0409      	lsls	r1, r1, #16
    76da:	4308      	orrs	r0, r1
    76dc:	78e1      	ldrb	r1, [r4, #3]
    76de:	0609      	lsls	r1, r1, #24
    76e0:	4301      	orrs	r1, r0
    76e2:	00db      	lsls	r3, r3, #3
    76e4:	185b      	adds	r3, r3, r1
    76e6:	799b      	ldrb	r3, [r3, #6]
    76e8:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76ea:	2008      	movs	r0, #8
	return result;
    76ec:	e7ed      	b.n	76ca <LORAREG_GetAttr_BandwidthAttrT2+0xe>
    76ee:	46c0      	nop			; (mov r8, r8)
    76f0:	200013e0 	.word	0x200013e0

000076f4 <LORAREG_GetAttr_SpreadFactorT2>:
{
    76f4:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    76f6:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    76f8:	490b      	ldr	r1, [pc, #44]	; (7728 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    76fa:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    76fc:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    76fe:	4299      	cmp	r1, r3
    7700:	d200      	bcs.n	7704 <LORAREG_GetAttr_SpreadFactorT2+0x10>
}
    7702:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7704:	4c08      	ldr	r4, [pc, #32]	; (7728 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    7706:	7821      	ldrb	r1, [r4, #0]
    7708:	7860      	ldrb	r0, [r4, #1]
    770a:	0200      	lsls	r0, r0, #8
    770c:	4308      	orrs	r0, r1
    770e:	78a1      	ldrb	r1, [r4, #2]
    7710:	0409      	lsls	r1, r1, #16
    7712:	4308      	orrs	r0, r1
    7714:	78e1      	ldrb	r1, [r4, #3]
    7716:	0609      	lsls	r1, r1, #24
    7718:	4301      	orrs	r1, r0
    771a:	00db      	lsls	r3, r3, #3
    771c:	185b      	adds	r3, r3, r1
    771e:	795b      	ldrb	r3, [r3, #5]
    7720:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7722:	2008      	movs	r0, #8
	return result;
    7724:	e7ed      	b.n	7702 <LORAREG_GetAttr_SpreadFactorT2+0xe>
    7726:	46c0      	nop			; (mov r8, r8)
    7728:	200013e0 	.word	0x200013e0

0000772c <ValidateChMaskChCntl>:
{
    772c:	b500      	push	{lr}
    772e:	b083      	sub	sp, #12
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7730:	2204      	movs	r2, #4
    7732:	a801      	add	r0, sp, #4
    7734:	4b05      	ldr	r3, [pc, #20]	; (774c <ValidateChMaskChCntl+0x20>)
    7736:	4798      	blx	r3
	result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));		
    7738:	a901      	add	r1, sp, #4
    773a:	201b      	movs	r0, #27
    773c:	4b04      	ldr	r3, [pc, #16]	; (7750 <ValidateChMaskChCntl+0x24>)
    773e:	4798      	blx	r3
    7740:	2308      	movs	r3, #8
    7742:	4318      	orrs	r0, r3
    return result;
    7744:	b2c0      	uxtb	r0, r0
}
    7746:	b003      	add	sp, #12
    7748:	bd00      	pop	{pc}
    774a:	46c0      	nop			; (mov r8, r8)
    774c:	000158c9 	.word	0x000158c9
    7750:	000055cd 	.word	0x000055cd

00007754 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    7754:	b5f0      	push	{r4, r5, r6, r7, lr}
    7756:	b083      	sub	sp, #12
    7758:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    775a:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    775c:	4b2e      	ldr	r3, [pc, #184]	; (7818 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    775e:	7f1b      	ldrb	r3, [r3, #28]
		result = LORAWAN_INVALID_PARAMETER;
    7760:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7762:	42a3      	cmp	r3, r4
    7764:	d205      	bcs.n	7772 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
}
    7766:	b003      	add	sp, #12
    7768:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    776a:	2900      	cmp	r1, #0
    776c:	d10f      	bne.n	778e <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
		currDr = DR2;
    776e:	2402      	movs	r4, #2
    7770:	e00d      	b.n	778e <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7772:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7774:	2325      	movs	r3, #37	; 0x25
    7776:	4a28      	ldr	r2, [pc, #160]	; (7818 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7778:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    777a:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    777c:	429e      	cmp	r6, r3
    777e:	dcf2      	bgt.n	7766 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    7780:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    7782:	2326      	movs	r3, #38	; 0x26
    7784:	5cd2      	ldrb	r2, [r2, r3]
    7786:	4b25      	ldr	r3, [pc, #148]	; (781c <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    7788:	4113      	asrs	r3, r2
    778a:	07db      	lsls	r3, r3, #31
    778c:	d4ed      	bmi.n	776a <LORAREG_GetAttr_NewTxChConfigT2+0x16>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    778e:	2322      	movs	r3, #34	; 0x22
    7790:	4a21      	ldr	r2, [pc, #132]	; (7818 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7792:	5cd0      	ldrb	r0, [r2, r3]
    7794:	466b      	mov	r3, sp
    7796:	3307      	adds	r3, #7
    7798:	0022      	movs	r2, r4
    779a:	4f21      	ldr	r7, [pc, #132]	; (7820 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    779c:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    779e:	2808      	cmp	r0, #8
    77a0:	d1e1      	bne.n	7766 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		RegParams.lastUsedChannelIndex = channelIndex;
    77a2:	466b      	mov	r3, sp
    77a4:	79df      	ldrb	r7, [r3, #7]
    77a6:	4b1c      	ldr	r3, [pc, #112]	; (7818 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    77a8:	2227      	movs	r2, #39	; 0x27
    77aa:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    77ac:	7a19      	ldrb	r1, [r3, #8]
    77ae:	7a5a      	ldrb	r2, [r3, #9]
    77b0:	0212      	lsls	r2, r2, #8
    77b2:	430a      	orrs	r2, r1
    77b4:	7a99      	ldrb	r1, [r3, #10]
    77b6:	0409      	lsls	r1, r1, #16
    77b8:	430a      	orrs	r2, r1
    77ba:	7ad9      	ldrb	r1, [r3, #11]
    77bc:	0609      	lsls	r1, r1, #24
    77be:	4311      	orrs	r1, r2
    77c0:	007a      	lsls	r2, r7, #1
    77c2:	19d2      	adds	r2, r2, r7
    77c4:	0092      	lsls	r2, r2, #2
    77c6:	5c57      	ldrb	r7, [r2, r1]
    77c8:	1852      	adds	r2, r2, r1
    77ca:	7851      	ldrb	r1, [r2, #1]
    77cc:	0209      	lsls	r1, r1, #8
    77ce:	430f      	orrs	r7, r1
    77d0:	7891      	ldrb	r1, [r2, #2]
    77d2:	0409      	lsls	r1, r1, #16
    77d4:	4339      	orrs	r1, r7
    77d6:	78d2      	ldrb	r2, [r2, #3]
    77d8:	0612      	lsls	r2, r2, #24
    77da:	430a      	orrs	r2, r1
    77dc:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    77de:	0076      	lsls	r6, r6, #1
    77e0:	2220      	movs	r2, #32
    77e2:	5c9a      	ldrb	r2, [r3, r2]
    77e4:	1b96      	subs	r6, r2, r6
    77e6:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    77e8:	2200      	movs	r2, #0
    77ea:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    77ec:	7819      	ldrb	r1, [r3, #0]
    77ee:	785a      	ldrb	r2, [r3, #1]
    77f0:	0212      	lsls	r2, r2, #8
    77f2:	4311      	orrs	r1, r2
    77f4:	789a      	ldrb	r2, [r3, #2]
    77f6:	0412      	lsls	r2, r2, #16
    77f8:	430a      	orrs	r2, r1
    77fa:	78db      	ldrb	r3, [r3, #3]
    77fc:	061b      	lsls	r3, r3, #24
    77fe:	4313      	orrs	r3, r2
    7800:	00e4      	lsls	r4, r4, #3
    7802:	191c      	adds	r4, r3, r4
    7804:	79e3      	ldrb	r3, [r4, #7]
    7806:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    7808:	79a3      	ldrb	r3, [r4, #6]
    780a:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    780c:	7963      	ldrb	r3, [r4, #5]
    780e:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    7810:	2300      	movs	r3, #0
    7812:	71eb      	strb	r3, [r5, #7]
    7814:	e7a7      	b.n	7766 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	200013e0 	.word	0x200013e0
    781c:	00007fe0 	.word	0x00007fe0
    7820:	000059d1 	.word	0x000059d1

00007824 <setChannelIdStatus>:
{
    7824:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    7826:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    7828:	2322      	movs	r3, #34	; 0x22
    782a:	4a05      	ldr	r2, [pc, #20]	; (7840 <setChannelIdStatus+0x1c>)
    782c:	56d3      	ldrsb	r3, [r2, r3]
    782e:	4298      	cmp	r0, r3
    7830:	db01      	blt.n	7836 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7832:	200a      	movs	r0, #10
}
    7834:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    7836:	7849      	ldrb	r1, [r1, #1]
    7838:	4b02      	ldr	r3, [pc, #8]	; (7844 <setChannelIdStatus+0x20>)
    783a:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    783c:	2008      	movs	r0, #8
	return retVal;
    783e:	e7f9      	b.n	7834 <setChannelIdStatus+0x10>
    7840:	200013e0 	.word	0x200013e0
    7844:	00005b85 	.word	0x00005b85

00007848 <ValidateDataRange>:
{
    7848:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    784a:	233a      	movs	r3, #58	; 0x3a
    784c:	33ff      	adds	r3, #255	; 0xff
    784e:	4a17      	ldr	r2, [pc, #92]	; (78ac <ValidateDataRange+0x64>)
    7850:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7852:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7854:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7856:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7858:	42a3      	cmp	r3, r4
    785a:	d213      	bcs.n	7884 <ValidateDataRange+0x3c>
}
    785c:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    785e:	2022      	movs	r0, #34	; 0x22
    7860:	4d12      	ldr	r5, [pc, #72]	; (78ac <ValidateDataRange+0x64>)
    7862:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7864:	381a      	subs	r0, #26
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7866:	42a9      	cmp	r1, r5
    7868:	daf8      	bge.n	785c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    786a:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    786c:	4293      	cmp	r3, r2
    786e:	d1f5      	bne.n	785c <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    7870:	42a3      	cmp	r3, r4
    7872:	d005      	beq.n	7880 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7874:	200a      	movs	r0, #10
	return retVal;
    7876:	e7f1      	b.n	785c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7878:	200a      	movs	r0, #10
    787a:	e7ef      	b.n	785c <ValidateDataRange+0x14>
    787c:	200a      	movs	r0, #10
    787e:	e7ed      	b.n	785c <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7880:	2008      	movs	r0, #8
    7882:	e7eb      	b.n	785c <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7884:	200f      	movs	r0, #15
    7886:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7888:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    788a:	4293      	cmp	r3, r2
    788c:	d3e6      	bcc.n	785c <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    788e:	42a2      	cmp	r2, r4
    7890:	d8e4      	bhi.n	785c <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7892:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7894:	209e      	movs	r0, #158	; 0x9e
    7896:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    7898:	4d04      	ldr	r5, [pc, #16]	; (78ac <ValidateDataRange+0x64>)
    789a:	5c28      	ldrb	r0, [r5, r0]
    789c:	4288      	cmp	r0, r1
    789e:	d9de      	bls.n	785e <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    78a0:	4293      	cmp	r3, r2
    78a2:	d0e9      	beq.n	7878 <ValidateDataRange+0x30>
    78a4:	42a3      	cmp	r3, r4
    78a6:	d0e9      	beq.n	787c <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    78a8:	2008      	movs	r0, #8
    78aa:	e7d7      	b.n	785c <ValidateDataRange+0x14>
    78ac:	200013e0 	.word	0x200013e0

000078b0 <setDataRange>:
{
    78b0:	b570      	push	{r4, r5, r6, lr}
    78b2:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    78b4:	2012      	movs	r0, #18
    78b6:	4b16      	ldr	r3, [pc, #88]	; (7910 <setDataRange+0x60>)
    78b8:	4798      	blx	r3
    78ba:	0004      	movs	r4, r0
    78bc:	2808      	cmp	r0, #8
    78be:	d002      	beq.n	78c6 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    78c0:	240a      	movs	r4, #10
}
    78c2:	0020      	movs	r0, r4
    78c4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    78c6:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    78c8:	2222      	movs	r2, #34	; 0x22
    78ca:	4912      	ldr	r1, [pc, #72]	; (7914 <setDataRange+0x64>)
    78cc:	568a      	ldrsb	r2, [r1, r2]
    78ce:	4293      	cmp	r3, r2
    78d0:	db01      	blt.n	78d6 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    78d2:	3402      	adds	r4, #2
    78d4:	e7f5      	b.n	78c2 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    78d6:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    78d8:	4a0e      	ldr	r2, [pc, #56]	; (7914 <setDataRange+0x64>)
    78da:	7911      	ldrb	r1, [r2, #4]
    78dc:	7950      	ldrb	r0, [r2, #5]
    78de:	0200      	lsls	r0, r0, #8
    78e0:	4308      	orrs	r0, r1
    78e2:	7991      	ldrb	r1, [r2, #6]
    78e4:	0409      	lsls	r1, r1, #16
    78e6:	4308      	orrs	r0, r1
    78e8:	79d1      	ldrb	r1, [r2, #7]
    78ea:	0609      	lsls	r1, r1, #24
    78ec:	4301      	orrs	r1, r0
    78ee:	005b      	lsls	r3, r3, #1
    78f0:	185b      	adds	r3, r3, r1
    78f2:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    78f4:	23f8      	movs	r3, #248	; 0xf8
    78f6:	33ff      	adds	r3, #255	; 0xff
    78f8:	5cd3      	ldrb	r3, [r2, r3]
    78fa:	21fc      	movs	r1, #252	; 0xfc
    78fc:	0049      	lsls	r1, r1, #1
    78fe:	5c50      	ldrb	r0, [r2, r1]
    7900:	0200      	lsls	r0, r0, #8
    7902:	4318      	orrs	r0, r3
    7904:	b2c1      	uxtb	r1, r0
    7906:	0a00      	lsrs	r0, r0, #8
    7908:	4b03      	ldr	r3, [pc, #12]	; (7918 <setDataRange+0x68>)
    790a:	4798      	blx	r3
	return retVal;
    790c:	e7d9      	b.n	78c2 <setDataRange+0x12>
    790e:	46c0      	nop			; (mov r8, r8)
    7910:	00007849 	.word	0x00007849
    7914:	200013e0 	.word	0x200013e0
    7918:	00008ec5 	.word	0x00008ec5

0000791c <LORAREG_GetAttr_RxWindowSizeT1>:
{
    791c:	b570      	push	{r4, r5, r6, lr}
    791e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7920:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7922:	233a      	movs	r3, #58	; 0x3a
    7924:	33ff      	adds	r3, #255	; 0xff
    7926:	4a0f      	ldr	r2, [pc, #60]	; (7964 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7928:	5cd3      	ldrb	r3, [r2, r3]
    792a:	42a3      	cmp	r3, r4
    792c:	d205      	bcs.n	793a <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    792e:	200f      	movs	r0, #15
    7930:	4b0d      	ldr	r3, [pc, #52]	; (7968 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    7932:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7934:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7936:	2808      	cmp	r0, #8
    7938:	d112      	bne.n	7960 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    793a:	490a      	ldr	r1, [pc, #40]	; (7964 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    793c:	780b      	ldrb	r3, [r1, #0]
    793e:	784a      	ldrb	r2, [r1, #1]
    7940:	0212      	lsls	r2, r2, #8
    7942:	431a      	orrs	r2, r3
    7944:	788b      	ldrb	r3, [r1, #2]
    7946:	041b      	lsls	r3, r3, #16
    7948:	431a      	orrs	r2, r3
    794a:	78cb      	ldrb	r3, [r1, #3]
    794c:	061b      	lsls	r3, r3, #24
    794e:	4313      	orrs	r3, r2
    7950:	00e4      	lsls	r4, r4, #3
    7952:	5ce2      	ldrb	r2, [r4, r3]
    7954:	18e4      	adds	r4, r4, r3
    7956:	7863      	ldrb	r3, [r4, #1]
    7958:	021b      	lsls	r3, r3, #8
    795a:	4313      	orrs	r3, r2
    795c:	802b      	strh	r3, [r5, #0]
	return result;
    795e:	2308      	movs	r3, #8
}
    7960:	0018      	movs	r0, r3
    7962:	bd70      	pop	{r4, r5, r6, pc}
    7964:	200013e0 	.word	0x200013e0
    7968:	00005481 	.word	0x00005481

0000796c <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    796c:	b570      	push	{r4, r5, r6, lr}
    796e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7970:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7972:	233a      	movs	r3, #58	; 0x3a
    7974:	33ff      	adds	r3, #255	; 0xff
    7976:	4a0e      	ldr	r2, [pc, #56]	; (79b0 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7978:	5cd3      	ldrb	r3, [r2, r3]
    797a:	42a3      	cmp	r3, r4
    797c:	d205      	bcs.n	798a <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    797e:	200f      	movs	r0, #15
    7980:	4b0c      	ldr	r3, [pc, #48]	; (79b4 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    7982:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7984:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7986:	2808      	cmp	r0, #8
    7988:	d110      	bne.n	79ac <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    798a:	4909      	ldr	r1, [pc, #36]	; (79b0 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    798c:	780b      	ldrb	r3, [r1, #0]
    798e:	784a      	ldrb	r2, [r1, #1]
    7990:	0212      	lsls	r2, r2, #8
    7992:	431a      	orrs	r2, r3
    7994:	788b      	ldrb	r3, [r1, #2]
    7996:	041b      	lsls	r3, r3, #16
    7998:	431a      	orrs	r2, r3
    799a:	78cb      	ldrb	r3, [r1, #3]
    799c:	061b      	lsls	r3, r3, #24
    799e:	4313      	orrs	r3, r2
    79a0:	00e4      	lsls	r4, r4, #3
    79a2:	18e3      	adds	r3, r4, r3
    79a4:	791b      	ldrb	r3, [r3, #4]
    79a6:	b25b      	sxtb	r3, r3
    79a8:	702b      	strb	r3, [r5, #0]
	return result;
    79aa:	2308      	movs	r3, #8
}
    79ac:	0018      	movs	r0, r3
    79ae:	bd70      	pop	{r4, r5, r6, pc}
    79b0:	200013e0 	.word	0x200013e0
    79b4:	00005481 	.word	0x00005481

000079b8 <LORAREG_GetAttr_MaxPayloadT1>:
{
    79b8:	b570      	push	{r4, r5, r6, lr}
    79ba:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    79bc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    79be:	233a      	movs	r3, #58	; 0x3a
    79c0:	33ff      	adds	r3, #255	; 0xff
    79c2:	4a0e      	ldr	r2, [pc, #56]	; (79fc <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    79c4:	5cd3      	ldrb	r3, [r2, r3]
    79c6:	42a3      	cmp	r3, r4
    79c8:	d205      	bcs.n	79d6 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79ca:	200f      	movs	r0, #15
    79cc:	4b0c      	ldr	r3, [pc, #48]	; (7a00 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    79ce:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    79d0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    79d2:	2808      	cmp	r0, #8
    79d4:	d10f      	bne.n	79f6 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    79d6:	4909      	ldr	r1, [pc, #36]	; (79fc <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    79d8:	780b      	ldrb	r3, [r1, #0]
    79da:	784a      	ldrb	r2, [r1, #1]
    79dc:	0212      	lsls	r2, r2, #8
    79de:	431a      	orrs	r2, r3
    79e0:	788b      	ldrb	r3, [r1, #2]
    79e2:	041b      	lsls	r3, r3, #16
    79e4:	431a      	orrs	r2, r3
    79e6:	78cb      	ldrb	r3, [r1, #3]
    79e8:	061b      	lsls	r3, r3, #24
    79ea:	4313      	orrs	r3, r2
    79ec:	00e4      	lsls	r4, r4, #3
    79ee:	18e3      	adds	r3, r4, r3
    79f0:	789b      	ldrb	r3, [r3, #2]
    79f2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    79f4:	2308      	movs	r3, #8
}
    79f6:	0018      	movs	r0, r3
    79f8:	bd70      	pop	{r4, r5, r6, pc}
    79fa:	46c0      	nop			; (mov r8, r8)
    79fc:	200013e0 	.word	0x200013e0
    7a00:	00005481 	.word	0x00005481

00007a04 <LORAREG_GetAttr_ModulationAttrT1>:
{
    7a04:	b570      	push	{r4, r5, r6, lr}
    7a06:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a08:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a0a:	233a      	movs	r3, #58	; 0x3a
    7a0c:	33ff      	adds	r3, #255	; 0xff
    7a0e:	4a0e      	ldr	r2, [pc, #56]	; (7a48 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7a10:	5cd3      	ldrb	r3, [r2, r3]
    7a12:	42a3      	cmp	r3, r4
    7a14:	d205      	bcs.n	7a22 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a16:	200f      	movs	r0, #15
    7a18:	4b0c      	ldr	r3, [pc, #48]	; (7a4c <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    7a1a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7a1c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a1e:	2808      	cmp	r0, #8
    7a20:	d10f      	bne.n	7a42 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7a22:	4909      	ldr	r1, [pc, #36]	; (7a48 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7a24:	780b      	ldrb	r3, [r1, #0]
    7a26:	784a      	ldrb	r2, [r1, #1]
    7a28:	0212      	lsls	r2, r2, #8
    7a2a:	431a      	orrs	r2, r3
    7a2c:	788b      	ldrb	r3, [r1, #2]
    7a2e:	041b      	lsls	r3, r3, #16
    7a30:	431a      	orrs	r2, r3
    7a32:	78cb      	ldrb	r3, [r1, #3]
    7a34:	061b      	lsls	r3, r3, #24
    7a36:	4313      	orrs	r3, r2
    7a38:	00e4      	lsls	r4, r4, #3
    7a3a:	18e3      	adds	r3, r4, r3
    7a3c:	79db      	ldrb	r3, [r3, #7]
    7a3e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a40:	2308      	movs	r3, #8
}
    7a42:	0018      	movs	r0, r3
    7a44:	bd70      	pop	{r4, r5, r6, pc}
    7a46:	46c0      	nop			; (mov r8, r8)
    7a48:	200013e0 	.word	0x200013e0
    7a4c:	00005481 	.word	0x00005481

00007a50 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    7a50:	b570      	push	{r4, r5, r6, lr}
    7a52:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a54:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a56:	233a      	movs	r3, #58	; 0x3a
    7a58:	33ff      	adds	r3, #255	; 0xff
    7a5a:	4a0e      	ldr	r2, [pc, #56]	; (7a94 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7a5c:	5cd3      	ldrb	r3, [r2, r3]
    7a5e:	42a3      	cmp	r3, r4
    7a60:	d205      	bcs.n	7a6e <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a62:	200f      	movs	r0, #15
    7a64:	4b0c      	ldr	r3, [pc, #48]	; (7a98 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    7a66:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7a68:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a6a:	2808      	cmp	r0, #8
    7a6c:	d10f      	bne.n	7a8e <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7a6e:	4909      	ldr	r1, [pc, #36]	; (7a94 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7a70:	780b      	ldrb	r3, [r1, #0]
    7a72:	784a      	ldrb	r2, [r1, #1]
    7a74:	0212      	lsls	r2, r2, #8
    7a76:	431a      	orrs	r2, r3
    7a78:	788b      	ldrb	r3, [r1, #2]
    7a7a:	041b      	lsls	r3, r3, #16
    7a7c:	431a      	orrs	r2, r3
    7a7e:	78cb      	ldrb	r3, [r1, #3]
    7a80:	061b      	lsls	r3, r3, #24
    7a82:	4313      	orrs	r3, r2
    7a84:	00e4      	lsls	r4, r4, #3
    7a86:	18e3      	adds	r3, r4, r3
    7a88:	799b      	ldrb	r3, [r3, #6]
    7a8a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a8c:	2308      	movs	r3, #8
}
    7a8e:	0018      	movs	r0, r3
    7a90:	bd70      	pop	{r4, r5, r6, pc}
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	200013e0 	.word	0x200013e0
    7a98:	00005481 	.word	0x00005481

00007a9c <LORAREG_GetAttr_SpreadFactorT1>:
{
    7a9c:	b570      	push	{r4, r5, r6, lr}
    7a9e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7aa0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7aa2:	233a      	movs	r3, #58	; 0x3a
    7aa4:	33ff      	adds	r3, #255	; 0xff
    7aa6:	4a0e      	ldr	r2, [pc, #56]	; (7ae0 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7aa8:	5cd3      	ldrb	r3, [r2, r3]
    7aaa:	42a3      	cmp	r3, r4
    7aac:	d205      	bcs.n	7aba <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7aae:	200f      	movs	r0, #15
    7ab0:	4b0c      	ldr	r3, [pc, #48]	; (7ae4 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    7ab2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7ab4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7ab6:	2808      	cmp	r0, #8
    7ab8:	d10f      	bne.n	7ada <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7aba:	4909      	ldr	r1, [pc, #36]	; (7ae0 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7abc:	780b      	ldrb	r3, [r1, #0]
    7abe:	784a      	ldrb	r2, [r1, #1]
    7ac0:	0212      	lsls	r2, r2, #8
    7ac2:	431a      	orrs	r2, r3
    7ac4:	788b      	ldrb	r3, [r1, #2]
    7ac6:	041b      	lsls	r3, r3, #16
    7ac8:	431a      	orrs	r2, r3
    7aca:	78cb      	ldrb	r3, [r1, #3]
    7acc:	061b      	lsls	r3, r3, #24
    7ace:	4313      	orrs	r3, r2
    7ad0:	00e4      	lsls	r4, r4, #3
    7ad2:	18e3      	adds	r3, r4, r3
    7ad4:	795b      	ldrb	r3, [r3, #5]
    7ad6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ad8:	2308      	movs	r3, #8
}
    7ada:	0018      	movs	r0, r3
    7adc:	bd70      	pop	{r4, r5, r6, pc}
    7ade:	46c0      	nop			; (mov r8, r8)
    7ae0:	200013e0 	.word	0x200013e0
    7ae4:	00005481 	.word	0x00005481

00007ae8 <ValidateTxFreqT1>:
{
    7ae8:	b530      	push	{r4, r5, lr}
    7aea:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    7aec:	2208      	movs	r2, #8
    7aee:	4668      	mov	r0, sp
    7af0:	4b20      	ldr	r3, [pc, #128]	; (7b74 <ValidateTxFreqT1+0x8c>)
    7af2:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    7af4:	466b      	mov	r3, sp
    7af6:	7919      	ldrb	r1, [r3, #4]
    7af8:	2322      	movs	r3, #34	; 0x22
    7afa:	4a1f      	ldr	r2, [pc, #124]	; (7b78 <ValidateTxFreqT1+0x90>)
    7afc:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7afe:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    7b00:	4299      	cmp	r1, r3
    7b02:	dd00      	ble.n	7b06 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7b04:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7b06:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7b08:	4d1b      	ldr	r5, [pc, #108]	; (7b78 <ValidateTxFreqT1+0x90>)
    7b0a:	2396      	movs	r3, #150	; 0x96
    7b0c:	005b      	lsls	r3, r3, #1
    7b0e:	5ceb      	ldrb	r3, [r5, r3]
    7b10:	222e      	movs	r2, #46	; 0x2e
    7b12:	32ff      	adds	r2, #255	; 0xff
    7b14:	5caa      	ldrb	r2, [r5, r2]
    7b16:	0212      	lsls	r2, r2, #8
    7b18:	431a      	orrs	r2, r3
    7b1a:	2397      	movs	r3, #151	; 0x97
    7b1c:	005b      	lsls	r3, r3, #1
    7b1e:	5ceb      	ldrb	r3, [r5, r3]
    7b20:	041b      	lsls	r3, r3, #16
    7b22:	431a      	orrs	r2, r3
    7b24:	2330      	movs	r3, #48	; 0x30
    7b26:	33ff      	adds	r3, #255	; 0xff
    7b28:	5ceb      	ldrb	r3, [r5, r3]
    7b2a:	061b      	lsls	r3, r3, #24
    7b2c:	4313      	orrs	r3, r2
    7b2e:	4a13      	ldr	r2, [pc, #76]	; (7b7c <ValidateTxFreqT1+0x94>)
    7b30:	434a      	muls	r2, r1
    7b32:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7b34:	429c      	cmp	r4, r3
    7b36:	d01b      	beq.n	7b70 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7b38:	239e      	movs	r3, #158	; 0x9e
    7b3a:	005b      	lsls	r3, r3, #1
    7b3c:	5ceb      	ldrb	r3, [r5, r3]
    7b3e:	1ac9      	subs	r1, r1, r3
    7b40:	4b0f      	ldr	r3, [pc, #60]	; (7b80 <ValidateTxFreqT1+0x98>)
    7b42:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7b44:	2398      	movs	r3, #152	; 0x98
    7b46:	005b      	lsls	r3, r3, #1
    7b48:	5ceb      	ldrb	r3, [r5, r3]
    7b4a:	2232      	movs	r2, #50	; 0x32
    7b4c:	32ff      	adds	r2, #255	; 0xff
    7b4e:	5caa      	ldrb	r2, [r5, r2]
    7b50:	0212      	lsls	r2, r2, #8
    7b52:	4313      	orrs	r3, r2
    7b54:	2299      	movs	r2, #153	; 0x99
    7b56:	0052      	lsls	r2, r2, #1
    7b58:	5caa      	ldrb	r2, [r5, r2]
    7b5a:	0412      	lsls	r2, r2, #16
    7b5c:	431a      	orrs	r2, r3
    7b5e:	2334      	movs	r3, #52	; 0x34
    7b60:	33ff      	adds	r3, #255	; 0xff
    7b62:	5ceb      	ldrb	r3, [r5, r3]
    7b64:	061b      	lsls	r3, r3, #24
    7b66:	4313      	orrs	r3, r2
    7b68:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7b6a:	429c      	cmp	r4, r3
    7b6c:	d000      	beq.n	7b70 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    7b6e:	200a      	movs	r0, #10
}
    7b70:	b003      	add	sp, #12
    7b72:	bd30      	pop	{r4, r5, pc}
    7b74:	000158c9 	.word	0x000158c9
    7b78:	200013e0 	.word	0x200013e0
    7b7c:	00030d40 	.word	0x00030d40
    7b80:	00186a00 	.word	0x00186a00

00007b84 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    7b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b86:	46ce      	mov	lr, r9
    7b88:	4647      	mov	r7, r8
    7b8a:	b580      	push	{r7, lr}
    7b8c:	b083      	sub	sp, #12
    7b8e:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7b90:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7b92:	233a      	movs	r3, #58	; 0x3a
    7b94:	33ff      	adds	r3, #255	; 0xff
    7b96:	4a72      	ldr	r2, [pc, #456]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7b98:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7b9a:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7b9c:	42ab      	cmp	r3, r5
    7b9e:	d26d      	bcs.n	7c7c <LORAREG_GetAttr_NewTxChConfigT1+0xf8>
}
    7ba0:	0020      	movs	r0, r4
    7ba2:	b003      	add	sp, #12
    7ba4:	bc0c      	pop	{r2, r3}
    7ba6:	4690      	mov	r8, r2
    7ba8:	4699      	mov	r9, r3
    7baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7bac:	4b6c      	ldr	r3, [pc, #432]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7bae:	4699      	mov	r9, r3
    7bb0:	2322      	movs	r3, #34	; 0x22
    7bb2:	464a      	mov	r2, r9
    7bb4:	5cd0      	ldrb	r0, [r2, r3]
    7bb6:	466b      	mov	r3, sp
    7bb8:	3307      	adds	r3, #7
    7bba:	002a      	movs	r2, r5
    7bbc:	2101      	movs	r1, #1
    7bbe:	4c69      	ldr	r4, [pc, #420]	; (7d64 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7bc0:	47a0      	blx	r4
    7bc2:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7bc4:	464b      	mov	r3, r9
    7bc6:	781b      	ldrb	r3, [r3, #0]
    7bc8:	464a      	mov	r2, r9
    7bca:	7852      	ldrb	r2, [r2, #1]
    7bcc:	0212      	lsls	r2, r2, #8
    7bce:	431a      	orrs	r2, r3
    7bd0:	464b      	mov	r3, r9
    7bd2:	789b      	ldrb	r3, [r3, #2]
    7bd4:	041b      	lsls	r3, r3, #16
    7bd6:	431a      	orrs	r2, r3
    7bd8:	464b      	mov	r3, r9
    7bda:	78db      	ldrb	r3, [r3, #3]
    7bdc:	061b      	lsls	r3, r3, #24
    7bde:	4313      	orrs	r3, r2
    7be0:	00ed      	lsls	r5, r5, #3
    7be2:	18eb      	adds	r3, r5, r3
    7be4:	795b      	ldrb	r3, [r3, #5]
    7be6:	72f3      	strb	r3, [r6, #11]
    7be8:	e081      	b.n	7cee <LORAREG_GetAttr_NewTxChConfigT1+0x16a>
			    radioConfig->sf = SF_10;				
    7bea:	3308      	adds	r3, #8
    7bec:	72f3      	strb	r3, [r6, #11]
    7bee:	e05f      	b.n	7cb0 <LORAREG_GetAttr_NewTxChConfigT1+0x12c>
			radioConfig->sf = SF_8;
    7bf0:	2308      	movs	r3, #8
    7bf2:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_500KHZ;
    7bf4:	3301      	adds	r3, #1
    7bf6:	72b3      	strb	r3, [r6, #10]
			if( RegParams.band == ISM_NA915)
    7bf8:	331d      	adds	r3, #29
    7bfa:	4a59      	ldr	r2, [pc, #356]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7bfc:	5cd3      	ldrb	r3, [r2, r3]
			uint8_t dr = DR6;
    7bfe:	2206      	movs	r2, #6
			if( RegParams.band == ISM_NA915)
    7c00:	2b02      	cmp	r3, #2
    7c02:	d00a      	beq.n	7c1a <LORAREG_GetAttr_NewTxChConfigT1+0x96>
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_500khzChan, transmissionType,dr, &channelIndex);
    7c04:	233e      	movs	r3, #62	; 0x3e
    7c06:	33ff      	adds	r3, #255	; 0xff
    7c08:	4955      	ldr	r1, [pc, #340]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7c0a:	5cc8      	ldrb	r0, [r1, r3]
    7c0c:	466b      	mov	r3, sp
    7c0e:	3307      	adds	r3, #7
    7c10:	2100      	movs	r1, #0
    7c12:	4c54      	ldr	r4, [pc, #336]	; (7d64 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7c14:	47a0      	blx	r4
    7c16:	0004      	movs	r4, r0
    7c18:	e057      	b.n	7cca <LORAREG_GetAttr_NewTxChConfigT1+0x146>
				dr = DR4;
    7c1a:	3a02      	subs	r2, #2
    7c1c:	e7f2      	b.n	7c04 <LORAREG_GetAttr_NewTxChConfigT1+0x80>
    			radioConfig->ecrConfig.override = true;
    7c1e:	3b01      	subs	r3, #1
    7c20:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    7c22:	71b3      	strb	r3, [r6, #6]
    7c24:	e091      	b.n	7d4a <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			radioConfig->bandwidth = BW_500KHZ;
    7c26:	2109      	movs	r1, #9
    7c28:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7c2a:	494d      	ldr	r1, [pc, #308]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7c2c:	209e      	movs	r0, #158	; 0x9e
    7c2e:	0040      	lsls	r0, r0, #1
    7c30:	5c08      	ldrb	r0, [r1, r0]
    7c32:	1a12      	subs	r2, r2, r0
    7c34:	484c      	ldr	r0, [pc, #304]	; (7d68 <LORAREG_GetAttr_NewTxChConfigT1+0x1e4>)
    7c36:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7c38:	2098      	movs	r0, #152	; 0x98
    7c3a:	0040      	lsls	r0, r0, #1
    7c3c:	5c08      	ldrb	r0, [r1, r0]
    7c3e:	2532      	movs	r5, #50	; 0x32
    7c40:	35ff      	adds	r5, #255	; 0xff
    7c42:	5d4d      	ldrb	r5, [r1, r5]
    7c44:	022d      	lsls	r5, r5, #8
    7c46:	4305      	orrs	r5, r0
    7c48:	2099      	movs	r0, #153	; 0x99
    7c4a:	0040      	lsls	r0, r0, #1
    7c4c:	5c08      	ldrb	r0, [r1, r0]
    7c4e:	0400      	lsls	r0, r0, #16
    7c50:	4305      	orrs	r5, r0
    7c52:	2034      	movs	r0, #52	; 0x34
    7c54:	30ff      	adds	r0, #255	; 0xff
    7c56:	5c08      	ldrb	r0, [r1, r0]
    7c58:	0600      	lsls	r0, r0, #24
    7c5a:	4328      	orrs	r0, r5
    7c5c:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    7c5e:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    7c60:	2226      	movs	r2, #38	; 0x26
    7c62:	5c8a      	ldrb	r2, [r1, r2]
    7c64:	2a02      	cmp	r2, #2
    7c66:	d003      	beq.n	7c70 <LORAREG_GetAttr_NewTxChConfigT1+0xec>
			if (txPower <= 26)
    7c68:	2b1a      	cmp	r3, #26
    7c6a:	d804      	bhi.n	7c76 <LORAREG_GetAttr_NewTxChConfigT1+0xf2>
				radioConfig->txPower = txPower;
    7c6c:	7233      	strb	r3, [r6, #8]
    7c6e:	e06c      	b.n	7d4a <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			    radioConfig->ecrConfig.override = false;
    7c70:	2200      	movs	r2, #0
    7c72:	71f2      	strb	r2, [r6, #7]
    7c74:	e7f8      	b.n	7c68 <LORAREG_GetAttr_NewTxChConfigT1+0xe4>
				radioConfig->txPower = 26;
    7c76:	231a      	movs	r3, #26
    7c78:	7233      	strb	r3, [r6, #8]
    7c7a:	e066      	b.n	7d4a <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7c7c:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7c7e:	2325      	movs	r3, #37	; 0x25
    7c80:	4a37      	ldr	r2, [pc, #220]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7c82:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7c84:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7c86:	429f      	cmp	r7, r3
    7c88:	dd00      	ble.n	7c8c <LORAREG_GetAttr_NewTxChConfigT1+0x108>
    7c8a:	e789      	b.n	7ba0 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7c8c:	2320      	movs	r3, #32
    7c8e:	5cd3      	ldrb	r3, [r2, r3]
    7c90:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    7c92:	780b      	ldrb	r3, [r1, #0]
    7c94:	2b00      	cmp	r3, #0
    7c96:	d189      	bne.n	7bac <LORAREG_GetAttr_NewTxChConfigT1+0x28>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 0) //TOFO init in reginit
    7c98:	2340      	movs	r3, #64	; 0x40
    7c9a:	33ff      	adds	r3, #255	; 0xff
    7c9c:	4a30      	ldr	r2, [pc, #192]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7c9e:	5cd3      	ldrb	r3, [r2, r3]
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d1a5      	bne.n	7bf0 <LORAREG_GetAttr_NewTxChConfigT1+0x6c>
            if( RegParams.band == ISM_NA915)
    7ca4:	3326      	adds	r3, #38	; 0x26
    7ca6:	5cd3      	ldrb	r3, [r2, r3]
    7ca8:	2b02      	cmp	r3, #2
    7caa:	d09e      	beq.n	7bea <LORAREG_GetAttr_NewTxChConfigT1+0x66>
				radioConfig->sf = SF_12;
    7cac:	230c      	movs	r3, #12
    7cae:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_125KHZ;
    7cb0:	2307      	movs	r3, #7
    7cb2:	72b3      	strb	r3, [r6, #10]
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    7cb4:	3336      	adds	r3, #54	; 0x36
    7cb6:	33ff      	adds	r3, #255	; 0xff
    7cb8:	4a29      	ldr	r2, [pc, #164]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7cba:	5cd0      	ldrb	r0, [r2, r3]
    7cbc:	466b      	mov	r3, sp
    7cbe:	3307      	adds	r3, #7
    7cc0:	2200      	movs	r2, #0
    7cc2:	2100      	movs	r1, #0
    7cc4:	4c27      	ldr	r4, [pc, #156]	; (7d64 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7cc6:	47a0      	blx	r4
    7cc8:	0004      	movs	r4, r0
		RegParams.cmnParams.paramsType1.alternativeChannel = !RegParams.cmnParams.paramsType1.alternativeChannel;
    7cca:	4b25      	ldr	r3, [pc, #148]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7ccc:	2140      	movs	r1, #64	; 0x40
    7cce:	31ff      	adds	r1, #255	; 0xff
    7cd0:	5c5a      	ldrb	r2, [r3, r1]
    7cd2:	4250      	negs	r0, r2
    7cd4:	4142      	adcs	r2, r0
    7cd6:	545a      	strb	r2, [r3, r1]
		PDS_STORE(RegParams.regParamItems.alt_ch_item_id);
    7cd8:	22f6      	movs	r2, #246	; 0xf6
    7cda:	32ff      	adds	r2, #255	; 0xff
    7cdc:	5c9a      	ldrb	r2, [r3, r2]
    7cde:	31b7      	adds	r1, #183	; 0xb7
    7ce0:	5c58      	ldrb	r0, [r3, r1]
    7ce2:	0200      	lsls	r0, r0, #8
    7ce4:	4310      	orrs	r0, r2
    7ce6:	b2c1      	uxtb	r1, r0
    7ce8:	0a00      	lsrs	r0, r0, #8
    7cea:	4b20      	ldr	r3, [pc, #128]	; (7d6c <LORAREG_GetAttr_NewTxChConfigT1+0x1e8>)
    7cec:	4798      	blx	r3
	if (result == LORAWAN_SUCCESS)
    7cee:	2c08      	cmp	r4, #8
    7cf0:	d000      	beq.n	7cf4 <LORAREG_GetAttr_NewTxChConfigT1+0x170>
    7cf2:	e755      	b.n	7ba0 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7cf4:	007f      	lsls	r7, r7, #1
    7cf6:	4643      	mov	r3, r8
    7cf8:	1bdb      	subs	r3, r3, r7
    7cfa:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    7cfc:	466a      	mov	r2, sp
    7cfe:	3207      	adds	r2, #7
    7d00:	7812      	ldrb	r2, [r2, #0]
    7d02:	219e      	movs	r1, #158	; 0x9e
    7d04:	0049      	lsls	r1, r1, #1
    7d06:	4816      	ldr	r0, [pc, #88]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7d08:	5c41      	ldrb	r1, [r0, r1]
    7d0a:	4291      	cmp	r1, r2
    7d0c:	d98b      	bls.n	7c26 <LORAREG_GetAttr_NewTxChConfigT1+0xa2>
			radioConfig->bandwidth = BW_125KHZ;
    7d0e:	2107      	movs	r1, #7
    7d10:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7d12:	3126      	adds	r1, #38	; 0x26
    7d14:	31ff      	adds	r1, #255	; 0xff
    7d16:	5c41      	ldrb	r1, [r0, r1]
    7d18:	252e      	movs	r5, #46	; 0x2e
    7d1a:	35ff      	adds	r5, #255	; 0xff
    7d1c:	5d45      	ldrb	r5, [r0, r5]
    7d1e:	022d      	lsls	r5, r5, #8
    7d20:	430d      	orrs	r5, r1
    7d22:	2197      	movs	r1, #151	; 0x97
    7d24:	0049      	lsls	r1, r1, #1
    7d26:	5c41      	ldrb	r1, [r0, r1]
    7d28:	0409      	lsls	r1, r1, #16
    7d2a:	430d      	orrs	r5, r1
    7d2c:	2130      	movs	r1, #48	; 0x30
    7d2e:	31ff      	adds	r1, #255	; 0xff
    7d30:	5c41      	ldrb	r1, [r0, r1]
    7d32:	0609      	lsls	r1, r1, #24
    7d34:	4329      	orrs	r1, r5
    7d36:	4d0e      	ldr	r5, [pc, #56]	; (7d70 <LORAREG_GetAttr_NewTxChConfigT1+0x1ec>)
    7d38:	436a      	muls	r2, r5
    7d3a:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    7d3c:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    7d3e:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    7d40:	2326      	movs	r3, #38	; 0x26
    7d42:	5cc3      	ldrb	r3, [r0, r3]
    7d44:	2b02      	cmp	r3, #2
    7d46:	d100      	bne.n	7d4a <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
    7d48:	e769      	b.n	7c1e <LORAREG_GetAttr_NewTxChConfigT1+0x9a>
		radioConfig->freq_hop_period = DISABLED;
    7d4a:	2300      	movs	r3, #0
    7d4c:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    7d4e:	3301      	adds	r3, #1
    7d50:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    7d52:	466b      	mov	r3, sp
    7d54:	79d9      	ldrb	r1, [r3, #7]
    7d56:	2327      	movs	r3, #39	; 0x27
    7d58:	4a01      	ldr	r2, [pc, #4]	; (7d60 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7d5a:	54d1      	strb	r1, [r2, r3]
    7d5c:	e720      	b.n	7ba0 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
    7d5e:	46c0      	nop			; (mov r8, r8)
    7d60:	200013e0 	.word	0x200013e0
    7d64:	000058c5 	.word	0x000058c5
    7d68:	00186a00 	.word	0x00186a00
    7d6c:	00008ec5 	.word	0x00008ec5
    7d70:	00030d40 	.word	0x00030d40

00007d74 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    7d74:	4b2a      	ldr	r3, [pc, #168]	; (7e20 <LORAREG_InitGetAttrFnPtrsNA+0xac>)
    7d76:	4a2b      	ldr	r2, [pc, #172]	; (7e24 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    7d78:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    7d7a:	4a2b      	ldr	r2, [pc, #172]	; (7e28 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    7d7c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    7d7e:	4a2b      	ldr	r2, [pc, #172]	; (7e2c <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    7d80:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    7d82:	4a2b      	ldr	r2, [pc, #172]	; (7e30 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    7d84:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7d86:	4a2b      	ldr	r2, [pc, #172]	; (7e34 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    7d88:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7d8a:	4a2b      	ldr	r2, [pc, #172]	; (7e38 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    7d8c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7d8e:	4a2b      	ldr	r2, [pc, #172]	; (7e3c <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    7d90:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7d92:	4a2b      	ldr	r2, [pc, #172]	; (7e40 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    7d94:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7d96:	4a2b      	ldr	r2, [pc, #172]	; (7e44 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    7d98:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7d9a:	4a2b      	ldr	r2, [pc, #172]	; (7e48 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    7d9c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7d9e:	4a2b      	ldr	r2, [pc, #172]	; (7e4c <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    7da0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    7da2:	4a2b      	ldr	r2, [pc, #172]	; (7e50 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    7da4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7da6:	4a2b      	ldr	r2, [pc, #172]	; (7e54 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    7da8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7daa:	4a2b      	ldr	r2, [pc, #172]	; (7e58 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    7dac:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    7dae:	4a2b      	ldr	r2, [pc, #172]	; (7e5c <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    7db0:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    7db2:	4a2b      	ldr	r2, [pc, #172]	; (7e60 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    7db4:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    7db6:	492b      	ldr	r1, [pc, #172]	; (7e64 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    7db8:	2284      	movs	r2, #132	; 0x84
    7dba:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    7dbc:	492a      	ldr	r1, [pc, #168]	; (7e68 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    7dbe:	3204      	adds	r2, #4
    7dc0:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    7dc2:	492a      	ldr	r1, [pc, #168]	; (7e6c <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    7dc4:	3204      	adds	r2, #4
    7dc6:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    7dc8:	4929      	ldr	r1, [pc, #164]	; (7e70 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    7dca:	3204      	adds	r2, #4
    7dcc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7dce:	4929      	ldr	r1, [pc, #164]	; (7e74 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    7dd0:	3204      	adds	r2, #4
    7dd2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7dd4:	4928      	ldr	r1, [pc, #160]	; (7e78 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    7dd6:	3204      	adds	r2, #4
    7dd8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7dda:	4928      	ldr	r1, [pc, #160]	; (7e7c <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    7ddc:	3204      	adds	r2, #4
    7dde:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7de0:	4927      	ldr	r1, [pc, #156]	; (7e80 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    7de2:	3204      	adds	r2, #4
    7de4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7de6:	4927      	ldr	r1, [pc, #156]	; (7e84 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    7de8:	3204      	adds	r2, #4
    7dea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7dec:	4926      	ldr	r1, [pc, #152]	; (7e88 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    7dee:	3204      	adds	r2, #4
    7df0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7df2:	4926      	ldr	r1, [pc, #152]	; (7e8c <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    7df4:	3204      	adds	r2, #4
    7df6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7df8:	4925      	ldr	r1, [pc, #148]	; (7e90 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    7dfa:	3204      	adds	r2, #4
    7dfc:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    7dfe:	4925      	ldr	r1, [pc, #148]	; (7e94 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    7e00:	3204      	adds	r2, #4
    7e02:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    7e04:	4924      	ldr	r1, [pc, #144]	; (7e98 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    7e06:	3204      	adds	r2, #4
    7e08:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7e0a:	4924      	ldr	r1, [pc, #144]	; (7e9c <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    7e0c:	3204      	adds	r2, #4
    7e0e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7e10:	4923      	ldr	r1, [pc, #140]	; (7ea0 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    7e12:	3214      	adds	r2, #20
    7e14:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7e16:	4923      	ldr	r1, [pc, #140]	; (7ea4 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    7e18:	3204      	adds	r2, #4
    7e1a:	5099      	str	r1, [r3, r2]
}
    7e1c:	4770      	bx	lr
    7e1e:	46c0      	nop			; (mov r8, r8)
    7e20:	20000bc0 	.word	0x20000bc0
    7e24:	000053ad 	.word	0x000053ad
    7e28:	0000791d 	.word	0x0000791d
    7e2c:	0000796d 	.word	0x0000796d
    7e30:	000079b9 	.word	0x000079b9
    7e34:	000051f9 	.word	0x000051f9
    7e38:	00005209 	.word	0x00005209
    7e3c:	00005221 	.word	0x00005221
    7e40:	00005231 	.word	0x00005231
    7e44:	0000611d 	.word	0x0000611d
    7e48:	00005241 	.word	0x00005241
    7e4c:	00005251 	.word	0x00005251
    7e50:	00005ff1 	.word	0x00005ff1
    7e54:	00005559 	.word	0x00005559
    7e58:	000052a1 	.word	0x000052a1
    7e5c:	00005f41 	.word	0x00005f41
    7e60:	000052ed 	.word	0x000052ed
    7e64:	00007a05 	.word	0x00007a05
    7e68:	00007a51 	.word	0x00007a51
    7e6c:	00007a9d 	.word	0x00007a9d
    7e70:	000052f7 	.word	0x000052f7
    7e74:	00005301 	.word	0x00005301
    7e78:	0000530b 	.word	0x0000530b
    7e7c:	00005315 	.word	0x00005315
    7e80:	00005321 	.word	0x00005321
    7e84:	0000532d 	.word	0x0000532d
    7e88:	00005337 	.word	0x00005337
    7e8c:	0000533f 	.word	0x0000533f
    7e90:	00005347 	.word	0x00005347
    7e94:	00007b85 	.word	0x00007b85
    7e98:	000059a5 	.word	0x000059a5
    7e9c:	00005371 	.word	0x00005371
    7ea0:	00005351 	.word	0x00005351
    7ea4:	00005361 	.word	0x00005361

00007ea8 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    7ea8:	4b2b      	ldr	r3, [pc, #172]	; (7f58 <LORAREG_InitGetAttrFnPtrsEU+0xb0>)
    7eaa:	4a2c      	ldr	r2, [pc, #176]	; (7f5c <LORAREG_InitGetAttrFnPtrsEU+0xb4>)
    7eac:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7eae:	4a2c      	ldr	r2, [pc, #176]	; (7f60 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    7eb0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7eb2:	4a2c      	ldr	r2, [pc, #176]	; (7f64 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    7eb4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    7eb6:	4a2c      	ldr	r2, [pc, #176]	; (7f68 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    7eb8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7eba:	4a2c      	ldr	r2, [pc, #176]	; (7f6c <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    7ebc:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7ebe:	4a2c      	ldr	r2, [pc, #176]	; (7f70 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    7ec0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7ec2:	4a2c      	ldr	r2, [pc, #176]	; (7f74 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    7ec4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7ec6:	4a2c      	ldr	r2, [pc, #176]	; (7f78 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    7ec8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7eca:	4a2c      	ldr	r2, [pc, #176]	; (7f7c <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    7ecc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7ece:	4a2c      	ldr	r2, [pc, #176]	; (7f80 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    7ed0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7ed2:	4a2c      	ldr	r2, [pc, #176]	; (7f84 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    7ed4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7ed6:	4a2c      	ldr	r2, [pc, #176]	; (7f88 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    7ed8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7eda:	4a2c      	ldr	r2, [pc, #176]	; (7f8c <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    7edc:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7ede:	4a2c      	ldr	r2, [pc, #176]	; (7f90 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    7ee0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    7ee2:	4a2c      	ldr	r2, [pc, #176]	; (7f94 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    7ee4:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7ee6:	4a2c      	ldr	r2, [pc, #176]	; (7f98 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    7ee8:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7eea:	492c      	ldr	r1, [pc, #176]	; (7f9c <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    7eec:	2284      	movs	r2, #132	; 0x84
    7eee:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7ef0:	492b      	ldr	r1, [pc, #172]	; (7fa0 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    7ef2:	3204      	adds	r2, #4
    7ef4:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7ef6:	492b      	ldr	r1, [pc, #172]	; (7fa4 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    7ef8:	3204      	adds	r2, #4
    7efa:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7efc:	492a      	ldr	r1, [pc, #168]	; (7fa8 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    7efe:	3204      	adds	r2, #4
    7f00:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7f02:	492a      	ldr	r1, [pc, #168]	; (7fac <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    7f04:	3204      	adds	r2, #4
    7f06:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7f08:	4929      	ldr	r1, [pc, #164]	; (7fb0 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    7f0a:	3204      	adds	r2, #4
    7f0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7f0e:	4929      	ldr	r1, [pc, #164]	; (7fb4 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    7f10:	3204      	adds	r2, #4
    7f12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7f14:	4928      	ldr	r1, [pc, #160]	; (7fb8 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    7f16:	3204      	adds	r2, #4
    7f18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7f1a:	4928      	ldr	r1, [pc, #160]	; (7fbc <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    7f1c:	3204      	adds	r2, #4
    7f1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7f20:	4927      	ldr	r1, [pc, #156]	; (7fc0 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    7f22:	3204      	adds	r2, #4
    7f24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7f26:	4927      	ldr	r1, [pc, #156]	; (7fc4 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    7f28:	3204      	adds	r2, #4
    7f2a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7f2c:	4926      	ldr	r1, [pc, #152]	; (7fc8 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    7f2e:	3204      	adds	r2, #4
    7f30:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    7f32:	4926      	ldr	r1, [pc, #152]	; (7fcc <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    7f34:	3204      	adds	r2, #4
    7f36:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    7f38:	4925      	ldr	r1, [pc, #148]	; (7fd0 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    7f3a:	3204      	adds	r2, #4
    7f3c:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7f3e:	4925      	ldr	r1, [pc, #148]	; (7fd4 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    7f40:	3204      	adds	r2, #4
    7f42:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    7f44:	4924      	ldr	r1, [pc, #144]	; (7fd8 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    7f46:	320c      	adds	r2, #12
    7f48:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7f4a:	4924      	ldr	r1, [pc, #144]	; (7fdc <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    7f4c:	3208      	adds	r2, #8
    7f4e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7f50:	4923      	ldr	r1, [pc, #140]	; (7fe0 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    7f52:	3204      	adds	r2, #4
    7f54:	5099      	str	r1, [r3, r2]
}
    7f56:	4770      	bx	lr
    7f58:	20000bc0 	.word	0x20000bc0
    7f5c:	000062e5 	.word	0x000062e5
    7f60:	000075d9 	.word	0x000075d9
    7f64:	00007615 	.word	0x00007615
    7f68:	0000764d 	.word	0x0000764d
    7f6c:	000051f9 	.word	0x000051f9
    7f70:	00005209 	.word	0x00005209
    7f74:	00005221 	.word	0x00005221
    7f78:	00005231 	.word	0x00005231
    7f7c:	0000611d 	.word	0x0000611d
    7f80:	00005241 	.word	0x00005241
    7f84:	00005251 	.word	0x00005251
    7f88:	000061e9 	.word	0x000061e9
    7f8c:	00005559 	.word	0x00005559
    7f90:	000052a1 	.word	0x000052a1
    7f94:	0000617d 	.word	0x0000617d
    7f98:	00005511 	.word	0x00005511
    7f9c:	00007685 	.word	0x00007685
    7fa0:	000076bd 	.word	0x000076bd
    7fa4:	000076f5 	.word	0x000076f5
    7fa8:	00006aa9 	.word	0x00006aa9
    7fac:	00005301 	.word	0x00005301
    7fb0:	0000530b 	.word	0x0000530b
    7fb4:	00005315 	.word	0x00005315
    7fb8:	00005321 	.word	0x00005321
    7fbc:	0000532d 	.word	0x0000532d
    7fc0:	00005337 	.word	0x00005337
    7fc4:	0000533f 	.word	0x0000533f
    7fc8:	00005347 	.word	0x00005347
    7fcc:	00007755 	.word	0x00007755
    7fd0:	00005b59 	.word	0x00005b59
    7fd4:	00005371 	.word	0x00005371
    7fd8:	00006135 	.word	0x00006135
    7fdc:	00005351 	.word	0x00005351
    7fe0:	00005361 	.word	0x00005361

00007fe4 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    7fe4:	4b2b      	ldr	r3, [pc, #172]	; (8094 <LORAREG_InitGetAttrFnPtrsAS+0xb0>)
    7fe6:	4a2c      	ldr	r2, [pc, #176]	; (8098 <LORAREG_InitGetAttrFnPtrsAS+0xb4>)
    7fe8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7fea:	4a2c      	ldr	r2, [pc, #176]	; (809c <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    7fec:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7fee:	4a2c      	ldr	r2, [pc, #176]	; (80a0 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    7ff0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    7ff2:	4a2c      	ldr	r2, [pc, #176]	; (80a4 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    7ff4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7ff6:	4a2c      	ldr	r2, [pc, #176]	; (80a8 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    7ff8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7ffa:	4a2c      	ldr	r2, [pc, #176]	; (80ac <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    7ffc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7ffe:	4a2c      	ldr	r2, [pc, #176]	; (80b0 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    8000:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8002:	4a2c      	ldr	r2, [pc, #176]	; (80b4 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    8004:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8006:	4a2c      	ldr	r2, [pc, #176]	; (80b8 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    8008:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    800a:	4a2c      	ldr	r2, [pc, #176]	; (80bc <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    800c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    800e:	4a2c      	ldr	r2, [pc, #176]	; (80c0 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    8010:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8012:	4a2c      	ldr	r2, [pc, #176]	; (80c4 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    8014:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8016:	4a2c      	ldr	r2, [pc, #176]	; (80c8 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    8018:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    801a:	4a2c      	ldr	r2, [pc, #176]	; (80cc <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    801c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    801e:	4a2c      	ldr	r2, [pc, #176]	; (80d0 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    8020:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8022:	492c      	ldr	r1, [pc, #176]	; (80d4 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    8024:	2284      	movs	r2, #132	; 0x84
    8026:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8028:	492b      	ldr	r1, [pc, #172]	; (80d8 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    802a:	3204      	adds	r2, #4
    802c:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    802e:	492b      	ldr	r1, [pc, #172]	; (80dc <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    8030:	3204      	adds	r2, #4
    8032:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8034:	492a      	ldr	r1, [pc, #168]	; (80e0 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    8036:	3208      	adds	r2, #8
    8038:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    803a:	492a      	ldr	r1, [pc, #168]	; (80e4 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    803c:	3204      	adds	r2, #4
    803e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8040:	4929      	ldr	r1, [pc, #164]	; (80e8 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    8042:	3204      	adds	r2, #4
    8044:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8046:	4929      	ldr	r1, [pc, #164]	; (80ec <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    8048:	3204      	adds	r2, #4
    804a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    804c:	4928      	ldr	r1, [pc, #160]	; (80f0 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    804e:	3204      	adds	r2, #4
    8050:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8052:	4928      	ldr	r1, [pc, #160]	; (80f4 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    8054:	3204      	adds	r2, #4
    8056:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8058:	4927      	ldr	r1, [pc, #156]	; (80f8 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    805a:	3204      	adds	r2, #4
    805c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    805e:	4927      	ldr	r1, [pc, #156]	; (80fc <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    8060:	3204      	adds	r2, #4
    8062:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8064:	4926      	ldr	r1, [pc, #152]	; (8100 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    8066:	3204      	adds	r2, #4
    8068:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    806a:	4926      	ldr	r1, [pc, #152]	; (8104 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    806c:	3204      	adds	r2, #4
    806e:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8070:	4925      	ldr	r1, [pc, #148]	; (8108 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    8072:	3204      	adds	r2, #4
    8074:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8076:	4925      	ldr	r1, [pc, #148]	; (810c <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    8078:	320c      	adds	r2, #12
    807a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    807c:	4924      	ldr	r1, [pc, #144]	; (8110 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    807e:	3208      	adds	r2, #8
    8080:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8082:	4924      	ldr	r1, [pc, #144]	; (8114 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    8084:	3204      	adds	r2, #4
    8086:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    8088:	4a23      	ldr	r2, [pc, #140]	; (8118 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    808a:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    808c:	4923      	ldr	r1, [pc, #140]	; (811c <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    808e:	2290      	movs	r2, #144	; 0x90
    8090:	5099      	str	r1, [r3, r2]
}
    8092:	4770      	bx	lr
    8094:	20000bc0 	.word	0x20000bc0
    8098:	00006421 	.word	0x00006421
    809c:	000075d9 	.word	0x000075d9
    80a0:	00007615 	.word	0x00007615
    80a4:	00007575 	.word	0x00007575
    80a8:	000051f9 	.word	0x000051f9
    80ac:	00005209 	.word	0x00005209
    80b0:	00005221 	.word	0x00005221
    80b4:	00005231 	.word	0x00005231
    80b8:	0000611d 	.word	0x0000611d
    80bc:	00005241 	.word	0x00005241
    80c0:	00005251 	.word	0x00005251
    80c4:	000061e9 	.word	0x000061e9
    80c8:	00005559 	.word	0x00005559
    80cc:	000052a1 	.word	0x000052a1
    80d0:	0000632d 	.word	0x0000632d
    80d4:	00007685 	.word	0x00007685
    80d8:	000076bd 	.word	0x000076bd
    80dc:	000076f5 	.word	0x000076f5
    80e0:	00005301 	.word	0x00005301
    80e4:	0000530b 	.word	0x0000530b
    80e8:	00005315 	.word	0x00005315
    80ec:	00005321 	.word	0x00005321
    80f0:	0000532d 	.word	0x0000532d
    80f4:	00005337 	.word	0x00005337
    80f8:	0000533f 	.word	0x0000533f
    80fc:	00005347 	.word	0x00005347
    8100:	00007755 	.word	0x00007755
    8104:	00005b59 	.word	0x00005b59
    8108:	00005371 	.word	0x00005371
    810c:	00006135 	.word	0x00006135
    8110:	00005351 	.word	0x00005351
    8114:	00005361 	.word	0x00005361
    8118:	00005511 	.word	0x00005511
    811c:	00006aa9 	.word	0x00006aa9

00008120 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    8120:	4b29      	ldr	r3, [pc, #164]	; (81c8 <LORAREG_InitGetAttrFnPtrsAU+0xa8>)
    8122:	4a2a      	ldr	r2, [pc, #168]	; (81cc <LORAREG_InitGetAttrFnPtrsAU+0xac>)
    8124:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    8126:	4a2a      	ldr	r2, [pc, #168]	; (81d0 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    8128:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    812a:	4a2a      	ldr	r2, [pc, #168]	; (81d4 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    812c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    812e:	4a2a      	ldr	r2, [pc, #168]	; (81d8 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    8130:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8132:	4a2a      	ldr	r2, [pc, #168]	; (81dc <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    8134:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8136:	4a2a      	ldr	r2, [pc, #168]	; (81e0 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    8138:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    813a:	4a2a      	ldr	r2, [pc, #168]	; (81e4 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    813c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    813e:	4a2a      	ldr	r2, [pc, #168]	; (81e8 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    8140:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8142:	4a2a      	ldr	r2, [pc, #168]	; (81ec <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    8144:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8146:	4a2a      	ldr	r2, [pc, #168]	; (81f0 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    8148:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    814a:	4a2a      	ldr	r2, [pc, #168]	; (81f4 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    814c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    814e:	4a2a      	ldr	r2, [pc, #168]	; (81f8 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    8150:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8152:	4a2a      	ldr	r2, [pc, #168]	; (81fc <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    8154:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8156:	4a2a      	ldr	r2, [pc, #168]	; (8200 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    8158:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    815a:	4a2a      	ldr	r2, [pc, #168]	; (8204 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    815c:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    815e:	4a2a      	ldr	r2, [pc, #168]	; (8208 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    8160:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    8162:	4a2a      	ldr	r2, [pc, #168]	; (820c <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    8164:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    8166:	492a      	ldr	r1, [pc, #168]	; (8210 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    8168:	2284      	movs	r2, #132	; 0x84
    816a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    816c:	4929      	ldr	r1, [pc, #164]	; (8214 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    816e:	3204      	adds	r2, #4
    8170:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    8172:	4929      	ldr	r1, [pc, #164]	; (8218 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    8174:	3204      	adds	r2, #4
    8176:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8178:	4928      	ldr	r1, [pc, #160]	; (821c <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    817a:	3208      	adds	r2, #8
    817c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    817e:	4928      	ldr	r1, [pc, #160]	; (8220 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    8180:	3204      	adds	r2, #4
    8182:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8184:	4927      	ldr	r1, [pc, #156]	; (8224 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    8186:	3204      	adds	r2, #4
    8188:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    818a:	4927      	ldr	r1, [pc, #156]	; (8228 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    818c:	3204      	adds	r2, #4
    818e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8190:	4926      	ldr	r1, [pc, #152]	; (822c <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    8192:	3204      	adds	r2, #4
    8194:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8196:	4926      	ldr	r1, [pc, #152]	; (8230 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    8198:	3204      	adds	r2, #4
    819a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    819c:	4925      	ldr	r1, [pc, #148]	; (8234 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    819e:	3204      	adds	r2, #4
    81a0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    81a2:	4925      	ldr	r1, [pc, #148]	; (8238 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    81a4:	3204      	adds	r2, #4
    81a6:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    81a8:	4924      	ldr	r1, [pc, #144]	; (823c <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    81aa:	3204      	adds	r2, #4
    81ac:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    81ae:	4924      	ldr	r1, [pc, #144]	; (8240 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    81b0:	3204      	adds	r2, #4
    81b2:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    81b4:	4923      	ldr	r1, [pc, #140]	; (8244 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    81b6:	3204      	adds	r2, #4
    81b8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    81ba:	4923      	ldr	r1, [pc, #140]	; (8248 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    81bc:	3214      	adds	r2, #20
    81be:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    81c0:	4922      	ldr	r1, [pc, #136]	; (824c <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    81c2:	3204      	adds	r2, #4
    81c4:	5099      	str	r1, [r3, r2]
}
    81c6:	4770      	bx	lr
    81c8:	20000bc0 	.word	0x20000bc0
    81cc:	000053ad 	.word	0x000053ad
    81d0:	0000791d 	.word	0x0000791d
    81d4:	0000796d 	.word	0x0000796d
    81d8:	000079b9 	.word	0x000079b9
    81dc:	000051f9 	.word	0x000051f9
    81e0:	00005209 	.word	0x00005209
    81e4:	00005221 	.word	0x00005221
    81e8:	00005231 	.word	0x00005231
    81ec:	0000611d 	.word	0x0000611d
    81f0:	00005241 	.word	0x00005241
    81f4:	00005251 	.word	0x00005251
    81f8:	00005ff1 	.word	0x00005ff1
    81fc:	00005559 	.word	0x00005559
    8200:	000052a1 	.word	0x000052a1
    8204:	00005f41 	.word	0x00005f41
    8208:	000052ed 	.word	0x000052ed
    820c:	000052f7 	.word	0x000052f7
    8210:	00007a05 	.word	0x00007a05
    8214:	00007a51 	.word	0x00007a51
    8218:	00007a9d 	.word	0x00007a9d
    821c:	00005301 	.word	0x00005301
    8220:	0000530b 	.word	0x0000530b
    8224:	00005315 	.word	0x00005315
    8228:	00005321 	.word	0x00005321
    822c:	0000532d 	.word	0x0000532d
    8230:	00005337 	.word	0x00005337
    8234:	0000533f 	.word	0x0000533f
    8238:	00005347 	.word	0x00005347
    823c:	00007b85 	.word	0x00007b85
    8240:	000059a5 	.word	0x000059a5
    8244:	00005371 	.word	0x00005371
    8248:	00005351 	.word	0x00005351
    824c:	00005361 	.word	0x00005361

00008250 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    8250:	4b29      	ldr	r3, [pc, #164]	; (82f8 <LORAREG_InitGetAttrFnPtrsIN+0xa8>)
    8252:	4a2a      	ldr	r2, [pc, #168]	; (82fc <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    8254:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8256:	4a2a      	ldr	r2, [pc, #168]	; (8300 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    8258:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    825a:	4a2a      	ldr	r2, [pc, #168]	; (8304 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    825c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    825e:	4a2a      	ldr	r2, [pc, #168]	; (8308 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    8260:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8262:	4a2a      	ldr	r2, [pc, #168]	; (830c <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    8264:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8266:	4a2a      	ldr	r2, [pc, #168]	; (8310 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    8268:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    826a:	4a2a      	ldr	r2, [pc, #168]	; (8314 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    826c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    826e:	4a2a      	ldr	r2, [pc, #168]	; (8318 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    8270:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8272:	4a2a      	ldr	r2, [pc, #168]	; (831c <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    8274:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8276:	4a2a      	ldr	r2, [pc, #168]	; (8320 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    8278:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    827a:	4a2a      	ldr	r2, [pc, #168]	; (8324 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    827c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    827e:	4a2a      	ldr	r2, [pc, #168]	; (8328 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    8280:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8282:	4a2a      	ldr	r2, [pc, #168]	; (832c <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    8284:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    8286:	4a2a      	ldr	r2, [pc, #168]	; (8330 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    8288:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    828a:	4a2a      	ldr	r2, [pc, #168]	; (8334 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    828c:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    828e:	492a      	ldr	r1, [pc, #168]	; (8338 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    8290:	2284      	movs	r2, #132	; 0x84
    8292:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8294:	4929      	ldr	r1, [pc, #164]	; (833c <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    8296:	3204      	adds	r2, #4
    8298:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    829a:	4929      	ldr	r1, [pc, #164]	; (8340 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    829c:	3204      	adds	r2, #4
    829e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    82a0:	4928      	ldr	r1, [pc, #160]	; (8344 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    82a2:	3208      	adds	r2, #8
    82a4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    82a6:	4928      	ldr	r1, [pc, #160]	; (8348 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    82a8:	3204      	adds	r2, #4
    82aa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    82ac:	4927      	ldr	r1, [pc, #156]	; (834c <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    82ae:	3204      	adds	r2, #4
    82b0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    82b2:	4927      	ldr	r1, [pc, #156]	; (8350 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    82b4:	3204      	adds	r2, #4
    82b6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    82b8:	4926      	ldr	r1, [pc, #152]	; (8354 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    82ba:	3204      	adds	r2, #4
    82bc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    82be:	4926      	ldr	r1, [pc, #152]	; (8358 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    82c0:	3204      	adds	r2, #4
    82c2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    82c4:	4925      	ldr	r1, [pc, #148]	; (835c <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    82c6:	3204      	adds	r2, #4
    82c8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    82ca:	4925      	ldr	r1, [pc, #148]	; (8360 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    82cc:	3204      	adds	r2, #4
    82ce:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    82d0:	4924      	ldr	r1, [pc, #144]	; (8364 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    82d2:	3204      	adds	r2, #4
    82d4:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    82d6:	4924      	ldr	r1, [pc, #144]	; (8368 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    82d8:	3204      	adds	r2, #4
    82da:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    82dc:	4923      	ldr	r1, [pc, #140]	; (836c <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    82de:	3204      	adds	r2, #4
    82e0:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    82e2:	4923      	ldr	r1, [pc, #140]	; (8370 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    82e4:	320c      	adds	r2, #12
    82e6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    82e8:	4922      	ldr	r1, [pc, #136]	; (8374 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    82ea:	3208      	adds	r2, #8
    82ec:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    82ee:	4922      	ldr	r1, [pc, #136]	; (8378 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    82f0:	3204      	adds	r2, #4
    82f2:	5099      	str	r1, [r3, r2]
}
    82f4:	4770      	bx	lr
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	20000bc0 	.word	0x20000bc0
    82fc:	000062e5 	.word	0x000062e5
    8300:	000075d9 	.word	0x000075d9
    8304:	00007615 	.word	0x00007615
    8308:	0000764d 	.word	0x0000764d
    830c:	000051f9 	.word	0x000051f9
    8310:	00005209 	.word	0x00005209
    8314:	00005221 	.word	0x00005221
    8318:	00005231 	.word	0x00005231
    831c:	0000611d 	.word	0x0000611d
    8320:	00005241 	.word	0x00005241
    8324:	00005251 	.word	0x00005251
    8328:	000061e9 	.word	0x000061e9
    832c:	00005559 	.word	0x00005559
    8330:	000052a1 	.word	0x000052a1
    8334:	00006469 	.word	0x00006469
    8338:	00007685 	.word	0x00007685
    833c:	000076bd 	.word	0x000076bd
    8340:	000076f5 	.word	0x000076f5
    8344:	00005301 	.word	0x00005301
    8348:	0000530b 	.word	0x0000530b
    834c:	00005315 	.word	0x00005315
    8350:	00005321 	.word	0x00005321
    8354:	0000532d 	.word	0x0000532d
    8358:	00005337 	.word	0x00005337
    835c:	0000533f 	.word	0x0000533f
    8360:	00005347 	.word	0x00005347
    8364:	00007755 	.word	0x00007755
    8368:	00005b59 	.word	0x00005b59
    836c:	00005371 	.word	0x00005371
    8370:	00006135 	.word	0x00006135
    8374:	00005351 	.word	0x00005351
    8378:	00005361 	.word	0x00005361

0000837c <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    837c:	4b2c      	ldr	r3, [pc, #176]	; (8430 <LORAREG_InitGetAttrFnPtrsJP+0xb4>)
    837e:	4a2d      	ldr	r2, [pc, #180]	; (8434 <LORAREG_InitGetAttrFnPtrsJP+0xb8>)
    8380:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8382:	4a2d      	ldr	r2, [pc, #180]	; (8438 <LORAREG_InitGetAttrFnPtrsJP+0xbc>)
    8384:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    8386:	4a2d      	ldr	r2, [pc, #180]	; (843c <LORAREG_InitGetAttrFnPtrsJP+0xc0>)
    8388:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    838a:	4a2d      	ldr	r2, [pc, #180]	; (8440 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    838c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    838e:	4a2d      	ldr	r2, [pc, #180]	; (8444 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    8390:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8392:	4a2d      	ldr	r2, [pc, #180]	; (8448 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    8394:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    8396:	4a2d      	ldr	r2, [pc, #180]	; (844c <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    8398:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    839a:	4a2d      	ldr	r2, [pc, #180]	; (8450 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    839c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    839e:	4a2d      	ldr	r2, [pc, #180]	; (8454 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    83a0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    83a2:	4a2d      	ldr	r2, [pc, #180]	; (8458 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    83a4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    83a6:	4a2d      	ldr	r2, [pc, #180]	; (845c <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    83a8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    83aa:	4a2d      	ldr	r2, [pc, #180]	; (8460 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    83ac:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    83ae:	4a2d      	ldr	r2, [pc, #180]	; (8464 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    83b0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    83b2:	4a2d      	ldr	r2, [pc, #180]	; (8468 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    83b4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    83b6:	4a2d      	ldr	r2, [pc, #180]	; (846c <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    83b8:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    83ba:	492d      	ldr	r1, [pc, #180]	; (8470 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    83bc:	2284      	movs	r2, #132	; 0x84
    83be:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    83c0:	492c      	ldr	r1, [pc, #176]	; (8474 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    83c2:	3204      	adds	r2, #4
    83c4:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    83c6:	492c      	ldr	r1, [pc, #176]	; (8478 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    83c8:	3204      	adds	r2, #4
    83ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    83cc:	492b      	ldr	r1, [pc, #172]	; (847c <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    83ce:	3208      	adds	r2, #8
    83d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    83d2:	492b      	ldr	r1, [pc, #172]	; (8480 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    83d4:	3204      	adds	r2, #4
    83d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    83d8:	492a      	ldr	r1, [pc, #168]	; (8484 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    83da:	3204      	adds	r2, #4
    83dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    83de:	492a      	ldr	r1, [pc, #168]	; (8488 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    83e0:	3204      	adds	r2, #4
    83e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    83e4:	4929      	ldr	r1, [pc, #164]	; (848c <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    83e6:	3204      	adds	r2, #4
    83e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    83ea:	4929      	ldr	r1, [pc, #164]	; (8490 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    83ec:	3204      	adds	r2, #4
    83ee:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    83f0:	4928      	ldr	r1, [pc, #160]	; (8494 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    83f2:	3204      	adds	r2, #4
    83f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    83f6:	4928      	ldr	r1, [pc, #160]	; (8498 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    83f8:	3204      	adds	r2, #4
    83fa:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    83fc:	4927      	ldr	r1, [pc, #156]	; (849c <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    83fe:	3204      	adds	r2, #4
    8400:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8402:	4927      	ldr	r1, [pc, #156]	; (84a0 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    8404:	3204      	adds	r2, #4
    8406:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8408:	4926      	ldr	r1, [pc, #152]	; (84a4 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    840a:	3204      	adds	r2, #4
    840c:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    840e:	4926      	ldr	r1, [pc, #152]	; (84a8 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    8410:	3204      	adds	r2, #4
    8412:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8414:	4925      	ldr	r1, [pc, #148]	; (84ac <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    8416:	3204      	adds	r2, #4
    8418:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    841a:	4925      	ldr	r1, [pc, #148]	; (84b0 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    841c:	3204      	adds	r2, #4
    841e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8420:	4924      	ldr	r1, [pc, #144]	; (84b4 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    8422:	3208      	adds	r2, #8
    8424:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8426:	4924      	ldr	r1, [pc, #144]	; (84b8 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    8428:	3204      	adds	r2, #4
    842a:	5099      	str	r1, [r3, r2]
}
    842c:	4770      	bx	lr
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	20000bc0 	.word	0x20000bc0
    8434:	00006421 	.word	0x00006421
    8438:	000075d9 	.word	0x000075d9
    843c:	00007615 	.word	0x00007615
    8440:	00007575 	.word	0x00007575
    8444:	000051f9 	.word	0x000051f9
    8448:	00005209 	.word	0x00005209
    844c:	00005221 	.word	0x00005221
    8450:	00005231 	.word	0x00005231
    8454:	0000611d 	.word	0x0000611d
    8458:	00005241 	.word	0x00005241
    845c:	00005251 	.word	0x00005251
    8460:	000061e9 	.word	0x000061e9
    8464:	00005559 	.word	0x00005559
    8468:	000052a1 	.word	0x000052a1
    846c:	0000632d 	.word	0x0000632d
    8470:	00007685 	.word	0x00007685
    8474:	000076bd 	.word	0x000076bd
    8478:	000076f5 	.word	0x000076f5
    847c:	00005301 	.word	0x00005301
    8480:	0000530b 	.word	0x0000530b
    8484:	00005315 	.word	0x00005315
    8488:	00005321 	.word	0x00005321
    848c:	0000532d 	.word	0x0000532d
    8490:	00005337 	.word	0x00005337
    8494:	0000533f 	.word	0x0000533f
    8498:	00005347 	.word	0x00005347
    849c:	00007755 	.word	0x00007755
    84a0:	00005b59 	.word	0x00005b59
    84a4:	00005371 	.word	0x00005371
    84a8:	00005381 	.word	0x00005381
    84ac:	000064f1 	.word	0x000064f1
    84b0:	00006135 	.word	0x00006135
    84b4:	00005351 	.word	0x00005351
    84b8:	00005361 	.word	0x00005361

000084bc <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    84bc:	4b2c      	ldr	r3, [pc, #176]	; (8570 <LORAREG_InitGetAttrFnPtrsKR+0xb4>)
    84be:	4a2d      	ldr	r2, [pc, #180]	; (8574 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    84c0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    84c2:	4a2d      	ldr	r2, [pc, #180]	; (8578 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    84c4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    84c6:	4a2d      	ldr	r2, [pc, #180]	; (857c <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    84c8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    84ca:	4a2d      	ldr	r2, [pc, #180]	; (8580 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    84cc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    84ce:	4a2d      	ldr	r2, [pc, #180]	; (8584 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    84d0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    84d2:	4a2d      	ldr	r2, [pc, #180]	; (8588 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    84d4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    84d6:	4a2d      	ldr	r2, [pc, #180]	; (858c <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    84d8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    84da:	4a2d      	ldr	r2, [pc, #180]	; (8590 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    84dc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    84de:	4a2d      	ldr	r2, [pc, #180]	; (8594 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    84e0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    84e2:	4a2d      	ldr	r2, [pc, #180]	; (8598 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    84e4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    84e6:	4a2d      	ldr	r2, [pc, #180]	; (859c <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    84e8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    84ea:	4a2d      	ldr	r2, [pc, #180]	; (85a0 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    84ec:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    84ee:	4a2d      	ldr	r2, [pc, #180]	; (85a4 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    84f0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    84f2:	4a2d      	ldr	r2, [pc, #180]	; (85a8 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    84f4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    84f6:	4a2d      	ldr	r2, [pc, #180]	; (85ac <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    84f8:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    84fa:	492d      	ldr	r1, [pc, #180]	; (85b0 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    84fc:	2284      	movs	r2, #132	; 0x84
    84fe:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8500:	492c      	ldr	r1, [pc, #176]	; (85b4 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    8502:	3204      	adds	r2, #4
    8504:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8506:	492c      	ldr	r1, [pc, #176]	; (85b8 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    8508:	3204      	adds	r2, #4
    850a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    850c:	492b      	ldr	r1, [pc, #172]	; (85bc <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    850e:	3208      	adds	r2, #8
    8510:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8512:	492b      	ldr	r1, [pc, #172]	; (85c0 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    8514:	3204      	adds	r2, #4
    8516:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8518:	492a      	ldr	r1, [pc, #168]	; (85c4 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    851a:	3204      	adds	r2, #4
    851c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    851e:	492a      	ldr	r1, [pc, #168]	; (85c8 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    8520:	3204      	adds	r2, #4
    8522:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8524:	4929      	ldr	r1, [pc, #164]	; (85cc <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    8526:	3204      	adds	r2, #4
    8528:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    852a:	4929      	ldr	r1, [pc, #164]	; (85d0 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    852c:	3204      	adds	r2, #4
    852e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8530:	4928      	ldr	r1, [pc, #160]	; (85d4 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    8532:	3204      	adds	r2, #4
    8534:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8536:	4928      	ldr	r1, [pc, #160]	; (85d8 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    8538:	3204      	adds	r2, #4
    853a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    853c:	4927      	ldr	r1, [pc, #156]	; (85dc <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    853e:	3204      	adds	r2, #4
    8540:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8542:	4927      	ldr	r1, [pc, #156]	; (85e0 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    8544:	3204      	adds	r2, #4
    8546:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8548:	4926      	ldr	r1, [pc, #152]	; (85e4 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    854a:	3204      	adds	r2, #4
    854c:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    854e:	4926      	ldr	r1, [pc, #152]	; (85e8 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    8550:	3204      	adds	r2, #4
    8552:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8554:	4925      	ldr	r1, [pc, #148]	; (85ec <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    8556:	3204      	adds	r2, #4
    8558:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    855a:	4925      	ldr	r1, [pc, #148]	; (85f0 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    855c:	3204      	adds	r2, #4
    855e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8560:	4924      	ldr	r1, [pc, #144]	; (85f4 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    8562:	3208      	adds	r2, #8
    8564:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8566:	4924      	ldr	r1, [pc, #144]	; (85f8 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    8568:	3204      	adds	r2, #4
    856a:	5099      	str	r1, [r3, r2]
}
    856c:	4770      	bx	lr
    856e:	46c0      	nop			; (mov r8, r8)
    8570:	20000bc0 	.word	0x20000bc0
    8574:	000062e5 	.word	0x000062e5
    8578:	000075d9 	.word	0x000075d9
    857c:	00007615 	.word	0x00007615
    8580:	0000764d 	.word	0x0000764d
    8584:	000051f9 	.word	0x000051f9
    8588:	00005209 	.word	0x00005209
    858c:	00005221 	.word	0x00005221
    8590:	00005231 	.word	0x00005231
    8594:	0000611d 	.word	0x0000611d
    8598:	00005241 	.word	0x00005241
    859c:	00005251 	.word	0x00005251
    85a0:	000061e9 	.word	0x000061e9
    85a4:	00005559 	.word	0x00005559
    85a8:	000052a1 	.word	0x000052a1
    85ac:	0000617d 	.word	0x0000617d
    85b0:	00007685 	.word	0x00007685
    85b4:	000076bd 	.word	0x000076bd
    85b8:	000076f5 	.word	0x000076f5
    85bc:	00005301 	.word	0x00005301
    85c0:	0000530b 	.word	0x0000530b
    85c4:	00005315 	.word	0x00005315
    85c8:	00005321 	.word	0x00005321
    85cc:	0000532d 	.word	0x0000532d
    85d0:	00005337 	.word	0x00005337
    85d4:	0000533f 	.word	0x0000533f
    85d8:	00005347 	.word	0x00005347
    85dc:	00007755 	.word	0x00007755
    85e0:	00005b59 	.word	0x00005b59
    85e4:	00005371 	.word	0x00005371
    85e8:	00005381 	.word	0x00005381
    85ec:	000064f1 	.word	0x000064f1
    85f0:	00006135 	.word	0x00006135
    85f4:	00005351 	.word	0x00005351
    85f8:	00005361 	.word	0x00005361

000085fc <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    85fc:	4b0d      	ldr	r3, [pc, #52]	; (8634 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    85fe:	4a0e      	ldr	r2, [pc, #56]	; (8638 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    8600:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8602:	4a0e      	ldr	r2, [pc, #56]	; (863c <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    8604:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    8606:	4a0e      	ldr	r2, [pc, #56]	; (8640 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    8608:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    860a:	490e      	ldr	r1, [pc, #56]	; (8644 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    860c:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    860e:	490e      	ldr	r1, [pc, #56]	; (8648 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    8610:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8612:	490e      	ldr	r1, [pc, #56]	; (864c <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    8614:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    8616:	490e      	ldr	r1, [pc, #56]	; (8650 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    8618:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    861a:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    861c:	4a0d      	ldr	r2, [pc, #52]	; (8654 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    861e:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8620:	4a0d      	ldr	r2, [pc, #52]	; (8658 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    8622:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8624:	4a0d      	ldr	r2, [pc, #52]	; (865c <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    8626:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    8628:	4a0d      	ldr	r2, [pc, #52]	; (8660 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    862a:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    862c:	490d      	ldr	r1, [pc, #52]	; (8664 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    862e:	22d8      	movs	r2, #216	; 0xd8
    8630:	5099      	str	r1, [r3, r2]
}
    8632:	4770      	bx	lr
    8634:	20000d78 	.word	0x20000d78
    8638:	00005729 	.word	0x00005729
    863c:	00007ae9 	.word	0x00007ae9
    8640:	00005481 	.word	0x00005481
    8644:	00005441 	.word	0x00005441
    8648:	000056cd 	.word	0x000056cd
    864c:	00007849 	.word	0x00007849
    8650:	000054cd 	.word	0x000054cd
    8654:	0000575d 	.word	0x0000575d
    8658:	000055f9 	.word	0x000055f9
    865c:	000055cd 	.word	0x000055cd
    8660:	000055e1 	.word	0x000055e1
    8664:	0000772d 	.word	0x0000772d

00008668 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    8668:	4b0d      	ldr	r3, [pc, #52]	; (86a0 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    866a:	4a0e      	ldr	r2, [pc, #56]	; (86a4 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    866c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    866e:	4a0e      	ldr	r2, [pc, #56]	; (86a8 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    8670:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8672:	4a0e      	ldr	r2, [pc, #56]	; (86ac <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    8674:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    8676:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8678:	490d      	ldr	r1, [pc, #52]	; (86b0 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    867a:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    867c:	490d      	ldr	r1, [pc, #52]	; (86b4 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    867e:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8680:	490d      	ldr	r1, [pc, #52]	; (86b8 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    8682:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8684:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8686:	4a0d      	ldr	r2, [pc, #52]	; (86bc <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    8688:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    868a:	4a0d      	ldr	r2, [pc, #52]	; (86c0 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    868c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    868e:	4a0d      	ldr	r2, [pc, #52]	; (86c4 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    8690:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8692:	4a0d      	ldr	r2, [pc, #52]	; (86c8 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    8694:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8696:	490d      	ldr	r1, [pc, #52]	; (86cc <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    8698:	22d8      	movs	r2, #216	; 0xd8
    869a:	5099      	str	r1, [r3, r2]
}
    869c:	4770      	bx	lr
    869e:	46c0      	nop			; (mov r8, r8)
    86a0:	20000d78 	.word	0x20000d78
    86a4:	000057e5 	.word	0x000057e5
    86a8:	000065c1 	.word	0x000065c1
    86ac:	000056b9 	.word	0x000056b9
    86b0:	000056cd 	.word	0x000056cd
    86b4:	00007491 	.word	0x00007491
    86b8:	000054e5 	.word	0x000054e5
    86bc:	0000575d 	.word	0x0000575d
    86c0:	000055fd 	.word	0x000055fd
    86c4:	00005651 	.word	0x00005651
    86c8:	000055e1 	.word	0x000055e1
    86cc:	00005665 	.word	0x00005665

000086d0 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    86d0:	4b0d      	ldr	r3, [pc, #52]	; (8708 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    86d2:	4a0e      	ldr	r2, [pc, #56]	; (870c <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    86d4:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    86d6:	4a0e      	ldr	r2, [pc, #56]	; (8710 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    86d8:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    86da:	4a0e      	ldr	r2, [pc, #56]	; (8714 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    86dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    86de:	490e      	ldr	r1, [pc, #56]	; (8718 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    86e0:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    86e2:	490e      	ldr	r1, [pc, #56]	; (871c <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    86e4:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    86e6:	490e      	ldr	r1, [pc, #56]	; (8720 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    86e8:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    86ea:	490e      	ldr	r1, [pc, #56]	; (8724 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    86ec:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    86ee:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    86f0:	4a0d      	ldr	r2, [pc, #52]	; (8728 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    86f2:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    86f4:	4a0d      	ldr	r2, [pc, #52]	; (872c <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    86f6:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    86f8:	4a0d      	ldr	r2, [pc, #52]	; (8730 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    86fa:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    86fc:	4a0d      	ldr	r2, [pc, #52]	; (8734 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    86fe:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8700:	490d      	ldr	r1, [pc, #52]	; (8738 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    8702:	22d8      	movs	r2, #216	; 0xd8
    8704:	5099      	str	r1, [r3, r2]
}
    8706:	4770      	bx	lr
    8708:	20000d78 	.word	0x20000d78
    870c:	00005801 	.word	0x00005801
    8710:	000065c1 	.word	0x000065c1
    8714:	000054a5 	.word	0x000054a5
    8718:	00005459 	.word	0x00005459
    871c:	000056cd 	.word	0x000056cd
    8720:	00007491 	.word	0x00007491
    8724:	000054e5 	.word	0x000054e5
    8728:	0000575d 	.word	0x0000575d
    872c:	000055fd 	.word	0x000055fd
    8730:	00005651 	.word	0x00005651
    8734:	000055e1 	.word	0x000055e1
    8738:	00005665 	.word	0x00005665

0000873c <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    873c:	4b0d      	ldr	r3, [pc, #52]	; (8774 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    873e:	4a0e      	ldr	r2, [pc, #56]	; (8778 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    8740:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8742:	4a0e      	ldr	r2, [pc, #56]	; (877c <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    8744:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    8746:	4a0e      	ldr	r2, [pc, #56]	; (8780 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    8748:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    874a:	490e      	ldr	r1, [pc, #56]	; (8784 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    874c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    874e:	490e      	ldr	r1, [pc, #56]	; (8788 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    8750:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8752:	490e      	ldr	r1, [pc, #56]	; (878c <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    8754:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    8756:	490e      	ldr	r1, [pc, #56]	; (8790 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    8758:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    875a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    875c:	4a0d      	ldr	r2, [pc, #52]	; (8794 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    875e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8760:	4a0d      	ldr	r2, [pc, #52]	; (8798 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    8762:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8764:	4a0d      	ldr	r2, [pc, #52]	; (879c <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    8766:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8768:	4a0d      	ldr	r2, [pc, #52]	; (87a0 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    876a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    876c:	490d      	ldr	r1, [pc, #52]	; (87a4 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    876e:	22d8      	movs	r2, #216	; 0xd8
    8770:	5099      	str	r1, [r3, r2]
}
    8772:	4770      	bx	lr
    8774:	20000d78 	.word	0x20000d78
    8778:	00005729 	.word	0x00005729
    877c:	00007ae9 	.word	0x00007ae9
    8780:	00005481 	.word	0x00005481
    8784:	00005441 	.word	0x00005441
    8788:	000056cd 	.word	0x000056cd
    878c:	00007849 	.word	0x00007849
    8790:	000054cd 	.word	0x000054cd
    8794:	0000575d 	.word	0x0000575d
    8798:	000055f9 	.word	0x000055f9
    879c:	000055cd 	.word	0x000055cd
    87a0:	000055e1 	.word	0x000055e1
    87a4:	0000772d 	.word	0x0000772d

000087a8 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    87a8:	4b0d      	ldr	r3, [pc, #52]	; (87e0 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    87aa:	4a0e      	ldr	r2, [pc, #56]	; (87e4 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    87ac:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    87ae:	4a0e      	ldr	r2, [pc, #56]	; (87e8 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    87b0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    87b2:	4a0e      	ldr	r2, [pc, #56]	; (87ec <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    87b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    87b6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    87b8:	490d      	ldr	r1, [pc, #52]	; (87f0 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    87ba:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    87bc:	490d      	ldr	r1, [pc, #52]	; (87f4 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    87be:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    87c0:	490d      	ldr	r1, [pc, #52]	; (87f8 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    87c2:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    87c4:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    87c6:	4a0d      	ldr	r2, [pc, #52]	; (87fc <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    87c8:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    87ca:	4a0d      	ldr	r2, [pc, #52]	; (8800 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    87cc:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    87ce:	4a0d      	ldr	r2, [pc, #52]	; (8804 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    87d0:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    87d2:	4a0d      	ldr	r2, [pc, #52]	; (8808 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    87d4:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    87d6:	490d      	ldr	r1, [pc, #52]	; (880c <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    87d8:	22d8      	movs	r2, #216	; 0xd8
    87da:	5099      	str	r1, [r3, r2]
}
    87dc:	4770      	bx	lr
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	20000d78 	.word	0x20000d78
    87e4:	000065e5 	.word	0x000065e5
    87e8:	000065c1 	.word	0x000065c1
    87ec:	000056b9 	.word	0x000056b9
    87f0:	000056cd 	.word	0x000056cd
    87f4:	00007491 	.word	0x00007491
    87f8:	000054e5 	.word	0x000054e5
    87fc:	0000575d 	.word	0x0000575d
    8800:	000055fd 	.word	0x000055fd
    8804:	00005651 	.word	0x00005651
    8808:	000055e1 	.word	0x000055e1
    880c:	00005665 	.word	0x00005665

00008810 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    8810:	4b0d      	ldr	r3, [pc, #52]	; (8848 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    8812:	4a0e      	ldr	r2, [pc, #56]	; (884c <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    8814:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8816:	4a0e      	ldr	r2, [pc, #56]	; (8850 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    8818:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    881a:	4a0e      	ldr	r2, [pc, #56]	; (8854 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    881c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    881e:	490e      	ldr	r1, [pc, #56]	; (8858 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    8820:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8822:	490e      	ldr	r1, [pc, #56]	; (885c <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    8824:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8826:	490e      	ldr	r1, [pc, #56]	; (8860 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    8828:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    882a:	490e      	ldr	r1, [pc, #56]	; (8864 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    882c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    882e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8830:	4a0d      	ldr	r2, [pc, #52]	; (8868 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    8832:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8834:	4a0d      	ldr	r2, [pc, #52]	; (886c <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    8836:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8838:	4a0d      	ldr	r2, [pc, #52]	; (8870 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    883a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    883c:	4a0d      	ldr	r2, [pc, #52]	; (8874 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    883e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8840:	490d      	ldr	r1, [pc, #52]	; (8878 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    8842:	22d8      	movs	r2, #216	; 0xd8
    8844:	5099      	str	r1, [r3, r2]
}
    8846:	4770      	bx	lr
    8848:	20000d78 	.word	0x20000d78
    884c:	00006615 	.word	0x00006615
    8850:	000065c1 	.word	0x000065c1
    8854:	000054a5 	.word	0x000054a5
    8858:	00005459 	.word	0x00005459
    885c:	000056cd 	.word	0x000056cd
    8860:	00007491 	.word	0x00007491
    8864:	000054e5 	.word	0x000054e5
    8868:	0000575d 	.word	0x0000575d
    886c:	000055fd 	.word	0x000055fd
    8870:	00005651 	.word	0x00005651
    8874:	000055e1 	.word	0x000055e1
    8878:	00005665 	.word	0x00005665

0000887c <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    887c:	4b0d      	ldr	r3, [pc, #52]	; (88b4 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    887e:	4a0e      	ldr	r2, [pc, #56]	; (88b8 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    8880:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8882:	4a0e      	ldr	r2, [pc, #56]	; (88bc <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    8884:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8886:	4a0e      	ldr	r2, [pc, #56]	; (88c0 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    8888:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    888a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    888c:	490d      	ldr	r1, [pc, #52]	; (88c4 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    888e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8890:	490d      	ldr	r1, [pc, #52]	; (88c8 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    8892:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8894:	490d      	ldr	r1, [pc, #52]	; (88cc <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    8896:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8898:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    889a:	4a0d      	ldr	r2, [pc, #52]	; (88d0 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    889c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    889e:	4a0d      	ldr	r2, [pc, #52]	; (88d4 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    88a0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    88a2:	4a0d      	ldr	r2, [pc, #52]	; (88d8 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    88a4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    88a6:	4a0d      	ldr	r2, [pc, #52]	; (88dc <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    88a8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    88aa:	490d      	ldr	r1, [pc, #52]	; (88e0 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    88ac:	22d8      	movs	r2, #216	; 0xd8
    88ae:	5099      	str	r1, [r3, r2]
}
    88b0:	4770      	bx	lr
    88b2:	46c0      	nop			; (mov r8, r8)
    88b4:	20000d78 	.word	0x20000d78
    88b8:	00006645 	.word	0x00006645
    88bc:	000065c1 	.word	0x000065c1
    88c0:	000056b9 	.word	0x000056b9
    88c4:	000056cd 	.word	0x000056cd
    88c8:	00007491 	.word	0x00007491
    88cc:	000054e5 	.word	0x000054e5
    88d0:	0000575d 	.word	0x0000575d
    88d4:	000055fd 	.word	0x000055fd
    88d8:	00005651 	.word	0x00005651
    88dc:	000055e1 	.word	0x000055e1
    88e0:	00005665 	.word	0x00005665

000088e4 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    88e4:	4b03      	ldr	r3, [pc, #12]	; (88f4 <LORAREG_InitSetAttrFnPtrsNA+0x10>)
    88e6:	4a04      	ldr	r2, [pc, #16]	; (88f8 <LORAREG_InitSetAttrFnPtrsNA+0x14>)
    88e8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    88ea:	4a04      	ldr	r2, [pc, #16]	; (88fc <LORAREG_InitSetAttrFnPtrsNA+0x18>)
    88ec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    88ee:	4a04      	ldr	r2, [pc, #16]	; (8900 <LORAREG_InitSetAttrFnPtrsNA+0x1c>)
    88f0:	671a      	str	r2, [r3, #112]	; 0x70
}
    88f2:	4770      	bx	lr
    88f4:	20000c9c 	.word	0x20000c9c
    88f8:	000078b1 	.word	0x000078b1
    88fc:	00007825 	.word	0x00007825
    8900:	0000668d 	.word	0x0000668d

00008904 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8904:	4b08      	ldr	r3, [pc, #32]	; (8928 <LORAREG_InitSetAttrFnPtrsEU+0x24>)
    8906:	4a09      	ldr	r2, [pc, #36]	; (892c <LORAREG_InitSetAttrFnPtrsEU+0x28>)
    8908:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    890a:	4a09      	ldr	r2, [pc, #36]	; (8930 <LORAREG_InitSetAttrFnPtrsEU+0x2c>)
    890c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    890e:	4a09      	ldr	r2, [pc, #36]	; (8934 <LORAREG_InitSetAttrFnPtrsEU+0x30>)
    8910:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8912:	4a09      	ldr	r2, [pc, #36]	; (8938 <LORAREG_InitSetAttrFnPtrsEU+0x34>)
    8914:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    8916:	4a09      	ldr	r2, [pc, #36]	; (893c <LORAREG_InitSetAttrFnPtrsEU+0x38>)
    8918:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    891a:	4a09      	ldr	r2, [pc, #36]	; (8940 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    891c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    891e:	4909      	ldr	r1, [pc, #36]	; (8944 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    8920:	22c8      	movs	r2, #200	; 0xc8
    8922:	5099      	str	r1, [r3, r2]
}
    8924:	4770      	bx	lr
    8926:	46c0      	nop			; (mov r8, r8)
    8928:	20000c9c 	.word	0x20000c9c
    892c:	000074b9 	.word	0x000074b9
    8930:	00005d39 	.word	0x00005d39
    8934:	000069d9 	.word	0x000069d9
    8938:	00006c15 	.word	0x00006c15
    893c:	000068b9 	.word	0x000068b9
    8940:	000067c5 	.word	0x000067c5
    8944:	00006725 	.word	0x00006725

00008948 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8948:	4b09      	ldr	r3, [pc, #36]	; (8970 <LORAREG_InitSetAttrFnPtrsAS+0x28>)
    894a:	4a0a      	ldr	r2, [pc, #40]	; (8974 <LORAREG_InitSetAttrFnPtrsAS+0x2c>)
    894c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    894e:	4a0a      	ldr	r2, [pc, #40]	; (8978 <LORAREG_InitSetAttrFnPtrsAS+0x30>)
    8950:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8952:	4a0a      	ldr	r2, [pc, #40]	; (897c <LORAREG_InitSetAttrFnPtrsAS+0x34>)
    8954:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8956:	490a      	ldr	r1, [pc, #40]	; (8980 <LORAREG_InitSetAttrFnPtrsAS+0x38>)
    8958:	22c8      	movs	r2, #200	; 0xc8
    895a:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    895c:	4a09      	ldr	r2, [pc, #36]	; (8984 <LORAREG_InitSetAttrFnPtrsAS+0x3c>)
    895e:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8960:	4909      	ldr	r1, [pc, #36]	; (8988 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    8962:	22cc      	movs	r2, #204	; 0xcc
    8964:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8966:	4a09      	ldr	r2, [pc, #36]	; (898c <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    8968:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    896a:	4a09      	ldr	r2, [pc, #36]	; (8990 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    896c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    896e:	4770      	bx	lr
    8970:	20000c9c 	.word	0x20000c9c
    8974:	000074b9 	.word	0x000074b9
    8978:	00005eed 	.word	0x00005eed
    897c:	000068b9 	.word	0x000068b9
    8980:	00006725 	.word	0x00006725
    8984:	000067c5 	.word	0x000067c5
    8988:	00005891 	.word	0x00005891
    898c:	000069d9 	.word	0x000069d9
    8990:	00006c15 	.word	0x00006c15

00008994 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8994:	4b03      	ldr	r3, [pc, #12]	; (89a4 <LORAREG_InitSetAttrFnPtrsAU+0x10>)
    8996:	4a04      	ldr	r2, [pc, #16]	; (89a8 <LORAREG_InitSetAttrFnPtrsAU+0x14>)
    8998:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    899a:	4a04      	ldr	r2, [pc, #16]	; (89ac <LORAREG_InitSetAttrFnPtrsAU+0x18>)
    899c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    899e:	4a04      	ldr	r2, [pc, #16]	; (89b0 <LORAREG_InitSetAttrFnPtrsAU+0x1c>)
    89a0:	671a      	str	r2, [r3, #112]	; 0x70
}
    89a2:	4770      	bx	lr
    89a4:	20000c9c 	.word	0x20000c9c
    89a8:	000078b1 	.word	0x000078b1
    89ac:	00007825 	.word	0x00007825
    89b0:	0000668d 	.word	0x0000668d

000089b4 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    89b4:	4b07      	ldr	r3, [pc, #28]	; (89d4 <LORAREG_InitSetAttrFnPtrsIN+0x20>)
    89b6:	4a08      	ldr	r2, [pc, #32]	; (89d8 <LORAREG_InitSetAttrFnPtrsIN+0x24>)
    89b8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    89ba:	4a08      	ldr	r2, [pc, #32]	; (89dc <LORAREG_InitSetAttrFnPtrsIN+0x28>)
    89bc:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    89be:	4a08      	ldr	r2, [pc, #32]	; (89e0 <LORAREG_InitSetAttrFnPtrsIN+0x2c>)
    89c0:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    89c2:	4a08      	ldr	r2, [pc, #32]	; (89e4 <LORAREG_InitSetAttrFnPtrsIN+0x30>)
    89c4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    89c6:	4908      	ldr	r1, [pc, #32]	; (89e8 <LORAREG_InitSetAttrFnPtrsIN+0x34>)
    89c8:	22c8      	movs	r2, #200	; 0xc8
    89ca:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    89cc:	4907      	ldr	r1, [pc, #28]	; (89ec <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    89ce:	3204      	adds	r2, #4
    89d0:	5099      	str	r1, [r3, r2]
}
    89d2:	4770      	bx	lr
    89d4:	20000c9c 	.word	0x20000c9c
    89d8:	000074b9 	.word	0x000074b9
    89dc:	00005d39 	.word	0x00005d39
    89e0:	000068b9 	.word	0x000068b9
    89e4:	000067c5 	.word	0x000067c5
    89e8:	00006725 	.word	0x00006725
    89ec:	00005891 	.word	0x00005891

000089f0 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    89f0:	4b0a      	ldr	r3, [pc, #40]	; (8a1c <LORAREG_InitSetAttrFnPtrsJP+0x2c>)
    89f2:	4a0b      	ldr	r2, [pc, #44]	; (8a20 <LORAREG_InitSetAttrFnPtrsJP+0x30>)
    89f4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    89f6:	4a0b      	ldr	r2, [pc, #44]	; (8a24 <LORAREG_InitSetAttrFnPtrsJP+0x34>)
    89f8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    89fa:	490b      	ldr	r1, [pc, #44]	; (8a28 <LORAREG_InitSetAttrFnPtrsJP+0x38>)
    89fc:	2280      	movs	r2, #128	; 0x80
    89fe:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8a00:	4a0a      	ldr	r2, [pc, #40]	; (8a2c <LORAREG_InitSetAttrFnPtrsJP+0x3c>)
    8a02:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8a04:	490a      	ldr	r1, [pc, #40]	; (8a30 <LORAREG_InitSetAttrFnPtrsJP+0x40>)
    8a06:	22c8      	movs	r2, #200	; 0xc8
    8a08:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8a0a:	4a0a      	ldr	r2, [pc, #40]	; (8a34 <LORAREG_InitSetAttrFnPtrsJP+0x44>)
    8a0c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8a0e:	490a      	ldr	r1, [pc, #40]	; (8a38 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    8a10:	22cc      	movs	r2, #204	; 0xcc
    8a12:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = NULL;
    8a14:	2200      	movs	r2, #0
    8a16:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = NULL;
    8a18:	67da      	str	r2, [r3, #124]	; 0x7c
}
    8a1a:	4770      	bx	lr
    8a1c:	20000c9c 	.word	0x20000c9c
    8a20:	000074b9 	.word	0x000074b9
    8a24:	00005eed 	.word	0x00005eed
    8a28:	00007159 	.word	0x00007159
    8a2c:	000068b9 	.word	0x000068b9
    8a30:	00006725 	.word	0x00006725
    8a34:	000067c5 	.word	0x000067c5
    8a38:	00005891 	.word	0x00005891

00008a3c <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8a3c:	4b09      	ldr	r3, [pc, #36]	; (8a64 <LORAREG_InitSetAttrFnPtrsKR+0x28>)
    8a3e:	4a0a      	ldr	r2, [pc, #40]	; (8a68 <LORAREG_InitSetAttrFnPtrsKR+0x2c>)
    8a40:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8a42:	4a0a      	ldr	r2, [pc, #40]	; (8a6c <LORAREG_InitSetAttrFnPtrsKR+0x30>)
    8a44:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    8a46:	490a      	ldr	r1, [pc, #40]	; (8a70 <LORAREG_InitSetAttrFnPtrsKR+0x34>)
    8a48:	2280      	movs	r2, #128	; 0x80
    8a4a:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8a4c:	4a09      	ldr	r2, [pc, #36]	; (8a74 <LORAREG_InitSetAttrFnPtrsKR+0x38>)
    8a4e:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8a50:	4909      	ldr	r1, [pc, #36]	; (8a78 <LORAREG_InitSetAttrFnPtrsKR+0x3c>)
    8a52:	22c8      	movs	r2, #200	; 0xc8
    8a54:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8a56:	4a09      	ldr	r2, [pc, #36]	; (8a7c <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    8a58:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8a5a:	4909      	ldr	r1, [pc, #36]	; (8a80 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    8a5c:	22cc      	movs	r2, #204	; 0xcc
    8a5e:	5099      	str	r1, [r3, r2]
}
    8a60:	4770      	bx	lr
    8a62:	46c0      	nop			; (mov r8, r8)
    8a64:	20000c9c 	.word	0x20000c9c
    8a68:	000074b9 	.word	0x000074b9
    8a6c:	00005eed 	.word	0x00005eed
    8a70:	00007159 	.word	0x00007159
    8a74:	000068b9 	.word	0x000068b9
    8a78:	00006725 	.word	0x00006725
    8a7c:	000067c5 	.word	0x000067c5
    8a80:	00005891 	.word	0x00005891

00008a84 <LORAREG_GetAttr>:
{
    8a84:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8a86:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8a88:	2836      	cmp	r0, #54	; 0x36
    8a8a:	d901      	bls.n	8a90 <LORAREG_GetAttr+0xc>
}
    8a8c:	0018      	movs	r0, r3
    8a8e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    8a90:	0084      	lsls	r4, r0, #2
    8a92:	4b02      	ldr	r3, [pc, #8]	; (8a9c <LORAREG_GetAttr+0x18>)
    8a94:	58e3      	ldr	r3, [r4, r3]
    8a96:	4798      	blx	r3
    8a98:	0003      	movs	r3, r0
    8a9a:	e7f7      	b.n	8a8c <LORAREG_GetAttr+0x8>
    8a9c:	20000bc0 	.word	0x20000bc0

00008aa0 <LORAREG_ValidateAttr>:
{
    8aa0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8aa2:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8aa4:	2836      	cmp	r0, #54	; 0x36
    8aa6:	d901      	bls.n	8aac <LORAREG_ValidateAttr+0xc>
}
    8aa8:	0018      	movs	r0, r3
    8aaa:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    8aac:	0082      	lsls	r2, r0, #2
    8aae:	4b02      	ldr	r3, [pc, #8]	; (8ab8 <LORAREG_ValidateAttr+0x18>)
    8ab0:	58d3      	ldr	r3, [r2, r3]
    8ab2:	4798      	blx	r3
    8ab4:	0003      	movs	r3, r0
    8ab6:	e7f7      	b.n	8aa8 <LORAREG_ValidateAttr+0x8>
    8ab8:	20000d78 	.word	0x20000d78

00008abc <LORAREG_SetAttr>:
{
    8abc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8abe:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8ac0:	2836      	cmp	r0, #54	; 0x36
    8ac2:	d901      	bls.n	8ac8 <LORAREG_SetAttr+0xc>
}
    8ac4:	0018      	movs	r0, r3
    8ac6:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    8ac8:	0082      	lsls	r2, r0, #2
    8aca:	4b02      	ldr	r3, [pc, #8]	; (8ad4 <LORAREG_SetAttr+0x18>)
    8acc:	58d3      	ldr	r3, [r2, r3]
    8ace:	4798      	blx	r3
    8ad0:	0003      	movs	r3, r0
    8ad2:	e7f7      	b.n	8ac4 <LORAREG_SetAttr+0x8>
    8ad4:	20000c9c 	.word	0x20000c9c

00008ad8 <CreateAllRegSoftwareTimers>:
{
    8ad8:	b510      	push	{r4, lr}
    StackRetStatus_t status = SwTimerCreate(&regTimerId[0]);    
    8ada:	4805      	ldr	r0, [pc, #20]	; (8af0 <CreateAllRegSoftwareTimers+0x18>)
    8adc:	4b05      	ldr	r3, [pc, #20]	; (8af4 <CreateAllRegSoftwareTimers+0x1c>)
    8ade:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    8ae0:	2808      	cmp	r0, #8
    8ae2:	d000      	beq.n	8ae6 <CreateAllRegSoftwareTimers+0xe>
}
    8ae4:	bd10      	pop	{r4, pc}
        status = SwTimerCreate(&regTimerId[1]);
    8ae6:	4804      	ldr	r0, [pc, #16]	; (8af8 <CreateAllRegSoftwareTimers+0x20>)
    8ae8:	4b02      	ldr	r3, [pc, #8]	; (8af4 <CreateAllRegSoftwareTimers+0x1c>)
    8aea:	4798      	blx	r3
    8aec:	e7fa      	b.n	8ae4 <CreateAllRegSoftwareTimers+0xc>
    8aee:	46c0      	nop			; (mov r8, r8)
    8af0:	200013dc 	.word	0x200013dc
    8af4:	00009eb9 	.word	0x00009eb9
    8af8:	200013dd 	.word	0x200013dd

00008afc <StopAllRegSoftwareTimers>:
{
    8afc:	b570      	push	{r4, r5, r6, lr}
	SwTimerStop(regTimerId[0]);
    8afe:	4d03      	ldr	r5, [pc, #12]	; (8b0c <StopAllRegSoftwareTimers+0x10>)
    8b00:	7828      	ldrb	r0, [r5, #0]
    8b02:	4c03      	ldr	r4, [pc, #12]	; (8b10 <StopAllRegSoftwareTimers+0x14>)
    8b04:	47a0      	blx	r4
	SwTimerStop(regTimerId[1]);
    8b06:	7868      	ldrb	r0, [r5, #1]
    8b08:	47a0      	blx	r4
}
    8b0a:	bd70      	pop	{r4, r5, r6, pc}
    8b0c:	200013dc 	.word	0x200013dc
    8b10:	0000a1f1 	.word	0x0000a1f1

00008b14 <LORAREG_Init>:
{	
    8b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b16:	0007      	movs	r7, r0
	if(!initialized)
    8b18:	4b24      	ldr	r3, [pc, #144]	; (8bac <LORAREG_Init+0x98>)
    8b1a:	781b      	ldrb	r3, [r3, #0]
    8b1c:	2b00      	cmp	r3, #0
    8b1e:	d109      	bne.n	8b34 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    8b20:	4b23      	ldr	r3, [pc, #140]	; (8bb0 <LORAREG_Init+0x9c>)
    8b22:	4798      	blx	r3
    8b24:	2808      	cmp	r0, #8
    8b26:	d001      	beq.n	8b2c <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    8b28:	2014      	movs	r0, #20
    8b2a:	e006      	b.n	8b3a <LORAREG_Init+0x26>
			initialized = true;
    8b2c:	2201      	movs	r2, #1
    8b2e:	4b1f      	ldr	r3, [pc, #124]	; (8bac <LORAREG_Init+0x98>)
    8b30:	701a      	strb	r2, [r3, #0]
    8b32:	e002      	b.n	8b3a <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    8b34:	4b1f      	ldr	r3, [pc, #124]	; (8bb4 <LORAREG_Init+0xa0>)
    8b36:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8b38:	2008      	movs	r0, #8
    8b3a:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    8b3c:	4e1e      	ldr	r6, [pc, #120]	; (8bb8 <LORAREG_Init+0xa4>)
    8b3e:	4d1f      	ldr	r5, [pc, #124]	; (8bbc <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    8b40:	4c1f      	ldr	r4, [pc, #124]	; (8bc0 <LORAREG_Init+0xac>)
    8b42:	4a20      	ldr	r2, [pc, #128]	; (8bc4 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    8b44:	4920      	ldr	r1, [pc, #128]	; (8bc8 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    8b46:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    8b48:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    8b4a:	505a      	str	r2, [r3, r1]
    8b4c:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    8b4e:	2bdc      	cmp	r3, #220	; 0xdc
    8b50:	d1f9      	bne.n	8b46 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    8b52:	2f02      	cmp	r7, #2
    8b54:	d00d      	beq.n	8b72 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    8b56:	2f01      	cmp	r7, #1
    8b58:	d90f      	bls.n	8b7a <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8b5a:	1fbb      	subs	r3, r7, #6
    8b5c:	2b08      	cmp	r3, #8
    8b5e:	d910      	bls.n	8b82 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    8b60:	2f03      	cmp	r7, #3
    8b62:	d012      	beq.n	8b8a <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    8b64:	2f0f      	cmp	r7, #15
    8b66:	d014      	beq.n	8b92 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    8b68:	2f05      	cmp	r7, #5
    8b6a:	d016      	beq.n	8b9a <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    8b6c:	2f04      	cmp	r7, #4
    8b6e:	d018      	beq.n	8ba2 <LORAREG_Init+0x8e>
}
    8b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    8b72:	2002      	movs	r0, #2
    8b74:	4b15      	ldr	r3, [pc, #84]	; (8bcc <LORAREG_Init+0xb8>)
    8b76:	4798      	blx	r3
    8b78:	e7fa      	b.n	8b70 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    8b7a:	0038      	movs	r0, r7
    8b7c:	4b14      	ldr	r3, [pc, #80]	; (8bd0 <LORAREG_Init+0xbc>)
    8b7e:	4798      	blx	r3
    8b80:	e7f6      	b.n	8b70 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    8b82:	0038      	movs	r0, r7
    8b84:	4b13      	ldr	r3, [pc, #76]	; (8bd4 <LORAREG_Init+0xc0>)
    8b86:	4798      	blx	r3
    8b88:	e7f2      	b.n	8b70 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    8b8a:	2003      	movs	r0, #3
    8b8c:	4b12      	ldr	r3, [pc, #72]	; (8bd8 <LORAREG_Init+0xc4>)
    8b8e:	4798      	blx	r3
    8b90:	e7ee      	b.n	8b70 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    8b92:	200f      	movs	r0, #15
    8b94:	4b11      	ldr	r3, [pc, #68]	; (8bdc <LORAREG_Init+0xc8>)
    8b96:	4798      	blx	r3
    8b98:	e7ea      	b.n	8b70 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    8b9a:	2005      	movs	r0, #5
    8b9c:	4b10      	ldr	r3, [pc, #64]	; (8be0 <LORAREG_Init+0xcc>)
    8b9e:	4798      	blx	r3
    8ba0:	e7e6      	b.n	8b70 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    8ba2:	2004      	movs	r0, #4
    8ba4:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <LORAREG_Init+0xd0>)
    8ba6:	4798      	blx	r3
    8ba8:	e7e2      	b.n	8b70 <LORAREG_Init+0x5c>
    8baa:	46c0      	nop			; (mov r8, r8)
    8bac:	20000bbd 	.word	0x20000bbd
    8bb0:	00008ad9 	.word	0x00008ad9
    8bb4:	00008afd 	.word	0x00008afd
    8bb8:	20000bc0 	.word	0x20000bc0
    8bbc:	000051f1 	.word	0x000051f1
    8bc0:	20000d78 	.word	0x20000d78
    8bc4:	000051f5 	.word	0x000051f5
    8bc8:	20000c9c 	.word	0x20000c9c
    8bcc:	00005011 	.word	0x00005011
    8bd0:	000046e5 	.word	0x000046e5
    8bd4:	000042c9 	.word	0x000042c9
    8bd8:	00004501 	.word	0x00004501
    8bdc:	00004985 	.word	0x00004985
    8be0:	00004b41 	.word	0x00004b41
    8be4:	00004d7d 	.word	0x00004d7d

00008be8 <LORAREG_SupportedBands>:
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
    8be8:	2301      	movs	r3, #1
    8bea:	425b      	negs	r3, r3
    8bec:	8003      	strh	r3, [r0, #0]
	
	return status;
}
    8bee:	2008      	movs	r0, #8
    8bf0:	4770      	bx	lr
	...

00008bf4 <LORAREG_UnInit>:

StackRetStatus_t LORAREG_UnInit(void)
{
    8bf4:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	
	StopAllRegSoftwareTimers();
    8bf6:	4b0d      	ldr	r3, [pc, #52]	; (8c2c <LORAREG_UnInit+0x38>)
    8bf8:	4798      	blx	r3

#if (ENABLE_PDS == 1)
	/* Do not reset the mac fild id1 */
	if(RegParams.regParamItems.fileid)
    8bfa:	23fa      	movs	r3, #250	; 0xfa
    8bfc:	005b      	lsls	r3, r3, #1
    8bfe:	4a0c      	ldr	r2, [pc, #48]	; (8c30 <LORAREG_UnInit+0x3c>)
    8c00:	5cd0      	ldrb	r0, [r2, r3]
    8c02:	2800      	cmp	r0, #0
    8c04:	d106      	bne.n	8c14 <LORAREG_UnInit+0x20>
		{
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
		}
	}
#endif	
	memset(&RegParams,0,sizeof(RegParams_t));
    8c06:	4a0b      	ldr	r2, [pc, #44]	; (8c34 <LORAREG_UnInit+0x40>)
    8c08:	2100      	movs	r1, #0
    8c0a:	4809      	ldr	r0, [pc, #36]	; (8c30 <LORAREG_UnInit+0x3c>)
    8c0c:	4b0a      	ldr	r3, [pc, #40]	; (8c38 <LORAREG_UnInit+0x44>)
    8c0e:	4798      	blx	r3
	
	return result;
}
    8c10:	200a      	movs	r0, #10
    8c12:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    8c14:	4b09      	ldr	r3, [pc, #36]	; (8c3c <LORAREG_UnInit+0x48>)
    8c16:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    8c18:	2326      	movs	r3, #38	; 0x26
    8c1a:	4a05      	ldr	r2, [pc, #20]	; (8c30 <LORAREG_UnInit+0x3c>)
    8c1c:	5cd3      	ldrb	r3, [r2, r3]
    8c1e:	2b00      	cmp	r3, #0
    8c20:	d1f1      	bne.n	8c06 <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    8c22:	200b      	movs	r0, #11
    8c24:	4b05      	ldr	r3, [pc, #20]	; (8c3c <LORAREG_UnInit+0x48>)
    8c26:	4798      	blx	r3
    8c28:	e7ed      	b.n	8c06 <LORAREG_UnInit+0x12>
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	00008afd 	.word	0x00008afd
    8c30:	200013e0 	.word	0x200013e0
    8c34:	000001ff 	.word	0x000001ff
    8c38:	0001594d 	.word	0x0001594d
    8c3c:	0000911d 	.word	0x0000911d

00008c40 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    8c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c42:	b083      	sub	sp, #12
    8c44:	0004      	movs	r4, r0
    8c46:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    8c48:	4a2b      	ldr	r2, [pc, #172]	; (8cf8 <AESEncode+0xb8>)
    8c4a:	2101      	movs	r1, #1
    8c4c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    8c4e:	2300      	movs	r3, #0
    8c50:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    8c52:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    8c54:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    8c56:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    8c58:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    8c5a:	4928      	ldr	r1, [pc, #160]	; (8cfc <AESEncode+0xbc>)
    8c5c:	4828      	ldr	r0, [pc, #160]	; (8d00 <AESEncode+0xc0>)
    8c5e:	4b29      	ldr	r3, [pc, #164]	; (8d04 <AESEncode+0xc4>)
    8c60:	4798      	blx	r3
    8c62:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    8c64:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    8c66:	4f28      	ldr	r7, [pc, #160]	; (8d08 <AESEncode+0xc8>)
    8c68:	1870      	adds	r0, r6, r1
    8c6a:	2300      	movs	r3, #0
    8c6c:	5cc2      	ldrb	r2, [r0, r3]
    8c6e:	555a      	strb	r2, [r3, r5]
    8c70:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8c72:	2b04      	cmp	r3, #4
    8c74:	d1fa      	bne.n	8c6c <AESEncode+0x2c>
    8c76:	9b01      	ldr	r3, [sp, #4]
    8c78:	51cb      	str	r3, [r1, r7]
    8c7a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8c7c:	2910      	cmp	r1, #16
    8c7e:	d1f3      	bne.n	8c68 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    8c80:	4d1f      	ldr	r5, [pc, #124]	; (8d00 <AESEncode+0xc0>)
    8c82:	4921      	ldr	r1, [pc, #132]	; (8d08 <AESEncode+0xc8>)
    8c84:	0028      	movs	r0, r5
    8c86:	4b21      	ldr	r3, [pc, #132]	; (8d0c <AESEncode+0xcc>)
    8c88:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    8c8a:	682a      	ldr	r2, [r5, #0]
    8c8c:	7913      	ldrb	r3, [r2, #4]
    8c8e:	2102      	movs	r1, #2
    8c90:	430b      	orrs	r3, r1
    8c92:	7113      	strb	r3, [r2, #4]
    8c94:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    8c96:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    8c98:	4e1b      	ldr	r6, [pc, #108]	; (8d08 <AESEncode+0xc8>)
    8c9a:	1860      	adds	r0, r4, r1
    8c9c:	2300      	movs	r3, #0
    8c9e:	5cc2      	ldrb	r2, [r0, r3]
    8ca0:	555a      	strb	r2, [r3, r5]
    8ca2:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8ca4:	2b04      	cmp	r3, #4
    8ca6:	d1fa      	bne.n	8c9e <AESEncode+0x5e>
    8ca8:	9b01      	ldr	r3, [sp, #4]
    8caa:	518b      	str	r3, [r1, r6]
    8cac:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8cae:	2910      	cmp	r1, #16
    8cb0:	d1f3      	bne.n	8c9a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    8cb2:	4d13      	ldr	r5, [pc, #76]	; (8d00 <AESEncode+0xc0>)
    8cb4:	4914      	ldr	r1, [pc, #80]	; (8d08 <AESEncode+0xc8>)
    8cb6:	0028      	movs	r0, r5
    8cb8:	4b15      	ldr	r3, [pc, #84]	; (8d10 <AESEncode+0xd0>)
    8cba:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    8cbc:	682d      	ldr	r5, [r5, #0]
    8cbe:	792b      	ldrb	r3, [r5, #4]
    8cc0:	2202      	movs	r2, #2
    8cc2:	4393      	bics	r3, r2
    8cc4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    8cc6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    8cc8:	2002      	movs	r0, #2
    8cca:	e001      	b.n	8cd0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    8ccc:	4211      	tst	r1, r2
    8cce:	d107      	bne.n	8ce0 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    8cd0:	79eb      	ldrb	r3, [r5, #7]
    8cd2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    8cd4:	000a      	movs	r2, r1
    8cd6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    8cd8:	4218      	tst	r0, r3
    8cda:	d0f7      	beq.n	8ccc <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    8cdc:	4302      	orrs	r2, r0
    8cde:	e7f5      	b.n	8ccc <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    8ce0:	4d09      	ldr	r5, [pc, #36]	; (8d08 <AESEncode+0xc8>)
    8ce2:	0029      	movs	r1, r5
    8ce4:	4806      	ldr	r0, [pc, #24]	; (8d00 <AESEncode+0xc0>)
    8ce6:	4b0b      	ldr	r3, [pc, #44]	; (8d14 <AESEncode+0xd4>)
    8ce8:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    8cea:	2210      	movs	r2, #16
    8cec:	0029      	movs	r1, r5
    8cee:	0020      	movs	r0, r4
    8cf0:	4b09      	ldr	r3, [pc, #36]	; (8d18 <AESEncode+0xd8>)
    8cf2:	4798      	blx	r3
#endif	
}
    8cf4:	b003      	add	sp, #12
    8cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cf8:	200015e0 	.word	0x200015e0
    8cfc:	42003400 	.word	0x42003400
    8d00:	200015ec 	.word	0x200015ec
    8d04:	000007b9 	.word	0x000007b9
    8d08:	20000e54 	.word	0x20000e54
    8d0c:	0000084d 	.word	0x0000084d
    8d10:	00000881 	.word	0x00000881
    8d14:	000008d1 	.word	0x000008d1
    8d18:	000158c9 	.word	0x000158c9

00008d1c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    8d1c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    8d1e:	4d07      	ldr	r5, [pc, #28]	; (8d3c <AESInit+0x20>)
    8d20:	0028      	movs	r0, r5
    8d22:	4b07      	ldr	r3, [pc, #28]	; (8d40 <AESInit+0x24>)
    8d24:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    8d26:	4c07      	ldr	r4, [pc, #28]	; (8d44 <AESInit+0x28>)
    8d28:	002a      	movs	r2, r5
    8d2a:	4907      	ldr	r1, [pc, #28]	; (8d48 <AESInit+0x2c>)
    8d2c:	0020      	movs	r0, r4
    8d2e:	4b07      	ldr	r3, [pc, #28]	; (8d4c <AESInit+0x30>)
    8d30:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    8d32:	0020      	movs	r0, r4
    8d34:	4b06      	ldr	r3, [pc, #24]	; (8d50 <AESInit+0x34>)
    8d36:	4798      	blx	r3
#endif	
}
    8d38:	bd70      	pop	{r4, r5, r6, pc}
    8d3a:	46c0      	nop			; (mov r8, r8)
    8d3c:	200015e0 	.word	0x200015e0
    8d40:	0000077d 	.word	0x0000077d
    8d44:	200015ec 	.word	0x200015ec
    8d48:	42003400 	.word	0x42003400
    8d4c:	0000082d 	.word	0x0000082d
    8d50:	00000797 	.word	0x00000797

00008d54 <edbg_eui_read_eui64>:
/*********************************************************************//**
\brief		Reads back the device MAC address stored in User page of EDBG
\param[in]  eui - Device EUI read back from EDBG(8 bytes)
*************************************************************************/
 void edbg_eui_read_eui64(uint8_t *eui)
{
    8d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d56:	b091      	sub	sp, #68	; 0x44
    8d58:	9001      	str	r0, [sp, #4]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    8d5a:	aa03      	add	r2, sp, #12
    8d5c:	2364      	movs	r3, #100	; 0x64
    8d5e:	9303      	str	r3, [sp, #12]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    8d60:	4b3d      	ldr	r3, [pc, #244]	; (8e58 <edbg_eui_read_eui64+0x104>)
    8d62:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    8d64:	2300      	movs	r3, #0
    8d66:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    8d68:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    8d6a:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    8d6c:	2180      	movs	r1, #128	; 0x80
    8d6e:	0389      	lsls	r1, r1, #14
    8d70:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    8d72:	2101      	movs	r1, #1
    8d74:	4249      	negs	r1, r1
    8d76:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    8d78:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    8d7a:	3125      	adds	r1, #37	; 0x25
    8d7c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    8d7e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    8d80:	3108      	adds	r1, #8
    8d82:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    8d84:	3101      	adds	r1, #1
    8d86:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    8d88:	3101      	adds	r1, #1
    8d8a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    8d8c:	33d7      	adds	r3, #215	; 0xd7
    8d8e:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    8d90:	4b32      	ldr	r3, [pc, #200]	; (8e5c <edbg_eui_read_eui64+0x108>)
    8d92:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    8d94:	4b32      	ldr	r3, [pc, #200]	; (8e60 <edbg_eui_read_eui64+0x10c>)
    8d96:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c);
    8d98:	4c32      	ldr	r4, [pc, #200]	; (8e64 <edbg_eui_read_eui64+0x110>)
    8d9a:	4933      	ldr	r1, [pc, #204]	; (8e68 <edbg_eui_read_eui64+0x114>)
    8d9c:	0020      	movs	r0, r4
    8d9e:	4b33      	ldr	r3, [pc, #204]	; (8e6c <edbg_eui_read_eui64+0x118>)
    8da0:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    8da2:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    8da4:	2207      	movs	r2, #7
    8da6:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    8da8:	421a      	tst	r2, r3
    8daa:	d1fc      	bne.n	8da6 <edbg_eui_read_eui64+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    8dac:	6823      	ldr	r3, [r4, #0]
    8dae:	2202      	movs	r2, #2
    8db0:	4313      	orrs	r3, r2
    8db2:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8db4:	4d2b      	ldr	r5, [pc, #172]	; (8e64 <edbg_eui_read_eui64+0x110>)
    8db6:	6828      	ldr	r0, [r5, #0]
    8db8:	4b2d      	ldr	r3, [pc, #180]	; (8e70 <edbg_eui_read_eui64+0x11c>)
    8dba:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8dbc:	231f      	movs	r3, #31
    8dbe:	4018      	ands	r0, r3
    8dc0:	3b1e      	subs	r3, #30
    8dc2:	4083      	lsls	r3, r0
    8dc4:	4a2b      	ldr	r2, [pc, #172]	; (8e74 <edbg_eui_read_eui64+0x120>)
    8dc6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    8dc8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    8dca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    8dcc:	2110      	movs	r1, #16
    8dce:	8b62      	ldrh	r2, [r4, #26]
    8dd0:	420a      	tst	r2, r1
    8dd2:	d104      	bne.n	8dde <edbg_eui_read_eui64+0x8a>
		timeout_counter++;
    8dd4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    8dd6:	4283      	cmp	r3, r0
    8dd8:	d3f9      	bcc.n	8dce <edbg_eui_read_eui64+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    8dda:	2310      	movs	r3, #16
    8ddc:	8363      	strh	r3, [r4, #26]
	configure_i2c_master();
	uint32_t timeout = 0;
	
	/** Send the request token */
	master_packet.address         = SLAVE_ADDRESS;
    8dde:	4b26      	ldr	r3, [pc, #152]	; (8e78 <edbg_eui_read_eui64+0x124>)
    8de0:	2228      	movs	r2, #40	; 0x28
    8de2:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = sizeof(write_buffer);
    8de4:	3a26      	subs	r2, #38	; 0x26
    8de6:	805a      	strh	r2, [r3, #2]
	master_packet.data            = write_buffer;
    8de8:	4a24      	ldr	r2, [pc, #144]	; (8e7c <edbg_eui_read_eui64+0x128>)
    8dea:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    8dec:	2200      	movs	r2, #0
    8dee:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    8df0:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    8df2:	729a      	strb	r2, [r3, #10]
	uint32_t timeout = 0;
    8df4:	2400      	movs	r4, #0
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) !=
    8df6:	001e      	movs	r6, r3
    8df8:	4d1a      	ldr	r5, [pc, #104]	; (8e64 <edbg_eui_read_eui64+0x110>)
    8dfa:	4f21      	ldr	r7, [pc, #132]	; (8e80 <edbg_eui_read_eui64+0x12c>)
    8dfc:	0031      	movs	r1, r6
    8dfe:	0028      	movs	r0, r5
    8e00:	47b8      	blx	r7
    8e02:	2800      	cmp	r0, #0
    8e04:	d007      	beq.n	8e16 <edbg_eui_read_eui64+0xc2>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    8e06:	3401      	adds	r4, #1
    8e08:	4b1e      	ldr	r3, [pc, #120]	; (8e84 <edbg_eui_read_eui64+0x130>)
    8e0a:	429c      	cmp	r4, r3
    8e0c:	d1f6      	bne.n	8dfc <edbg_eui_read_eui64+0xa8>
			printf("\r\n Timeout");
    8e0e:	481e      	ldr	r0, [pc, #120]	; (8e88 <edbg_eui_read_eui64+0x134>)
    8e10:	4b1e      	ldr	r3, [pc, #120]	; (8e8c <edbg_eui_read_eui64+0x138>)
    8e12:	4798      	blx	r3
			return;
    8e14:	e01d      	b.n	8e52 <edbg_eui_read_eui64+0xfe>
		}
	}

	/** Get the extension boards info */
	master_packet.data_length     = 256;
    8e16:	4b18      	ldr	r3, [pc, #96]	; (8e78 <edbg_eui_read_eui64+0x124>)
    8e18:	2280      	movs	r2, #128	; 0x80
    8e1a:	0052      	lsls	r2, r2, #1
    8e1c:	805a      	strh	r2, [r3, #2]
	master_packet.data            = kit_data;
    8e1e:	4a1c      	ldr	r2, [pc, #112]	; (8e90 <edbg_eui_read_eui64+0x13c>)
    8e20:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    8e22:	001e      	movs	r6, r3
    8e24:	4d0f      	ldr	r5, [pc, #60]	; (8e64 <edbg_eui_read_eui64+0x110>)
    8e26:	4f1b      	ldr	r7, [pc, #108]	; (8e94 <edbg_eui_read_eui64+0x140>)
    8e28:	0031      	movs	r1, r6
    8e2a:	0028      	movs	r0, r5
    8e2c:	47b8      	blx	r7
    8e2e:	2800      	cmp	r0, #0
    8e30:	d00a      	beq.n	8e48 <edbg_eui_read_eui64+0xf4>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    8e32:	1c62      	adds	r2, r4, #1
    8e34:	23fa      	movs	r3, #250	; 0xfa
    8e36:	009b      	lsls	r3, r3, #2
    8e38:	429c      	cmp	r4, r3
    8e3a:	d001      	beq.n	8e40 <edbg_eui_read_eui64+0xec>
    8e3c:	0014      	movs	r4, r2
    8e3e:	e7f3      	b.n	8e28 <edbg_eui_read_eui64+0xd4>
			printf("\r\n Timeout");
    8e40:	4811      	ldr	r0, [pc, #68]	; (8e88 <edbg_eui_read_eui64+0x134>)
    8e42:	4b12      	ldr	r3, [pc, #72]	; (8e8c <edbg_eui_read_eui64+0x138>)
    8e44:	4798      	blx	r3
			return;
    8e46:	e004      	b.n	8e52 <edbg_eui_read_eui64+0xfe>
		}
	}
   
    // First 8bytes value is MAC Address
	memcpy(eui, kit_data, MAC_ADDR_LEN);
    8e48:	2208      	movs	r2, #8
    8e4a:	4911      	ldr	r1, [pc, #68]	; (8e90 <edbg_eui_read_eui64+0x13c>)
    8e4c:	9801      	ldr	r0, [sp, #4]
    8e4e:	4b12      	ldr	r3, [pc, #72]	; (8e98 <edbg_eui_read_eui64+0x144>)
    8e50:	4798      	blx	r3
}
    8e52:	b011      	add	sp, #68	; 0x44
    8e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	00000d48 	.word	0x00000d48
    8e5c:	00100002 	.word	0x00100002
    8e60:	00110002 	.word	0x00110002
    8e64:	20001800 	.word	0x20001800
    8e68:	42000400 	.word	0x42000400
    8e6c:	00001259 	.word	0x00001259
    8e70:	00001f11 	.word	0x00001f11
    8e74:	e000e100 	.word	0xe000e100
    8e78:	200017f4 	.word	0x200017f4
    8e7c:	2000000c 	.word	0x2000000c
    8e80:	00001899 	.word	0x00001899
    8e84:	000003e9 	.word	0x000003e9
    8e88:	0001c994 	.word	0x0001c994
    8e8c:	000159e1 	.word	0x000159e1
    8e90:	200016f4 	.word	0x200016f4
    8e94:	00001875 	.word	0x00001875
    8e98:	000158c9 	.word	0x000158c9

00008e9c <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    8e9c:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    8e9e:	4b03      	ldr	r3, [pc, #12]	; (8eac <PDS_Init+0x10>)
    8ea0:	4798      	blx	r3
	pdsUnInitFlag = false;
    8ea2:	2200      	movs	r2, #0
    8ea4:	4b02      	ldr	r3, [pc, #8]	; (8eb0 <PDS_Init+0x14>)
    8ea6:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    8ea8:	bd10      	pop	{r4, pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	0000961d 	.word	0x0000961d
    8eb0:	20000e64 	.word	0x20000e64

00008eb4 <PDS_UnInit>:
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnInit(void)
{
#if (ENABLE_PDS == 1)
	pdsUnInitFlag = true;
    8eb4:	2201      	movs	r2, #1
    8eb6:	4b02      	ldr	r3, [pc, #8]	; (8ec0 <PDS_UnInit+0xc>)
    8eb8:	701a      	strb	r2, [r3, #0]
#endif
	return PDS_OK;
}
    8eba:	2000      	movs	r0, #0
    8ebc:	4770      	bx	lr
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	20000e64 	.word	0x20000e64

00008ec4 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    8ec4:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8ec6:	4b14      	ldr	r3, [pc, #80]	; (8f18 <PDS_Store+0x54>)
    8ec8:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8eca:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8ecc:	2a00      	cmp	r2, #0
    8ece:	d106      	bne.n	8ede <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8ed0:	0102      	lsls	r2, r0, #4
    8ed2:	4b12      	ldr	r3, [pc, #72]	; (8f1c <PDS_Store+0x58>)
    8ed4:	189b      	adds	r3, r3, r2
    8ed6:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8ed8:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8eda:	2a00      	cmp	r2, #0
    8edc:	d101      	bne.n	8ee2 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    8ede:	0018      	movs	r0, r3
    8ee0:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8ee2:	0103      	lsls	r3, r0, #4
    8ee4:	4a0d      	ldr	r2, [pc, #52]	; (8f1c <PDS_Store+0x58>)
    8ee6:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8ee8:	2c00      	cmp	r4, #0
    8eea:	d011      	beq.n	8f10 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    8eec:	001a      	movs	r2, r3
    8eee:	4b0b      	ldr	r3, [pc, #44]	; (8f1c <PDS_Store+0x58>)
    8ef0:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8ef2:	689b      	ldr	r3, [r3, #8]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d00d      	beq.n	8f14 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    8ef8:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    8efa:	280b      	cmp	r0, #11
    8efc:	d8ef      	bhi.n	8ede <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    8efe:	3b04      	subs	r3, #4
    8f00:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    8f02:	4a07      	ldr	r2, [pc, #28]	; (8f20 <PDS_Store+0x5c>)
    8f04:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    8f06:	2001      	movs	r0, #1
    8f08:	4b06      	ldr	r3, [pc, #24]	; (8f24 <PDS_Store+0x60>)
    8f0a:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    8f0c:	2300      	movs	r3, #0
    8f0e:	e7e6      	b.n	8ede <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    8f10:	2305      	movs	r3, #5
    8f12:	e7e4      	b.n	8ede <PDS_Store+0x1a>
    8f14:	2305      	movs	r3, #5
    8f16:	e7e2      	b.n	8ede <PDS_Store+0x1a>
    8f18:	20000e64 	.word	0x20000e64
    8f1c:	20001834 	.word	0x20001834
    8f20:	20001828 	.word	0x20001828
    8f24:	000092f5 	.word	0x000092f5

00008f28 <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    8f28:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8f2a:	4b0e      	ldr	r3, [pc, #56]	; (8f64 <PDS_IsRestorable+0x3c>)
    8f2c:	7818      	ldrb	r0, [r3, #0]
    8f2e:	2800      	cmp	r0, #0
    8f30:	d117      	bne.n	8f62 <PDS_IsRestorable+0x3a>
    8f32:	4d0d      	ldr	r5, [pc, #52]	; (8f68 <PDS_IsRestorable+0x40>)
    8f34:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    8f36:	4e0d      	ldr	r6, [pc, #52]	; (8f6c <PDS_IsRestorable+0x44>)
    8f38:	e004      	b.n	8f44 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    8f3a:	3401      	adds	r4, #1
    8f3c:	b2e4      	uxtb	r4, r4
    8f3e:	3510      	adds	r5, #16
    8f40:	2c0c      	cmp	r4, #12
    8f42:	d00d      	beq.n	8f60 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    8f44:	792b      	ldrb	r3, [r5, #4]
    8f46:	2b00      	cmp	r3, #0
    8f48:	d0f7      	beq.n	8f3a <PDS_IsRestorable+0x12>
    8f4a:	682b      	ldr	r3, [r5, #0]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d0f4      	beq.n	8f3a <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8f50:	68ab      	ldr	r3, [r5, #8]
    8f52:	2b00      	cmp	r3, #0
    8f54:	d0f1      	beq.n	8f3a <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    8f56:	0020      	movs	r0, r4
    8f58:	47b0      	blx	r6
    8f5a:	2800      	cmp	r0, #0
    8f5c:	d1ed      	bne.n	8f3a <PDS_IsRestorable+0x12>
    8f5e:	e000      	b.n	8f62 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    8f60:	2001      	movs	r0, #1
}
    8f62:	bd70      	pop	{r4, r5, r6, pc}
    8f64:	20000e64 	.word	0x20000e64
    8f68:	20001834 	.word	0x20001834
    8f6c:	000097e5 	.word	0x000097e5

00008f70 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    8f70:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8f72:	4b04      	ldr	r3, [pc, #16]	; (8f84 <PDS_DeleteAll+0x14>)
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	2b00      	cmp	r3, #0
    8f78:	d001      	beq.n	8f7e <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    8f7a:	2000      	movs	r0, #0
    8f7c:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    8f7e:	4b02      	ldr	r3, [pc, #8]	; (8f88 <PDS_DeleteAll+0x18>)
    8f80:	4798      	blx	r3
    8f82:	e7fa      	b.n	8f7a <PDS_DeleteAll+0xa>
    8f84:	20000e64 	.word	0x20000e64
    8f88:	00009801 	.word	0x00009801

00008f8c <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    8f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f8e:	46ce      	mov	lr, r9
    8f90:	4647      	mov	r7, r8
    8f92:	b580      	push	{r7, lr}
    8f94:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8f96:	4b32      	ldr	r3, [pc, #200]	; (9060 <PDS_RestoreAll+0xd4>)
    8f98:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8f9a:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d159      	bne.n	9054 <PDS_RestoreAll+0xc8>
    8fa0:	4e30      	ldr	r6, [pc, #192]	; (9064 <PDS_RestoreAll+0xd8>)
    8fa2:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    8fa4:	4b30      	ldr	r3, [pc, #192]	; (9068 <PDS_RestoreAll+0xdc>)
    8fa6:	4698      	mov	r8, r3
    8fa8:	e026      	b.n	8ff8 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    8faa:	3401      	adds	r4, #1
    8fac:	b2e4      	uxtb	r4, r4
    8fae:	792b      	ldrb	r3, [r5, #4]
    8fb0:	42a3      	cmp	r3, r4
    8fb2:	d918      	bls.n	8fe6 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    8fb4:	00e1      	lsls	r1, r4, #3
    8fb6:	68ab      	ldr	r3, [r5, #8]
    8fb8:	469c      	mov	ip, r3
    8fba:	4461      	add	r1, ip
    8fbc:	2208      	movs	r2, #8
    8fbe:	a802      	add	r0, sp, #8
    8fc0:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    8fc2:	ab02      	add	r3, sp, #8
    8fc4:	79d9      	ldrb	r1, [r3, #7]
    8fc6:	2315      	movs	r3, #21
    8fc8:	aa02      	add	r2, sp, #8
    8fca:	4694      	mov	ip, r2
    8fcc:	4463      	add	r3, ip
    8fce:	469c      	mov	ip, r3
    8fd0:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    8fd2:	790b      	ldrb	r3, [r1, #4]
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	d1e8      	bne.n	8faa <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    8fd8:	9b02      	ldr	r3, [sp, #8]
    8fda:	9301      	str	r3, [sp, #4]
    8fdc:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    8fde:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    8fe0:	0018      	movs	r0, r3
    8fe2:	47c0      	blx	r8
    8fe4:	e7e1      	b.n	8faa <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    8fe6:	68eb      	ldr	r3, [r5, #12]
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d000      	beq.n	8fee <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    8fec:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    8fee:	3701      	adds	r7, #1
    8ff0:	b2ff      	uxtb	r7, r7
    8ff2:	3610      	adds	r6, #16
    8ff4:	2f0c      	cmp	r7, #12
    8ff6:	d02c      	beq.n	9052 <PDS_RestoreAll+0xc6>
    8ff8:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    8ffa:	7934      	ldrb	r4, [r6, #4]
    8ffc:	2c00      	cmp	r4, #0
    8ffe:	d0f6      	beq.n	8fee <PDS_RestoreAll+0x62>
    9000:	6833      	ldr	r3, [r6, #0]
    9002:	2b00      	cmp	r3, #0
    9004:	d0f3      	beq.n	8fee <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    9006:	68b3      	ldr	r3, [r6, #8]
    9008:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    900a:	2b00      	cmp	r3, #0
    900c:	d0ef      	beq.n	8fee <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    900e:	2280      	movs	r2, #128	; 0x80
    9010:	0052      	lsls	r2, r2, #1
    9012:	2100      	movs	r1, #0
    9014:	a804      	add	r0, sp, #16
    9016:	4b15      	ldr	r3, [pc, #84]	; (906c <PDS_RestoreAll+0xe0>)
    9018:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    901a:	4b15      	ldr	r3, [pc, #84]	; (9070 <PDS_RestoreAll+0xe4>)
    901c:	469c      	mov	ip, r3
    901e:	4464      	add	r4, ip
    9020:	00e4      	lsls	r4, r4, #3
    9022:	0021      	movs	r1, r4
    9024:	4449      	add	r1, r9
    9026:	2208      	movs	r2, #8
    9028:	a802      	add	r0, sp, #8
    902a:	4b0f      	ldr	r3, [pc, #60]	; (9068 <PDS_RestoreAll+0xdc>)
    902c:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    902e:	ab02      	add	r3, sp, #8
    9030:	79da      	ldrb	r2, [r3, #7]
    9032:	799b      	ldrb	r3, [r3, #6]
    9034:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    9036:	3205      	adds	r2, #5
    9038:	a904      	add	r1, sp, #16
    903a:	0038      	movs	r0, r7
    903c:	4b0d      	ldr	r3, [pc, #52]	; (9074 <PDS_RestoreAll+0xe8>)
    903e:	4798      	blx	r3
				if (status != PDS_OK)
    9040:	2800      	cmp	r0, #0
    9042:	d107      	bne.n	9054 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9044:	7933      	ldrb	r3, [r6, #4]
    9046:	2400      	movs	r4, #0
    9048:	2b00      	cmp	r3, #0
    904a:	d0cc      	beq.n	8fe6 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    904c:	4b06      	ldr	r3, [pc, #24]	; (9068 <PDS_RestoreAll+0xdc>)
    904e:	4699      	mov	r9, r3
    9050:	e7b0      	b.n	8fb4 <PDS_RestoreAll+0x28>
    9052:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    9054:	b045      	add	sp, #276	; 0x114
    9056:	bc0c      	pop	{r2, r3}
    9058:	4690      	mov	r8, r2
    905a:	4699      	mov	r9, r3
    905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    905e:	46c0      	nop			; (mov r8, r8)
    9060:	20000e64 	.word	0x20000e64
    9064:	20001834 	.word	0x20001834
    9068:	000158c9 	.word	0x000158c9
    906c:	0001594d 	.word	0x0001594d
    9070:	1fffffff 	.word	0x1fffffff
    9074:	000097b9 	.word	0x000097b9

00009078 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    9078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    907a:	4b14      	ldr	r3, [pc, #80]	; (90cc <PDS_StoreAll+0x54>)
    907c:	781b      	ldrb	r3, [r3, #0]
    907e:	2b00      	cmp	r3, #0
    9080:	d121      	bne.n	90c6 <PDS_StoreAll+0x4e>
    9082:	4813      	ldr	r0, [pc, #76]	; (90d0 <PDS_StoreAll+0x58>)
    9084:	4d13      	ldr	r5, [pc, #76]	; (90d4 <PDS_StoreAll+0x5c>)
    9086:	0007      	movs	r7, r0
    9088:	37c0      	adds	r7, #192	; 0xc0
    908a:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    908c:	2401      	movs	r4, #1
    908e:	e004      	b.n	909a <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    9090:	702c      	strb	r4, [r5, #0]
    9092:	3010      	adds	r0, #16
    9094:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    9096:	4287      	cmp	r7, r0
    9098:	d012      	beq.n	90c0 <PDS_StoreAll+0x48>
    909a:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    909c:	7903      	ldrb	r3, [r0, #4]
    909e:	2b00      	cmp	r3, #0
    90a0:	d0f7      	beq.n	9092 <PDS_StoreAll+0x1a>
    90a2:	6803      	ldr	r3, [r0, #0]
    90a4:	2b00      	cmp	r3, #0
    90a6:	d0f4      	beq.n	9092 <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    90a8:	6883      	ldr	r3, [r0, #8]
    90aa:	2b00      	cmp	r3, #0
    90ac:	d0f1      	beq.n	9092 <PDS_StoreAll+0x1a>
    90ae:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    90b0:	6811      	ldr	r1, [r2, #0]
    90b2:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    90b4:	3301      	adds	r3, #1
    90b6:	b2db      	uxtb	r3, r3
    90b8:	7911      	ldrb	r1, [r2, #4]
    90ba:	4299      	cmp	r1, r3
    90bc:	d8f8      	bhi.n	90b0 <PDS_StoreAll+0x38>
    90be:	e7e7      	b.n	9090 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    90c0:	2001      	movs	r0, #1
    90c2:	4b05      	ldr	r3, [pc, #20]	; (90d8 <PDS_StoreAll+0x60>)
    90c4:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    90c6:	2000      	movs	r0, #0
    90c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90ca:	46c0      	nop			; (mov r8, r8)
    90cc:	20000e64 	.word	0x20000e64
    90d0:	20001834 	.word	0x20001834
    90d4:	20001828 	.word	0x20001828
    90d8:	000092f5 	.word	0x000092f5

000090dc <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    90dc:	b084      	sub	sp, #16
    90de:	b510      	push	{r4, lr}
    90e0:	9103      	str	r1, [sp, #12]
    90e2:	9204      	str	r2, [sp, #16]
    90e4:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    90e6:	4b0b      	ldr	r3, [pc, #44]	; (9114 <PDS_RegFile+0x38>)
    90e8:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    90ea:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    90ec:	2a00      	cmp	r2, #0
    90ee:	d102      	bne.n	90f6 <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    90f0:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    90f2:	280b      	cmp	r0, #11
    90f4:	d904      	bls.n	9100 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    90f6:	0018      	movs	r0, r3
    90f8:	bc10      	pop	{r4}
    90fa:	bc08      	pop	{r3}
    90fc:	b004      	add	sp, #16
    90fe:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    9100:	0100      	lsls	r0, r0, #4
    9102:	aa03      	add	r2, sp, #12
    9104:	4b04      	ldr	r3, [pc, #16]	; (9118 <PDS_RegFile+0x3c>)
    9106:	1818      	adds	r0, r3, r0
    9108:	ca1a      	ldmia	r2!, {r1, r3, r4}
    910a:	c01a      	stmia	r0!, {r1, r3, r4}
    910c:	6813      	ldr	r3, [r2, #0]
    910e:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    9110:	2300      	movs	r3, #0
    9112:	e7f0      	b.n	90f6 <PDS_RegFile+0x1a>
    9114:	20000e64 	.word	0x20000e64
    9118:	20001834 	.word	0x20001834

0000911c <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    911c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    911e:	4b09      	ldr	r3, [pc, #36]	; (9144 <PDS_UnRegFile+0x28>)
    9120:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    9122:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    9124:	2a00      	cmp	r2, #0
    9126:	d102      	bne.n	912e <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    9128:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    912a:	280b      	cmp	r0, #11
    912c:	d901      	bls.n	9132 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    912e:	0018      	movs	r0, r3
    9130:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    9132:	0100      	lsls	r0, r0, #4
    9134:	4b04      	ldr	r3, [pc, #16]	; (9148 <PDS_UnRegFile+0x2c>)
    9136:	18c0      	adds	r0, r0, r3
    9138:	3210      	adds	r2, #16
    913a:	2100      	movs	r1, #0
    913c:	4b03      	ldr	r3, [pc, #12]	; (914c <PDS_UnRegFile+0x30>)
    913e:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    9140:	2300      	movs	r3, #0
    9142:	e7f4      	b.n	912e <PDS_UnRegFile+0x12>
    9144:	20000e64 	.word	0x20000e64
    9148:	20001834 	.word	0x20001834
    914c:	0001594d 	.word	0x0001594d

00009150 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    9150:	b500      	push	{lr}
    9152:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    9154:	4668      	mov	r0, sp
    9156:	4b0b      	ldr	r3, [pc, #44]	; (9184 <pdsNvmInit+0x34>)
    9158:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    915a:	2000      	movs	r0, #0
    915c:	4b0a      	ldr	r3, [pc, #40]	; (9188 <pdsNvmInit+0x38>)
    915e:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    9160:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    9162:	2800      	cmp	r0, #0
    9164:	d002      	beq.n	916c <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    9166:	0018      	movs	r0, r3
    9168:	b005      	add	sp, #20
    916a:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    916c:	466b      	mov	r3, sp
    916e:	899a      	ldrh	r2, [r3, #12]
    9170:	0892      	lsrs	r2, r2, #2
    9172:	0212      	lsls	r2, r2, #8
    9174:	4905      	ldr	r1, [pc, #20]	; (918c <pdsNvmInit+0x3c>)
	return status;
    9176:	0fd3      	lsrs	r3, r2, #31
    9178:	17c8      	asrs	r0, r1, #31
    917a:	4291      	cmp	r1, r2
    917c:	4143      	adcs	r3, r0
    917e:	009b      	lsls	r3, r3, #2
    9180:	e7f1      	b.n	9166 <pdsNvmInit+0x16>
    9182:	46c0      	nop			; (mov r8, r8)
    9184:	00000e1d 	.word	0x00000e1d
    9188:	0000aaf1 	.word	0x0000aaf1
    918c:	00001fff 	.word	0x00001fff

00009190 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    9190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9192:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    9194:	2380      	movs	r3, #128	; 0x80
    9196:	01db      	lsls	r3, r3, #7
    9198:	469c      	mov	ip, r3
    919a:	4460      	add	r0, ip
    919c:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    919e:	2380      	movs	r3, #128	; 0x80
    91a0:	005b      	lsls	r3, r3, #1
    91a2:	429a      	cmp	r2, r3
    91a4:	d00e      	beq.n	91c4 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    91a6:	3204      	adds	r2, #4
    91a8:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    91aa:	4f1e      	ldr	r7, [pc, #120]	; (9224 <pdsNvmRead+0x94>)
    91ac:	0033      	movs	r3, r6
    91ae:	0022      	movs	r2, r4
    91b0:	0029      	movs	r1, r5
    91b2:	2000      	movs	r0, #0
    91b4:	47b8      	blx	r7
    91b6:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    91b8:	2b05      	cmp	r3, #5
    91ba:	d0f7      	beq.n	91ac <pdsNvmRead+0x1c>
		return PDS_ERROR;
    91bc:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    91be:	2b00      	cmp	r3, #0
    91c0:	d00b      	beq.n	91da <pdsNvmRead+0x4a>
}
    91c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    91c4:	001e      	movs	r6, r3
    91c6:	4f17      	ldr	r7, [pc, #92]	; (9224 <pdsNvmRead+0x94>)
    91c8:	0033      	movs	r3, r6
    91ca:	0022      	movs	r2, r4
    91cc:	0029      	movs	r1, r5
    91ce:	2000      	movs	r0, #0
    91d0:	47b8      	blx	r7
    91d2:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    91d4:	2b05      	cmp	r3, #5
    91d6:	d0f7      	beq.n	91c8 <pdsNvmRead+0x38>
    91d8:	e7f0      	b.n	91bc <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    91da:	7823      	ldrb	r3, [r4, #0]
    91dc:	7860      	ldrb	r0, [r4, #1]
    91de:	0200      	lsls	r0, r0, #8
    91e0:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    91e2:	78a6      	ldrb	r6, [r4, #2]
    91e4:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    91e6:	2e00      	cmp	r6, #0
    91e8:	d017      	beq.n	921a <pdsNvmRead+0x8a>
    91ea:	0025      	movs	r5, r4
    91ec:	3e01      	subs	r6, #1
    91ee:	b2b6      	uxth	r6, r6
    91f0:	3601      	adds	r6, #1
    91f2:	19a4      	adds	r4, r4, r6
    91f4:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    91f6:	782b      	ldrb	r3, [r5, #0]
    91f8:	4073      	eors	r3, r6
    91fa:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    91fc:	010b      	lsls	r3, r1, #4
    91fe:	404b      	eors	r3, r1
    9200:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    9202:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    9204:	091b      	lsrs	r3, r3, #4
    9206:	00d1      	lsls	r1, r2, #3
    9208:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    920a:	0212      	lsls	r2, r2, #8
    920c:	0a36      	lsrs	r6, r6, #8
    920e:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    9210:	4053      	eors	r3, r2
    9212:	b29e      	uxth	r6, r3
    9214:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    9216:	42a5      	cmp	r5, r4
    9218:	d1ed      	bne.n	91f6 <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    921a:	1b80      	subs	r0, r0, r6
    921c:	1e46      	subs	r6, r0, #1
    921e:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    9220:	b2c0      	uxtb	r0, r0
    9222:	e7ce      	b.n	91c2 <pdsNvmRead+0x32>
    9224:	0000a981 	.word	0x0000a981

00009228 <pdsNvmWrite>:
{
    9228:	b5f0      	push	{r4, r5, r6, r7, lr}
    922a:	46c6      	mov	lr, r8
    922c:	b500      	push	{lr}
    922e:	4680      	mov	r8, r0
    9230:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    9232:	2301      	movs	r3, #1
    9234:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    9236:	708a      	strb	r2, [r1, #2]
    9238:	27ff      	movs	r7, #255	; 0xff
    923a:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    923c:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    923e:	2f00      	cmp	r7, #0
    9240:	d017      	beq.n	9272 <pdsNvmWrite+0x4a>
    9242:	0030      	movs	r0, r6
    9244:	3f01      	subs	r7, #1
    9246:	b2bf      	uxth	r7, r7
    9248:	3701      	adds	r7, #1
    924a:	19f6      	adds	r6, r6, r7
    924c:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    924e:	7803      	ldrb	r3, [r0, #0]
    9250:	407b      	eors	r3, r7
    9252:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    9254:	010b      	lsls	r3, r1, #4
    9256:	404b      	eors	r3, r1
    9258:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    925a:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    925c:	091b      	lsrs	r3, r3, #4
    925e:	00cd      	lsls	r5, r1, #3
    9260:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    9262:	0209      	lsls	r1, r1, #8
    9264:	0a3f      	lsrs	r7, r7, #8
    9266:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    9268:	404b      	eors	r3, r1
    926a:	b29f      	uxth	r7, r3
    926c:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    926e:	42b0      	cmp	r0, r6
    9270:	d1ed      	bne.n	924e <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    9272:	7027      	strb	r7, [r4, #0]
    9274:	0a3f      	lsrs	r7, r7, #8
    9276:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    9278:	3204      	adds	r2, #4
    927a:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    927c:	2180      	movs	r1, #128	; 0x80
    927e:	01c9      	lsls	r1, r1, #7
    9280:	4441      	add	r1, r8
    9282:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    9284:	0033      	movs	r3, r6
    9286:	0022      	movs	r2, r4
    9288:	2000      	movs	r0, #0
    928a:	4f08      	ldr	r7, [pc, #32]	; (92ac <pdsNvmWrite+0x84>)
    928c:	47b8      	blx	r7
		return PDS_ERROR;
    928e:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    9290:	2800      	cmp	r0, #0
    9292:	d003      	beq.n	929c <pdsNvmWrite+0x74>
}
    9294:	0018      	movs	r0, r3
    9296:	bc04      	pop	{r2}
    9298:	4690      	mov	r8, r2
    929a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    929c:	0032      	movs	r2, r6
    929e:	0021      	movs	r1, r4
    92a0:	4640      	mov	r0, r8
    92a2:	4b03      	ldr	r3, [pc, #12]	; (92b0 <pdsNvmWrite+0x88>)
    92a4:	4798      	blx	r3
    92a6:	0003      	movs	r3, r0
	return status;
    92a8:	e7f4      	b.n	9294 <pdsNvmWrite+0x6c>
    92aa:	46c0      	nop			; (mov r8, r8)
    92ac:	0000a9dd 	.word	0x0000a9dd
    92b0:	00009191 	.word	0x00009191

000092b4 <pdsNvmErase>:
{
    92b4:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    92b6:	2380      	movs	r3, #128	; 0x80
    92b8:	01db      	lsls	r3, r3, #7
    92ba:	18c4      	adds	r4, r0, r3
    92bc:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    92be:	4d05      	ldr	r5, [pc, #20]	; (92d4 <pdsNvmErase+0x20>)
    92c0:	0020      	movs	r0, r4
    92c2:	47a8      	blx	r5
    92c4:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    92c6:	0003      	movs	r3, r0
    92c8:	330a      	adds	r3, #10
    92ca:	d0f9      	beq.n	92c0 <pdsNvmErase+0xc>
	return status;
    92cc:	1e43      	subs	r3, r0, #1
    92ce:	4198      	sbcs	r0, r3
    92d0:	0040      	lsls	r0, r0, #1
}
    92d2:	bd70      	pop	{r4, r5, r6, pc}
    92d4:	00000d95 	.word	0x00000d95

000092d8 <pdsNvmEraseAll>:
{
    92d8:	b570      	push	{r4, r5, r6, lr}
    92da:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    92dc:	4d04      	ldr	r5, [pc, #16]	; (92f0 <pdsNvmEraseAll+0x18>)
    92de:	b2a0      	uxth	r0, r4
    92e0:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    92e2:	2800      	cmp	r0, #0
    92e4:	d102      	bne.n	92ec <pdsNvmEraseAll+0x14>
    92e6:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    92e8:	2c20      	cmp	r4, #32
    92ea:	d1f8      	bne.n	92de <pdsNvmEraseAll+0x6>
}
    92ec:	bd70      	pop	{r4, r5, r6, pc}
    92ee:	46c0      	nop			; (mov r8, r8)
    92f0:	000092b5 	.word	0x000092b5

000092f4 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    92f4:	b510      	push	{r4, lr}
    92f6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    92f8:	4b05      	ldr	r3, [pc, #20]	; (9310 <pdsPostTask+0x1c>)
    92fa:	4798      	blx	r3
    pdsTaskFlags |= id;
    92fc:	4b05      	ldr	r3, [pc, #20]	; (9314 <pdsPostTask+0x20>)
    92fe:	7818      	ldrb	r0, [r3, #0]
    9300:	4320      	orrs	r0, r4
    9302:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    9304:	4b04      	ldr	r3, [pc, #16]	; (9318 <pdsPostTask+0x24>)
    9306:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    9308:	2008      	movs	r0, #8
    930a:	4b04      	ldr	r3, [pc, #16]	; (931c <pdsPostTask+0x28>)
    930c:	4798      	blx	r3
}
    930e:	bd10      	pop	{r4, pc}
    9310:	00004165 	.word	0x00004165
    9314:	20000e65 	.word	0x20000e65
    9318:	00004171 	.word	0x00004171
    931c:	0000a511 	.word	0x0000a511

00009320 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    9320:	b5f0      	push	{r4, r5, r6, r7, lr}
    9322:	46de      	mov	lr, fp
    9324:	4657      	mov	r7, sl
    9326:	464e      	mov	r6, r9
    9328:	4645      	mov	r5, r8
    932a:	b5e0      	push	{r5, r6, r7, lr}
    932c:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    932e:	2280      	movs	r2, #128	; 0x80
    9330:	0052      	lsls	r2, r2, #1
    9332:	2100      	movs	r1, #0
    9334:	a804      	add	r0, sp, #16
    9336:	4b54      	ldr	r3, [pc, #336]	; (9488 <pdsStoreDeleteHandler+0x168>)
    9338:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    933a:	4b54      	ldr	r3, [pc, #336]	; (948c <pdsStoreDeleteHandler+0x16c>)
    933c:	781b      	ldrb	r3, [r3, #0]
    933e:	2b00      	cmp	r3, #0
    9340:	d112      	bne.n	9368 <pdsStoreDeleteHandler+0x48>
    9342:	2401      	movs	r4, #1
    9344:	4a51      	ldr	r2, [pc, #324]	; (948c <pdsStoreDeleteHandler+0x16c>)
    9346:	9400      	str	r4, [sp, #0]
    9348:	5d13      	ldrb	r3, [r2, r4]
    934a:	2b00      	cmp	r3, #0
    934c:	d10f      	bne.n	936e <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    934e:	3401      	adds	r4, #1
    9350:	b2e4      	uxtb	r4, r4
    9352:	2c0b      	cmp	r4, #11
    9354:	d9f7      	bls.n	9346 <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    9356:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    9358:	0028      	movs	r0, r5
    935a:	b045      	add	sp, #276	; 0x114
    935c:	bc3c      	pop	{r2, r3, r4, r5}
    935e:	4690      	mov	r8, r2
    9360:	4699      	mov	r9, r3
    9362:	46a2      	mov	sl, r4
    9364:	46ab      	mov	fp, r5
    9366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    9368:	2300      	movs	r3, #0
    936a:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    936c:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    936e:	9b00      	ldr	r3, [sp, #0]
    9370:	011a      	lsls	r2, r3, #4
    9372:	4b47      	ldr	r3, [pc, #284]	; (9490 <pdsStoreDeleteHandler+0x170>)
    9374:	189b      	adds	r3, r3, r2
    9376:	7919      	ldrb	r1, [r3, #4]
    9378:	4a46      	ldr	r2, [pc, #280]	; (9494 <pdsStoreDeleteHandler+0x174>)
    937a:	4694      	mov	ip, r2
    937c:	4461      	add	r1, ip
    937e:	00c9      	lsls	r1, r1, #3
    9380:	689b      	ldr	r3, [r3, #8]
    9382:	1859      	adds	r1, r3, r1
    9384:	2208      	movs	r2, #8
    9386:	a802      	add	r0, sp, #8
    9388:	4b43      	ldr	r3, [pc, #268]	; (9498 <pdsStoreDeleteHandler+0x178>)
    938a:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    938c:	ab02      	add	r3, sp, #8
    938e:	79da      	ldrb	r2, [r3, #7]
    9390:	799b      	ldrb	r3, [r3, #6]
    9392:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    9394:	3205      	adds	r2, #5
    9396:	a904      	add	r1, sp, #16
    9398:	0020      	movs	r0, r4
    939a:	4b40      	ldr	r3, [pc, #256]	; (949c <pdsStoreDeleteHandler+0x17c>)
    939c:	4798      	blx	r3
    939e:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    93a0:	d111      	bne.n	93c6 <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    93a2:	9b00      	ldr	r3, [sp, #0]
    93a4:	011a      	lsls	r2, r3, #4
    93a6:	4b3a      	ldr	r3, [pc, #232]	; (9490 <pdsStoreDeleteHandler+0x170>)
    93a8:	189b      	adds	r3, r3, r2
    93aa:	791b      	ldrb	r3, [r3, #4]
    93ac:	2500      	movs	r5, #0
    93ae:	2b00      	cmp	r3, #0
    93b0:	d04a      	beq.n	9448 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    93b2:	4b37      	ldr	r3, [pc, #220]	; (9490 <pdsStoreDeleteHandler+0x170>)
    93b4:	4699      	mov	r9, r3
    93b6:	9b00      	ldr	r3, [sp, #0]
    93b8:	011e      	lsls	r6, r3, #4
    93ba:	46b3      	mov	fp, r6
    93bc:	44cb      	add	fp, r9
    93be:	4b36      	ldr	r3, [pc, #216]	; (9498 <pdsStoreDeleteHandler+0x178>)
    93c0:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    93c2:	465f      	mov	r7, fp
    93c4:	e01b      	b.n	93fe <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    93c6:	2803      	cmp	r0, #3
    93c8:	d144      	bne.n	9454 <pdsStoreDeleteHandler+0x134>
    93ca:	e7ea      	b.n	93a2 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    93cc:	2100      	movs	r1, #0
    93ce:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    93d0:	ab02      	add	r3, sp, #8
    93d2:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    93d4:	795b      	ldrb	r3, [r3, #5]
    93d6:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    93d8:	23a5      	movs	r3, #165	; 0xa5
    93da:	7003      	strb	r3, [r0, #0]
    93dc:	2301      	movs	r3, #1
    93de:	7043      	strb	r3, [r0, #1]
    93e0:	7082      	strb	r2, [r0, #2]
    93e2:	4643      	mov	r3, r8
    93e4:	70c3      	strb	r3, [r0, #3]
    93e6:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    93e8:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    93ea:	9b02      	ldr	r3, [sp, #8]
    93ec:	9301      	str	r3, [sp, #4]
    93ee:	0019      	movs	r1, r3
    93f0:	4b29      	ldr	r3, [pc, #164]	; (9498 <pdsStoreDeleteHandler+0x178>)
    93f2:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    93f4:	3501      	adds	r5, #1
    93f6:	b2ed      	uxtb	r5, r5
    93f8:	793b      	ldrb	r3, [r7, #4]
    93fa:	42ab      	cmp	r3, r5
    93fc:	d924      	bls.n	9448 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    93fe:	00e9      	lsls	r1, r5, #3
    9400:	465b      	mov	r3, fp
    9402:	689b      	ldr	r3, [r3, #8]
    9404:	469c      	mov	ip, r3
    9406:	4461      	add	r1, ip
    9408:	2208      	movs	r2, #8
    940a:	a802      	add	r0, sp, #8
    940c:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    940e:	ab02      	add	r3, sp, #8
    9410:	79d8      	ldrb	r0, [r3, #7]
    9412:	2315      	movs	r3, #21
    9414:	aa02      	add	r2, sp, #8
    9416:	4694      	mov	ip, r2
    9418:	4463      	add	r3, ip
    941a:	469c      	mov	ip, r3
    941c:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    941e:	464b      	mov	r3, r9
    9420:	58f3      	ldr	r3, [r6, r3]
    9422:	195b      	adds	r3, r3, r5
    9424:	781a      	ldrb	r2, [r3, #0]
    9426:	2a01      	cmp	r2, #1
    9428:	d0d0      	beq.n	93cc <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    942a:	2a02      	cmp	r2, #2
    942c:	d1e2      	bne.n	93f4 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    942e:	2200      	movs	r2, #0
    9430:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    9432:	ab02      	add	r3, sp, #8
    9434:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    9436:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    9438:	23a5      	movs	r3, #165	; 0xa5
    943a:	7003      	strb	r3, [r0, #0]
    943c:	3ba4      	subs	r3, #164	; 0xa4
    943e:	7043      	strb	r3, [r0, #1]
    9440:	7081      	strb	r1, [r0, #2]
    9442:	70c2      	strb	r2, [r0, #3]
    9444:	7103      	strb	r3, [r0, #4]
    9446:	e7d5      	b.n	93f4 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    9448:	22f3      	movs	r2, #243	; 0xf3
    944a:	a904      	add	r1, sp, #16
    944c:	0020      	movs	r0, r4
    944e:	4b14      	ldr	r3, [pc, #80]	; (94a0 <pdsStoreDeleteHandler+0x180>)
    9450:	4798      	blx	r3
    9452:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    9454:	2200      	movs	r2, #0
    9456:	4b0d      	ldr	r3, [pc, #52]	; (948c <pdsStoreDeleteHandler+0x16c>)
    9458:	9900      	ldr	r1, [sp, #0]
    945a:	545a      	strb	r2, [r3, r1]
			fileId++;
    945c:	3401      	adds	r4, #1
    945e:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9460:	2b0b      	cmp	r3, #11
    9462:	d900      	bls.n	9466 <pdsStoreDeleteHandler+0x146>
    9464:	e778      	b.n	9358 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    9466:	4a09      	ldr	r2, [pc, #36]	; (948c <pdsStoreDeleteHandler+0x16c>)
    9468:	5cd2      	ldrb	r2, [r2, r3]
    946a:	2a00      	cmp	r2, #0
    946c:	d108      	bne.n	9480 <pdsStoreDeleteHandler+0x160>
    946e:	4907      	ldr	r1, [pc, #28]	; (948c <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9470:	3301      	adds	r3, #1
    9472:	b2db      	uxtb	r3, r3
    9474:	2b0b      	cmp	r3, #11
    9476:	d900      	bls.n	947a <pdsStoreDeleteHandler+0x15a>
    9478:	e76e      	b.n	9358 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    947a:	5cca      	ldrb	r2, [r1, r3]
    947c:	2a00      	cmp	r2, #0
    947e:	d0f7      	beq.n	9470 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    9480:	2001      	movs	r0, #1
    9482:	4b08      	ldr	r3, [pc, #32]	; (94a4 <pdsStoreDeleteHandler+0x184>)
    9484:	4798      	blx	r3
			break;
    9486:	e767      	b.n	9358 <pdsStoreDeleteHandler+0x38>
    9488:	0001594d 	.word	0x0001594d
    948c:	20001828 	.word	0x20001828
    9490:	20001834 	.word	0x20001834
    9494:	1fffffff 	.word	0x1fffffff
    9498:	000158c9 	.word	0x000158c9
    949c:	000097b9 	.word	0x000097b9
    94a0:	000096c9 	.word	0x000096c9
    94a4:	000092f5 	.word	0x000092f5

000094a8 <PDS_TaskHandler>:
{
    94a8:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    94aa:	4b0e      	ldr	r3, [pc, #56]	; (94e4 <PDS_TaskHandler+0x3c>)
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	2b00      	cmp	r3, #0
    94b0:	d003      	beq.n	94ba <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    94b2:	4b0c      	ldr	r3, [pc, #48]	; (94e4 <PDS_TaskHandler+0x3c>)
    94b4:	781b      	ldrb	r3, [r3, #0]
    94b6:	07db      	lsls	r3, r3, #31
    94b8:	d401      	bmi.n	94be <PDS_TaskHandler+0x16>
}
    94ba:	2000      	movs	r0, #0
    94bc:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    94be:	4b0a      	ldr	r3, [pc, #40]	; (94e8 <PDS_TaskHandler+0x40>)
    94c0:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    94c2:	4c08      	ldr	r4, [pc, #32]	; (94e4 <PDS_TaskHandler+0x3c>)
    94c4:	7823      	ldrb	r3, [r4, #0]
    94c6:	2201      	movs	r2, #1
    94c8:	4393      	bics	r3, r2
    94ca:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    94cc:	4b07      	ldr	r3, [pc, #28]	; (94ec <PDS_TaskHandler+0x44>)
    94ce:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    94d0:	4b07      	ldr	r3, [pc, #28]	; (94f0 <PDS_TaskHandler+0x48>)
    94d2:	4798      	blx	r3
				if (pdsTaskFlags)
    94d4:	7823      	ldrb	r3, [r4, #0]
    94d6:	2b00      	cmp	r3, #0
    94d8:	d0ef      	beq.n	94ba <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    94da:	2008      	movs	r0, #8
    94dc:	4b05      	ldr	r3, [pc, #20]	; (94f4 <PDS_TaskHandler+0x4c>)
    94de:	4798      	blx	r3
    94e0:	e7eb      	b.n	94ba <PDS_TaskHandler+0x12>
    94e2:	46c0      	nop			; (mov r8, r8)
    94e4:	20000e65 	.word	0x20000e65
    94e8:	00004165 	.word	0x00004165
    94ec:	00004171 	.word	0x00004171
    94f0:	00009321 	.word	0x00009321
    94f4:	0000a511 	.word	0x0000a511

000094f8 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    94f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94fa:	4e12      	ldr	r6, [pc, #72]	; (9544 <pdsUpdateRowMap+0x4c>)
    94fc:	0037      	movs	r7, r6
    94fe:	3718      	adds	r7, #24
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    9500:	4d11      	ldr	r5, [pc, #68]	; (9548 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    9502:	4b12      	ldr	r3, [pc, #72]	; (954c <pdsUpdateRowMap+0x54>)
    9504:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    9506:	2101      	movs	r1, #1
    9508:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    950a:	0018      	movs	r0, r3
    950c:	e002      	b.n	9514 <pdsUpdateRowMap+0x1c>
    950e:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    9510:	42be      	cmp	r6, r7
    9512:	d015      	beq.n	9540 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    9514:	8833      	ldrh	r3, [r6, #0]
    9516:	42ab      	cmp	r3, r5
    9518:	d0f9      	beq.n	950e <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    951a:	00db      	lsls	r3, r3, #3
    951c:	4463      	add	r3, ip
    951e:	001a      	movs	r2, r3
    9520:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    9522:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    9524:	42ab      	cmp	r3, r5
    9526:	d0f2      	beq.n	950e <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    9528:	001a      	movs	r2, r3
    952a:	00db      	lsls	r3, r3, #3
    952c:	18c3      	adds	r3, r0, r3
    952e:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    9530:	00d2      	lsls	r2, r2, #3
    9532:	1884      	adds	r4, r0, r2
    9534:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    9536:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    9538:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    953a:	42ab      	cmp	r3, r5
    953c:	d1f4      	bne.n	9528 <pdsUpdateRowMap+0x30>
    953e:	e7e6      	b.n	950e <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    9540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9542:	46c0      	nop			; (mov r8, r8)
    9544:	20000e68 	.word	0x20000e68
    9548:	0000ffff 	.word	0x0000ffff
    954c:	20000e80 	.word	0x20000e80

00009550 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    9550:	b5f0      	push	{r4, r5, r6, r7, lr}
    9552:	46c6      	mov	lr, r8
    9554:	b500      	push	{lr}
    9556:	b082      	sub	sp, #8
    9558:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    955a:	8881      	ldrh	r1, [r0, #4]
    955c:	004a      	lsls	r2, r1, #1
    955e:	4b2c      	ldr	r3, [pc, #176]	; (9610 <pdsUpdateFileMap+0xc0>)
    9560:	5ad3      	ldrh	r3, [r2, r3]
    9562:	4a2c      	ldr	r2, [pc, #176]	; (9614 <pdsUpdateFileMap+0xc4>)
    9564:	4293      	cmp	r3, r2
    9566:	d02c      	beq.n	95c2 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    9568:	4a2b      	ldr	r2, [pc, #172]	; (9618 <pdsUpdateFileMap+0xc8>)
    956a:	00d8      	lsls	r0, r3, #3
    956c:	5880      	ldr	r0, [r0, r2]
    956e:	4664      	mov	r4, ip
    9570:	88e4      	ldrh	r4, [r4, #6]
    9572:	46a0      	mov	r8, r4
    9574:	00e4      	lsls	r4, r4, #3
    9576:	58a6      	ldr	r6, [r4, r2]
    9578:	42b0      	cmp	r0, r6
    957a:	d327      	bcc.n	95cc <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    957c:	d02f      	beq.n	95de <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    957e:	4a26      	ldr	r2, [pc, #152]	; (9618 <pdsUpdateFileMap+0xc8>)
    9580:	00dd      	lsls	r5, r3, #3
    9582:	3506      	adds	r5, #6
    9584:	1950      	adds	r0, r2, r5
    9586:	9001      	str	r0, [sp, #4]
    9588:	00db      	lsls	r3, r3, #3
    958a:	18d3      	adds	r3, r2, r3
    958c:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    958e:	4b21      	ldr	r3, [pc, #132]	; (9614 <pdsUpdateFileMap+0xc4>)
    9590:	429a      	cmp	r2, r3
    9592:	d028      	beq.n	95e6 <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9594:	0013      	movs	r3, r2
    9596:	00d0      	lsls	r0, r2, #3
    9598:	4c1f      	ldr	r4, [pc, #124]	; (9618 <pdsUpdateFileMap+0xc8>)
    959a:	5900      	ldr	r0, [r0, r4]
    959c:	4286      	cmp	r6, r0
    959e:	d226      	bcs.n	95ee <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    95a0:	4c1d      	ldr	r4, [pc, #116]	; (9618 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    95a2:	4f1c      	ldr	r7, [pc, #112]	; (9614 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    95a4:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    95a6:	00db      	lsls	r3, r3, #3
    95a8:	1d99      	adds	r1, r3, #6
    95aa:	1861      	adds	r1, r4, r1
    95ac:	18e3      	adds	r3, r4, r3
    95ae:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    95b0:	42ba      	cmp	r2, r7
    95b2:	d019      	beq.n	95e8 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    95b4:	0013      	movs	r3, r2
    95b6:	00d5      	lsls	r5, r2, #3
    95b8:	582d      	ldr	r5, [r5, r0]
    95ba:	42ae      	cmp	r6, r5
    95bc:	d21b      	bcs.n	95f6 <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    95be:	9101      	str	r1, [sp, #4]
    95c0:	e7f1      	b.n	95a6 <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    95c2:	88c2      	ldrh	r2, [r0, #6]
    95c4:	0049      	lsls	r1, r1, #1
    95c6:	4b12      	ldr	r3, [pc, #72]	; (9610 <pdsUpdateFileMap+0xc0>)
    95c8:	52ca      	strh	r2, [r1, r3]
    95ca:	e008      	b.n	95de <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    95cc:	4a12      	ldr	r2, [pc, #72]	; (9618 <pdsUpdateFileMap+0xc8>)
    95ce:	1912      	adds	r2, r2, r4
    95d0:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    95d2:	4663      	mov	r3, ip
    95d4:	88d9      	ldrh	r1, [r3, #6]
    95d6:	889b      	ldrh	r3, [r3, #4]
    95d8:	005b      	lsls	r3, r3, #1
    95da:	4a0d      	ldr	r2, [pc, #52]	; (9610 <pdsUpdateFileMap+0xc0>)
    95dc:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    95de:	b002      	add	sp, #8
    95e0:	bc04      	pop	{r2}
    95e2:	4690      	mov	r8, r2
    95e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    95e6:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    95e8:	4643      	mov	r3, r8
    95ea:	800b      	strh	r3, [r1, #0]
				break;
    95ec:	e7f7      	b.n	95de <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    95ee:	0049      	lsls	r1, r1, #1
    95f0:	4d07      	ldr	r5, [pc, #28]	; (9610 <pdsUpdateFileMap+0xc0>)
    95f2:	186b      	adds	r3, r5, r1
    95f4:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    95f6:	4908      	ldr	r1, [pc, #32]	; (9618 <pdsUpdateFileMap+0xc8>)
    95f8:	9b01      	ldr	r3, [sp, #4]
    95fa:	881b      	ldrh	r3, [r3, #0]
    95fc:	00db      	lsls	r3, r3, #3
    95fe:	18cb      	adds	r3, r1, r3
    9600:	4640      	mov	r0, r8
    9602:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    9604:	4663      	mov	r3, ip
    9606:	88db      	ldrh	r3, [r3, #6]
    9608:	00db      	lsls	r3, r3, #3
    960a:	18c9      	adds	r1, r1, r3
    960c:	80ca      	strh	r2, [r1, #6]
				break;
    960e:	e7e6      	b.n	95de <pdsUpdateFileMap+0x8e>
    9610:	20000e68 	.word	0x20000e68
    9614:	0000ffff 	.word	0x0000ffff
    9618:	20000e80 	.word	0x20000e80

0000961c <pdsWlInit>:
{
    961c:	b5f0      	push	{r4, r5, r6, r7, lr}
    961e:	46c6      	mov	lr, r8
    9620:	b500      	push	{lr}
    9622:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    9624:	4b21      	ldr	r3, [pc, #132]	; (96ac <pdsWlInit+0x90>)
    9626:	4798      	blx	r3
    9628:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    962a:	2800      	cmp	r0, #0
    962c:	d004      	beq.n	9638 <pdsWlInit+0x1c>
}
    962e:	9801      	ldr	r0, [sp, #4]
    9630:	b044      	add	sp, #272	; 0x110
    9632:	bc04      	pop	{r2}
    9634:	4690      	mov	r8, r2
    9636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    9638:	2680      	movs	r6, #128	; 0x80
    963a:	0076      	lsls	r6, r6, #1
    963c:	4d1c      	ldr	r5, [pc, #112]	; (96b0 <pdsWlInit+0x94>)
    963e:	0032      	movs	r2, r6
    9640:	21ff      	movs	r1, #255	; 0xff
    9642:	0028      	movs	r0, r5
    9644:	4c1b      	ldr	r4, [pc, #108]	; (96b4 <pdsWlInit+0x98>)
    9646:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    9648:	2218      	movs	r2, #24
    964a:	21ff      	movs	r1, #255	; 0xff
    964c:	481a      	ldr	r0, [pc, #104]	; (96b8 <pdsWlInit+0x9c>)
    964e:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    9650:	0032      	movs	r2, r6
    9652:	2100      	movs	r1, #0
    9654:	a804      	add	r0, sp, #16
    9656:	47a0      	blx	r4
    9658:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    965a:	4e18      	ldr	r6, [pc, #96]	; (96bc <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    965c:	4b18      	ldr	r3, [pc, #96]	; (96c0 <pdsWlInit+0xa4>)
    965e:	4698      	mov	r8, r3
    9660:	e003      	b.n	966a <pdsWlInit+0x4e>
    9662:	3401      	adds	r4, #1
    9664:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    9666:	2c20      	cmp	r4, #32
    9668:	d01d      	beq.n	96a6 <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    966a:	b2a7      	uxth	r7, r4
    966c:	2280      	movs	r2, #128	; 0x80
    966e:	0052      	lsls	r2, r2, #1
    9670:	a904      	add	r1, sp, #16
    9672:	0038      	movs	r0, r7
    9674:	47b0      	blx	r6
		if (PDS_OK == status)
    9676:	2800      	cmp	r0, #0
    9678:	d1f3      	bne.n	9662 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    967a:	a904      	add	r1, sp, #16
    967c:	9b06      	ldr	r3, [sp, #24]
    967e:	0a1b      	lsrs	r3, r3, #8
    9680:	7b0a      	ldrb	r2, [r1, #12]
    9682:	0612      	lsls	r2, r2, #24
    9684:	431a      	orrs	r2, r3
    9686:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    9688:	79c8      	ldrb	r0, [r1, #7]
    968a:	7a0b      	ldrb	r3, [r1, #8]
    968c:	021b      	lsls	r3, r3, #8
    968e:	4303      	orrs	r3, r0
    9690:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    9692:	2101      	movs	r1, #1
    9694:	4249      	negs	r1, r1
    9696:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    9698:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    969a:	aa02      	add	r2, sp, #8
    969c:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    969e:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    96a0:	0010      	movs	r0, r2
    96a2:	47c0      	blx	r8
    96a4:	e7dd      	b.n	9662 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    96a6:	4b07      	ldr	r3, [pc, #28]	; (96c4 <pdsWlInit+0xa8>)
    96a8:	4798      	blx	r3
	return PDS_OK;
    96aa:	e7c0      	b.n	962e <pdsWlInit+0x12>
    96ac:	00009151 	.word	0x00009151
    96b0:	20000e80 	.word	0x20000e80
    96b4:	0001594d 	.word	0x0001594d
    96b8:	20000e68 	.word	0x20000e68
    96bc:	00009191 	.word	0x00009191
    96c0:	00009551 	.word	0x00009551
    96c4:	000094f9 	.word	0x000094f9

000096c8 <pdsWlWrite>:
{
    96c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    96ca:	46ce      	mov	lr, r9
    96cc:	4647      	mov	r7, r8
    96ce:	b580      	push	{r7, lr}
    96d0:	b083      	sub	sp, #12
    96d2:	0005      	movs	r5, r0
    96d4:	000f      	movs	r7, r1
    96d6:	4690      	mov	r8, r2
    96d8:	4e32      	ldr	r6, [pc, #200]	; (97a4 <pdsWlWrite+0xdc>)
    96da:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    96dc:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    96de:	4832      	ldr	r0, [pc, #200]	; (97a8 <pdsWlWrite+0xe0>)
    96e0:	e004      	b.n	96ec <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    96e2:	3401      	adds	r4, #1
    96e4:	b2e4      	uxtb	r4, r4
    96e6:	3308      	adds	r3, #8
    96e8:	2c20      	cmp	r4, #32
    96ea:	d055      	beq.n	9798 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    96ec:	6819      	ldr	r1, [r3, #0]
    96ee:	3101      	adds	r1, #1
    96f0:	d1f7      	bne.n	96e2 <pdsWlWrite+0x1a>
    96f2:	88d9      	ldrh	r1, [r3, #6]
    96f4:	4281      	cmp	r1, r0
    96f6:	d1f4      	bne.n	96e2 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    96f8:	889a      	ldrh	r2, [r3, #4]
    96fa:	4282      	cmp	r2, r0
    96fc:	d1f1      	bne.n	96e2 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    96fe:	b2a3      	uxth	r3, r4
    9700:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    9702:	7a7e      	ldrb	r6, [r7, #9]
    9704:	7abb      	ldrb	r3, [r7, #10]
    9706:	021b      	lsls	r3, r3, #8
    9708:	4333      	orrs	r3, r6
    970a:	7afe      	ldrb	r6, [r7, #11]
    970c:	0436      	lsls	r6, r6, #16
    970e:	4333      	orrs	r3, r6
    9710:	7b3e      	ldrb	r6, [r7, #12]
    9712:	0636      	lsls	r6, r6, #24
    9714:	431e      	orrs	r6, r3
    9716:	3601      	adds	r6, #1
    9718:	727e      	strb	r6, [r7, #9]
    971a:	0a32      	lsrs	r2, r6, #8
    971c:	72ba      	strb	r2, [r7, #10]
    971e:	0c32      	lsrs	r2, r6, #16
    9720:	72fa      	strb	r2, [r7, #11]
    9722:	0e32      	lsrs	r2, r6, #24
    9724:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    9726:	b2ad      	uxth	r5, r5
    9728:	71fd      	strb	r5, [r7, #7]
    972a:	2200      	movs	r2, #0
    972c:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    972e:	23a5      	movs	r3, #165	; 0xa5
    9730:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    9732:	3ba4      	subs	r3, #164	; 0xa4
    9734:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    9736:	4643      	mov	r3, r8
    9738:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    973a:	4642      	mov	r2, r8
    973c:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    973e:	b292      	uxth	r2, r2
    9740:	0039      	movs	r1, r7
    9742:	4648      	mov	r0, r9
    9744:	4b19      	ldr	r3, [pc, #100]	; (97ac <pdsWlWrite+0xe4>)
    9746:	4798      	blx	r3
    9748:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    974a:	d014      	beq.n	9776 <pdsWlWrite+0xae>
}
    974c:	0038      	movs	r0, r7
    974e:	b003      	add	sp, #12
    9750:	bc0c      	pop	{r2, r3}
    9752:	4690      	mov	r8, r2
    9754:	4699      	mov	r9, r3
    9756:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9758:	3401      	adds	r4, #1
    975a:	b2e4      	uxtb	r4, r4
    975c:	3608      	adds	r6, #8
    975e:	2c20      	cmp	r4, #32
    9760:	d0cd      	beq.n	96fe <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9762:	6832      	ldr	r2, [r6, #0]
    9764:	3201      	adds	r2, #1
    9766:	d1f7      	bne.n	9758 <pdsWlWrite+0x90>
    9768:	88f2      	ldrh	r2, [r6, #6]
    976a:	428a      	cmp	r2, r1
    976c:	d1f4      	bne.n	9758 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    976e:	88b3      	ldrh	r3, [r6, #4]
    9770:	428b      	cmp	r3, r1
    9772:	d1f1      	bne.n	9758 <pdsWlWrite+0x90>
    9774:	e7c3      	b.n	96fe <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    9776:	4b0b      	ldr	r3, [pc, #44]	; (97a4 <pdsWlWrite+0xdc>)
    9778:	00e4      	lsls	r4, r4, #3
    977a:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    977c:	191c      	adds	r4, r3, r4
    977e:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    9780:	2301      	movs	r3, #1
    9782:	425b      	negs	r3, r3
    9784:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    9786:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    9788:	466b      	mov	r3, sp
    978a:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    978c:	464a      	mov	r2, r9
    978e:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    9790:	4668      	mov	r0, sp
    9792:	4b07      	ldr	r3, [pc, #28]	; (97b0 <pdsWlWrite+0xe8>)
    9794:	4798      	blx	r3
	return status;
    9796:	e7d9      	b.n	974c <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    9798:	4b06      	ldr	r3, [pc, #24]	; (97b4 <pdsWlWrite+0xec>)
    979a:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    979c:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    979e:	4902      	ldr	r1, [pc, #8]	; (97a8 <pdsWlWrite+0xe0>)
    97a0:	e7df      	b.n	9762 <pdsWlWrite+0x9a>
    97a2:	46c0      	nop			; (mov r8, r8)
    97a4:	20000e80 	.word	0x20000e80
    97a8:	0000ffff 	.word	0x0000ffff
    97ac:	00009229 	.word	0x00009229
    97b0:	00009551 	.word	0x00009551
    97b4:	000094f9 	.word	0x000094f9

000097b8 <pdsWlRead>:
{
    97b8:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    97ba:	0040      	lsls	r0, r0, #1
    97bc:	4b06      	ldr	r3, [pc, #24]	; (97d8 <pdsWlRead+0x20>)
    97be:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    97c0:	4c06      	ldr	r4, [pc, #24]	; (97dc <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    97c2:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    97c4:	42a3      	cmp	r3, r4
    97c6:	d100      	bne.n	97ca <pdsWlRead+0x12>
}
    97c8:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    97ca:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    97cc:	b292      	uxth	r2, r2
    97ce:	0018      	movs	r0, r3
    97d0:	4b03      	ldr	r3, [pc, #12]	; (97e0 <pdsWlRead+0x28>)
    97d2:	4798      	blx	r3
	return status;
    97d4:	e7f8      	b.n	97c8 <pdsWlRead+0x10>
    97d6:	46c0      	nop			; (mov r8, r8)
    97d8:	20000e68 	.word	0x20000e68
    97dc:	0000ffff 	.word	0x0000ffff
    97e0:	00009191 	.word	0x00009191

000097e4 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    97e4:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    97e6:	4b04      	ldr	r3, [pc, #16]	; (97f8 <isFileFound+0x14>)
    97e8:	5ac0      	ldrh	r0, [r0, r3]
    97ea:	4b04      	ldr	r3, [pc, #16]	; (97fc <isFileFound+0x18>)
    97ec:	469c      	mov	ip, r3
    97ee:	4460      	add	r0, ip
    97f0:	1e43      	subs	r3, r0, #1
    97f2:	4198      	sbcs	r0, r3
    97f4:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    97f6:	4770      	bx	lr
    97f8:	20000e68 	.word	0x20000e68
    97fc:	ffff0001 	.word	0xffff0001

00009800 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    9800:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    9802:	2280      	movs	r2, #128	; 0x80
    9804:	0052      	lsls	r2, r2, #1
    9806:	21ff      	movs	r1, #255	; 0xff
    9808:	4804      	ldr	r0, [pc, #16]	; (981c <pdsWlDeleteAll+0x1c>)
    980a:	4c05      	ldr	r4, [pc, #20]	; (9820 <pdsWlDeleteAll+0x20>)
    980c:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    980e:	2218      	movs	r2, #24
    9810:	21ff      	movs	r1, #255	; 0xff
    9812:	4804      	ldr	r0, [pc, #16]	; (9824 <pdsWlDeleteAll+0x24>)
    9814:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    9816:	4b04      	ldr	r3, [pc, #16]	; (9828 <pdsWlDeleteAll+0x28>)
    9818:	4798      	blx	r3
}
    981a:	bd10      	pop	{r4, pc}
    981c:	20000e80 	.word	0x20000e80
    9820:	0001594d 	.word	0x0001594d
    9824:	20000e68 	.word	0x20000e68
    9828:	000092d9 	.word	0x000092d9

0000982c <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    982c:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    982e:	2802      	cmp	r0, #2
    9830:	d020      	beq.n	9874 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    9832:	2803      	cmp	r0, #3
    9834:	d010      	beq.n	9858 <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    9836:	2001      	movs	r0, #1
    9838:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    983a:	4770      	bx	lr
            LED_Off(ledPin);
    983c:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    983e:	2301      	movs	r3, #1
    9840:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    9842:	4a15      	ldr	r2, [pc, #84]	; (9898 <set_LED_data+0x6c>)
    9844:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    9846:	2000      	movs	r0, #0
    9848:	e7f7      	b.n	983a <set_LED_data+0xe>
            LED_Off(ledPin);
    984a:	2213      	movs	r2, #19
    984c:	e7f7      	b.n	983e <set_LED_data+0x12>
            LED_On(ledPin);
    984e:	2212      	movs	r2, #18
    9850:	e013      	b.n	987a <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    9852:	2001      	movs	r0, #1
    9854:	4240      	negs	r0, r0
    9856:	e7f0      	b.n	983a <set_LED_data+0xe>
    switch(value)
    9858:	2b01      	cmp	r3, #1
    985a:	d0f8      	beq.n	984e <set_LED_data+0x22>
    985c:	2b00      	cmp	r3, #0
    985e:	d0ed      	beq.n	983c <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    9860:	2112      	movs	r1, #18
    switch(value)
    9862:	2b02      	cmp	r3, #2
    9864:	d1f5      	bne.n	9852 <set_LED_data+0x26>
            LED_Toggle(ledPin);
    9866:	b2c9      	uxtb	r1, r1
    9868:	4b0b      	ldr	r3, [pc, #44]	; (9898 <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    986a:	2201      	movs	r2, #1
    986c:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    986e:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    9870:	2000      	movs	r0, #0
    9872:	e7e2      	b.n	983a <set_LED_data+0xe>
            LED_On(ledPin);
    9874:	2213      	movs	r2, #19
    switch(value)
    9876:	2b01      	cmp	r3, #1
    9878:	d105      	bne.n	9886 <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    987a:	2301      	movs	r3, #1
    987c:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    987e:	4a06      	ldr	r2, [pc, #24]	; (9898 <set_LED_data+0x6c>)
    9880:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    9882:	2000      	movs	r0, #0
    9884:	e7d9      	b.n	983a <set_LED_data+0xe>
    switch(value)
    9886:	2b00      	cmp	r3, #0
    9888:	d0df      	beq.n	984a <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    988a:	2113      	movs	r1, #19
    switch(value)
    988c:	2b02      	cmp	r3, #2
    988e:	d0ea      	beq.n	9866 <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    9890:	2001      	movs	r0, #1
    9892:	4240      	negs	r0, r0
    return status;
    9894:	e7d1      	b.n	983a <set_LED_data+0xe>
    9896:	46c0      	nop			; (mov r8, r8)
    9898:	40002800 	.word	0x40002800

0000989c <get_resource_data>:
 \brief      Function to get different resource data
 \param[in]  resource - Type of resource (Motor, Light, Temperature)
 \param[out] *data    - Pointer to the data from different resource
*************************************************************************/
void get_resource_data(const resourceType_t resource,uint8_t * data)
{
    989c:	b510      	push	{r4, lr}

    switch(resource)
    989e:	2801      	cmp	r0, #1
    98a0:	d002      	beq.n	98a8 <get_resource_data+0xc>
            get_temp_sensor_data(data);
            break;
        }
        default:
        {
            *data = UNSUPPORTED_RESOURCE;
    98a2:	23ff      	movs	r3, #255	; 0xff
    98a4:	700b      	strb	r3, [r1, #0]
            break;
        }
    }
}
    98a6:	bd10      	pop	{r4, pc}
            get_temp_sensor_data(data);
    98a8:	0008      	movs	r0, r1
    98aa:	4b01      	ldr	r3, [pc, #4]	; (98b0 <get_resource_data+0x14>)
    98ac:	4798      	blx	r3
            break;
    98ae:	e7fa      	b.n	98a6 <get_resource_data+0xa>
    98b0:	00009995 	.word	0x00009995

000098b4 <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    98b4:	b510      	push	{r4, lr}
    temp_sensor_init();
    98b6:	4b01      	ldr	r3, [pc, #4]	; (98bc <resource_init+0x8>)
    98b8:	4798      	blx	r3
    //LED_init();
}
    98ba:	bd10      	pop	{r4, pc}
    98bc:	00009905 	.word	0x00009905

000098c0 <convert_dec_to_frac>:
*               This function converts the decimal value into fractional
*               and return the fractional value for temperature calculation
* \param[out]   Fraction value of Decimal
*/
static float convert_dec_to_frac(uint8_t val)
{
    98c0:	b510      	push	{r4, lr}
	if (val < 10)
    98c2:	2809      	cmp	r0, #9
    98c4:	d907      	bls.n	98d6 <convert_dec_to_frac+0x16>
	{
		return ((float)val/10.0);
	}
	
	else if (val <100)
    98c6:	2863      	cmp	r0, #99	; 0x63
    98c8:	d90b      	bls.n	98e2 <convert_dec_to_frac+0x22>
		return ((float)val/100.0);
	}
	
	else
	{
		return ((float)val/1000.0);
    98ca:	4b09      	ldr	r3, [pc, #36]	; (98f0 <convert_dec_to_frac+0x30>)
    98cc:	4798      	blx	r3
    98ce:	4909      	ldr	r1, [pc, #36]	; (98f4 <convert_dec_to_frac+0x34>)
    98d0:	4b09      	ldr	r3, [pc, #36]	; (98f8 <convert_dec_to_frac+0x38>)
    98d2:	4798      	blx	r3
    98d4:	e004      	b.n	98e0 <convert_dec_to_frac+0x20>
		return ((float)val/10.0);
    98d6:	4b06      	ldr	r3, [pc, #24]	; (98f0 <convert_dec_to_frac+0x30>)
    98d8:	4798      	blx	r3
    98da:	4908      	ldr	r1, [pc, #32]	; (98fc <convert_dec_to_frac+0x3c>)
    98dc:	4b06      	ldr	r3, [pc, #24]	; (98f8 <convert_dec_to_frac+0x38>)
    98de:	4798      	blx	r3
	}
}
    98e0:	bd10      	pop	{r4, pc}
		return ((float)val/100.0);
    98e2:	4b03      	ldr	r3, [pc, #12]	; (98f0 <convert_dec_to_frac+0x30>)
    98e4:	4798      	blx	r3
    98e6:	4906      	ldr	r1, [pc, #24]	; (9900 <convert_dec_to_frac+0x40>)
    98e8:	4b03      	ldr	r3, [pc, #12]	; (98f8 <convert_dec_to_frac+0x38>)
    98ea:	4798      	blx	r3
    98ec:	e7f8      	b.n	98e0 <convert_dec_to_frac+0x20>
    98ee:	46c0      	nop			; (mov r8, r8)
    98f0:	00013a4d 	.word	0x00013a4d
    98f4:	447a0000 	.word	0x447a0000
    98f8:	00013015 	.word	0x00013015
    98fc:	41200000 	.word	0x41200000
    9900:	42c80000 	.word	0x42c80000

00009904 <temp_sensor_init>:
{
    9904:	b5f0      	push	{r4, r5, r6, r7, lr}
    9906:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&conf_adc);
    9908:	ac01      	add	r4, sp, #4
    990a:	0020      	movs	r0, r4
    990c:	4b1b      	ldr	r3, [pc, #108]	; (997c <temp_sensor_init+0x78>)
    990e:	4798      	blx	r3
	conf_adc.clock_source = GCLK_GENERATOR_2;
    9910:	2602      	movs	r6, #2
    9912:	7026      	strb	r6, [r4, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2;
    9914:	2300      	movs	r3, #0
    9916:	70a3      	strb	r3, [r4, #2]
	conf_adc.reference = ADC_REFCTRL_REFSEL_INTREF;
    9918:	7063      	strb	r3, [r4, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    991a:	3318      	adds	r3, #24
    991c:	7123      	strb	r3, [r4, #4]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    991e:	23c0      	movs	r3, #192	; 0xc0
    9920:	015b      	lsls	r3, r3, #5
    9922:	80e3      	strh	r3, [r4, #6]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    9924:	233f      	movs	r3, #63	; 0x3f
    9926:	7563      	strb	r3, [r4, #21]
	adc_init(&adc_instance, ADC, &conf_adc);
    9928:	4f15      	ldr	r7, [pc, #84]	; (9980 <temp_sensor_init+0x7c>)
    992a:	4d16      	ldr	r5, [pc, #88]	; (9984 <temp_sensor_init+0x80>)
    992c:	0022      	movs	r2, r4
    992e:	0039      	movs	r1, r7
    9930:	0028      	movs	r0, r5
    9932:	4b15      	ldr	r3, [pc, #84]	; (9988 <temp_sensor_init+0x84>)
    9934:	4798      	blx	r3
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    9936:	2322      	movs	r3, #34	; 0x22
    9938:	733b      	strb	r3, [r7, #12]
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
    993a:	4b14      	ldr	r3, [pc, #80]	; (998c <temp_sensor_init+0x88>)
    993c:	69da      	ldr	r2, [r3, #28]
    993e:	4332      	orrs	r2, r6
    9940:	61da      	str	r2, [r3, #28]
			SUPC->VREF.reg &= ~SUPC_VREF_VREFOE;
    9942:	69da      	ldr	r2, [r3, #28]
    9944:	2104      	movs	r1, #4
    9946:	438a      	bics	r2, r1
    9948:	61da      	str	r2, [r3, #28]
	Adc *const adc_module = module_inst->hw;
    994a:	682a      	ldr	r2, [r5, #0]
    994c:	8c13      	ldrh	r3, [r2, #32]
    994e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9950:	2b00      	cmp	r3, #0
    9952:	d1fb      	bne.n	994c <temp_sensor_init+0x48>
    9954:	2180      	movs	r1, #128	; 0x80
    9956:	03c9      	lsls	r1, r1, #15
    9958:	4b0d      	ldr	r3, [pc, #52]	; (9990 <temp_sensor_init+0x8c>)
    995a:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    995c:	2307      	movs	r3, #7
    995e:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    9960:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    9962:	7813      	ldrb	r3, [r2, #0]
    9964:	2102      	movs	r1, #2
    9966:	430b      	orrs	r3, r1
    9968:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    996a:	4b06      	ldr	r3, [pc, #24]	; (9984 <temp_sensor_init+0x80>)
    996c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    996e:	8c13      	ldrh	r3, [r2, #32]
    9970:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9972:	2b00      	cmp	r3, #0
    9974:	d1fb      	bne.n	996e <temp_sensor_init+0x6a>
}
    9976:	b00d      	add	sp, #52	; 0x34
    9978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	0000028d 	.word	0x0000028d
    9980:	43000c00 	.word	0x43000c00
    9984:	200018f4 	.word	0x200018f4
    9988:	000002d1 	.word	0x000002d1
    998c:	40001400 	.word	0x40001400
    9990:	e000e100 	.word	0xe000e100

00009994 <get_temp_sensor_data>:
	
	return fine_temp;
}

void get_temp_sensor_data(uint8_t *data)
{
    9994:	b5f0      	push	{r4, r5, r6, r7, lr}
    9996:	46de      	mov	lr, fp
    9998:	4657      	mov	r7, sl
    999a:	464e      	mov	r6, r9
    999c:	4645      	mov	r5, r8
    999e:	b5e0      	push	{r5, r6, r7, lr}
    99a0:	b08f      	sub	sp, #60	; 0x3c
    99a2:	9008      	str	r0, [sp, #32]
	val1 = *temp_log_row_ptr;
    99a4:	4b7a      	ldr	r3, [pc, #488]	; (9b90 <get_temp_sensor_data+0x1fc>)
    99a6:	681b      	ldr	r3, [r3, #0]
    99a8:	930b      	str	r3, [sp, #44]	; 0x2c
	val2 = *temp_log_row_ptr;
    99aa:	4b7a      	ldr	r3, [pc, #488]	; (9b94 <get_temp_sensor_data+0x200>)
    99ac:	681b      	ldr	r3, [r3, #0]
    99ae:	930c      	str	r3, [sp, #48]	; 0x30
	room_temp_val_int = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_INT_Msk) >> FUSES_ROOM_TEMP_VAL_INT_Pos);
    99b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
    99b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
    99b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99b6:	4698      	mov	r8, r3
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
    99b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99ba:	4699      	mov	r9, r3
	room_int1v_val = (int8_t)((val1 & FUSES_ROOM_INT1V_VAL_Msk) >> FUSES_ROOM_INT1V_VAL_Pos);
    99bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	hot_int1v_val = (int8_t)((val2 & FUSES_HOT_INT1V_VAL_Msk) >> FUSES_HOT_INT1V_VAL_Pos);
    99be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    99c0:	9303      	str	r3, [sp, #12]
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
    99c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    99c4:	9204      	str	r2, [sp, #16]
	ADCH = (uint16_t)((val2 & FUSES_HOT_ADC_VAL_Msk) >> FUSES_HOT_ADC_VAL_Pos);
    99c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    99c8:	9105      	str	r1, [sp, #20]
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
    99ca:	0a00      	lsrs	r0, r0, #8
    99cc:	260f      	movs	r6, #15
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
    99ce:	4030      	ands	r0, r6
    99d0:	4d71      	ldr	r5, [pc, #452]	; (9b98 <get_temp_sensor_data+0x204>)
    99d2:	46ab      	mov	fp, r5
    99d4:	47a8      	blx	r5
    99d6:	9001      	str	r0, [sp, #4]
    99d8:	25ff      	movs	r5, #255	; 0xff
    99da:	402c      	ands	r4, r5
    99dc:	0020      	movs	r0, r4
    99de:	4c6f      	ldr	r4, [pc, #444]	; (9b9c <get_temp_sensor_data+0x208>)
    99e0:	47a0      	blx	r4
    99e2:	4a6f      	ldr	r2, [pc, #444]	; (9ba0 <get_temp_sensor_data+0x20c>)
    99e4:	4692      	mov	sl, r2
    99e6:	9901      	ldr	r1, [sp, #4]
    99e8:	4790      	blx	r2
    99ea:	9001      	str	r0, [sp, #4]
    99ec:	4b6d      	ldr	r3, [pc, #436]	; (9ba4 <get_temp_sensor_data+0x210>)
    99ee:	6018      	str	r0, [r3, #0]
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
    99f0:	4648      	mov	r0, r9
    99f2:	0d00      	lsrs	r0, r0, #20
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    99f4:	4030      	ands	r0, r6
    99f6:	47d8      	blx	fp
    99f8:	1c06      	adds	r6, r0, #0
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
    99fa:	4640      	mov	r0, r8
    99fc:	0b00      	lsrs	r0, r0, #12
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    99fe:	4028      	ands	r0, r5
    9a00:	47a0      	blx	r4
    9a02:	1c31      	adds	r1, r6, #0
    9a04:	47d0      	blx	sl
    9a06:	9006      	str	r0, [sp, #24]
    9a08:	4b67      	ldr	r3, [pc, #412]	; (9ba8 <get_temp_sensor_data+0x214>)
    9a0a:	6018      	str	r0, [r3, #0]
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
    9a0c:	1638      	asrs	r0, r7, #24
    9a0e:	47a0      	blx	r4
    9a10:	4d66      	ldr	r5, [pc, #408]	; (9bac <get_temp_sensor_data+0x218>)
    9a12:	46a9      	mov	r9, r5
    9a14:	47a8      	blx	r5
    9a16:	4d66      	ldr	r5, [pc, #408]	; (9bb0 <get_temp_sensor_data+0x21c>)
    9a18:	2200      	movs	r2, #0
    9a1a:	4b66      	ldr	r3, [pc, #408]	; (9bb4 <get_temp_sensor_data+0x220>)
    9a1c:	47a8      	blx	r5
    9a1e:	0002      	movs	r2, r0
    9a20:	000b      	movs	r3, r1
    9a22:	4f65      	ldr	r7, [pc, #404]	; (9bb8 <get_temp_sensor_data+0x224>)
    9a24:	2000      	movs	r0, #0
    9a26:	4965      	ldr	r1, [pc, #404]	; (9bbc <get_temp_sensor_data+0x228>)
    9a28:	47b8      	blx	r7
    9a2a:	4e65      	ldr	r6, [pc, #404]	; (9bc0 <get_temp_sensor_data+0x22c>)
    9a2c:	47b0      	blx	r6
    9a2e:	4b65      	ldr	r3, [pc, #404]	; (9bc4 <get_temp_sensor_data+0x230>)
    9a30:	9002      	str	r0, [sp, #8]
    9a32:	6018      	str	r0, [r3, #0]
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
    9a34:	466b      	mov	r3, sp
    9a36:	200c      	movs	r0, #12
    9a38:	5618      	ldrsb	r0, [r3, r0]
    9a3a:	47a0      	blx	r4
    9a3c:	47c8      	blx	r9
    9a3e:	2200      	movs	r2, #0
    9a40:	4b5c      	ldr	r3, [pc, #368]	; (9bb4 <get_temp_sensor_data+0x220>)
    9a42:	47a8      	blx	r5
    9a44:	0002      	movs	r2, r0
    9a46:	000b      	movs	r3, r1
    9a48:	2000      	movs	r0, #0
    9a4a:	495c      	ldr	r1, [pc, #368]	; (9bbc <get_temp_sensor_data+0x228>)
    9a4c:	47b8      	blx	r7
    9a4e:	47b0      	blx	r6
    9a50:	1c05      	adds	r5, r0, #0
    9a52:	9007      	str	r0, [sp, #28]
    9a54:	4b5c      	ldr	r3, [pc, #368]	; (9bc8 <get_temp_sensor_data+0x234>)
    9a56:	6018      	str	r0, [r3, #0]
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
    9a58:	9b04      	ldr	r3, [sp, #16]
    9a5a:	0318      	lsls	r0, r3, #12
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    9a5c:	0d00      	lsrs	r0, r0, #20
    9a5e:	4e5b      	ldr	r6, [pc, #364]	; (9bcc <get_temp_sensor_data+0x238>)
    9a60:	47b0      	blx	r6
    9a62:	4c5b      	ldr	r4, [pc, #364]	; (9bd0 <get_temp_sensor_data+0x23c>)
    9a64:	9902      	ldr	r1, [sp, #8]
    9a66:	47a0      	blx	r4
    9a68:	4f5a      	ldr	r7, [pc, #360]	; (9bd4 <get_temp_sensor_data+0x240>)
    9a6a:	495b      	ldr	r1, [pc, #364]	; (9bd8 <get_temp_sensor_data+0x244>)
    9a6c:	47b8      	blx	r7
    9a6e:	9003      	str	r0, [sp, #12]
    9a70:	4b5a      	ldr	r3, [pc, #360]	; (9bdc <get_temp_sensor_data+0x248>)
    9a72:	6018      	str	r0, [r3, #0]
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    9a74:	9905      	ldr	r1, [sp, #20]
    9a76:	0d08      	lsrs	r0, r1, #20
    9a78:	47b0      	blx	r6
    9a7a:	1c29      	adds	r1, r5, #0
    9a7c:	47a0      	blx	r4
    9a7e:	4956      	ldr	r1, [pc, #344]	; (9bd8 <get_temp_sensor_data+0x244>)
    9a80:	47b8      	blx	r7
    9a82:	1c07      	adds	r7, r0, #0
    9a84:	4b56      	ldr	r3, [pc, #344]	; (9be0 <get_temp_sensor_data+0x24c>)
    9a86:	6018      	str	r0, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    9a88:	4b56      	ldr	r3, [pc, #344]	; (9be4 <get_temp_sensor_data+0x250>)
    9a8a:	6818      	ldr	r0, [r3, #0]
    9a8c:	8c03      	ldrh	r3, [r0, #32]
    9a8e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9a90:	2b00      	cmp	r3, #0
    9a92:	d1fb      	bne.n	9a8c <get_temp_sensor_data+0xf8>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    9a94:	7e03      	ldrb	r3, [r0, #24]
    9a96:	2202      	movs	r2, #2
    9a98:	4313      	orrs	r3, r2
    9a9a:	7603      	strb	r3, [r0, #24]
    9a9c:	8c03      	ldrh	r3, [r0, #32]
    9a9e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d1fb      	bne.n	9a9c <get_temp_sensor_data+0x108>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9aa4:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    9aa6:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    9aa8:	2402      	movs	r4, #2
    9aaa:	e001      	b.n	9ab0 <get_temp_sensor_data+0x11c>
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    9aac:	4211      	tst	r1, r2
    9aae:	d10a      	bne.n	9ac6 <get_temp_sensor_data+0x132>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    9ab0:	7983      	ldrb	r3, [r0, #6]
    9ab2:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9ab4:	000a      	movs	r2, r1
    9ab6:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    9ab8:	421e      	tst	r6, r3
    9aba:	d000      	beq.n	9abe <get_temp_sensor_data+0x12a>
		status_flags |= ADC_STATUS_WINDOW;
    9abc:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9abe:	421c      	tst	r4, r3
    9ac0:	d0f4      	beq.n	9aac <get_temp_sensor_data+0x118>
		status_flags |= ADC_STATUS_OVERRUN;
    9ac2:	4332      	orrs	r2, r6
    9ac4:	e7f2      	b.n	9aac <get_temp_sensor_data+0x118>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    9ac6:	7982      	ldrb	r2, [r0, #6]
    9ac8:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9aca:	2301      	movs	r3, #1
    9acc:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    9ace:	0751      	lsls	r1, r2, #29
    9ad0:	d501      	bpl.n	9ad6 <get_temp_sensor_data+0x142>
		status_flags |= ADC_STATUS_WINDOW;
    9ad2:	2102      	movs	r1, #2
    9ad4:	430b      	orrs	r3, r1
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9ad6:	0792      	lsls	r2, r2, #30
    9ad8:	d501      	bpl.n	9ade <get_temp_sensor_data+0x14a>
		status_flags |= ADC_STATUS_OVERRUN;
    9ada:	2204      	movs	r2, #4
    9adc:	4313      	orrs	r3, r2
	uint16_t adc_result = 0;
    9ade:	2200      	movs	r2, #0
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    9ae0:	07db      	lsls	r3, r3, #31
    9ae2:	d441      	bmi.n	9b68 <get_temp_sensor_data+0x1d4>
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    9ae4:	0010      	movs	r0, r2
    9ae6:	4b39      	ldr	r3, [pc, #228]	; (9bcc <get_temp_sensor_data+0x238>)
    9ae8:	4798      	blx	r3
    9aea:	9004      	str	r0, [sp, #16]
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    9aec:	4e3e      	ldr	r6, [pc, #248]	; (9be8 <get_temp_sensor_data+0x254>)
    9aee:	9901      	ldr	r1, [sp, #4]
    9af0:	9806      	ldr	r0, [sp, #24]
    9af2:	47b0      	blx	r6
    9af4:	9005      	str	r0, [sp, #20]
    9af6:	9d03      	ldr	r5, [sp, #12]
    9af8:	1c29      	adds	r1, r5, #0
    9afa:	1c38      	adds	r0, r7, #0
    9afc:	47b0      	blx	r6
    9afe:	1c01      	adds	r1, r0, #0
    9b00:	4c34      	ldr	r4, [pc, #208]	; (9bd4 <get_temp_sensor_data+0x240>)
    9b02:	9805      	ldr	r0, [sp, #20]
    9b04:	47a0      	blx	r4
    9b06:	9006      	str	r0, [sp, #24]
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    9b08:	4933      	ldr	r1, [pc, #204]	; (9bd8 <get_temp_sensor_data+0x244>)
    9b0a:	9804      	ldr	r0, [sp, #16]
    9b0c:	47a0      	blx	r4
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    9b0e:	9503      	str	r5, [sp, #12]
    9b10:	1c29      	adds	r1, r5, #0
    9b12:	47b0      	blx	r6
    9b14:	4f2e      	ldr	r7, [pc, #184]	; (9bd0 <get_temp_sensor_data+0x23c>)
    9b16:	9906      	ldr	r1, [sp, #24]
    9b18:	47b8      	blx	r7
    9b1a:	4d21      	ldr	r5, [pc, #132]	; (9ba0 <get_temp_sensor_data+0x20c>)
    9b1c:	9901      	ldr	r1, [sp, #4]
    9b1e:	47a8      	blx	r5
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
    9b20:	9901      	ldr	r1, [sp, #4]
    9b22:	47b0      	blx	r6
    9b24:	9009      	str	r0, [sp, #36]	; 0x24
    9b26:	9902      	ldr	r1, [sp, #8]
    9b28:	9807      	ldr	r0, [sp, #28]
    9b2a:	47b0      	blx	r6
    9b2c:	1c01      	adds	r1, r0, #0
    9b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b30:	47b8      	blx	r7
    9b32:	9905      	ldr	r1, [sp, #20]
    9b34:	47a0      	blx	r4
    9b36:	9902      	ldr	r1, [sp, #8]
    9b38:	47a8      	blx	r5
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    9b3a:	9904      	ldr	r1, [sp, #16]
    9b3c:	47b8      	blx	r7
    9b3e:	4926      	ldr	r1, [pc, #152]	; (9bd8 <get_temp_sensor_data+0x244>)
    9b40:	47a0      	blx	r4
	fine_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR));
    9b42:	9903      	ldr	r1, [sp, #12]
    9b44:	47b0      	blx	r6
    9b46:	9906      	ldr	r1, [sp, #24]
    9b48:	47b8      	blx	r7
    9b4a:	9901      	ldr	r1, [sp, #4]
    9b4c:	47a8      	blx	r5
	float local_temp = 0;
	local_temp = temp_sensor_value(0);
    9b4e:	900d      	str	r0, [sp, #52]	; 0x34
	memcpy(data,(uint8_t *)&local_temp,sizeof(local_temp));	
    9b50:	2204      	movs	r2, #4
    9b52:	a90d      	add	r1, sp, #52	; 0x34
    9b54:	9808      	ldr	r0, [sp, #32]
    9b56:	4b25      	ldr	r3, [pc, #148]	; (9bec <get_temp_sensor_data+0x258>)
    9b58:	4798      	blx	r3
}
    9b5a:	b00f      	add	sp, #60	; 0x3c
    9b5c:	bc3c      	pop	{r2, r3, r4, r5}
    9b5e:	4690      	mov	r8, r2
    9b60:	4699      	mov	r9, r3
    9b62:	46a2      	mov	sl, r4
    9b64:	46ab      	mov	fp, r5
    9b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*result = adc_module->RESULT.reg;
    9b68:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    9b6a:	b292      	uxth	r2, r2
	adc_module->INTFLAG.reg = int_flags;
    9b6c:	2301      	movs	r3, #1
    9b6e:	7183      	strb	r3, [r0, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    9b70:	7981      	ldrb	r1, [r0, #6]
    9b72:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9b74:	400b      	ands	r3, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    9b76:	074c      	lsls	r4, r1, #29
    9b78:	d501      	bpl.n	9b7e <get_temp_sensor_data+0x1ea>
		status_flags |= ADC_STATUS_WINDOW;
    9b7a:	2402      	movs	r4, #2
    9b7c:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9b7e:	0789      	lsls	r1, r1, #30
    9b80:	d501      	bpl.n	9b86 <get_temp_sensor_data+0x1f2>
		status_flags |= ADC_STATUS_OVERRUN;
    9b82:	2104      	movs	r1, #4
    9b84:	430b      	orrs	r3, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    9b86:	075b      	lsls	r3, r3, #29
    9b88:	d5ac      	bpl.n	9ae4 <get_temp_sensor_data+0x150>
	adc_module->INTFLAG.reg = int_flags;
    9b8a:	2302      	movs	r3, #2
    9b8c:	7183      	strb	r3, [r0, #6]
    9b8e:	e7a9      	b.n	9ae4 <get_temp_sensor_data+0x150>
    9b90:	00806030 	.word	0x00806030
    9b94:	00806034 	.word	0x00806034
    9b98:	000098c1 	.word	0x000098c1
    9b9c:	000139ad 	.word	0x000139ad
    9ba0:	00012cf1 	.word	0x00012cf1
    9ba4:	20000f94 	.word	0x20000f94
    9ba8:	20000f90 	.word	0x20000f90
    9bac:	00015365 	.word	0x00015365
    9bb0:	000140f9 	.word	0x000140f9
    9bb4:	408f4000 	.word	0x408f4000
    9bb8:	00014c61 	.word	0x00014c61
    9bbc:	3ff00000 	.word	0x3ff00000
    9bc0:	00015409 	.word	0x00015409
    9bc4:	20000f84 	.word	0x20000f84
    9bc8:	20000f80 	.word	0x20000f80
    9bcc:	00013a4d 	.word	0x00013a4d
    9bd0:	000133f5 	.word	0x000133f5
    9bd4:	00013015 	.word	0x00013015
    9bd8:	457ff000 	.word	0x457ff000
    9bdc:	20000f8c 	.word	0x20000f8c
    9be0:	20000f88 	.word	0x20000f88
    9be4:	200018f4 	.word	0x200018f4
    9be8:	00013635 	.word	0x00013635
    9bec:	000158c9 	.word	0x000158c9

00009bf0 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    9bf0:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    9bf2:	4b06      	ldr	r3, [pc, #24]	; (9c0c <hwTimerExpiryCallback+0x1c>)
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	d100      	bne.n	9bfc <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    9bfa:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    9bfc:	2201      	movs	r2, #1
    9bfe:	4b04      	ldr	r3, [pc, #16]	; (9c10 <hwTimerExpiryCallback+0x20>)
    9c00:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    9c02:	2001      	movs	r0, #1
    9c04:	4b03      	ldr	r3, [pc, #12]	; (9c14 <hwTimerExpiryCallback+0x24>)
    9c06:	4798      	blx	r3
}
    9c08:	e7f7      	b.n	9bfa <hwTimerExpiryCallback+0xa>
    9c0a:	46c0      	nop			; (mov r8, r8)
    9c0c:	20000fa8 	.word	0x20000fa8
    9c10:	20001aa6 	.word	0x20001aa6
    9c14:	0000a511 	.word	0x0000a511

00009c18 <hwTimerOverflowCallback>:
{
    9c18:	b510      	push	{r4, lr}
    9c1a:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    9c1c:	4924      	ldr	r1, [pc, #144]	; (9cb0 <hwTimerOverflowCallback+0x98>)
    9c1e:	880a      	ldrh	r2, [r1, #0]
    9c20:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    9c22:	880b      	ldrh	r3, [r1, #0]
    9c24:	3301      	adds	r3, #1
    9c26:	b29b      	uxth	r3, r3
    9c28:	800b      	strh	r3, [r1, #0]
    9c2a:	429a      	cmp	r2, r3
    9c2c:	d903      	bls.n	9c36 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    9c2e:	4a21      	ldr	r2, [pc, #132]	; (9cb4 <hwTimerOverflowCallback+0x9c>)
    9c30:	6813      	ldr	r3, [r2, #0]
    9c32:	3301      	adds	r3, #1
    9c34:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9c36:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9c3a:	425a      	negs	r2, r3
    9c3c:	4153      	adcs	r3, r2
    9c3e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9c40:	b672      	cpsid	i
  __ASM volatile ("dmb");
    9c42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9c46:	2200      	movs	r2, #0
    9c48:	4b1b      	ldr	r3, [pc, #108]	; (9cb8 <hwTimerOverflowCallback+0xa0>)
    9c4a:	701a      	strb	r2, [r3, #0]
	return flags;
    9c4c:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    9c4e:	4b1b      	ldr	r3, [pc, #108]	; (9cbc <hwTimerOverflowCallback+0xa4>)
    9c50:	681b      	ldr	r3, [r3, #0]
    9c52:	2bff      	cmp	r3, #255	; 0xff
    9c54:	d00d      	beq.n	9c72 <hwTimerOverflowCallback+0x5a>
    9c56:	0119      	lsls	r1, r3, #4
    9c58:	4a19      	ldr	r2, [pc, #100]	; (9cc0 <hwTimerOverflowCallback+0xa8>)
    9c5a:	1852      	adds	r2, r2, r1
    9c5c:	7b52      	ldrb	r2, [r2, #13]
    9c5e:	2a00      	cmp	r2, #0
    9c60:	d107      	bne.n	9c72 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    9c62:	4a17      	ldr	r2, [pc, #92]	; (9cc0 <hwTimerOverflowCallback+0xa8>)
    9c64:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    9c66:	4b12      	ldr	r3, [pc, #72]	; (9cb0 <hwTimerOverflowCallback+0x98>)
    9c68:	881b      	ldrh	r3, [r3, #0]
    9c6a:	b29b      	uxth	r3, r3
    9c6c:	0c02      	lsrs	r2, r0, #16
    9c6e:	429a      	cmp	r2, r3
    9c70:	d00a      	beq.n	9c88 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    9c72:	23ff      	movs	r3, #255	; 0xff
    9c74:	4223      	tst	r3, r4
    9c76:	d005      	beq.n	9c84 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    9c78:	2201      	movs	r2, #1
    9c7a:	4b0f      	ldr	r3, [pc, #60]	; (9cb8 <hwTimerOverflowCallback+0xa0>)
    9c7c:	701a      	strb	r2, [r3, #0]
    9c7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9c82:	b662      	cpsie	i
}
    9c84:	b002      	add	sp, #8
    9c86:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    9c88:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    9c8a:	28ff      	cmp	r0, #255	; 0xff
    9c8c:	d909      	bls.n	9ca2 <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    9c8e:	4b0d      	ldr	r3, [pc, #52]	; (9cc4 <hwTimerOverflowCallback+0xac>)
    9c90:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    9c92:	4b0a      	ldr	r3, [pc, #40]	; (9cbc <hwTimerOverflowCallback+0xa4>)
    9c94:	681a      	ldr	r2, [r3, #0]
    9c96:	0112      	lsls	r2, r2, #4
    9c98:	4b09      	ldr	r3, [pc, #36]	; (9cc0 <hwTimerOverflowCallback+0xa8>)
    9c9a:	189b      	adds	r3, r3, r2
    9c9c:	2201      	movs	r2, #1
    9c9e:	735a      	strb	r2, [r3, #13]
    9ca0:	e7e7      	b.n	9c72 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    9ca2:	2201      	movs	r2, #1
    9ca4:	4b08      	ldr	r3, [pc, #32]	; (9cc8 <hwTimerOverflowCallback+0xb0>)
    9ca6:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    9ca8:	2001      	movs	r0, #1
    9caa:	4b08      	ldr	r3, [pc, #32]	; (9ccc <hwTimerOverflowCallback+0xb4>)
    9cac:	4798      	blx	r3
    9cae:	e7e0      	b.n	9c72 <hwTimerOverflowCallback+0x5a>
    9cb0:	20001aa4 	.word	0x20001aa4
    9cb4:	20001aa8 	.word	0x20001aa8
    9cb8:	20000008 	.word	0x20000008
    9cbc:	20000fa4 	.word	0x20000fa4
    9cc0:	20001914 	.word	0x20001914
    9cc4:	0000c889 	.word	0x0000c889
    9cc8:	20001aa6 	.word	0x20001aa6
    9ccc:	0000a511 	.word	0x0000a511

00009cd0 <loadHwTimer>:
{
    9cd0:	b570      	push	{r4, r5, r6, lr}
    9cd2:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    9cd4:	28ff      	cmp	r0, #255	; 0xff
    9cd6:	d030      	beq.n	9d3a <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    9cd8:	4b19      	ldr	r3, [pc, #100]	; (9d40 <loadHwTimer+0x70>)
    9cda:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9cdc:	4b19      	ldr	r3, [pc, #100]	; (9d44 <loadHwTimer+0x74>)
    9cde:	881d      	ldrh	r5, [r3, #0]
    9ce0:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9ce2:	4b19      	ldr	r3, [pc, #100]	; (9d48 <loadHwTimer+0x78>)
    9ce4:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    9ce6:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    9ce8:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    9cea:	4a18      	ldr	r2, [pc, #96]	; (9d4c <loadHwTimer+0x7c>)
    9cec:	589b      	ldr	r3, [r3, r2]
    9cee:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    9cf0:	4b17      	ldr	r3, [pc, #92]	; (9d50 <loadHwTimer+0x80>)
    9cf2:	4298      	cmp	r0, r3
    9cf4:	d81a      	bhi.n	9d2c <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    9cf6:	0122      	lsls	r2, r4, #4
    9cf8:	4b14      	ldr	r3, [pc, #80]	; (9d4c <loadHwTimer+0x7c>)
    9cfa:	189b      	adds	r3, r3, r2
    9cfc:	7b5b      	ldrb	r3, [r3, #13]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d11d      	bne.n	9d3e <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    9d02:	28ff      	cmp	r0, #255	; 0xff
    9d04:	d90b      	bls.n	9d1e <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    9d06:	4b13      	ldr	r3, [pc, #76]	; (9d54 <loadHwTimer+0x84>)
    9d08:	4298      	cmp	r0, r3
    9d0a:	d818      	bhi.n	9d3e <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    9d0c:	b280      	uxth	r0, r0
    9d0e:	4b12      	ldr	r3, [pc, #72]	; (9d58 <loadHwTimer+0x88>)
    9d10:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    9d12:	0124      	lsls	r4, r4, #4
    9d14:	4b0d      	ldr	r3, [pc, #52]	; (9d4c <loadHwTimer+0x7c>)
    9d16:	191c      	adds	r4, r3, r4
    9d18:	2301      	movs	r3, #1
    9d1a:	7363      	strb	r3, [r4, #13]
    9d1c:	e00f      	b.n	9d3e <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    9d1e:	2201      	movs	r2, #1
    9d20:	4b0e      	ldr	r3, [pc, #56]	; (9d5c <loadHwTimer+0x8c>)
    9d22:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    9d24:	2001      	movs	r0, #1
    9d26:	4b0e      	ldr	r3, [pc, #56]	; (9d60 <loadHwTimer+0x90>)
    9d28:	4798      	blx	r3
    9d2a:	e008      	b.n	9d3e <loadHwTimer+0x6e>
            isTimerTriggered = true;
    9d2c:	2201      	movs	r2, #1
    9d2e:	4b0b      	ldr	r3, [pc, #44]	; (9d5c <loadHwTimer+0x8c>)
    9d30:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9d32:	2001      	movs	r0, #1
    9d34:	4b0a      	ldr	r3, [pc, #40]	; (9d60 <loadHwTimer+0x90>)
    9d36:	4798      	blx	r3
    9d38:	e001      	b.n	9d3e <loadHwTimer+0x6e>
        common_tc_compare_stop();
    9d3a:	4b0a      	ldr	r3, [pc, #40]	; (9d64 <loadHwTimer+0x94>)
    9d3c:	4798      	blx	r3
}
    9d3e:	bd70      	pop	{r4, r5, r6, pc}
    9d40:	20001aa8 	.word	0x20001aa8
    9d44:	20001aa4 	.word	0x20001aa4
    9d48:	0000c7e1 	.word	0x0000c7e1
    9d4c:	20001914 	.word	0x20001914
    9d50:	7ffffffe 	.word	0x7ffffffe
    9d54:	0000ffff 	.word	0x0000ffff
    9d58:	0000c889 	.word	0x0000c889
    9d5c:	20001aa6 	.word	0x20001aa6
    9d60:	0000a511 	.word	0x0000a511
    9d64:	0000c82d 	.word	0x0000c82d

00009d68 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    9d68:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    9d6a:	4b1d      	ldr	r3, [pc, #116]	; (9de0 <swtimerInternalHandler+0x78>)
    9d6c:	781b      	ldrb	r3, [r3, #0]
    9d6e:	2b00      	cmp	r3, #0
    9d70:	d027      	beq.n	9dc2 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    9d72:	2200      	movs	r2, #0
    9d74:	4b1a      	ldr	r3, [pc, #104]	; (9de0 <swtimerInternalHandler+0x78>)
    9d76:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    9d78:	4b1a      	ldr	r3, [pc, #104]	; (9de4 <swtimerInternalHandler+0x7c>)
    9d7a:	781b      	ldrb	r3, [r3, #0]
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d020      	beq.n	9dc2 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    9d80:	4b19      	ldr	r3, [pc, #100]	; (9de8 <swtimerInternalHandler+0x80>)
    9d82:	681b      	ldr	r3, [r3, #0]
    9d84:	2bff      	cmp	r3, #255	; 0xff
    9d86:	d01d      	beq.n	9dc4 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    9d88:	4b18      	ldr	r3, [pc, #96]	; (9dec <swtimerInternalHandler+0x84>)
    9d8a:	6818      	ldr	r0, [r3, #0]
    9d8c:	4918      	ldr	r1, [pc, #96]	; (9df0 <swtimerInternalHandler+0x88>)
    9d8e:	680b      	ldr	r3, [r1, #0]
    9d90:	011a      	lsls	r2, r3, #4
    9d92:	4b18      	ldr	r3, [pc, #96]	; (9df4 <swtimerInternalHandler+0x8c>)
    9d94:	189b      	adds	r3, r3, r2
    9d96:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    9d98:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    9d9a:	4a16      	ldr	r2, [pc, #88]	; (9df4 <swtimerInternalHandler+0x8c>)
    9d9c:	4913      	ldr	r1, [pc, #76]	; (9dec <swtimerInternalHandler+0x84>)
    9d9e:	680b      	ldr	r3, [r1, #0]
    9da0:	011b      	lsls	r3, r3, #4
    9da2:	18d3      	adds	r3, r2, r3
    9da4:	7b18      	ldrb	r0, [r3, #12]
    9da6:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    9da8:	4b11      	ldr	r3, [pc, #68]	; (9df0 <swtimerInternalHandler+0x88>)
    9daa:	681b      	ldr	r3, [r3, #0]
    9dac:	011b      	lsls	r3, r3, #4
    9dae:	18d2      	adds	r2, r2, r3
    9db0:	23ff      	movs	r3, #255	; 0xff
    9db2:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    9db4:	4a0b      	ldr	r2, [pc, #44]	; (9de4 <swtimerInternalHandler+0x7c>)
    9db6:	7813      	ldrb	r3, [r2, #0]
    9db8:	3b01      	subs	r3, #1
    9dba:	b2db      	uxtb	r3, r3
    9dbc:	7013      	strb	r3, [r2, #0]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d10b      	bne.n	9dda <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    9dc2:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    9dc4:	4b0a      	ldr	r3, [pc, #40]	; (9df0 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    9dc6:	681b      	ldr	r3, [r3, #0]
    9dc8:	2bff      	cmp	r3, #255	; 0xff
    9dca:	d1dd      	bne.n	9d88 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    9dcc:	4b07      	ldr	r3, [pc, #28]	; (9dec <swtimerInternalHandler+0x84>)
    9dce:	681b      	ldr	r3, [r3, #0]
    9dd0:	4a05      	ldr	r2, [pc, #20]	; (9de8 <swtimerInternalHandler+0x80>)
    9dd2:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    9dd4:	4a06      	ldr	r2, [pc, #24]	; (9df0 <swtimerInternalHandler+0x88>)
    9dd6:	6013      	str	r3, [r2, #0]
    9dd8:	e7df      	b.n	9d9a <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    9dda:	4b07      	ldr	r3, [pc, #28]	; (9df8 <swtimerInternalHandler+0x90>)
    9ddc:	4798      	blx	r3
}
    9dde:	e7f0      	b.n	9dc2 <swtimerInternalHandler+0x5a>
    9de0:	20001aa6 	.word	0x20001aa6
    9de4:	20000fa8 	.word	0x20000fa8
    9de8:	20000f9c 	.word	0x20000f9c
    9dec:	20000fa4 	.word	0x20000fa4
    9df0:	20000fa0 	.word	0x20000fa0
    9df4:	20001914 	.word	0x20001914
    9df8:	00009cd1 	.word	0x00009cd1

00009dfc <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    9dfc:	2300      	movs	r3, #0
    9dfe:	4a0d      	ldr	r2, [pc, #52]	; (9e34 <SwTimerReset+0x38>)
    9e00:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    9e02:	4a0d      	ldr	r2, [pc, #52]	; (9e38 <SwTimerReset+0x3c>)
    9e04:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    9e06:	33ff      	adds	r3, #255	; 0xff
    9e08:	4a0c      	ldr	r2, [pc, #48]	; (9e3c <SwTimerReset+0x40>)
    9e0a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    9e0c:	4a0c      	ldr	r2, [pc, #48]	; (9e40 <SwTimerReset+0x44>)
    9e0e:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    9e10:	4a0c      	ldr	r2, [pc, #48]	; (9e44 <SwTimerReset+0x48>)
    9e12:	6013      	str	r3, [r2, #0]
    9e14:	4b0c      	ldr	r3, [pc, #48]	; (9e48 <SwTimerReset+0x4c>)
    9e16:	0018      	movs	r0, r3
    9e18:	3091      	adds	r0, #145	; 0x91
    9e1a:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9e1c:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    9e1e:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9e20:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    9e22:	601a      	str	r2, [r3, #0]
    9e24:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    9e26:	4283      	cmp	r3, r0
    9e28:	d1fa      	bne.n	9e20 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    9e2a:	2200      	movs	r2, #0
    9e2c:	4b07      	ldr	r3, [pc, #28]	; (9e4c <SwTimerReset+0x50>)
    9e2e:	701a      	strb	r2, [r3, #0]
}
    9e30:	4770      	bx	lr
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	20000fa8 	.word	0x20000fa8
    9e38:	20001aa6 	.word	0x20001aa6
    9e3c:	20000fa4 	.word	0x20000fa4
    9e40:	20000f9c 	.word	0x20000f9c
    9e44:	20000fa0 	.word	0x20000fa0
    9e48:	20001918 	.word	0x20001918
    9e4c:	20000f98 	.word	0x20000f98

00009e50 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    9e50:	b510      	push	{r4, lr}
    SwTimerReset();
    9e52:	4b08      	ldr	r3, [pc, #32]	; (9e74 <SystemTimerInit+0x24>)
    9e54:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    9e56:	2300      	movs	r3, #0
    9e58:	4a07      	ldr	r2, [pc, #28]	; (9e78 <SystemTimerInit+0x28>)
    9e5a:	8013      	strh	r3, [r2, #0]
    9e5c:	4a07      	ldr	r2, [pc, #28]	; (9e7c <SystemTimerInit+0x2c>)
    9e5e:	6013      	str	r3, [r2, #0]

    common_tc_init();
    9e60:	4b07      	ldr	r3, [pc, #28]	; (9e80 <SystemTimerInit+0x30>)
    9e62:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9e64:	4807      	ldr	r0, [pc, #28]	; (9e84 <SystemTimerInit+0x34>)
    9e66:	4b08      	ldr	r3, [pc, #32]	; (9e88 <SystemTimerInit+0x38>)
    9e68:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9e6a:	4808      	ldr	r0, [pc, #32]	; (9e8c <SystemTimerInit+0x3c>)
    9e6c:	4b08      	ldr	r3, [pc, #32]	; (9e90 <SystemTimerInit+0x40>)
    9e6e:	4798      	blx	r3
}
    9e70:	bd10      	pop	{r4, pc}
    9e72:	46c0      	nop			; (mov r8, r8)
    9e74:	00009dfd 	.word	0x00009dfd
    9e78:	20001aa4 	.word	0x20001aa4
    9e7c:	20001aa8 	.word	0x20001aa8
    9e80:	0000c8f5 	.word	0x0000c8f5
    9e84:	00009c19 	.word	0x00009c19
    9e88:	0000c979 	.word	0x0000c979
    9e8c:	00009bf1 	.word	0x00009bf1
    9e90:	0000c985 	.word	0x0000c985

00009e94 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    9e94:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9e96:	4b05      	ldr	r3, [pc, #20]	; (9eac <SwTimerGetTime+0x18>)
    9e98:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9e9a:	4b05      	ldr	r3, [pc, #20]	; (9eb0 <SwTimerGetTime+0x1c>)
    9e9c:	881d      	ldrh	r5, [r3, #0]
    9e9e:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9ea0:	4b04      	ldr	r3, [pc, #16]	; (9eb4 <SwTimerGetTime+0x20>)
    9ea2:	4798      	blx	r3
    9ea4:	4328      	orrs	r0, r5
    return gettime();
}
    9ea6:	0021      	movs	r1, r4
    9ea8:	bd70      	pop	{r4, r5, r6, pc}
    9eaa:	46c0      	nop			; (mov r8, r8)
    9eac:	20001aa8 	.word	0x20001aa8
    9eb0:	20001aa4 	.word	0x20001aa4
    9eb4:	0000c7e1 	.word	0x0000c7e1

00009eb8 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    9eb8:	b510      	push	{r4, lr}
    9eba:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9ebc:	4b08      	ldr	r3, [pc, #32]	; (9ee0 <SwTimerCreate+0x28>)
    9ebe:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    9ec0:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9ec2:	2b18      	cmp	r3, #24
    9ec4:	d900      	bls.n	9ec8 <SwTimerCreate+0x10>
    }

    return retVal;
}
    9ec6:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    9ec8:	4b06      	ldr	r3, [pc, #24]	; (9ee4 <SwTimerCreate+0x2c>)
    9eca:	4798      	blx	r3
        *timerId = allocatedTimerId;
    9ecc:	4a04      	ldr	r2, [pc, #16]	; (9ee0 <SwTimerCreate+0x28>)
    9ece:	7813      	ldrb	r3, [r2, #0]
    9ed0:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    9ed2:	3301      	adds	r3, #1
    9ed4:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    9ed6:	4b04      	ldr	r3, [pc, #16]	; (9ee8 <SwTimerCreate+0x30>)
    9ed8:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9eda:	2008      	movs	r0, #8
    9edc:	e7f3      	b.n	9ec6 <SwTimerCreate+0xe>
    9ede:	46c0      	nop			; (mov r8, r8)
    9ee0:	20000f98 	.word	0x20000f98
    9ee4:	00004165 	.word	0x00004165
    9ee8:	00004171 	.word	0x00004171

00009eec <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    9eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eee:	46d6      	mov	lr, sl
    9ef0:	464f      	mov	r7, r9
    9ef2:	4646      	mov	r6, r8
    9ef4:	b5c0      	push	{r6, r7, lr}
    9ef6:	b084      	sub	sp, #16
    9ef8:	0007      	movs	r7, r0
    9efa:	000d      	movs	r5, r1
    9efc:	0016      	movs	r6, r2
    9efe:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9f00:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    9f02:	2f18      	cmp	r7, #24
    9f04:	d809      	bhi.n	9f1a <SwTimerStart+0x2e>
    9f06:	2b00      	cmp	r3, #0
    9f08:	d100      	bne.n	9f0c <SwTimerStart+0x20>
    9f0a:	e08c      	b.n	a026 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    9f0c:	013a      	lsls	r2, r7, #4
    9f0e:	4b52      	ldr	r3, [pc, #328]	; (a058 <SwTimerStart+0x16c>)
    9f10:	189b      	adds	r3, r3, r2
    9f12:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    9f14:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    9f16:	2b00      	cmp	r3, #0
    9f18:	d005      	beq.n	9f26 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    9f1a:	b004      	add	sp, #16
    9f1c:	bc1c      	pop	{r2, r3, r4}
    9f1e:	4690      	mov	r8, r2
    9f20:	4699      	mov	r9, r3
    9f22:	46a2      	mov	sl, r4
    9f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9f26:	4b4d      	ldr	r3, [pc, #308]	; (a05c <SwTimerStart+0x170>)
    9f28:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9f2a:	4b4d      	ldr	r3, [pc, #308]	; (a060 <SwTimerStart+0x174>)
    9f2c:	8818      	ldrh	r0, [r3, #0]
    9f2e:	0403      	lsls	r3, r0, #16
    9f30:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    9f32:	4b4c      	ldr	r3, [pc, #304]	; (a064 <SwTimerStart+0x178>)
    9f34:	4798      	blx	r3
    9f36:	4643      	mov	r3, r8
    9f38:	4303      	orrs	r3, r0
    switch (timeoutType)
    9f3a:	2e00      	cmp	r6, #0
    9f3c:	d003      	beq.n	9f46 <SwTimerStart+0x5a>
    9f3e:	2e01      	cmp	r6, #1
    9f40:	d038      	beq.n	9fb4 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    9f42:	200a      	movs	r0, #10
    9f44:	e7e9      	b.n	9f1a <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9f46:	4948      	ldr	r1, [pc, #288]	; (a068 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9f48:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9f4a:	002a      	movs	r2, r5
    9f4c:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    9f4e:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9f50:	428a      	cmp	r2, r1
    9f52:	d8e2      	bhi.n	9f1a <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9f54:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9f58:	425a      	negs	r2, r3
    9f5a:	4153      	adcs	r3, r2
    9f5c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    9f5e:	b672      	cpsid	i
    9f60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9f64:	2600      	movs	r6, #0
    9f66:	4b41      	ldr	r3, [pc, #260]	; (a06c <SwTimerStart+0x180>)
    9f68:	701e      	strb	r6, [r3, #0]
	return flags;
    9f6a:	9b03      	ldr	r3, [sp, #12]
    9f6c:	4699      	mov	r9, r3
    swtimerInternalHandler();
    9f6e:	4b40      	ldr	r3, [pc, #256]	; (a070 <SwTimerStart+0x184>)
    9f70:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    9f72:	4b39      	ldr	r3, [pc, #228]	; (a058 <SwTimerStart+0x16c>)
    9f74:	013a      	lsls	r2, r7, #4
    9f76:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    9f78:	189b      	adds	r3, r3, r2
    9f7a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    9f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f7e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    9f80:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    9f82:	4a3c      	ldr	r2, [pc, #240]	; (a074 <SwTimerStart+0x188>)
    9f84:	7813      	ldrb	r3, [r2, #0]
    9f86:	3301      	adds	r3, #1
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    9f8c:	4b3a      	ldr	r3, [pc, #232]	; (a078 <SwTimerStart+0x18c>)
    9f8e:	681b      	ldr	r3, [r3, #0]
    9f90:	469a      	mov	sl, r3
    9f92:	2bff      	cmp	r3, #255	; 0xff
    9f94:	d016      	beq.n	9fc4 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    9f96:	466a      	mov	r2, sp
    9f98:	7013      	strb	r3, [r2, #0]
    9f9a:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    9f9c:	4b35      	ldr	r3, [pc, #212]	; (a074 <SwTimerStart+0x188>)
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d042      	beq.n	a02a <SwTimerStart+0x13e>
    9fa4:	9200      	str	r2, [sp, #0]
    9fa6:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9fa8:	492b      	ldr	r1, [pc, #172]	; (a058 <SwTimerStart+0x16c>)
    9faa:	4688      	mov	r8, r1
    9fac:	4833      	ldr	r0, [pc, #204]	; (a07c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    9fae:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    9fb0:	4c30      	ldr	r4, [pc, #192]	; (a074 <SwTimerStart+0x188>)
    9fb2:	e02a      	b.n	a00a <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9fb4:	0028      	movs	r0, r5
    9fb6:	38ff      	subs	r0, #255	; 0xff
    9fb8:	1ac3      	subs	r3, r0, r3
    9fba:	4a2b      	ldr	r2, [pc, #172]	; (a068 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9fbc:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9fbe:	4293      	cmp	r3, r2
    9fc0:	d9c8      	bls.n	9f54 <SwTimerStart+0x68>
    9fc2:	e7aa      	b.n	9f1a <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    9fc4:	4b2c      	ldr	r3, [pc, #176]	; (a078 <SwTimerStart+0x18c>)
    9fc6:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    9fc8:	0038      	movs	r0, r7
    9fca:	4b2d      	ldr	r3, [pc, #180]	; (a080 <SwTimerStart+0x194>)
    9fcc:	4798      	blx	r3
    9fce:	e036      	b.n	a03e <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    9fd0:	4b21      	ldr	r3, [pc, #132]	; (a058 <SwTimerStart+0x16c>)
    9fd2:	013c      	lsls	r4, r7, #4
    9fd4:	191c      	adds	r4, r3, r4
    9fd6:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    9fd8:	9901      	ldr	r1, [sp, #4]
    9fda:	0109      	lsls	r1, r1, #4
    9fdc:	1859      	adds	r1, r3, r1
    9fde:	2300      	movs	r3, #0
    9fe0:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    9fe2:	4592      	cmp	sl, r2
    9fe4:	d005      	beq.n	9ff2 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    9fe6:	9b00      	ldr	r3, [sp, #0]
    9fe8:	0118      	lsls	r0, r3, #4
    9fea:	4b1b      	ldr	r3, [pc, #108]	; (a058 <SwTimerStart+0x16c>)
    9fec:	1818      	adds	r0, r3, r0
    9fee:	7307      	strb	r7, [r0, #12]
    9ff0:	e025      	b.n	a03e <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    9ff2:	4b21      	ldr	r3, [pc, #132]	; (a078 <SwTimerStart+0x18c>)
    9ff4:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    9ff6:	0038      	movs	r0, r7
    9ff8:	4b21      	ldr	r3, [pc, #132]	; (a080 <SwTimerStart+0x194>)
    9ffa:	4798      	blx	r3
    9ffc:	e01f      	b.n	a03e <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    9ffe:	3301      	adds	r3, #1
    a000:	b2db      	uxtb	r3, r3
    a002:	7821      	ldrb	r1, [r4, #0]
    a004:	b2c9      	uxtb	r1, r1
    a006:	428b      	cmp	r3, r1
    a008:	d210      	bcs.n	a02c <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    a00a:	2aff      	cmp	r2, #255	; 0xff
    a00c:	d0f7      	beq.n	9ffe <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    a00e:	9201      	str	r2, [sp, #4]
    a010:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    a012:	4646      	mov	r6, r8
    a014:	5989      	ldr	r1, [r1, r6]
    a016:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    a018:	4281      	cmp	r1, r0
    a01a:	d8d9      	bhi.n	9fd0 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    a01c:	0111      	lsls	r1, r2, #4
    a01e:	4461      	add	r1, ip
    a020:	9200      	str	r2, [sp, #0]
    a022:	7b0a      	ldrb	r2, [r1, #12]
    a024:	e7eb      	b.n	9ffe <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    a026:	200a      	movs	r0, #10
    a028:	e777      	b.n	9f1a <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    a02a:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    a02c:	4b0a      	ldr	r3, [pc, #40]	; (a058 <SwTimerStart+0x16c>)
    a02e:	9a00      	ldr	r2, [sp, #0]
    a030:	0110      	lsls	r0, r2, #4
    a032:	1818      	adds	r0, r3, r0
    a034:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    a036:	013f      	lsls	r7, r7, #4
    a038:	19df      	adds	r7, r3, r7
    a03a:	23ff      	movs	r3, #255	; 0xff
    a03c:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    a03e:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    a040:	2008      	movs	r0, #8
    a042:	464a      	mov	r2, r9
    a044:	4213      	tst	r3, r2
    a046:	d100      	bne.n	a04a <SwTimerStart+0x15e>
    a048:	e767      	b.n	9f1a <SwTimerStart+0x2e>
		cpu_irq_enable();
    a04a:	2201      	movs	r2, #1
    a04c:	4b07      	ldr	r3, [pc, #28]	; (a06c <SwTimerStart+0x180>)
    a04e:	701a      	strb	r2, [r3, #0]
    a050:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a054:	b662      	cpsie	i
    a056:	e760      	b.n	9f1a <SwTimerStart+0x2e>
    a058:	20001914 	.word	0x20001914
    a05c:	20001aa8 	.word	0x20001aa8
    a060:	20001aa4 	.word	0x20001aa4
    a064:	0000c7e1 	.word	0x0000c7e1
    a068:	7fffff00 	.word	0x7fffff00
    a06c:	20000008 	.word	0x20000008
    a070:	00009d69 	.word	0x00009d69
    a074:	20000fa8 	.word	0x20000fa8
    a078:	20000fa4 	.word	0x20000fa4
    a07c:	7ffffffe 	.word	0x7ffffffe
    a080:	00009cd1 	.word	0x00009cd1

0000a084 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    a084:	0103      	lsls	r3, r0, #4
    a086:	4803      	ldr	r0, [pc, #12]	; (a094 <SwTimerIsRunning+0x10>)
    a088:	18c0      	adds	r0, r0, r3
    a08a:	6840      	ldr	r0, [r0, #4]
    a08c:	1e43      	subs	r3, r0, #1
    a08e:	4198      	sbcs	r0, r3
    a090:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    a092:	4770      	bx	lr
    a094:	20001914 	.word	0x20001914

0000a098 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    a098:	b570      	push	{r4, r5, r6, lr}
    a09a:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    a09c:	4b09      	ldr	r3, [pc, #36]	; (a0c4 <SwTimerReadValue+0x2c>)
    a09e:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    a0a0:	4b09      	ldr	r3, [pc, #36]	; (a0c8 <SwTimerReadValue+0x30>)
    a0a2:	881e      	ldrh	r6, [r3, #0]
    a0a4:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    a0a6:	4b09      	ldr	r3, [pc, #36]	; (a0cc <SwTimerReadValue+0x34>)
    a0a8:	4798      	blx	r3
    a0aa:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    a0ac:	012d      	lsls	r5, r5, #4
    a0ae:	4b08      	ldr	r3, [pc, #32]	; (a0d0 <SwTimerReadValue+0x38>)
    a0b0:	58e8      	ldr	r0, [r5, r3]
    a0b2:	0002      	movs	r2, r0

    if (t2 > t1)
    a0b4:	2c00      	cmp	r4, #0
    a0b6:	d102      	bne.n	a0be <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    a0b8:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    a0ba:	42b2      	cmp	r2, r6
    a0bc:	d800      	bhi.n	a0c0 <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    a0be:	2000      	movs	r0, #0
    }

    return tv;
}
    a0c0:	bd70      	pop	{r4, r5, r6, pc}
    a0c2:	46c0      	nop			; (mov r8, r8)
    a0c4:	20001aa8 	.word	0x20001aa8
    a0c8:	20001aa4 	.word	0x20001aa4
    a0cc:	0000c7e1 	.word	0x0000c7e1
    a0d0:	20001914 	.word	0x20001914

0000a0d4 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    a0d4:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    a0d6:	4b05      	ldr	r3, [pc, #20]	; (a0ec <SwTimerNextExpiryDuration+0x18>)
    a0d8:	6818      	ldr	r0, [r3, #0]
    a0da:	28ff      	cmp	r0, #255	; 0xff
    a0dc:	d102      	bne.n	a0e4 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    a0de:	2001      	movs	r0, #1
    a0e0:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    a0e2:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    a0e4:	b2c0      	uxtb	r0, r0
    a0e6:	4b02      	ldr	r3, [pc, #8]	; (a0f0 <SwTimerNextExpiryDuration+0x1c>)
    a0e8:	4798      	blx	r3
    a0ea:	e7fa      	b.n	a0e2 <SwTimerNextExpiryDuration+0xe>
    a0ec:	20000fa4 	.word	0x20000fa4
    a0f0:	0000a099 	.word	0x0000a099

0000a0f4 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0f6:	46de      	mov	lr, fp
    a0f8:	4657      	mov	r7, sl
    a0fa:	464e      	mov	r6, r9
    a0fc:	4645      	mov	r5, r8
    a0fe:	b5e0      	push	{r5, r6, r7, lr}
    a100:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    a102:	4b2f      	ldr	r3, [pc, #188]	; (a1c0 <SwTimersExecute+0xcc>)
    a104:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    a106:	4b2f      	ldr	r3, [pc, #188]	; (a1c4 <SwTimersExecute+0xd0>)
    a108:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    a10a:	4b2f      	ldr	r3, [pc, #188]	; (a1c8 <SwTimersExecute+0xd4>)
    a10c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a10e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a112:	4253      	negs	r3, r2
    a114:	4153      	adcs	r3, r2
    a116:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a118:	b672      	cpsid	i
    a11a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a11e:	2200      	movs	r2, #0
    a120:	4b2a      	ldr	r3, [pc, #168]	; (a1cc <SwTimersExecute+0xd8>)
    a122:	701a      	strb	r2, [r3, #0]
	return flags;
    a124:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    a126:	4b2a      	ldr	r3, [pc, #168]	; (a1d0 <SwTimersExecute+0xdc>)
    a128:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    a12a:	23ff      	movs	r3, #255	; 0xff
    a12c:	4223      	tst	r3, r4
    a12e:	d005      	beq.n	a13c <SwTimersExecute+0x48>
		cpu_irq_enable();
    a130:	2201      	movs	r2, #1
    a132:	4b26      	ldr	r3, [pc, #152]	; (a1cc <SwTimersExecute+0xd8>)
    a134:	701a      	strb	r2, [r3, #0]
    a136:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a13a:	b662      	cpsie	i
	cpu_irq_disable();
    a13c:	4b23      	ldr	r3, [pc, #140]	; (a1cc <SwTimersExecute+0xd8>)
    a13e:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    a140:	4c24      	ldr	r4, [pc, #144]	; (a1d4 <SwTimersExecute+0xe0>)
    a142:	4b25      	ldr	r3, [pc, #148]	; (a1d8 <SwTimersExecute+0xe4>)
    a144:	4699      	mov	r9, r3
    a146:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    a148:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    a14a:	4b24      	ldr	r3, [pc, #144]	; (a1dc <SwTimersExecute+0xe8>)
    a14c:	4698      	mov	r8, r3
		cpu_irq_enable();
    a14e:	4b1f      	ldr	r3, [pc, #124]	; (a1cc <SwTimersExecute+0xd8>)
    a150:	469c      	mov	ip, r3
    a152:	e004      	b.n	a15e <SwTimersExecute+0x6a>
    a154:	4643      	mov	r3, r8
    a156:	6018      	str	r0, [r3, #0]
    a158:	e01e      	b.n	a198 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    a15a:	2e00      	cmp	r6, #0
    a15c:	d125      	bne.n	a1aa <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    a15e:	4b1d      	ldr	r3, [pc, #116]	; (a1d4 <SwTimersExecute+0xe0>)
    a160:	681b      	ldr	r3, [r3, #0]
    a162:	2bff      	cmp	r3, #255	; 0xff
    a164:	d024      	beq.n	a1b0 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a166:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a16a:	424b      	negs	r3, r1
    a16c:	414b      	adcs	r3, r1
    a16e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a170:	b672      	cpsid	i
    a172:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a176:	4653      	mov	r3, sl
    a178:	701a      	strb	r2, [r3, #0]
	return flags;
    a17a:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    a17c:	6823      	ldr	r3, [r4, #0]
    a17e:	011b      	lsls	r3, r3, #4
    a180:	444b      	add	r3, r9
    a182:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    a184:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    a186:	689d      	ldr	r5, [r3, #8]
    a188:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    a18a:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    a18c:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    a18e:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    a190:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    a192:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    a194:	29ff      	cmp	r1, #255	; 0xff
    a196:	d0dd      	beq.n	a154 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    a198:	4238      	tst	r0, r7
    a19a:	d0de      	beq.n	a15a <SwTimersExecute+0x66>
		cpu_irq_enable();
    a19c:	2301      	movs	r3, #1
    a19e:	4661      	mov	r1, ip
    a1a0:	700b      	strb	r3, [r1, #0]
    a1a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a1a6:	b662      	cpsie	i
    a1a8:	e7d7      	b.n	a15a <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    a1aa:	4658      	mov	r0, fp
    a1ac:	47b0      	blx	r6
    a1ae:	e7ca      	b.n	a146 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    a1b0:	b003      	add	sp, #12
    a1b2:	bc3c      	pop	{r2, r3, r4, r5}
    a1b4:	4690      	mov	r8, r2
    a1b6:	4699      	mov	r9, r3
    a1b8:	46a2      	mov	sl, r4
    a1ba:	46ab      	mov	fp, r5
    a1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1be:	46c0      	nop			; (mov r8, r8)
    a1c0:	20001aa8 	.word	0x20001aa8
    a1c4:	20001aa4 	.word	0x20001aa4
    a1c8:	0000c7e1 	.word	0x0000c7e1
    a1cc:	20000008 	.word	0x20000008
    a1d0:	00009d69 	.word	0x00009d69
    a1d4:	20000f9c 	.word	0x20000f9c
    a1d8:	20001914 	.word	0x20001914
    a1dc:	20000fa0 	.word	0x20000fa0

0000a1e0 <TIMER_TaskHandler>:
{
    a1e0:	b510      	push	{r4, lr}
    SwTimersExecute();
    a1e2:	4b02      	ldr	r3, [pc, #8]	; (a1ec <TIMER_TaskHandler+0xc>)
    a1e4:	4798      	blx	r3
}
    a1e6:	2000      	movs	r0, #0
    a1e8:	bd10      	pop	{r4, pc}
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	0000a0f5 	.word	0x0000a0f5

0000a1f0 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    a1f0:	b570      	push	{r4, r5, r6, lr}
    a1f2:	b082      	sub	sp, #8
    a1f4:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    a1f6:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    a1f8:	2c18      	cmp	r4, #24
    a1fa:	d901      	bls.n	a200 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    a1fc:	b002      	add	sp, #8
    a1fe:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a200:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a204:	425a      	negs	r2, r3
    a206:	4153      	adcs	r3, r2
    a208:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a20a:	b672      	cpsid	i
    a20c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a210:	2200      	movs	r2, #0
    a212:	4b47      	ldr	r3, [pc, #284]	; (a330 <SwTimerStop+0x140>)
    a214:	701a      	strb	r2, [r3, #0]
	return flags;
    a216:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    a218:	4b46      	ldr	r3, [pc, #280]	; (a334 <SwTimerStop+0x144>)
    a21a:	4798      	blx	r3
    if (runningTimers > 0)
    a21c:	4b46      	ldr	r3, [pc, #280]	; (a338 <SwTimerStop+0x148>)
    a21e:	781b      	ldrb	r3, [r3, #0]
    a220:	2b00      	cmp	r3, #0
    a222:	d040      	beq.n	a2a6 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    a224:	4b44      	ldr	r3, [pc, #272]	; (a338 <SwTimerStop+0x148>)
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    a22a:	4a44      	ldr	r2, [pc, #272]	; (a33c <SwTimerStop+0x14c>)
    a22c:	6816      	ldr	r6, [r2, #0]
    a22e:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    a230:	2b00      	cmp	r3, #0
    a232:	d038      	beq.n	a2a6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    a234:	428c      	cmp	r4, r1
    a236:	d00b      	beq.n	a250 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    a238:	4841      	ldr	r0, [pc, #260]	; (a340 <SwTimerStop+0x150>)
    a23a:	010a      	lsls	r2, r1, #4
    a23c:	1882      	adds	r2, r0, r2
    a23e:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    a240:	3b01      	subs	r3, #1
    a242:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    a244:	2b00      	cmp	r3, #0
    a246:	d02e      	beq.n	a2a6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    a248:	4294      	cmp	r4, r2
    a24a:	d001      	beq.n	a250 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    a24c:	0011      	movs	r1, r2
    a24e:	e7f4      	b.n	a23a <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    a250:	42a6      	cmp	r6, r4
    a252:	d01d      	beq.n	a290 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    a254:	4b3a      	ldr	r3, [pc, #232]	; (a340 <SwTimerStop+0x150>)
    a256:	0122      	lsls	r2, r4, #4
    a258:	189a      	adds	r2, r3, r2
    a25a:	7b12      	ldrb	r2, [r2, #12]
    a25c:	0109      	lsls	r1, r1, #4
    a25e:	1859      	adds	r1, r3, r1
    a260:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    a262:	0122      	lsls	r2, r4, #4
    a264:	4b36      	ldr	r3, [pc, #216]	; (a340 <SwTimerStop+0x150>)
    a266:	189b      	adds	r3, r3, r2
    a268:	22ff      	movs	r2, #255	; 0xff
    a26a:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    a26c:	4a32      	ldr	r2, [pc, #200]	; (a338 <SwTimerStop+0x148>)
    a26e:	7813      	ldrb	r3, [r2, #0]
    a270:	3b01      	subs	r3, #1
    a272:	b2db      	uxtb	r3, r3
    a274:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    a276:	0124      	lsls	r4, r4, #4
    a278:	4b31      	ldr	r3, [pc, #196]	; (a340 <SwTimerStop+0x150>)
    a27a:	191c      	adds	r4, r3, r4
    a27c:	2300      	movs	r3, #0
    a27e:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    a280:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    a282:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    a284:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    a286:	2008      	movs	r0, #8
    a288:	422b      	tst	r3, r5
    a28a:	d0b7      	beq.n	a1fc <SwTimerStop+0xc>
    a28c:	2301      	movs	r3, #1
    a28e:	e040      	b.n	a312 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    a290:	4b2c      	ldr	r3, [pc, #176]	; (a344 <SwTimerStop+0x154>)
    a292:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    a294:	0122      	lsls	r2, r4, #4
    a296:	4b2a      	ldr	r3, [pc, #168]	; (a340 <SwTimerStop+0x150>)
    a298:	189b      	adds	r3, r3, r2
    a29a:	7b18      	ldrb	r0, [r3, #12]
    a29c:	4b27      	ldr	r3, [pc, #156]	; (a33c <SwTimerStop+0x14c>)
    a29e:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    a2a0:	4b29      	ldr	r3, [pc, #164]	; (a348 <SwTimerStop+0x158>)
    a2a2:	4798      	blx	r3
    a2a4:	e7dd      	b.n	a262 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    a2a6:	4b29      	ldr	r3, [pc, #164]	; (a34c <SwTimerStop+0x15c>)
    a2a8:	6818      	ldr	r0, [r3, #0]
    a2aa:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    a2ac:	2aff      	cmp	r2, #255	; 0xff
    a2ae:	d02c      	beq.n	a30a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    a2b0:	4294      	cmp	r4, r2
    a2b2:	d009      	beq.n	a2c8 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    a2b4:	4922      	ldr	r1, [pc, #136]	; (a340 <SwTimerStop+0x150>)
    a2b6:	0113      	lsls	r3, r2, #4
    a2b8:	18cb      	adds	r3, r1, r3
    a2ba:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    a2bc:	2bff      	cmp	r3, #255	; 0xff
    a2be:	d024      	beq.n	a30a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    a2c0:	429c      	cmp	r4, r3
    a2c2:	d001      	beq.n	a2c8 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    a2c4:	001a      	movs	r2, r3
    a2c6:	e7f6      	b.n	a2b6 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    a2c8:	42a0      	cmp	r0, r4
    a2ca:	d00d      	beq.n	a2e8 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    a2cc:	4b1c      	ldr	r3, [pc, #112]	; (a340 <SwTimerStop+0x150>)
    a2ce:	0121      	lsls	r1, r4, #4
    a2d0:	1859      	adds	r1, r3, r1
    a2d2:	7b09      	ldrb	r1, [r1, #12]
    a2d4:	0110      	lsls	r0, r2, #4
    a2d6:	181b      	adds	r3, r3, r0
    a2d8:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    a2da:	4b1d      	ldr	r3, [pc, #116]	; (a350 <SwTimerStop+0x160>)
    a2dc:	681b      	ldr	r3, [r3, #0]
    a2de:	429c      	cmp	r4, r3
    a2e0:	d1c9      	bne.n	a276 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    a2e2:	4b1b      	ldr	r3, [pc, #108]	; (a350 <SwTimerStop+0x160>)
    a2e4:	601a      	str	r2, [r3, #0]
    a2e6:	e7c6      	b.n	a276 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    a2e8:	4b19      	ldr	r3, [pc, #100]	; (a350 <SwTimerStop+0x160>)
    a2ea:	681b      	ldr	r3, [r3, #0]
    a2ec:	4298      	cmp	r0, r3
    a2ee:	d006      	beq.n	a2fe <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    a2f0:	0100      	lsls	r0, r0, #4
    a2f2:	4b13      	ldr	r3, [pc, #76]	; (a340 <SwTimerStop+0x150>)
    a2f4:	1818      	adds	r0, r3, r0
    a2f6:	7b02      	ldrb	r2, [r0, #12]
    a2f8:	4b14      	ldr	r3, [pc, #80]	; (a34c <SwTimerStop+0x15c>)
    a2fa:	601a      	str	r2, [r3, #0]
    a2fc:	e7bb      	b.n	a276 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    a2fe:	23ff      	movs	r3, #255	; 0xff
    a300:	4a13      	ldr	r2, [pc, #76]	; (a350 <SwTimerStop+0x160>)
    a302:	6013      	str	r3, [r2, #0]
    a304:	4a11      	ldr	r2, [pc, #68]	; (a34c <SwTimerStop+0x15c>)
    a306:	6013      	str	r3, [r2, #0]
    a308:	e7b5      	b.n	a276 <SwTimerStop+0x86>
    a30a:	23ff      	movs	r3, #255	; 0xff
    a30c:	422b      	tst	r3, r5
    a30e:	d00a      	beq.n	a326 <SwTimerStop+0x136>
    a310:	2300      	movs	r3, #0
		cpu_irq_enable();
    a312:	2101      	movs	r1, #1
    a314:	4a06      	ldr	r2, [pc, #24]	; (a330 <SwTimerStop+0x140>)
    a316:	7011      	strb	r1, [r2, #0]
    a318:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a31c:	b662      	cpsie	i
    if (timerStopReqStatus)
    a31e:	2b00      	cmp	r3, #0
    a320:	d103      	bne.n	a32a <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    a322:	2015      	movs	r0, #21
    a324:	e76a      	b.n	a1fc <SwTimerStop+0xc>
    a326:	2015      	movs	r0, #21
    a328:	e768      	b.n	a1fc <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    a32a:	2008      	movs	r0, #8
    a32c:	e766      	b.n	a1fc <SwTimerStop+0xc>
    a32e:	46c0      	nop			; (mov r8, r8)
    a330:	20000008 	.word	0x20000008
    a334:	00009d69 	.word	0x00009d69
    a338:	20000fa8 	.word	0x20000fa8
    a33c:	20000fa4 	.word	0x20000fa4
    a340:	20001914 	.word	0x20001914
    a344:	0000c82d 	.word	0x0000c82d
    a348:	00009cd1 	.word	0x00009cd1
    a34c:	20000f9c 	.word	0x20000f9c
    a350:	20000fa0 	.word	0x20000fa0

0000a354 <SwTimerRunRemainingTime>:
{
    a354:	b5f0      	push	{r4, r5, r6, r7, lr}
    a356:	b083      	sub	sp, #12
    a358:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    a35a:	4b0b      	ldr	r3, [pc, #44]	; (a388 <SwTimerRunRemainingTime+0x34>)
    a35c:	681c      	ldr	r4, [r3, #0]
    a35e:	0122      	lsls	r2, r4, #4
    a360:	4b0a      	ldr	r3, [pc, #40]	; (a38c <SwTimerRunRemainingTime+0x38>)
    a362:	189b      	adds	r3, r3, r2
    a364:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    a366:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    a368:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    a36a:	0020      	movs	r0, r4
    a36c:	4b08      	ldr	r3, [pc, #32]	; (a390 <SwTimerRunRemainingTime+0x3c>)
    a36e:	4798      	blx	r3
    a370:	2808      	cmp	r0, #8
    a372:	d001      	beq.n	a378 <SwTimerRunRemainingTime+0x24>
}
    a374:	b003      	add	sp, #12
    a376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    a378:	9700      	str	r7, [sp, #0]
    a37a:	0033      	movs	r3, r6
    a37c:	2200      	movs	r2, #0
    a37e:	0029      	movs	r1, r5
    a380:	0020      	movs	r0, r4
    a382:	4c04      	ldr	r4, [pc, #16]	; (a394 <SwTimerRunRemainingTime+0x40>)
    a384:	47a0      	blx	r4
}
    a386:	e7f5      	b.n	a374 <SwTimerRunRemainingTime+0x20>
    a388:	20000fa4 	.word	0x20000fa4
    a38c:	20001914 	.word	0x20001914
    a390:	0000a1f1 	.word	0x0000a1f1
    a394:	00009eed 	.word	0x00009eed

0000a398 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    a398:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    a39a:	4b07      	ldr	r3, [pc, #28]	; (a3b8 <SystemTimerSuspend+0x20>)
    a39c:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    a39e:	4b07      	ldr	r3, [pc, #28]	; (a3bc <SystemTimerSuspend+0x24>)
    a3a0:	881d      	ldrh	r5, [r3, #0]
    a3a2:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    a3a4:	4b06      	ldr	r3, [pc, #24]	; (a3c0 <SystemTimerSuspend+0x28>)
    a3a6:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    a3a8:	4b06      	ldr	r3, [pc, #24]	; (a3c4 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    a3aa:	4328      	orrs	r0, r5
    a3ac:	6018      	str	r0, [r3, #0]
    a3ae:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    a3b0:	4b05      	ldr	r3, [pc, #20]	; (a3c8 <SystemTimerSuspend+0x30>)
    a3b2:	4798      	blx	r3
}
    a3b4:	bd70      	pop	{r4, r5, r6, pc}
    a3b6:	46c0      	nop			; (mov r8, r8)
    a3b8:	20001aa8 	.word	0x20001aa8
    a3bc:	20001aa4 	.word	0x20001aa4
    a3c0:	0000c7e1 	.word	0x0000c7e1
    a3c4:	20000fb0 	.word	0x20000fb0
    a3c8:	0000c86d 	.word	0x0000c86d

0000a3cc <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    a3cc:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    a3ce:	4b22      	ldr	r3, [pc, #136]	; (a458 <SystemTimerSync+0x8c>)
    a3d0:	681c      	ldr	r4, [r3, #0]
    a3d2:	685d      	ldr	r5, [r3, #4]
    a3d4:	1900      	adds	r0, r0, r4
    a3d6:	4169      	adcs	r1, r5
    a3d8:	6018      	str	r0, [r3, #0]
    a3da:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    a3dc:	4b1f      	ldr	r3, [pc, #124]	; (a45c <SystemTimerSync+0x90>)
    a3de:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    a3e0:	0c02      	lsrs	r2, r0, #16
    a3e2:	4b1f      	ldr	r3, [pc, #124]	; (a460 <SystemTimerSync+0x94>)
    a3e4:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    a3e6:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    a3e8:	4b1e      	ldr	r3, [pc, #120]	; (a464 <SystemTimerSync+0x98>)
    a3ea:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    a3ec:	4a1e      	ldr	r2, [pc, #120]	; (a468 <SystemTimerSync+0x9c>)
    a3ee:	7812      	ldrb	r2, [r2, #0]
    a3f0:	2a00      	cmp	r2, #0
    a3f2:	d012      	beq.n	a41a <SystemTimerSync+0x4e>
    a3f4:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    a3f6:	4c1d      	ldr	r4, [pc, #116]	; (a46c <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    a3f8:	4d1b      	ldr	r5, [pc, #108]	; (a468 <SystemTimerSync+0x9c>)
    a3fa:	e005      	b.n	a408 <SystemTimerSync+0x3c>
    a3fc:	3201      	adds	r2, #1
    a3fe:	b2d2      	uxtb	r2, r2
    a400:	7829      	ldrb	r1, [r5, #0]
    a402:	b2c9      	uxtb	r1, r1
    a404:	4291      	cmp	r1, r2
    a406:	d908      	bls.n	a41a <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    a408:	2bff      	cmp	r3, #255	; 0xff
    a40a:	d0f7      	beq.n	a3fc <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    a40c:	011b      	lsls	r3, r3, #4
    a40e:	5919      	ldr	r1, [r3, r4]
    a410:	1a09      	subs	r1, r1, r0
    a412:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    a414:	18e3      	adds	r3, r4, r3
    a416:	7b1b      	ldrb	r3, [r3, #12]
    a418:	e7f0      	b.n	a3fc <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    a41a:	4b15      	ldr	r3, [pc, #84]	; (a470 <SystemTimerSync+0xa4>)
    a41c:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    a41e:	4815      	ldr	r0, [pc, #84]	; (a474 <SystemTimerSync+0xa8>)
    a420:	4b15      	ldr	r3, [pc, #84]	; (a478 <SystemTimerSync+0xac>)
    a422:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    a424:	4815      	ldr	r0, [pc, #84]	; (a47c <SystemTimerSync+0xb0>)
    a426:	4b16      	ldr	r3, [pc, #88]	; (a480 <SystemTimerSync+0xb4>)
    a428:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    a42a:	4b0f      	ldr	r3, [pc, #60]	; (a468 <SystemTimerSync+0x9c>)
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	2b00      	cmp	r3, #0
    a430:	d009      	beq.n	a446 <SystemTimerSync+0x7a>
    a432:	4b0c      	ldr	r3, [pc, #48]	; (a464 <SystemTimerSync+0x98>)
    a434:	681b      	ldr	r3, [r3, #0]
    a436:	2bff      	cmp	r3, #255	; 0xff
    a438:	d005      	beq.n	a446 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    a43a:	4b12      	ldr	r3, [pc, #72]	; (a484 <SystemTimerSync+0xb8>)
    a43c:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    a43e:	28fe      	cmp	r0, #254	; 0xfe
    a440:	d902      	bls.n	a448 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    a442:	4b11      	ldr	r3, [pc, #68]	; (a488 <SystemTimerSync+0xbc>)
    a444:	4798      	blx	r3
        }
    }
}
    a446:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    a448:	2201      	movs	r2, #1
    a44a:	4b10      	ldr	r3, [pc, #64]	; (a48c <SystemTimerSync+0xc0>)
    a44c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    a44e:	2001      	movs	r0, #1
    a450:	4b0f      	ldr	r3, [pc, #60]	; (a490 <SystemTimerSync+0xc4>)
    a452:	4798      	blx	r3
    a454:	e7f7      	b.n	a446 <SystemTimerSync+0x7a>
    a456:	46c0      	nop			; (mov r8, r8)
    a458:	20000fb0 	.word	0x20000fb0
    a45c:	20001aa8 	.word	0x20001aa8
    a460:	20001aa4 	.word	0x20001aa4
    a464:	20000fa4 	.word	0x20000fa4
    a468:	20000fa8 	.word	0x20000fa8
    a46c:	20001914 	.word	0x20001914
    a470:	0000c8f5 	.word	0x0000c8f5
    a474:	00009c19 	.word	0x00009c19
    a478:	0000c979 	.word	0x0000c979
    a47c:	00009bf1 	.word	0x00009bf1
    a480:	0000c985 	.word	0x0000c985
    a484:	0000a0d5 	.word	0x0000a0d5
    a488:	0000a355 	.word	0x0000a355
    a48c:	20001aa6 	.word	0x20001aa6
    a490:	0000a511 	.word	0x0000a511

0000a494 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    a494:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    a496:	2010      	movs	r0, #16
    a498:	4b01      	ldr	r3, [pc, #4]	; (a4a0 <Stack_Init+0xc>)
    a49a:	4798      	blx	r3
}
    a49c:	bd10      	pop	{r4, pc}
    a49e:	46c0      	nop			; (mov r8, r8)
    a4a0:	0000a511 	.word	0x0000a511

0000a4a4 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    a4a6:	4b16      	ldr	r3, [pc, #88]	; (a500 <SYSTEM_RunTasks+0x5c>)
    a4a8:	881b      	ldrh	r3, [r3, #0]
    a4aa:	b29b      	uxth	r3, r3
    a4ac:	2b1f      	cmp	r3, #31
    a4ae:	d922      	bls.n	a4f6 <SYSTEM_RunTasks+0x52>
    a4b0:	e7fe      	b.n	a4b0 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    a4b2:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    a4b4:	4b13      	ldr	r3, [pc, #76]	; (a504 <SYSTEM_RunTasks+0x60>)
    a4b6:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    a4b8:	4911      	ldr	r1, [pc, #68]	; (a500 <SYSTEM_RunTasks+0x5c>)
    a4ba:	880b      	ldrh	r3, [r1, #0]
    a4bc:	2201      	movs	r2, #1
    a4be:	40aa      	lsls	r2, r5
    a4c0:	4393      	bics	r3, r2
    a4c2:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    a4c4:	4b10      	ldr	r3, [pc, #64]	; (a508 <SYSTEM_RunTasks+0x64>)
    a4c6:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    a4c8:	00ad      	lsls	r5, r5, #2
    a4ca:	4b10      	ldr	r3, [pc, #64]	; (a50c <SYSTEM_RunTasks+0x68>)
    a4cc:	58eb      	ldr	r3, [r5, r3]
    a4ce:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    a4d0:	2101      	movs	r1, #1
        while (sysTaskFlag)
    a4d2:	883b      	ldrh	r3, [r7, #0]
    a4d4:	b29b      	uxth	r3, r3
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d011      	beq.n	a4fe <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    a4da:	8823      	ldrh	r3, [r4, #0]
    a4dc:	420b      	tst	r3, r1
    a4de:	d1e8      	bne.n	a4b2 <SYSTEM_RunTasks+0xe>
    a4e0:	2201      	movs	r2, #1
    a4e2:	8833      	ldrh	r3, [r6, #0]
    a4e4:	b29b      	uxth	r3, r3
    a4e6:	0015      	movs	r5, r2
    a4e8:	4113      	asrs	r3, r2
    a4ea:	4219      	tst	r1, r3
    a4ec:	d1e2      	bne.n	a4b4 <SYSTEM_RunTasks+0x10>
    a4ee:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    a4f0:	2a05      	cmp	r2, #5
    a4f2:	d1f6      	bne.n	a4e2 <SYSTEM_RunTasks+0x3e>
    a4f4:	e7ed      	b.n	a4d2 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    a4f6:	4f02      	ldr	r7, [pc, #8]	; (a500 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    a4f8:	003c      	movs	r4, r7
    a4fa:	003e      	movs	r6, r7
    a4fc:	e7e8      	b.n	a4d0 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a500:	20000fb8 	.word	0x20000fb8
    a504:	00004165 	.word	0x00004165
    a508:	00004171 	.word	0x00004171
    a50c:	0001c9a0 	.word	0x0001c9a0

0000a510 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    a510:	b510      	push	{r4, lr}
    a512:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    a514:	4b04      	ldr	r3, [pc, #16]	; (a528 <SYSTEM_PostTask+0x18>)
    a516:	4798      	blx	r3
    sysTaskFlag |= task;
    a518:	4b04      	ldr	r3, [pc, #16]	; (a52c <SYSTEM_PostTask+0x1c>)
    a51a:	8818      	ldrh	r0, [r3, #0]
    a51c:	4320      	orrs	r0, r4
    a51e:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    a520:	4b03      	ldr	r3, [pc, #12]	; (a530 <SYSTEM_PostTask+0x20>)
    a522:	4798      	blx	r3
}
    a524:	bd10      	pop	{r4, pc}
    a526:	46c0      	nop			; (mov r8, r8)
    a528:	00004165 	.word	0x00004165
    a52c:	20000fb8 	.word	0x20000fb8
    a530:	00004171 	.word	0x00004171

0000a534 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    a534:	4b03      	ldr	r3, [pc, #12]	; (a544 <SYSTEM_ReadyToSleep+0x10>)
    a536:	8818      	ldrh	r0, [r3, #0]
    a538:	b280      	uxth	r0, r0
    a53a:	4243      	negs	r3, r0
    a53c:	4158      	adcs	r0, r3
    a53e:	b2c0      	uxtb	r0, r0
}
    a540:	4770      	bx	lr
    a542:	46c0      	nop			; (mov r8, r8)
    a544:	20000fb8 	.word	0x20000fb8

0000a548 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    a548:	b5f0      	push	{r4, r5, r6, r7, lr}
    a54a:	46d6      	mov	lr, sl
    a54c:	464f      	mov	r7, r9
    a54e:	b580      	push	{r7, lr}
    a550:	b083      	sub	sp, #12
    a552:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    a554:	2900      	cmp	r1, #0
    a556:	d102      	bne.n	a55e <Radio_WriteMode+0x16>
    a558:	1f83      	subs	r3, r0, #6
    a55a:	2b01      	cmp	r3, #1
    a55c:	d92a      	bls.n	a5b4 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    a55e:	2307      	movs	r3, #7
    a560:	4699      	mov	r9, r3
    a562:	001c      	movs	r4, r3
    a564:	4004      	ands	r4, r0
    newModulation &= 0x01;
    a566:	2601      	movs	r6, #1
    a568:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    a56a:	2001      	movs	r0, #1
    a56c:	4b2b      	ldr	r3, [pc, #172]	; (a61c <Radio_WriteMode+0xd4>)
    a56e:	4798      	blx	r3
    a570:	0005      	movs	r5, r0
    a572:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    a574:	b243      	sxtb	r3, r0
    a576:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    a578:	464b      	mov	r3, r9
    a57a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    a57c:	4652      	mov	r2, sl
    a57e:	0fd2      	lsrs	r2, r2, #31
    a580:	4296      	cmp	r6, r2
    a582:	d00a      	beq.n	a59a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    a584:	2b00      	cmp	r3, #0
    a586:	d11a      	bne.n	a5be <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    a588:	2e00      	cmp	r6, #0
    a58a:	d11e      	bne.n	a5ca <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    a58c:	2778      	movs	r7, #120	; 0x78
    a58e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a590:	0039      	movs	r1, r7
    a592:	2001      	movs	r0, #1
    a594:	4b22      	ldr	r3, [pc, #136]	; (a620 <Radio_WriteMode+0xd8>)
    a596:	4798      	blx	r3
    a598:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    a59a:	42a3      	cmp	r3, r4
    a59c:	d00a      	beq.n	a5b4 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    a59e:	2c00      	cmp	r4, #0
    a5a0:	d030      	beq.n	a604 <Radio_WriteMode+0xbc>
    a5a2:	9b01      	ldr	r3, [sp, #4]
    a5a4:	2b01      	cmp	r3, #1
    a5a6:	d016      	beq.n	a5d6 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    a5a8:	21f8      	movs	r1, #248	; 0xf8
    a5aa:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a5ac:	4321      	orrs	r1, r4
    a5ae:	2001      	movs	r0, #1
    a5b0:	4b1b      	ldr	r3, [pc, #108]	; (a620 <Radio_WriteMode+0xd8>)
    a5b2:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    a5b4:	b003      	add	sp, #12
    a5b6:	bc0c      	pop	{r2, r3}
    a5b8:	4691      	mov	r9, r2
    a5ba:	469a      	mov	sl, r3
    a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    a5be:	21f8      	movs	r1, #248	; 0xf8
    a5c0:	4001      	ands	r1, r0
    a5c2:	2001      	movs	r0, #1
    a5c4:	4b16      	ldr	r3, [pc, #88]	; (a620 <Radio_WriteMode+0xd8>)
    a5c6:	4798      	blx	r3
    a5c8:	e7de      	b.n	a588 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    a5ca:	2778      	movs	r7, #120	; 0x78
    a5cc:	4653      	mov	r3, sl
    a5ce:	401f      	ands	r7, r3
    a5d0:	2180      	movs	r1, #128	; 0x80
    a5d2:	430f      	orrs	r7, r1
    a5d4:	e7dc      	b.n	a590 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    a5d6:	2041      	movs	r0, #65	; 0x41
    a5d8:	4b10      	ldr	r3, [pc, #64]	; (a61c <Radio_WriteMode+0xd4>)
    a5da:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    a5dc:	2e00      	cmp	r6, #0
    a5de:	d10e      	bne.n	a5fe <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    a5e0:	2130      	movs	r1, #48	; 0x30
    a5e2:	4301      	orrs	r1, r0
    a5e4:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    a5e6:	2041      	movs	r0, #65	; 0x41
    a5e8:	4d0d      	ldr	r5, [pc, #52]	; (a620 <Radio_WriteMode+0xd8>)
    a5ea:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    a5ec:	21f8      	movs	r1, #248	; 0xf8
    a5ee:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a5f0:	4321      	orrs	r1, r4
    a5f2:	2001      	movs	r0, #1
    a5f4:	47a8      	blx	r5
			   delay_ms(1);
    a5f6:	2001      	movs	r0, #1
    a5f8:	4b0a      	ldr	r3, [pc, #40]	; (a624 <Radio_WriteMode+0xdc>)
    a5fa:	4798      	blx	r3
    a5fc:	e7da      	b.n	a5b4 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    a5fe:	21cf      	movs	r1, #207	; 0xcf
    a600:	4001      	ands	r1, r0
    a602:	e7f0      	b.n	a5e6 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    a604:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a606:	4039      	ands	r1, r7
    a608:	2001      	movs	r0, #1
    a60a:	4b05      	ldr	r3, [pc, #20]	; (a620 <Radio_WriteMode+0xd8>)
    a60c:	4798      	blx	r3
        if (1 == blocking)
    a60e:	9b01      	ldr	r3, [sp, #4]
    a610:	2b01      	cmp	r3, #1
    a612:	d1cf      	bne.n	a5b4 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    a614:	2001      	movs	r0, #1
    a616:	4b04      	ldr	r3, [pc, #16]	; (a628 <Radio_WriteMode+0xe0>)
    a618:	4798      	blx	r3
    a61a:	e7cb      	b.n	a5b4 <Radio_WriteMode+0x6c>
    a61c:	00003f2d 	.word	0x00003f2d
    a620:	00003f05 	.word	0x00003f05
    a624:	00000181 	.word	0x00000181
    a628:	00004149 	.word	0x00004149

0000a62c <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    a62c:	b500      	push	{lr}
    a62e:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    a630:	2012      	movs	r0, #18
    a632:	4b0d      	ldr	r3, [pc, #52]	; (a668 <RADIO_FHSSChangeChannel+0x3c>)
    a634:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    a636:	4b0d      	ldr	r3, [pc, #52]	; (a66c <RADIO_FHSSChangeChannel+0x40>)
    a638:	8adb      	ldrh	r3, [r3, #22]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d007      	beq.n	a64e <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    a63e:	4b0b      	ldr	r3, [pc, #44]	; (a66c <RADIO_FHSSChangeChannel+0x40>)
    a640:	691b      	ldr	r3, [r3, #16]
    a642:	2b00      	cmp	r3, #0
    a644:	d003      	beq.n	a64e <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    a646:	4a0a      	ldr	r2, [pc, #40]	; (a670 <RADIO_FHSSChangeChannel+0x44>)
    a648:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    a64a:	0692      	lsls	r2, r2, #26
    a64c:	d405      	bmi.n	a65a <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    a64e:	2102      	movs	r1, #2
    a650:	2012      	movs	r0, #18
    a652:	4b08      	ldr	r3, [pc, #32]	; (a674 <RADIO_FHSSChangeChannel+0x48>)
    a654:	4798      	blx	r3
}
    a656:	b003      	add	sp, #12
    a658:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    a65a:	a901      	add	r1, sp, #4
    a65c:	2020      	movs	r0, #32
    a65e:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    a660:	9801      	ldr	r0, [sp, #4]
    a662:	4b05      	ldr	r3, [pc, #20]	; (a678 <RADIO_FHSSChangeChannel+0x4c>)
    a664:	4798      	blx	r3
    a666:	e7f2      	b.n	a64e <RADIO_FHSSChangeChannel+0x22>
    a668:	00003f2d 	.word	0x00003f2d
    a66c:	20001aac 	.word	0x20001aac
    a670:	2000203e 	.word	0x2000203e
    a674:	00003f05 	.word	0x00003f05
    a678:	0001100d 	.word	0x0001100d

0000a67c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    a67e:	2000      	movs	r0, #0
    a680:	4b1a      	ldr	r3, [pc, #104]	; (a6ec <RADIO_ReadRandom+0x70>)
    a682:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    a684:	4b1a      	ldr	r3, [pc, #104]	; (a6f0 <RADIO_ReadRandom+0x74>)
    a686:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a688:	2201      	movs	r2, #1
    a68a:	2101      	movs	r1, #1
    a68c:	2000      	movs	r0, #0
    a68e:	4c19      	ldr	r4, [pc, #100]	; (a6f4 <RADIO_ReadRandom+0x78>)
    a690:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    a692:	21ff      	movs	r1, #255	; 0xff
    a694:	2011      	movs	r0, #17
    a696:	4b18      	ldr	r3, [pc, #96]	; (a6f8 <RADIO_ReadRandom+0x7c>)
    a698:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    a69a:	2201      	movs	r2, #1
    a69c:	2101      	movs	r1, #1
    a69e:	2005      	movs	r0, #5
    a6a0:	47a0      	blx	r4
    a6a2:	2410      	movs	r4, #16
    retVal = 0;
    a6a4:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    a6a6:	4f15      	ldr	r7, [pc, #84]	; (a6fc <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a6a8:	4e15      	ldr	r6, [pc, #84]	; (a700 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    a6aa:	2001      	movs	r0, #1
    a6ac:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a6ae:	202c      	movs	r0, #44	; 0x2c
    a6b0:	47b0      	blx	r6
    a6b2:	2301      	movs	r3, #1
    a6b4:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    a6b6:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a6b8:	4305      	orrs	r5, r0
    a6ba:	b2ad      	uxth	r5, r5
    a6bc:	3c01      	subs	r4, #1
    a6be:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    a6c0:	2c00      	cmp	r4, #0
    a6c2:	d1f2      	bne.n	a6aa <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    a6c4:	2000      	movs	r0, #0
    a6c6:	4b0f      	ldr	r3, [pc, #60]	; (a704 <RADIO_ReadRandom+0x88>)
    a6c8:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a6ca:	2201      	movs	r2, #1
    a6cc:	2101      	movs	r1, #1
    a6ce:	2000      	movs	r0, #0
    a6d0:	4b08      	ldr	r3, [pc, #32]	; (a6f4 <RADIO_ReadRandom+0x78>)
    a6d2:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    a6d4:	21ff      	movs	r1, #255	; 0xff
    a6d6:	2012      	movs	r0, #18
    a6d8:	4c07      	ldr	r4, [pc, #28]	; (a6f8 <RADIO_ReadRandom+0x7c>)
    a6da:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    a6dc:	2100      	movs	r1, #0
    a6de:	2011      	movs	r0, #17
    a6e0:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    a6e2:	4b09      	ldr	r3, [pc, #36]	; (a708 <RADIO_ReadRandom+0x8c>)
    a6e4:	4798      	blx	r3
	
    return retVal;
}
    a6e6:	0028      	movs	r0, r5
    a6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6ea:	46c0      	nop			; (mov r8, r8)
    a6ec:	000118d1 	.word	0x000118d1
    a6f0:	00011d75 	.word	0x00011d75
    a6f4:	0000a549 	.word	0x0000a549
    a6f8:	00003f05 	.word	0x00003f05
    a6fc:	00004149 	.word	0x00004149
    a700:	00003f2d 	.word	0x00003f2d
    a704:	000119f9 	.word	0x000119f9
    a708:	00011eb9 	.word	0x00011eb9

0000a70c <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    a70c:	b510      	push	{r4, lr}
    a70e:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    a710:	2334      	movs	r3, #52	; 0x34
    a712:	4a11      	ldr	r2, [pc, #68]	; (a758 <Radio_ReadRssi+0x4c>)
    a714:	5cd3      	ldrb	r3, [r2, r3]
    a716:	2b01      	cmp	r3, #1
    a718:	d003      	beq.n	a722 <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    a71a:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    a71c:	2b00      	cmp	r3, #0
    a71e:	d012      	beq.n	a746 <Radio_ReadRssi+0x3a>
	}

	return ERR_NONE;
}
    a720:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    a722:	4b0e      	ldr	r3, [pc, #56]	; (a75c <Radio_ReadRssi+0x50>)
    a724:	6812      	ldr	r2, [r2, #0]
    a726:	429a      	cmp	r2, r3
    a728:	d906      	bls.n	a738 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    a72a:	201b      	movs	r0, #27
    a72c:	4b0c      	ldr	r3, [pc, #48]	; (a760 <Radio_ReadRssi+0x54>)
    a72e:	4798      	blx	r3
    a730:	389d      	subs	r0, #157	; 0x9d
    a732:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    a734:	2000      	movs	r0, #0
    a736:	e7f3      	b.n	a720 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    a738:	201b      	movs	r0, #27
    a73a:	4b09      	ldr	r3, [pc, #36]	; (a760 <Radio_ReadRssi+0x54>)
    a73c:	4798      	blx	r3
    a73e:	38a4      	subs	r0, #164	; 0xa4
    a740:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    a742:	2000      	movs	r0, #0
    a744:	e7ec      	b.n	a720 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    a746:	300b      	adds	r0, #11
    a748:	4b05      	ldr	r3, [pc, #20]	; (a760 <Radio_ReadRssi+0x54>)
    a74a:	4798      	blx	r3
    a74c:	0840      	lsrs	r0, r0, #1
    a74e:	b2c3      	uxtb	r3, r0
    a750:	425b      	negs	r3, r3
    a752:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    a754:	2000      	movs	r0, #0
    a756:	e7e3      	b.n	a720 <Radio_ReadRssi+0x14>
    a758:	20001aac 	.word	0x20001aac
    a75c:	3361137f 	.word	0x3361137f
    a760:	00003f2d 	.word	0x00003f2d

0000a764 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    a764:	b510      	push	{r4, lr}
	tmr_cca_callback();
    a766:	4b01      	ldr	r3, [pc, #4]	; (a76c <tc_cca_callback+0x8>)
    a768:	4798      	blx	r3
}
    a76a:	bd10      	pop	{r4, pc}
    a76c:	0000c95d 	.word	0x0000c95d

0000a770 <tc_ovf_callback>:
{
    a770:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    a772:	4b01      	ldr	r3, [pc, #4]	; (a778 <tc_ovf_callback+0x8>)
    a774:	4798      	blx	r3
}
    a776:	bd10      	pop	{r4, pc}
    a778:	0000c915 	.word	0x0000c915

0000a77c <tmr_read_count>:
{
    a77c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    a77e:	4802      	ldr	r0, [pc, #8]	; (a788 <tmr_read_count+0xc>)
    a780:	4b02      	ldr	r3, [pc, #8]	; (a78c <tmr_read_count+0x10>)
    a782:	4798      	blx	r3
    a784:	b280      	uxth	r0, r0
}
    a786:	bd10      	pop	{r4, pc}
    a788:	20001b3c 	.word	0x20001b3c
    a78c:	00003655 	.word	0x00003655

0000a790 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    a790:	4b03      	ldr	r3, [pc, #12]	; (a7a0 <tmr_disable_cc_interrupt+0x10>)
    a792:	2110      	movs	r1, #16
    a794:	681a      	ldr	r2, [r3, #0]
    a796:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    a798:	7e5a      	ldrb	r2, [r3, #25]
    a79a:	438a      	bics	r2, r1
    a79c:	765a      	strb	r2, [r3, #25]
}
    a79e:	4770      	bx	lr
    a7a0:	20001b3c 	.word	0x20001b3c

0000a7a4 <tmr_enable_cc_interrupt>:
{
    a7a4:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a7a6:	4c0a      	ldr	r4, [pc, #40]	; (a7d0 <tmr_enable_cc_interrupt+0x2c>)
    a7a8:	6820      	ldr	r0, [r4, #0]
    a7aa:	4b0a      	ldr	r3, [pc, #40]	; (a7d4 <tmr_enable_cc_interrupt+0x30>)
    a7ac:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a7ae:	4b0a      	ldr	r3, [pc, #40]	; (a7d8 <tmr_enable_cc_interrupt+0x34>)
    a7b0:	5c1b      	ldrb	r3, [r3, r0]
    a7b2:	221f      	movs	r2, #31
    a7b4:	401a      	ands	r2, r3
    a7b6:	2301      	movs	r3, #1
    a7b8:	4093      	lsls	r3, r2
    a7ba:	4a08      	ldr	r2, [pc, #32]	; (a7dc <tmr_enable_cc_interrupt+0x38>)
    a7bc:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    a7be:	7e63      	ldrb	r3, [r4, #25]
    a7c0:	2210      	movs	r2, #16
    a7c2:	4313      	orrs	r3, r2
    a7c4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    a7c6:	6823      	ldr	r3, [r4, #0]
    a7c8:	2210      	movs	r2, #16
    a7ca:	725a      	strb	r2, [r3, #9]
}
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	46c0      	nop			; (mov r8, r8)
    a7d0:	20001b3c 	.word	0x20001b3c
    a7d4:	00003329 	.word	0x00003329
    a7d8:	0001c9b4 	.word	0x0001c9b4
    a7dc:	e000e100 	.word	0xe000e100

0000a7e0 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    a7e0:	4b03      	ldr	r3, [pc, #12]	; (a7f0 <tmr_disable_ovf_interrupt+0x10>)
    a7e2:	2101      	movs	r1, #1
    a7e4:	681a      	ldr	r2, [r3, #0]
    a7e6:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    a7e8:	7e5a      	ldrb	r2, [r3, #25]
    a7ea:	438a      	bics	r2, r1
    a7ec:	765a      	strb	r2, [r3, #25]
}
    a7ee:	4770      	bx	lr
    a7f0:	20001b3c 	.word	0x20001b3c

0000a7f4 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a7f4:	4b06      	ldr	r3, [pc, #24]	; (a810 <tmr_stop+0x1c>)
    a7f6:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    a7f8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d1fc      	bne.n	a7f8 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    a7fe:	3333      	adds	r3, #51	; 0x33
    a800:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    a802:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    a804:	6813      	ldr	r3, [r2, #0]
    a806:	2102      	movs	r1, #2
    a808:	438b      	bics	r3, r1
    a80a:	6013      	str	r3, [r2, #0]
}
    a80c:	4770      	bx	lr
    a80e:	46c0      	nop			; (mov r8, r8)
    a810:	20001b3c 	.word	0x20001b3c

0000a814 <tmr_write_cmpreg>:
{
    a814:	b510      	push	{r4, lr}
    a816:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    a818:	2100      	movs	r1, #0
    a81a:	4802      	ldr	r0, [pc, #8]	; (a824 <tmr_write_cmpreg+0x10>)
    a81c:	4b02      	ldr	r3, [pc, #8]	; (a828 <tmr_write_cmpreg+0x14>)
    a81e:	4798      	blx	r3
}
    a820:	bd10      	pop	{r4, pc}
    a822:	46c0      	nop			; (mov r8, r8)
    a824:	20001b3c 	.word	0x20001b3c
    a828:	00003695 	.word	0x00003695

0000a82c <save_cpu_interrupt>:
{
    a82c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a82e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a832:	425a      	negs	r2, r3
    a834:	4153      	adcs	r3, r2
    a836:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a838:	b672      	cpsid	i
    a83a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a83e:	2200      	movs	r2, #0
    a840:	4b02      	ldr	r3, [pc, #8]	; (a84c <save_cpu_interrupt+0x20>)
    a842:	701a      	strb	r2, [r3, #0]
	return flags;
    a844:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    a846:	b2c0      	uxtb	r0, r0
}
    a848:	b002      	add	sp, #8
    a84a:	4770      	bx	lr
    a84c:	20000008 	.word	0x20000008

0000a850 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    a850:	2800      	cmp	r0, #0
    a852:	d005      	beq.n	a860 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    a854:	2201      	movs	r2, #1
    a856:	4b03      	ldr	r3, [pc, #12]	; (a864 <restore_cpu_interrupt+0x14>)
    a858:	701a      	strb	r2, [r3, #0]
    a85a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a85e:	b662      	cpsie	i
}
    a860:	4770      	bx	lr
    a862:	46c0      	nop			; (mov r8, r8)
    a864:	20000008 	.word	0x20000008

0000a868 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    a868:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    a86a:	4a33      	ldr	r2, [pc, #204]	; (a938 <tmr_init+0xd0>)
    a86c:	2100      	movs	r1, #0
    a86e:	2300      	movs	r3, #0
    a870:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a872:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a874:	2000      	movs	r0, #0
    a876:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a878:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a87a:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    a87c:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    a87e:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a880:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a882:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a884:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a886:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a888:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a88a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    a88c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a88e:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a890:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a892:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a894:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a896:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a898:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    a89a:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a89c:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    a89e:	2334      	movs	r3, #52	; 0x34
    a8a0:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    a8a2:	3b35      	subs	r3, #53	; 0x35
    a8a4:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    a8a6:	4c25      	ldr	r4, [pc, #148]	; (a93c <tmr_init+0xd4>)
    a8a8:	4925      	ldr	r1, [pc, #148]	; (a940 <tmr_init+0xd8>)
    a8aa:	0020      	movs	r0, r4
    a8ac:	4b25      	ldr	r3, [pc, #148]	; (a944 <tmr_init+0xdc>)
    a8ae:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    a8b0:	2200      	movs	r2, #0
    a8b2:	4925      	ldr	r1, [pc, #148]	; (a948 <tmr_init+0xe0>)
    a8b4:	0020      	movs	r0, r4
    a8b6:	4d25      	ldr	r5, [pc, #148]	; (a94c <tmr_init+0xe4>)
    a8b8:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    a8ba:	2202      	movs	r2, #2
    a8bc:	4924      	ldr	r1, [pc, #144]	; (a950 <tmr_init+0xe8>)
    a8be:	0020      	movs	r0, r4
    a8c0:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a8c2:	6820      	ldr	r0, [r4, #0]
    a8c4:	4b23      	ldr	r3, [pc, #140]	; (a954 <tmr_init+0xec>)
    a8c6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a8c8:	4b23      	ldr	r3, [pc, #140]	; (a958 <tmr_init+0xf0>)
    a8ca:	5c1a      	ldrb	r2, [r3, r0]
    a8cc:	231f      	movs	r3, #31
    a8ce:	4013      	ands	r3, r2
    a8d0:	2101      	movs	r1, #1
    a8d2:	000a      	movs	r2, r1
    a8d4:	409a      	lsls	r2, r3
    a8d6:	4b21      	ldr	r3, [pc, #132]	; (a95c <tmr_init+0xf4>)
    a8d8:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    a8da:	7e63      	ldrb	r3, [r4, #25]
    a8dc:	2201      	movs	r2, #1
    a8de:	4313      	orrs	r3, r2
    a8e0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    a8e2:	6822      	ldr	r2, [r4, #0]
    a8e4:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    a8e6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d1fc      	bne.n	a8e6 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a8ec:	6813      	ldr	r3, [r2, #0]
    a8ee:	2102      	movs	r1, #2
    a8f0:	430b      	orrs	r3, r1
    a8f2:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    a8f4:	2000      	movs	r0, #0
    a8f6:	4b1a      	ldr	r3, [pc, #104]	; (a960 <tmr_init+0xf8>)
    a8f8:	4798      	blx	r3
    a8fa:	4d1a      	ldr	r5, [pc, #104]	; (a964 <tmr_init+0xfc>)
    a8fc:	47a8      	blx	r5
    a8fe:	491a      	ldr	r1, [pc, #104]	; (a968 <tmr_init+0x100>)
    a900:	4b1a      	ldr	r3, [pc, #104]	; (a96c <tmr_init+0x104>)
    a902:	4798      	blx	r3
    a904:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    a906:	4b1a      	ldr	r3, [pc, #104]	; (a970 <tmr_init+0x108>)
    a908:	4798      	blx	r3
    a90a:	47a8      	blx	r5
    a90c:	1c01      	adds	r1, r0, #0
    a90e:	1c20      	adds	r0, r4, #0
    a910:	4b18      	ldr	r3, [pc, #96]	; (a974 <tmr_init+0x10c>)
    a912:	4798      	blx	r3
    a914:	21fc      	movs	r1, #252	; 0xfc
    a916:	0589      	lsls	r1, r1, #22
    a918:	4b17      	ldr	r3, [pc, #92]	; (a978 <tmr_init+0x110>)
    a91a:	4798      	blx	r3
    a91c:	2800      	cmp	r0, #0
    a91e:	d005      	beq.n	a92c <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    a920:	21fe      	movs	r1, #254	; 0xfe
    a922:	0589      	lsls	r1, r1, #22
    a924:	1c20      	adds	r0, r4, #0
    a926:	4b15      	ldr	r3, [pc, #84]	; (a97c <tmr_init+0x114>)
    a928:	4798      	blx	r3
    a92a:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    a92c:	1c20      	adds	r0, r4, #0
    a92e:	4b10      	ldr	r3, [pc, #64]	; (a970 <tmr_init+0x108>)
    a930:	4798      	blx	r3
    a932:	b2c0      	uxtb	r0, r0
}
    a934:	bd70      	pop	{r4, r5, r6, pc}
    a936:	46c0      	nop			; (mov r8, r8)
    a938:	20001b04 	.word	0x20001b04
    a93c:	20001b3c 	.word	0x20001b3c
    a940:	42002000 	.word	0x42002000
    a944:	00003365 	.word	0x00003365
    a948:	0000a771 	.word	0x0000a771
    a94c:	00003241 	.word	0x00003241
    a950:	0000a765 	.word	0x0000a765
    a954:	00003329 	.word	0x00003329
    a958:	0001c9b4 	.word	0x0001c9b4
    a95c:	e000e100 	.word	0xe000e100
    a960:	00003009 	.word	0x00003009
    a964:	00013a4d 	.word	0x00013a4d
    a968:	49742400 	.word	0x49742400
    a96c:	00013015 	.word	0x00013015
    a970:	00012b01 	.word	0x00012b01
    a974:	00013635 	.word	0x00013635
    a978:	00012a59 	.word	0x00012a59
    a97c:	00012cf1 	.word	0x00012cf1

0000a980 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a980:	b570      	push	{r4, r5, r6, lr}
		uint8_t *const buffer,
		uint32_t len)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
	switch (mem) {
    a982:	2800      	cmp	r0, #0
    a984:	d122      	bne.n	a9cc <nvm_read+0x4c>
    a986:	4814      	ldr	r0, [pc, #80]	; (a9d8 <nvm_read+0x58>)
    a988:	7d04      	ldrb	r4, [r0, #20]

	case INT_FLASH:

		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    a98a:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    a98c:	07e4      	lsls	r4, r4, #31
    a98e:	d400      	bmi.n	a992 <nvm_read+0x12>
}
    a990:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    a992:	2420      	movs	r4, #32
    a994:	34ff      	adds	r4, #255	; 0xff
    a996:	4810      	ldr	r0, [pc, #64]	; (a9d8 <nvm_read+0x58>)
    a998:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    a99a:	2b00      	cmp	r3, #0
    a99c:	d019      	beq.n	a9d2 <nvm_read+0x52>
    a99e:	2001      	movs	r0, #1
    a9a0:	4381      	bics	r1, r0
    a9a2:	2000      	movs	r0, #0
    a9a4:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    a9a6:	1e5e      	subs	r6, r3, #1
    a9a8:	e005      	b.n	a9b6 <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    a9aa:	3002      	adds	r0, #2
    a9ac:	b280      	uxth	r0, r0
    a9ae:	0005      	movs	r5, r0
    a9b0:	3102      	adds	r1, #2
    a9b2:	4283      	cmp	r3, r0
    a9b4:	d908      	bls.n	a9c8 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    a9b6:	880c      	ldrh	r4, [r1, #0]
    a9b8:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    a9ba:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    a9bc:	42ae      	cmp	r6, r5
    a9be:	d9f4      	bls.n	a9aa <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    a9c0:	1955      	adds	r5, r2, r5
    a9c2:	0a24      	lsrs	r4, r4, #8
    a9c4:	706c      	strb	r4, [r5, #1]
    a9c6:	e7f0      	b.n	a9aa <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    a9c8:	2000      	movs	r0, #0
    a9ca:	e7e1      	b.n	a990 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    a9cc:	2008      	movs	r0, #8
    a9ce:	4240      	negs	r0, r0
    a9d0:	e7de      	b.n	a990 <nvm_read+0x10>
	return STATUS_OK;
    a9d2:	2000      	movs	r0, #0
    a9d4:	e7dc      	b.n	a990 <nvm_read+0x10>
    a9d6:	46c0      	nop			; (mov r8, r8)
    a9d8:	41004000 	.word	0x41004000

0000a9dc <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9de:	46de      	mov	lr, fp
    a9e0:	4657      	mov	r7, sl
    a9e2:	464e      	mov	r6, r9
    a9e4:	4645      	mov	r5, r8
    a9e6:	b5e0      	push	{r5, r6, r7, lr}
    a9e8:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    a9ea:	2800      	cmp	r0, #0
    a9ec:	d168      	bne.n	aac0 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    a9ee:	b29b      	uxth	r3, r3
    a9f0:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    a9f2:	4688      	mov	r8, r1
	uint32_t row_start_address
    a9f4:	23ff      	movs	r3, #255	; 0xff
    a9f6:	4399      	bics	r1, r3
    a9f8:	9100      	str	r1, [sp, #0]
	while (length) {
    a9fa:	4653      	mov	r3, sl
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d06b      	beq.n	aad8 <nvm_write+0xfc>
    aa00:	ab04      	add	r3, sp, #16
    aa02:	1a5b      	subs	r3, r3, r1
    aa04:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    aa06:	4e35      	ldr	r6, [pc, #212]	; (aadc <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    aa08:	4b35      	ldr	r3, [pc, #212]	; (aae0 <nvm_write+0x104>)
    aa0a:	469b      	mov	fp, r3
    aa0c:	9203      	str	r2, [sp, #12]
    aa0e:	e03a      	b.n	aa86 <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    aa10:	3301      	adds	r3, #1
		for (i = row_start_address;
    aa12:	42bb      	cmp	r3, r7
    aa14:	d20e      	bcs.n	aa34 <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    aa16:	2a00      	cmp	r2, #0
    aa18:	d0fa      	beq.n	aa10 <nvm_write+0x34>
    aa1a:	4299      	cmp	r1, r3
    aa1c:	d1f8      	bne.n	aa10 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    aa1e:	9d03      	ldr	r5, [sp, #12]
    aa20:	7828      	ldrb	r0, [r5, #0]
    aa22:	9c02      	ldr	r4, [sp, #8]
    aa24:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    aa26:	3101      	adds	r1, #1
				length--;
    aa28:	3a01      	subs	r2, #1
    aa2a:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    aa2c:	0028      	movs	r0, r5
    aa2e:	3001      	adds	r0, #1
    aa30:	9003      	str	r0, [sp, #12]
    aa32:	e7ed      	b.n	aa10 <nvm_write+0x34>
    aa34:	4692      	mov	sl, r2
    aa36:	4688      	mov	r8, r1
    aa38:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    aa3a:	4b2a      	ldr	r3, [pc, #168]	; (aae4 <nvm_write+0x108>)
    aa3c:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    aa3e:	9800      	ldr	r0, [sp, #0]
    aa40:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    aa42:	2805      	cmp	r0, #5
    aa44:	d0fb      	beq.n	aa3e <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    aa46:	2800      	cmp	r0, #0
    aa48:	d13d      	bne.n	aac6 <nvm_write+0xea>
    aa4a:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    aa4c:	4f26      	ldr	r7, [pc, #152]	; (aae8 <nvm_write+0x10c>)
    aa4e:	9401      	str	r4, [sp, #4]
    aa50:	9b00      	ldr	r3, [sp, #0]
    aa52:	1aec      	subs	r4, r5, r3
    aa54:	ab04      	add	r3, sp, #16
    aa56:	469c      	mov	ip, r3
    aa58:	4464      	add	r4, ip
    aa5a:	2240      	movs	r2, #64	; 0x40
    aa5c:	0021      	movs	r1, r4
    aa5e:	0028      	movs	r0, r5
    aa60:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    aa62:	2805      	cmp	r0, #5
    aa64:	d0f9      	beq.n	aa5a <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    aa66:	2800      	cmp	r0, #0
    aa68:	d12d      	bne.n	aac6 <nvm_write+0xea>
    aa6a:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    aa6c:	9b01      	ldr	r3, [sp, #4]
    aa6e:	42ab      	cmp	r3, r5
    aa70:	d1ee      	bne.n	aa50 <nvm_write+0x74>
	cpu_irq_leave_critical();
    aa72:	4b1e      	ldr	r3, [pc, #120]	; (aaec <nvm_write+0x110>)
    aa74:	4798      	blx	r3
    aa76:	9b02      	ldr	r3, [sp, #8]
    aa78:	3b01      	subs	r3, #1
    aa7a:	3bff      	subs	r3, #255	; 0xff
    aa7c:	9302      	str	r3, [sp, #8]
    aa7e:	9500      	str	r5, [sp, #0]
	while (length) {
    aa80:	4653      	mov	r3, sl
    aa82:	2b00      	cmp	r3, #0
    aa84:	d028      	beq.n	aad8 <nvm_write+0xfc>
    aa86:	9b00      	ldr	r3, [sp, #0]
    aa88:	1c5f      	adds	r7, r3, #1
    aa8a:	37ff      	adds	r7, #255	; 0xff
{
    aa8c:	001c      	movs	r4, r3
    aa8e:	46b9      	mov	r9, r7
    aa90:	001f      	movs	r7, r3
    aa92:	1be5      	subs	r5, r4, r7
    aa94:	ab04      	add	r3, sp, #16
    aa96:	469c      	mov	ip, r3
    aa98:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    aa9a:	2240      	movs	r2, #64	; 0x40
    aa9c:	0029      	movs	r1, r5
    aa9e:	0020      	movs	r0, r4
    aaa0:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    aaa2:	2805      	cmp	r0, #5
    aaa4:	d0f9      	beq.n	aa9a <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    aaa6:	2800      	cmp	r0, #0
    aaa8:	d10d      	bne.n	aac6 <nvm_write+0xea>
    aaaa:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    aaac:	454c      	cmp	r4, r9
    aaae:	d1f0      	bne.n	aa92 <nvm_write+0xb6>
    aab0:	464f      	mov	r7, r9
		for (i = row_start_address;
    aab2:	9b00      	ldr	r3, [sp, #0]
    aab4:	429f      	cmp	r7, r3
    aab6:	d9c0      	bls.n	aa3a <nvm_write+0x5e>
    aab8:	4652      	mov	r2, sl
    aaba:	4641      	mov	r1, r8
    aabc:	9401      	str	r4, [sp, #4]
    aabe:	e7aa      	b.n	aa16 <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    aac0:	2008      	movs	r0, #8
    aac2:	4240      	negs	r0, r0
    aac4:	e001      	b.n	aaca <nvm_write+0xee>
			return ERR_INVALID_ARG;
    aac6:	2008      	movs	r0, #8
    aac8:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    aaca:	b045      	add	sp, #276	; 0x114
    aacc:	bc3c      	pop	{r2, r3, r4, r5}
    aace:	4690      	mov	r8, r2
    aad0:	4699      	mov	r9, r3
    aad2:	46a2      	mov	sl, r4
    aad4:	46ab      	mov	fp, r5
    aad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    aad8:	2000      	movs	r0, #0
    aada:	e7f6      	b.n	aaca <nvm_write+0xee>
    aadc:	00000d15 	.word	0x00000d15
    aae0:	00000d95 	.word	0x00000d95
    aae4:	000001ad 	.word	0x000001ad
    aae8:	00000c3d 	.word	0x00000c3d
    aaec:	000001ed 	.word	0x000001ed

0000aaf0 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    aaf0:	b500      	push	{lr}
    aaf2:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    aaf4:	2800      	cmp	r0, #0
    aaf6:	d110      	bne.n	ab1a <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    aaf8:	2300      	movs	r3, #0
    aafa:	466a      	mov	r2, sp
    aafc:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    aafe:	4a08      	ldr	r2, [pc, #32]	; (ab20 <nvm_init+0x30>)
    ab00:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    ab02:	466a      	mov	r2, sp
    ab04:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ab06:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    ab08:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    ab0a:	3302      	adds	r3, #2
    ab0c:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    ab0e:	4668      	mov	r0, sp
    ab10:	4b04      	ldr	r3, [pc, #16]	; (ab24 <nvm_init+0x34>)
    ab12:	4798      	blx	r3

		return STATUS_OK;
    ab14:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    ab16:	b003      	add	sp, #12
    ab18:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    ab1a:	2008      	movs	r0, #8
    ab1c:	4240      	negs	r0, r0
    ab1e:	e7fa      	b.n	ab16 <nvm_init+0x26>
    ab20:	41004000 	.word	0x41004000
    ab24:	00000b01 	.word	0x00000b01

0000ab28 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
static void print_array (uint8_t *array, uint8_t length)
{
    ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab2a:	0004      	movs	r4, r0
    ab2c:	000d      	movs	r5, r1
    printf("0x");
    ab2e:	480a      	ldr	r0, [pc, #40]	; (ab58 <print_array+0x30>)
    ab30:	4b0a      	ldr	r3, [pc, #40]	; (ab5c <print_array+0x34>)
    ab32:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    ab34:	2d00      	cmp	r5, #0
    ab36:	d00b      	beq.n	ab50 <print_array+0x28>
    ab38:	3d01      	subs	r5, #1
    ab3a:	b2ed      	uxtb	r5, r5
    ab3c:	3501      	adds	r5, #1
    ab3e:	1965      	adds	r5, r4, r5
    {
        printf("%02x", *array);
    ab40:	4e07      	ldr	r6, [pc, #28]	; (ab60 <print_array+0x38>)
    ab42:	4f06      	ldr	r7, [pc, #24]	; (ab5c <print_array+0x34>)
    ab44:	7821      	ldrb	r1, [r4, #0]
    ab46:	0030      	movs	r0, r6
    ab48:	47b8      	blx	r7
        array++;
    ab4a:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    ab4c:	42ac      	cmp	r4, r5
    ab4e:	d1f9      	bne.n	ab44 <print_array+0x1c>
    }
    printf("\n\r");
    ab50:	4804      	ldr	r0, [pc, #16]	; (ab64 <print_array+0x3c>)
    ab52:	4b02      	ldr	r3, [pc, #8]	; (ab5c <print_array+0x34>)
    ab54:	4798      	blx	r3
}
    ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab58:	0001ce3c 	.word	0x0001ce3c
    ab5c:	000159e1 	.word	0x000159e1
    ab60:	0001ce40 	.word	0x0001ce40
    ab64:	0001d118 	.word	0x0001d118

0000ab68 <print_stack_status>:
{
    ab68:	b510      	push	{r4, lr}
    switch(status)
    ab6a:	0003      	movs	r3, r0
    ab6c:	3b08      	subs	r3, #8
    ab6e:	b2da      	uxtb	r2, r3
    ab70:	2a0d      	cmp	r2, #13
    ab72:	d833      	bhi.n	abdc <print_stack_status+0x74>
    ab74:	0093      	lsls	r3, r2, #2
    ab76:	4a1c      	ldr	r2, [pc, #112]	; (abe8 <print_stack_status+0x80>)
    ab78:	58d3      	ldr	r3, [r2, r3]
    ab7a:	469f      	mov	pc, r3
             printf("\nlorawan_success\n\r");
    ab7c:	481b      	ldr	r0, [pc, #108]	; (abec <print_stack_status+0x84>)
    ab7e:	4b1c      	ldr	r3, [pc, #112]	; (abf0 <print_stack_status+0x88>)
    ab80:	4798      	blx	r3
}
    ab82:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    ab84:	481b      	ldr	r0, [pc, #108]	; (abf4 <print_stack_status+0x8c>)
    ab86:	4b1a      	ldr	r3, [pc, #104]	; (abf0 <print_stack_status+0x88>)
    ab88:	4798      	blx	r3
        break;
    ab8a:	e7fa      	b.n	ab82 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    ab8c:	481a      	ldr	r0, [pc, #104]	; (abf8 <print_stack_status+0x90>)
    ab8e:	4b18      	ldr	r3, [pc, #96]	; (abf0 <print_stack_status+0x88>)
    ab90:	4798      	blx	r3
        break;
    ab92:	e7f6      	b.n	ab82 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    ab94:	4819      	ldr	r0, [pc, #100]	; (abfc <print_stack_status+0x94>)
    ab96:	4b16      	ldr	r3, [pc, #88]	; (abf0 <print_stack_status+0x88>)
    ab98:	4798      	blx	r3
        break;
    ab9a:	e7f2      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    ab9c:	4818      	ldr	r0, [pc, #96]	; (ac00 <print_stack_status+0x98>)
    ab9e:	4b14      	ldr	r3, [pc, #80]	; (abf0 <print_stack_status+0x88>)
    aba0:	4798      	blx	r3
        break;
    aba2:	e7ee      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    aba4:	4817      	ldr	r0, [pc, #92]	; (ac04 <print_stack_status+0x9c>)
    aba6:	4b12      	ldr	r3, [pc, #72]	; (abf0 <print_stack_status+0x88>)
    aba8:	4798      	blx	r3
        break;
    abaa:	e7ea      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    abac:	4816      	ldr	r0, [pc, #88]	; (ac08 <print_stack_status+0xa0>)
    abae:	4b10      	ldr	r3, [pc, #64]	; (abf0 <print_stack_status+0x88>)
    abb0:	4798      	blx	r3
        break;
    abb2:	e7e6      	b.n	ab82 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    abb4:	4815      	ldr	r0, [pc, #84]	; (ac0c <print_stack_status+0xa4>)
    abb6:	4b0e      	ldr	r3, [pc, #56]	; (abf0 <print_stack_status+0x88>)
    abb8:	4798      	blx	r3
        break;
    abba:	e7e2      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    abbc:	4814      	ldr	r0, [pc, #80]	; (ac10 <print_stack_status+0xa8>)
    abbe:	4b0c      	ldr	r3, [pc, #48]	; (abf0 <print_stack_status+0x88>)
    abc0:	4798      	blx	r3
        break;
    abc2:	e7de      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    abc4:	4813      	ldr	r0, [pc, #76]	; (ac14 <print_stack_status+0xac>)
    abc6:	4b0a      	ldr	r3, [pc, #40]	; (abf0 <print_stack_status+0x88>)
    abc8:	4798      	blx	r3
        break;
    abca:	e7da      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    abcc:	4812      	ldr	r0, [pc, #72]	; (ac18 <print_stack_status+0xb0>)
    abce:	4b08      	ldr	r3, [pc, #32]	; (abf0 <print_stack_status+0x88>)
    abd0:	4798      	blx	r3
        break;
    abd2:	e7d6      	b.n	ab82 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    abd4:	4811      	ldr	r0, [pc, #68]	; (ac1c <print_stack_status+0xb4>)
    abd6:	4b06      	ldr	r3, [pc, #24]	; (abf0 <print_stack_status+0x88>)
    abd8:	4798      	blx	r3
        break;
    abda:	e7d2      	b.n	ab82 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    abdc:	0001      	movs	r1, r0
    abde:	4810      	ldr	r0, [pc, #64]	; (ac20 <print_stack_status+0xb8>)
    abe0:	4b03      	ldr	r3, [pc, #12]	; (abf0 <print_stack_status+0x88>)
    abe2:	4798      	blx	r3
}
    abe4:	e7cd      	b.n	ab82 <print_stack_status+0x1a>
    abe6:	46c0      	nop			; (mov r8, r8)
    abe8:	0001c9bc 	.word	0x0001c9bc
    abec:	0001ce48 	.word	0x0001ce48
    abf0:	000159e1 	.word	0x000159e1
    abf4:	0001ce5c 	.word	0x0001ce5c
    abf8:	0001ce7c 	.word	0x0001ce7c
    abfc:	0001ce9c 	.word	0x0001ce9c
    ac00:	0001ceb4 	.word	0x0001ceb4
    ac04:	0001cecc 	.word	0x0001cecc
    ac08:	0001ceec 	.word	0x0001ceec
    ac0c:	0001cf10 	.word	0x0001cf10
    ac10:	0001cf2c 	.word	0x0001cf2c
    ac14:	0001cf3c 	.word	0x0001cf3c
    ac18:	0001cf58 	.word	0x0001cf58
    ac1c:	0001cf6c 	.word	0x0001cf6c
    ac20:	0001cf90 	.word	0x0001cf90

0000ac24 <cert_joindata_callback>:
{
    ac24:	b510      	push	{r4, lr}
    ac26:	b082      	sub	sp, #8
    if(true == status)
    ac28:	2800      	cmp	r0, #0
    ac2a:	d011      	beq.n	ac50 <cert_joindata_callback+0x2c>
        printf("\nJoining Successful\n\r");
    ac2c:	4810      	ldr	r0, [pc, #64]	; (ac70 <cert_joindata_callback+0x4c>)
    ac2e:	4b11      	ldr	r3, [pc, #68]	; (ac74 <cert_joindata_callback+0x50>)
    ac30:	4798      	blx	r3
        stackRetStatus = SwTimerStart(certAppTimerId, MS_TO_US(CERT_APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void*)cert_app_timer_callback, NULL);
    ac32:	4b11      	ldr	r3, [pc, #68]	; (ac78 <cert_joindata_callback+0x54>)
    ac34:	7818      	ldrb	r0, [r3, #0]
    ac36:	2300      	movs	r3, #0
    ac38:	9300      	str	r3, [sp, #0]
    ac3a:	4b10      	ldr	r3, [pc, #64]	; (ac7c <cert_joindata_callback+0x58>)
    ac3c:	2200      	movs	r2, #0
    ac3e:	4910      	ldr	r1, [pc, #64]	; (ac80 <cert_joindata_callback+0x5c>)
    ac40:	4c10      	ldr	r4, [pc, #64]	; (ac84 <cert_joindata_callback+0x60>)
    ac42:	47a0      	blx	r4
        if(stackRetStatus != LORAWAN_SUCCESS)
    ac44:	2808      	cmp	r0, #8
    ac46:	d00a      	beq.n	ac5e <cert_joindata_callback+0x3a>
            printf("ERROR : Unable to start Certification Timer\r\n");
    ac48:	480f      	ldr	r0, [pc, #60]	; (ac88 <cert_joindata_callback+0x64>)
    ac4a:	4b10      	ldr	r3, [pc, #64]	; (ac8c <cert_joindata_callback+0x68>)
    ac4c:	4798      	blx	r3
    ac4e:	e006      	b.n	ac5e <cert_joindata_callback+0x3a>
        stackRetStatus = LORAWAN_Join(LORAWAN_OTAA);
    ac50:	2000      	movs	r0, #0
    ac52:	4b0f      	ldr	r3, [pc, #60]	; (ac90 <cert_joindata_callback+0x6c>)
    ac54:	4798      	blx	r3
        if (stackRetStatus == LORAWAN_SUCCESS)
    ac56:	2808      	cmp	r0, #8
    ac58:	d006      	beq.n	ac68 <cert_joindata_callback+0x44>
            print_stack_status(stackRetStatus);
    ac5a:	4b0e      	ldr	r3, [pc, #56]	; (ac94 <cert_joindata_callback+0x70>)
    ac5c:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    ac5e:	480e      	ldr	r0, [pc, #56]	; (ac98 <cert_joindata_callback+0x74>)
    ac60:	4b04      	ldr	r3, [pc, #16]	; (ac74 <cert_joindata_callback+0x50>)
    ac62:	4798      	blx	r3
}
    ac64:	b002      	add	sp, #8
    ac66:	bd10      	pop	{r4, pc}
            printf("\nOTAA Join Request Sent\n\r");
    ac68:	480c      	ldr	r0, [pc, #48]	; (ac9c <cert_joindata_callback+0x78>)
    ac6a:	4b02      	ldr	r3, [pc, #8]	; (ac74 <cert_joindata_callback+0x50>)
    ac6c:	4798      	blx	r3
    ac6e:	e7f6      	b.n	ac5e <cert_joindata_callback+0x3a>
    ac70:	0001cd9c 	.word	0x0001cd9c
    ac74:	000159e1 	.word	0x000159e1
    ac78:	20000fbb 	.word	0x20000fbb
    ac7c:	0000aca1 	.word	0x0000aca1
    ac80:	004c4b40 	.word	0x004c4b40
    ac84:	00009eed 	.word	0x00009eed
    ac88:	0001cdb4 	.word	0x0001cdb4
    ac8c:	00015aa5 	.word	0x00015aa5
    ac90:	0000dd29 	.word	0x0000dd29
    ac94:	0000ab69 	.word	0x0000ab69
    ac98:	0001ce00 	.word	0x0001ce00
    ac9c:	0001cde4 	.word	0x0001cde4

0000aca0 <cert_app_timer_callback>:

/*********************************************************************//*
 \brief    Certification Timer Callback
 ************************************************************************/
static void cert_app_timer_callback(uint8_t param)
{
    aca0:	b510      	push	{r4, lr}
    aca2:	b082      	sub	sp, #8
    StackRetStatus_t status;
    SwTimerStart(certAppTimerId, MS_TO_US(CERT_APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void *)cert_app_timer_callback, NULL);
    aca4:	4b1c      	ldr	r3, [pc, #112]	; (ad18 <cert_app_timer_callback+0x78>)
    aca6:	7818      	ldrb	r0, [r3, #0]
    aca8:	2300      	movs	r3, #0
    acaa:	9300      	str	r3, [sp, #0]
    acac:	4b1b      	ldr	r3, [pc, #108]	; (ad1c <cert_app_timer_callback+0x7c>)
    acae:	2200      	movs	r2, #0
    acb0:	491b      	ldr	r1, [pc, #108]	; (ad20 <cert_app_timer_callback+0x80>)
    acb2:	4c1c      	ldr	r4, [pc, #112]	; (ad24 <cert_app_timer_callback+0x84>)
    acb4:	47a0      	blx	r4

    if(testMode == OFF)
    acb6:	4b1c      	ldr	r3, [pc, #112]	; (ad28 <cert_app_timer_callback+0x88>)
    acb8:	781b      	ldrb	r3, [r3, #0]
    acba:	2b00      	cmp	r3, #0
    acbc:	d111      	bne.n	ace2 <cert_app_timer_callback+0x42>
    {
        lorawanSendReq.buffer = sendData;
    acbe:	481b      	ldr	r0, [pc, #108]	; (ad2c <cert_app_timer_callback+0x8c>)
    acc0:	4b1b      	ldr	r3, [pc, #108]	; (ad30 <cert_app_timer_callback+0x90>)
    acc2:	6043      	str	r3, [r0, #4]
        lorawanSendReq.bufferLength = sendDataLen;
    acc4:	4b1b      	ldr	r3, [pc, #108]	; (ad34 <cert_app_timer_callback+0x94>)
    acc6:	881b      	ldrh	r3, [r3, #0]
    acc8:	7203      	strb	r3, [r0, #8]
        lorawanSendReq.confirmed = CERT_APP_TRANSMISSION_TYPE;
    acca:	2300      	movs	r3, #0
    accc:	7003      	strb	r3, [r0, #0]
        lorawanSendReq.port = CERT_APP_FPORT;
    acce:	3301      	adds	r3, #1
    acd0:	7043      	strb	r3, [r0, #1]
        status = LORAWAN_Send(&lorawanSendReq);
    acd2:	4b19      	ldr	r3, [pc, #100]	; (ad38 <cert_app_timer_callback+0x98>)
    acd4:	4798      	blx	r3
        lorawanSendReq.confirmed = bTxCnf;
        lorawanSendReq.port = TEST_PORT_NB;
        status = LORAWAN_Send(&lorawanSendReq);
    }

    if (LORAWAN_SUCCESS == status)
    acd6:	2808      	cmp	r0, #8
    acd8:	d011      	beq.n	acfe <cert_app_timer_callback+0x5e>
        printf("\nFrame Sent:");
        print_array(lorawanSendReq.buffer,lorawanSendReq.bufferLength);
    }
    else
    {
        print_stack_status(status);
    acda:	4b18      	ldr	r3, [pc, #96]	; (ad3c <cert_app_timer_callback+0x9c>)
    acdc:	4798      	blx	r3
    }
}
    acde:	b002      	add	sp, #8
    ace0:	bd10      	pop	{r4, pc}
        lorawanSendReq.buffer = sendData;
    ace2:	4812      	ldr	r0, [pc, #72]	; (ad2c <cert_app_timer_callback+0x8c>)
    ace4:	4b12      	ldr	r3, [pc, #72]	; (ad30 <cert_app_timer_callback+0x90>)
    ace6:	6043      	str	r3, [r0, #4]
        lorawanSendReq.bufferLength = sendDataLen;
    ace8:	4b12      	ldr	r3, [pc, #72]	; (ad34 <cert_app_timer_callback+0x94>)
    acea:	881b      	ldrh	r3, [r3, #0]
    acec:	7203      	strb	r3, [r0, #8]
        lorawanSendReq.confirmed = bTxCnf;
    acee:	4b14      	ldr	r3, [pc, #80]	; (ad40 <cert_app_timer_callback+0xa0>)
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	7003      	strb	r3, [r0, #0]
        lorawanSendReq.port = TEST_PORT_NB;
    acf4:	23e0      	movs	r3, #224	; 0xe0
    acf6:	7043      	strb	r3, [r0, #1]
        status = LORAWAN_Send(&lorawanSendReq);
    acf8:	4b0f      	ldr	r3, [pc, #60]	; (ad38 <cert_app_timer_callback+0x98>)
    acfa:	4798      	blx	r3
    acfc:	e7eb      	b.n	acd6 <cert_app_timer_callback+0x36>
        pktRxd = false;
    acfe:	2200      	movs	r2, #0
    ad00:	4b10      	ldr	r3, [pc, #64]	; (ad44 <cert_app_timer_callback+0xa4>)
    ad02:	701a      	strb	r2, [r3, #0]
        printf("\nFrame Sent:");
    ad04:	4810      	ldr	r0, [pc, #64]	; (ad48 <cert_app_timer_callback+0xa8>)
    ad06:	4b11      	ldr	r3, [pc, #68]	; (ad4c <cert_app_timer_callback+0xac>)
    ad08:	4798      	blx	r3
        print_array(lorawanSendReq.buffer,lorawanSendReq.bufferLength);
    ad0a:	4b08      	ldr	r3, [pc, #32]	; (ad2c <cert_app_timer_callback+0x8c>)
    ad0c:	7a19      	ldrb	r1, [r3, #8]
    ad0e:	6858      	ldr	r0, [r3, #4]
    ad10:	4b0f      	ldr	r3, [pc, #60]	; (ad50 <cert_app_timer_callback+0xb0>)
    ad12:	4798      	blx	r3
    ad14:	e7e3      	b.n	acde <cert_app_timer_callback+0x3e>
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	20000fbb 	.word	0x20000fbb
    ad1c:	0000aca1 	.word	0x0000aca1
    ad20:	004c4b40 	.word	0x004c4b40
    ad24:	00009eed 	.word	0x00009eed
    ad28:	20001036 	.word	0x20001036
    ad2c:	20000fc0 	.word	0x20000fc0
    ad30:	20000fd0 	.word	0x20000fd0
    ad34:	20001034 	.word	0x20001034
    ad38:	0000d015 	.word	0x0000d015
    ad3c:	0000ab69 	.word	0x0000ab69
    ad40:	20000fba 	.word	0x20000fba
    ad44:	20000fcc 	.word	0x20000fcc
    ad48:	0001cc58 	.word	0x0001cc58
    ad4c:	000159e1 	.word	0x000159e1
    ad50:	0000ab29 	.word	0x0000ab29

0000ad54 <cert_appdata_callback>:
{
    ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad56:	46c6      	mov	lr, r8
    ad58:	b500      	push	{lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    ad5a:	780b      	ldrb	r3, [r1, #0]
    ad5c:	2b02      	cmp	r3, #2
    ad5e:	d005      	beq.n	ad6c <cert_appdata_callback+0x18>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    ad60:	2b04      	cmp	r3, #4
    ad62:	d100      	bne.n	ad66 <cert_appdata_callback+0x12>
    ad64:	e0b8      	b.n	aed8 <cert_appdata_callback+0x184>
}
    ad66:	bc04      	pop	{r2}
    ad68:	4690      	mov	r8, r2
    ad6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        StackRetStatus_t status = appdata->param.rxData.status;
    ad6c:	7b4b      	ldrb	r3, [r1, #13]
        switch(status)
    ad6e:	2b08      	cmp	r3, #8
    ad70:	d000      	beq.n	ad74 <cert_appdata_callback+0x20>
    ad72:	e0ac      	b.n	aece <cert_appdata_callback+0x17a>
        uint8_t *pData = appdata->param.rxData.pData;
    ad74:	688e      	ldr	r6, [r1, #8]
        uint8_t dataLength = appdata->param.rxData.dataLength;
    ad76:	7b0b      	ldrb	r3, [r1, #12]
    ad78:	4698      	mov	r8, r3
        uint32_t devAddress = appdata->param.rxData.devAddr;
    ad7a:	684d      	ldr	r5, [r1, #4]
                 pktRxd = true;
    ad7c:	2201      	movs	r2, #1
    ad7e:	4b66      	ldr	r3, [pc, #408]	; (af18 <cert_appdata_callback+0x1c4>)
    ad80:	701a      	strb	r2, [r3, #0]
                 if((dataLength > 0U) && (NULL != pData))
    ad82:	4643      	mov	r3, r8
    ad84:	2b00      	cmp	r3, #0
    ad86:	d100      	bne.n	ad8a <cert_appdata_callback+0x36>
    ad88:	e096      	b.n	aeb8 <cert_appdata_callback+0x164>
    ad8a:	2e00      	cmp	r6, #0
    ad8c:	d100      	bne.n	ad90 <cert_appdata_callback+0x3c>
    ad8e:	e093      	b.n	aeb8 <cert_appdata_callback+0x164>
                     printf("*** Received DL Data ***\n\r");
    ad90:	4862      	ldr	r0, [pc, #392]	; (af1c <cert_appdata_callback+0x1c8>)
    ad92:	4c63      	ldr	r4, [pc, #396]	; (af20 <cert_appdata_callback+0x1cc>)
    ad94:	47a0      	blx	r4
                     printf("\nFrame Received at port %d\n\r",pData[0]);
    ad96:	7831      	ldrb	r1, [r6, #0]
    ad98:	4862      	ldr	r0, [pc, #392]	; (af24 <cert_appdata_callback+0x1d0>)
    ad9a:	47a0      	blx	r4
                     printf("\nFrame Length - %d\n\r",dataLength);
    ad9c:	4641      	mov	r1, r8
    ad9e:	4862      	ldr	r0, [pc, #392]	; (af28 <cert_appdata_callback+0x1d4>)
    ada0:	47a0      	blx	r4
                     printf("\nAddress - 0x%lx\n\r", devAddress);
    ada2:	0029      	movs	r1, r5
    ada4:	4861      	ldr	r0, [pc, #388]	; (af2c <cert_appdata_callback+0x1d8>)
    ada6:	47a0      	blx	r4
                     printf ("\nPayload: ");
    ada8:	4861      	ldr	r0, [pc, #388]	; (af30 <cert_appdata_callback+0x1dc>)
    adaa:	47a0      	blx	r4
                     for (uint8_t i =0; i<dataLength - 1; i++)
    adac:	4643      	mov	r3, r8
    adae:	1e5f      	subs	r7, r3, #1
    adb0:	2f00      	cmp	r7, #0
    adb2:	dd09      	ble.n	adc8 <cert_appdata_callback+0x74>
    adb4:	2400      	movs	r4, #0
                         printf("%x",pData[i+1]);
    adb6:	4d5a      	ldr	r5, [pc, #360]	; (af20 <cert_appdata_callback+0x1cc>)
    adb8:	1933      	adds	r3, r6, r4
    adba:	7859      	ldrb	r1, [r3, #1]
    adbc:	485d      	ldr	r0, [pc, #372]	; (af34 <cert_appdata_callback+0x1e0>)
    adbe:	47a8      	blx	r5
                     for (uint8_t i =0; i<dataLength - 1; i++)
    adc0:	3401      	adds	r4, #1
    adc2:	b2e4      	uxtb	r4, r4
    adc4:	42bc      	cmp	r4, r7
    adc6:	dbf7      	blt.n	adb8 <cert_appdata_callback+0x64>
                     printf("\r\n*************************\r\n");
    adc8:	485b      	ldr	r0, [pc, #364]	; (af38 <cert_appdata_callback+0x1e4>)
    adca:	4b5c      	ldr	r3, [pc, #368]	; (af3c <cert_appdata_callback+0x1e8>)
    adcc:	4798      	blx	r3
                     if(pData[0] == TEST_PORT_NB)
    adce:	7833      	ldrb	r3, [r6, #0]
    add0:	2be0      	cmp	r3, #224	; 0xe0
    add2:	d178      	bne.n	aec6 <cert_appdata_callback+0x172>
                       cert_handle_cert_rx_data(pData+1,dataLength-1);
    add4:	4643      	mov	r3, r8
    add6:	1e58      	subs	r0, r3, #1
    add8:	b2c0      	uxtb	r0, r0
 ************************************************************************/
static void cert_handle_cert_rx_data(uint8_t* data,uint8_t dataLen)
{
    StackRetStatus_t status;

    if (dataLen > 0)
    adda:	2800      	cmp	r0, #0
    addc:	d073      	beq.n	aec6 <cert_appdata_callback+0x172>
    {
        downlinkCtr++;
    adde:	4a58      	ldr	r2, [pc, #352]	; (af40 <cert_appdata_callback+0x1ec>)
    ade0:	8813      	ldrh	r3, [r2, #0]
    ade2:	3301      	adds	r3, #1
    ade4:	b29b      	uxth	r3, r3
    ade6:	8013      	strh	r3, [r2, #0]
        uplinkTestNoResp = 0;
    ade8:	2100      	movs	r1, #0
    adea:	4a56      	ldr	r2, [pc, #344]	; (af44 <cert_appdata_callback+0x1f0>)
    adec:	7011      	strb	r1, [r2, #0]

        //prepare the next data
        sendData[0] = (uint8_t) (downlinkCtr >> 8);
    adee:	4a56      	ldr	r2, [pc, #344]	; (af48 <cert_appdata_callback+0x1f4>)
    adf0:	0a19      	lsrs	r1, r3, #8
    adf2:	7011      	strb	r1, [r2, #0]
        sendData[1] = (uint8_t) (downlinkCtr);
    adf4:	7053      	strb	r3, [r2, #1]
        sendDataLen = 2;
    adf6:	2202      	movs	r2, #2
    adf8:	4b54      	ldr	r3, [pc, #336]	; (af4c <cert_appdata_callback+0x1f8>)
    adfa:	801a      	strh	r2, [r3, #0]

        switch (data[0])
    adfc:	7873      	ldrb	r3, [r6, #1]
    adfe:	2b06      	cmp	r3, #6
    ae00:	d861      	bhi.n	aec6 <cert_appdata_callback+0x172>
    ae02:	009b      	lsls	r3, r3, #2
    ae04:	4a52      	ldr	r2, [pc, #328]	; (af50 <cert_appdata_callback+0x1fc>)
    ae06:	58d3      	ldr	r3, [r2, r3]
    ae08:	469f      	mov	pc, r3
        {
            case DEACTIVATE_MODE:
            {
                if (dataLen == 1) {
    ae0a:	2801      	cmp	r0, #1
    ae0c:	d15b      	bne.n	aec6 <cert_appdata_callback+0x172>
                    //Deactivated test mode
                    testMode = OFF;
    ae0e:	2200      	movs	r2, #0
    ae10:	4b50      	ldr	r3, [pc, #320]	; (af54 <cert_appdata_callback+0x200>)
    ae12:	701a      	strb	r2, [r3, #0]
    ae14:	e057      	b.n	aec6 <cert_appdata_callback+0x172>
            break;

            case ACTIVATE_MODE:
            {
                bool bPayloadValid = false;
                if (dataLen == 4)
    ae16:	2804      	cmp	r0, #4
    ae18:	d155      	bne.n	aec6 <cert_appdata_callback+0x172>
    ae1a:	1cb3      	adds	r3, r6, #2
    ae1c:	3605      	adds	r6, #5
                {
                    for (uint8_t i = 0; i < 4; i++)
                    {
                        if (data[i] == 1)
    ae1e:	781a      	ldrb	r2, [r3, #0]
    ae20:	2a01      	cmp	r2, #1
    ae22:	d150      	bne.n	aec6 <cert_appdata_callback+0x172>
    ae24:	3301      	adds	r3, #1
                    for (uint8_t i = 0; i < 4; i++)
    ae26:	42b3      	cmp	r3, r6
    ae28:	d1f9      	bne.n	ae1e <cert_appdata_callback+0xca>
    testMode = ON;
    ae2a:	2201      	movs	r2, #1
    ae2c:	4b49      	ldr	r3, [pc, #292]	; (af54 <cert_appdata_callback+0x200>)
    ae2e:	701a      	strb	r2, [r3, #0]
    downlinkCtr = 0;
    ae30:	2300      	movs	r3, #0
    ae32:	4a43      	ldr	r2, [pc, #268]	; (af40 <cert_appdata_callback+0x1ec>)
    ae34:	8013      	strh	r3, [r2, #0]
    sendData[0] = (uint8_t) (downlinkCtr >> 8);
    ae36:	4a44      	ldr	r2, [pc, #272]	; (af48 <cert_appdata_callback+0x1f4>)
    ae38:	7013      	strb	r3, [r2, #0]
    sendData[1] = (uint8_t) (downlinkCtr);
    ae3a:	7053      	strb	r3, [r2, #1]
    printf("\r\nTest Mode Activated\r\n");
    ae3c:	4846      	ldr	r0, [pc, #280]	; (af58 <cert_appdata_callback+0x204>)
    ae3e:	4b3f      	ldr	r3, [pc, #252]	; (af3c <cert_appdata_callback+0x1e8>)
    ae40:	4798      	blx	r3
    ae42:	e040      	b.n	aec6 <cert_appdata_callback+0x172>
            }
            break;

            case CNF_MODE:
            {
                if (dataLen == 1)
    ae44:	2801      	cmp	r0, #1
    ae46:	d13e      	bne.n	aec6 <cert_appdata_callback+0x172>
                {
                    //Confirmed frames
                    bTxCnf = true;
    ae48:	2201      	movs	r2, #1
    ae4a:	4b44      	ldr	r3, [pc, #272]	; (af5c <cert_appdata_callback+0x208>)
    ae4c:	701a      	strb	r2, [r3, #0]
    ae4e:	e03a      	b.n	aec6 <cert_appdata_callback+0x172>
            }
            break;

            case UNCNF_MODE:
            {
                if (dataLen == 1)
    ae50:	2801      	cmp	r0, #1
    ae52:	d138      	bne.n	aec6 <cert_appdata_callback+0x172>
                {
                    //Unconfirmed frames
                    bTxCnf = false;
    ae54:	2200      	movs	r2, #0
    ae56:	4b41      	ldr	r3, [pc, #260]	; (af5c <cert_appdata_callback+0x208>)
    ae58:	701a      	strb	r2, [r3, #0]
    ae5a:	e034      	b.n	aec6 <cert_appdata_callback+0x172>
            }
            break;

            case CRYPTO_MODE:
            {
                if (dataLen <= 33) {
    ae5c:	2821      	cmp	r0, #33	; 0x21
    ae5e:	d832      	bhi.n	aec6 <cert_appdata_callback+0x172>
                    //Cryptography tests
                    sendData[0] = 0x04;
    ae60:	2204      	movs	r2, #4
    ae62:	4b39      	ldr	r3, [pc, #228]	; (af48 <cert_appdata_callback+0x1f4>)
    ae64:	701a      	strb	r2, [r3, #0]

                    for (uint8_t i = 1; i < dataLen; i++)
    ae66:	2801      	cmp	r0, #1
    ae68:	d910      	bls.n	ae8c <cert_appdata_callback+0x138>
    ae6a:	1cb2      	adds	r2, r6, #2
    ae6c:	0019      	movs	r1, r3
    ae6e:	3101      	adds	r1, #1
    ae70:	4643      	mov	r3, r8
    ae72:	3b03      	subs	r3, #3
    ae74:	b2db      	uxtb	r3, r3
    ae76:	3303      	adds	r3, #3
    ae78:	18f6      	adds	r6, r6, r3
                    {
                        sendData[i] = (((uint16_t) data[i]) + 1) % 256;
    ae7a:	24ff      	movs	r4, #255	; 0xff
    ae7c:	7813      	ldrb	r3, [r2, #0]
    ae7e:	3301      	adds	r3, #1
    ae80:	4023      	ands	r3, r4
    ae82:	700b      	strb	r3, [r1, #0]
    ae84:	3201      	adds	r2, #1
    ae86:	3101      	adds	r1, #1
                    for (uint8_t i = 1; i < dataLen; i++)
    ae88:	42b2      	cmp	r2, r6
    ae8a:	d1f7      	bne.n	ae7c <cert_appdata_callback+0x128>
                    }
                    sendDataLen = dataLen;
    ae8c:	4b2f      	ldr	r3, [pc, #188]	; (af4c <cert_appdata_callback+0x1f8>)
    ae8e:	8018      	strh	r0, [r3, #0]
    ae90:	e019      	b.n	aec6 <cert_appdata_callback+0x172>
            }
            break;

            case OTAA_TRIGGER_MODE:
            {
                status = LORAWAN_Join(LORAWAN_OTAA);
    ae92:	2000      	movs	r0, #0
    ae94:	4b32      	ldr	r3, [pc, #200]	; (af60 <cert_appdata_callback+0x20c>)
    ae96:	4798      	blx	r3
                if (status == LORAWAN_SUCCESS)
    ae98:	2808      	cmp	r0, #8
    ae9a:	d002      	beq.n	aea2 <cert_appdata_callback+0x14e>
                    SwTimerStop(certAppTimerId);
                    printf("\nOTAA Join Request Sent\n\r");
                }
                else
                {
                    print_stack_status(status);
    ae9c:	4b31      	ldr	r3, [pc, #196]	; (af64 <cert_appdata_callback+0x210>)
    ae9e:	4798      	blx	r3
    aea0:	e011      	b.n	aec6 <cert_appdata_callback+0x172>
                    testMode = OFF;
    aea2:	2200      	movs	r2, #0
    aea4:	4b2b      	ldr	r3, [pc, #172]	; (af54 <cert_appdata_callback+0x200>)
    aea6:	701a      	strb	r2, [r3, #0]
                    SwTimerStop(certAppTimerId);
    aea8:	4b2f      	ldr	r3, [pc, #188]	; (af68 <cert_appdata_callback+0x214>)
    aeaa:	7818      	ldrb	r0, [r3, #0]
    aeac:	4b2f      	ldr	r3, [pc, #188]	; (af6c <cert_appdata_callback+0x218>)
    aeae:	4798      	blx	r3
                    printf("\nOTAA Join Request Sent\n\r");
    aeb0:	482f      	ldr	r0, [pc, #188]	; (af70 <cert_appdata_callback+0x21c>)
    aeb2:	4b1b      	ldr	r3, [pc, #108]	; (af20 <cert_appdata_callback+0x1cc>)
    aeb4:	4798      	blx	r3
    aeb6:	e006      	b.n	aec6 <cert_appdata_callback+0x172>
                     uplinkTestNoResp++;
    aeb8:	4a22      	ldr	r2, [pc, #136]	; (af44 <cert_appdata_callback+0x1f0>)
    aeba:	7813      	ldrb	r3, [r2, #0]
    aebc:	3301      	adds	r3, #1
    aebe:	7013      	strb	r3, [r2, #0]
                     printf("Received ACK for Confirmed data\r\n");
    aec0:	482c      	ldr	r0, [pc, #176]	; (af74 <cert_appdata_callback+0x220>)
    aec2:	4b1e      	ldr	r3, [pc, #120]	; (af3c <cert_appdata_callback+0x1e8>)
    aec4:	4798      	blx	r3
                 uplinkTestNoResp = 0;
    aec6:	2200      	movs	r2, #0
    aec8:	4b1e      	ldr	r3, [pc, #120]	; (af44 <cert_appdata_callback+0x1f0>)
    aeca:	701a      	strb	r2, [r3, #0]
            break;
    aecc:	e74b      	b.n	ad66 <cert_appdata_callback+0x12>
                printf("\r\nMAC NOK! - %d", status);
    aece:	0019      	movs	r1, r3
    aed0:	4829      	ldr	r0, [pc, #164]	; (af78 <cert_appdata_callback+0x224>)
    aed2:	4b13      	ldr	r3, [pc, #76]	; (af20 <cert_appdata_callback+0x1cc>)
    aed4:	4798      	blx	r3
            break;
    aed6:	e746      	b.n	ad66 <cert_appdata_callback+0x12>
        switch(appdata->param.transCmpl.status)
    aed8:	7909      	ldrb	r1, [r1, #4]
    aeda:	2908      	cmp	r1, #8
    aedc:	d118      	bne.n	af10 <cert_appdata_callback+0x1bc>
                if(pktRxd == false)
    aede:	4b0e      	ldr	r3, [pc, #56]	; (af18 <cert_appdata_callback+0x1c4>)
    aee0:	781b      	ldrb	r3, [r3, #0]
    aee2:	2b00      	cmp	r3, #0
    aee4:	d003      	beq.n	aeee <cert_appdata_callback+0x19a>
        printf("\n\r*************************************************\n\r");
    aee6:	4825      	ldr	r0, [pc, #148]	; (af7c <cert_appdata_callback+0x228>)
    aee8:	4b0d      	ldr	r3, [pc, #52]	; (af20 <cert_appdata_callback+0x1cc>)
    aeea:	4798      	blx	r3
}
    aeec:	e73b      	b.n	ad66 <cert_appdata_callback+0x12>
                    printf("Transmission Success\r\n");
    aeee:	4824      	ldr	r0, [pc, #144]	; (af80 <cert_appdata_callback+0x22c>)
    aef0:	4b12      	ldr	r3, [pc, #72]	; (af3c <cert_appdata_callback+0x1e8>)
    aef2:	4798      	blx	r3
                    uplinkTestNoResp++;
    aef4:	4a13      	ldr	r2, [pc, #76]	; (af44 <cert_appdata_callback+0x1f0>)
    aef6:	7813      	ldrb	r3, [r2, #0]
    aef8:	3301      	adds	r3, #1
    aefa:	7013      	strb	r3, [r2, #0]
                    sendData[0] = (uint8_t) (downlinkCtr >> 8);
    aefc:	4b10      	ldr	r3, [pc, #64]	; (af40 <cert_appdata_callback+0x1ec>)
    aefe:	881a      	ldrh	r2, [r3, #0]
    af00:	4b11      	ldr	r3, [pc, #68]	; (af48 <cert_appdata_callback+0x1f4>)
    af02:	0a11      	lsrs	r1, r2, #8
    af04:	7019      	strb	r1, [r3, #0]
                    sendData[1] = (uint8_t) (downlinkCtr);
    af06:	705a      	strb	r2, [r3, #1]
                    sendDataLen = 2;
    af08:	2202      	movs	r2, #2
    af0a:	4b10      	ldr	r3, [pc, #64]	; (af4c <cert_appdata_callback+0x1f8>)
    af0c:	801a      	strh	r2, [r3, #0]
    af0e:	e7ea      	b.n	aee6 <cert_appdata_callback+0x192>
                printf("\r\nMAC NOK! - %d", appdata->param.transCmpl.status );
    af10:	4819      	ldr	r0, [pc, #100]	; (af78 <cert_appdata_callback+0x224>)
    af12:	4b03      	ldr	r3, [pc, #12]	; (af20 <cert_appdata_callback+0x1cc>)
    af14:	4798      	blx	r3
            break;
    af16:	e7e6      	b.n	aee6 <cert_appdata_callback+0x192>
    af18:	20000fcc 	.word	0x20000fcc
    af1c:	0001cc68 	.word	0x0001cc68
    af20:	000159e1 	.word	0x000159e1
    af24:	0001cc84 	.word	0x0001cc84
    af28:	0001cca4 	.word	0x0001cca4
    af2c:	0001ccbc 	.word	0x0001ccbc
    af30:	0001ccd0 	.word	0x0001ccd0
    af34:	0001ccdc 	.word	0x0001ccdc
    af38:	0001cce0 	.word	0x0001cce0
    af3c:	00015aa5 	.word	0x00015aa5
    af40:	20000fbc 	.word	0x20000fbc
    af44:	20001037 	.word	0x20001037
    af48:	20000fd0 	.word	0x20000fd0
    af4c:	20001034 	.word	0x20001034
    af50:	0001c9f4 	.word	0x0001c9f4
    af54:	20001036 	.word	0x20001036
    af58:	0001cd84 	.word	0x0001cd84
    af5c:	20000fba 	.word	0x20000fba
    af60:	0000dd29 	.word	0x0000dd29
    af64:	0000ab69 	.word	0x0000ab69
    af68:	20000fbb 	.word	0x20000fbb
    af6c:	0000a1f1 	.word	0x0000a1f1
    af70:	0001cde4 	.word	0x0001cde4
    af74:	0001cd00 	.word	0x0001cd00
    af78:	0001cd24 	.word	0x0001cd24
    af7c:	0001cd4c 	.word	0x0001cd4c
    af80:	0001cd34 	.word	0x0001cd34

0000af84 <cert_app_init>:
{
    af84:	b5f0      	push	{r4, r5, r6, r7, lr}
    af86:	b083      	sub	sp, #12
    PDS_DeleteAll();
    af88:	4b63      	ldr	r3, [pc, #396]	; (b118 <cert_app_init+0x194>)
    af8a:	4798      	blx	r3
    PDS_UnInit();
    af8c:	4b63      	ldr	r3, [pc, #396]	; (b11c <cert_app_init+0x198>)
    af8e:	4798      	blx	r3
    status = SwTimerCreate(&certAppTimerId);
    af90:	4863      	ldr	r0, [pc, #396]	; (b120 <cert_app_init+0x19c>)
    af92:	4b64      	ldr	r3, [pc, #400]	; (b124 <cert_app_init+0x1a0>)
    af94:	4798      	blx	r3
    if(status!=LORAWAN_SUCCESS)
    af96:	2808      	cmp	r0, #8
    af98:	d003      	beq.n	afa2 <cert_app_init+0x1e>
        printf("\r\nUnable to start certification timer. Pls check");
    af9a:	4863      	ldr	r0, [pc, #396]	; (b128 <cert_app_init+0x1a4>)
    af9c:	4b63      	ldr	r3, [pc, #396]	; (b12c <cert_app_init+0x1a8>)
    af9e:	4798      	blx	r3
    afa0:	e7fe      	b.n	afa0 <cert_app_init+0x1c>
    LORAWAN_Init(cert_appdata_callback, cert_joindata_callback);
    afa2:	4963      	ldr	r1, [pc, #396]	; (b130 <cert_app_init+0x1ac>)
    afa4:	4863      	ldr	r0, [pc, #396]	; (b134 <cert_app_init+0x1b0>)
    afa6:	4b64      	ldr	r3, [pc, #400]	; (b138 <cert_app_init+0x1b4>)
    afa8:	4798      	blx	r3
    printf("\r\nPlease select one of the band given below\r\n");
    afaa:	4f64      	ldr	r7, [pc, #400]	; (b13c <cert_app_init+0x1b8>)
    afac:	4e64      	ldr	r6, [pc, #400]	; (b140 <cert_app_init+0x1bc>)
        printf("%d. %s\r\n",i,bandStrings[i]);
    afae:	4d65      	ldr	r5, [pc, #404]	; (b144 <cert_app_init+0x1c0>)
    printf("\r\nPlease select one of the band given below\r\n");
    afb0:	0038      	movs	r0, r7
    afb2:	47b0      	blx	r6
        printf("%d. %s\r\n",i,bandStrings[i]);
    afb4:	002a      	movs	r2, r5
    afb6:	2101      	movs	r1, #1
    afb8:	4863      	ldr	r0, [pc, #396]	; (b148 <cert_app_init+0x1c4>)
    afba:	4c5c      	ldr	r4, [pc, #368]	; (b12c <cert_app_init+0x1a8>)
    afbc:	47a0      	blx	r4
    printf("Select Regional Band : ");
    afbe:	4863      	ldr	r0, [pc, #396]	; (b14c <cert_app_init+0x1c8>)
    afc0:	47a0      	blx	r4
    rxChar = sio2host_getchar();
    afc2:	4b63      	ldr	r3, [pc, #396]	; (b150 <cert_app_init+0x1cc>)
    afc4:	4798      	blx	r3
    afc6:	466b      	mov	r3, sp
    afc8:	71d8      	strb	r0, [r3, #7]
    afca:	3307      	adds	r3, #7
    choice = atoi(charPtr);
    afcc:	0018      	movs	r0, r3
    afce:	4b61      	ldr	r3, [pc, #388]	; (b154 <cert_app_init+0x1d0>)
    afd0:	4798      	blx	r3
    afd2:	0003      	movs	r3, r0
    if ( (choice >= sizeof(bandTable)) || (choice == 0) )
    afd4:	b2c2      	uxtb	r2, r0
    afd6:	2a01      	cmp	r2, #1
    afd8:	d1ea      	bne.n	afb0 <cert_app_init+0x2c>
        LORAWAN_Reset(bandTable[choice]);
    afda:	20ff      	movs	r0, #255	; 0xff
    afdc:	4018      	ands	r0, r3
    afde:	4b5e      	ldr	r3, [pc, #376]	; (b158 <cert_app_init+0x1d4>)
    afe0:	5c18      	ldrb	r0, [r3, r0]
    afe2:	4b5e      	ldr	r3, [pc, #376]	; (b15c <cert_app_init+0x1d8>)
    afe4:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    afe6:	485e      	ldr	r0, [pc, #376]	; (b160 <cert_app_init+0x1dc>)
    afe8:	4b50      	ldr	r3, [pc, #320]	; (b12c <cert_app_init+0x1a8>)
    afea:	4798      	blx	r3
    printf("\r\nInit - Successful\r\n");
    afec:	485d      	ldr	r0, [pc, #372]	; (b164 <cert_app_init+0x1e0>)
    afee:	4b54      	ldr	r3, [pc, #336]	; (b140 <cert_app_init+0x1bc>)
    aff0:	4798      	blx	r3
    bool adrValue = true ;
    aff2:	2301      	movs	r3, #1
    aff4:	466a      	mov	r2, sp
    aff6:	7193      	strb	r3, [r2, #6]
    bool testModeEnable = true;
    aff8:	466a      	mov	r2, sp
    affa:	1dd1      	adds	r1, r2, #7
    affc:	700b      	strb	r3, [r1, #0]
    status = LORAWAN_SetAttr(TEST_MODE_ENABLE,&testModeEnable);
    affe:	202d      	movs	r0, #45	; 0x2d
    b000:	4b59      	ldr	r3, [pc, #356]	; (b168 <cert_app_init+0x1e4>)
    b002:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    b004:	2808      	cmp	r0, #8
    b006:	d003      	beq.n	b010 <cert_app_init+0x8c>
        printf("\nMAC parameters initialization failed\n\r");
    b008:	4858      	ldr	r0, [pc, #352]	; (b16c <cert_app_init+0x1e8>)
    b00a:	4b48      	ldr	r3, [pc, #288]	; (b12c <cert_app_init+0x1a8>)
    b00c:	4798      	blx	r3
    b00e:	e006      	b.n	b01e <cert_app_init+0x9a>
        status = LORAWAN_SetAttr(ADR,&adrValue);
    b010:	466b      	mov	r3, sp
    b012:	1d99      	adds	r1, r3, #6
    b014:	3802      	subs	r0, #2
    b016:	4b54      	ldr	r3, [pc, #336]	; (b168 <cert_app_init+0x1e4>)
    b018:	4798      	blx	r3
    if (LORAWAN_SUCCESS != status)
    b01a:	2808      	cmp	r0, #8
    b01c:	d1f4      	bne.n	b008 <cert_app_init+0x84>
	uint8_t dataRate = DR0;
    b01e:	466b      	mov	r3, sp
    b020:	1dd9      	adds	r1, r3, #7
    b022:	2300      	movs	r3, #0
    b024:	700b      	strb	r3, [r1, #0]
	status = LORAWAN_SetAttr (CURRENT_DATARATE, &dataRate);
    b026:	2007      	movs	r0, #7
    b028:	4b4f      	ldr	r3, [pc, #316]	; (b168 <cert_app_init+0x1e4>)
    b02a:	4798      	blx	r3
    b02c:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    b02e:	4850      	ldr	r0, [pc, #320]	; (b170 <cert_app_init+0x1ec>)
    b030:	4b3e      	ldr	r3, [pc, #248]	; (b12c <cert_app_init+0x1a8>)
    b032:	4798      	blx	r3
		if (LORAWAN_SUCCESS == status)
    b034:	2c08      	cmp	r4, #8
    b036:	d164      	bne.n	b102 <cert_app_init+0x17e>
			status = LORAWAN_SetAttr (DEV_ADDR, &devAddr);
    b038:	494e      	ldr	r1, [pc, #312]	; (b174 <cert_app_init+0x1f0>)
    b03a:	2002      	movs	r0, #2
    b03c:	4b4a      	ldr	r3, [pc, #296]	; (b168 <cert_app_init+0x1e4>)
    b03e:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b040:	2808      	cmp	r0, #8
    b042:	d15e      	bne.n	b102 <cert_app_init+0x17e>
            printf("\nDevice Addr - ");
    b044:	484c      	ldr	r0, [pc, #304]	; (b178 <cert_app_init+0x1f4>)
    b046:	4c39      	ldr	r4, [pc, #228]	; (b12c <cert_app_init+0x1a8>)
    b048:	47a0      	blx	r4
            printf("%ld \n\r", devAddr);
    b04a:	4b4a      	ldr	r3, [pc, #296]	; (b174 <cert_app_init+0x1f0>)
    b04c:	6819      	ldr	r1, [r3, #0]
    b04e:	484b      	ldr	r0, [pc, #300]	; (b17c <cert_app_init+0x1f8>)
    b050:	47a0      	blx	r4
            status = LORAWAN_SetAttr (APPS_KEY, appsKey);
    b052:	494b      	ldr	r1, [pc, #300]	; (b180 <cert_app_init+0x1fc>)
    b054:	2005      	movs	r0, #5
    b056:	4b44      	ldr	r3, [pc, #272]	; (b168 <cert_app_init+0x1e4>)
    b058:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b05a:	2808      	cmp	r0, #8
    b05c:	d151      	bne.n	b102 <cert_app_init+0x17e>
            printf("\nApplication Session Key - ");
    b05e:	4849      	ldr	r0, [pc, #292]	; (b184 <cert_app_init+0x200>)
    b060:	4b32      	ldr	r3, [pc, #200]	; (b12c <cert_app_init+0x1a8>)
    b062:	4798      	blx	r3
            print_array((uint8_t *)&appsKey, sizeof(appsKey));
    b064:	2110      	movs	r1, #16
    b066:	4846      	ldr	r0, [pc, #280]	; (b180 <cert_app_init+0x1fc>)
    b068:	4b47      	ldr	r3, [pc, #284]	; (b188 <cert_app_init+0x204>)
    b06a:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, nwksKey);
    b06c:	4947      	ldr	r1, [pc, #284]	; (b18c <cert_app_init+0x208>)
    b06e:	2004      	movs	r0, #4
    b070:	4b3d      	ldr	r3, [pc, #244]	; (b168 <cert_app_init+0x1e4>)
    b072:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b074:	2808      	cmp	r0, #8
    b076:	d144      	bne.n	b102 <cert_app_init+0x17e>
            printf("\nNetwork Session Key - ");
    b078:	4845      	ldr	r0, [pc, #276]	; (b190 <cert_app_init+0x20c>)
    b07a:	4b2c      	ldr	r3, [pc, #176]	; (b12c <cert_app_init+0x1a8>)
    b07c:	4798      	blx	r3
            print_array((uint8_t *)&nwksKey, sizeof(nwksKey));
    b07e:	2110      	movs	r1, #16
    b080:	4842      	ldr	r0, [pc, #264]	; (b18c <cert_app_init+0x208>)
    b082:	4b41      	ldr	r3, [pc, #260]	; (b188 <cert_app_init+0x204>)
    b084:	4798      	blx	r3
	uint8_t dataRate = DR0;
    b086:	466b      	mov	r3, sp
    b088:	1dd9      	adds	r1, r3, #7
    b08a:	2300      	movs	r3, #0
    b08c:	700b      	strb	r3, [r1, #0]
	status = LORAWAN_SetAttr (CURRENT_DATARATE, &dataRate);
    b08e:	2007      	movs	r0, #7
    b090:	4b35      	ldr	r3, [pc, #212]	; (b168 <cert_app_init+0x1e4>)
    b092:	4798      	blx	r3
    b094:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    b096:	4836      	ldr	r0, [pc, #216]	; (b170 <cert_app_init+0x1ec>)
    b098:	4b24      	ldr	r3, [pc, #144]	; (b12c <cert_app_init+0x1a8>)
    b09a:	4798      	blx	r3
		if (LORAWAN_SUCCESS == status)
    b09c:	2c08      	cmp	r4, #8
    b09e:	d134      	bne.n	b10a <cert_app_init+0x186>
			status = LORAWAN_SetAttr (DEV_EUI, devEui);
    b0a0:	493c      	ldr	r1, [pc, #240]	; (b194 <cert_app_init+0x210>)
    b0a2:	2000      	movs	r0, #0
    b0a4:	4b30      	ldr	r3, [pc, #192]	; (b168 <cert_app_init+0x1e4>)
    b0a6:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b0a8:	2808      	cmp	r0, #8
    b0aa:	d12e      	bne.n	b10a <cert_app_init+0x186>
            printf("\nDevice EUI - ");
    b0ac:	483a      	ldr	r0, [pc, #232]	; (b198 <cert_app_init+0x214>)
    b0ae:	4b1f      	ldr	r3, [pc, #124]	; (b12c <cert_app_init+0x1a8>)
    b0b0:	4798      	blx	r3
            print_array((uint8_t *)&devEui, sizeof(devEui));
    b0b2:	2108      	movs	r1, #8
    b0b4:	4837      	ldr	r0, [pc, #220]	; (b194 <cert_app_init+0x210>)
    b0b6:	4b34      	ldr	r3, [pc, #208]	; (b188 <cert_app_init+0x204>)
    b0b8:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, appEui);
    b0ba:	4938      	ldr	r1, [pc, #224]	; (b19c <cert_app_init+0x218>)
    b0bc:	2001      	movs	r0, #1
    b0be:	4b2a      	ldr	r3, [pc, #168]	; (b168 <cert_app_init+0x1e4>)
    b0c0:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b0c2:	2808      	cmp	r0, #8
    b0c4:	d121      	bne.n	b10a <cert_app_init+0x186>
            printf("\nApplication EUI - ");
    b0c6:	4836      	ldr	r0, [pc, #216]	; (b1a0 <cert_app_init+0x21c>)
    b0c8:	4b18      	ldr	r3, [pc, #96]	; (b12c <cert_app_init+0x1a8>)
    b0ca:	4798      	blx	r3
            print_array((uint8_t *)&appEui, sizeof(appEui));
    b0cc:	2108      	movs	r1, #8
    b0ce:	4833      	ldr	r0, [pc, #204]	; (b19c <cert_app_init+0x218>)
    b0d0:	4b2d      	ldr	r3, [pc, #180]	; (b188 <cert_app_init+0x204>)
    b0d2:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, appKey);
    b0d4:	4933      	ldr	r1, [pc, #204]	; (b1a4 <cert_app_init+0x220>)
    b0d6:	2003      	movs	r0, #3
    b0d8:	4b23      	ldr	r3, [pc, #140]	; (b168 <cert_app_init+0x1e4>)
    b0da:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    b0dc:	2808      	cmp	r0, #8
    b0de:	d114      	bne.n	b10a <cert_app_init+0x186>
            printf("\nApplication Key - ");
    b0e0:	4831      	ldr	r0, [pc, #196]	; (b1a8 <cert_app_init+0x224>)
    b0e2:	4b12      	ldr	r3, [pc, #72]	; (b12c <cert_app_init+0x1a8>)
    b0e4:	4798      	blx	r3
            print_array((uint8_t *)&appKey, sizeof(appKey));
    b0e6:	2110      	movs	r1, #16
    b0e8:	482e      	ldr	r0, [pc, #184]	; (b1a4 <cert_app_init+0x220>)
    b0ea:	4b27      	ldr	r3, [pc, #156]	; (b188 <cert_app_init+0x204>)
    b0ec:	4798      	blx	r3
    status = LORAWAN_Join(CERT_APP_ACTIVATION_TYPE);
    b0ee:	2001      	movs	r0, #1
    b0f0:	4b2e      	ldr	r3, [pc, #184]	; (b1ac <cert_app_init+0x228>)
    b0f2:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    b0f4:	2808      	cmp	r0, #8
    b0f6:	d10c      	bne.n	b112 <cert_app_init+0x18e>
        printf("\nJoin Request Sent\n\r");
    b0f8:	482d      	ldr	r0, [pc, #180]	; (b1b0 <cert_app_init+0x22c>)
    b0fa:	4b0c      	ldr	r3, [pc, #48]	; (b12c <cert_app_init+0x1a8>)
    b0fc:	4798      	blx	r3
}
    b0fe:	b003      	add	sp, #12
    b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("\nJoin parameters initialization failed\n\r");
    b102:	482c      	ldr	r0, [pc, #176]	; (b1b4 <cert_app_init+0x230>)
    b104:	4b09      	ldr	r3, [pc, #36]	; (b12c <cert_app_init+0x1a8>)
    b106:	4798      	blx	r3
    b108:	e7bd      	b.n	b086 <cert_app_init+0x102>
        printf("\nOTAA Join parameters initialization failed\n\r");
    b10a:	482b      	ldr	r0, [pc, #172]	; (b1b8 <cert_app_init+0x234>)
    b10c:	4b07      	ldr	r3, [pc, #28]	; (b12c <cert_app_init+0x1a8>)
    b10e:	4798      	blx	r3
    b110:	e7ed      	b.n	b0ee <cert_app_init+0x16a>
        print_stack_status(status);
    b112:	4b2a      	ldr	r3, [pc, #168]	; (b1bc <cert_app_init+0x238>)
    b114:	4798      	blx	r3
}
    b116:	e7f2      	b.n	b0fe <cert_app_init+0x17a>
    b118:	00008f71 	.word	0x00008f71
    b11c:	00008eb5 	.word	0x00008eb5
    b120:	20000fbb 	.word	0x20000fbb
    b124:	00009eb9 	.word	0x00009eb9
    b128:	0001ca14 	.word	0x0001ca14
    b12c:	000159e1 	.word	0x000159e1
    b130:	0000ac25 	.word	0x0000ac25
    b134:	0000ad55 	.word	0x0000ad55
    b138:	0000ce9d 	.word	0x0000ce9d
    b13c:	0001ca48 	.word	0x0001ca48
    b140:	00015aa5 	.word	0x00015aa5
    b144:	0001ca78 	.word	0x0001ca78
    b148:	0001ca80 	.word	0x0001ca80
    b14c:	0001ca8c 	.word	0x0001ca8c
    b150:	00003b79 	.word	0x00003b79
    b154:	00015829 	.word	0x00015829
    b158:	0001ca10 	.word	0x0001ca10
    b15c:	000101b5 	.word	0x000101b5
    b160:	0001caa4 	.word	0x0001caa4
    b164:	0001cae4 	.word	0x0001cae4
    b168:	0000fd21 	.word	0x0000fd21
    b16c:	0001cafc 	.word	0x0001cafc
    b170:	0001cb24 	.word	0x0001cb24
    b174:	20000038 	.word	0x20000038
    b178:	0001cb60 	.word	0x0001cb60
    b17c:	0001cb70 	.word	0x0001cb70
    b180:	20000028 	.word	0x20000028
    b184:	0001cb78 	.word	0x0001cb78
    b188:	0000ab29 	.word	0x0000ab29
    b18c:	20000044 	.word	0x20000044
    b190:	0001cb94 	.word	0x0001cb94
    b194:	2000003c 	.word	0x2000003c
    b198:	0001cbd8 	.word	0x0001cbd8
    b19c:	20000010 	.word	0x20000010
    b1a0:	0001cbe8 	.word	0x0001cbe8
    b1a4:	20000018 	.word	0x20000018
    b1a8:	0001cbfc 	.word	0x0001cbfc
    b1ac:	0000dd29 	.word	0x0000dd29
    b1b0:	0001cc40 	.word	0x0001cc40
    b1b4:	0001cbac 	.word	0x0001cbac
    b1b8:	0001cc10 	.word	0x0001cc10
    b1bc:	0000ab69 	.word	0x0000ab69

0000b1c0 <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    b1c0:	b510      	push	{r4, lr}
    b1c2:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    b1c4:	4b07      	ldr	r3, [pc, #28]	; (b1e4 <appPostTask+0x24>)
    b1c6:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    b1c8:	4907      	ldr	r1, [pc, #28]	; (b1e8 <appPostTask+0x28>)
    b1ca:	780b      	ldrb	r3, [r1, #0]
    b1cc:	2201      	movs	r2, #1
    b1ce:	40a2      	lsls	r2, r4
    b1d0:	4313      	orrs	r3, r2
    b1d2:	b2db      	uxtb	r3, r3
    b1d4:	700b      	strb	r3, [r1, #0]
    ATOMIC_SECTION_EXIT
    b1d6:	4b05      	ldr	r3, [pc, #20]	; (b1ec <appPostTask+0x2c>)
    b1d8:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    b1da:	2010      	movs	r0, #16
    b1dc:	4b04      	ldr	r3, [pc, #16]	; (b1f0 <appPostTask+0x30>)
    b1de:	4798      	blx	r3
}
    b1e0:	bd10      	pop	{r4, pc}
    b1e2:	46c0      	nop			; (mov r8, r8)
    b1e4:	00004165 	.word	0x00004165
    b1e8:	20001038 	.word	0x20001038
    b1ec:	00004171 	.word	0x00004171
    b1f0:	0000a511 	.word	0x0000a511

0000b1f4 <demoTimerCb>:
{
    b1f4:	b510      	push	{r4, lr}
    b1f6:	b082      	sub	sp, #8
    printf("%d..",count);
    b1f8:	4c2b      	ldr	r4, [pc, #172]	; (b2a8 <demoTimerCb+0xb4>)
    b1fa:	7821      	ldrb	r1, [r4, #0]
    b1fc:	b2c9      	uxtb	r1, r1
    b1fe:	482b      	ldr	r0, [pc, #172]	; (b2ac <demoTimerCb+0xb8>)
    b200:	4b2b      	ldr	r3, [pc, #172]	; (b2b0 <demoTimerCb+0xbc>)
    b202:	4798      	blx	r3
    count--;
    b204:	7823      	ldrb	r3, [r4, #0]
    b206:	3b01      	subs	r3, #1
    b208:	b2db      	uxtb	r3, r3
    b20a:	7023      	strb	r3, [r4, #0]
	startReceiving = false;
    b20c:	2200      	movs	r2, #0
    b20e:	4b29      	ldr	r3, [pc, #164]	; (b2b4 <demoTimerCb+0xc0>)
    b210:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
    b212:	4c29      	ldr	r4, [pc, #164]	; (b2b8 <demoTimerCb+0xc4>)
    b214:	210a      	movs	r1, #10
    b216:	0020      	movs	r0, r4
    b218:	4b28      	ldr	r3, [pc, #160]	; (b2bc <demoTimerCb+0xc8>)
    b21a:	4798      	blx	r3
    b21c:	0023      	movs	r3, r4
    b21e:	0020      	movs	r0, r4
    b220:	300b      	adds	r0, #11
    b222:	e002      	b.n	b22a <demoTimerCb+0x36>
    b224:	3301      	adds	r3, #1
    for(i = 0;i<=10;i++)
    b226:	4283      	cmp	r3, r0
    b228:	d006      	beq.n	b238 <demoTimerCb+0x44>
        if(rxchar[i] != 13 && rxchar[i] != 10)
    b22a:	781c      	ldrb	r4, [r3, #0]
    b22c:	2c0d      	cmp	r4, #13
    b22e:	d0f9      	beq.n	b224 <demoTimerCb+0x30>
    b230:	2c0a      	cmp	r4, #10
    b232:	d0f7      	beq.n	b224 <demoTimerCb+0x30>
            rxdata = rxchar[i];
    b234:	b264      	sxtb	r4, r4
            break;
    b236:	e000      	b.n	b23a <demoTimerCb+0x46>
    int8_t rxdata = 0;
    b238:	2400      	movs	r4, #0
    if(!count)
    b23a:	4b1b      	ldr	r3, [pc, #108]	; (b2a8 <demoTimerCb+0xb4>)
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	2b00      	cmp	r3, #0
    b240:	d00d      	beq.n	b25e <demoTimerCb+0x6a>
    if(count > 0 && (!rxdata))
    b242:	4b19      	ldr	r3, [pc, #100]	; (b2a8 <demoTimerCb+0xb4>)
    b244:	781b      	ldrb	r3, [r3, #0]
    b246:	2b00      	cmp	r3, #0
    b248:	d017      	beq.n	b27a <demoTimerCb+0x86>
    b24a:	2c00      	cmp	r4, #0
    b24c:	d00b      	beq.n	b266 <demoTimerCb+0x72>
    else if(count == 0 && (!rxdata))
    b24e:	4b16      	ldr	r3, [pc, #88]	; (b2a8 <demoTimerCb+0xb4>)
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	2b00      	cmp	r3, #0
    b254:	d017      	beq.n	b286 <demoTimerCb+0x92>
    else if(rxdata)
    b256:	2c00      	cmp	r4, #0
    b258:	d115      	bne.n	b286 <demoTimerCb+0x92>
}
    b25a:	b002      	add	sp, #8
    b25c:	bd10      	pop	{r4, pc}
        printf("\r\n");
    b25e:	4818      	ldr	r0, [pc, #96]	; (b2c0 <demoTimerCb+0xcc>)
    b260:	4b18      	ldr	r3, [pc, #96]	; (b2c4 <demoTimerCb+0xd0>)
    b262:	4798      	blx	r3
    b264:	e7ed      	b.n	b242 <demoTimerCb+0x4e>
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    b266:	4b18      	ldr	r3, [pc, #96]	; (b2c8 <demoTimerCb+0xd4>)
    b268:	7818      	ldrb	r0, [r3, #0]
    b26a:	2300      	movs	r3, #0
    b26c:	9300      	str	r3, [sp, #0]
    b26e:	4b17      	ldr	r3, [pc, #92]	; (b2cc <demoTimerCb+0xd8>)
    b270:	2200      	movs	r2, #0
    b272:	4917      	ldr	r1, [pc, #92]	; (b2d0 <demoTimerCb+0xdc>)
    b274:	4c17      	ldr	r4, [pc, #92]	; (b2d4 <demoTimerCb+0xe0>)
    b276:	47a0      	blx	r4
    b278:	e7ef      	b.n	b25a <demoTimerCb+0x66>
    else if(count == 0 && (!rxdata))
    b27a:	4b0b      	ldr	r3, [pc, #44]	; (b2a8 <demoTimerCb+0xb4>)
    b27c:	781b      	ldrb	r3, [r3, #0]
    b27e:	2b00      	cmp	r3, #0
    b280:	d1e9      	bne.n	b256 <demoTimerCb+0x62>
    b282:	2c00      	cmp	r4, #0
    b284:	d009      	beq.n	b29a <demoTimerCb+0xa6>
        printf("\r\n");
    b286:	480e      	ldr	r0, [pc, #56]	; (b2c0 <demoTimerCb+0xcc>)
    b288:	4b0e      	ldr	r3, [pc, #56]	; (b2c4 <demoTimerCb+0xd0>)
    b28a:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    b28c:	2201      	movs	r2, #1
    b28e:	4b12      	ldr	r3, [pc, #72]	; (b2d8 <demoTimerCb+0xe4>)
    b290:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    b292:	2000      	movs	r0, #0
    b294:	4b11      	ldr	r3, [pc, #68]	; (b2dc <demoTimerCb+0xe8>)
    b296:	4798      	blx	r3
}
    b298:	e7df      	b.n	b25a <demoTimerCb+0x66>
		appTaskState = RESTORE_BAND_STATE;
    b29a:	2200      	movs	r2, #0
    b29c:	4b0e      	ldr	r3, [pc, #56]	; (b2d8 <demoTimerCb+0xe4>)
    b29e:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    b2a0:	2000      	movs	r0, #0
    b2a2:	4b0e      	ldr	r3, [pc, #56]	; (b2dc <demoTimerCb+0xe8>)
    b2a4:	4798      	blx	r3
    b2a6:	e7d8      	b.n	b25a <demoTimerCb+0x66>
    b2a8:	2000005e 	.word	0x2000005e
    b2ac:	0001d100 	.word	0x0001d100
    b2b0:	000159e1 	.word	0x000159e1
    b2b4:	20001068 	.word	0x20001068
    b2b8:	2000105c 	.word	0x2000105c
    b2bc:	00003ae5 	.word	0x00003ae5
    b2c0:	0001d1ec 	.word	0x0001d1ec
    b2c4:	00015aa5 	.word	0x00015aa5
    b2c8:	200000cf 	.word	0x200000cf
    b2cc:	0000b1f5 	.word	0x0000b1f5
    b2d0:	000f4240 	.word	0x000f4240
    b2d4:	00009eed 	.word	0x00009eed
    b2d8:	20001039 	.word	0x20001039
    b2dc:	0000b1c1 	.word	0x0000b1c1

0000b2e0 <lTimerCb>:
{
    b2e0:	b510      	push	{r4, lr}
    b2e2:	b082      	sub	sp, #8
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    b2e4:	4b07      	ldr	r3, [pc, #28]	; (b304 <lTimerCb+0x24>)
    b2e6:	7818      	ldrb	r0, [r3, #0]
    b2e8:	2300      	movs	r3, #0
    b2ea:	9300      	str	r3, [sp, #0]
    b2ec:	4b06      	ldr	r3, [pc, #24]	; (b308 <lTimerCb+0x28>)
    b2ee:	2200      	movs	r2, #0
    b2f0:	4906      	ldr	r1, [pc, #24]	; (b30c <lTimerCb+0x2c>)
    b2f2:	4c07      	ldr	r4, [pc, #28]	; (b310 <lTimerCb+0x30>)
    b2f4:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&toggle);
    b2f6:	4907      	ldr	r1, [pc, #28]	; (b314 <lTimerCb+0x34>)
    b2f8:	2003      	movs	r0, #3
    b2fa:	4b07      	ldr	r3, [pc, #28]	; (b318 <lTimerCb+0x38>)
    b2fc:	4798      	blx	r3
}
    b2fe:	b002      	add	sp, #8
    b300:	bd10      	pop	{r4, pc}
    b302:	46c0      	nop			; (mov r8, r8)
    b304:	200000d0 	.word	0x200000d0
    b308:	0000b2e1 	.word	0x0000b2e1
    b30c:	000186a0 	.word	0x000186a0
    b310:	00009eed 	.word	0x00009eed
    b314:	200000ce 	.word	0x200000ce
    b318:	0000982d 	.word	0x0000982d

0000b31c <displayTask>:
{
    b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(appTaskState)
    b31e:	4b38      	ldr	r3, [pc, #224]	; (b400 <displayTask+0xe4>)
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	2b01      	cmp	r3, #1
    b324:	d016      	beq.n	b354 <displayTask+0x38>
    b326:	2b00      	cmp	r3, #0
    b328:	d007      	beq.n	b33a <displayTask+0x1e>
    b32a:	2b02      	cmp	r3, #2
    b32c:	d026      	beq.n	b37c <displayTask+0x60>
    b32e:	2b03      	cmp	r3, #3
    b330:	d042      	beq.n	b3b8 <displayTask+0x9c>
			printf("Error STATE Entered\r\n");
    b332:	4834      	ldr	r0, [pc, #208]	; (b404 <displayTask+0xe8>)
    b334:	4b34      	ldr	r3, [pc, #208]	; (b408 <displayTask+0xec>)
    b336:	4798      	blx	r3
			break;
    b338:	e00a      	b.n	b350 <displayTask+0x34>
	set_LED_data(LED_AMBER,&off);
    b33a:	4d34      	ldr	r5, [pc, #208]	; (b40c <displayTask+0xf0>)
    b33c:	0029      	movs	r1, r5
    b33e:	2002      	movs	r0, #2
    b340:	4c33      	ldr	r4, [pc, #204]	; (b410 <displayTask+0xf4>)
    b342:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    b344:	0029      	movs	r1, r5
    b346:	2003      	movs	r0, #3
    b348:	47a0      	blx	r4
	appPostTask(PROCESS_TASK_HANDLER);
    b34a:	2001      	movs	r0, #1
    b34c:	4b31      	ldr	r3, [pc, #196]	; (b414 <displayTask+0xf8>)
    b34e:	4798      	blx	r3
}
    b350:	2000      	movs	r0, #0
    b352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_LED_data(LED_AMBER,&off);
    b354:	4d2d      	ldr	r5, [pc, #180]	; (b40c <displayTask+0xf0>)
    b356:	0029      	movs	r1, r5
    b358:	2002      	movs	r0, #2
    b35a:	4c2d      	ldr	r4, [pc, #180]	; (b410 <displayTask+0xf4>)
    b35c:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    b35e:	0029      	movs	r1, r5
    b360:	2003      	movs	r0, #3
    b362:	47a0      	blx	r4
	printf("1. Demo application\r\n");
    b364:	482c      	ldr	r0, [pc, #176]	; (b418 <displayTask+0xfc>)
    b366:	4c28      	ldr	r4, [pc, #160]	; (b408 <displayTask+0xec>)
    b368:	47a0      	blx	r4
	printf("2. Certification application\r\n");
    b36a:	482c      	ldr	r0, [pc, #176]	; (b41c <displayTask+0x100>)
    b36c:	47a0      	blx	r4
	printf("\r\n Select Application : ");
    b36e:	482c      	ldr	r0, [pc, #176]	; (b420 <displayTask+0x104>)
    b370:	4b2c      	ldr	r3, [pc, #176]	; (b424 <displayTask+0x108>)
    b372:	4798      	blx	r3
	startReceiving = true;
    b374:	2201      	movs	r2, #1
    b376:	4b2c      	ldr	r3, [pc, #176]	; (b428 <displayTask+0x10c>)
    b378:	701a      	strb	r2, [r3, #0]
    b37a:	e7e9      	b.n	b350 <displayTask+0x34>
    set_LED_data(LED_AMBER,&off);
    b37c:	4d23      	ldr	r5, [pc, #140]	; (b40c <displayTask+0xf0>)
    b37e:	0029      	movs	r1, r5
    b380:	2002      	movs	r0, #2
    b382:	4c23      	ldr	r4, [pc, #140]	; (b410 <displayTask+0xf4>)
    b384:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);
    b386:	0029      	movs	r1, r5
    b388:	2003      	movs	r0, #3
    b38a:	47a0      	blx	r4
    printf("\r\nPlease select one of the band given below\r\n");
    b38c:	4827      	ldr	r0, [pc, #156]	; (b42c <displayTask+0x110>)
    b38e:	4b1e      	ldr	r3, [pc, #120]	; (b408 <displayTask+0xec>)
    b390:	4798      	blx	r3
    b392:	2401      	movs	r4, #1
	    printf("%d. %s\r\n",i,bandStrings[i]);
    b394:	4f26      	ldr	r7, [pc, #152]	; (b430 <displayTask+0x114>)
    b396:	4d27      	ldr	r5, [pc, #156]	; (b434 <displayTask+0x118>)
    b398:	4e22      	ldr	r6, [pc, #136]	; (b424 <displayTask+0x108>)
    b39a:	00a3      	lsls	r3, r4, #2
    b39c:	59da      	ldr	r2, [r3, r7]
    b39e:	0021      	movs	r1, r4
    b3a0:	0028      	movs	r0, r5
    b3a2:	47b0      	blx	r6
    b3a4:	3401      	adds	r4, #1
    for(i = 1;i < sizeof(bandTable); i++)
    b3a6:	2c0a      	cmp	r4, #10
    b3a8:	d1f7      	bne.n	b39a <displayTask+0x7e>
    printf("Select Regional Band : ");
    b3aa:	4823      	ldr	r0, [pc, #140]	; (b438 <displayTask+0x11c>)
    b3ac:	4b1d      	ldr	r3, [pc, #116]	; (b424 <displayTask+0x108>)
    b3ae:	4798      	blx	r3
	startReceiving = true;
    b3b0:	2201      	movs	r2, #1
    b3b2:	4b1d      	ldr	r3, [pc, #116]	; (b428 <displayTask+0x10c>)
    b3b4:	701a      	strb	r2, [r3, #0]
    b3b6:	e7cb      	b.n	b350 <displayTask+0x34>
    printf("\r\n1. Send Join Request\r\n");
    b3b8:	4820      	ldr	r0, [pc, #128]	; (b43c <displayTask+0x120>)
    b3ba:	4c13      	ldr	r4, [pc, #76]	; (b408 <displayTask+0xec>)
    b3bc:	47a0      	blx	r4
    printf("2. Send Data\r\n");
    b3be:	4820      	ldr	r0, [pc, #128]	; (b440 <displayTask+0x124>)
    b3c0:	47a0      	blx	r4
	printf("3. Main Menu\r\n") ;
    b3c2:	4820      	ldr	r0, [pc, #128]	; (b444 <displayTask+0x128>)
    b3c4:	47a0      	blx	r4
	printf("4. MAC Pause\r\n") ;
    b3c6:	4820      	ldr	r0, [pc, #128]	; (b448 <displayTask+0x12c>)
    b3c8:	47a0      	blx	r4
	printf("5. MAC Resume\r\n") ;
    b3ca:	4820      	ldr	r0, [pc, #128]	; (b44c <displayTask+0x130>)
    b3cc:	47a0      	blx	r4
	printf("6. Configure Radio\r\n") ;
    b3ce:	4820      	ldr	r0, [pc, #128]	; (b450 <displayTask+0x134>)
    b3d0:	47a0      	blx	r4
	printf("7. Send Radio Data\r\n") ;
    b3d2:	4820      	ldr	r0, [pc, #128]	; (b454 <displayTask+0x138>)
    b3d4:	47a0      	blx	r4
	printf("8. Enter Radio Receive mode\r\n") ;
    b3d6:	4820      	ldr	r0, [pc, #128]	; (b458 <displayTask+0x13c>)
    b3d8:	47a0      	blx	r4
	printf("9. Exit Radio Receive mode\r\n") ;
    b3da:	4820      	ldr	r0, [pc, #128]	; (b45c <displayTask+0x140>)
    b3dc:	47a0      	blx	r4
	printf("0. Sleep\r\n") ;
    b3de:	4820      	ldr	r0, [pc, #128]	; (b460 <displayTask+0x144>)
    b3e0:	47a0      	blx	r4
	printf("\r\nEnter your choice: ");
    b3e2:	4820      	ldr	r0, [pc, #128]	; (b464 <displayTask+0x148>)
    b3e4:	4b0f      	ldr	r3, [pc, #60]	; (b424 <displayTask+0x108>)
    b3e6:	4798      	blx	r3
    set_LED_data(LED_AMBER,&off);
    b3e8:	4d08      	ldr	r5, [pc, #32]	; (b40c <displayTask+0xf0>)
    b3ea:	0029      	movs	r1, r5
    b3ec:	2002      	movs	r0, #2
    b3ee:	4c08      	ldr	r4, [pc, #32]	; (b410 <displayTask+0xf4>)
    b3f0:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);	
    b3f2:	0029      	movs	r1, r5
    b3f4:	2003      	movs	r0, #3
    b3f6:	47a0      	blx	r4
	startReceiving = true;
    b3f8:	2201      	movs	r2, #1
    b3fa:	4b0b      	ldr	r3, [pc, #44]	; (b428 <displayTask+0x10c>)
    b3fc:	701a      	strb	r2, [r3, #0]
    b3fe:	e7a7      	b.n	b350 <displayTask+0x34>
    b400:	20001039 	.word	0x20001039
    b404:	0001d524 	.word	0x0001d524
    b408:	00015aa5 	.word	0x00015aa5
    b40c:	20001058 	.word	0x20001058
    b410:	0000982d 	.word	0x0000982d
    b414:	0000b1c1 	.word	0x0000b1c1
    b418:	0001d3f0 	.word	0x0001d3f0
    b41c:	0001d408 	.word	0x0001d408
    b420:	0001d428 	.word	0x0001d428
    b424:	000159e1 	.word	0x000159e1
    b428:	20001068 	.word	0x20001068
    b42c:	0001ca48 	.word	0x0001ca48
    b430:	0001d0d8 	.word	0x0001d0d8
    b434:	0001ca80 	.word	0x0001ca80
    b438:	0001ca8c 	.word	0x0001ca8c
    b43c:	0001d444 	.word	0x0001d444
    b440:	0001d45c 	.word	0x0001d45c
    b444:	0001d46c 	.word	0x0001d46c
    b448:	0001d47c 	.word	0x0001d47c
    b44c:	0001d48c 	.word	0x0001d48c
    b450:	0001d49c 	.word	0x0001d49c
    b454:	0001d4b0 	.word	0x0001d4b0
    b458:	0001d4c4 	.word	0x0001d4c4
    b45c:	0001d4e4 	.word	0x0001d4e4
    b460:	0001d500 	.word	0x0001d500
    b464:	0001d50c 	.word	0x0001d50c

0000b468 <appWakeup>:
{
    b468:	b510      	push	{r4, lr}
    b46a:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    b46c:	4b07      	ldr	r3, [pc, #28]	; (b48c <appWakeup+0x24>)
    b46e:	4798      	blx	r3
    sio2host_init();
    b470:	4b07      	ldr	r3, [pc, #28]	; (b490 <appWakeup+0x28>)
    b472:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    b474:	2203      	movs	r2, #3
    b476:	4b07      	ldr	r3, [pc, #28]	; (b494 <appWakeup+0x2c>)
    b478:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    b47a:	2000      	movs	r0, #0
    b47c:	4b06      	ldr	r3, [pc, #24]	; (b498 <appWakeup+0x30>)
    b47e:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    b480:	0021      	movs	r1, r4
    b482:	4806      	ldr	r0, [pc, #24]	; (b49c <appWakeup+0x34>)
    b484:	4b06      	ldr	r3, [pc, #24]	; (b4a0 <appWakeup+0x38>)
    b486:	4798      	blx	r3
}
    b488:	bd10      	pop	{r4, pc}
    b48a:	46c0      	nop			; (mov r8, r8)
    b48c:	00003e81 	.word	0x00003e81
    b490:	0000392d 	.word	0x0000392d
    b494:	20001039 	.word	0x20001039
    b498:	0000b1c1 	.word	0x0000b1c1
    b49c:	0001d0c4 	.word	0x0001d0c4
    b4a0:	000159e1 	.word	0x000159e1

0000b4a4 <serial_data_handler>:
{
    b4a4:	b510      	push	{r4, lr}
	if (startReceiving == true)
    b4a6:	4b0e      	ldr	r3, [pc, #56]	; (b4e0 <serial_data_handler+0x3c>)
    b4a8:	781b      	ldrb	r3, [r3, #0]
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d100      	bne.n	b4b0 <serial_data_handler+0xc>
}
    b4ae:	bd10      	pop	{r4, pc}
		if((-1) != (rxChar = sio2host_getchar_nowait()))
    b4b0:	4b0c      	ldr	r3, [pc, #48]	; (b4e4 <serial_data_handler+0x40>)
    b4b2:	4798      	blx	r3
    b4b4:	1c43      	adds	r3, r0, #1
    b4b6:	d0fa      	beq.n	b4ae <serial_data_handler+0xa>
			serialData = (char)rxChar;
    b4b8:	b2c0      	uxtb	r0, r0
			if((serialData != '\r') && (serialData != '\n') && (serialData != '\b'))
    b4ba:	280d      	cmp	r0, #13
    b4bc:	d0f7      	beq.n	b4ae <serial_data_handler+0xa>
    b4be:	2302      	movs	r3, #2
    b4c0:	0002      	movs	r2, r0
    b4c2:	439a      	bics	r2, r3
    b4c4:	2a08      	cmp	r2, #8
    b4c6:	d0f2      	beq.n	b4ae <serial_data_handler+0xa>
				startReceiving = false;
    b4c8:	2200      	movs	r2, #0
    b4ca:	4b05      	ldr	r3, [pc, #20]	; (b4e0 <serial_data_handler+0x3c>)
    b4cc:	701a      	strb	r2, [r3, #0]
  			    serialBuffer = rxChar;
    b4ce:	4b06      	ldr	r3, [pc, #24]	; (b4e8 <serial_data_handler+0x44>)
    b4d0:	7018      	strb	r0, [r3, #0]
			    appPostTask(PROCESS_TASK_HANDLER);
    b4d2:	2001      	movs	r0, #1
    b4d4:	4b05      	ldr	r3, [pc, #20]	; (b4ec <serial_data_handler+0x48>)
    b4d6:	4798      	blx	r3
				printf("\r\n");			
    b4d8:	4805      	ldr	r0, [pc, #20]	; (b4f0 <serial_data_handler+0x4c>)
    b4da:	4b06      	ldr	r3, [pc, #24]	; (b4f4 <serial_data_handler+0x50>)
    b4dc:	4798      	blx	r3
}
    b4de:	e7e6      	b.n	b4ae <serial_data_handler+0xa>
    b4e0:	20001068 	.word	0x20001068
    b4e4:	00003b99 	.word	0x00003b99
    b4e8:	20001067 	.word	0x20001067
    b4ec:	0000b1c1 	.word	0x0000b1c1
    b4f0:	0001d1ec 	.word	0x0001d1ec
    b4f4:	00015aa5 	.word	0x00015aa5

0000b4f8 <mote_demo_init>:
{
    b4f8:	b530      	push	{r4, r5, lr}
    b4fa:	b087      	sub	sp, #28
    resource_init();
    b4fc:	4b33      	ldr	r3, [pc, #204]	; (b5cc <mote_demo_init+0xd4>)
    b4fe:	4798      	blx	r3
static void dev_eui_read(void)
{
#if (EDBG_EUI_READ == 1)
	uint8_t invalidEDBGDevEui[8];
	uint8_t EDBGDevEUI[8];
	edbg_eui_read_eui64((uint8_t *)&EDBGDevEUI);
    b500:	a804      	add	r0, sp, #16
    b502:	4b33      	ldr	r3, [pc, #204]	; (b5d0 <mote_demo_init+0xd8>)
    b504:	4798      	blx	r3
	memset(&invalidEDBGDevEui, 0xFF, sizeof(invalidEDBGDevEui));
    b506:	2208      	movs	r2, #8
    b508:	21ff      	movs	r1, #255	; 0xff
    b50a:	a802      	add	r0, sp, #8
    b50c:	4b31      	ldr	r3, [pc, #196]	; (b5d4 <mote_demo_init+0xdc>)
    b50e:	4798      	blx	r3
	/* If EDBG doesnot have DEV EUI, the read value will be of all 0xFF, 
	   Set devEUI in conf_app.h in that case */
	if(0 != memcmp(&EDBGDevEUI, &invalidEDBGDevEui, sizeof(demoDevEui)))
    b510:	2208      	movs	r2, #8
    b512:	a902      	add	r1, sp, #8
    b514:	a804      	add	r0, sp, #16
    b516:	4b30      	ldr	r3, [pc, #192]	; (b5d8 <mote_demo_init+0xe0>)
    b518:	4798      	blx	r3
    b51a:	2800      	cmp	r0, #0
    b51c:	d003      	beq.n	b526 <mote_demo_init+0x2e>
	{
		/* Set EUI addr in EDBG if there */
		memcpy(demoDevEui, EDBGDevEUI, sizeof(demoDevEui));
    b51e:	4a2f      	ldr	r2, [pc, #188]	; (b5dc <mote_demo_init+0xe4>)
    b520:	ab04      	add	r3, sp, #16
    b522:	cb03      	ldmia	r3!, {r0, r1}
    b524:	c203      	stmia	r2!, {r0, r1}
	startReceiving = false;
    b526:	2200      	movs	r2, #0
    b528:	4b2d      	ldr	r3, [pc, #180]	; (b5e0 <mote_demo_init+0xe8>)
    b52a:	701a      	strb	r2, [r3, #0]
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    b52c:	492d      	ldr	r1, [pc, #180]	; (b5e4 <mote_demo_init+0xec>)
    b52e:	482e      	ldr	r0, [pc, #184]	; (b5e8 <mote_demo_init+0xf0>)
    b530:	4b2e      	ldr	r3, [pc, #184]	; (b5ec <mote_demo_init+0xf4>)
    b532:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    b534:	482e      	ldr	r0, [pc, #184]	; (b5f0 <mote_demo_init+0xf8>)
    b536:	4c2f      	ldr	r4, [pc, #188]	; (b5f4 <mote_demo_init+0xfc>)
    b538:	47a0      	blx	r4
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    b53a:	492f      	ldr	r1, [pc, #188]	; (b5f8 <mote_demo_init+0x100>)
    b53c:	482f      	ldr	r0, [pc, #188]	; (b5fc <mote_demo_init+0x104>)
    b53e:	47a0      	blx	r4
    printf("\r\nInit - Successful\r\n");
    b540:	482f      	ldr	r0, [pc, #188]	; (b600 <mote_demo_init+0x108>)
    b542:	4b30      	ldr	r3, [pc, #192]	; (b604 <mote_demo_init+0x10c>)
    b544:	4798      	blx	r3
    status = PDS_IsRestorable();
    b546:	4b30      	ldr	r3, [pc, #192]	; (b608 <mote_demo_init+0x110>)
    b548:	4798      	blx	r3
    if(status)
    b54a:	2800      	cmp	r0, #0
    b54c:	d037      	beq.n	b5be <mote_demo_init+0xc6>
        PDS_RestoreAll();
    b54e:	4b2f      	ldr	r3, [pc, #188]	; (b60c <mote_demo_init+0x114>)
    b550:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    b552:	4c2f      	ldr	r4, [pc, #188]	; (b610 <mote_demo_init+0x118>)
    b554:	0022      	movs	r2, r4
    b556:	2100      	movs	r1, #0
    b558:	2023      	movs	r0, #35	; 0x23
    b55a:	4b2e      	ldr	r3, [pc, #184]	; (b614 <mote_demo_init+0x11c>)
    b55c:	4798      	blx	r3
            if(bandTable[i] == prevBand)
    b55e:	7821      	ldrb	r1, [r4, #0]
    b560:	4b2d      	ldr	r3, [pc, #180]	; (b618 <mote_demo_init+0x120>)
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	428b      	cmp	r3, r1
    b566:	d027      	beq.n	b5b8 <mote_demo_init+0xc0>
    b568:	2401      	movs	r4, #1
    b56a:	482b      	ldr	r0, [pc, #172]	; (b618 <mote_demo_init+0x120>)
    b56c:	5c22      	ldrb	r2, [r4, r0]
    b56e:	428a      	cmp	r2, r1
    b570:	d023      	beq.n	b5ba <mote_demo_init+0xc2>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    b572:	3401      	adds	r4, #1
    b574:	2c09      	cmp	r4, #9
    b576:	d1f9      	bne.n	b56c <mote_demo_init+0x74>
        uint8_t prevChoice = 0xFF;
    b578:	34f6      	adds	r4, #246	; 0xf6
        memset(rxchar,0,sizeof(rxchar));
    b57a:	4d28      	ldr	r5, [pc, #160]	; (b61c <mote_demo_init+0x124>)
    b57c:	220b      	movs	r2, #11
    b57e:	2100      	movs	r1, #0
    b580:	0028      	movs	r0, r5
    b582:	4b14      	ldr	r3, [pc, #80]	; (b5d4 <mote_demo_init+0xdc>)
    b584:	4798      	blx	r3
        sio2host_rx(rxchar,10);
    b586:	210a      	movs	r1, #10
    b588:	0028      	movs	r0, r5
    b58a:	4b25      	ldr	r3, [pc, #148]	; (b620 <mote_demo_init+0x128>)
    b58c:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
    b58e:	00a4      	lsls	r4, r4, #2
    b590:	4a24      	ldr	r2, [pc, #144]	; (b624 <mote_demo_init+0x12c>)
    b592:	58a5      	ldr	r5, [r4, r2]
    b594:	0029      	movs	r1, r5
    b596:	4824      	ldr	r0, [pc, #144]	; (b628 <mote_demo_init+0x130>)
    b598:	4c16      	ldr	r4, [pc, #88]	; (b5f4 <mote_demo_init+0xfc>)
    b59a:	47a0      	blx	r4
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
    b59c:	0029      	movs	r1, r5
    b59e:	4823      	ldr	r0, [pc, #140]	; (b62c <mote_demo_init+0x134>)
    b5a0:	47a0      	blx	r4
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    b5a2:	4b23      	ldr	r3, [pc, #140]	; (b630 <mote_demo_init+0x138>)
    b5a4:	7818      	ldrb	r0, [r3, #0]
    b5a6:	2300      	movs	r3, #0
    b5a8:	9300      	str	r3, [sp, #0]
    b5aa:	4b22      	ldr	r3, [pc, #136]	; (b634 <mote_demo_init+0x13c>)
    b5ac:	2200      	movs	r2, #0
    b5ae:	4922      	ldr	r1, [pc, #136]	; (b638 <mote_demo_init+0x140>)
    b5b0:	4c22      	ldr	r4, [pc, #136]	; (b63c <mote_demo_init+0x144>)
    b5b2:	47a0      	blx	r4
}
    b5b4:	b007      	add	sp, #28
    b5b6:	bd30      	pop	{r4, r5, pc}
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    b5b8:	2400      	movs	r4, #0
                prevChoice = i;
    b5ba:	b2e4      	uxtb	r4, r4
                break;
    b5bc:	e7dd      	b.n	b57a <mote_demo_init+0x82>
		appTaskState = DEMO_CERT_APP_STATE;
    b5be:	2201      	movs	r2, #1
    b5c0:	4b1f      	ldr	r3, [pc, #124]	; (b640 <mote_demo_init+0x148>)
    b5c2:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    b5c4:	2000      	movs	r0, #0
    b5c6:	4b1f      	ldr	r3, [pc, #124]	; (b644 <mote_demo_init+0x14c>)
    b5c8:	4798      	blx	r3
}
    b5ca:	e7f3      	b.n	b5b4 <mote_demo_init+0xbc>
    b5cc:	000098b5 	.word	0x000098b5
    b5d0:	00008d55 	.word	0x00008d55
    b5d4:	0001594d 	.word	0x0001594d
    b5d8:	0001587d 	.word	0x0001587d
    b5dc:	2000008c 	.word	0x2000008c
    b5e0:	20001068 	.word	0x20001068
    b5e4:	0000bca9 	.word	0x0000bca9
    b5e8:	0000b6e9 	.word	0x0000b6e9
    b5ec:	0000ce9d 	.word	0x0000ce9d
    b5f0:	0001caa4 	.word	0x0001caa4
    b5f4:	000159e1 	.word	0x000159e1
    b5f8:	0001d53c 	.word	0x0001d53c
    b5fc:	0001d54c 	.word	0x0001d54c
    b600:	0001cae4 	.word	0x0001cae4
    b604:	00015aa5 	.word	0x00015aa5
    b608:	00008f29 	.word	0x00008f29
    b60c:	00008f8d 	.word	0x00008f8d
    b610:	200000cd 	.word	0x200000cd
    b614:	0000e37d 	.word	0x0000e37d
    b618:	20000054 	.word	0x20000054
    b61c:	2000105c 	.word	0x2000105c
    b620:	00003ae5 	.word	0x00003ae5
    b624:	0001d0d8 	.word	0x0001d0d8
    b628:	0001d56c 	.word	0x0001d56c
    b62c:	0001d590 	.word	0x0001d590
    b630:	200000cf 	.word	0x200000cf
    b634:	0000b1f5 	.word	0x0000b1f5
    b638:	000f4240 	.word	0x000f4240
    b63c:	00009eed 	.word	0x00009eed
    b640:	20001039 	.word	0x20001039
    b644:	0000b1c1 	.word	0x0000b1c1

0000b648 <APP_TaskHandler>:
{
    b648:	b570      	push	{r4, r5, r6, lr}
    if (appTaskFlags)
    b64a:	4b12      	ldr	r3, [pc, #72]	; (b694 <APP_TaskHandler+0x4c>)
    b64c:	781b      	ldrb	r3, [r3, #0]
    b64e:	2b00      	cmp	r3, #0
    b650:	d008      	beq.n	b664 <APP_TaskHandler+0x1c>
            if ((1 << taskId) & (appTaskFlags))
    b652:	4b10      	ldr	r3, [pc, #64]	; (b694 <APP_TaskHandler+0x4c>)
    b654:	781b      	ldrb	r3, [r3, #0]
    b656:	07db      	lsls	r3, r3, #31
    b658:	d406      	bmi.n	b668 <APP_TaskHandler+0x20>
    b65a:	4b0e      	ldr	r3, [pc, #56]	; (b694 <APP_TaskHandler+0x4c>)
    b65c:	781c      	ldrb	r4, [r3, #0]
    b65e:	07a4      	lsls	r4, r4, #30
    b660:	0fe4      	lsrs	r4, r4, #31
    b662:	d102      	bne.n	b66a <APP_TaskHandler+0x22>
}
    b664:	2000      	movs	r0, #0
    b666:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (appTaskFlags))
    b668:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    b66a:	4b0b      	ldr	r3, [pc, #44]	; (b698 <APP_TaskHandler+0x50>)
    b66c:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
    b66e:	4d09      	ldr	r5, [pc, #36]	; (b694 <APP_TaskHandler+0x4c>)
    b670:	782b      	ldrb	r3, [r5, #0]
    b672:	2201      	movs	r2, #1
    b674:	40a2      	lsls	r2, r4
    b676:	4393      	bics	r3, r2
    b678:	702b      	strb	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    b67a:	4b08      	ldr	r3, [pc, #32]	; (b69c <APP_TaskHandler+0x54>)
    b67c:	4798      	blx	r3
                appTaskHandlers[taskId]();
    b67e:	00a4      	lsls	r4, r4, #2
    b680:	4b07      	ldr	r3, [pc, #28]	; (b6a0 <APP_TaskHandler+0x58>)
    b682:	58e3      	ldr	r3, [r4, r3]
    b684:	4798      	blx	r3
                if (appTaskFlags)
    b686:	782b      	ldrb	r3, [r5, #0]
    b688:	2b00      	cmp	r3, #0
    b68a:	d0eb      	beq.n	b664 <APP_TaskHandler+0x1c>
                    SYSTEM_PostTask(APP_TASK_ID);
    b68c:	2010      	movs	r0, #16
    b68e:	4b05      	ldr	r3, [pc, #20]	; (b6a4 <APP_TaskHandler+0x5c>)
    b690:	4798      	blx	r3
    b692:	e7e7      	b.n	b664 <APP_TaskHandler+0x1c>
    b694:	20001038 	.word	0x20001038
    b698:	00004165 	.word	0x00004165
    b69c:	00004171 	.word	0x00004171
    b6a0:	0001d0bc 	.word	0x0001d0bc
    b6a4:	0000a511 	.word	0x0000a511

0000b6a8 <print_array>:
{
    b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6aa:	0004      	movs	r4, r0
    b6ac:	000d      	movs	r5, r1
    printf("0x");
    b6ae:	480a      	ldr	r0, [pc, #40]	; (b6d8 <print_array+0x30>)
    b6b0:	4b0a      	ldr	r3, [pc, #40]	; (b6dc <print_array+0x34>)
    b6b2:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    b6b4:	2d00      	cmp	r5, #0
    b6b6:	d00b      	beq.n	b6d0 <print_array+0x28>
    b6b8:	3d01      	subs	r5, #1
    b6ba:	b2ed      	uxtb	r5, r5
    b6bc:	3501      	adds	r5, #1
    b6be:	1965      	adds	r5, r4, r5
        printf("%02x", *array);
    b6c0:	4e07      	ldr	r6, [pc, #28]	; (b6e0 <print_array+0x38>)
    b6c2:	4f06      	ldr	r7, [pc, #24]	; (b6dc <print_array+0x34>)
    b6c4:	7821      	ldrb	r1, [r4, #0]
    b6c6:	0030      	movs	r0, r6
    b6c8:	47b8      	blx	r7
        array++;
    b6ca:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    b6cc:	42ac      	cmp	r4, r5
    b6ce:	d1f9      	bne.n	b6c4 <print_array+0x1c>
    printf("\n\r");
    b6d0:	4804      	ldr	r0, [pc, #16]	; (b6e4 <print_array+0x3c>)
    b6d2:	4b02      	ldr	r3, [pc, #8]	; (b6dc <print_array+0x34>)
    b6d4:	4798      	blx	r3
}
    b6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6d8:	0001ce3c 	.word	0x0001ce3c
    b6dc:	000159e1 	.word	0x000159e1
    b6e0:	0001ce40 	.word	0x0001ce40
    b6e4:	0001d118 	.word	0x0001d118

0000b6e8 <demo_appdata_callback>:
{
    b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    b6ea:	780b      	ldrb	r3, [r1, #0]
    b6ec:	2b02      	cmp	r3, #2
    b6ee:	d015      	beq.n	b71c <demo_appdata_callback+0x34>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    b6f0:	2b04      	cmp	r3, #4
    b6f2:	d100      	bne.n	b6f6 <demo_appdata_callback+0xe>
    b6f4:	e0c3      	b.n	b87e <demo_appdata_callback+0x196>
    SwTimerStop(lTimerId);
    b6f6:	4ba4      	ldr	r3, [pc, #656]	; (b988 <demo_appdata_callback+0x2a0>)
    b6f8:	7818      	ldrb	r0, [r3, #0]
    b6fa:	4ba4      	ldr	r3, [pc, #656]	; (b98c <demo_appdata_callback+0x2a4>)
    b6fc:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    b6fe:	49a4      	ldr	r1, [pc, #656]	; (b990 <demo_appdata_callback+0x2a8>)
    b700:	2003      	movs	r0, #3
    b702:	4ba4      	ldr	r3, [pc, #656]	; (b994 <demo_appdata_callback+0x2ac>)
    b704:	4798      	blx	r3
        set_LED_data(LED_AMBER,&on);
    b706:	49a4      	ldr	r1, [pc, #656]	; (b998 <demo_appdata_callback+0x2b0>)
    b708:	2002      	movs	r0, #2
    b70a:	4ba2      	ldr	r3, [pc, #648]	; (b994 <demo_appdata_callback+0x2ac>)
    b70c:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    b70e:	2203      	movs	r2, #3
    b710:	4ba2      	ldr	r3, [pc, #648]	; (b99c <demo_appdata_callback+0x2b4>)
    b712:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    b714:	2000      	movs	r0, #0
    b716:	4ba2      	ldr	r3, [pc, #648]	; (b9a0 <demo_appdata_callback+0x2b8>)
    b718:	4798      	blx	r3
}
    b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = appdata->param.rxData.status;
    b71c:	7b4c      	ldrb	r4, [r1, #13]
        switch(status)
    b71e:	2c1a      	cmp	r4, #26
    b720:	d900      	bls.n	b724 <demo_appdata_callback+0x3c>
    b722:	e0a8      	b.n	b876 <demo_appdata_callback+0x18e>
    b724:	00a3      	lsls	r3, r4, #2
    b726:	4a9f      	ldr	r2, [pc, #636]	; (b9a4 <demo_appdata_callback+0x2bc>)
    b728:	58d3      	ldr	r3, [r2, r3]
    b72a:	469f      	mov	pc, r3
    uint8_t dataLength = appdata->param.rxData.dataLength;
    b72c:	7b0e      	ldrb	r6, [r1, #12]
    if((dataLength > 0U) && (NULL != pData))
    b72e:	2e00      	cmp	r6, #0
    b730:	d022      	beq.n	b778 <demo_appdata_callback+0x90>
    uint8_t *pData = appdata->param.rxData.pData;
    b732:	688f      	ldr	r7, [r1, #8]
    if((dataLength > 0U) && (NULL != pData))
    b734:	2f00      	cmp	r7, #0
    b736:	d01f      	beq.n	b778 <demo_appdata_callback+0x90>
    uint32_t devAddress = appdata->param.rxData.devAddr;
    b738:	684d      	ldr	r5, [r1, #4]
        printf("*** Received DL Data ***\n\r");
    b73a:	489b      	ldr	r0, [pc, #620]	; (b9a8 <demo_appdata_callback+0x2c0>)
    b73c:	4c9b      	ldr	r4, [pc, #620]	; (b9ac <demo_appdata_callback+0x2c4>)
    b73e:	47a0      	blx	r4
        printf("\nFrame Received at port %d\n\r",pData[0]);
    b740:	7839      	ldrb	r1, [r7, #0]
    b742:	489b      	ldr	r0, [pc, #620]	; (b9b0 <demo_appdata_callback+0x2c8>)
    b744:	47a0      	blx	r4
        printf("\nFrame Length - %d\n\r",dataLength);
    b746:	0031      	movs	r1, r6
    b748:	489a      	ldr	r0, [pc, #616]	; (b9b4 <demo_appdata_callback+0x2cc>)
    b74a:	47a0      	blx	r4
        printf("\nAddress - 0x%lx\n\r", devAddress);
    b74c:	0029      	movs	r1, r5
    b74e:	489a      	ldr	r0, [pc, #616]	; (b9b8 <demo_appdata_callback+0x2d0>)
    b750:	47a0      	blx	r4
        printf ("\nPayload: ");
    b752:	489a      	ldr	r0, [pc, #616]	; (b9bc <demo_appdata_callback+0x2d4>)
    b754:	47a0      	blx	r4
        for (uint8_t i =0; i<dataLength - 1; i++)
    b756:	3e01      	subs	r6, #1
    b758:	2e00      	cmp	r6, #0
    b75a:	dd09      	ble.n	b770 <demo_appdata_callback+0x88>
    b75c:	2400      	movs	r4, #0
            printf("%x",pData[i+1]);
    b75e:	4d93      	ldr	r5, [pc, #588]	; (b9ac <demo_appdata_callback+0x2c4>)
    b760:	193b      	adds	r3, r7, r4
    b762:	7859      	ldrb	r1, [r3, #1]
    b764:	4896      	ldr	r0, [pc, #600]	; (b9c0 <demo_appdata_callback+0x2d8>)
    b766:	47a8      	blx	r5
        for (uint8_t i =0; i<dataLength - 1; i++)
    b768:	3401      	adds	r4, #1
    b76a:	b2e4      	uxtb	r4, r4
    b76c:	42b4      	cmp	r4, r6
    b76e:	dbf7      	blt.n	b760 <demo_appdata_callback+0x78>
        printf("\r\n*************************\r\n");
    b770:	4894      	ldr	r0, [pc, #592]	; (b9c4 <demo_appdata_callback+0x2dc>)
    b772:	4b95      	ldr	r3, [pc, #596]	; (b9c8 <demo_appdata_callback+0x2e0>)
    b774:	4798      	blx	r3
    b776:	e002      	b.n	b77e <demo_appdata_callback+0x96>
        printf("Received ACK for Confirmed data\r\n");
    b778:	4894      	ldr	r0, [pc, #592]	; (b9cc <demo_appdata_callback+0x2e4>)
    b77a:	4b93      	ldr	r3, [pc, #588]	; (b9c8 <demo_appdata_callback+0x2e0>)
    b77c:	4798      	blx	r3
    SwTimerStop(lTimerId);
    b77e:	4b82      	ldr	r3, [pc, #520]	; (b988 <demo_appdata_callback+0x2a0>)
    b780:	7818      	ldrb	r0, [r3, #0]
    b782:	4b82      	ldr	r3, [pc, #520]	; (b98c <demo_appdata_callback+0x2a4>)
    b784:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    b786:	4982      	ldr	r1, [pc, #520]	; (b990 <demo_appdata_callback+0x2a8>)
    b788:	2003      	movs	r0, #3
    b78a:	4b82      	ldr	r3, [pc, #520]	; (b994 <demo_appdata_callback+0x2ac>)
    b78c:	4798      	blx	r3
    b78e:	e7be      	b.n	b70e <demo_appdata_callback+0x26>
                printf("\n\rRADIO_NO_DATA \n\r");
    b790:	488f      	ldr	r0, [pc, #572]	; (b9d0 <demo_appdata_callback+0x2e8>)
    b792:	4b86      	ldr	r3, [pc, #536]	; (b9ac <demo_appdata_callback+0x2c4>)
    b794:	4798      	blx	r3
            break;
    b796:	e7ae      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    b798:	488e      	ldr	r0, [pc, #568]	; (b9d4 <demo_appdata_callback+0x2ec>)
    b79a:	4b84      	ldr	r3, [pc, #528]	; (b9ac <demo_appdata_callback+0x2c4>)
    b79c:	4798      	blx	r3
            break;
    b79e:	e7aa      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    b7a0:	488d      	ldr	r0, [pc, #564]	; (b9d8 <demo_appdata_callback+0x2f0>)
    b7a2:	4b82      	ldr	r3, [pc, #520]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7a4:	4798      	blx	r3
            break;
    b7a6:	e7a6      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_BUSY \n\r");
    b7a8:	488c      	ldr	r0, [pc, #560]	; (b9dc <demo_appdata_callback+0x2f4>)
    b7aa:	4b80      	ldr	r3, [pc, #512]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7ac:	4798      	blx	r3
            break;
    b7ae:	e7a2      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    b7b0:	488b      	ldr	r0, [pc, #556]	; (b9e0 <demo_appdata_callback+0x2f8>)
    b7b2:	4b7e      	ldr	r3, [pc, #504]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7b4:	4798      	blx	r3
            break;
    b7b6:	e79e      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    b7b8:	488a      	ldr	r0, [pc, #552]	; (b9e4 <demo_appdata_callback+0x2fc>)
    b7ba:	4b7c      	ldr	r3, [pc, #496]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7bc:	4798      	blx	r3
            break;
    b7be:	e79a      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    b7c0:	4889      	ldr	r0, [pc, #548]	; (b9e8 <demo_appdata_callback+0x300>)
    b7c2:	4b7a      	ldr	r3, [pc, #488]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7c4:	4798      	blx	r3
            break;
    b7c6:	e796      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rNWK_NOT_JOINED \n\r");
    b7c8:	4888      	ldr	r0, [pc, #544]	; (b9ec <demo_appdata_callback+0x304>)
    b7ca:	4b78      	ldr	r3, [pc, #480]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7cc:	4798      	blx	r3
            break;
    b7ce:	e792      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_PARAMETER \n\r");
    b7d0:	4887      	ldr	r0, [pc, #540]	; (b9f0 <demo_appdata_callback+0x308>)
    b7d2:	4b76      	ldr	r3, [pc, #472]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7d4:	4798      	blx	r3
            break;
    b7d6:	e78e      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    b7d8:	4886      	ldr	r0, [pc, #536]	; (b9f4 <demo_appdata_callback+0x30c>)
    b7da:	4b74      	ldr	r3, [pc, #464]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7dc:	4798      	blx	r3
            break;
    b7de:	e78a      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    b7e0:	4885      	ldr	r0, [pc, #532]	; (b9f8 <demo_appdata_callback+0x310>)
    b7e2:	4b72      	ldr	r3, [pc, #456]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7e4:	4798      	blx	r3
            break;
    b7e6:	e786      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    b7e8:	4884      	ldr	r0, [pc, #528]	; (b9fc <demo_appdata_callback+0x314>)
    b7ea:	4b70      	ldr	r3, [pc, #448]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7ec:	4798      	blx	r3
            break;
    b7ee:	e782      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    b7f0:	4883      	ldr	r0, [pc, #524]	; (ba00 <demo_appdata_callback+0x318>)
    b7f2:	4b6e      	ldr	r3, [pc, #440]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7f4:	4798      	blx	r3
            break;
    b7f6:	e77e      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rMAC_PAUSED  \n\r");
    b7f8:	4882      	ldr	r0, [pc, #520]	; (ba04 <demo_appdata_callback+0x31c>)
    b7fa:	4b6c      	ldr	r3, [pc, #432]	; (b9ac <demo_appdata_callback+0x2c4>)
    b7fc:	4798      	blx	r3
            break;
    b7fe:	e77a      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    b800:	4881      	ldr	r0, [pc, #516]	; (ba08 <demo_appdata_callback+0x320>)
    b802:	4b6a      	ldr	r3, [pc, #424]	; (b9ac <demo_appdata_callback+0x2c4>)
    b804:	4798      	blx	r3
            break;
    b806:	e776      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rBUSY\n\r");
    b808:	4880      	ldr	r0, [pc, #512]	; (ba0c <demo_appdata_callback+0x324>)
    b80a:	4b68      	ldr	r3, [pc, #416]	; (b9ac <demo_appdata_callback+0x2c4>)
    b80c:	4798      	blx	r3
            break;
    b80e:	e772      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rNO_ACK \n\r");
    b810:	487f      	ldr	r0, [pc, #508]	; (ba10 <demo_appdata_callback+0x328>)
    b812:	4b66      	ldr	r3, [pc, #408]	; (b9ac <demo_appdata_callback+0x2c4>)
    b814:	4798      	blx	r3
            break;
    b816:	e76e      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    b818:	487e      	ldr	r0, [pc, #504]	; (ba14 <demo_appdata_callback+0x32c>)
    b81a:	4b64      	ldr	r3, [pc, #400]	; (b9ac <demo_appdata_callback+0x2c4>)
    b81c:	4798      	blx	r3
            break;
    b81e:	e76a      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    b820:	487d      	ldr	r0, [pc, #500]	; (ba18 <demo_appdata_callback+0x330>)
    b822:	4b62      	ldr	r3, [pc, #392]	; (b9ac <demo_appdata_callback+0x2c4>)
    b824:	4798      	blx	r3
            break;
    b826:	e766      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_REQUEST \n\r");
    b828:	487c      	ldr	r0, [pc, #496]	; (ba1c <demo_appdata_callback+0x334>)
    b82a:	4b60      	ldr	r3, [pc, #384]	; (b9ac <demo_appdata_callback+0x2c4>)
    b82c:	4798      	blx	r3
            break;
    b82e:	e762      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR \n\r");
    b830:	487b      	ldr	r0, [pc, #492]	; (ba20 <demo_appdata_callback+0x338>)
    b832:	4b5e      	ldr	r3, [pc, #376]	; (b9ac <demo_appdata_callback+0x2c4>)
    b834:	4798      	blx	r3
            break;
    b836:	e75e      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rMIC_ERROR \n\r");
    b838:	487a      	ldr	r0, [pc, #488]	; (ba24 <demo_appdata_callback+0x33c>)
    b83a:	4b5c      	ldr	r3, [pc, #368]	; (b9ac <demo_appdata_callback+0x2c4>)
    b83c:	4798      	blx	r3
            break;
    b83e:	e75a      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rINVALID_MTYPE \n\r");
    b840:	4879      	ldr	r0, [pc, #484]	; (ba28 <demo_appdata_callback+0x340>)
    b842:	4b5a      	ldr	r3, [pc, #360]	; (b9ac <demo_appdata_callback+0x2c4>)
    b844:	4798      	blx	r3
            break;
    b846:	e756      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    b848:	4878      	ldr	r0, [pc, #480]	; (ba2c <demo_appdata_callback+0x344>)
    b84a:	4b58      	ldr	r3, [pc, #352]	; (b9ac <demo_appdata_callback+0x2c4>)
    b84c:	4798      	blx	r3
            break;
    b84e:	e752      	b.n	b6f6 <demo_appdata_callback+0xe>
				uint8_t dataLength = appdata->param.rxData.dataLength ;	// length of the packet received
    b850:	7b0c      	ldrb	r4, [r1, #12]
				if((dataLength > 0U) && (NULL != pData))
    b852:	2c00      	cmp	r4, #0
    b854:	d100      	bne.n	b858 <demo_appdata_callback+0x170>
    b856:	e74e      	b.n	b6f6 <demo_appdata_callback+0xe>
				uint8_t *pData = appdata->param.rxData.pData ;
    b858:	688d      	ldr	r5, [r1, #8]
				if((dataLength > 0U) && (NULL != pData))
    b85a:	2d00      	cmp	r5, #0
    b85c:	d100      	bne.n	b860 <demo_appdata_callback+0x178>
    b85e:	e74a      	b.n	b6f6 <demo_appdata_callback+0xe>
					printf ("\nPayload Received: ") ;
    b860:	4873      	ldr	r0, [pc, #460]	; (ba30 <demo_appdata_callback+0x348>)
    b862:	4b52      	ldr	r3, [pc, #328]	; (b9ac <demo_appdata_callback+0x2c4>)
    b864:	4798      	blx	r3
					print_array(pData, dataLength) ;
    b866:	0021      	movs	r1, r4
    b868:	0028      	movs	r0, r5
    b86a:	4b72      	ldr	r3, [pc, #456]	; (ba34 <demo_appdata_callback+0x34c>)
    b86c:	4798      	blx	r3
					printf("\r\n*************************\r\n");
    b86e:	4855      	ldr	r0, [pc, #340]	; (b9c4 <demo_appdata_callback+0x2dc>)
    b870:	4b55      	ldr	r3, [pc, #340]	; (b9c8 <demo_appdata_callback+0x2e0>)
    b872:	4798      	blx	r3
    b874:	e73f      	b.n	b6f6 <demo_appdata_callback+0xe>
                printf("UNKNOWN ERROR\n\r");
    b876:	4870      	ldr	r0, [pc, #448]	; (ba38 <demo_appdata_callback+0x350>)
    b878:	4b4c      	ldr	r3, [pc, #304]	; (b9ac <demo_appdata_callback+0x2c4>)
    b87a:	4798      	blx	r3
            break;
    b87c:	e00c      	b.n	b898 <demo_appdata_callback+0x1b0>
        switch(status = appdata->param.transCmpl.status)
    b87e:	790c      	ldrb	r4, [r1, #4]
    b880:	2c1b      	cmp	r4, #27
    b882:	d87d      	bhi.n	b980 <demo_appdata_callback+0x298>
    b884:	00a3      	lsls	r3, r4, #2
    b886:	4a6d      	ldr	r2, [pc, #436]	; (ba3c <demo_appdata_callback+0x354>)
    b888:	58d3      	ldr	r3, [r2, r3]
    b88a:	469f      	mov	pc, r3
                printf("Transmission Success\r\n");
    b88c:	486c      	ldr	r0, [pc, #432]	; (ba40 <demo_appdata_callback+0x358>)
    b88e:	4b4e      	ldr	r3, [pc, #312]	; (b9c8 <demo_appdata_callback+0x2e0>)
    b890:	4798      	blx	r3
        printf("\n\r*************************************************\n\r");
    b892:	486c      	ldr	r0, [pc, #432]	; (ba44 <demo_appdata_callback+0x35c>)
    b894:	4b45      	ldr	r3, [pc, #276]	; (b9ac <demo_appdata_callback+0x2c4>)
    b896:	4798      	blx	r3
    SwTimerStop(lTimerId);
    b898:	4b3b      	ldr	r3, [pc, #236]	; (b988 <demo_appdata_callback+0x2a0>)
    b89a:	7818      	ldrb	r0, [r3, #0]
    b89c:	4b3b      	ldr	r3, [pc, #236]	; (b98c <demo_appdata_callback+0x2a4>)
    b89e:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    b8a0:	493b      	ldr	r1, [pc, #236]	; (b990 <demo_appdata_callback+0x2a8>)
    b8a2:	2003      	movs	r0, #3
    b8a4:	4b3b      	ldr	r3, [pc, #236]	; (b994 <demo_appdata_callback+0x2ac>)
    b8a6:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    b8a8:	2c08      	cmp	r4, #8
    b8aa:	d100      	bne.n	b8ae <demo_appdata_callback+0x1c6>
    b8ac:	e72f      	b.n	b70e <demo_appdata_callback+0x26>
    b8ae:	e72a      	b.n	b706 <demo_appdata_callback+0x1e>
                printf("Transmission Success\r\n");
    b8b0:	4863      	ldr	r0, [pc, #396]	; (ba40 <demo_appdata_callback+0x358>)
    b8b2:	4b45      	ldr	r3, [pc, #276]	; (b9c8 <demo_appdata_callback+0x2e0>)
    b8b4:	4798      	blx	r3
            break;
    b8b6:	e7ec      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_NO_DATA \n\r");
    b8b8:	4845      	ldr	r0, [pc, #276]	; (b9d0 <demo_appdata_callback+0x2e8>)
    b8ba:	4b3c      	ldr	r3, [pc, #240]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8bc:	4798      	blx	r3
            break;
    b8be:	e7e8      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    b8c0:	4844      	ldr	r0, [pc, #272]	; (b9d4 <demo_appdata_callback+0x2ec>)
    b8c2:	4b3a      	ldr	r3, [pc, #232]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8c4:	4798      	blx	r3
            break;
    b8c6:	e7e4      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    b8c8:	4843      	ldr	r0, [pc, #268]	; (b9d8 <demo_appdata_callback+0x2f0>)
    b8ca:	4b38      	ldr	r3, [pc, #224]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8cc:	4798      	blx	r3
            break;
    b8ce:	e7e0      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_BUSY \n\r");
    b8d0:	4842      	ldr	r0, [pc, #264]	; (b9dc <demo_appdata_callback+0x2f4>)
    b8d2:	4b36      	ldr	r3, [pc, #216]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8d4:	4798      	blx	r3
            break;
    b8d6:	e7dc      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\nTx Timeout\n\r");
    b8d8:	485b      	ldr	r0, [pc, #364]	; (ba48 <demo_appdata_callback+0x360>)
    b8da:	4b34      	ldr	r3, [pc, #208]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8dc:	4798      	blx	r3
            break;
    b8de:	e7d8      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    b8e0:	483f      	ldr	r0, [pc, #252]	; (b9e0 <demo_appdata_callback+0x2f8>)
    b8e2:	4b32      	ldr	r3, [pc, #200]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8e4:	4798      	blx	r3
            break;
    b8e6:	e7d4      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    b8e8:	483e      	ldr	r0, [pc, #248]	; (b9e4 <demo_appdata_callback+0x2fc>)
    b8ea:	4b30      	ldr	r3, [pc, #192]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8ec:	4798      	blx	r3
            break;
    b8ee:	e7d0      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    b8f0:	483d      	ldr	r0, [pc, #244]	; (b9e8 <demo_appdata_callback+0x300>)
    b8f2:	4b2e      	ldr	r3, [pc, #184]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8f4:	4798      	blx	r3
            break;
    b8f6:	e7cc      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rNWK_NOT_JOINED \n\r");
    b8f8:	483c      	ldr	r0, [pc, #240]	; (b9ec <demo_appdata_callback+0x304>)
    b8fa:	4b2c      	ldr	r3, [pc, #176]	; (b9ac <demo_appdata_callback+0x2c4>)
    b8fc:	4798      	blx	r3
            break;
    b8fe:	e7c8      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rINVALID_PARAMETER \n\r");
    b900:	483b      	ldr	r0, [pc, #236]	; (b9f0 <demo_appdata_callback+0x308>)
    b902:	4b2a      	ldr	r3, [pc, #168]	; (b9ac <demo_appdata_callback+0x2c4>)
    b904:	4798      	blx	r3
            break;
    b906:	e7c4      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    b908:	483a      	ldr	r0, [pc, #232]	; (b9f4 <demo_appdata_callback+0x30c>)
    b90a:	4b28      	ldr	r3, [pc, #160]	; (b9ac <demo_appdata_callback+0x2c4>)
    b90c:	4798      	blx	r3
            break;
    b90e:	e7c0      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    b910:	4839      	ldr	r0, [pc, #228]	; (b9f8 <demo_appdata_callback+0x310>)
    b912:	4b26      	ldr	r3, [pc, #152]	; (b9ac <demo_appdata_callback+0x2c4>)
    b914:	4798      	blx	r3
            break;
    b916:	e7bc      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    b918:	4838      	ldr	r0, [pc, #224]	; (b9fc <demo_appdata_callback+0x314>)
    b91a:	4b24      	ldr	r3, [pc, #144]	; (b9ac <demo_appdata_callback+0x2c4>)
    b91c:	4798      	blx	r3
            break;
    b91e:	e7b8      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    b920:	4837      	ldr	r0, [pc, #220]	; (ba00 <demo_appdata_callback+0x318>)
    b922:	4b22      	ldr	r3, [pc, #136]	; (b9ac <demo_appdata_callback+0x2c4>)
    b924:	4798      	blx	r3
            break;
    b926:	e7b4      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rMAC_PAUSED  \n\r");
    b928:	4836      	ldr	r0, [pc, #216]	; (ba04 <demo_appdata_callback+0x31c>)
    b92a:	4b20      	ldr	r3, [pc, #128]	; (b9ac <demo_appdata_callback+0x2c4>)
    b92c:	4798      	blx	r3
            break;
    b92e:	e7b0      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    b930:	4835      	ldr	r0, [pc, #212]	; (ba08 <demo_appdata_callback+0x320>)
    b932:	4b1e      	ldr	r3, [pc, #120]	; (b9ac <demo_appdata_callback+0x2c4>)
    b934:	4798      	blx	r3
            break;
    b936:	e7ac      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rBUSY\n\r");
    b938:	4834      	ldr	r0, [pc, #208]	; (ba0c <demo_appdata_callback+0x324>)
    b93a:	4b1c      	ldr	r3, [pc, #112]	; (b9ac <demo_appdata_callback+0x2c4>)
    b93c:	4798      	blx	r3
            break;
    b93e:	e7a8      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rNO_ACK \n\r");
    b940:	4833      	ldr	r0, [pc, #204]	; (ba10 <demo_appdata_callback+0x328>)
    b942:	4b1a      	ldr	r3, [pc, #104]	; (b9ac <demo_appdata_callback+0x2c4>)
    b944:	4798      	blx	r3
            break;
    b946:	e7a4      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    b948:	4832      	ldr	r0, [pc, #200]	; (ba14 <demo_appdata_callback+0x32c>)
    b94a:	4b18      	ldr	r3, [pc, #96]	; (b9ac <demo_appdata_callback+0x2c4>)
    b94c:	4798      	blx	r3
            break;
    b94e:	e7a0      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    b950:	4831      	ldr	r0, [pc, #196]	; (ba18 <demo_appdata_callback+0x330>)
    b952:	4b16      	ldr	r3, [pc, #88]	; (b9ac <demo_appdata_callback+0x2c4>)
    b954:	4798      	blx	r3
            break;
    b956:	e79c      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rINVALID_REQUEST \n\r");
    b958:	4830      	ldr	r0, [pc, #192]	; (ba1c <demo_appdata_callback+0x334>)
    b95a:	4b14      	ldr	r3, [pc, #80]	; (b9ac <demo_appdata_callback+0x2c4>)
    b95c:	4798      	blx	r3
            break;
    b95e:	e798      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rFCNTR_ERROR \n\r");
    b960:	482f      	ldr	r0, [pc, #188]	; (ba20 <demo_appdata_callback+0x338>)
    b962:	4b12      	ldr	r3, [pc, #72]	; (b9ac <demo_appdata_callback+0x2c4>)
    b964:	4798      	blx	r3
            break;
    b966:	e794      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rMIC_ERROR \n\r");
    b968:	482e      	ldr	r0, [pc, #184]	; (ba24 <demo_appdata_callback+0x33c>)
    b96a:	4b10      	ldr	r3, [pc, #64]	; (b9ac <demo_appdata_callback+0x2c4>)
    b96c:	4798      	blx	r3
            break;
    b96e:	e790      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rINVALID_MTYPE \n\r");
    b970:	482d      	ldr	r0, [pc, #180]	; (ba28 <demo_appdata_callback+0x340>)
    b972:	4b0e      	ldr	r3, [pc, #56]	; (b9ac <demo_appdata_callback+0x2c4>)
    b974:	4798      	blx	r3
            break;
    b976:	e78c      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    b978:	482c      	ldr	r0, [pc, #176]	; (ba2c <demo_appdata_callback+0x344>)
    b97a:	4b0c      	ldr	r3, [pc, #48]	; (b9ac <demo_appdata_callback+0x2c4>)
    b97c:	4798      	blx	r3
            break;
    b97e:	e788      	b.n	b892 <demo_appdata_callback+0x1aa>
                printf("\n\rUNKNOWN ERROR\n\r");
    b980:	4832      	ldr	r0, [pc, #200]	; (ba4c <demo_appdata_callback+0x364>)
    b982:	4b0a      	ldr	r3, [pc, #40]	; (b9ac <demo_appdata_callback+0x2c4>)
    b984:	4798      	blx	r3
            break;
    b986:	e784      	b.n	b892 <demo_appdata_callback+0x1aa>
    b988:	200000d0 	.word	0x200000d0
    b98c:	0000a1f1 	.word	0x0000a1f1
    b990:	20001058 	.word	0x20001058
    b994:	0000982d 	.word	0x0000982d
    b998:	200000cc 	.word	0x200000cc
    b99c:	20001039 	.word	0x20001039
    b9a0:	0000b1c1 	.word	0x0000b1c1
    b9a4:	0001cfa8 	.word	0x0001cfa8
    b9a8:	0001cc68 	.word	0x0001cc68
    b9ac:	000159e1 	.word	0x000159e1
    b9b0:	0001cc84 	.word	0x0001cc84
    b9b4:	0001cca4 	.word	0x0001cca4
    b9b8:	0001ccbc 	.word	0x0001ccbc
    b9bc:	0001ccd0 	.word	0x0001ccd0
    b9c0:	0001ccdc 	.word	0x0001ccdc
    b9c4:	0001cce0 	.word	0x0001cce0
    b9c8:	00015aa5 	.word	0x00015aa5
    b9cc:	0001cd00 	.word	0x0001cd00
    b9d0:	0001d108 	.word	0x0001d108
    b9d4:	0001d11c 	.word	0x0001d11c
    b9d8:	0001d134 	.word	0x0001d134
    b9dc:	0001d14c 	.word	0x0001d14c
    b9e0:	0001d15c 	.word	0x0001d15c
    b9e4:	0001d174 	.word	0x0001d174
    b9e8:	0001d190 	.word	0x0001d190
    b9ec:	0001d1a8 	.word	0x0001d1a8
    b9f0:	0001d1bc 	.word	0x0001d1bc
    b9f4:	0001d1d4 	.word	0x0001d1d4
    b9f8:	0001d1f0 	.word	0x0001d1f0
    b9fc:	0001d210 	.word	0x0001d210
    ba00:	0001d230 	.word	0x0001d230
    ba04:	0001d24c 	.word	0x0001d24c
    ba08:	0001d260 	.word	0x0001d260
    ba0c:	0001d278 	.word	0x0001d278
    ba10:	0001d284 	.word	0x0001d284
    ba14:	0001d290 	.word	0x0001d290
    ba18:	0001d2b4 	.word	0x0001d2b4
    ba1c:	0001d2d0 	.word	0x0001d2d0
    ba20:	0001d2e8 	.word	0x0001d2e8
    ba24:	0001d2fc 	.word	0x0001d2fc
    ba28:	0001d30c 	.word	0x0001d30c
    ba2c:	0001d320 	.word	0x0001d320
    ba30:	0001d338 	.word	0x0001d338
    ba34:	0000b6a9 	.word	0x0000b6a9
    ba38:	0001d34c 	.word	0x0001d34c
    ba3c:	0001d014 	.word	0x0001d014
    ba40:	0001cd34 	.word	0x0001cd34
    ba44:	0001cd4c 	.word	0x0001cd4c
    ba48:	0001d35c 	.word	0x0001d35c
    ba4c:	0001d36c 	.word	0x0001d36c

0000ba50 <set_join_parameters>:
{
    ba50:	b510      	push	{r4, lr}
    ba52:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    ba54:	482a      	ldr	r0, [pc, #168]	; (bb00 <set_join_parameters+0xb0>)
    ba56:	4b2b      	ldr	r3, [pc, #172]	; (bb04 <set_join_parameters+0xb4>)
    ba58:	4798      	blx	r3
    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
    ba5a:	2c01      	cmp	r4, #1
    ba5c:	d008      	beq.n	ba70 <set_join_parameters+0x20>
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
    ba5e:	492a      	ldr	r1, [pc, #168]	; (bb08 <set_join_parameters+0xb8>)
    ba60:	2000      	movs	r0, #0
    ba62:	4b2a      	ldr	r3, [pc, #168]	; (bb0c <set_join_parameters+0xbc>)
    ba64:	4798      	blx	r3
    ba66:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    ba68:	2808      	cmp	r0, #8
    ba6a:	d025      	beq.n	bab8 <set_join_parameters+0x68>
}
    ba6c:	0020      	movs	r0, r4
    ba6e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
    ba70:	4927      	ldr	r1, [pc, #156]	; (bb10 <set_join_parameters+0xc0>)
    ba72:	2002      	movs	r0, #2
    ba74:	4b25      	ldr	r3, [pc, #148]	; (bb0c <set_join_parameters+0xbc>)
    ba76:	4798      	blx	r3
    ba78:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    ba7a:	2808      	cmp	r0, #8
    ba7c:	d1f6      	bne.n	ba6c <set_join_parameters+0x1c>
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
    ba7e:	4925      	ldr	r1, [pc, #148]	; (bb14 <set_join_parameters+0xc4>)
    ba80:	2005      	movs	r0, #5
    ba82:	4b22      	ldr	r3, [pc, #136]	; (bb0c <set_join_parameters+0xbc>)
    ba84:	4798      	blx	r3
    ba86:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    ba88:	2808      	cmp	r0, #8
    ba8a:	d1ef      	bne.n	ba6c <set_join_parameters+0x1c>
            printf("\nAppSessionKey : ");
    ba8c:	4822      	ldr	r0, [pc, #136]	; (bb18 <set_join_parameters+0xc8>)
    ba8e:	4b1d      	ldr	r3, [pc, #116]	; (bb04 <set_join_parameters+0xb4>)
    ba90:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
    ba92:	2110      	movs	r1, #16
    ba94:	481f      	ldr	r0, [pc, #124]	; (bb14 <set_join_parameters+0xc4>)
    ba96:	4b21      	ldr	r3, [pc, #132]	; (bb1c <set_join_parameters+0xcc>)
    ba98:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
    ba9a:	4921      	ldr	r1, [pc, #132]	; (bb20 <set_join_parameters+0xd0>)
    ba9c:	2004      	movs	r0, #4
    ba9e:	4b1b      	ldr	r3, [pc, #108]	; (bb0c <set_join_parameters+0xbc>)
    baa0:	4798      	blx	r3
    baa2:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    baa4:	2808      	cmp	r0, #8
    baa6:	d1e1      	bne.n	ba6c <set_join_parameters+0x1c>
            printf("\nNwkSessionKey : ");
    baa8:	481e      	ldr	r0, [pc, #120]	; (bb24 <set_join_parameters+0xd4>)
    baaa:	4b16      	ldr	r3, [pc, #88]	; (bb04 <set_join_parameters+0xb4>)
    baac:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
    baae:	2110      	movs	r1, #16
    bab0:	481b      	ldr	r0, [pc, #108]	; (bb20 <set_join_parameters+0xd0>)
    bab2:	4b1a      	ldr	r3, [pc, #104]	; (bb1c <set_join_parameters+0xcc>)
    bab4:	4798      	blx	r3
    bab6:	e7d9      	b.n	ba6c <set_join_parameters+0x1c>
            printf("\nDevEUI : ");
    bab8:	481b      	ldr	r0, [pc, #108]	; (bb28 <set_join_parameters+0xd8>)
    baba:	4b12      	ldr	r3, [pc, #72]	; (bb04 <set_join_parameters+0xb4>)
    babc:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
    babe:	2108      	movs	r1, #8
    bac0:	4811      	ldr	r0, [pc, #68]	; (bb08 <set_join_parameters+0xb8>)
    bac2:	4b16      	ldr	r3, [pc, #88]	; (bb1c <set_join_parameters+0xcc>)
    bac4:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, demoAppEui);
    bac6:	4919      	ldr	r1, [pc, #100]	; (bb2c <set_join_parameters+0xdc>)
    bac8:	2001      	movs	r0, #1
    baca:	4b10      	ldr	r3, [pc, #64]	; (bb0c <set_join_parameters+0xbc>)
    bacc:	4798      	blx	r3
    bace:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    bad0:	2808      	cmp	r0, #8
    bad2:	d1cb      	bne.n	ba6c <set_join_parameters+0x1c>
            printf("\nAppEUI : ");
    bad4:	4816      	ldr	r0, [pc, #88]	; (bb30 <set_join_parameters+0xe0>)
    bad6:	4b0b      	ldr	r3, [pc, #44]	; (bb04 <set_join_parameters+0xb4>)
    bad8:	4798      	blx	r3
            print_array((uint8_t *)&demoAppEui, sizeof(demoAppEui));
    bada:	2108      	movs	r1, #8
    badc:	4813      	ldr	r0, [pc, #76]	; (bb2c <set_join_parameters+0xdc>)
    bade:	4b0f      	ldr	r3, [pc, #60]	; (bb1c <set_join_parameters+0xcc>)
    bae0:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, demoAppKey);
    bae2:	4914      	ldr	r1, [pc, #80]	; (bb34 <set_join_parameters+0xe4>)
    bae4:	2003      	movs	r0, #3
    bae6:	4b09      	ldr	r3, [pc, #36]	; (bb0c <set_join_parameters+0xbc>)
    bae8:	4798      	blx	r3
    baea:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    baec:	2808      	cmp	r0, #8
    baee:	d1bd      	bne.n	ba6c <set_join_parameters+0x1c>
            printf("\nAppKey : ");
    baf0:	4811      	ldr	r0, [pc, #68]	; (bb38 <set_join_parameters+0xe8>)
    baf2:	4b04      	ldr	r3, [pc, #16]	; (bb04 <set_join_parameters+0xb4>)
    baf4:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
    baf6:	2110      	movs	r1, #16
    baf8:	480e      	ldr	r0, [pc, #56]	; (bb34 <set_join_parameters+0xe4>)
    bafa:	4b08      	ldr	r3, [pc, #32]	; (bb1c <set_join_parameters+0xcc>)
    bafc:	4798      	blx	r3
    bafe:	e7b5      	b.n	ba6c <set_join_parameters+0x1c>
    bb00:	0001cb24 	.word	0x0001cb24
    bb04:	000159e1 	.word	0x000159e1
    bb08:	2000008c 	.word	0x2000008c
    bb0c:	0000fd21 	.word	0x0000fd21
    bb10:	20000088 	.word	0x20000088
    bb14:	20000078 	.word	0x20000078
    bb18:	0001da6c 	.word	0x0001da6c
    bb1c:	0000b6a9 	.word	0x0000b6a9
    bb20:	200000bc 	.word	0x200000bc
    bb24:	0001da80 	.word	0x0001da80
    bb28:	0001da94 	.word	0x0001da94
    bb2c:	20000060 	.word	0x20000060
    bb30:	0001daa0 	.word	0x0001daa0
    bb34:	20000068 	.word	0x20000068
    bb38:	0001daac 	.word	0x0001daac

0000bb3c <set_multicast_params>:
{
    bb3c:	b510      	push	{r4, lr}
    printf("\n***************Multicast Parameters********************\n\r");
    bb3e:	481c      	ldr	r0, [pc, #112]	; (bbb0 <set_multicast_params+0x74>)
    bb40:	4b1c      	ldr	r3, [pc, #112]	; (bbb4 <set_multicast_params+0x78>)
    bb42:	4798      	blx	r3
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &demoMcastAppsKey);
    bb44:	491c      	ldr	r1, [pc, #112]	; (bbb8 <set_multicast_params+0x7c>)
    bb46:	202b      	movs	r0, #43	; 0x2b
    bb48:	4b1c      	ldr	r3, [pc, #112]	; (bbbc <set_multicast_params+0x80>)
    bb4a:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    bb4c:	2808      	cmp	r0, #8
    bb4e:	d006      	beq.n	bb5e <set_multicast_params+0x22>
        printf("\nMcastGroupAddrStatus : Failed\n\r");
    bb50:	481b      	ldr	r0, [pc, #108]	; (bbc0 <set_multicast_params+0x84>)
    bb52:	4b18      	ldr	r3, [pc, #96]	; (bbb4 <set_multicast_params+0x78>)
    bb54:	4798      	blx	r3
        printf("\nMulticastStatus : Failed\n\r");
    bb56:	481b      	ldr	r0, [pc, #108]	; (bbc4 <set_multicast_params+0x88>)
    bb58:	4b16      	ldr	r3, [pc, #88]	; (bbb4 <set_multicast_params+0x78>)
    bb5a:	4798      	blx	r3
}
    bb5c:	bd10      	pop	{r4, pc}
        printf("\nMcastAppSessionKey : ");
    bb5e:	481a      	ldr	r0, [pc, #104]	; (bbc8 <set_multicast_params+0x8c>)
    bb60:	4b14      	ldr	r3, [pc, #80]	; (bbb4 <set_multicast_params+0x78>)
    bb62:	4798      	blx	r3
        print_array((uint8_t *)&demoMcastAppsKey, sizeof(demoMcastAppsKey));
    bb64:	2110      	movs	r1, #16
    bb66:	4814      	ldr	r0, [pc, #80]	; (bbb8 <set_multicast_params+0x7c>)
    bb68:	4b18      	ldr	r3, [pc, #96]	; (bbcc <set_multicast_params+0x90>)
    bb6a:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &demoMcastNwksKey);
    bb6c:	4918      	ldr	r1, [pc, #96]	; (bbd0 <set_multicast_params+0x94>)
    bb6e:	202a      	movs	r0, #42	; 0x2a
    bb70:	4b12      	ldr	r3, [pc, #72]	; (bbbc <set_multicast_params+0x80>)
    bb72:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    bb74:	2808      	cmp	r0, #8
    bb76:	d1eb      	bne.n	bb50 <set_multicast_params+0x14>
        printf("\nMcastNwkSessionKey : ");
    bb78:	4816      	ldr	r0, [pc, #88]	; (bbd4 <set_multicast_params+0x98>)
    bb7a:	4b0e      	ldr	r3, [pc, #56]	; (bbb4 <set_multicast_params+0x78>)
    bb7c:	4798      	blx	r3
        print_array((uint8_t *)&demoMcastNwksKey, sizeof(demoMcastNwksKey));
    bb7e:	2110      	movs	r1, #16
    bb80:	4813      	ldr	r0, [pc, #76]	; (bbd0 <set_multicast_params+0x94>)
    bb82:	4b12      	ldr	r3, [pc, #72]	; (bbcc <set_multicast_params+0x90>)
    bb84:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &demoMcastDevAddr);
    bb86:	4914      	ldr	r1, [pc, #80]	; (bbd8 <set_multicast_params+0x9c>)
    bb88:	2029      	movs	r0, #41	; 0x29
    bb8a:	4b0c      	ldr	r3, [pc, #48]	; (bbbc <set_multicast_params+0x80>)
    bb8c:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    bb8e:	2808      	cmp	r0, #8
    bb90:	d1de      	bne.n	bb50 <set_multicast_params+0x14>
        printf("\nMcastGroupAddr : 0x%lx\n\r", demoMcastDevAddr);
    bb92:	4b11      	ldr	r3, [pc, #68]	; (bbd8 <set_multicast_params+0x9c>)
    bb94:	6819      	ldr	r1, [r3, #0]
    bb96:	4811      	ldr	r0, [pc, #68]	; (bbdc <set_multicast_params+0xa0>)
    bb98:	4b06      	ldr	r3, [pc, #24]	; (bbb4 <set_multicast_params+0x78>)
    bb9a:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_ENABLE, &demoMcastEnable);
    bb9c:	4910      	ldr	r1, [pc, #64]	; (bbe0 <set_multicast_params+0xa4>)
    bb9e:	2028      	movs	r0, #40	; 0x28
    bba0:	4b06      	ldr	r3, [pc, #24]	; (bbbc <set_multicast_params+0x80>)
    bba2:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    bba4:	2808      	cmp	r0, #8
    bba6:	d1d6      	bne.n	bb56 <set_multicast_params+0x1a>
        printf("\nMulticastStatus : Enabled\n\r");
    bba8:	480e      	ldr	r0, [pc, #56]	; (bbe4 <set_multicast_params+0xa8>)
    bbaa:	4b02      	ldr	r3, [pc, #8]	; (bbb4 <set_multicast_params+0x78>)
    bbac:	4798      	blx	r3
    bbae:	e7d5      	b.n	bb5c <set_multicast_params+0x20>
    bbb0:	0001dab8 	.word	0x0001dab8
    bbb4:	000159e1 	.word	0x000159e1
    bbb8:	20000094 	.word	0x20000094
    bbbc:	0000fd21 	.word	0x0000fd21
    bbc0:	0001db40 	.word	0x0001db40
    bbc4:	0001db84 	.word	0x0001db84
    bbc8:	0001daf4 	.word	0x0001daf4
    bbcc:	0000b6a9 	.word	0x0000b6a9
    bbd0:	200000ac 	.word	0x200000ac
    bbd4:	0001db0c 	.word	0x0001db0c
    bbd8:	200000a4 	.word	0x200000a4
    bbdc:	0001db24 	.word	0x0001db24
    bbe0:	200000a8 	.word	0x200000a8
    bbe4:	0001db64 	.word	0x0001db64

0000bbe8 <set_device_type>:
{
    bbe8:	b510      	push	{r4, lr}
    bbea:	b082      	sub	sp, #8
    bbec:	466b      	mov	r3, sp
    bbee:	1dd9      	adds	r1, r3, #7
    bbf0:	7008      	strb	r0, [r1, #0]
    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
    bbf2:	2019      	movs	r0, #25
    bbf4:	4b08      	ldr	r3, [pc, #32]	; (bc18 <set_device_type+0x30>)
    bbf6:	4798      	blx	r3
    bbf8:	0004      	movs	r4, r0
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    bbfa:	2808      	cmp	r0, #8
    bbfc:	d002      	beq.n	bc04 <set_device_type+0x1c>
}
    bbfe:	0020      	movs	r0, r4
    bc00:	b002      	add	sp, #8
    bc02:	bd10      	pop	{r4, pc}
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    bc04:	466b      	mov	r3, sp
    bc06:	3307      	adds	r3, #7
    bc08:	781b      	ldrb	r3, [r3, #0]
    bc0a:	2206      	movs	r2, #6
    bc0c:	421a      	tst	r2, r3
    bc0e:	d0f6      	beq.n	bbfe <set_device_type+0x16>
        set_multicast_params();
    bc10:	4b02      	ldr	r3, [pc, #8]	; (bc1c <set_device_type+0x34>)
    bc12:	4798      	blx	r3
    bc14:	e7f3      	b.n	bbfe <set_device_type+0x16>
    bc16:	46c0      	nop			; (mov r8, r8)
    bc18:	0000fd21 	.word	0x0000fd21
    bc1c:	0000bb3d 	.word	0x0000bb3d

0000bc20 <print_application_config>:
{
    bc20:	b530      	push	{r4, r5, lr}
    bc22:	b083      	sub	sp, #12
    printf("\n***************Application Configuration***************\n\r");
    bc24:	4814      	ldr	r0, [pc, #80]	; (bc78 <print_application_config+0x58>)
    bc26:	4d15      	ldr	r5, [pc, #84]	; (bc7c <print_application_config+0x5c>)
    bc28:	47a8      	blx	r5
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    bc2a:	466b      	mov	r3, sp
    bc2c:	1ddc      	adds	r4, r3, #7
    bc2e:	0022      	movs	r2, r4
    bc30:	2100      	movs	r1, #0
    bc32:	2019      	movs	r0, #25
    bc34:	4b12      	ldr	r3, [pc, #72]	; (bc80 <print_application_config+0x60>)
    bc36:	4798      	blx	r3
    printf("\nDevType : ");
    bc38:	4812      	ldr	r0, [pc, #72]	; (bc84 <print_application_config+0x64>)
    bc3a:	47a8      	blx	r5
    if(edClass == CLASS_A)
    bc3c:	7823      	ldrb	r3, [r4, #0]
    bc3e:	2b01      	cmp	r3, #1
    bc40:	d011      	beq.n	bc66 <print_application_config+0x46>
    else if(edClass == CLASS_C)
    bc42:	2b04      	cmp	r3, #4
    bc44:	d013      	beq.n	bc6e <print_application_config+0x4e>
    printf("\nActivationType : ");
    bc46:	4810      	ldr	r0, [pc, #64]	; (bc88 <print_application_config+0x68>)
    bc48:	4c0c      	ldr	r4, [pc, #48]	; (bc7c <print_application_config+0x5c>)
    bc4a:	47a0      	blx	r4
        printf("OTAA\n\r");
    bc4c:	480f      	ldr	r0, [pc, #60]	; (bc8c <print_application_config+0x6c>)
    bc4e:	47a0      	blx	r4
    printf("\nTransmission Type - ");
    bc50:	480f      	ldr	r0, [pc, #60]	; (bc90 <print_application_config+0x70>)
    bc52:	47a0      	blx	r4
        printf("UNCONFIRMED\n\r");
    bc54:	480f      	ldr	r0, [pc, #60]	; (bc94 <print_application_config+0x74>)
    bc56:	47a0      	blx	r4
    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    bc58:	2101      	movs	r1, #1
    bc5a:	480f      	ldr	r0, [pc, #60]	; (bc98 <print_application_config+0x78>)
    bc5c:	47a0      	blx	r4
    printf("\n*******************************************************\n\r");
    bc5e:	480f      	ldr	r0, [pc, #60]	; (bc9c <print_application_config+0x7c>)
    bc60:	47a0      	blx	r4
}
    bc62:	b003      	add	sp, #12
    bc64:	bd30      	pop	{r4, r5, pc}
        printf("CLASS A\n\r");
    bc66:	480e      	ldr	r0, [pc, #56]	; (bca0 <print_application_config+0x80>)
    bc68:	4b04      	ldr	r3, [pc, #16]	; (bc7c <print_application_config+0x5c>)
    bc6a:	4798      	blx	r3
    bc6c:	e7eb      	b.n	bc46 <print_application_config+0x26>
        printf("CLASS C\n\r");
    bc6e:	480d      	ldr	r0, [pc, #52]	; (bca4 <print_application_config+0x84>)
    bc70:	4b02      	ldr	r3, [pc, #8]	; (bc7c <print_application_config+0x5c>)
    bc72:	4798      	blx	r3
    bc74:	e7e7      	b.n	bc46 <print_application_config+0x26>
    bc76:	46c0      	nop			; (mov r8, r8)
    bc78:	0001d5fc 	.word	0x0001d5fc
    bc7c:	000159e1 	.word	0x000159e1
    bc80:	0000e37d 	.word	0x0000e37d
    bc84:	0001d638 	.word	0x0001d638
    bc88:	0001d65c 	.word	0x0001d65c
    bc8c:	0001d670 	.word	0x0001d670
    bc90:	0001d678 	.word	0x0001d678
    bc94:	0001d690 	.word	0x0001d690
    bc98:	0001d6a0 	.word	0x0001d6a0
    bc9c:	0001d6b0 	.word	0x0001d6b0
    bca0:	0001d644 	.word	0x0001d644
    bca4:	0001d650 	.word	0x0001d650

0000bca8 <demo_joindata_callback>:
{
    bca8:	b510      	push	{r4, lr}
    bcaa:	b082      	sub	sp, #8
    bcac:	0004      	movs	r4, r0
    set_LED_data(LED_GREEN,&off);
    bcae:	4922      	ldr	r1, [pc, #136]	; (bd38 <demo_joindata_callback+0x90>)
    bcb0:	2003      	movs	r0, #3
    bcb2:	4b22      	ldr	r3, [pc, #136]	; (bd3c <demo_joindata_callback+0x94>)
    bcb4:	4798      	blx	r3
    if(true == status)
    bcb6:	2c00      	cmp	r4, #0
    bcb8:	d032      	beq.n	bd20 <demo_joindata_callback+0x78>
        joined = true;
    bcba:	2201      	movs	r2, #1
    bcbc:	4b20      	ldr	r3, [pc, #128]	; (bd40 <demo_joindata_callback+0x98>)
    bcbe:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    bcc0:	4820      	ldr	r0, [pc, #128]	; (bd44 <demo_joindata_callback+0x9c>)
    bcc2:	4b21      	ldr	r3, [pc, #132]	; (bd48 <demo_joindata_callback+0xa0>)
    bcc4:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    bcc6:	aa01      	add	r2, sp, #4
    bcc8:	2100      	movs	r1, #0
    bcca:	2002      	movs	r0, #2
    bccc:	4c1f      	ldr	r4, [pc, #124]	; (bd4c <demo_joindata_callback+0xa4>)
    bcce:	47a0      	blx	r4
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    bcd0:	466b      	mov	r3, sp
    bcd2:	1cda      	adds	r2, r3, #3
    bcd4:	2100      	movs	r1, #0
    bcd6:	2028      	movs	r0, #40	; 0x28
    bcd8:	47a0      	blx	r4
        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    bcda:	9901      	ldr	r1, [sp, #4]
    bcdc:	4b1c      	ldr	r3, [pc, #112]	; (bd50 <demo_joindata_callback+0xa8>)
    bcde:	4299      	cmp	r1, r3
    bce0:	d015      	beq.n	bd0e <demo_joindata_callback+0x66>
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    bce2:	481c      	ldr	r0, [pc, #112]	; (bd54 <demo_joindata_callback+0xac>)
    bce4:	4b18      	ldr	r3, [pc, #96]	; (bd48 <demo_joindata_callback+0xa0>)
    bce6:	4798      	blx	r3
        print_application_config();
    bce8:	4b1b      	ldr	r3, [pc, #108]	; (bd58 <demo_joindata_callback+0xb0>)
    bcea:	4798      	blx	r3
        set_LED_data(LED_GREEN,&on);
    bcec:	491b      	ldr	r1, [pc, #108]	; (bd5c <demo_joindata_callback+0xb4>)
    bcee:	2003      	movs	r0, #3
    bcf0:	4b12      	ldr	r3, [pc, #72]	; (bd3c <demo_joindata_callback+0x94>)
    bcf2:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    bcf4:	481a      	ldr	r0, [pc, #104]	; (bd60 <demo_joindata_callback+0xb8>)
    bcf6:	4b14      	ldr	r3, [pc, #80]	; (bd48 <demo_joindata_callback+0xa0>)
    bcf8:	4798      	blx	r3
    PDS_StoreAll();
    bcfa:	4b1a      	ldr	r3, [pc, #104]	; (bd64 <demo_joindata_callback+0xbc>)
    bcfc:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    bcfe:	2203      	movs	r2, #3
    bd00:	4b19      	ldr	r3, [pc, #100]	; (bd68 <demo_joindata_callback+0xc0>)
    bd02:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    bd04:	2000      	movs	r0, #0
    bd06:	4b19      	ldr	r3, [pc, #100]	; (bd6c <demo_joindata_callback+0xc4>)
    bd08:	4798      	blx	r3
}
    bd0a:	b002      	add	sp, #8
    bd0c:	bd10      	pop	{r4, pc}
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    bd0e:	466b      	mov	r3, sp
    bd10:	3303      	adds	r3, #3
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d0e7      	beq.n	bce8 <demo_joindata_callback+0x40>
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    bd18:	4815      	ldr	r0, [pc, #84]	; (bd70 <demo_joindata_callback+0xc8>)
    bd1a:	4b0b      	ldr	r3, [pc, #44]	; (bd48 <demo_joindata_callback+0xa0>)
    bd1c:	4798      	blx	r3
    bd1e:	e7e3      	b.n	bce8 <demo_joindata_callback+0x40>
        joined = false;
    bd20:	2200      	movs	r2, #0
    bd22:	4b07      	ldr	r3, [pc, #28]	; (bd40 <demo_joindata_callback+0x98>)
    bd24:	701a      	strb	r2, [r3, #0]
        set_LED_data(LED_AMBER,&on);
    bd26:	490d      	ldr	r1, [pc, #52]	; (bd5c <demo_joindata_callback+0xb4>)
    bd28:	2002      	movs	r0, #2
    bd2a:	4b04      	ldr	r3, [pc, #16]	; (bd3c <demo_joindata_callback+0x94>)
    bd2c:	4798      	blx	r3
        printf("\nJoining Denied\n\r");
    bd2e:	4811      	ldr	r0, [pc, #68]	; (bd74 <demo_joindata_callback+0xcc>)
    bd30:	4b05      	ldr	r3, [pc, #20]	; (bd48 <demo_joindata_callback+0xa0>)
    bd32:	4798      	blx	r3
    bd34:	e7de      	b.n	bcf4 <demo_joindata_callback+0x4c>
    bd36:	46c0      	nop			; (mov r8, r8)
    bd38:	20001058 	.word	0x20001058
    bd3c:	0000982d 	.word	0x0000982d
    bd40:	20001048 	.word	0x20001048
    bd44:	0001cd9c 	.word	0x0001cd9c
    bd48:	000159e1 	.word	0x000159e1
    bd4c:	0000e37d 	.word	0x0000e37d
    bd50:	0037cc56 	.word	0x0037cc56
    bd54:	0001d380 	.word	0x0001d380
    bd58:	0000bc21 	.word	0x0000bc21
    bd5c:	200000cc 	.word	0x200000cc
    bd60:	0001ce00 	.word	0x0001ce00
    bd64:	00009079 	.word	0x00009079
    bd68:	20001039 	.word	0x20001039
    bd6c:	0000b1c1 	.word	0x0000b1c1
    bd70:	0001d394 	.word	0x0001d394
    bd74:	0001d3dc 	.word	0x0001d3dc

0000bd78 <print_stack_status>:
{
    bd78:	b510      	push	{r4, lr}
    switch(status)
    bd7a:	0003      	movs	r3, r0
    bd7c:	3b08      	subs	r3, #8
    bd7e:	b2da      	uxtb	r2, r3
    bd80:	2a0d      	cmp	r2, #13
    bd82:	d833      	bhi.n	bdec <print_stack_status+0x74>
    bd84:	0093      	lsls	r3, r2, #2
    bd86:	4a1c      	ldr	r2, [pc, #112]	; (bdf8 <print_stack_status+0x80>)
    bd88:	58d3      	ldr	r3, [r2, r3]
    bd8a:	469f      	mov	pc, r3
             printf("\nlorawan_success\n\r");
    bd8c:	481b      	ldr	r0, [pc, #108]	; (bdfc <print_stack_status+0x84>)
    bd8e:	4b1c      	ldr	r3, [pc, #112]	; (be00 <print_stack_status+0x88>)
    bd90:	4798      	blx	r3
}
    bd92:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    bd94:	481b      	ldr	r0, [pc, #108]	; (be04 <print_stack_status+0x8c>)
    bd96:	4b1a      	ldr	r3, [pc, #104]	; (be00 <print_stack_status+0x88>)
    bd98:	4798      	blx	r3
        break;
    bd9a:	e7fa      	b.n	bd92 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    bd9c:	481a      	ldr	r0, [pc, #104]	; (be08 <print_stack_status+0x90>)
    bd9e:	4b18      	ldr	r3, [pc, #96]	; (be00 <print_stack_status+0x88>)
    bda0:	4798      	blx	r3
        break;
    bda2:	e7f6      	b.n	bd92 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    bda4:	4819      	ldr	r0, [pc, #100]	; (be0c <print_stack_status+0x94>)
    bda6:	4b16      	ldr	r3, [pc, #88]	; (be00 <print_stack_status+0x88>)
    bda8:	4798      	blx	r3
        break;
    bdaa:	e7f2      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    bdac:	4818      	ldr	r0, [pc, #96]	; (be10 <print_stack_status+0x98>)
    bdae:	4b14      	ldr	r3, [pc, #80]	; (be00 <print_stack_status+0x88>)
    bdb0:	4798      	blx	r3
        break;
    bdb2:	e7ee      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    bdb4:	4817      	ldr	r0, [pc, #92]	; (be14 <print_stack_status+0x9c>)
    bdb6:	4b12      	ldr	r3, [pc, #72]	; (be00 <print_stack_status+0x88>)
    bdb8:	4798      	blx	r3
        break;
    bdba:	e7ea      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    bdbc:	4816      	ldr	r0, [pc, #88]	; (be18 <print_stack_status+0xa0>)
    bdbe:	4b10      	ldr	r3, [pc, #64]	; (be00 <print_stack_status+0x88>)
    bdc0:	4798      	blx	r3
        break;
    bdc2:	e7e6      	b.n	bd92 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    bdc4:	4815      	ldr	r0, [pc, #84]	; (be1c <print_stack_status+0xa4>)
    bdc6:	4b0e      	ldr	r3, [pc, #56]	; (be00 <print_stack_status+0x88>)
    bdc8:	4798      	blx	r3
        break;
    bdca:	e7e2      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    bdcc:	4814      	ldr	r0, [pc, #80]	; (be20 <print_stack_status+0xa8>)
    bdce:	4b0c      	ldr	r3, [pc, #48]	; (be00 <print_stack_status+0x88>)
    bdd0:	4798      	blx	r3
        break;
    bdd2:	e7de      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    bdd4:	4813      	ldr	r0, [pc, #76]	; (be24 <print_stack_status+0xac>)
    bdd6:	4b0a      	ldr	r3, [pc, #40]	; (be00 <print_stack_status+0x88>)
    bdd8:	4798      	blx	r3
        break;
    bdda:	e7da      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    bddc:	4812      	ldr	r0, [pc, #72]	; (be28 <print_stack_status+0xb0>)
    bdde:	4b08      	ldr	r3, [pc, #32]	; (be00 <print_stack_status+0x88>)
    bde0:	4798      	blx	r3
        break;
    bde2:	e7d6      	b.n	bd92 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    bde4:	4811      	ldr	r0, [pc, #68]	; (be2c <print_stack_status+0xb4>)
    bde6:	4b06      	ldr	r3, [pc, #24]	; (be00 <print_stack_status+0x88>)
    bde8:	4798      	blx	r3
        break;
    bdea:	e7d2      	b.n	bd92 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    bdec:	0001      	movs	r1, r0
    bdee:	4810      	ldr	r0, [pc, #64]	; (be30 <print_stack_status+0xb8>)
    bdf0:	4b03      	ldr	r3, [pc, #12]	; (be00 <print_stack_status+0x88>)
    bdf2:	4798      	blx	r3
}
    bdf4:	e7cd      	b.n	bd92 <print_stack_status+0x1a>
    bdf6:	46c0      	nop			; (mov r8, r8)
    bdf8:	0001d084 	.word	0x0001d084
    bdfc:	0001ce48 	.word	0x0001ce48
    be00:	000159e1 	.word	0x000159e1
    be04:	0001ce5c 	.word	0x0001ce5c
    be08:	0001ce7c 	.word	0x0001ce7c
    be0c:	0001ce9c 	.word	0x0001ce9c
    be10:	0001ceb4 	.word	0x0001ceb4
    be14:	0001cecc 	.word	0x0001cecc
    be18:	0001ceec 	.word	0x0001ceec
    be1c:	0001cf10 	.word	0x0001cf10
    be20:	0001cf2c 	.word	0x0001cf2c
    be24:	0001cf3c 	.word	0x0001cf3c
    be28:	0001cf58 	.word	0x0001cf58
    be2c:	0001cf6c 	.word	0x0001cf6c
    be30:	0001cf90 	.word	0x0001cf90

0000be34 <mote_set_parameters>:
{
    be34:	b570      	push	{r4, r5, r6, lr}
    be36:	b082      	sub	sp, #8
    be38:	0005      	movs	r5, r0
    be3a:	000c      	movs	r4, r1
    LORAWAN_Reset(ismBand);
    be3c:	4b28      	ldr	r3, [pc, #160]	; (bee0 <mote_set_parameters+0xac>)
    be3e:	4798      	blx	r3
    if ((ismBand == ISM_NA915) || (ismBand == ISM_AU915))
    be40:	3d02      	subs	r5, #2
    be42:	2d01      	cmp	r5, #1
    be44:	d90b      	bls.n	be5e <mote_set_parameters+0x2a>
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
    be46:	2000      	movs	r0, #0
    be48:	4b26      	ldr	r3, [pc, #152]	; (bee4 <mote_set_parameters+0xb0>)
    be4a:	4798      	blx	r3
    be4c:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS != status)
    be4e:	2808      	cmp	r0, #8
    be50:	d024      	beq.n	be9c <mote_set_parameters+0x68>
        printf("\nJoin parameters initialization failed\n\r");
    be52:	4825      	ldr	r0, [pc, #148]	; (bee8 <mote_set_parameters+0xb4>)
    be54:	4b25      	ldr	r3, [pc, #148]	; (beec <mote_set_parameters+0xb8>)
    be56:	4798      	blx	r3
}
    be58:	0028      	movs	r0, r5
    be5a:	b002      	add	sp, #8
    be5c:	bd70      	pop	{r4, r5, r6, pc}
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    be5e:	2300      	movs	r3, #0
    be60:	466a      	mov	r2, sp
    be62:	7013      	strb	r3, [r2, #0]
                ch_params.channelAttr.status = false;
    be64:	2600      	movs	r6, #0
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    be66:	4d22      	ldr	r5, [pc, #136]	; (bef0 <mote_set_parameters+0xbc>)
    be68:	e00e      	b.n	be88 <mote_set_parameters+0x54>
            else if(ch_params.channelId == allowed_500khz_channel)
    be6a:	2b40      	cmp	r3, #64	; 0x40
    be6c:	d012      	beq.n	be94 <mote_set_parameters+0x60>
                ch_params.channelAttr.status = false;
    be6e:	466b      	mov	r3, sp
    be70:	711e      	strb	r6, [r3, #4]
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    be72:	4669      	mov	r1, sp
    be74:	201c      	movs	r0, #28
    be76:	47a8      	blx	r5
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    be78:	466b      	mov	r3, sp
    be7a:	781b      	ldrb	r3, [r3, #0]
    be7c:	3301      	adds	r3, #1
    be7e:	b2db      	uxtb	r3, r3
    be80:	466a      	mov	r2, sp
    be82:	7013      	strb	r3, [r2, #0]
    be84:	2b47      	cmp	r3, #71	; 0x47
    be86:	d8de      	bhi.n	be46 <mote_set_parameters+0x12>
            if((ch_params.channelId >= allowed_min_125khz_ch) && (ch_params.channelId <= allowed_max_125khz_ch))
    be88:	2b07      	cmp	r3, #7
    be8a:	d8ee      	bhi.n	be6a <mote_set_parameters+0x36>
                ch_params.channelAttr.status = true;
    be8c:	2301      	movs	r3, #1
    be8e:	466a      	mov	r2, sp
    be90:	7113      	strb	r3, [r2, #4]
    be92:	e7ee      	b.n	be72 <mote_set_parameters+0x3e>
                ch_params.channelAttr.status = true;
    be94:	3b3f      	subs	r3, #63	; 0x3f
    be96:	466a      	mov	r2, sp
    be98:	7113      	strb	r3, [r2, #4]
    be9a:	e7ea      	b.n	be72 <mote_set_parameters+0x3e>
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
    be9c:	2001      	movs	r0, #1
    be9e:	4b15      	ldr	r3, [pc, #84]	; (bef4 <mote_set_parameters+0xc0>)
    bea0:	4798      	blx	r3
    bea2:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS != status)
    bea4:	2808      	cmp	r0, #8
    bea6:	d003      	beq.n	beb0 <mote_set_parameters+0x7c>
        printf("\nUnsupported Device Type\n\r");
    bea8:	4813      	ldr	r0, [pc, #76]	; (bef8 <mote_set_parameters+0xc4>)
    beaa:	4b10      	ldr	r3, [pc, #64]	; (beec <mote_set_parameters+0xb8>)
    beac:	4798      	blx	r3
        return status;
    beae:	e7d3      	b.n	be58 <mote_set_parameters+0x24>
    status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    beb0:	2000      	movs	r0, #0
    beb2:	4b12      	ldr	r3, [pc, #72]	; (befc <mote_set_parameters+0xc8>)
    beb4:	4798      	blx	r3
    beb6:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    beb8:	2808      	cmp	r0, #8
    beba:	d008      	beq.n	bece <mote_set_parameters+0x9a>
        print_stack_status(status);
    bebc:	4b10      	ldr	r3, [pc, #64]	; (bf00 <mote_set_parameters+0xcc>)
    bebe:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    bec0:	2203      	movs	r2, #3
    bec2:	4b10      	ldr	r3, [pc, #64]	; (bf04 <mote_set_parameters+0xd0>)
    bec4:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    bec6:	2000      	movs	r0, #0
    bec8:	4b0f      	ldr	r3, [pc, #60]	; (bf08 <mote_set_parameters+0xd4>)
    beca:	4798      	blx	r3
    becc:	e7c4      	b.n	be58 <mote_set_parameters+0x24>
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    bece:	2c09      	cmp	r4, #9
    bed0:	d8f4      	bhi.n	bebc <mote_set_parameters+0x88>
        printf("\nJoin Request Sent for %s\n\r",bandStrings[index]);
    bed2:	00a4      	lsls	r4, r4, #2
    bed4:	4b0d      	ldr	r3, [pc, #52]	; (bf0c <mote_set_parameters+0xd8>)
    bed6:	58e1      	ldr	r1, [r4, r3]
    bed8:	480d      	ldr	r0, [pc, #52]	; (bf10 <mote_set_parameters+0xdc>)
    beda:	4b04      	ldr	r3, [pc, #16]	; (beec <mote_set_parameters+0xb8>)
    bedc:	4798      	blx	r3
    bede:	e7bb      	b.n	be58 <mote_set_parameters+0x24>
    bee0:	000101b5 	.word	0x000101b5
    bee4:	0000ba51 	.word	0x0000ba51
    bee8:	0001cbac 	.word	0x0001cbac
    beec:	000159e1 	.word	0x000159e1
    bef0:	0000fd21 	.word	0x0000fd21
    bef4:	0000bbe9 	.word	0x0000bbe9
    bef8:	0001d5c4 	.word	0x0001d5c4
    befc:	0000dd29 	.word	0x0000dd29
    bf00:	0000bd79 	.word	0x0000bd79
    bf04:	20001039 	.word	0x20001039
    bf08:	0000b1c1 	.word	0x0000b1c1
    bf0c:	0001d0d8 	.word	0x0001d0d8
    bf10:	0001d5e0 	.word	0x0001d5e0

0000bf14 <processTask>:
{
    bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf16:	46d6      	mov	lr, sl
    bf18:	464f      	mov	r7, r9
    bf1a:	4646      	mov	r6, r8
    bf1c:	b5c0      	push	{r6, r7, lr}
    bf1e:	b08e      	sub	sp, #56	; 0x38
	switch(appTaskState)
    bf20:	4bc2      	ldr	r3, [pc, #776]	; (c22c <processTask+0x318>)
    bf22:	781b      	ldrb	r3, [r3, #0]
    bf24:	2b01      	cmp	r3, #1
    bf26:	d100      	bne.n	bf2a <processTask+0x16>
    bf28:	e076      	b.n	c018 <processTask+0x104>
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d00f      	beq.n	bf4e <processTask+0x3a>
    bf2e:	2b02      	cmp	r3, #2
    bf30:	d100      	bne.n	bf34 <processTask+0x20>
    bf32:	e08e      	b.n	c052 <processTask+0x13e>
    bf34:	2b03      	cmp	r3, #3
    bf36:	d100      	bne.n	bf3a <processTask+0x26>
    bf38:	e0bf      	b.n	c0ba <processTask+0x1a6>
			printf("Error STATE Entered\r\n");
    bf3a:	48bd      	ldr	r0, [pc, #756]	; (c230 <processTask+0x31c>)
    bf3c:	4bbd      	ldr	r3, [pc, #756]	; (c234 <processTask+0x320>)
    bf3e:	4798      	blx	r3
}
    bf40:	2000      	movs	r0, #0
    bf42:	b00e      	add	sp, #56	; 0x38
    bf44:	bc1c      	pop	{r2, r3, r4}
    bf46:	4690      	mov	r8, r2
    bf48:	4699      	mov	r9, r3
    bf4a:	46a2      	mov	sl, r4
    bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t prevBand = 0xff;
    bf4e:	ac0a      	add	r4, sp, #40	; 0x28
    bf50:	23ff      	movs	r3, #255	; 0xff
    bf52:	7023      	strb	r3, [r4, #0]
	PDS_RestoreAll();
    bf54:	4bb8      	ldr	r3, [pc, #736]	; (c238 <processTask+0x324>)
    bf56:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    bf58:	0022      	movs	r2, r4
    bf5a:	2100      	movs	r1, #0
    bf5c:	2023      	movs	r0, #35	; 0x23
    bf5e:	4bb7      	ldr	r3, [pc, #732]	; (c23c <processTask+0x328>)
    bf60:	4798      	blx	r3
		if(bandTable[i] == prevBand)
    bf62:	7821      	ldrb	r1, [r4, #0]
    bf64:	4bb6      	ldr	r3, [pc, #728]	; (c240 <processTask+0x32c>)
    bf66:	781b      	ldrb	r3, [r3, #0]
    bf68:	428b      	cmp	r3, r1
    bf6a:	d021      	beq.n	bfb0 <processTask+0x9c>
    bf6c:	2301      	movs	r3, #1
    bf6e:	48b4      	ldr	r0, [pc, #720]	; (c240 <processTask+0x32c>)
    bf70:	5c1a      	ldrb	r2, [r3, r0]
    bf72:	428a      	cmp	r2, r1
    bf74:	d00f      	beq.n	bf96 <processTask+0x82>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
    bf76:	3301      	adds	r3, #1
    bf78:	2b09      	cmp	r3, #9
    bf7a:	d1f9      	bne.n	bf70 <processTask+0x5c>
	uint8_t choice = 0xff;
    bf7c:	24ff      	movs	r4, #255	; 0xff
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    bf7e:	2c08      	cmp	r4, #8
    bf80:	d918      	bls.n	bfb4 <processTask+0xa0>
		printf("Restoration failed\r\n");
    bf82:	48b0      	ldr	r0, [pc, #704]	; (c244 <processTask+0x330>)
    bf84:	4bab      	ldr	r3, [pc, #684]	; (c234 <processTask+0x320>)
    bf86:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    bf88:	2202      	movs	r2, #2
    bf8a:	4ba8      	ldr	r3, [pc, #672]	; (c22c <processTask+0x318>)
    bf8c:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    bf8e:	2000      	movs	r0, #0
    bf90:	4bad      	ldr	r3, [pc, #692]	; (c248 <processTask+0x334>)
    bf92:	4798      	blx	r3
    bf94:	e7d4      	b.n	bf40 <processTask+0x2c>
			choice = i;
    bf96:	b2dc      	uxtb	r4, r3
	if(choice >0 && choice < sizeof(bandTable)-1)
    bf98:	1e62      	subs	r2, r4, #1
    bf9a:	2a07      	cmp	r2, #7
    bf9c:	d8ef      	bhi.n	bf7e <processTask+0x6a>
		status = LORAWAN_Reset(bandTable[choice]);
    bf9e:	22ff      	movs	r2, #255	; 0xff
    bfa0:	4013      	ands	r3, r2
    bfa2:	4aa7      	ldr	r2, [pc, #668]	; (c240 <processTask+0x32c>)
    bfa4:	5cd0      	ldrb	r0, [r2, r3]
    bfa6:	4ba9      	ldr	r3, [pc, #676]	; (c24c <processTask+0x338>)
    bfa8:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    bfaa:	2808      	cmp	r0, #8
    bfac:	d1e9      	bne.n	bf82 <processTask+0x6e>
    bfae:	e7e6      	b.n	bf7e <processTask+0x6a>
			choice = i;
    bfb0:	2400      	movs	r4, #0
    bfb2:	e7e4      	b.n	bf7e <processTask+0x6a>
		uint32_t joinStatus = 0;
    bfb4:	2300      	movs	r3, #0
    bfb6:	930b      	str	r3, [sp, #44]	; 0x2c
		PDS_RestoreAll();
    bfb8:	4b9f      	ldr	r3, [pc, #636]	; (c238 <processTask+0x324>)
    bfba:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
    bfbc:	aa0b      	add	r2, sp, #44	; 0x2c
    bfbe:	2100      	movs	r1, #0
    bfc0:	2020      	movs	r0, #32
    bfc2:	4b9e      	ldr	r3, [pc, #632]	; (c23c <processTask+0x328>)
    bfc4:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
    bfc6:	48a2      	ldr	r0, [pc, #648]	; (c250 <processTask+0x33c>)
    bfc8:	4b9a      	ldr	r3, [pc, #616]	; (c234 <processTask+0x320>)
    bfca:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
    bfcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bfce:	07db      	lsls	r3, r3, #31
    bfd0:	d514      	bpl.n	bffc <processTask+0xe8>
			joined = true;
    bfd2:	2201      	movs	r2, #1
    bfd4:	4b9f      	ldr	r3, [pc, #636]	; (c254 <processTask+0x340>)
    bfd6:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
    bfd8:	489f      	ldr	r0, [pc, #636]	; (c258 <processTask+0x344>)
    bfda:	4b96      	ldr	r3, [pc, #600]	; (c234 <processTask+0x320>)
    bfdc:	4798      	blx	r3
		printf("Band: %s\r\n",bandStrings[choice]);
    bfde:	00a4      	lsls	r4, r4, #2
    bfe0:	4b9e      	ldr	r3, [pc, #632]	; (c25c <processTask+0x348>)
    bfe2:	58e1      	ldr	r1, [r4, r3]
    bfe4:	489e      	ldr	r0, [pc, #632]	; (c260 <processTask+0x34c>)
    bfe6:	4b9f      	ldr	r3, [pc, #636]	; (c264 <processTask+0x350>)
    bfe8:	4798      	blx	r3
		print_application_config();
    bfea:	4b9f      	ldr	r3, [pc, #636]	; (c268 <processTask+0x354>)
    bfec:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    bfee:	2203      	movs	r2, #3
    bff0:	4b8e      	ldr	r3, [pc, #568]	; (c22c <processTask+0x318>)
    bff2:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    bff4:	2000      	movs	r0, #0
    bff6:	4b94      	ldr	r3, [pc, #592]	; (c248 <processTask+0x334>)
    bff8:	4798      	blx	r3
    bffa:	e7a1      	b.n	bf40 <processTask+0x2c>
			joined = false;
    bffc:	2200      	movs	r2, #0
    bffe:	4b95      	ldr	r3, [pc, #596]	; (c254 <processTask+0x340>)
    c000:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
    c002:	489a      	ldr	r0, [pc, #616]	; (c26c <processTask+0x358>)
    c004:	4b8b      	ldr	r3, [pc, #556]	; (c234 <processTask+0x320>)
    c006:	4798      	blx	r3
			set_LED_data(LED_AMBER,&on);
    c008:	4999      	ldr	r1, [pc, #612]	; (c270 <processTask+0x35c>)
    c00a:	2002      	movs	r0, #2
    c00c:	4b99      	ldr	r3, [pc, #612]	; (c274 <processTask+0x360>)
    c00e:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
    c010:	2010      	movs	r0, #16
    c012:	4b99      	ldr	r3, [pc, #612]	; (c278 <processTask+0x364>)
    c014:	4798      	blx	r3
    c016:	e7e2      	b.n	bfde <processTask+0xca>
	if(serialBuffer == '1')
    c018:	4b98      	ldr	r3, [pc, #608]	; (c27c <processTask+0x368>)
    c01a:	781b      	ldrb	r3, [r3, #0]
    c01c:	2b31      	cmp	r3, #49	; 0x31
    c01e:	d00b      	beq.n	c038 <processTask+0x124>
	else if(serialBuffer == '2')
    c020:	2b32      	cmp	r3, #50	; 0x32
    c022:	d010      	beq.n	c046 <processTask+0x132>
		printf("Please enter a valid choice\r\n");
    c024:	4896      	ldr	r0, [pc, #600]	; (c280 <processTask+0x36c>)
    c026:	4b83      	ldr	r3, [pc, #524]	; (c234 <processTask+0x320>)
    c028:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    c02a:	2201      	movs	r2, #1
    c02c:	4b7f      	ldr	r3, [pc, #508]	; (c22c <processTask+0x318>)
    c02e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c030:	2000      	movs	r0, #0
    c032:	4b85      	ldr	r3, [pc, #532]	; (c248 <processTask+0x334>)
    c034:	4798      	blx	r3
    c036:	e783      	b.n	bf40 <processTask+0x2c>
		appTaskState = DEMO_APP_STATE;
    c038:	2202      	movs	r2, #2
    c03a:	4b7c      	ldr	r3, [pc, #496]	; (c22c <processTask+0x318>)
    c03c:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c03e:	2000      	movs	r0, #0
    c040:	4b81      	ldr	r3, [pc, #516]	; (c248 <processTask+0x334>)
    c042:	4798      	blx	r3
    c044:	e77c      	b.n	bf40 <processTask+0x2c>
    certAppEnabled = true;
    c046:	2201      	movs	r2, #1
    c048:	4b8e      	ldr	r3, [pc, #568]	; (c284 <processTask+0x370>)
    c04a:	701a      	strb	r2, [r3, #0]
    cert_app_init();
    c04c:	4b8e      	ldr	r3, [pc, #568]	; (c288 <processTask+0x374>)
    c04e:	4798      	blx	r3
    c050:	e776      	b.n	bf40 <processTask+0x2c>
	uint8_t num = serialBuffer - '0';
    c052:	4b8a      	ldr	r3, [pc, #552]	; (c27c <processTask+0x368>)
    c054:	781b      	ldrb	r3, [r3, #0]
    c056:	001c      	movs	r4, r3
    c058:	3c30      	subs	r4, #48	; 0x30
    c05a:	b2e4      	uxtb	r4, r4
	if(num == sizeof(bandTable)-1)
    c05c:	2c09      	cmp	r4, #9
    c05e:	d00e      	beq.n	c07e <processTask+0x16a>
	else if(num == sizeof(bandTable)-2)
    c060:	2c08      	cmp	r4, #8
    c062:	d014      	beq.n	c08e <processTask+0x17a>
	else if(num >0 && num < sizeof(bandTable) -2)
    c064:	3b31      	subs	r3, #49	; 0x31
    c066:	2b06      	cmp	r3, #6
    c068:	d91a      	bls.n	c0a0 <processTask+0x18c>
		printf("Not a valid regional band choice\r\n");
    c06a:	4888      	ldr	r0, [pc, #544]	; (c28c <processTask+0x378>)
    c06c:	4b71      	ldr	r3, [pc, #452]	; (c234 <processTask+0x320>)
    c06e:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    c070:	2202      	movs	r2, #2
    c072:	4b6e      	ldr	r3, [pc, #440]	; (c22c <processTask+0x318>)
    c074:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c076:	2000      	movs	r0, #0
    c078:	4b73      	ldr	r3, [pc, #460]	; (c248 <processTask+0x334>)
    c07a:	4798      	blx	r3
    c07c:	e760      	b.n	bf40 <processTask+0x2c>
  __ASM volatile ("dsb");
    c07e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    c082:	4a83      	ldr	r2, [pc, #524]	; (c290 <processTask+0x37c>)
    c084:	4b83      	ldr	r3, [pc, #524]	; (c294 <processTask+0x380>)
    c086:	60da      	str	r2, [r3, #12]
    c088:	f3bf 8f4f 	dsb	sy
    c08c:	e7fe      	b.n	c08c <processTask+0x178>
		PDS_DeleteAll();
    c08e:	4b82      	ldr	r3, [pc, #520]	; (c298 <processTask+0x384>)
    c090:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    c092:	2202      	movs	r2, #2
    c094:	4b65      	ldr	r3, [pc, #404]	; (c22c <processTask+0x318>)
    c096:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c098:	2000      	movs	r0, #0
    c09a:	4b6b      	ldr	r3, [pc, #428]	; (c248 <processTask+0x334>)
    c09c:	4798      	blx	r3
    c09e:	e74f      	b.n	bf40 <processTask+0x2c>
		LORAWAN_Reset(bandTable[num]);
    c0a0:	4d67      	ldr	r5, [pc, #412]	; (c240 <processTask+0x32c>)
    c0a2:	5d28      	ldrb	r0, [r5, r4]
    c0a4:	4b69      	ldr	r3, [pc, #420]	; (c24c <processTask+0x338>)
    c0a6:	4798      	blx	r3
		mote_set_parameters(bandTable[num],num);
    c0a8:	b2a1      	uxth	r1, r4
    c0aa:	5d28      	ldrb	r0, [r5, r4]
    c0ac:	4b7b      	ldr	r3, [pc, #492]	; (c29c <processTask+0x388>)
    c0ae:	4798      	blx	r3
		set_LED_data(LED_GREEN,&on);
    c0b0:	496f      	ldr	r1, [pc, #444]	; (c270 <processTask+0x35c>)
    c0b2:	2003      	movs	r0, #3
    c0b4:	4b6f      	ldr	r3, [pc, #444]	; (c274 <processTask+0x360>)
    c0b6:	4798      	blx	r3
    c0b8:	e742      	b.n	bf40 <processTask+0x2c>
	if(serialBuffer == '1')
    c0ba:	4b70      	ldr	r3, [pc, #448]	; (c27c <processTask+0x368>)
    c0bc:	781b      	ldrb	r3, [r3, #0]
    c0be:	2b31      	cmp	r3, #49	; 0x31
    c0c0:	d028      	beq.n	c114 <processTask+0x200>
	else if(serialBuffer == '2' && joined == true)
    c0c2:	2b32      	cmp	r3, #50	; 0x32
    c0c4:	d042      	beq.n	c14c <processTask+0x238>
	else if(serialBuffer == '0')
    c0c6:	2b30      	cmp	r3, #48	; 0x30
    c0c8:	d100      	bne.n	c0cc <processTask+0x1b8>
    c0ca:	e11f      	b.n	c30c <processTask+0x3f8>
	else if (serialBuffer == '3')
    c0cc:	2b33      	cmp	r3, #51	; 0x33
    c0ce:	d100      	bne.n	c0d2 <processTask+0x1be>
    c0d0:	e158      	b.n	c384 <processTask+0x470>
	else if (serialBuffer == '4')
    c0d2:	2b34      	cmp	r3, #52	; 0x34
    c0d4:	d100      	bne.n	c0d8 <processTask+0x1c4>
    c0d6:	e15c      	b.n	c392 <processTask+0x47e>
	else if (serialBuffer == '5')
    c0d8:	2b35      	cmp	r3, #53	; 0x35
    c0da:	d100      	bne.n	c0de <processTask+0x1ca>
    c0dc:	e166      	b.n	c3ac <processTask+0x498>
	else if (serialBuffer == '6')
    c0de:	2b36      	cmp	r3, #54	; 0x36
    c0e0:	d100      	bne.n	c0e4 <processTask+0x1d0>
    c0e2:	e16f      	b.n	c3c4 <processTask+0x4b0>
	else if (serialBuffer == '7')
    c0e4:	2b37      	cmp	r3, #55	; 0x37
    c0e6:	d100      	bne.n	c0ea <processTask+0x1d6>
    c0e8:	e1f0      	b.n	c4cc <processTask+0x5b8>
	else if (serialBuffer == '8')
    c0ea:	2b38      	cmp	r3, #56	; 0x38
    c0ec:	d100      	bne.n	c0f0 <processTask+0x1dc>
    c0ee:	e213      	b.n	c518 <processTask+0x604>
	else if (serialBuffer == '9')
    c0f0:	2b39      	cmp	r3, #57	; 0x39
    c0f2:	d000      	beq.n	c0f6 <processTask+0x1e2>
    c0f4:	e227      	b.n	c546 <processTask+0x632>
		radioReceiveParam.action = RECEIVE_STOP ;
    c0f6:	a80b      	add	r0, sp, #44	; 0x2c
    c0f8:	3b38      	subs	r3, #56	; 0x38
    c0fa:	7003      	strb	r3, [r0, #0]
		if (RADIO_Receive(&radioReceiveParam) == 0)
    c0fc:	4b68      	ldr	r3, [pc, #416]	; (c2a0 <processTask+0x38c>)
    c0fe:	4798      	blx	r3
    c100:	2800      	cmp	r0, #0
    c102:	d100      	bne.n	c106 <processTask+0x1f2>
    c104:	e21b      	b.n	c53e <processTask+0x62a>
		appTaskState = JOIN_SEND_STATE ;
    c106:	2203      	movs	r2, #3
    c108:	4b48      	ldr	r3, [pc, #288]	; (c22c <processTask+0x318>)
    c10a:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;
    c10c:	2000      	movs	r0, #0
    c10e:	4b4e      	ldr	r3, [pc, #312]	; (c248 <processTask+0x334>)
    c110:	4798      	blx	r3
    c112:	e715      	b.n	bf40 <processTask+0x2c>
		status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    c114:	2000      	movs	r0, #0
    c116:	4b63      	ldr	r3, [pc, #396]	; (c2a4 <processTask+0x390>)
    c118:	4798      	blx	r3
    c11a:	0004      	movs	r4, r0
		if (LORAWAN_SUCCESS == (StackRetStatus_t)status)
    c11c:	2808      	cmp	r0, #8
    c11e:	d00d      	beq.n	c13c <processTask+0x228>
			set_LED_data(LED_AMBER,&on);
    c120:	4953      	ldr	r1, [pc, #332]	; (c270 <processTask+0x35c>)
    c122:	2002      	movs	r0, #2
    c124:	4b53      	ldr	r3, [pc, #332]	; (c274 <processTask+0x360>)
    c126:	4798      	blx	r3
			print_stack_status(status);
    c128:	0020      	movs	r0, r4
    c12a:	4b5f      	ldr	r3, [pc, #380]	; (c2a8 <processTask+0x394>)
    c12c:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    c12e:	2203      	movs	r2, #3
    c130:	4b3e      	ldr	r3, [pc, #248]	; (c22c <processTask+0x318>)
    c132:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
    c134:	2000      	movs	r0, #0
    c136:	4b44      	ldr	r3, [pc, #272]	; (c248 <processTask+0x334>)
    c138:	4798      	blx	r3
    c13a:	e701      	b.n	bf40 <processTask+0x2c>
			set_LED_data(LED_GREEN,&on);
    c13c:	494c      	ldr	r1, [pc, #304]	; (c270 <processTask+0x35c>)
    c13e:	2003      	movs	r0, #3
    c140:	4b4c      	ldr	r3, [pc, #304]	; (c274 <processTask+0x360>)
    c142:	4798      	blx	r3
			printf("\nJoin Request Sent\n\r");
    c144:	4859      	ldr	r0, [pc, #356]	; (c2ac <processTask+0x398>)
    c146:	4b47      	ldr	r3, [pc, #284]	; (c264 <processTask+0x350>)
    c148:	4798      	blx	r3
    c14a:	e6f9      	b.n	bf40 <processTask+0x2c>
	else if(serialBuffer == '2' && joined == true)
    c14c:	4b41      	ldr	r3, [pc, #260]	; (c254 <processTask+0x340>)
    c14e:	781b      	ldrb	r3, [r3, #0]
    c150:	2b00      	cmp	r3, #0
    c152:	d10d      	bne.n	c170 <processTask+0x25c>
		set_LED_data(LED_AMBER,&on);
    c154:	4946      	ldr	r1, [pc, #280]	; (c270 <processTask+0x35c>)
    c156:	2002      	movs	r0, #2
    c158:	4b46      	ldr	r3, [pc, #280]	; (c274 <processTask+0x360>)
    c15a:	4798      	blx	r3
		printf("Device not joined to the network\r\n");
    c15c:	4854      	ldr	r0, [pc, #336]	; (c2b0 <processTask+0x39c>)
    c15e:	4b35      	ldr	r3, [pc, #212]	; (c234 <processTask+0x320>)
    c160:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    c162:	2203      	movs	r2, #3
    c164:	4b31      	ldr	r3, [pc, #196]	; (c22c <processTask+0x318>)
    c166:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c168:	2000      	movs	r0, #0
    c16a:	4b37      	ldr	r3, [pc, #220]	; (c248 <processTask+0x334>)
    c16c:	4798      	blx	r3
    c16e:	e6e7      	b.n	bf40 <processTask+0x2c>
    get_resource_data(TEMP_SENSOR,(uint8_t *)&cel_val);
    c170:	4d50      	ldr	r5, [pc, #320]	; (c2b4 <processTask+0x3a0>)
    c172:	0029      	movs	r1, r5
    c174:	2001      	movs	r0, #1
    c176:	4b50      	ldr	r3, [pc, #320]	; (c2b8 <processTask+0x3a4>)
    c178:	4798      	blx	r3
    fahren_val = convert_celsius_to_fahrenheit(cel_val);
    c17a:	4b50      	ldr	r3, [pc, #320]	; (c2bc <processTask+0x3a8>)
    c17c:	4699      	mov	r9, r3
    fauren_val = (((celsius_val * 9)/5) + 32);
    c17e:	4950      	ldr	r1, [pc, #320]	; (c2c0 <processTask+0x3ac>)
    c180:	6828      	ldr	r0, [r5, #0]
    c182:	4b50      	ldr	r3, [pc, #320]	; (c2c4 <processTask+0x3b0>)
    c184:	4798      	blx	r3
    c186:	4950      	ldr	r1, [pc, #320]	; (c2c8 <processTask+0x3b4>)
    c188:	4b50      	ldr	r3, [pc, #320]	; (c2cc <processTask+0x3b8>)
    c18a:	4798      	blx	r3
    c18c:	2184      	movs	r1, #132	; 0x84
    c18e:	05c9      	lsls	r1, r1, #23
    c190:	4b4f      	ldr	r3, [pc, #316]	; (c2d0 <processTask+0x3bc>)
    c192:	4798      	blx	r3
    fahren_val = convert_celsius_to_fahrenheit(cel_val);
    c194:	464b      	mov	r3, r9
    c196:	6018      	str	r0, [r3, #0]
    printf("\nTemperature:");
    c198:	484e      	ldr	r0, [pc, #312]	; (c2d4 <processTask+0x3c0>)
    c19a:	4f32      	ldr	r7, [pc, #200]	; (c264 <processTask+0x350>)
    c19c:	47b8      	blx	r7
    snprintf(temp_sen_str,sizeof(temp_sen_str),"%.1fC/%.1fF\n", cel_val, fahren_val);
    c19e:	4e4e      	ldr	r6, [pc, #312]	; (c2d8 <processTask+0x3c4>)
    c1a0:	4c4e      	ldr	r4, [pc, #312]	; (c2dc <processTask+0x3c8>)
    c1a2:	464b      	mov	r3, r9
    c1a4:	6818      	ldr	r0, [r3, #0]
    c1a6:	47a0      	blx	r4
    c1a8:	9002      	str	r0, [sp, #8]
    c1aa:	9103      	str	r1, [sp, #12]
    c1ac:	6828      	ldr	r0, [r5, #0]
    c1ae:	47a0      	blx	r4
    c1b0:	9000      	str	r0, [sp, #0]
    c1b2:	9101      	str	r1, [sp, #4]
    c1b4:	4a4a      	ldr	r2, [pc, #296]	; (c2e0 <processTask+0x3cc>)
    c1b6:	2119      	movs	r1, #25
    c1b8:	0030      	movs	r0, r6
    c1ba:	4b4a      	ldr	r3, [pc, #296]	; (c2e4 <processTask+0x3d0>)
    c1bc:	4798      	blx	r3
    printf("%.1f\xf8 C/%.1f\xf8 F\n\r", cel_val, fahren_val);
    c1be:	6828      	ldr	r0, [r5, #0]
    c1c0:	47a0      	blx	r4
    c1c2:	9004      	str	r0, [sp, #16]
    c1c4:	9105      	str	r1, [sp, #20]
    c1c6:	464b      	mov	r3, r9
    c1c8:	6818      	ldr	r0, [r3, #0]
    c1ca:	47a0      	blx	r4
    c1cc:	9000      	str	r0, [sp, #0]
    c1ce:	9101      	str	r1, [sp, #4]
    c1d0:	9a04      	ldr	r2, [sp, #16]
    c1d2:	9b05      	ldr	r3, [sp, #20]
    c1d4:	4844      	ldr	r0, [pc, #272]	; (c2e8 <processTask+0x3d4>)
    c1d6:	47b8      	blx	r7
    data_len = strlen(temp_sen_str);
    c1d8:	0030      	movs	r0, r6
    c1da:	4b44      	ldr	r3, [pc, #272]	; (c2ec <processTask+0x3d8>)
    c1dc:	4798      	blx	r3
    lorawanSendReq.buffer = &temp_sen_str;
    c1de:	4b44      	ldr	r3, [pc, #272]	; (c2f0 <processTask+0x3dc>)
    c1e0:	605e      	str	r6, [r3, #4]
    lorawanSendReq.bufferLength = data_len - 1;
    c1e2:	3801      	subs	r0, #1
    c1e4:	7218      	strb	r0, [r3, #8]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE;
    c1e6:	2200      	movs	r2, #0
    c1e8:	701a      	strb	r2, [r3, #0]
    lorawanSendReq.port = DEMO_APP_FPORT;
    c1ea:	3201      	adds	r2, #1
    c1ec:	705a      	strb	r2, [r3, #1]
    status = LORAWAN_Send(&lorawanSendReq);
    c1ee:	0018      	movs	r0, r3
    c1f0:	4b40      	ldr	r3, [pc, #256]	; (c2f4 <processTask+0x3e0>)
    c1f2:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    c1f4:	2808      	cmp	r0, #8
    c1f6:	d008      	beq.n	c20a <processTask+0x2f6>
        print_stack_status(status);
    c1f8:	4b2b      	ldr	r3, [pc, #172]	; (c2a8 <processTask+0x394>)
    c1fa:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    c1fc:	2203      	movs	r2, #3
    c1fe:	4b0b      	ldr	r3, [pc, #44]	; (c22c <processTask+0x318>)
    c200:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c202:	2000      	movs	r0, #0
    c204:	4b10      	ldr	r3, [pc, #64]	; (c248 <processTask+0x334>)
    c206:	4798      	blx	r3
    c208:	e69a      	b.n	bf40 <processTask+0x2c>
        printf("\nTx Data Sent \r\n");
    c20a:	483b      	ldr	r0, [pc, #236]	; (c2f8 <processTask+0x3e4>)
    c20c:	4b09      	ldr	r3, [pc, #36]	; (c234 <processTask+0x320>)
    c20e:	4798      	blx	r3
        set_LED_data(LED_GREEN,&on);
    c210:	4917      	ldr	r1, [pc, #92]	; (c270 <processTask+0x35c>)
    c212:	2003      	movs	r0, #3
    c214:	4b17      	ldr	r3, [pc, #92]	; (c274 <processTask+0x360>)
    c216:	4798      	blx	r3
        SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    c218:	4b38      	ldr	r3, [pc, #224]	; (c2fc <processTask+0x3e8>)
    c21a:	7818      	ldrb	r0, [r3, #0]
    c21c:	2300      	movs	r3, #0
    c21e:	9300      	str	r3, [sp, #0]
    c220:	4b37      	ldr	r3, [pc, #220]	; (c300 <processTask+0x3ec>)
    c222:	2200      	movs	r2, #0
    c224:	4937      	ldr	r1, [pc, #220]	; (c304 <processTask+0x3f0>)
    c226:	4c38      	ldr	r4, [pc, #224]	; (c308 <processTask+0x3f4>)
    c228:	47a0      	blx	r4
    c22a:	e689      	b.n	bf40 <processTask+0x2c>
    c22c:	20001039 	.word	0x20001039
    c230:	0001d524 	.word	0x0001d524
    c234:	00015aa5 	.word	0x00015aa5
    c238:	00008f8d 	.word	0x00008f8d
    c23c:	0000e37d 	.word	0x0000e37d
    c240:	20000054 	.word	0x20000054
    c244:	0001d748 	.word	0x0001d748
    c248:	0000b1c1 	.word	0x0000b1c1
    c24c:	000101b5 	.word	0x000101b5
    c250:	0001d6ec 	.word	0x0001d6ec
    c254:	20001048 	.word	0x20001048
    c258:	0001d710 	.word	0x0001d710
    c25c:	0001d0d8 	.word	0x0001d0d8
    c260:	0001d73c 	.word	0x0001d73c
    c264:	000159e1 	.word	0x000159e1
    c268:	0000bc21 	.word	0x0000bc21
    c26c:	0001d724 	.word	0x0001d724
    c270:	200000cc 	.word	0x200000cc
    c274:	0000982d 	.word	0x0000982d
    c278:	0000a511 	.word	0x0000a511
    c27c:	20001067 	.word	0x20001067
    c280:	0001d75c 	.word	0x0001d75c
    c284:	20001040 	.word	0x20001040
    c288:	0000af85 	.word	0x0000af85
    c28c:	0001d77c 	.word	0x0001d77c
    c290:	05fa0004 	.word	0x05fa0004
    c294:	e000ed00 	.word	0xe000ed00
    c298:	00008f71 	.word	0x00008f71
    c29c:	0000be35 	.word	0x0000be35
    c2a0:	000120c9 	.word	0x000120c9
    c2a4:	0000dd29 	.word	0x0000dd29
    c2a8:	0000bd79 	.word	0x0000bd79
    c2ac:	0001cc40 	.word	0x0001cc40
    c2b0:	0001d7e4 	.word	0x0001d7e4
    c2b4:	2000103c 	.word	0x2000103c
    c2b8:	0000989d 	.word	0x0000989d
    c2bc:	20001044 	.word	0x20001044
    c2c0:	41100000 	.word	0x41100000
    c2c4:	000133f5 	.word	0x000133f5
    c2c8:	40a00000 	.word	0x40a00000
    c2cc:	00013015 	.word	0x00013015
    c2d0:	00012cf1 	.word	0x00012cf1
    c2d4:	0001d7a0 	.word	0x0001d7a0
    c2d8:	2000106c 	.word	0x2000106c
    c2dc:	00015365 	.word	0x00015365
    c2e0:	0001d7b0 	.word	0x0001d7b0
    c2e4:	00015cb5 	.word	0x00015cb5
    c2e8:	0001d7c0 	.word	0x0001d7c0
    c2ec:	00015d39 	.word	0x00015d39
    c2f0:	2000104c 	.word	0x2000104c
    c2f4:	0000d015 	.word	0x0000d015
    c2f8:	0001d7d4 	.word	0x0001d7d4
    c2fc:	200000d0 	.word	0x200000d0
    c300:	0000b2e1 	.word	0x0000b2e1
    c304:	000186a0 	.word	0x000186a0
    c308:	00009eed 	.word	0x00009eed
		sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    c30c:	ab0b      	add	r3, sp, #44	; 0x2c
    c30e:	22fa      	movs	r2, #250	; 0xfa
    c310:	0092      	lsls	r2, r2, #2
    c312:	920b      	str	r2, [sp, #44]	; 0x2c
		sleepReq.pmmWakeupCallback = appWakeup;
    c314:	4a93      	ldr	r2, [pc, #588]	; (c564 <processTask+0x650>)
    c316:	920d      	str	r2, [sp, #52]	; 0x34
		sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    c318:	2201      	movs	r2, #1
    c31a:	711a      	strb	r2, [r3, #4]
		if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    c31c:	2000      	movs	r0, #0
    c31e:	4b92      	ldr	r3, [pc, #584]	; (c568 <processTask+0x654>)
    c320:	4798      	blx	r3
    c322:	2800      	cmp	r0, #0
    c324:	d024      	beq.n	c370 <processTask+0x45c>
	config->direction  = PORT_PIN_DIR_INPUT;
    c326:	ac0a      	add	r4, sp, #40	; 0x28
    c328:	2300      	movs	r3, #0
    c32a:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c32c:	3301      	adds	r3, #1
    c32e:	7063      	strb	r3, [r4, #1]
    pin_conf.powersave  = true;
    c330:	70a3      	strb	r3, [r4, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    c332:	0021      	movs	r1, r4
    c334:	2004      	movs	r0, #4
    c336:	4d8d      	ldr	r5, [pc, #564]	; (c56c <processTask+0x658>)
    c338:	47a8      	blx	r5
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    c33a:	0021      	movs	r1, r4
    c33c:	2005      	movs	r0, #5
    c33e:	47a8      	blx	r5
    sio2host_deinit();
    c340:	4b8b      	ldr	r3, [pc, #556]	; (c570 <processTask+0x65c>)
    c342:	4798      	blx	r3
    HAL_RadioDeInit();
    c344:	4b8b      	ldr	r3, [pc, #556]	; (c574 <processTask+0x660>)
    c346:	4798      	blx	r3
			if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    c348:	a80b      	add	r0, sp, #44	; 0x2c
    c34a:	4b8b      	ldr	r3, [pc, #556]	; (c578 <processTask+0x664>)
    c34c:	4798      	blx	r3
    c34e:	2800      	cmp	r0, #0
    c350:	d000      	beq.n	c354 <processTask+0x440>
    c352:	e5f5      	b.n	bf40 <processTask+0x2c>
				HAL_Radio_resources_init();
    c354:	4b89      	ldr	r3, [pc, #548]	; (c57c <processTask+0x668>)
    c356:	4798      	blx	r3
				sio2host_init();
    c358:	4b89      	ldr	r3, [pc, #548]	; (c580 <processTask+0x66c>)
    c35a:	4798      	blx	r3
				appTaskState = JOIN_SEND_STATE;
    c35c:	2203      	movs	r2, #3
    c35e:	4b89      	ldr	r3, [pc, #548]	; (c584 <processTask+0x670>)
    c360:	701a      	strb	r2, [r3, #0]
				appPostTask(DISPLAY_TASK_HANDLER);
    c362:	2000      	movs	r0, #0
    c364:	4b88      	ldr	r3, [pc, #544]	; (c588 <processTask+0x674>)
    c366:	4798      	blx	r3
				printf("\r\nsleep_not_ok\r\n");	
    c368:	4888      	ldr	r0, [pc, #544]	; (c58c <processTask+0x678>)
    c36a:	4b89      	ldr	r3, [pc, #548]	; (c590 <processTask+0x67c>)
    c36c:	4798      	blx	r3
    c36e:	e5e7      	b.n	bf40 <processTask+0x2c>
			printf("\r\nsleep_not_ok\r\n");
    c370:	4886      	ldr	r0, [pc, #536]	; (c58c <processTask+0x678>)
    c372:	4b87      	ldr	r3, [pc, #540]	; (c590 <processTask+0x67c>)
    c374:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    c376:	2203      	movs	r2, #3
    c378:	4b82      	ldr	r3, [pc, #520]	; (c584 <processTask+0x670>)
    c37a:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
    c37c:	2000      	movs	r0, #0
    c37e:	4b82      	ldr	r3, [pc, #520]	; (c588 <processTask+0x674>)
    c380:	4798      	blx	r3
    c382:	e5dd      	b.n	bf40 <processTask+0x2c>
		appTaskState = DEMO_APP_STATE;
    c384:	2202      	movs	r2, #2
    c386:	4b7f      	ldr	r3, [pc, #508]	; (c584 <processTask+0x670>)
    c388:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c38a:	2000      	movs	r0, #0
    c38c:	4b7e      	ldr	r3, [pc, #504]	; (c588 <processTask+0x674>)
    c38e:	4798      	blx	r3
    c390:	e5d6      	b.n	bf40 <processTask+0x2c>
		time_ms = LORAWAN_Pause() ;
    c392:	4b80      	ldr	r3, [pc, #512]	; (c594 <processTask+0x680>)
    c394:	4798      	blx	r3
    c396:	0001      	movs	r1, r0
		printf("\r\nMAC Pause %ld\r\n", time_ms) ;
    c398:	487f      	ldr	r0, [pc, #508]	; (c598 <processTask+0x684>)
    c39a:	4b80      	ldr	r3, [pc, #512]	; (c59c <processTask+0x688>)
    c39c:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE ;
    c39e:	2203      	movs	r2, #3
    c3a0:	4b78      	ldr	r3, [pc, #480]	; (c584 <processTask+0x670>)
    c3a2:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;
    c3a4:	2000      	movs	r0, #0
    c3a6:	4b78      	ldr	r3, [pc, #480]	; (c588 <processTask+0x674>)
    c3a8:	4798      	blx	r3
    c3aa:	e5c9      	b.n	bf40 <processTask+0x2c>
		LORAWAN_Resume() ;
    c3ac:	4b7c      	ldr	r3, [pc, #496]	; (c5a0 <processTask+0x68c>)
    c3ae:	4798      	blx	r3
		printf("\r\nMAC Resume\r\n") ;
    c3b0:	487c      	ldr	r0, [pc, #496]	; (c5a4 <processTask+0x690>)
    c3b2:	4b77      	ldr	r3, [pc, #476]	; (c590 <processTask+0x67c>)
    c3b4:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE ;
    c3b6:	2203      	movs	r2, #3
    c3b8:	4b72      	ldr	r3, [pc, #456]	; (c584 <processTask+0x670>)
    c3ba:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;
    c3bc:	2000      	movs	r0, #0
    c3be:	4b72      	ldr	r3, [pc, #456]	; (c588 <processTask+0x674>)
    c3c0:	4798      	blx	r3
    c3c2:	e5bd      	b.n	bf40 <processTask+0x2c>
		RadioLoRaBandWidth_t bw = BW_125KHZ ;
    c3c4:	2111      	movs	r1, #17
    c3c6:	ab02      	add	r3, sp, #8
    c3c8:	469c      	mov	ip, r3
    c3ca:	4461      	add	r1, ip
    c3cc:	2307      	movs	r3, #7
    c3ce:	469a      	mov	sl, r3
    c3d0:	700b      	strb	r3, [r1, #0]
		RADIO_SetAttr(BANDWIDTH, &bw) ;
    c3d2:	2007      	movs	r0, #7
    c3d4:	4c74      	ldr	r4, [pc, #464]	; (c5a8 <processTask+0x694>)
    c3d6:	47a0      	blx	r4
		printf("Configuring Radio Bandwidth: 125kHz\r\n") ;
    c3d8:	4874      	ldr	r0, [pc, #464]	; (c5ac <processTask+0x698>)
    c3da:	4b6d      	ldr	r3, [pc, #436]	; (c590 <processTask+0x67c>)
    c3dc:	4698      	mov	r8, r3
    c3de:	4798      	blx	r3
		uint32_t freq = FREQ_868100KHZ ;
    c3e0:	4b73      	ldr	r3, [pc, #460]	; (c5b0 <processTask+0x69c>)
    c3e2:	9309      	str	r3, [sp, #36]	; 0x24
		RADIO_SetAttr(CHANNEL_FREQUENCY, &freq) ;
    c3e4:	a909      	add	r1, sp, #36	; 0x24
    c3e6:	2001      	movs	r0, #1
    c3e8:	47a0      	blx	r4
		printf("Configuring Channel Frequency %ld\r\n", freq) ;
    c3ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3ec:	4871      	ldr	r0, [pc, #452]	; (c5b4 <processTask+0x6a0>)
    c3ee:	4d6b      	ldr	r5, [pc, #428]	; (c59c <processTask+0x688>)
    c3f0:	47a8      	blx	r5
		uint32_t fdev = 25000 ;
    c3f2:	4b71      	ldr	r3, [pc, #452]	; (c5b8 <processTask+0x6a4>)
    c3f4:	930a      	str	r3, [sp, #40]	; 0x28
		RADIO_SetAttr(CHANNEL_FREQUENCY_DEVIATION, &fdev) ;
    c3f6:	a90a      	add	r1, sp, #40	; 0x28
    c3f8:	2002      	movs	r0, #2
    c3fa:	47a0      	blx	r4
		printf("Configuring Channel Frequency Deviation %ld\r\n", fdev) ;
    c3fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c3fe:	486f      	ldr	r0, [pc, #444]	; (c5bc <processTask+0x6a8>)
    c400:	47a8      	blx	r5
		uint8_t crc_state = 1 ;
    c402:	2712      	movs	r7, #18
    c404:	ab02      	add	r3, sp, #8
    c406:	469c      	mov	ip, r3
    c408:	4467      	add	r7, ip
    c40a:	2601      	movs	r6, #1
    c40c:	703e      	strb	r6, [r7, #0]
		RADIO_SetAttr(CRC, &crc_state) ;
    c40e:	0039      	movs	r1, r7
    c410:	2005      	movs	r0, #5
    c412:	47a0      	blx	r4
		printf("Configuring CRC state: %d\r\n", crc_state) ;
    c414:	7839      	ldrb	r1, [r7, #0]
    c416:	486a      	ldr	r0, [pc, #424]	; (c5c0 <processTask+0x6ac>)
    c418:	47a8      	blx	r5
		RadioErrorCodingRate_t cr = CR_4_5 ;
    c41a:	2113      	movs	r1, #19
    c41c:	ab02      	add	r3, sp, #8
    c41e:	469c      	mov	ip, r3
    c420:	4461      	add	r1, ip
    c422:	700e      	strb	r6, [r1, #0]
		RADIO_SetAttr(ERROR_CODING_RATE, &cr) ;
    c424:	200b      	movs	r0, #11
    c426:	47a0      	blx	r4
		printf("Configuring Error Coding Rate 4/5\r\n") ;
    c428:	4866      	ldr	r0, [pc, #408]	; (c5c4 <processTask+0x6b0>)
    c42a:	47c0      	blx	r8
		uint8_t iqi = 0 ;
    c42c:	af07      	add	r7, sp, #28
    c42e:	2300      	movs	r3, #0
    c430:	4699      	mov	r9, r3
    c432:	703b      	strb	r3, [r7, #0]
		RADIO_SetAttr(IQINVERTED, &iqi) ;
    c434:	0039      	movs	r1, r7
    c436:	2006      	movs	r0, #6
    c438:	47a0      	blx	r4
		printf("Configuring IQ Inverted: %d\r\n", iqi) ;
    c43a:	7839      	ldrb	r1, [r7, #0]
    c43c:	4862      	ldr	r0, [pc, #392]	; (c5c8 <processTask+0x6b4>)
    c43e:	47a8      	blx	r5
		uint8_t sync_word = 0x34 ;
    c440:	2715      	movs	r7, #21
    c442:	ab02      	add	r3, sp, #8
    c444:	469c      	mov	ip, r3
    c446:	4467      	add	r7, ip
    c448:	2334      	movs	r3, #52	; 0x34
    c44a:	703b      	strb	r3, [r7, #0]
		RADIO_SetAttr(LORA_SYNC_WORD, &sync_word) ;
    c44c:	0039      	movs	r1, r7
    c44e:	2000      	movs	r0, #0
    c450:	47a0      	blx	r4
		printf("Configuring LoRa sync word 0x%x\r\n", sync_word) ;
    c452:	7839      	ldrb	r1, [r7, #0]
    c454:	485d      	ldr	r0, [pc, #372]	; (c5cc <processTask+0x6b8>)
    c456:	47a8      	blx	r5
		RadioModulation_t mod = MODULATION_LORA ;
    c458:	2116      	movs	r1, #22
    c45a:	ab02      	add	r3, sp, #8
    c45c:	469c      	mov	ip, r3
    c45e:	4461      	add	r1, ip
    c460:	700e      	strb	r6, [r1, #0]
		RADIO_SetAttr(MODULATION, &mod) ;
    c462:	2009      	movs	r0, #9
    c464:	47a0      	blx	r4
		printf("Configuring Modulation: LORA\r\n") ;
    c466:	485a      	ldr	r0, [pc, #360]	; (c5d0 <processTask+0x6bc>)
    c468:	47c0      	blx	r8
		uint8_t pa_boost = 0 ;
    c46a:	2717      	movs	r7, #23
    c46c:	ab02      	add	r3, sp, #8
    c46e:	469c      	mov	ip, r3
    c470:	4467      	add	r7, ip
    c472:	464b      	mov	r3, r9
    c474:	703b      	strb	r3, [r7, #0]
		RADIO_SetAttr(PABOOST, &pa_boost) ;
    c476:	0039      	movs	r1, r7
    c478:	2008      	movs	r0, #8
    c47a:	47a0      	blx	r4
		printf("Configuring PA Boost: %d\r\n", pa_boost) ;
    c47c:	7839      	ldrb	r1, [r7, #0]
    c47e:	4855      	ldr	r0, [pc, #340]	; (c5d4 <processTask+0x6c0>)
    c480:	47a8      	blx	r5
		int16_t outputPwr = 1 ;
    c482:	af08      	add	r7, sp, #32
    c484:	803e      	strh	r6, [r7, #0]
		RADIO_SetAttr(OUTPUT_POWER, (void *)&outputPwr) ;
    c486:	0039      	movs	r1, r7
    c488:	2004      	movs	r0, #4
    c48a:	47a0      	blx	r4
		printf("Configuring Radio Output Power %d\r\n", outputPwr) ;
    c48c:	2300      	movs	r3, #0
    c48e:	5ef9      	ldrsh	r1, [r7, r3]
    c490:	4851      	ldr	r0, [pc, #324]	; (c5d8 <processTask+0x6c4>)
    c492:	47a8      	blx	r5
		int16_t sf = SF_7 ;
    c494:	3619      	adds	r6, #25
    c496:	ab02      	add	r3, sp, #8
    c498:	469c      	mov	ip, r3
    c49a:	4466      	add	r6, ip
    c49c:	4653      	mov	r3, sl
    c49e:	8033      	strh	r3, [r6, #0]
		RADIO_SetAttr(SPREADING_FACTOR, (void *)&sf) ;
    c4a0:	0031      	movs	r1, r6
    c4a2:	2016      	movs	r0, #22
    c4a4:	47a0      	blx	r4
		printf("Configuring Radio SF %d\r\n", sf) ;
    c4a6:	2300      	movs	r3, #0
    c4a8:	5ef1      	ldrsh	r1, [r6, r3]
    c4aa:	484c      	ldr	r0, [pc, #304]	; (c5dc <processTask+0x6c8>)
    c4ac:	47a8      	blx	r5
		uint32_t wdt = 60000 ;
    c4ae:	4b4c      	ldr	r3, [pc, #304]	; (c5e0 <processTask+0x6cc>)
    c4b0:	930b      	str	r3, [sp, #44]	; 0x2c
		RADIO_SetAttr(WATCHDOG_TIMEOUT, (void *)&wdt) ;
    c4b2:	a90b      	add	r1, sp, #44	; 0x2c
    c4b4:	200c      	movs	r0, #12
    c4b6:	47a0      	blx	r4
		printf("Configuring Radio Watch Dog Timeout %ld\r\n", wdt) ;
    c4b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c4ba:	484a      	ldr	r0, [pc, #296]	; (c5e4 <processTask+0x6d0>)
    c4bc:	47a8      	blx	r5
		appTaskState = JOIN_SEND_STATE ;
    c4be:	2203      	movs	r2, #3
    c4c0:	4b30      	ldr	r3, [pc, #192]	; (c584 <processTask+0x670>)
    c4c2:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;		
    c4c4:	2000      	movs	r0, #0
    c4c6:	4b30      	ldr	r3, [pc, #192]	; (c588 <processTask+0x674>)
    c4c8:	4798      	blx	r3
    c4ca:	e539      	b.n	bf40 <processTask+0x2c>
		counter++ ;
    c4cc:	4a46      	ldr	r2, [pc, #280]	; (c5e8 <processTask+0x6d4>)
    c4ce:	7813      	ldrb	r3, [r2, #0]
    c4d0:	3301      	adds	r3, #1
    c4d2:	b2db      	uxtb	r3, r3
    c4d4:	7013      	strb	r3, [r2, #0]
		tx_buffer[0] = counter ;
    c4d6:	4c45      	ldr	r4, [pc, #276]	; (c5ec <processTask+0x6d8>)
    c4d8:	7023      	strb	r3, [r4, #0]
		printf("Buffer transmitted: ") ;
    c4da:	4845      	ldr	r0, [pc, #276]	; (c5f0 <processTask+0x6dc>)
    c4dc:	4b2f      	ldr	r3, [pc, #188]	; (c59c <processTask+0x688>)
    c4de:	4798      	blx	r3
		print_array(tx_buffer, 1) ;
    c4e0:	2101      	movs	r1, #1
    c4e2:	0020      	movs	r0, r4
    c4e4:	4b43      	ldr	r3, [pc, #268]	; (c5f4 <processTask+0x6e0>)
    c4e6:	4798      	blx	r3
		radioTransmitParam.bufferLen = 1 ;
    c4e8:	a80b      	add	r0, sp, #44	; 0x2c
    c4ea:	2301      	movs	r3, #1
    c4ec:	7003      	strb	r3, [r0, #0]
		radioTransmitParam.bufferPtr = (uint8_t *)&tx_buffer ;
    c4ee:	6044      	str	r4, [r0, #4]
		radioStatus = RADIO_Transmit(&radioTransmitParam) ;
    c4f0:	4b41      	ldr	r3, [pc, #260]	; (c5f8 <processTask+0x6e4>)
    c4f2:	4798      	blx	r3
		switch (radioStatus)
    c4f4:	2800      	cmp	r0, #0
    c4f6:	d005      	beq.n	c504 <processTask+0x5f0>
    c4f8:	2802      	cmp	r0, #2
    c4fa:	d006      	beq.n	c50a <processTask+0x5f6>
				printf("Radio Busy\r\n") ;
    c4fc:	483f      	ldr	r0, [pc, #252]	; (c5fc <processTask+0x6e8>)
    c4fe:	4b24      	ldr	r3, [pc, #144]	; (c590 <processTask+0x67c>)
    c500:	4798      	blx	r3
    c502:	e002      	b.n	c50a <processTask+0x5f6>
				printf("Radio Transmit Success\r\n") ;
    c504:	483e      	ldr	r0, [pc, #248]	; (c600 <processTask+0x6ec>)
    c506:	4b22      	ldr	r3, [pc, #136]	; (c590 <processTask+0x67c>)
    c508:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE ;
    c50a:	2203      	movs	r2, #3
    c50c:	4b1d      	ldr	r3, [pc, #116]	; (c584 <processTask+0x670>)
    c50e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;
    c510:	2000      	movs	r0, #0
    c512:	4b1d      	ldr	r3, [pc, #116]	; (c588 <processTask+0x674>)
    c514:	4798      	blx	r3
    c516:	e513      	b.n	bf40 <processTask+0x2c>
		radioReceiveParam.action = RECEIVE_START ;
    c518:	a80b      	add	r0, sp, #44	; 0x2c
    c51a:	2300      	movs	r3, #0
    c51c:	7003      	strb	r3, [r0, #0]
		radioReceiveParam.rxWindowSize = rxTimeout ;
    c51e:	8043      	strh	r3, [r0, #2]
		if (RADIO_Receive(&radioReceiveParam) == 0)
    c520:	4b38      	ldr	r3, [pc, #224]	; (c604 <processTask+0x6f0>)
    c522:	4798      	blx	r3
    c524:	2800      	cmp	r0, #0
    c526:	d006      	beq.n	c536 <processTask+0x622>
		appTaskState = JOIN_SEND_STATE ;
    c528:	2203      	movs	r2, #3
    c52a:	4b16      	ldr	r3, [pc, #88]	; (c584 <processTask+0x670>)
    c52c:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER) ;
    c52e:	2000      	movs	r0, #0
    c530:	4b15      	ldr	r3, [pc, #84]	; (c588 <processTask+0x674>)
    c532:	4798      	blx	r3
    c534:	e504      	b.n	bf40 <processTask+0x2c>
			printf("Radio in Receive mode\r\n") ;
    c536:	4834      	ldr	r0, [pc, #208]	; (c608 <processTask+0x6f4>)
    c538:	4b15      	ldr	r3, [pc, #84]	; (c590 <processTask+0x67c>)
    c53a:	4798      	blx	r3
    c53c:	e7f4      	b.n	c528 <processTask+0x614>
			printf("Radio Exit Receive mode\r\n") ;
    c53e:	4833      	ldr	r0, [pc, #204]	; (c60c <processTask+0x6f8>)
    c540:	4b13      	ldr	r3, [pc, #76]	; (c590 <processTask+0x67c>)
    c542:	4798      	blx	r3
    c544:	e5df      	b.n	c106 <processTask+0x1f2>
		set_LED_data(LED_AMBER,&on);
    c546:	4932      	ldr	r1, [pc, #200]	; (c610 <processTask+0x6fc>)
    c548:	2002      	movs	r0, #2
    c54a:	4b32      	ldr	r3, [pc, #200]	; (c614 <processTask+0x700>)
    c54c:	4798      	blx	r3
		printf("Invalid choice entered\r\n");
    c54e:	4832      	ldr	r0, [pc, #200]	; (c618 <processTask+0x704>)
    c550:	4b0f      	ldr	r3, [pc, #60]	; (c590 <processTask+0x67c>)
    c552:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    c554:	2203      	movs	r2, #3
    c556:	4b0b      	ldr	r3, [pc, #44]	; (c584 <processTask+0x670>)
    c558:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    c55a:	2000      	movs	r0, #0
    c55c:	4b0a      	ldr	r3, [pc, #40]	; (c588 <processTask+0x674>)
    c55e:	4798      	blx	r3
    c560:	e4ee      	b.n	bf40 <processTask+0x2c>
    c562:	46c0      	nop			; (mov r8, r8)
    c564:	0000b469 	.word	0x0000b469
    c568:	00010421 	.word	0x00010421
    c56c:	00000e7d 	.word	0x00000e7d
    c570:	00003a79 	.word	0x00003a79
    c574:	00003ea5 	.word	0x00003ea5
    c578:	00004201 	.word	0x00004201
    c57c:	00003e81 	.word	0x00003e81
    c580:	0000392d 	.word	0x0000392d
    c584:	20001039 	.word	0x20001039
    c588:	0000b1c1 	.word	0x0000b1c1
    c58c:	0001d808 	.word	0x0001d808
    c590:	00015aa5 	.word	0x00015aa5
    c594:	0000d14d 	.word	0x0000d14d
    c598:	0001d818 	.word	0x0001d818
    c59c:	000159e1 	.word	0x000159e1
    c5a0:	0000d211 	.word	0x0000d211
    c5a4:	0001d82c 	.word	0x0001d82c
    c5a8:	00010d99 	.word	0x00010d99
    c5ac:	0001d83c 	.word	0x0001d83c
    c5b0:	33be27a0 	.word	0x33be27a0
    c5b4:	0001d864 	.word	0x0001d864
    c5b8:	000061a8 	.word	0x000061a8
    c5bc:	0001d888 	.word	0x0001d888
    c5c0:	0001d8b8 	.word	0x0001d8b8
    c5c4:	0001d8d4 	.word	0x0001d8d4
    c5c8:	0001d8f8 	.word	0x0001d8f8
    c5cc:	0001d918 	.word	0x0001d918
    c5d0:	0001d93c 	.word	0x0001d93c
    c5d4:	0001d95c 	.word	0x0001d95c
    c5d8:	0001d978 	.word	0x0001d978
    c5dc:	0001d99c 	.word	0x0001d99c
    c5e0:	0000ea60 	.word	0x0000ea60
    c5e4:	0001d9b8 	.word	0x0001d9b8
    c5e8:	20001041 	.word	0x20001041
    c5ec:	20001b8c 	.word	0x20001b8c
    c5f0:	0001d9e4 	.word	0x0001d9e4
    c5f4:	0000b6a9 	.word	0x0000b6a9
    c5f8:	000116e9 	.word	0x000116e9
    c5fc:	0001da14 	.word	0x0001da14
    c600:	0001d9fc 	.word	0x0001d9fc
    c604:	000120c9 	.word	0x000120c9
    c608:	0001da20 	.word	0x0001da20
    c60c:	0001da38 	.word	0x0001da38
    c610:	200000cc 	.word	0x200000cc
    c614:	0000982d 	.word	0x0000982d
    c618:	0001da54 	.word	0x0001da54

0000c61c <appWakeup>:
    }
}

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
    c61c:	b510      	push	{r4, lr}
    c61e:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    c620:	4b04      	ldr	r3, [pc, #16]	; (c634 <appWakeup+0x18>)
    c622:	4798      	blx	r3
    sio2host_init();
    c624:	4b04      	ldr	r3, [pc, #16]	; (c638 <appWakeup+0x1c>)
    c626:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    c628:	0021      	movs	r1, r4
    c62a:	4804      	ldr	r0, [pc, #16]	; (c63c <appWakeup+0x20>)
    c62c:	4b04      	ldr	r3, [pc, #16]	; (c640 <appWakeup+0x24>)
    c62e:	4798      	blx	r3

}
    c630:	bd10      	pop	{r4, pc}
    c632:	46c0      	nop			; (mov r8, r8)
    c634:	00003e81 	.word	0x00003e81
    c638:	0000392d 	.word	0x0000392d
    c63c:	0001d0c4 	.word	0x0001d0c4
    c640:	000159e1 	.word	0x000159e1

0000c644 <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
    c644:	b5f0      	push	{r4, r5, r6, r7, lr}
    c646:	b085      	sub	sp, #20
    /* System Initialization */
    system_init();
    c648:	4b40      	ldr	r3, [pc, #256]	; (c74c <main+0x108>)
    c64a:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    c64c:	4b40      	ldr	r3, [pc, #256]	; (c750 <main+0x10c>)
    c64e:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    c650:	4b40      	ldr	r3, [pc, #256]	; (c754 <main+0x110>)
    c652:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    c654:	2201      	movs	r2, #1
    c656:	4b40      	ldr	r3, [pc, #256]	; (c758 <main+0x114>)
    c658:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    c65a:	f3bf 8f5f 	dmb	sy
    c65e:	b662      	cpsie	i

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    c660:	4b3e      	ldr	r3, [pc, #248]	; (c75c <main+0x118>)
    c662:	4798      	blx	r3
    /* Initialize the AES Hardware Engine */
    AESInit();
    c664:	4b3e      	ldr	r3, [pc, #248]	; (c760 <main+0x11c>)
    c666:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    c668:	4b3e      	ldr	r3, [pc, #248]	; (c764 <main+0x120>)
    c66a:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    c66c:	4b3e      	ldr	r3, [pc, #248]	; (c768 <main+0x124>)
    c66e:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
    c670:	4b3e      	ldr	r3, [pc, #248]	; (c76c <main+0x128>)
    c672:	4798      	blx	r3
    sio2host_init();
    c674:	4b3e      	ldr	r3, [pc, #248]	; (c770 <main+0x12c>)
    c676:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    c678:	4b3e      	ldr	r3, [pc, #248]	; (c774 <main+0x130>)
    c67a:	781c      	ldrb	r4, [r3, #0]
    c67c:	b2e4      	uxtb	r4, r4
    printf("Last reset cause: ");
    c67e:	483e      	ldr	r0, [pc, #248]	; (c778 <main+0x134>)
    c680:	4b3e      	ldr	r3, [pc, #248]	; (c77c <main+0x138>)
    c682:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    c684:	0663      	lsls	r3, r4, #25
    c686:	d449      	bmi.n	c71c <main+0xd8>
    if(rcause & (1 << 5)) {
    c688:	06a3      	lsls	r3, r4, #26
    c68a:	d44b      	bmi.n	c724 <main+0xe0>
    if(rcause & (1 << 4)) {
    c68c:	06e3      	lsls	r3, r4, #27
    c68e:	d44d      	bmi.n	c72c <main+0xe8>
    if(rcause & (1 << 2)) {
    c690:	0763      	lsls	r3, r4, #29
    c692:	d44f      	bmi.n	c734 <main+0xf0>
    if(rcause & (1 << 1)) {
    c694:	07a3      	lsls	r3, r4, #30
    c696:	d451      	bmi.n	c73c <main+0xf8>
    if(rcause & (1 << 0)) {
    c698:	07e3      	lsls	r3, r4, #31
    c69a:	d453      	bmi.n	c744 <main+0x100>
    Stack_Init();
    c69c:	4b38      	ldr	r3, [pc, #224]	; (c780 <main+0x13c>)
    c69e:	4798      	blx	r3
    SwTimerCreate(&demoTimerId);
    c6a0:	4838      	ldr	r0, [pc, #224]	; (c784 <main+0x140>)
    c6a2:	4c39      	ldr	r4, [pc, #228]	; (c788 <main+0x144>)
    c6a4:	47a0      	blx	r4
    SwTimerCreate(&lTimerId);
    c6a6:	4839      	ldr	r0, [pc, #228]	; (c78c <main+0x148>)
    c6a8:	47a0      	blx	r4
    mote_demo_init();
    c6aa:	4b39      	ldr	r3, [pc, #228]	; (c790 <main+0x14c>)
    c6ac:	4798      	blx	r3
		serial_data_handler();
    c6ae:	4e39      	ldr	r6, [pc, #228]	; (c794 <main+0x150>)
        SYSTEM_RunTasks();
    c6b0:	4d39      	ldr	r5, [pc, #228]	; (c798 <main+0x154>)
        if (false == certAppEnabled)
    c6b2:	4c3a      	ldr	r4, [pc, #232]	; (c79c <main+0x158>)
		serial_data_handler();
    c6b4:	47b0      	blx	r6
        SYSTEM_RunTasks();
    c6b6:	47a8      	blx	r5
        if (false == certAppEnabled)
    c6b8:	7823      	ldrb	r3, [r4, #0]
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	d1fa      	bne.n	c6b4 <main+0x70>
            if(bandSelected == true)
    c6be:	4b38      	ldr	r3, [pc, #224]	; (c7a0 <main+0x15c>)
    c6c0:	781b      	ldrb	r3, [r3, #0]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d0f6      	beq.n	c6b4 <main+0x70>
                sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    c6c6:	ab01      	add	r3, sp, #4
    c6c8:	22fa      	movs	r2, #250	; 0xfa
    c6ca:	0092      	lsls	r2, r2, #2
    c6cc:	9201      	str	r2, [sp, #4]
                sleepReq.pmmWakeupCallback = appWakeup;
    c6ce:	4a35      	ldr	r2, [pc, #212]	; (c7a4 <main+0x160>)
    c6d0:	9203      	str	r2, [sp, #12]
                sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    c6d2:	2201      	movs	r2, #1
    c6d4:	711a      	strb	r2, [r3, #4]
                    deviceResetsForWakeup = false;
    c6d6:	2200      	movs	r2, #0
    c6d8:	4b33      	ldr	r3, [pc, #204]	; (c7a8 <main+0x164>)
    c6da:	701a      	strb	r2, [r3, #0]
                if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    c6dc:	2000      	movs	r0, #0
    c6de:	4b33      	ldr	r3, [pc, #204]	; (c7ac <main+0x168>)
    c6e0:	4798      	blx	r3
    c6e2:	2800      	cmp	r0, #0
    c6e4:	d0e6      	beq.n	c6b4 <main+0x70>
	config->direction  = PORT_PIN_DIR_INPUT;
    c6e6:	2300      	movs	r3, #0
    c6e8:	466a      	mov	r2, sp
    c6ea:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c6ec:	3301      	adds	r3, #1
    c6ee:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
    /* Disable USART TX and RX Pins */
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
    pin_conf.powersave  = true;
    c6f0:	7093      	strb	r3, [r2, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    c6f2:	4669      	mov	r1, sp
    c6f4:	2004      	movs	r0, #4
    c6f6:	4f2e      	ldr	r7, [pc, #184]	; (c7b0 <main+0x16c>)
    c6f8:	47b8      	blx	r7
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    c6fa:	4669      	mov	r1, sp
    c6fc:	2005      	movs	r0, #5
    c6fe:	47b8      	blx	r7
    /* Disable UART module */
    sio2host_deinit();
    c700:	4b2c      	ldr	r3, [pc, #176]	; (c7b4 <main+0x170>)
    c702:	4798      	blx	r3
    /* Disable Transceiver SPI Module */
    HAL_RadioDeInit();
    c704:	4b2c      	ldr	r3, [pc, #176]	; (c7b8 <main+0x174>)
    c706:	4798      	blx	r3
                    if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    c708:	a801      	add	r0, sp, #4
    c70a:	4b2c      	ldr	r3, [pc, #176]	; (c7bc <main+0x178>)
    c70c:	4798      	blx	r3
    c70e:	2800      	cmp	r0, #0
    c710:	d1d0      	bne.n	c6b4 <main+0x70>
                        HAL_Radio_resources_init();
    c712:	4b2b      	ldr	r3, [pc, #172]	; (c7c0 <main+0x17c>)
    c714:	4798      	blx	r3
                        sio2host_init();
    c716:	4b16      	ldr	r3, [pc, #88]	; (c770 <main+0x12c>)
    c718:	4798      	blx	r3
    c71a:	e7cb      	b.n	c6b4 <main+0x70>
        printf("System Reset Request\r\n");
    c71c:	4829      	ldr	r0, [pc, #164]	; (c7c4 <main+0x180>)
    c71e:	4b2a      	ldr	r3, [pc, #168]	; (c7c8 <main+0x184>)
    c720:	4798      	blx	r3
    c722:	e7b1      	b.n	c688 <main+0x44>
        printf("Watchdog Reset\r\n");
    c724:	4829      	ldr	r0, [pc, #164]	; (c7cc <main+0x188>)
    c726:	4b28      	ldr	r3, [pc, #160]	; (c7c8 <main+0x184>)
    c728:	4798      	blx	r3
    c72a:	e7af      	b.n	c68c <main+0x48>
        printf("External Reset\r\n");
    c72c:	4828      	ldr	r0, [pc, #160]	; (c7d0 <main+0x18c>)
    c72e:	4b26      	ldr	r3, [pc, #152]	; (c7c8 <main+0x184>)
    c730:	4798      	blx	r3
    c732:	e7ad      	b.n	c690 <main+0x4c>
        printf("Brown Out 33 Detector Reset\r\n");
    c734:	4827      	ldr	r0, [pc, #156]	; (c7d4 <main+0x190>)
    c736:	4b24      	ldr	r3, [pc, #144]	; (c7c8 <main+0x184>)
    c738:	4798      	blx	r3
    c73a:	e7ab      	b.n	c694 <main+0x50>
        printf("Brown Out 12 Detector Reset\r\n");
    c73c:	4826      	ldr	r0, [pc, #152]	; (c7d8 <main+0x194>)
    c73e:	4b22      	ldr	r3, [pc, #136]	; (c7c8 <main+0x184>)
    c740:	4798      	blx	r3
    c742:	e7a9      	b.n	c698 <main+0x54>
        printf("Power-On Reset\r\n");
    c744:	4825      	ldr	r0, [pc, #148]	; (c7dc <main+0x198>)
    c746:	4b20      	ldr	r3, [pc, #128]	; (c7c8 <main+0x184>)
    c748:	4798      	blx	r3
    c74a:	e7a7      	b.n	c69c <main+0x58>
    c74c:	00003215 	.word	0x00003215
    c750:	00000115 	.word	0x00000115
    c754:	0000021d 	.word	0x0000021d
    c758:	20000008 	.word	0x20000008
    c75c:	00003cc9 	.word	0x00003cc9
    c760:	00008d1d 	.word	0x00008d1d
    c764:	00009e51 	.word	0x00009e51
    c768:	0000409d 	.word	0x0000409d
    c76c:	00008e9d 	.word	0x00008e9d
    c770:	0000392d 	.word	0x0000392d
    c774:	40000800 	.word	0x40000800
    c778:	0001dbfc 	.word	0x0001dbfc
    c77c:	000159e1 	.word	0x000159e1
    c780:	0000a495 	.word	0x0000a495
    c784:	200000cf 	.word	0x200000cf
    c788:	00009eb9 	.word	0x00009eb9
    c78c:	200000d0 	.word	0x200000d0
    c790:	0000b4f9 	.word	0x0000b4f9
    c794:	0000b4a5 	.word	0x0000b4a5
    c798:	0000a4a5 	.word	0x0000a4a5
    c79c:	20001040 	.word	0x20001040
    c7a0:	20001085 	.word	0x20001085
    c7a4:	0000c61d 	.word	0x0000c61d
    c7a8:	20001086 	.word	0x20001086
    c7ac:	00010421 	.word	0x00010421
    c7b0:	00000e7d 	.word	0x00000e7d
    c7b4:	00003a79 	.word	0x00003a79
    c7b8:	00003ea5 	.word	0x00003ea5
    c7bc:	00004201 	.word	0x00004201
    c7c0:	00003e81 	.word	0x00003e81
    c7c4:	0001dc10 	.word	0x0001dc10
    c7c8:	00015aa5 	.word	0x00015aa5
    c7cc:	0001dc28 	.word	0x0001dc28
    c7d0:	0001dc38 	.word	0x0001dc38
    c7d4:	0001dc48 	.word	0x0001dc48
    c7d8:	0001dc68 	.word	0x0001dc68
    c7dc:	0001dc88 	.word	0x0001dc88

0000c7e0 <common_tc_read_count>:
    c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7e2:	4b0d      	ldr	r3, [pc, #52]	; (c818 <common_tc_read_count+0x38>)
    c7e4:	4798      	blx	r3
    c7e6:	4b0d      	ldr	r3, [pc, #52]	; (c81c <common_tc_read_count+0x3c>)
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d00e      	beq.n	c80c <common_tc_read_count+0x2c>
    c7ee:	4b0c      	ldr	r3, [pc, #48]	; (c820 <common_tc_read_count+0x40>)
    c7f0:	781d      	ldrb	r5, [r3, #0]
    c7f2:	4b0a      	ldr	r3, [pc, #40]	; (c81c <common_tc_read_count+0x3c>)
    c7f4:	781f      	ldrb	r7, [r3, #0]
    c7f6:	4c0b      	ldr	r4, [pc, #44]	; (c824 <common_tc_read_count+0x44>)
    c7f8:	1c29      	adds	r1, r5, #0
    c7fa:	47a0      	blx	r4
    c7fc:	1c06      	adds	r6, r0, #0
    c7fe:	480a      	ldr	r0, [pc, #40]	; (c828 <common_tc_read_count+0x48>)
    c800:	1c29      	adds	r1, r5, #0
    c802:	47a0      	blx	r4
    c804:	4378      	muls	r0, r7
    c806:	1830      	adds	r0, r6, r0
    c808:	b280      	uxth	r0, r0
    c80a:	e004      	b.n	c816 <common_tc_read_count+0x36>
    c80c:	4b04      	ldr	r3, [pc, #16]	; (c820 <common_tc_read_count+0x40>)
    c80e:	7819      	ldrb	r1, [r3, #0]
    c810:	4b04      	ldr	r3, [pc, #16]	; (c824 <common_tc_read_count+0x44>)
    c812:	4798      	blx	r3
    c814:	b280      	uxth	r0, r0
    c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c818:	0000a77d 	.word	0x0000a77d
    c81c:	20001088 	.word	0x20001088
    c820:	20001bbe 	.word	0x20001bbe
    c824:	00012821 	.word	0x00012821
    c828:	0000ffff 	.word	0x0000ffff

0000c82c <common_tc_compare_stop>:
    c82c:	b508      	push	{r3, lr}
    c82e:	4b05      	ldr	r3, [pc, #20]	; (c844 <common_tc_compare_stop+0x18>)
    c830:	4798      	blx	r3
    c832:	4b05      	ldr	r3, [pc, #20]	; (c848 <common_tc_compare_stop+0x1c>)
    c834:	4798      	blx	r3
    c836:	4b05      	ldr	r3, [pc, #20]	; (c84c <common_tc_compare_stop+0x20>)
    c838:	2200      	movs	r2, #0
    c83a:	605a      	str	r2, [r3, #4]
    c83c:	811a      	strh	r2, [r3, #8]
    c83e:	4b04      	ldr	r3, [pc, #16]	; (c850 <common_tc_compare_stop+0x24>)
    c840:	4798      	blx	r3
    c842:	bd08      	pop	{r3, pc}
    c844:	0000a791 	.word	0x0000a791
    c848:	0000a82d 	.word	0x0000a82d
    c84c:	20001088 	.word	0x20001088
    c850:	0000a851 	.word	0x0000a851

0000c854 <common_tc_overflow_stop>:
    c854:	b508      	push	{r3, lr}
    c856:	4b03      	ldr	r3, [pc, #12]	; (c864 <common_tc_overflow_stop+0x10>)
    c858:	4798      	blx	r3
    c85a:	2200      	movs	r2, #0
    c85c:	4b02      	ldr	r3, [pc, #8]	; (c868 <common_tc_overflow_stop+0x14>)
    c85e:	701a      	strb	r2, [r3, #0]
    c860:	bd08      	pop	{r3, pc}
    c862:	46c0      	nop			; (mov r8, r8)
    c864:	0000a7e1 	.word	0x0000a7e1
    c868:	20001088 	.word	0x20001088

0000c86c <common_tc_stop>:
    c86c:	b508      	push	{r3, lr}
    c86e:	4b03      	ldr	r3, [pc, #12]	; (c87c <common_tc_stop+0x10>)
    c870:	4798      	blx	r3
    c872:	4b03      	ldr	r3, [pc, #12]	; (c880 <common_tc_stop+0x14>)
    c874:	4798      	blx	r3
    c876:	4b03      	ldr	r3, [pc, #12]	; (c884 <common_tc_stop+0x18>)
    c878:	4798      	blx	r3
    c87a:	bd08      	pop	{r3, pc}
    c87c:	0000c82d 	.word	0x0000c82d
    c880:	0000c855 	.word	0x0000c855
    c884:	0000a7f5 	.word	0x0000a7f5

0000c888 <common_tc_delay>:
    c888:	b510      	push	{r4, lr}
    c88a:	1c04      	adds	r4, r0, #0
    c88c:	4b13      	ldr	r3, [pc, #76]	; (c8dc <common_tc_delay+0x54>)
    c88e:	4798      	blx	r3
    c890:	4b13      	ldr	r3, [pc, #76]	; (c8e0 <common_tc_delay+0x58>)
    c892:	781a      	ldrb	r2, [r3, #0]
    c894:	4362      	muls	r2, r4
    c896:	1881      	adds	r1, r0, r2
    c898:	4b12      	ldr	r3, [pc, #72]	; (c8e4 <common_tc_delay+0x5c>)
    c89a:	6059      	str	r1, [r3, #4]
    c89c:	6859      	ldr	r1, [r3, #4]
    c89e:	0c09      	lsrs	r1, r1, #16
    c8a0:	6059      	str	r1, [r3, #4]
    c8a2:	685b      	ldr	r3, [r3, #4]
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d007      	beq.n	c8b8 <common_tc_delay+0x30>
    c8a8:	4b0e      	ldr	r3, [pc, #56]	; (c8e4 <common_tc_delay+0x5c>)
    c8aa:	6859      	ldr	r1, [r3, #4]
    c8ac:	3201      	adds	r2, #1
    c8ae:	1880      	adds	r0, r0, r2
    c8b0:	8118      	strh	r0, [r3, #8]
    c8b2:	4b0d      	ldr	r3, [pc, #52]	; (c8e8 <common_tc_delay+0x60>)
    c8b4:	4798      	blx	r3
    c8b6:	e004      	b.n	c8c2 <common_tc_delay+0x3a>
    c8b8:	1882      	adds	r2, r0, r2
    c8ba:	4b0a      	ldr	r3, [pc, #40]	; (c8e4 <common_tc_delay+0x5c>)
    c8bc:	811a      	strh	r2, [r3, #8]
    c8be:	4b0b      	ldr	r3, [pc, #44]	; (c8ec <common_tc_delay+0x64>)
    c8c0:	4798      	blx	r3
    c8c2:	4b08      	ldr	r3, [pc, #32]	; (c8e4 <common_tc_delay+0x5c>)
    c8c4:	891b      	ldrh	r3, [r3, #8]
    c8c6:	2b63      	cmp	r3, #99	; 0x63
    c8c8:	d802      	bhi.n	c8d0 <common_tc_delay+0x48>
    c8ca:	3364      	adds	r3, #100	; 0x64
    c8cc:	4a05      	ldr	r2, [pc, #20]	; (c8e4 <common_tc_delay+0x5c>)
    c8ce:	8113      	strh	r3, [r2, #8]
    c8d0:	4b04      	ldr	r3, [pc, #16]	; (c8e4 <common_tc_delay+0x5c>)
    c8d2:	8918      	ldrh	r0, [r3, #8]
    c8d4:	4b06      	ldr	r3, [pc, #24]	; (c8f0 <common_tc_delay+0x68>)
    c8d6:	4798      	blx	r3
    c8d8:	bd10      	pop	{r4, pc}
    c8da:	46c0      	nop			; (mov r8, r8)
    c8dc:	0000a77d 	.word	0x0000a77d
    c8e0:	20001bbe 	.word	0x20001bbe
    c8e4:	20001088 	.word	0x20001088
    c8e8:	0000a791 	.word	0x0000a791
    c8ec:	0000a7a5 	.word	0x0000a7a5
    c8f0:	0000a815 	.word	0x0000a815

0000c8f4 <common_tc_init>:
    c8f4:	b508      	push	{r3, lr}
    c8f6:	2200      	movs	r2, #0
    c8f8:	4b03      	ldr	r3, [pc, #12]	; (c908 <common_tc_init+0x14>)
    c8fa:	701a      	strb	r2, [r3, #0]
    c8fc:	4b03      	ldr	r3, [pc, #12]	; (c90c <common_tc_init+0x18>)
    c8fe:	4798      	blx	r3
    c900:	4b03      	ldr	r3, [pc, #12]	; (c910 <common_tc_init+0x1c>)
    c902:	7018      	strb	r0, [r3, #0]
    c904:	bd08      	pop	{r3, pc}
    c906:	46c0      	nop			; (mov r8, r8)
    c908:	20001088 	.word	0x20001088
    c90c:	0000a869 	.word	0x0000a869
    c910:	20001bbe 	.word	0x20001bbe

0000c914 <tmr_ovf_callback>:
    c914:	b508      	push	{r3, lr}
    c916:	4b0e      	ldr	r3, [pc, #56]	; (c950 <tmr_ovf_callback+0x3c>)
    c918:	685b      	ldr	r3, [r3, #4]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d007      	beq.n	c92e <tmr_ovf_callback+0x1a>
    c91e:	4a0c      	ldr	r2, [pc, #48]	; (c950 <tmr_ovf_callback+0x3c>)
    c920:	6853      	ldr	r3, [r2, #4]
    c922:	3b01      	subs	r3, #1
    c924:	6053      	str	r3, [r2, #4]
    c926:	2b00      	cmp	r3, #0
    c928:	d101      	bne.n	c92e <tmr_ovf_callback+0x1a>
    c92a:	4b0a      	ldr	r3, [pc, #40]	; (c954 <tmr_ovf_callback+0x40>)
    c92c:	4798      	blx	r3
    c92e:	4a08      	ldr	r2, [pc, #32]	; (c950 <tmr_ovf_callback+0x3c>)
    c930:	7813      	ldrb	r3, [r2, #0]
    c932:	3301      	adds	r3, #1
    c934:	b2db      	uxtb	r3, r3
    c936:	7013      	strb	r3, [r2, #0]
    c938:	4a07      	ldr	r2, [pc, #28]	; (c958 <tmr_ovf_callback+0x44>)
    c93a:	7812      	ldrb	r2, [r2, #0]
    c93c:	429a      	cmp	r2, r3
    c93e:	d806      	bhi.n	c94e <tmr_ovf_callback+0x3a>
    c940:	4b03      	ldr	r3, [pc, #12]	; (c950 <tmr_ovf_callback+0x3c>)
    c942:	2200      	movs	r2, #0
    c944:	701a      	strb	r2, [r3, #0]
    c946:	68db      	ldr	r3, [r3, #12]
    c948:	2b00      	cmp	r3, #0
    c94a:	d000      	beq.n	c94e <tmr_ovf_callback+0x3a>
    c94c:	4798      	blx	r3
    c94e:	bd08      	pop	{r3, pc}
    c950:	20001088 	.word	0x20001088
    c954:	0000a7a5 	.word	0x0000a7a5
    c958:	20001bbe 	.word	0x20001bbe

0000c95c <tmr_cca_callback>:
    c95c:	b508      	push	{r3, lr}
    c95e:	4b04      	ldr	r3, [pc, #16]	; (c970 <tmr_cca_callback+0x14>)
    c960:	4798      	blx	r3
    c962:	4b04      	ldr	r3, [pc, #16]	; (c974 <tmr_cca_callback+0x18>)
    c964:	691b      	ldr	r3, [r3, #16]
    c966:	2b00      	cmp	r3, #0
    c968:	d000      	beq.n	c96c <tmr_cca_callback+0x10>
    c96a:	4798      	blx	r3
    c96c:	bd08      	pop	{r3, pc}
    c96e:	46c0      	nop			; (mov r8, r8)
    c970:	0000a791 	.word	0x0000a791
    c974:	20001088 	.word	0x20001088

0000c978 <set_common_tc_overflow_callback>:
    c978:	4b01      	ldr	r3, [pc, #4]	; (c980 <set_common_tc_overflow_callback+0x8>)
    c97a:	60d8      	str	r0, [r3, #12]
    c97c:	4770      	bx	lr
    c97e:	46c0      	nop			; (mov r8, r8)
    c980:	20001088 	.word	0x20001088

0000c984 <set_common_tc_expiry_callback>:
    c984:	4b01      	ldr	r3, [pc, #4]	; (c98c <set_common_tc_expiry_callback+0x8>)
    c986:	6118      	str	r0, [r3, #16]
    c988:	4770      	bx	lr
    c98a:	46c0      	nop			; (mov r8, r8)
    c98c:	20001088 	.word	0x20001088

0000c990 <MacClearCommands>:
    c990:	490e      	ldr	r1, [pc, #56]	; (c9cc <MacClearCommands+0x3c>)
    c992:	b570      	push	{r4, r5, r6, lr}
    c994:	000b      	movs	r3, r1
    c996:	33ac      	adds	r3, #172	; 0xac
    c998:	7818      	ldrb	r0, [r3, #0]
    c99a:	2303      	movs	r3, #3
    c99c:	25a4      	movs	r5, #164	; 0xa4
    c99e:	4343      	muls	r3, r0
    c9a0:	2401      	movs	r4, #1
    c9a2:	20ff      	movs	r0, #255	; 0xff
    c9a4:	3366      	adds	r3, #102	; 0x66
    c9a6:	4a0a      	ldr	r2, [pc, #40]	; (c9d0 <MacClearCommands+0x40>)
    c9a8:	185b      	adds	r3, r3, r1
    c9aa:	00ed      	lsls	r5, r5, #3
    c9ac:	429a      	cmp	r2, r3
    c9ae:	d100      	bne.n	c9b2 <MacClearCommands+0x22>
    c9b0:	bd70      	pop	{r4, r5, r6, pc}
    c9b2:	7811      	ldrb	r1, [r2, #0]
    c9b4:	29ff      	cmp	r1, #255	; 0xff
    c9b6:	d006      	beq.n	c9c6 <MacClearCommands+0x36>
    c9b8:	290a      	cmp	r1, #10
    c9ba:	d803      	bhi.n	c9c4 <MacClearCommands+0x34>
    c9bc:	0026      	movs	r6, r4
    c9be:	408e      	lsls	r6, r1
    c9c0:	422e      	tst	r6, r5
    c9c2:	d100      	bne.n	c9c6 <MacClearCommands+0x36>
    c9c4:	7010      	strb	r0, [r2, #0]
    c9c6:	3203      	adds	r2, #3
    c9c8:	e7f0      	b.n	c9ac <MacClearCommands+0x1c>
    c9ca:	46c0      	nop			; (mov r8, r8)
    c9cc:	20001ce4 	.word	0x20001ce4
    c9d0:	20001d4a 	.word	0x20001d4a

0000c9d4 <CountfOptsLength>:
    c9d4:	2200      	movs	r2, #0
    c9d6:	490d      	ldr	r1, [pc, #52]	; (ca0c <CountfOptsLength+0x38>)
    c9d8:	b570      	push	{r4, r5, r6, lr}
    c9da:	000b      	movs	r3, r1
    c9dc:	0010      	movs	r0, r2
    c9de:	2503      	movs	r5, #3
    c9e0:	33ac      	adds	r3, #172	; 0xac
    c9e2:	781c      	ldrb	r4, [r3, #0]
    c9e4:	4e0a      	ldr	r6, [pc, #40]	; (ca10 <CountfOptsLength+0x3c>)
    c9e6:	b2d3      	uxtb	r3, r2
    c9e8:	429c      	cmp	r4, r3
    c9ea:	d800      	bhi.n	c9ee <CountfOptsLength+0x1a>
    c9ec:	bd70      	pop	{r4, r5, r6, pc}
    c9ee:	002b      	movs	r3, r5
    c9f0:	4353      	muls	r3, r2
    c9f2:	3366      	adds	r3, #102	; 0x66
    c9f4:	5ccb      	ldrb	r3, [r1, r3]
    c9f6:	2bff      	cmp	r3, #255	; 0xff
    c9f8:	d006      	beq.n	ca08 <CountfOptsLength+0x34>
    c9fa:	18f3      	adds	r3, r6, r3
    c9fc:	3b02      	subs	r3, #2
    c9fe:	781b      	ldrb	r3, [r3, #0]
    ca00:	18c3      	adds	r3, r0, r3
    ca02:	2b0f      	cmp	r3, #15
    ca04:	dcf2      	bgt.n	c9ec <CountfOptsLength+0x18>
    ca06:	b2d8      	uxtb	r0, r3
    ca08:	3201      	adds	r2, #1
    ca0a:	e7ec      	b.n	c9e6 <CountfOptsLength+0x12>
    ca0c:	20001ce4 	.word	0x20001ce4
    ca10:	0001dc9b 	.word	0x0001dc9b

0000ca14 <StopAllSoftwareTimers>:
    ca14:	b570      	push	{r4, r5, r6, lr}
    ca16:	4c17      	ldr	r4, [pc, #92]	; (ca74 <StopAllSoftwareTimers+0x60>)
    ca18:	4d17      	ldr	r5, [pc, #92]	; (ca78 <StopAllSoftwareTimers+0x64>)
    ca1a:	0023      	movs	r3, r4
    ca1c:	33b6      	adds	r3, #182	; 0xb6
    ca1e:	7818      	ldrb	r0, [r3, #0]
    ca20:	47a8      	blx	r5
    ca22:	0023      	movs	r3, r4
    ca24:	33b7      	adds	r3, #183	; 0xb7
    ca26:	7818      	ldrb	r0, [r3, #0]
    ca28:	47a8      	blx	r5
    ca2a:	0023      	movs	r3, r4
    ca2c:	33bb      	adds	r3, #187	; 0xbb
    ca2e:	7818      	ldrb	r0, [r3, #0]
    ca30:	47a8      	blx	r5
    ca32:	0023      	movs	r3, r4
    ca34:	33b8      	adds	r3, #184	; 0xb8
    ca36:	7818      	ldrb	r0, [r3, #0]
    ca38:	47a8      	blx	r5
    ca3a:	0023      	movs	r3, r4
    ca3c:	33b9      	adds	r3, #185	; 0xb9
    ca3e:	7818      	ldrb	r0, [r3, #0]
    ca40:	47a8      	blx	r5
    ca42:	0023      	movs	r3, r4
    ca44:	33bc      	adds	r3, #188	; 0xbc
    ca46:	7818      	ldrb	r0, [r3, #0]
    ca48:	47a8      	blx	r5
    ca4a:	0023      	movs	r3, r4
    ca4c:	33ba      	adds	r3, #186	; 0xba
    ca4e:	7818      	ldrb	r0, [r3, #0]
    ca50:	47a8      	blx	r5
    ca52:	0023      	movs	r3, r4
    ca54:	33bd      	adds	r3, #189	; 0xbd
    ca56:	7818      	ldrb	r0, [r3, #0]
    ca58:	47a8      	blx	r5
    ca5a:	0023      	movs	r3, r4
    ca5c:	33c6      	adds	r3, #198	; 0xc6
    ca5e:	7818      	ldrb	r0, [r3, #0]
    ca60:	47a8      	blx	r5
    ca62:	0023      	movs	r3, r4
    ca64:	33c7      	adds	r3, #199	; 0xc7
    ca66:	7818      	ldrb	r0, [r3, #0]
    ca68:	34f0      	adds	r4, #240	; 0xf0
    ca6a:	47a8      	blx	r5
    ca6c:	7820      	ldrb	r0, [r4, #0]
    ca6e:	47a8      	blx	r5
    ca70:	bd70      	pop	{r4, r5, r6, pc}
    ca72:	46c0      	nop			; (mov r8, r8)
    ca74:	20001ce4 	.word	0x20001ce4
    ca78:	0000a1f1 	.word	0x0000a1f1

0000ca7c <LorawanGetMaxPayloadSize>:
    ca7c:	b513      	push	{r0, r1, r4, lr}
    ca7e:	466b      	mov	r3, sp
    ca80:	1ddc      	adds	r4, r3, #7
    ca82:	2300      	movs	r3, #0
    ca84:	0022      	movs	r2, r4
    ca86:	7023      	strb	r3, [r4, #0]
    ca88:	4902      	ldr	r1, [pc, #8]	; (ca94 <LorawanGetMaxPayloadSize+0x18>)
    ca8a:	4b03      	ldr	r3, [pc, #12]	; (ca98 <LorawanGetMaxPayloadSize+0x1c>)
    ca8c:	2005      	movs	r0, #5
    ca8e:	4798      	blx	r3
    ca90:	7820      	ldrb	r0, [r4, #0]
    ca92:	bd16      	pop	{r1, r2, r4, pc}
    ca94:	20001d97 	.word	0x20001d97
    ca98:	00008a85 	.word	0x00008a85

0000ca9c <UpdateReceiveDelays>:
    ca9c:	23fa      	movs	r3, #250	; 0xfa
    ca9e:	b570      	push	{r4, r5, r6, lr}
    caa0:	009b      	lsls	r3, r3, #2
    caa2:	4c0b      	ldr	r4, [pc, #44]	; (cad0 <UpdateReceiveDelays+0x34>)
    caa4:	2800      	cmp	r0, #0
    caa6:	d000      	beq.n	caaa <UpdateReceiveDelays+0xe>
    caa8:	4343      	muls	r3, r0
    caaa:	0022      	movs	r2, r4
    caac:	4d09      	ldr	r5, [pc, #36]	; (cad4 <UpdateReceiveDelays+0x38>)
    caae:	329c      	adds	r2, #156	; 0x9c
    cab0:	210c      	movs	r1, #12
    cab2:	2000      	movs	r0, #0
    cab4:	8013      	strh	r3, [r2, #0]
    cab6:	47a8      	blx	r5
    cab8:	0023      	movs	r3, r4
    caba:	22fa      	movs	r2, #250	; 0xfa
    cabc:	339c      	adds	r3, #156	; 0x9c
    cabe:	881b      	ldrh	r3, [r3, #0]
    cac0:	0092      	lsls	r2, r2, #2
    cac2:	189b      	adds	r3, r3, r2
    cac4:	349e      	adds	r4, #158	; 0x9e
    cac6:	210d      	movs	r1, #13
    cac8:	2000      	movs	r0, #0
    caca:	8023      	strh	r3, [r4, #0]
    cacc:	47a8      	blx	r5
    cace:	bd70      	pop	{r4, r5, r6, pc}
    cad0:	20001ce4 	.word	0x20001ce4
    cad4:	00008ec5 	.word	0x00008ec5

0000cad8 <IncludeMacCommandsResponse>:
    cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cada:	0005      	movs	r5, r0
    cadc:	2600      	movs	r6, #0
    cade:	b087      	sub	sp, #28
    cae0:	880c      	ldrh	r4, [r1, #0]
    cae2:	9101      	str	r1, [sp, #4]
    cae4:	9203      	str	r2, [sp, #12]
    cae6:	4a67      	ldr	r2, [pc, #412]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cae8:	0013      	movs	r3, r2
    caea:	33ac      	adds	r3, #172	; 0xac
    caec:	781b      	ldrb	r3, [r3, #0]
    caee:	42b3      	cmp	r3, r6
    caf0:	d913      	bls.n	cb1a <IncludeMacCommandsResponse+0x42>
    caf2:	9b03      	ldr	r3, [sp, #12]
    caf4:	2b00      	cmp	r3, #0
    caf6:	d019      	beq.n	cb2c <IncludeMacCommandsResponse+0x54>
    caf8:	2303      	movs	r3, #3
    cafa:	4373      	muls	r3, r6
    cafc:	18d3      	adds	r3, r2, r3
    cafe:	3366      	adds	r3, #102	; 0x66
    cb00:	7818      	ldrb	r0, [r3, #0]
    cb02:	28ff      	cmp	r0, #255	; 0xff
    cb04:	d012      	beq.n	cb2c <IncludeMacCommandsResponse+0x54>
    cb06:	9b01      	ldr	r3, [sp, #4]
    cb08:	8819      	ldrh	r1, [r3, #0]
    cb0a:	4b5f      	ldr	r3, [pc, #380]	; (cc88 <IncludeMacCommandsResponse+0x1b0>)
    cb0c:	1a61      	subs	r1, r4, r1
    cb0e:	181b      	adds	r3, r3, r0
    cb10:	3b02      	subs	r3, #2
    cb12:	781b      	ldrb	r3, [r3, #0]
    cb14:	18cb      	adds	r3, r1, r3
    cb16:	2b0f      	cmp	r3, #15
    cb18:	dd08      	ble.n	cb2c <IncludeMacCommandsResponse+0x54>
    cb1a:	2207      	movs	r2, #7
    cb1c:	2100      	movs	r1, #0
    cb1e:	4b5b      	ldr	r3, [pc, #364]	; (cc8c <IncludeMacCommandsResponse+0x1b4>)
    cb20:	485b      	ldr	r0, [pc, #364]	; (cc90 <IncludeMacCommandsResponse+0x1b8>)
    cb22:	4798      	blx	r3
    cb24:	9b01      	ldr	r3, [sp, #4]
    cb26:	801c      	strh	r4, [r3, #0]
    cb28:	b007      	add	sp, #28
    cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb2c:	2303      	movs	r3, #3
    cb2e:	4373      	muls	r3, r6
    cb30:	18d3      	adds	r3, r2, r3
    cb32:	3366      	adds	r3, #102	; 0x66
    cb34:	7819      	ldrb	r1, [r3, #0]
    cb36:	1e88      	subs	r0, r1, #2
    cb38:	2808      	cmp	r0, #8
    cb3a:	d862      	bhi.n	cc02 <IncludeMacCommandsResponse+0x12a>
    cb3c:	1c63      	adds	r3, r4, #1
    cb3e:	f005 fdd1 	bl	126e4 <__gnu_thumb1_case_uqi>
    cb42:	0594      	.short	0x0594
    cb44:	6646269e 	.word	0x6646269e
    cb48:	7b9e      	.short	0x7b9e
    cb4a:	7f          	.byte	0x7f
    cb4b:	00          	.byte	0x00
    cb4c:	2203      	movs	r2, #3
    cb4e:	2024      	movs	r0, #36	; 0x24
    cb50:	552a      	strb	r2, [r5, r4]
    cb52:	2200      	movs	r2, #0
    cb54:	b29b      	uxth	r3, r3
    cb56:	18eb      	adds	r3, r5, r3
    cb58:	4f4a      	ldr	r7, [pc, #296]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cb5a:	701a      	strb	r2, [r3, #0]
    cb5c:	30ff      	adds	r0, #255	; 0xff
    cb5e:	5c39      	ldrb	r1, [r7, r0]
    cb60:	3201      	adds	r2, #1
    cb62:	4011      	ands	r1, r2
    cb64:	466a      	mov	r2, sp
    cb66:	9102      	str	r1, [sp, #8]
    cb68:	7a12      	ldrb	r2, [r2, #8]
    cb6a:	701a      	strb	r2, [r3, #0]
    cb6c:	5c3a      	ldrb	r2, [r7, r0]
    cb6e:	4694      	mov	ip, r2
    cb70:	2202      	movs	r2, #2
    cb72:	4661      	mov	r1, ip
    cb74:	4211      	tst	r1, r2
    cb76:	d002      	beq.n	cb7e <IncludeMacCommandsResponse+0xa6>
    cb78:	9902      	ldr	r1, [sp, #8]
    cb7a:	430a      	orrs	r2, r1
    cb7c:	701a      	strb	r2, [r3, #0]
    cb7e:	2204      	movs	r2, #4
    cb80:	5c39      	ldrb	r1, [r7, r0]
    cb82:	4211      	tst	r1, r2
    cb84:	d06e      	beq.n	cc64 <IncludeMacCommandsResponse+0x18c>
    cb86:	7819      	ldrb	r1, [r3, #0]
    cb88:	430a      	orrs	r2, r1
    cb8a:	701a      	strb	r2, [r3, #0]
    cb8c:	e06a      	b.n	cc64 <IncludeMacCommandsResponse+0x18c>
    cb8e:	2205      	movs	r2, #5
    cb90:	2103      	movs	r1, #3
    cb92:	552a      	strb	r2, [r5, r4]
    cb94:	2200      	movs	r2, #0
    cb96:	b29b      	uxth	r3, r3
    cb98:	4371      	muls	r1, r6
    cb9a:	18eb      	adds	r3, r5, r3
    cb9c:	701a      	strb	r2, [r3, #0]
    cb9e:	4a39      	ldr	r2, [pc, #228]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cba0:	1851      	adds	r1, r2, r1
    cba2:	3160      	adds	r1, #96	; 0x60
    cba4:	79c8      	ldrb	r0, [r1, #7]
    cba6:	0700      	lsls	r0, r0, #28
    cba8:	0fc0      	lsrs	r0, r0, #31
    cbaa:	7018      	strb	r0, [r3, #0]
    cbac:	79c9      	ldrb	r1, [r1, #7]
    cbae:	b2c7      	uxtb	r7, r0
    cbb0:	06c9      	lsls	r1, r1, #27
    cbb2:	d502      	bpl.n	cbba <IncludeMacCommandsResponse+0xe2>
    cbb4:	2102      	movs	r1, #2
    cbb6:	4339      	orrs	r1, r7
    cbb8:	7019      	strb	r1, [r3, #0]
    cbba:	2103      	movs	r1, #3
    cbbc:	4371      	muls	r1, r6
    cbbe:	1852      	adds	r2, r2, r1
    cbc0:	3260      	adds	r2, #96	; 0x60
    cbc2:	79d2      	ldrb	r2, [r2, #7]
    cbc4:	0692      	lsls	r2, r2, #26
    cbc6:	d54d      	bpl.n	cc64 <IncludeMacCommandsResponse+0x18c>
    cbc8:	7819      	ldrb	r1, [r3, #0]
    cbca:	2204      	movs	r2, #4
    cbcc:	e7dc      	b.n	cb88 <IncludeMacCommandsResponse+0xb0>
    cbce:	ab04      	add	r3, sp, #16
    cbd0:	1ddf      	adds	r7, r3, #7
    cbd2:	0039      	movs	r1, r7
    cbd4:	4b2f      	ldr	r3, [pc, #188]	; (cc94 <IncludeMacCommandsResponse+0x1bc>)
    cbd6:	200e      	movs	r0, #14
    cbd8:	4798      	blx	r3
    cbda:	2306      	movs	r3, #6
    cbdc:	4a29      	ldr	r2, [pc, #164]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cbde:	552b      	strb	r3, [r5, r4]
    cbe0:	32b4      	adds	r2, #180	; 0xb4
    cbe2:	7811      	ldrb	r1, [r2, #0]
    cbe4:	1c62      	adds	r2, r4, #1
    cbe6:	b292      	uxth	r2, r2
    cbe8:	54a9      	strb	r1, [r5, r2]
    cbea:	783a      	ldrb	r2, [r7, #0]
    cbec:	1ca3      	adds	r3, r4, #2
    cbee:	0011      	movs	r1, r2
    cbf0:	3120      	adds	r1, #32
    cbf2:	3403      	adds	r4, #3
    cbf4:	b2c9      	uxtb	r1, r1
    cbf6:	b29b      	uxth	r3, r3
    cbf8:	b2a4      	uxth	r4, r4
    cbfa:	293f      	cmp	r1, #63	; 0x3f
    cbfc:	d904      	bls.n	cc08 <IncludeMacCommandsResponse+0x130>
    cbfe:	2220      	movs	r2, #32
    cc00:	54ea      	strb	r2, [r5, r3]
    cc02:	3601      	adds	r6, #1
    cc04:	b2f6      	uxtb	r6, r6
    cc06:	e76e      	b.n	cae6 <IncludeMacCommandsResponse+0xe>
    cc08:	213f      	movs	r1, #63	; 0x3f
    cc0a:	400a      	ands	r2, r1
    cc0c:	e7f8      	b.n	cc00 <IncludeMacCommandsResponse+0x128>
    cc0e:	2207      	movs	r2, #7
    cc10:	2103      	movs	r1, #3
    cc12:	552a      	strb	r2, [r5, r4]
    cc14:	2200      	movs	r2, #0
    cc16:	4371      	muls	r1, r6
    cc18:	b29b      	uxth	r3, r3
    cc1a:	18eb      	adds	r3, r5, r3
    cc1c:	701a      	strb	r2, [r3, #0]
    cc1e:	4a19      	ldr	r2, [pc, #100]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cc20:	1852      	adds	r2, r2, r1
    cc22:	3260      	adds	r2, #96	; 0x60
    cc24:	79d1      	ldrb	r1, [r2, #7]
    cc26:	09c9      	lsrs	r1, r1, #7
    cc28:	7019      	strb	r1, [r3, #0]
    cc2a:	79d2      	ldrb	r2, [r2, #7]
    cc2c:	b2c8      	uxtb	r0, r1
    cc2e:	0652      	lsls	r2, r2, #25
    cc30:	d518      	bpl.n	cc64 <IncludeMacCommandsResponse+0x18c>
    cc32:	2202      	movs	r2, #2
    cc34:	4302      	orrs	r2, r0
    cc36:	e7a8      	b.n	cb8a <IncludeMacCommandsResponse+0xb2>
    cc38:	2209      	movs	r2, #9
    cc3a:	552a      	strb	r2, [r5, r4]
    cc3c:	b29c      	uxth	r4, r3
    cc3e:	e7e0      	b.n	cc02 <IncludeMacCommandsResponse+0x12a>
    cc40:	220a      	movs	r2, #10
    cc42:	2103      	movs	r1, #3
    cc44:	552a      	strb	r2, [r5, r4]
    cc46:	2200      	movs	r2, #0
    cc48:	4371      	muls	r1, r6
    cc4a:	b29b      	uxth	r3, r3
    cc4c:	18eb      	adds	r3, r5, r3
    cc4e:	701a      	strb	r2, [r3, #0]
    cc50:	4a0c      	ldr	r2, [pc, #48]	; (cc84 <IncludeMacCommandsResponse+0x1ac>)
    cc52:	1852      	adds	r2, r2, r1
    cc54:	3260      	adds	r2, #96	; 0x60
    cc56:	79d1      	ldrb	r1, [r2, #7]
    cc58:	09c9      	lsrs	r1, r1, #7
    cc5a:	7019      	strb	r1, [r3, #0]
    cc5c:	7a12      	ldrb	r2, [r2, #8]
    cc5e:	b2c8      	uxtb	r0, r1
    cc60:	07d2      	lsls	r2, r2, #31
    cc62:	d4e6      	bmi.n	cc32 <IncludeMacCommandsResponse+0x15a>
    cc64:	3402      	adds	r4, #2
    cc66:	b2a4      	uxth	r4, r4
    cc68:	e7cb      	b.n	cc02 <IncludeMacCommandsResponse+0x12a>
    cc6a:	0013      	movs	r3, r2
    cc6c:	21ff      	movs	r1, #255	; 0xff
    cc6e:	33b1      	adds	r3, #177	; 0xb1
    cc70:	7019      	strb	r1, [r3, #0]
    cc72:	2300      	movs	r3, #0
    cc74:	32b2      	adds	r2, #178	; 0xb2
    cc76:	7013      	strb	r3, [r2, #0]
    cc78:	1c63      	adds	r3, r4, #1
    cc7a:	2202      	movs	r2, #2
    cc7c:	e7dd      	b.n	cc3a <IncludeMacCommandsResponse+0x162>
    cc7e:	5529      	strb	r1, [r5, r4]
    cc80:	e7dc      	b.n	cc3c <IncludeMacCommandsResponse+0x164>
    cc82:	46c0      	nop			; (mov r8, r8)
    cc84:	20001ce4 	.word	0x20001ce4
    cc88:	0001dc9b 	.word	0x0001dc9b
    cc8c:	0001594d 	.word	0x0001594d
    cc90:	20001e07 	.word	0x20001e07
    cc94:	00010cad 	.word	0x00010cad

0000cc98 <UpdateJoinSuccessState>:
    cc98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc9a:	4c22      	ldr	r4, [pc, #136]	; (cd24 <UpdateJoinSuccessState+0x8c>)
    cc9c:	2104      	movs	r1, #4
    cc9e:	0022      	movs	r2, r4
    cca0:	0026      	movs	r6, r4
    cca2:	2701      	movs	r7, #1
    cca4:	2500      	movs	r5, #0
    cca6:	3260      	adds	r2, #96	; 0x60
    cca8:	7813      	ldrb	r3, [r2, #0]
    ccaa:	3650      	adds	r6, #80	; 0x50
    ccac:	438b      	bics	r3, r1
    ccae:	7013      	strb	r3, [r2, #0]
    ccb0:	7833      	ldrb	r3, [r6, #0]
    ccb2:	3107      	adds	r1, #7
    ccb4:	433b      	orrs	r3, r7
    ccb6:	7033      	strb	r3, [r6, #0]
    ccb8:	0038      	movs	r0, r7
    ccba:	4b1b      	ldr	r3, [pc, #108]	; (cd28 <UpdateJoinSuccessState+0x90>)
    ccbc:	4798      	blx	r3
    ccbe:	2116      	movs	r1, #22
    ccc0:	4b19      	ldr	r3, [pc, #100]	; (cd28 <UpdateJoinSuccessState+0x90>)
    ccc2:	0028      	movs	r0, r5
    ccc4:	6565      	str	r5, [r4, #84]	; 0x54
    ccc6:	4798      	blx	r3
    ccc8:	4b17      	ldr	r3, [pc, #92]	; (cd28 <UpdateJoinSuccessState+0x90>)
    ccca:	210a      	movs	r1, #10
    cccc:	0038      	movs	r0, r7
    ccce:	65a5      	str	r5, [r4, #88]	; 0x58
    ccd0:	4798      	blx	r3
    ccd2:	0023      	movs	r3, r4
    ccd4:	3396      	adds	r3, #150	; 0x96
    ccd6:	801d      	strh	r5, [r3, #0]
    ccd8:	0023      	movs	r3, r4
    ccda:	220e      	movs	r2, #14
    ccdc:	33c1      	adds	r3, #193	; 0xc1
    ccde:	701d      	strb	r5, [r3, #0]
    cce0:	7833      	ldrb	r3, [r6, #0]
    cce2:	4393      	bics	r3, r2
    cce4:	7033      	strb	r3, [r6, #0]
    cce6:	0023      	movs	r3, r4
    cce8:	3351      	adds	r3, #81	; 0x51
    ccea:	781b      	ldrb	r3, [r3, #0]
    ccec:	079b      	lsls	r3, r3, #30
    ccee:	d50a      	bpl.n	cd06 <UpdateJoinSuccessState+0x6e>
    ccf0:	21fa      	movs	r1, #250	; 0xfa
    ccf2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    ccf4:	0089      	lsls	r1, r1, #2
    ccf6:	34bb      	adds	r4, #187	; 0xbb
    ccf8:	7820      	ldrb	r0, [r4, #0]
    ccfa:	4359      	muls	r1, r3
    ccfc:	9500      	str	r5, [sp, #0]
    ccfe:	4b0b      	ldr	r3, [pc, #44]	; (cd2c <UpdateJoinSuccessState+0x94>)
    cd00:	002a      	movs	r2, r5
    cd02:	4c0b      	ldr	r4, [pc, #44]	; (cd30 <UpdateJoinSuccessState+0x98>)
    cd04:	47a0      	blx	r4
    cd06:	490b      	ldr	r1, [pc, #44]	; (cd34 <UpdateJoinSuccessState+0x9c>)
    cd08:	794a      	ldrb	r2, [r1, #5]
    cd0a:	790b      	ldrb	r3, [r1, #4]
    cd0c:	0212      	lsls	r2, r2, #8
    cd0e:	431a      	orrs	r2, r3
    cd10:	798b      	ldrb	r3, [r1, #6]
    cd12:	041b      	lsls	r3, r3, #16
    cd14:	431a      	orrs	r2, r3
    cd16:	79cb      	ldrb	r3, [r1, #7]
    cd18:	061b      	lsls	r3, r3, #24
    cd1a:	4313      	orrs	r3, r2
    cd1c:	d001      	beq.n	cd22 <UpdateJoinSuccessState+0x8a>
    cd1e:	2001      	movs	r0, #1
    cd20:	4798      	blx	r3
    cd22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cd24:	20001ce4 	.word	0x20001ce4
    cd28:	00008ec5 	.word	0x00008ec5
    cd2c:	0000ce35 	.word	0x0000ce35
    cd30:	00009eed 	.word	0x00009eed
    cd34:	20001f24 	.word	0x20001f24

0000cd38 <PrepareSessionKeys>:
    cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd3a:	0004      	movs	r4, r0
    cd3c:	2603      	movs	r6, #3
    cd3e:	000d      	movs	r5, r1
    cd40:	0017      	movs	r7, r2
    cd42:	4b09      	ldr	r3, [pc, #36]	; (cd68 <PrepareSessionKeys+0x30>)
    cd44:	2210      	movs	r2, #16
    cd46:	2100      	movs	r1, #0
    cd48:	4798      	blx	r3
    cd4a:	0032      	movs	r2, r6
    cd4c:	0029      	movs	r1, r5
    cd4e:	1c60      	adds	r0, r4, #1
    cd50:	4d06      	ldr	r5, [pc, #24]	; (cd6c <PrepareSessionKeys+0x34>)
    cd52:	47a8      	blx	r5
    cd54:	0032      	movs	r2, r6
    cd56:	0039      	movs	r1, r7
    cd58:	1d20      	adds	r0, r4, #4
    cd5a:	47a8      	blx	r5
    cd5c:	1de0      	adds	r0, r4, #7
    cd5e:	2202      	movs	r2, #2
    cd60:	4903      	ldr	r1, [pc, #12]	; (cd70 <PrepareSessionKeys+0x38>)
    cd62:	47a8      	blx	r5
    cd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd66:	46c0      	nop			; (mov r8, r8)
    cd68:	0001594d 	.word	0x0001594d
    cd6c:	000158c9 	.word	0x000158c9
    cd70:	20001d7c 	.word	0x20001d7c

0000cd74 <AssembleEncryptionBlock>:
    cd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cd76:	001e      	movs	r6, r3
    cd78:	4c0b      	ldr	r4, [pc, #44]	; (cda8 <AssembleEncryptionBlock+0x34>)
    cd7a:	0017      	movs	r7, r2
    cd7c:	4b0b      	ldr	r3, [pc, #44]	; (cdac <AssembleEncryptionBlock+0x38>)
    cd7e:	0005      	movs	r5, r0
    cd80:	9101      	str	r1, [sp, #4]
    cd82:	2210      	movs	r2, #16
    cd84:	2100      	movs	r1, #0
    cd86:	0020      	movs	r0, r4
    cd88:	4798      	blx	r3
    cd8a:	7026      	strb	r6, [r4, #0]
    cd8c:	2604      	movs	r6, #4
    cd8e:	7165      	strb	r5, [r4, #5]
    cd90:	0032      	movs	r2, r6
    cd92:	4d07      	ldr	r5, [pc, #28]	; (cdb0 <AssembleEncryptionBlock+0x3c>)
    cd94:	a908      	add	r1, sp, #32
    cd96:	1da0      	adds	r0, r4, #6
    cd98:	47a8      	blx	r5
    cd9a:	0020      	movs	r0, r4
    cd9c:	0032      	movs	r2, r6
    cd9e:	a901      	add	r1, sp, #4
    cda0:	300a      	adds	r0, #10
    cda2:	47a8      	blx	r5
    cda4:	73e7      	strb	r7, [r4, #15]
    cda6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cda8:	2000109c 	.word	0x2000109c
    cdac:	0001594d 	.word	0x0001594d
    cdb0:	000158c9 	.word	0x000158c9

0000cdb4 <ConfigureRadio>:
    cdb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cdb6:	0001      	movs	r1, r0
    cdb8:	0005      	movs	r5, r0
    cdba:	4c11      	ldr	r4, [pc, #68]	; (ce00 <ConfigureRadio+0x4c>)
    cdbc:	3109      	adds	r1, #9
    cdbe:	2009      	movs	r0, #9
    cdc0:	47a0      	blx	r4
    cdc2:	0029      	movs	r1, r5
    cdc4:	2001      	movs	r0, #1
    cdc6:	47a0      	blx	r4
    cdc8:	1d29      	adds	r1, r5, #4
    cdca:	200a      	movs	r0, #10
    cdcc:	47a0      	blx	r4
    cdce:	7a6b      	ldrb	r3, [r5, #9]
    cdd0:	2b01      	cmp	r3, #1
    cdd2:	d10b      	bne.n	cdec <ConfigureRadio+0x38>
    cdd4:	0029      	movs	r1, r5
    cdd6:	2016      	movs	r0, #22
    cdd8:	310b      	adds	r1, #11
    cdda:	47a0      	blx	r4
    cddc:	0029      	movs	r1, r5
    cdde:	2007      	movs	r0, #7
    cde0:	310a      	adds	r1, #10
    cde2:	47a0      	blx	r4
    cde4:	2000      	movs	r0, #0
    cde6:	4907      	ldr	r1, [pc, #28]	; (ce04 <ConfigureRadio+0x50>)
    cde8:	47a0      	blx	r4
    cdea:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    cdec:	466b      	mov	r3, sp
    cdee:	1dd9      	adds	r1, r3, #7
    cdf0:	2303      	movs	r3, #3
    cdf2:	2013      	movs	r0, #19
    cdf4:	700b      	strb	r3, [r1, #0]
    cdf6:	47a0      	blx	r4
    cdf8:	4903      	ldr	r1, [pc, #12]	; (ce08 <ConfigureRadio+0x54>)
    cdfa:	2012      	movs	r0, #18
    cdfc:	e7f4      	b.n	cde8 <ConfigureRadio+0x34>
    cdfe:	46c0      	nop			; (mov r8, r8)
    ce00:	00010d99 	.word	0x00010d99
    ce04:	20001daf 	.word	0x20001daf
    ce08:	0001dc98 	.word	0x0001dc98

0000ce0c <LorawanLinkCheckCallback.part.1>:
    ce0c:	b513      	push	{r0, r1, r4, lr}
    ce0e:	21fa      	movs	r1, #250	; 0xfa
    ce10:	4b05      	ldr	r3, [pc, #20]	; (ce28 <LorawanLinkCheckCallback.part.1+0x1c>)
    ce12:	0089      	lsls	r1, r1, #2
    ce14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    ce16:	33bb      	adds	r3, #187	; 0xbb
    ce18:	4351      	muls	r1, r2
    ce1a:	2200      	movs	r2, #0
    ce1c:	7818      	ldrb	r0, [r3, #0]
    ce1e:	4c03      	ldr	r4, [pc, #12]	; (ce2c <LorawanLinkCheckCallback.part.1+0x20>)
    ce20:	9200      	str	r2, [sp, #0]
    ce22:	4b03      	ldr	r3, [pc, #12]	; (ce30 <LorawanLinkCheckCallback.part.1+0x24>)
    ce24:	47a0      	blx	r4
    ce26:	bd13      	pop	{r0, r1, r4, pc}
    ce28:	20001ce4 	.word	0x20001ce4
    ce2c:	00009eed 	.word	0x00009eed
    ce30:	0000ce35 	.word	0x0000ce35

0000ce34 <LorawanLinkCheckCallback>:
    ce34:	4b17      	ldr	r3, [pc, #92]	; (ce94 <LorawanLinkCheckCallback+0x60>)
    ce36:	20a0      	movs	r0, #160	; 0xa0
    ce38:	001a      	movs	r2, r3
    ce3a:	2180      	movs	r1, #128	; 0x80
    ce3c:	b510      	push	{r4, lr}
    ce3e:	3250      	adds	r2, #80	; 0x50
    ce40:	8812      	ldrh	r2, [r2, #0]
    ce42:	0080      	lsls	r0, r0, #2
    ce44:	0089      	lsls	r1, r1, #2
    ce46:	4002      	ands	r2, r0
    ce48:	428a      	cmp	r2, r1
    ce4a:	d11c      	bne.n	ce86 <LorawanLinkCheckCallback+0x52>
    ce4c:	001a      	movs	r2, r3
    ce4e:	32ac      	adds	r2, #172	; 0xac
    ce50:	7810      	ldrb	r0, [r2, #0]
    ce52:	2403      	movs	r4, #3
    ce54:	2200      	movs	r2, #0
    ce56:	b2d1      	uxtb	r1, r2
    ce58:	4281      	cmp	r1, r0
    ce5a:	d30d      	bcc.n	ce78 <LorawanLinkCheckCallback+0x44>
    ce5c:	d113      	bne.n	ce86 <LorawanLinkCheckCallback+0x52>
    ce5e:	2203      	movs	r2, #3
    ce60:	434a      	muls	r2, r1
    ce62:	2102      	movs	r1, #2
    ce64:	189a      	adds	r2, r3, r2
    ce66:	3266      	adds	r2, #102	; 0x66
    ce68:	7011      	strb	r1, [r2, #0]
    ce6a:	280f      	cmp	r0, #15
    ce6c:	d80b      	bhi.n	ce86 <LorawanLinkCheckCallback+0x52>
    ce6e:	001a      	movs	r2, r3
    ce70:	3001      	adds	r0, #1
    ce72:	32ac      	adds	r2, #172	; 0xac
    ce74:	7010      	strb	r0, [r2, #0]
    ce76:	e006      	b.n	ce86 <LorawanLinkCheckCallback+0x52>
    ce78:	0021      	movs	r1, r4
    ce7a:	3201      	adds	r2, #1
    ce7c:	4351      	muls	r1, r2
    ce7e:	3163      	adds	r1, #99	; 0x63
    ce80:	5c59      	ldrb	r1, [r3, r1]
    ce82:	2902      	cmp	r1, #2
    ce84:	d1e7      	bne.n	ce56 <LorawanLinkCheckCallback+0x22>
    ce86:	3351      	adds	r3, #81	; 0x51
    ce88:	781b      	ldrb	r3, [r3, #0]
    ce8a:	079b      	lsls	r3, r3, #30
    ce8c:	d501      	bpl.n	ce92 <LorawanLinkCheckCallback+0x5e>
    ce8e:	4b02      	ldr	r3, [pc, #8]	; (ce98 <LorawanLinkCheckCallback+0x64>)
    ce90:	4798      	blx	r3
    ce92:	bd10      	pop	{r4, pc}
    ce94:	20001ce4 	.word	0x20001ce4
    ce98:	0000ce0d 	.word	0x0000ce0d

0000ce9c <LORAWAN_Init>:
    ce9c:	2270      	movs	r2, #112	; 0x70
    ce9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    cea0:	4b3e      	ldr	r3, [pc, #248]	; (cf9c <LORAWAN_Init+0x100>)
    cea2:	b087      	sub	sp, #28
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	0005      	movs	r5, r0
    cea8:	011b      	lsls	r3, r3, #4
    ceaa:	4013      	ands	r3, r2
    ceac:	4a3c      	ldr	r2, [pc, #240]	; (cfa0 <LORAWAN_Init+0x104>)
    ceae:	000e      	movs	r6, r1
    ceb0:	7812      	ldrb	r2, [r2, #0]
    ceb2:	0912      	lsrs	r2, r2, #4
    ceb4:	4313      	orrs	r3, r2
    ceb6:	2b1f      	cmp	r3, #31
    ceb8:	d000      	beq.n	cebc <LORAWAN_Init+0x20>
    ceba:	e7fe      	b.n	ceba <LORAWAN_Init+0x1e>
    cebc:	4f39      	ldr	r7, [pc, #228]	; (cfa4 <LORAWAN_Init+0x108>)
    cebe:	003b      	movs	r3, r7
    cec0:	33c3      	adds	r3, #195	; 0xc3
    cec2:	781b      	ldrb	r3, [r3, #0]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d166      	bne.n	cf96 <LORAWAN_Init+0xfa>
    cec8:	4837      	ldr	r0, [pc, #220]	; (cfa8 <LORAWAN_Init+0x10c>)
    ceca:	4c38      	ldr	r4, [pc, #224]	; (cfac <LORAWAN_Init+0x110>)
    cecc:	47a0      	blx	r4
    cece:	2808      	cmp	r0, #8
    ced0:	d034      	beq.n	cf3c <LORAWAN_Init+0xa0>
    ced2:	4b37      	ldr	r3, [pc, #220]	; (cfb0 <LORAWAN_Init+0x114>)
    ced4:	4798      	blx	r3
    ced6:	37c3      	adds	r7, #195	; 0xc3
    ced8:	783b      	ldrb	r3, [r7, #0]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d018      	beq.n	cf10 <LORAWAN_Init+0x74>
    cede:	4b35      	ldr	r3, [pc, #212]	; (cfb4 <LORAWAN_Init+0x118>)
    cee0:	0a2a      	lsrs	r2, r5, #8
    cee2:	705a      	strb	r2, [r3, #1]
    cee4:	0c2a      	lsrs	r2, r5, #16
    cee6:	709a      	strb	r2, [r3, #2]
    cee8:	0a32      	lsrs	r2, r6, #8
    ceea:	701d      	strb	r5, [r3, #0]
    ceec:	711e      	strb	r6, [r3, #4]
    ceee:	715a      	strb	r2, [r3, #5]
    cef0:	0e2d      	lsrs	r5, r5, #24
    cef2:	0c32      	lsrs	r2, r6, #16
    cef4:	0e36      	lsrs	r6, r6, #24
    cef6:	719a      	strb	r2, [r3, #6]
    cef8:	70dd      	strb	r5, [r3, #3]
    cefa:	71de      	strb	r6, [r3, #7]
    cefc:	4b2e      	ldr	r3, [pc, #184]	; (cfb8 <LORAWAN_Init+0x11c>)
    cefe:	4798      	blx	r3
    cf00:	492e      	ldr	r1, [pc, #184]	; (cfbc <LORAWAN_Init+0x120>)
    cf02:	4b2f      	ldr	r3, [pc, #188]	; (cfc0 <LORAWAN_Init+0x124>)
    cf04:	201a      	movs	r0, #26
    cf06:	4798      	blx	r3
    cf08:	4b2e      	ldr	r3, [pc, #184]	; (cfc4 <LORAWAN_Init+0x128>)
    cf0a:	4798      	blx	r3
    cf0c:	4b2e      	ldr	r3, [pc, #184]	; (cfc8 <LORAWAN_Init+0x12c>)
    cf0e:	4798      	blx	r3
    cf10:	2317      	movs	r3, #23
    cf12:	ac02      	add	r4, sp, #8
    cf14:	7123      	strb	r3, [r4, #4]
    cf16:	4b2d      	ldr	r3, [pc, #180]	; (cfcc <LORAWAN_Init+0x130>)
    cf18:	9a03      	ldr	r2, [sp, #12]
    cf1a:	9300      	str	r3, [sp, #0]
    cf1c:	4d2c      	ldr	r5, [pc, #176]	; (cfd0 <LORAWAN_Init+0x134>)
    cf1e:	492d      	ldr	r1, [pc, #180]	; (cfd4 <LORAWAN_Init+0x138>)
    cf20:	4b2d      	ldr	r3, [pc, #180]	; (cfd8 <LORAWAN_Init+0x13c>)
    cf22:	2000      	movs	r0, #0
    cf24:	47a8      	blx	r5
    cf26:	230d      	movs	r3, #13
    cf28:	7123      	strb	r3, [r4, #4]
    cf2a:	4b2c      	ldr	r3, [pc, #176]	; (cfdc <LORAWAN_Init+0x140>)
    cf2c:	492c      	ldr	r1, [pc, #176]	; (cfe0 <LORAWAN_Init+0x144>)
    cf2e:	9300      	str	r3, [sp, #0]
    cf30:	6862      	ldr	r2, [r4, #4]
    cf32:	4b2c      	ldr	r3, [pc, #176]	; (cfe4 <LORAWAN_Init+0x148>)
    cf34:	2001      	movs	r0, #1
    cf36:	47a8      	blx	r5
    cf38:	b007      	add	sp, #28
    cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf3c:	482a      	ldr	r0, [pc, #168]	; (cfe8 <LORAWAN_Init+0x14c>)
    cf3e:	47a0      	blx	r4
    cf40:	2808      	cmp	r0, #8
    cf42:	d1c6      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf44:	4829      	ldr	r0, [pc, #164]	; (cfec <LORAWAN_Init+0x150>)
    cf46:	47a0      	blx	r4
    cf48:	2808      	cmp	r0, #8
    cf4a:	d1c2      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf4c:	4828      	ldr	r0, [pc, #160]	; (cff0 <LORAWAN_Init+0x154>)
    cf4e:	47a0      	blx	r4
    cf50:	2808      	cmp	r0, #8
    cf52:	d1be      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf54:	4827      	ldr	r0, [pc, #156]	; (cff4 <LORAWAN_Init+0x158>)
    cf56:	47a0      	blx	r4
    cf58:	2808      	cmp	r0, #8
    cf5a:	d1ba      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf5c:	4826      	ldr	r0, [pc, #152]	; (cff8 <LORAWAN_Init+0x15c>)
    cf5e:	47a0      	blx	r4
    cf60:	2808      	cmp	r0, #8
    cf62:	d1b6      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf64:	4825      	ldr	r0, [pc, #148]	; (cffc <LORAWAN_Init+0x160>)
    cf66:	47a0      	blx	r4
    cf68:	2808      	cmp	r0, #8
    cf6a:	d1b2      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf6c:	4824      	ldr	r0, [pc, #144]	; (d000 <LORAWAN_Init+0x164>)
    cf6e:	47a0      	blx	r4
    cf70:	2808      	cmp	r0, #8
    cf72:	d1ae      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf74:	4823      	ldr	r0, [pc, #140]	; (d004 <LORAWAN_Init+0x168>)
    cf76:	47a0      	blx	r4
    cf78:	2808      	cmp	r0, #8
    cf7a:	d1aa      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf7c:	4822      	ldr	r0, [pc, #136]	; (d008 <LORAWAN_Init+0x16c>)
    cf7e:	47a0      	blx	r4
    cf80:	2808      	cmp	r0, #8
    cf82:	d1a6      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf84:	4821      	ldr	r0, [pc, #132]	; (d00c <LORAWAN_Init+0x170>)
    cf86:	47a0      	blx	r4
    cf88:	2808      	cmp	r0, #8
    cf8a:	d1a2      	bne.n	ced2 <LORAWAN_Init+0x36>
    cf8c:	003b      	movs	r3, r7
    cf8e:	2201      	movs	r2, #1
    cf90:	33c3      	adds	r3, #195	; 0xc3
    cf92:	701a      	strb	r2, [r3, #0]
    cf94:	e79f      	b.n	ced6 <LORAWAN_Init+0x3a>
    cf96:	4b1e      	ldr	r3, [pc, #120]	; (d010 <LORAWAN_Init+0x174>)
    cf98:	4798      	blx	r3
    cf9a:	e79c      	b.n	ced6 <LORAWAN_Init+0x3a>
    cf9c:	41003fe8 	.word	0x41003fe8
    cfa0:	41003fe4 	.word	0x41003fe4
    cfa4:	20001ce4 	.word	0x20001ce4
    cfa8:	20001d9a 	.word	0x20001d9a
    cfac:	00009eb9 	.word	0x00009eb9
    cfb0:	00009dfd 	.word	0x00009dfd
    cfb4:	20001f24 	.word	0x20001f24
    cfb8:	00010fb5 	.word	0x00010fb5
    cfbc:	0000ea79 	.word	0x0000ea79
    cfc0:	00010d99 	.word	0x00010d99
    cfc4:	0000a67d 	.word	0x0000a67d
    cfc8:	00015ab9 	.word	0x00015ab9
    cfcc:	00010a1d 	.word	0x00010a1d
    cfd0:	000090dd 	.word	0x000090dd
    cfd4:	20001ccd 	.word	0x20001ccd
    cfd8:	0001dcb4 	.word	0x0001dcb4
    cfdc:	00010a35 	.word	0x00010a35
    cfe0:	20001bc0 	.word	0x20001bc0
    cfe4:	0001dd6c 	.word	0x0001dd6c
    cfe8:	20001d9b 	.word	0x20001d9b
    cfec:	20001d9c 	.word	0x20001d9c
    cff0:	20001d9d 	.word	0x20001d9d
    cff4:	20001d9f 	.word	0x20001d9f
    cff8:	20001da0 	.word	0x20001da0
    cffc:	20001d9e 	.word	0x20001d9e
    d000:	20001da1 	.word	0x20001da1
    d004:	20001daa 	.word	0x20001daa
    d008:	20001dab 	.word	0x20001dab
    d00c:	20001dd4 	.word	0x20001dd4
    d010:	0000ca15 	.word	0x0000ca15

0000d014 <LORAWAN_Send>:
    d014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d016:	4c36      	ldr	r4, [pc, #216]	; (d0f0 <LORAWAN_Send+0xdc>)
    d018:	0006      	movs	r6, r0
    d01a:	0023      	movs	r3, r4
    d01c:	3350      	adds	r3, #80	; 0x50
    d01e:	781b      	ldrb	r3, [r3, #0]
    d020:	250f      	movs	r5, #15
    d022:	b25a      	sxtb	r2, r3
    d024:	2a00      	cmp	r2, #0
    d026:	db0b      	blt.n	d040 <LORAWAN_Send+0x2c>
    d028:	3d03      	subs	r5, #3
    d02a:	065a      	lsls	r2, r3, #25
    d02c:	d408      	bmi.n	d040 <LORAWAN_Send+0x2c>
    d02e:	3d03      	subs	r5, #3
    d030:	07db      	lsls	r3, r3, #31
    d032:	d505      	bpl.n	d040 <LORAWAN_Send+0x2c>
    d034:	2390      	movs	r3, #144	; 0x90
    d036:	005b      	lsls	r3, r3, #1
    d038:	5ce7      	ldrb	r7, [r4, r3]
    d03a:	2f00      	cmp	r7, #0
    d03c:	d102      	bne.n	d044 <LORAWAN_Send+0x30>
    d03e:	2511      	movs	r5, #17
    d040:	0028      	movs	r0, r5
    d042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d044:	2800      	cmp	r0, #0
    d046:	d10d      	bne.n	d064 <LORAWAN_Send+0x50>
    d048:	2700      	movs	r7, #0
    d04a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d04c:	3301      	adds	r3, #1
    d04e:	d123      	bne.n	d098 <LORAWAN_Send+0x84>
    d050:	2001      	movs	r0, #1
    d052:	3450      	adds	r4, #80	; 0x50
    d054:	78a3      	ldrb	r3, [r4, #2]
    d056:	210b      	movs	r1, #11
    d058:	4303      	orrs	r3, r0
    d05a:	70a3      	strb	r3, [r4, #2]
    d05c:	4b25      	ldr	r3, [pc, #148]	; (d0f4 <LORAWAN_Send+0xe0>)
    d05e:	4798      	blx	r3
    d060:	250d      	movs	r5, #13
    d062:	e7ed      	b.n	d040 <LORAWAN_Send+0x2c>
    d064:	7843      	ldrb	r3, [r0, #1]
    d066:	7a02      	ldrb	r2, [r0, #8]
    d068:	3b01      	subs	r3, #1
    d06a:	b2db      	uxtb	r3, r3
    d06c:	9201      	str	r2, [sp, #4]
    d06e:	2bdf      	cmp	r3, #223	; 0xdf
    d070:	d902      	bls.n	d078 <LORAWAN_Send+0x64>
    d072:	250a      	movs	r5, #10
    d074:	2a00      	cmp	r2, #0
    d076:	d1e3      	bne.n	d040 <LORAWAN_Send+0x2c>
    d078:	4b1f      	ldr	r3, [pc, #124]	; (d0f8 <LORAWAN_Send+0xe4>)
    d07a:	4798      	blx	r3
    d07c:	4684      	mov	ip, r0
    d07e:	9b01      	ldr	r3, [sp, #4]
    d080:	9000      	str	r0, [sp, #0]
    d082:	4463      	add	r3, ip
    d084:	001d      	movs	r5, r3
    d086:	4b1d      	ldr	r3, [pc, #116]	; (d0fc <LORAWAN_Send+0xe8>)
    d088:	4798      	blx	r3
    d08a:	4285      	cmp	r5, r0
    d08c:	dddc      	ble.n	d048 <LORAWAN_Send+0x34>
    d08e:	9b00      	ldr	r3, [sp, #0]
    d090:	250e      	movs	r5, #14
    d092:	2b00      	cmp	r3, #0
    d094:	d0d4      	beq.n	d040 <LORAWAN_Send+0x2c>
    d096:	e7d8      	b.n	d04a <LORAWAN_Send+0x36>
    d098:	0023      	movs	r3, r4
    d09a:	33c8      	adds	r3, #200	; 0xc8
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	2b04      	cmp	r3, #4
    d0a0:	d01d      	beq.n	d0de <LORAWAN_Send+0xca>
    d0a2:	0023      	movs	r3, r4
    d0a4:	33c8      	adds	r3, #200	; 0xc8
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	2b01      	cmp	r3, #1
    d0aa:	d105      	bne.n	d0b8 <LORAWAN_Send+0xa4>
    d0ac:	0023      	movs	r3, r4
    d0ae:	3350      	adds	r3, #80	; 0x50
    d0b0:	781a      	ldrb	r2, [r3, #0]
    d0b2:	230e      	movs	r3, #14
    d0b4:	421a      	tst	r2, r3
    d0b6:	d1c2      	bne.n	d03e <LORAWAN_Send+0x2a>
    d0b8:	0023      	movs	r3, r4
    d0ba:	33d0      	adds	r3, #208	; 0xd0
    d0bc:	2f00      	cmp	r7, #0
    d0be:	d113      	bne.n	d0e8 <LORAWAN_Send+0xd4>
    d0c0:	2508      	movs	r5, #8
    d0c2:	601e      	str	r6, [r3, #0]
    d0c4:	2390      	movs	r3, #144	; 0x90
    d0c6:	2200      	movs	r2, #0
    d0c8:	005b      	lsls	r3, r3, #1
    d0ca:	54e2      	strb	r2, [r4, r3]
    d0cc:	2001      	movs	r0, #1
    d0ce:	4b0c      	ldr	r3, [pc, #48]	; (d100 <LORAWAN_Send+0xec>)
    d0d0:	4798      	blx	r3
    d0d2:	2320      	movs	r3, #32
    d0d4:	3460      	adds	r4, #96	; 0x60
    d0d6:	7822      	ldrb	r2, [r4, #0]
    d0d8:	4313      	orrs	r3, r2
    d0da:	7023      	strb	r3, [r4, #0]
    d0dc:	e7b0      	b.n	d040 <LORAWAN_Send+0x2c>
    d0de:	4b09      	ldr	r3, [pc, #36]	; (d104 <LORAWAN_Send+0xf0>)
    d0e0:	4798      	blx	r3
    d0e2:	2808      	cmp	r0, #8
    d0e4:	d1ab      	bne.n	d03e <LORAWAN_Send+0x2a>
    d0e6:	e7dc      	b.n	d0a2 <LORAWAN_Send+0x8e>
    d0e8:	2200      	movs	r2, #0
    d0ea:	2511      	movs	r5, #17
    d0ec:	601a      	str	r2, [r3, #0]
    d0ee:	e7e9      	b.n	d0c4 <LORAWAN_Send+0xb0>
    d0f0:	20001ce4 	.word	0x20001ce4
    d0f4:	00008ec5 	.word	0x00008ec5
    d0f8:	0000c9d5 	.word	0x0000c9d5
    d0fc:	0000ca7d 	.word	0x0000ca7d
    d100:	00010c29 	.word	0x00010c29
    d104:	00010619 	.word	0x00010619

0000d108 <AutomaticReplyCallback>:
    d108:	b510      	push	{r4, lr}
    d10a:	4c0d      	ldr	r4, [pc, #52]	; (d140 <AutomaticReplyCallback+0x38>)
    d10c:	0023      	movs	r3, r4
    d10e:	33c8      	adds	r3, #200	; 0xc8
    d110:	781b      	ldrb	r3, [r3, #0]
    d112:	2b01      	cmp	r3, #1
    d114:	d10e      	bne.n	d134 <AutomaticReplyCallback+0x2c>
    d116:	0022      	movs	r2, r4
    d118:	210e      	movs	r1, #14
    d11a:	3250      	adds	r2, #80	; 0x50
    d11c:	7813      	ldrb	r3, [r2, #0]
    d11e:	438b      	bics	r3, r1
    d120:	7013      	strb	r3, [r2, #0]
    d122:	4b08      	ldr	r3, [pc, #32]	; (d144 <AutomaticReplyCallback+0x3c>)
    d124:	2000      	movs	r0, #0
    d126:	4798      	blx	r3
    d128:	2208      	movs	r2, #8
    d12a:	3460      	adds	r4, #96	; 0x60
    d12c:	7823      	ldrb	r3, [r4, #0]
    d12e:	4393      	bics	r3, r2
    d130:	7023      	strb	r3, [r4, #0]
    d132:	bd10      	pop	{r4, pc}
    d134:	2b04      	cmp	r3, #4
    d136:	d1f4      	bne.n	d122 <AutomaticReplyCallback+0x1a>
    d138:	4b03      	ldr	r3, [pc, #12]	; (d148 <AutomaticReplyCallback+0x40>)
    d13a:	4798      	blx	r3
    d13c:	e7f1      	b.n	d122 <AutomaticReplyCallback+0x1a>
    d13e:	46c0      	nop			; (mov r8, r8)
    d140:	20001ce4 	.word	0x20001ce4
    d144:	0000d015 	.word	0x0000d015
    d148:	000116cd 	.word	0x000116cd

0000d14c <LORAWAN_Pause>:
    d14c:	b510      	push	{r4, lr}
    d14e:	4c2c      	ldr	r4, [pc, #176]	; (d200 <LORAWAN_Pause+0xb4>)
    d150:	0023      	movs	r3, r4
    d152:	33c8      	adds	r3, #200	; 0xc8
    d154:	781b      	ldrb	r3, [r3, #0]
    d156:	2b04      	cmp	r3, #4
    d158:	d110      	bne.n	d17c <LORAWAN_Pause+0x30>
    d15a:	0023      	movs	r3, r4
    d15c:	3350      	adds	r3, #80	; 0x50
    d15e:	781b      	ldrb	r3, [r3, #0]
    d160:	07db      	lsls	r3, r3, #31
    d162:	d50b      	bpl.n	d17c <LORAWAN_Pause+0x30>
    d164:	4b27      	ldr	r3, [pc, #156]	; (d204 <LORAWAN_Pause+0xb8>)
    d166:	4798      	blx	r3
    d168:	28c7      	cmp	r0, #199	; 0xc7
    d16a:	d942      	bls.n	d1f2 <LORAWAN_Pause+0xa6>
    d16c:	2380      	movs	r3, #128	; 0x80
    d16e:	3450      	adds	r4, #80	; 0x50
    d170:	7822      	ldrb	r2, [r4, #0]
    d172:	425b      	negs	r3, r3
    d174:	4313      	orrs	r3, r2
    d176:	3832      	subs	r0, #50	; 0x32
    d178:	7023      	strb	r3, [r4, #0]
    d17a:	bd10      	pop	{r4, pc}
    d17c:	0023      	movs	r3, r4
    d17e:	3350      	adds	r3, #80	; 0x50
    d180:	7818      	ldrb	r0, [r3, #0]
    d182:	0700      	lsls	r0, r0, #28
    d184:	0f40      	lsrs	r0, r0, #29
    d186:	2806      	cmp	r0, #6
    d188:	d833      	bhi.n	d1f2 <LORAWAN_Pause+0xa6>
    d18a:	f005 faab 	bl	126e4 <__gnu_thumb1_case_uqi>
    d18e:	322f      	.short	0x322f
    d190:	321b3204 	.word	0x321b3204
    d194:	2c          	.byte	0x2c
    d195:	00          	.byte	0x00
    d196:	0023      	movs	r3, r4
    d198:	3360      	adds	r3, #96	; 0x60
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	075b      	lsls	r3, r3, #29
    d19e:	d509      	bpl.n	d1b4 <LORAWAN_Pause+0x68>
    d1a0:	0023      	movs	r3, r4
    d1a2:	33b6      	adds	r3, #182	; 0xb6
    d1a4:	7818      	ldrb	r0, [r3, #0]
    d1a6:	4b18      	ldr	r3, [pc, #96]	; (d208 <LORAWAN_Pause+0xbc>)
    d1a8:	4798      	blx	r3
    d1aa:	21fa      	movs	r1, #250	; 0xfa
    d1ac:	4b17      	ldr	r3, [pc, #92]	; (d20c <LORAWAN_Pause+0xc0>)
    d1ae:	0089      	lsls	r1, r1, #2
    d1b0:	4798      	blx	r3
    d1b2:	e7d9      	b.n	d168 <LORAWAN_Pause+0x1c>
    d1b4:	0023      	movs	r3, r4
    d1b6:	3350      	adds	r3, #80	; 0x50
    d1b8:	781b      	ldrb	r3, [r3, #0]
    d1ba:	07db      	lsls	r3, r3, #31
    d1bc:	d519      	bpl.n	d1f2 <LORAWAN_Pause+0xa6>
    d1be:	0023      	movs	r3, r4
    d1c0:	33b8      	adds	r3, #184	; 0xb8
    d1c2:	e7ef      	b.n	d1a4 <LORAWAN_Pause+0x58>
    d1c4:	0023      	movs	r3, r4
    d1c6:	3360      	adds	r3, #96	; 0x60
    d1c8:	7818      	ldrb	r0, [r3, #0]
    d1ca:	2304      	movs	r3, #4
    d1cc:	4018      	ands	r0, r3
    d1ce:	0023      	movs	r3, r4
    d1d0:	2800      	cmp	r0, #0
    d1d2:	d001      	beq.n	d1d8 <LORAWAN_Pause+0x8c>
    d1d4:	33b7      	adds	r3, #183	; 0xb7
    d1d6:	e7e5      	b.n	d1a4 <LORAWAN_Pause+0x58>
    d1d8:	3350      	adds	r3, #80	; 0x50
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	07db      	lsls	r3, r3, #31
    d1de:	d5e4      	bpl.n	d1aa <LORAWAN_Pause+0x5e>
    d1e0:	0023      	movs	r3, r4
    d1e2:	33b9      	adds	r3, #185	; 0xb9
    d1e4:	e7de      	b.n	d1a4 <LORAWAN_Pause+0x58>
    d1e6:	0023      	movs	r3, r4
    d1e8:	33bc      	adds	r3, #188	; 0xbc
    d1ea:	e7db      	b.n	d1a4 <LORAWAN_Pause+0x58>
    d1ec:	2001      	movs	r0, #1
    d1ee:	4240      	negs	r0, r0
    d1f0:	e7bc      	b.n	d16c <LORAWAN_Pause+0x20>
    d1f2:	227f      	movs	r2, #127	; 0x7f
    d1f4:	3450      	adds	r4, #80	; 0x50
    d1f6:	7823      	ldrb	r3, [r4, #0]
    d1f8:	2000      	movs	r0, #0
    d1fa:	4013      	ands	r3, r2
    d1fc:	7023      	strb	r3, [r4, #0]
    d1fe:	e7bc      	b.n	d17a <LORAWAN_Pause+0x2e>
    d200:	20001ce4 	.word	0x20001ce4
    d204:	00010651 	.word	0x00010651
    d208:	0000a099 	.word	0x0000a099
    d20c:	0001270d 	.word	0x0001270d

0000d210 <LORAWAN_Resume>:
    d210:	217f      	movs	r1, #127	; 0x7f
    d212:	4b03      	ldr	r3, [pc, #12]	; (d220 <LORAWAN_Resume+0x10>)
    d214:	3350      	adds	r3, #80	; 0x50
    d216:	781a      	ldrb	r2, [r3, #0]
    d218:	400a      	ands	r2, r1
    d21a:	701a      	strb	r2, [r3, #0]
    d21c:	4770      	bx	lr
    d21e:	46c0      	nop			; (mov r8, r8)
    d220:	20001ce4 	.word	0x20001ce4

0000d224 <LorawanLinkCheckConfigure>:
    d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d226:	23fa      	movs	r3, #250	; 0xfa
    d228:	4c20      	ldr	r4, [pc, #128]	; (d2ac <LorawanLinkCheckConfigure+0x88>)
    d22a:	009b      	lsls	r3, r3, #2
    d22c:	0025      	movs	r5, r4
    d22e:	4343      	muls	r3, r0
    d230:	0006      	movs	r6, r0
    d232:	2102      	movs	r1, #2
    d234:	2000      	movs	r0, #0
    d236:	4f1e      	ldr	r7, [pc, #120]	; (d2b0 <LorawanLinkCheckConfigure+0x8c>)
    d238:	65e3      	str	r3, [r4, #92]	; 0x5c
    d23a:	3550      	adds	r5, #80	; 0x50
    d23c:	47b8      	blx	r7
    d23e:	2e00      	cmp	r6, #0
    d240:	d127      	bne.n	d292 <LorawanLinkCheckConfigure+0x6e>
    d242:	0023      	movs	r3, r4
    d244:	33bb      	adds	r3, #187	; 0xbb
    d246:	7818      	ldrb	r0, [r3, #0]
    d248:	4b1a      	ldr	r3, [pc, #104]	; (d2b4 <LorawanLinkCheckConfigure+0x90>)
    d24a:	4798      	blx	r3
    d24c:	2202      	movs	r2, #2
    d24e:	786b      	ldrb	r3, [r5, #1]
    d250:	210b      	movs	r1, #11
    d252:	4393      	bics	r3, r2
    d254:	706b      	strb	r3, [r5, #1]
    d256:	2001      	movs	r0, #1
    d258:	47b8      	blx	r7
    d25a:	0023      	movs	r3, r4
    d25c:	2701      	movs	r7, #1
    d25e:	33ac      	adds	r3, #172	; 0xac
    d260:	781b      	ldrb	r3, [r3, #0]
    d262:	0030      	movs	r0, r6
    d264:	0032      	movs	r2, r6
    d266:	36ff      	adds	r6, #255	; 0xff
    d268:	429a      	cmp	r2, r3
    d26a:	d304      	bcc.n	d276 <LorawanLinkCheckConfigure+0x52>
    d26c:	2800      	cmp	r0, #0
    d26e:	d001      	beq.n	d274 <LorawanLinkCheckConfigure+0x50>
    d270:	34ac      	adds	r4, #172	; 0xac
    d272:	7023      	strb	r3, [r4, #0]
    d274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d276:	2103      	movs	r1, #3
    d278:	4351      	muls	r1, r2
    d27a:	1861      	adds	r1, r4, r1
    d27c:	3166      	adds	r1, #102	; 0x66
    d27e:	780d      	ldrb	r5, [r1, #0]
    d280:	2d02      	cmp	r5, #2
    d282:	d103      	bne.n	d28c <LorawanLinkCheckConfigure+0x68>
    d284:	0038      	movs	r0, r7
    d286:	3b01      	subs	r3, #1
    d288:	700e      	strb	r6, [r1, #0]
    d28a:	b2db      	uxtb	r3, r3
    d28c:	3201      	adds	r2, #1
    d28e:	b2d2      	uxtb	r2, r2
    d290:	e7ea      	b.n	d268 <LorawanLinkCheckConfigure+0x44>
    d292:	2302      	movs	r3, #2
    d294:	786a      	ldrb	r2, [r5, #1]
    d296:	210b      	movs	r1, #11
    d298:	4313      	orrs	r3, r2
    d29a:	706b      	strb	r3, [r5, #1]
    d29c:	2001      	movs	r0, #1
    d29e:	47b8      	blx	r7
    d2a0:	782b      	ldrb	r3, [r5, #0]
    d2a2:	07db      	lsls	r3, r3, #31
    d2a4:	d5e6      	bpl.n	d274 <LorawanLinkCheckConfigure+0x50>
    d2a6:	4b04      	ldr	r3, [pc, #16]	; (d2b8 <LorawanLinkCheckConfigure+0x94>)
    d2a8:	4798      	blx	r3
    d2aa:	e7e3      	b.n	d274 <LorawanLinkCheckConfigure+0x50>
    d2ac:	20001ce4 	.word	0x20001ce4
    d2b0:	00008ec5 	.word	0x00008ec5
    d2b4:	0000a1f1 	.word	0x0000a1f1
    d2b8:	0000ce0d 	.word	0x0000ce0d

0000d2bc <UpdateCurrentDataRate>:
    d2bc:	b510      	push	{r4, lr}
    d2be:	4b04      	ldr	r3, [pc, #16]	; (d2d0 <UpdateCurrentDataRate+0x14>)
    d2c0:	210c      	movs	r1, #12
    d2c2:	33b3      	adds	r3, #179	; 0xb3
    d2c4:	7018      	strb	r0, [r3, #0]
    d2c6:	2001      	movs	r0, #1
    d2c8:	4b02      	ldr	r3, [pc, #8]	; (d2d4 <UpdateCurrentDataRate+0x18>)
    d2ca:	4798      	blx	r3
    d2cc:	bd10      	pop	{r4, pc}
    d2ce:	46c0      	nop			; (mov r8, r8)
    d2d0:	20001ce4 	.word	0x20001ce4
    d2d4:	00008ec5 	.word	0x00008ec5

0000d2d8 <UpdateDLSettings>:
    d2d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d2da:	466b      	mov	r3, sp
    d2dc:	1dde      	adds	r6, r3, #7
    d2de:	1d9c      	adds	r4, r3, #6
    d2e0:	71d8      	strb	r0, [r3, #7]
    d2e2:	7021      	strb	r1, [r4, #0]
    d2e4:	2017      	movs	r0, #23
    d2e6:	0031      	movs	r1, r6
    d2e8:	4d0c      	ldr	r5, [pc, #48]	; (d31c <UpdateDLSettings+0x44>)
    d2ea:	47a8      	blx	r5
    d2ec:	2808      	cmp	r0, #8
    d2ee:	d107      	bne.n	d300 <UpdateDLSettings+0x28>
    d2f0:	4b0b      	ldr	r3, [pc, #44]	; (d320 <UpdateDLSettings+0x48>)
    d2f2:	7832      	ldrb	r2, [r6, #0]
    d2f4:	334e      	adds	r3, #78	; 0x4e
    d2f6:	701a      	strb	r2, [r3, #0]
    d2f8:	2100      	movs	r1, #0
    d2fa:	3807      	subs	r0, #7
    d2fc:	4b09      	ldr	r3, [pc, #36]	; (d324 <UpdateDLSettings+0x4c>)
    d2fe:	4798      	blx	r3
    d300:	0021      	movs	r1, r4
    d302:	2018      	movs	r0, #24
    d304:	47a8      	blx	r5
    d306:	2808      	cmp	r0, #8
    d308:	d107      	bne.n	d31a <UpdateDLSettings+0x42>
    d30a:	2101      	movs	r1, #1
    d30c:	4b04      	ldr	r3, [pc, #16]	; (d320 <UpdateDLSettings+0x48>)
    d30e:	7822      	ldrb	r2, [r4, #0]
    d310:	33c2      	adds	r3, #194	; 0xc2
    d312:	701a      	strb	r2, [r3, #0]
    d314:	0008      	movs	r0, r1
    d316:	4b03      	ldr	r3, [pc, #12]	; (d324 <UpdateDLSettings+0x4c>)
    d318:	4798      	blx	r3
    d31a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d31c:	00008aa1 	.word	0x00008aa1
    d320:	20001ce4 	.word	0x20001ce4
    d324:	00008ec5 	.word	0x00008ec5

0000d328 <UpdateTxPower>:
    d328:	b510      	push	{r4, lr}
    d32a:	4b04      	ldr	r3, [pc, #16]	; (d33c <UpdateTxPower+0x14>)
    d32c:	210a      	movs	r1, #10
    d32e:	33b5      	adds	r3, #181	; 0xb5
    d330:	7018      	strb	r0, [r3, #0]
    d332:	2000      	movs	r0, #0
    d334:	4b02      	ldr	r3, [pc, #8]	; (d340 <UpdateTxPower+0x18>)
    d336:	4798      	blx	r3
    d338:	bd10      	pop	{r4, pc}
    d33a:	46c0      	nop			; (mov r8, r8)
    d33c:	20001ce4 	.word	0x20001ce4
    d340:	00008ec5 	.word	0x00008ec5

0000d344 <UpdateRetransmissionAckTimeoutState>:
    d344:	4b10      	ldr	r3, [pc, #64]	; (d388 <UpdateRetransmissionAckTimeoutState+0x44>)
    d346:	b513      	push	{r0, r1, r4, lr}
    d348:	001a      	movs	r2, r3
    d34a:	32c8      	adds	r2, #200	; 0xc8
    d34c:	7812      	ldrb	r2, [r2, #0]
    d34e:	2a01      	cmp	r2, #1
    d350:	d108      	bne.n	d364 <UpdateRetransmissionAckTimeoutState+0x20>
    d352:	0018      	movs	r0, r3
    d354:	210e      	movs	r1, #14
    d356:	3050      	adds	r0, #80	; 0x50
    d358:	7802      	ldrb	r2, [r0, #0]
    d35a:	438a      	bics	r2, r1
    d35c:	0011      	movs	r1, r2
    d35e:	220c      	movs	r2, #12
    d360:	430a      	orrs	r2, r1
    d362:	7002      	strb	r2, [r0, #0]
    d364:	001a      	movs	r2, r3
    d366:	32a6      	adds	r2, #166	; 0xa6
    d368:	8811      	ldrh	r1, [r2, #0]
    d36a:	222c      	movs	r2, #44	; 0x2c
    d36c:	32ff      	adds	r2, #255	; 0xff
    d36e:	5c9a      	ldrb	r2, [r3, r2]
    d370:	33bc      	adds	r3, #188	; 0xbc
    d372:	1a8a      	subs	r2, r1, r2
    d374:	21fa      	movs	r1, #250	; 0xfa
    d376:	0089      	lsls	r1, r1, #2
    d378:	4351      	muls	r1, r2
    d37a:	2200      	movs	r2, #0
    d37c:	7818      	ldrb	r0, [r3, #0]
    d37e:	4c03      	ldr	r4, [pc, #12]	; (d38c <UpdateRetransmissionAckTimeoutState+0x48>)
    d380:	9200      	str	r2, [sp, #0]
    d382:	4b03      	ldr	r3, [pc, #12]	; (d390 <UpdateRetransmissionAckTimeoutState+0x4c>)
    d384:	47a0      	blx	r4
    d386:	bd13      	pop	{r0, r1, r4, pc}
    d388:	20001ce4 	.word	0x20001ce4
    d38c:	00009eed 	.word	0x00009eed
    d390:	0000ebcd 	.word	0x0000ebcd

0000d394 <UpdateReceiveWindow2Parameters>:
    d394:	4b06      	ldr	r3, [pc, #24]	; (d3b0 <UpdateReceiveWindow2Parameters+0x1c>)
    d396:	b510      	push	{r4, lr}
    d398:	001a      	movs	r2, r3
    d39a:	334a      	adds	r3, #74	; 0x4a
    d39c:	8018      	strh	r0, [r3, #0]
    d39e:	324e      	adds	r2, #78	; 0x4e
    d3a0:	0c00      	lsrs	r0, r0, #16
    d3a2:	8058      	strh	r0, [r3, #2]
    d3a4:	7011      	strb	r1, [r2, #0]
    d3a6:	2001      	movs	r0, #1
    d3a8:	2100      	movs	r1, #0
    d3aa:	4b02      	ldr	r3, [pc, #8]	; (d3b4 <UpdateReceiveWindow2Parameters+0x20>)
    d3ac:	4798      	blx	r3
    d3ae:	bd10      	pop	{r4, pc}
    d3b0:	20001ce4 	.word	0x20001ce4
    d3b4:	00008ec5 	.word	0x00008ec5

0000d3b8 <ResetParametersForConfirmedTransmission>:
    d3b8:	4b0a      	ldr	r3, [pc, #40]	; (d3e4 <ResetParametersForConfirmedTransmission+0x2c>)
    d3ba:	001a      	movs	r2, r3
    d3bc:	32c8      	adds	r2, #200	; 0xc8
    d3be:	7812      	ldrb	r2, [r2, #0]
    d3c0:	2a01      	cmp	r2, #1
    d3c2:	d105      	bne.n	d3d0 <ResetParametersForConfirmedTransmission+0x18>
    d3c4:	0019      	movs	r1, r3
    d3c6:	200e      	movs	r0, #14
    d3c8:	3150      	adds	r1, #80	; 0x50
    d3ca:	780a      	ldrb	r2, [r1, #0]
    d3cc:	4382      	bics	r2, r0
    d3ce:	700a      	strb	r2, [r1, #0]
    d3d0:	001a      	movs	r2, r3
    d3d2:	2100      	movs	r1, #0
    d3d4:	3360      	adds	r3, #96	; 0x60
    d3d6:	32b0      	adds	r2, #176	; 0xb0
    d3d8:	7011      	strb	r1, [r2, #0]
    d3da:	781a      	ldrb	r2, [r3, #0]
    d3dc:	3101      	adds	r1, #1
    d3de:	438a      	bics	r2, r1
    d3e0:	701a      	strb	r2, [r3, #0]
    d3e2:	4770      	bx	lr
    d3e4:	20001ce4 	.word	0x20001ce4

0000d3e8 <ResetParametersForUnconfirmedTransmission>:
    d3e8:	4b07      	ldr	r3, [pc, #28]	; (d408 <ResetParametersForUnconfirmedTransmission+0x20>)
    d3ea:	001a      	movs	r2, r3
    d3ec:	32c8      	adds	r2, #200	; 0xc8
    d3ee:	7812      	ldrb	r2, [r2, #0]
    d3f0:	2a01      	cmp	r2, #1
    d3f2:	d105      	bne.n	d400 <ResetParametersForUnconfirmedTransmission+0x18>
    d3f4:	0019      	movs	r1, r3
    d3f6:	200e      	movs	r0, #14
    d3f8:	3150      	adds	r1, #80	; 0x50
    d3fa:	780a      	ldrb	r2, [r1, #0]
    d3fc:	4382      	bics	r2, r0
    d3fe:	700a      	strb	r2, [r1, #0]
    d400:	2200      	movs	r2, #0
    d402:	33af      	adds	r3, #175	; 0xaf
    d404:	701a      	strb	r2, [r3, #0]
    d406:	4770      	bx	lr
    d408:	20001ce4 	.word	0x20001ce4

0000d40c <SetJoinFailState>:
    d40c:	b570      	push	{r4, r5, r6, lr}
    d40e:	4c11      	ldr	r4, [pc, #68]	; (d454 <SetJoinFailState+0x48>)
    d410:	2504      	movs	r5, #4
    d412:	0020      	movs	r0, r4
    d414:	3060      	adds	r0, #96	; 0x60
    d416:	7802      	ldrb	r2, [r0, #0]
    d418:	0021      	movs	r1, r4
    d41a:	43aa      	bics	r2, r5
    d41c:	7002      	strb	r2, [r0, #0]
    d41e:	22f0      	movs	r2, #240	; 0xf0
    d420:	3150      	adds	r1, #80	; 0x50
    d422:	780b      	ldrb	r3, [r1, #0]
    d424:	4013      	ands	r3, r2
    d426:	700b      	strb	r3, [r1, #0]
    d428:	490b      	ldr	r1, [pc, #44]	; (d458 <SetJoinFailState+0x4c>)
    d42a:	794a      	ldrb	r2, [r1, #5]
    d42c:	790b      	ldrb	r3, [r1, #4]
    d42e:	0212      	lsls	r2, r2, #8
    d430:	431a      	orrs	r2, r3
    d432:	798b      	ldrb	r3, [r1, #6]
    d434:	041b      	lsls	r3, r3, #16
    d436:	431a      	orrs	r2, r3
    d438:	79cb      	ldrb	r3, [r1, #7]
    d43a:	061b      	lsls	r3, r3, #24
    d43c:	4313      	orrs	r3, r2
    d43e:	d001      	beq.n	d444 <SetJoinFailState+0x38>
    d440:	2000      	movs	r0, #0
    d442:	4798      	blx	r3
    d444:	2300      	movs	r3, #0
    d446:	34c4      	adds	r4, #196	; 0xc4
    d448:	7023      	strb	r3, [r4, #0]
    d44a:	210b      	movs	r1, #11
    d44c:	4b03      	ldr	r3, [pc, #12]	; (d45c <SetJoinFailState+0x50>)
    d44e:	2001      	movs	r0, #1
    d450:	4798      	blx	r3
    d452:	bd70      	pop	{r4, r5, r6, pc}
    d454:	20001ce4 	.word	0x20001ce4
    d458:	20001f24 	.word	0x20001f24
    d45c:	00008ec5 	.word	0x00008ec5

0000d460 <ExecuteRxParamSetupReq>:
    d460:	b5f0      	push	{r4, r5, r6, r7, lr}
    d462:	b085      	sub	sp, #20
    d464:	7805      	ldrb	r5, [r0, #0]
    d466:	0004      	movs	r4, r0
    d468:	1c41      	adds	r1, r0, #1
    d46a:	2204      	movs	r2, #4
    d46c:	4b36      	ldr	r3, [pc, #216]	; (d548 <ExecuteRxParamSetupReq+0xe8>)
    d46e:	a803      	add	r0, sp, #12
    d470:	4798      	blx	r3
    d472:	2264      	movs	r2, #100	; 0x64
    d474:	9b03      	ldr	r3, [sp, #12]
    d476:	a903      	add	r1, sp, #12
    d478:	021b      	lsls	r3, r3, #8
    d47a:	0a1b      	lsrs	r3, r3, #8
    d47c:	4353      	muls	r3, r2
    d47e:	9303      	str	r3, [sp, #12]
    d480:	1d23      	adds	r3, r4, #4
    d482:	9301      	str	r3, [sp, #4]
    d484:	072b      	lsls	r3, r5, #28
    d486:	0f1b      	lsrs	r3, r3, #28
    d488:	b2da      	uxtb	r2, r3
    d48a:	9200      	str	r2, [sp, #0]
    d48c:	aa02      	add	r2, sp, #8
    d48e:	1c96      	adds	r6, r2, #2
    d490:	066d      	lsls	r5, r5, #25
    d492:	7033      	strb	r3, [r6, #0]
    d494:	1cd7      	adds	r7, r2, #3
    d496:	0f6d      	lsrs	r5, r5, #29
    d498:	2001      	movs	r0, #1
    d49a:	4b2c      	ldr	r3, [pc, #176]	; (d54c <ExecuteRxParamSetupReq+0xec>)
    d49c:	703d      	strb	r5, [r7, #0]
    d49e:	4798      	blx	r3
    d4a0:	4c2b      	ldr	r4, [pc, #172]	; (d550 <ExecuteRxParamSetupReq+0xf0>)
    d4a2:	2808      	cmp	r0, #8
    d4a4:	d109      	bne.n	d4ba <ExecuteRxParamSetupReq+0x5a>
    d4a6:	0023      	movs	r3, r4
    d4a8:	33ac      	adds	r3, #172	; 0xac
    d4aa:	781a      	ldrb	r2, [r3, #0]
    d4ac:	2303      	movs	r3, #3
    d4ae:	4353      	muls	r3, r2
    d4b0:	18e3      	adds	r3, r4, r3
    d4b2:	3360      	adds	r3, #96	; 0x60
    d4b4:	79da      	ldrb	r2, [r3, #7]
    d4b6:	4310      	orrs	r0, r2
    d4b8:	71d8      	strb	r0, [r3, #7]
    d4ba:	0031      	movs	r1, r6
    d4bc:	200f      	movs	r0, #15
    d4be:	4e23      	ldr	r6, [pc, #140]	; (d54c <ExecuteRxParamSetupReq+0xec>)
    d4c0:	47b0      	blx	r6
    d4c2:	2808      	cmp	r0, #8
    d4c4:	d10a      	bne.n	d4dc <ExecuteRxParamSetupReq+0x7c>
    d4c6:	0023      	movs	r3, r4
    d4c8:	33ac      	adds	r3, #172	; 0xac
    d4ca:	781a      	ldrb	r2, [r3, #0]
    d4cc:	2303      	movs	r3, #3
    d4ce:	4353      	muls	r3, r2
    d4d0:	2210      	movs	r2, #16
    d4d2:	18e3      	adds	r3, r4, r3
    d4d4:	3360      	adds	r3, #96	; 0x60
    d4d6:	79d9      	ldrb	r1, [r3, #7]
    d4d8:	430a      	orrs	r2, r1
    d4da:	71da      	strb	r2, [r3, #7]
    d4dc:	0039      	movs	r1, r7
    d4de:	2018      	movs	r0, #24
    d4e0:	47b0      	blx	r6
    d4e2:	2808      	cmp	r0, #8
    d4e4:	d10a      	bne.n	d4fc <ExecuteRxParamSetupReq+0x9c>
    d4e6:	0023      	movs	r3, r4
    d4e8:	33ac      	adds	r3, #172	; 0xac
    d4ea:	781a      	ldrb	r2, [r3, #0]
    d4ec:	2303      	movs	r3, #3
    d4ee:	4353      	muls	r3, r2
    d4f0:	2220      	movs	r2, #32
    d4f2:	18e3      	adds	r3, r4, r3
    d4f4:	3360      	adds	r3, #96	; 0x60
    d4f6:	79d9      	ldrb	r1, [r3, #7]
    d4f8:	430a      	orrs	r2, r1
    d4fa:	71da      	strb	r2, [r3, #7]
    d4fc:	0023      	movs	r3, r4
    d4fe:	33ac      	adds	r3, #172	; 0xac
    d500:	781a      	ldrb	r2, [r3, #0]
    d502:	2303      	movs	r3, #3
    d504:	4353      	muls	r3, r2
    d506:	18e3      	adds	r3, r4, r3
    d508:	3360      	adds	r3, #96	; 0x60
    d50a:	79de      	ldrb	r6, [r3, #7]
    d50c:	06f3      	lsls	r3, r6, #27
    d50e:	d518      	bpl.n	d542 <ExecuteRxParamSetupReq+0xe2>
    d510:	0733      	lsls	r3, r6, #28
    d512:	d516      	bpl.n	d542 <ExecuteRxParamSetupReq+0xe2>
    d514:	06b6      	lsls	r6, r6, #26
    d516:	0ff6      	lsrs	r6, r6, #31
    d518:	2e01      	cmp	r6, #1
    d51a:	d112      	bne.n	d542 <ExecuteRxParamSetupReq+0xe2>
    d51c:	0023      	movs	r3, r4
    d51e:	33c2      	adds	r3, #194	; 0xc2
    d520:	701d      	strb	r5, [r3, #0]
    d522:	0031      	movs	r1, r6
    d524:	0030      	movs	r0, r6
    d526:	4d0b      	ldr	r5, [pc, #44]	; (d554 <ExecuteRxParamSetupReq+0xf4>)
    d528:	47a8      	blx	r5
    d52a:	9900      	ldr	r1, [sp, #0]
    d52c:	9803      	ldr	r0, [sp, #12]
    d52e:	4b0a      	ldr	r3, [pc, #40]	; (d558 <ExecuteRxParamSetupReq+0xf8>)
    d530:	4798      	blx	r3
    d532:	2340      	movs	r3, #64	; 0x40
    d534:	3450      	adds	r4, #80	; 0x50
    d536:	7862      	ldrb	r2, [r4, #1]
    d538:	210b      	movs	r1, #11
    d53a:	4313      	orrs	r3, r2
    d53c:	7063      	strb	r3, [r4, #1]
    d53e:	0030      	movs	r0, r6
    d540:	47a8      	blx	r5
    d542:	9801      	ldr	r0, [sp, #4]
    d544:	b005      	add	sp, #20
    d546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d548:	000158c9 	.word	0x000158c9
    d54c:	00008aa1 	.word	0x00008aa1
    d550:	20001ce4 	.word	0x20001ce4
    d554:	00008ec5 	.word	0x00008ec5
    d558:	0000d395 	.word	0x0000d395

0000d55c <ExecuteDutyCycle>:
    d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d55e:	7803      	ldrb	r3, [r0, #0]
    d560:	1c47      	adds	r7, r0, #1
    d562:	2b0e      	cmp	r3, #14
    d564:	d814      	bhi.n	d590 <ExecuteDutyCycle+0x34>
    d566:	2601      	movs	r6, #1
    d568:	0032      	movs	r2, r6
    d56a:	4c10      	ldr	r4, [pc, #64]	; (d5ac <ExecuteDutyCycle+0x50>)
    d56c:	409a      	lsls	r2, r3
    d56e:	0023      	movs	r3, r4
    d570:	210b      	movs	r1, #11
    d572:	3364      	adds	r3, #100	; 0x64
    d574:	2000      	movs	r0, #0
    d576:	4d0e      	ldr	r5, [pc, #56]	; (d5b0 <ExecuteDutyCycle+0x54>)
    d578:	801a      	strh	r2, [r3, #0]
    d57a:	47a8      	blx	r5
    d57c:	2320      	movs	r3, #32
    d57e:	3450      	adds	r4, #80	; 0x50
    d580:	7862      	ldrb	r2, [r4, #1]
    d582:	210b      	movs	r1, #11
    d584:	4313      	orrs	r3, r2
    d586:	7063      	strb	r3, [r4, #1]
    d588:	0030      	movs	r0, r6
    d58a:	47a8      	blx	r5
    d58c:	0038      	movs	r0, r7
    d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d590:	2bff      	cmp	r3, #255	; 0xff
    d592:	d1fb      	bne.n	d58c <ExecuteDutyCycle+0x30>
    d594:	2240      	movs	r2, #64	; 0x40
    d596:	4b05      	ldr	r3, [pc, #20]	; (d5ac <ExecuteDutyCycle+0x50>)
    d598:	2001      	movs	r0, #1
    d59a:	3350      	adds	r3, #80	; 0x50
    d59c:	7819      	ldrb	r1, [r3, #0]
    d59e:	430a      	orrs	r2, r1
    d5a0:	701a      	strb	r2, [r3, #0]
    d5a2:	210b      	movs	r1, #11
    d5a4:	4b02      	ldr	r3, [pc, #8]	; (d5b0 <ExecuteDutyCycle+0x54>)
    d5a6:	4798      	blx	r3
    d5a8:	e7f0      	b.n	d58c <ExecuteDutyCycle+0x30>
    d5aa:	46c0      	nop			; (mov r8, r8)
    d5ac:	20001ce4 	.word	0x20001ce4
    d5b0:	00008ec5 	.word	0x00008ec5

0000d5b4 <ExecuteDlChannel>:
    d5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5b6:	b089      	sub	sp, #36	; 0x24
    d5b8:	7805      	ldrb	r5, [r0, #0]
    d5ba:	ab02      	add	r3, sp, #8
    d5bc:	1c41      	adds	r1, r0, #1
    d5be:	0007      	movs	r7, r0
    d5c0:	719d      	strb	r5, [r3, #6]
    d5c2:	1d9e      	adds	r6, r3, #6
    d5c4:	2204      	movs	r2, #4
    d5c6:	4b23      	ldr	r3, [pc, #140]	; (d654 <ExecuteDlChannel+0xa0>)
    d5c8:	a805      	add	r0, sp, #20
    d5ca:	4798      	blx	r3
    d5cc:	9b05      	ldr	r3, [sp, #20]
    d5ce:	a904      	add	r1, sp, #16
    d5d0:	021c      	lsls	r4, r3, #8
    d5d2:	2364      	movs	r3, #100	; 0x64
    d5d4:	0a24      	lsrs	r4, r4, #8
    d5d6:	435c      	muls	r4, r3
    d5d8:	1d3b      	adds	r3, r7, #4
    d5da:	9301      	str	r3, [sp, #4]
    d5dc:	2301      	movs	r3, #1
    d5de:	2015      	movs	r0, #21
    d5e0:	704b      	strb	r3, [r1, #1]
    d5e2:	4b1d      	ldr	r3, [pc, #116]	; (d658 <ExecuteDlChannel+0xa4>)
    d5e4:	9405      	str	r4, [sp, #20]
    d5e6:	700d      	strb	r5, [r1, #0]
    d5e8:	4798      	blx	r3
    d5ea:	2808      	cmp	r0, #8
    d5ec:	d12f      	bne.n	d64e <ExecuteDlChannel+0x9a>
    d5ee:	ab02      	add	r3, sp, #8
    d5f0:	1ddd      	adds	r5, r3, #7
    d5f2:	2300      	movs	r3, #0
    d5f4:	702b      	strb	r3, [r5, #0]
    d5f6:	7833      	ldrb	r3, [r6, #0]
    d5f8:	af06      	add	r7, sp, #24
    d5fa:	713b      	strb	r3, [r7, #4]
    d5fc:	002a      	movs	r2, r5
    d5fe:	0031      	movs	r1, r6
    d600:	300e      	adds	r0, #14
    d602:	4b16      	ldr	r3, [pc, #88]	; (d65c <ExecuteDlChannel+0xa8>)
    d604:	9406      	str	r4, [sp, #24]
    d606:	4798      	blx	r3
    d608:	280a      	cmp	r0, #10
    d60a:	d00d      	beq.n	d628 <ExecuteDlChannel+0x74>
    d60c:	782a      	ldrb	r2, [r5, #0]
    d60e:	2a01      	cmp	r2, #1
    d610:	d10a      	bne.n	d628 <ExecuteDlChannel+0x74>
    d612:	4b13      	ldr	r3, [pc, #76]	; (d660 <ExecuteDlChannel+0xac>)
    d614:	0019      	movs	r1, r3
    d616:	31ac      	adds	r1, #172	; 0xac
    d618:	7808      	ldrb	r0, [r1, #0]
    d61a:	2103      	movs	r1, #3
    d61c:	4341      	muls	r1, r0
    d61e:	185b      	adds	r3, r3, r1
    d620:	3360      	adds	r3, #96	; 0x60
    d622:	7a19      	ldrb	r1, [r3, #8]
    d624:	430a      	orrs	r2, r1
    d626:	721a      	strb	r2, [r3, #8]
    d628:	0039      	movs	r1, r7
    d62a:	2032      	movs	r0, #50	; 0x32
    d62c:	4b0d      	ldr	r3, [pc, #52]	; (d664 <ExecuteDlChannel+0xb0>)
    d62e:	4798      	blx	r3
    d630:	2808      	cmp	r0, #8
    d632:	d10c      	bne.n	d64e <ExecuteDlChannel+0x9a>
    d634:	4b0a      	ldr	r3, [pc, #40]	; (d660 <ExecuteDlChannel+0xac>)
    d636:	001a      	movs	r2, r3
    d638:	32ac      	adds	r2, #172	; 0xac
    d63a:	7811      	ldrb	r1, [r2, #0]
    d63c:	2203      	movs	r2, #3
    d63e:	434a      	muls	r2, r1
    d640:	189b      	adds	r3, r3, r2
    d642:	2280      	movs	r2, #128	; 0x80
    d644:	3360      	adds	r3, #96	; 0x60
    d646:	79d9      	ldrb	r1, [r3, #7]
    d648:	4252      	negs	r2, r2
    d64a:	430a      	orrs	r2, r1
    d64c:	71da      	strb	r2, [r3, #7]
    d64e:	9801      	ldr	r0, [sp, #4]
    d650:	b009      	add	sp, #36	; 0x24
    d652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d654:	000158c9 	.word	0x000158c9
    d658:	00008aa1 	.word	0x00008aa1
    d65c:	00008a85 	.word	0x00008a85
    d660:	20001ce4 	.word	0x20001ce4
    d664:	00008abd 	.word	0x00008abd

0000d668 <ExecuteTxParamSetup>:
    d668:	220f      	movs	r2, #15
    d66a:	b513      	push	{r0, r1, r4, lr}
    d66c:	7803      	ldrb	r3, [r0, #0]
    d66e:	4c0f      	ldr	r4, [pc, #60]	; (d6ac <ExecuteTxParamSetup+0x44>)
    d670:	401a      	ands	r2, r3
    d672:	5ca2      	ldrb	r2, [r4, r2]
    d674:	2401      	movs	r4, #1
    d676:	a901      	add	r1, sp, #4
    d678:	700a      	strb	r2, [r1, #0]
    d67a:	111a      	asrs	r2, r3, #4
    d67c:	115b      	asrs	r3, r3, #5
    d67e:	4023      	ands	r3, r4
    d680:	40a3      	lsls	r3, r4
    d682:	4022      	ands	r2, r4
    d684:	4313      	orrs	r3, r2
    d686:	704b      	strb	r3, [r1, #1]
    d688:	1904      	adds	r4, r0, r4
    d68a:	4b09      	ldr	r3, [pc, #36]	; (d6b0 <ExecuteTxParamSetup+0x48>)
    d68c:	2033      	movs	r0, #51	; 0x33
    d68e:	4798      	blx	r3
    d690:	2808      	cmp	r0, #8
    d692:	d009      	beq.n	d6a8 <ExecuteTxParamSetup+0x40>
    d694:	4b07      	ldr	r3, [pc, #28]	; (d6b4 <ExecuteTxParamSetup+0x4c>)
    d696:	001a      	movs	r2, r3
    d698:	32ac      	adds	r2, #172	; 0xac
    d69a:	7811      	ldrb	r1, [r2, #0]
    d69c:	2203      	movs	r2, #3
    d69e:	434a      	muls	r2, r1
    d6a0:	189b      	adds	r3, r3, r2
    d6a2:	22ff      	movs	r2, #255	; 0xff
    d6a4:	3366      	adds	r3, #102	; 0x66
    d6a6:	701a      	strb	r2, [r3, #0]
    d6a8:	0020      	movs	r0, r4
    d6aa:	bd16      	pop	{r1, r2, r4, pc}
    d6ac:	0001dca4 	.word	0x0001dca4
    d6b0:	00008abd 	.word	0x00008abd
    d6b4:	20001ce4 	.word	0x20001ce4

0000d6b8 <ExecuteLinkAdr>:
    d6b8:	220f      	movs	r2, #15
    d6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6bc:	0005      	movs	r5, r0
    d6be:	7803      	ldrb	r3, [r0, #0]
    d6c0:	b087      	sub	sp, #28
    d6c2:	401a      	ands	r2, r3
    d6c4:	a903      	add	r1, sp, #12
    d6c6:	700a      	strb	r2, [r1, #0]
    d6c8:	aa02      	add	r2, sp, #8
    d6ca:	1d94      	adds	r4, r2, #6
    d6cc:	1d57      	adds	r7, r2, #5
    d6ce:	091b      	lsrs	r3, r3, #4
    d6d0:	1c41      	adds	r1, r0, #1
    d6d2:	703b      	strb	r3, [r7, #0]
    d6d4:	2202      	movs	r2, #2
    d6d6:	0020      	movs	r0, r4
    d6d8:	4b3e      	ldr	r3, [pc, #248]	; (d7d4 <ExecuteLinkAdr+0x11c>)
    d6da:	4798      	blx	r3
    d6dc:	466a      	mov	r2, sp
    d6de:	1d2b      	adds	r3, r5, #4
    d6e0:	9301      	str	r3, [sp, #4]
    d6e2:	8823      	ldrh	r3, [r4, #0]
    d6e4:	2424      	movs	r4, #36	; 0x24
    d6e6:	2101      	movs	r1, #1
    d6e8:	9300      	str	r3, [sp, #0]
    d6ea:	8812      	ldrh	r2, [r2, #0]
    d6ec:	ab02      	add	r3, sp, #8
    d6ee:	815a      	strh	r2, [r3, #10]
    d6f0:	78ea      	ldrb	r2, [r5, #3]
    d6f2:	4e39      	ldr	r6, [pc, #228]	; (d7d8 <ExecuteLinkAdr+0x120>)
    d6f4:	0652      	lsls	r2, r2, #25
    d6f6:	0f52      	lsrs	r2, r2, #29
    d6f8:	34ff      	adds	r4, #255	; 0xff
    d6fa:	721a      	strb	r2, [r3, #8]
    d6fc:	5d33      	ldrb	r3, [r6, r4]
    d6fe:	2036      	movs	r0, #54	; 0x36
    d700:	438b      	bics	r3, r1
    d702:	1849      	adds	r1, r1, r1
    d704:	438b      	bics	r3, r1
    d706:	3102      	adds	r1, #2
    d708:	438b      	bics	r3, r1
    d70a:	5533      	strb	r3, [r6, r4]
    d70c:	466b      	mov	r3, sp
    d70e:	881b      	ldrh	r3, [r3, #0]
    d710:	a905      	add	r1, sp, #20
    d712:	804b      	strh	r3, [r1, #2]
    d714:	4b31      	ldr	r3, [pc, #196]	; (d7dc <ExecuteLinkAdr+0x124>)
    d716:	700a      	strb	r2, [r1, #0]
    d718:	4798      	blx	r3
    d71a:	2808      	cmp	r0, #8
    d71c:	d11c      	bne.n	d758 <ExecuteLinkAdr+0xa0>
    d71e:	2201      	movs	r2, #1
    d720:	5d33      	ldrb	r3, [r6, r4]
    d722:	a904      	add	r1, sp, #16
    d724:	4313      	orrs	r3, r2
    d726:	5533      	strb	r3, [r6, r4]
    d728:	aa02      	add	r2, sp, #8
    d72a:	4b2d      	ldr	r3, [pc, #180]	; (d7e0 <ExecuteLinkAdr+0x128>)
    d72c:	300b      	adds	r0, #11
    d72e:	4798      	blx	r3
    d730:	0039      	movs	r1, r7
    d732:	2010      	movs	r0, #16
    d734:	4b29      	ldr	r3, [pc, #164]	; (d7dc <ExecuteLinkAdr+0x124>)
    d736:	4798      	blx	r3
    d738:	2808      	cmp	r0, #8
    d73a:	d10d      	bne.n	d758 <ExecuteLinkAdr+0xa0>
    d73c:	ab02      	add	r3, sp, #8
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	7839      	ldrb	r1, [r7, #0]
    d742:	071a      	lsls	r2, r3, #28
    d744:	0f12      	lsrs	r2, r2, #28
    d746:	4291      	cmp	r1, r2
    d748:	db06      	blt.n	d758 <ExecuteLinkAdr+0xa0>
    d74a:	091b      	lsrs	r3, r3, #4
    d74c:	4299      	cmp	r1, r3
    d74e:	dc03      	bgt.n	d758 <ExecuteLinkAdr+0xa0>
    d750:	2202      	movs	r2, #2
    d752:	5d33      	ldrb	r3, [r6, r4]
    d754:	4313      	orrs	r3, r2
    d756:	5533      	strb	r3, [r6, r4]
    d758:	ae03      	add	r6, sp, #12
    d75a:	4b20      	ldr	r3, [pc, #128]	; (d7dc <ExecuteLinkAdr+0x124>)
    d75c:	0031      	movs	r1, r6
    d75e:	201d      	movs	r0, #29
    d760:	4798      	blx	r3
    d762:	4b1d      	ldr	r3, [pc, #116]	; (d7d8 <ExecuteLinkAdr+0x120>)
    d764:	2808      	cmp	r0, #8
    d766:	d103      	bne.n	d770 <ExecuteLinkAdr+0xb8>
    d768:	2204      	movs	r2, #4
    d76a:	5d19      	ldrb	r1, [r3, r4]
    d76c:	430a      	orrs	r2, r1
    d76e:	551a      	strb	r2, [r3, r4]
    d770:	2207      	movs	r2, #7
    d772:	5d18      	ldrb	r0, [r3, r4]
    d774:	4010      	ands	r0, r2
    d776:	4290      	cmp	r0, r2
    d778:	d122      	bne.n	d7c0 <ExecuteLinkAdr+0x108>
    d77a:	001a      	movs	r2, r3
    d77c:	4669      	mov	r1, sp
    d77e:	3228      	adds	r2, #40	; 0x28
    d780:	7809      	ldrb	r1, [r1, #0]
    d782:	32ff      	adds	r2, #255	; 0xff
    d784:	7011      	strb	r1, [r2, #0]
    d786:	9900      	ldr	r1, [sp, #0]
    d788:	2470      	movs	r4, #112	; 0x70
    d78a:	0a09      	lsrs	r1, r1, #8
    d78c:	7051      	strb	r1, [r2, #1]
    d78e:	2292      	movs	r2, #146	; 0x92
    d790:	7839      	ldrb	r1, [r7, #0]
    d792:	0052      	lsls	r2, r2, #1
    d794:	5499      	strb	r1, [r3, r2]
    d796:	212a      	movs	r1, #42	; 0x2a
    d798:	78ea      	ldrb	r2, [r5, #3]
    d79a:	31ff      	adds	r1, #255	; 0xff
    d79c:	0912      	lsrs	r2, r2, #4
    d79e:	4002      	ands	r2, r0
    d7a0:	5c58      	ldrb	r0, [r3, r1]
    d7a2:	0112      	lsls	r2, r2, #4
    d7a4:	43a0      	bics	r0, r4
    d7a6:	4302      	orrs	r2, r0
    d7a8:	545a      	strb	r2, [r3, r1]
    d7aa:	78e8      	ldrb	r0, [r5, #3]
    d7ac:	3c61      	subs	r4, #97	; 0x61
    d7ae:	b2d2      	uxtb	r2, r2
    d7b0:	4020      	ands	r0, r4
    d7b2:	43a2      	bics	r2, r4
    d7b4:	4302      	orrs	r2, r0
    d7b6:	545a      	strb	r2, [r3, r1]
    d7b8:	2226      	movs	r2, #38	; 0x26
    d7ba:	7831      	ldrb	r1, [r6, #0]
    d7bc:	32ff      	adds	r2, #255	; 0xff
    d7be:	5499      	strb	r1, [r3, r2]
    d7c0:	2293      	movs	r2, #147	; 0x93
    d7c2:	4905      	ldr	r1, [pc, #20]	; (d7d8 <ExecuteLinkAdr+0x120>)
    d7c4:	0052      	lsls	r2, r2, #1
    d7c6:	5c8b      	ldrb	r3, [r1, r2]
    d7c8:	9801      	ldr	r0, [sp, #4]
    d7ca:	3301      	adds	r3, #1
    d7cc:	548b      	strb	r3, [r1, r2]
    d7ce:	b007      	add	sp, #28
    d7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7d2:	46c0      	nop			; (mov r8, r8)
    d7d4:	000158c9 	.word	0x000158c9
    d7d8:	20001ce4 	.word	0x20001ce4
    d7dc:	00008aa1 	.word	0x00008aa1
    d7e0:	00008a85 	.word	0x00008a85

0000d7e4 <PrepareJoinRequestFrame>:
    d7e4:	2210      	movs	r2, #16
    d7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d7e8:	4d1b      	ldr	r5, [pc, #108]	; (d858 <PrepareJoinRequestFrame+0x74>)
    d7ea:	4b1c      	ldr	r3, [pc, #112]	; (d85c <PrepareJoinRequestFrame+0x78>)
    d7ec:	32ff      	adds	r2, #255	; 0xff
    d7ee:	2100      	movs	r1, #0
    d7f0:	0028      	movs	r0, r5
    d7f2:	4798      	blx	r3
    d7f4:	2300      	movs	r3, #0
    d7f6:	203c      	movs	r0, #60	; 0x3c
    d7f8:	4c19      	ldr	r4, [pc, #100]	; (d860 <PrepareJoinRequestFrame+0x7c>)
    d7fa:	702b      	strb	r3, [r5, #0]
    d7fc:	1ac1      	subs	r1, r0, r3
    d7fe:	5c61      	ldrb	r1, [r4, r1]
    d800:	18ea      	adds	r2, r5, r3
    d802:	3301      	adds	r3, #1
    d804:	7051      	strb	r1, [r2, #1]
    d806:	2b08      	cmp	r3, #8
    d808:	d1f8      	bne.n	d7fc <PrepareJoinRequestFrame+0x18>
    d80a:	2300      	movs	r3, #0
    d80c:	2044      	movs	r0, #68	; 0x44
    d80e:	1ac1      	subs	r1, r0, r3
    d810:	5c61      	ldrb	r1, [r4, r1]
    d812:	18ea      	adds	r2, r5, r3
    d814:	3301      	adds	r3, #1
    d816:	7251      	strb	r1, [r2, #9]
    d818:	2b08      	cmp	r3, #8
    d81a:	d1f8      	bne.n	d80e <PrepareJoinRequestFrame+0x2a>
    d81c:	4b11      	ldr	r3, [pc, #68]	; (d864 <PrepareJoinRequestFrame+0x80>)
    d81e:	4798      	blx	r3
    d820:	4b11      	ldr	r3, [pc, #68]	; (d868 <PrepareJoinRequestFrame+0x84>)
    d822:	4912      	ldr	r1, [pc, #72]	; (d86c <PrepareJoinRequestFrame+0x88>)
    d824:	4798      	blx	r3
    d826:	3498      	adds	r4, #152	; 0x98
    d828:	8021      	strh	r1, [r4, #0]
    d82a:	2202      	movs	r2, #2
    d82c:	0021      	movs	r1, r4
    d82e:	4810      	ldr	r0, [pc, #64]	; (d870 <PrepareJoinRequestFrame+0x8c>)
    d830:	4c10      	ldr	r4, [pc, #64]	; (d874 <PrepareJoinRequestFrame+0x90>)
    d832:	47a0      	blx	r4
    d834:	4e10      	ldr	r6, [pc, #64]	; (d878 <PrepareJoinRequestFrame+0x94>)
    d836:	2313      	movs	r3, #19
    d838:	0031      	movs	r1, r6
    d83a:	002a      	movs	r2, r5
    d83c:	480f      	ldr	r0, [pc, #60]	; (d87c <PrepareJoinRequestFrame+0x98>)
    d83e:	4d10      	ldr	r5, [pc, #64]	; (d880 <PrepareJoinRequestFrame+0x9c>)
    d840:	47a8      	blx	r5
    d842:	0031      	movs	r1, r6
    d844:	2204      	movs	r2, #4
    d846:	a801      	add	r0, sp, #4
    d848:	47a0      	blx	r4
    d84a:	2204      	movs	r2, #4
    d84c:	a901      	add	r1, sp, #4
    d84e:	480d      	ldr	r0, [pc, #52]	; (d884 <PrepareJoinRequestFrame+0xa0>)
    d850:	47a0      	blx	r4
    d852:	2017      	movs	r0, #23
    d854:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    d856:	46c0      	nop			; (mov r8, r8)
    d858:	20001e11 	.word	0x20001e11
    d85c:	0001594d 	.word	0x0001594d
    d860:	20001ce4 	.word	0x20001ce4
    d864:	00015acd 	.word	0x00015acd
    d868:	000129ed 	.word	0x000129ed
    d86c:	0000ffff 	.word	0x0000ffff
    d870:	20001e22 	.word	0x20001e22
    d874:	000158c9 	.word	0x000158c9
    d878:	2000109c 	.word	0x2000109c
    d87c:	20001d09 	.word	0x20001d09
    d880:	00010489 	.word	0x00010489
    d884:	20001e24 	.word	0x20001e24

0000d888 <ConfigureRadioRx>:
    d888:	b5f0      	push	{r4, r5, r6, r7, lr}
    d88a:	b087      	sub	sp, #28
    d88c:	466b      	mov	r3, sp
    d88e:	2600      	movs	r6, #0
    d890:	1ddc      	adds	r4, r3, #7
    d892:	71d8      	strb	r0, [r3, #7]
    d894:	729e      	strb	r6, [r3, #10]
    d896:	466a      	mov	r2, sp
    d898:	2301      	movs	r3, #1
    d89a:	72d3      	strb	r3, [r2, #11]
    d89c:	2215      	movs	r2, #21
    d89e:	ad03      	add	r5, sp, #12
    d8a0:	4f11      	ldr	r7, [pc, #68]	; (d8e8 <ConfigureRadioRx+0x60>)
    d8a2:	9100      	str	r1, [sp, #0]
    d8a4:	446a      	add	r2, sp
    d8a6:	0021      	movs	r1, r4
    d8a8:	2021      	movs	r0, #33	; 0x21
    d8aa:	80ae      	strh	r6, [r5, #4]
    d8ac:	47b8      	blx	r7
    d8ae:	2216      	movs	r2, #22
    d8b0:	0021      	movs	r1, r4
    d8b2:	446a      	add	r2, sp
    d8b4:	2022      	movs	r0, #34	; 0x22
    d8b6:	47b8      	blx	r7
    d8b8:	2217      	movs	r2, #23
    d8ba:	0021      	movs	r1, r4
    d8bc:	446a      	add	r2, sp
    d8be:	2023      	movs	r0, #35	; 0x23
    d8c0:	47b8      	blx	r7
    d8c2:	9b00      	ldr	r3, [sp, #0]
    d8c4:	0028      	movs	r0, r5
    d8c6:	9303      	str	r3, [sp, #12]
    d8c8:	4b08      	ldr	r3, [pc, #32]	; (d8ec <ConfigureRadioRx+0x64>)
    d8ca:	80ae      	strh	r6, [r5, #4]
    d8cc:	4798      	blx	r3
    d8ce:	230a      	movs	r3, #10
    d8d0:	446b      	add	r3, sp
    d8d2:	0019      	movs	r1, r3
    d8d4:	4c06      	ldr	r4, [pc, #24]	; (d8f0 <ConfigureRadioRx+0x68>)
    d8d6:	2014      	movs	r0, #20
    d8d8:	47a0      	blx	r4
    d8da:	230b      	movs	r3, #11
    d8dc:	446b      	add	r3, sp
    d8de:	0019      	movs	r1, r3
    d8e0:	2006      	movs	r0, #6
    d8e2:	47a0      	blx	r4
    d8e4:	b007      	add	sp, #28
    d8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8e8:	00008a85 	.word	0x00008a85
    d8ec:	0000cdb5 	.word	0x0000cdb5
    d8f0:	00010d99 	.word	0x00010d99

0000d8f4 <LorawanReceiveWindow1Callback>:
    d8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d8f6:	4c18      	ldr	r4, [pc, #96]	; (d958 <LorawanReceiveWindow1Callback+0x64>)
    d8f8:	0023      	movs	r3, r4
    d8fa:	3350      	adds	r3, #80	; 0x50
    d8fc:	781b      	ldrb	r3, [r3, #0]
    d8fe:	b25a      	sxtb	r2, r3
    d900:	2a00      	cmp	r2, #0
    d902:	db28      	blt.n	d956 <LorawanReceiveWindow1Callback+0x62>
    d904:	0022      	movs	r2, r4
    d906:	32c8      	adds	r2, #200	; 0xc8
    d908:	7812      	ldrb	r2, [r2, #0]
    d90a:	2a04      	cmp	r2, #4
    d90c:	d103      	bne.n	d916 <LorawanReceiveWindow1Callback+0x22>
    d90e:	07db      	lsls	r3, r3, #31
    d910:	d501      	bpl.n	d916 <LorawanReceiveWindow1Callback+0x22>
    d912:	4b12      	ldr	r3, [pc, #72]	; (d95c <LorawanReceiveWindow1Callback+0x68>)
    d914:	4798      	blx	r3
    d916:	0021      	movs	r1, r4
    d918:	220e      	movs	r2, #14
    d91a:	3150      	adds	r1, #80	; 0x50
    d91c:	780b      	ldrb	r3, [r1, #0]
    d91e:	ad01      	add	r5, sp, #4
    d920:	4393      	bics	r3, r2
    d922:	001a      	movs	r2, r3
    d924:	2306      	movs	r3, #6
    d926:	4313      	orrs	r3, r2
    d928:	0022      	movs	r2, r4
    d92a:	700b      	strb	r3, [r1, #0]
    d92c:	3248      	adds	r2, #72	; 0x48
    d92e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    d930:	7811      	ldrb	r1, [r2, #0]
    d932:	0a1b      	lsrs	r3, r3, #8
    d934:	3449      	adds	r4, #73	; 0x49
    d936:	0609      	lsls	r1, r1, #24
    d938:	4319      	orrs	r1, r3
    d93a:	7820      	ldrb	r0, [r4, #0]
    d93c:	4b08      	ldr	r3, [pc, #32]	; (d960 <LorawanReceiveWindow1Callback+0x6c>)
    d93e:	4798      	blx	r3
    d940:	2300      	movs	r3, #0
    d942:	702b      	strb	r3, [r5, #0]
    d944:	466b      	mov	r3, sp
    d946:	0021      	movs	r1, r4
    d948:	1d9a      	adds	r2, r3, #6
    d94a:	2003      	movs	r0, #3
    d94c:	4b05      	ldr	r3, [pc, #20]	; (d964 <LorawanReceiveWindow1Callback+0x70>)
    d94e:	4798      	blx	r3
    d950:	0028      	movs	r0, r5
    d952:	4b05      	ldr	r3, [pc, #20]	; (d968 <LorawanReceiveWindow1Callback+0x74>)
    d954:	4798      	blx	r3
    d956:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    d958:	20001ce4 	.word	0x20001ce4
    d95c:	000106b9 	.word	0x000106b9
    d960:	0000d889 	.word	0x0000d889
    d964:	00008a85 	.word	0x00008a85
    d968:	000120c9 	.word	0x000120c9

0000d96c <ConfigureRadioTx>:
    d96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d96e:	2517      	movs	r5, #23
    d970:	2300      	movs	r3, #0
    d972:	2616      	movs	r6, #22
    d974:	2701      	movs	r7, #1
    d976:	b087      	sub	sp, #28
    d978:	ac01      	add	r4, sp, #4
    d97a:	446d      	add	r5, sp
    d97c:	9001      	str	r0, [sp, #4]
    d97e:	702b      	strb	r3, [r5, #0]
    d980:	0020      	movs	r0, r4
    d982:	4b10      	ldr	r3, [pc, #64]	; (d9c4 <ConfigureRadioTx+0x58>)
    d984:	446e      	add	r6, sp
    d986:	9102      	str	r1, [sp, #8]
    d988:	9203      	str	r2, [sp, #12]
    d98a:	7037      	strb	r7, [r6, #0]
    d98c:	4798      	blx	r3
    d98e:	79e3      	ldrb	r3, [r4, #7]
    d990:	4c0d      	ldr	r4, [pc, #52]	; (d9c8 <ConfigureRadioTx+0x5c>)
    d992:	2b00      	cmp	r3, #0
    d994:	d00b      	beq.n	d9ae <ConfigureRadioTx+0x42>
    d996:	2391      	movs	r3, #145	; 0x91
    d998:	4a0c      	ldr	r2, [pc, #48]	; (d9cc <ConfigureRadioTx+0x60>)
    d99a:	005b      	lsls	r3, r3, #1
    d99c:	54d7      	strb	r7, [r2, r3]
    d99e:	490c      	ldr	r1, [pc, #48]	; (d9d0 <ConfigureRadioTx+0x64>)
    d9a0:	200b      	movs	r0, #11
    d9a2:	4b0c      	ldr	r3, [pc, #48]	; (d9d4 <ConfigureRadioTx+0x68>)
    d9a4:	4798      	blx	r3
    d9a6:	210a      	movs	r1, #10
    d9a8:	200b      	movs	r0, #11
    d9aa:	4469      	add	r1, sp
    d9ac:	47a0      	blx	r4
    d9ae:	a903      	add	r1, sp, #12
    d9b0:	2004      	movs	r0, #4
    d9b2:	47a0      	blx	r4
    d9b4:	0031      	movs	r1, r6
    d9b6:	2014      	movs	r0, #20
    d9b8:	47a0      	blx	r4
    d9ba:	0029      	movs	r1, r5
    d9bc:	2006      	movs	r0, #6
    d9be:	47a0      	blx	r4
    d9c0:	b007      	add	sp, #28
    d9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9c4:	0000cdb5 	.word	0x0000cdb5
    d9c8:	00010d99 	.word	0x00010d99
    d9cc:	20001ce4 	.word	0x20001ce4
    d9d0:	20001e05 	.word	0x20001e05
    d9d4:	00010cad 	.word	0x00010cad

0000d9d8 <LorawanGetChAndInitiateRadioTransmit>:
    d9d8:	2301      	movs	r3, #1
    d9da:	b530      	push	{r4, r5, lr}
    d9dc:	4c46      	ldr	r4, [pc, #280]	; (daf8 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    d9de:	b089      	sub	sp, #36	; 0x24
    d9e0:	a902      	add	r1, sp, #8
    d9e2:	700b      	strb	r3, [r1, #0]
    d9e4:	0023      	movs	r3, r4
    d9e6:	33b5      	adds	r3, #181	; 0xb5
    d9e8:	781b      	ldrb	r3, [r3, #0]
    d9ea:	704b      	strb	r3, [r1, #1]
    d9ec:	0023      	movs	r3, r4
    d9ee:	33b3      	adds	r3, #179	; 0xb3
    d9f0:	781b      	ldrb	r3, [r3, #0]
    d9f2:	708b      	strb	r3, [r1, #2]
    d9f4:	0023      	movs	r3, r4
    d9f6:	33c8      	adds	r3, #200	; 0xc8
    d9f8:	781b      	ldrb	r3, [r3, #0]
    d9fa:	2b01      	cmp	r3, #1
    d9fc:	d108      	bne.n	da10 <LorawanGetChAndInitiateRadioTransmit+0x38>
    d9fe:	0020      	movs	r0, r4
    da00:	220e      	movs	r2, #14
    da02:	3050      	adds	r0, #80	; 0x50
    da04:	7803      	ldrb	r3, [r0, #0]
    da06:	4393      	bics	r3, r2
    da08:	001a      	movs	r2, r3
    da0a:	230c      	movs	r3, #12
    da0c:	4313      	orrs	r3, r2
    da0e:	7003      	strb	r3, [r0, #0]
    da10:	aa05      	add	r2, sp, #20
    da12:	202d      	movs	r0, #45	; 0x2d
    da14:	4d39      	ldr	r5, [pc, #228]	; (dafc <LorawanGetChAndInitiateRadioTransmit+0x124>)
    da16:	47a8      	blx	r5
    da18:	0023      	movs	r3, r4
    da1a:	2808      	cmp	r0, #8
    da1c:	d132      	bne.n	da84 <LorawanGetChAndInitiateRadioTransmit+0xac>
    da1e:	33c8      	adds	r3, #200	; 0xc8
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	ad03      	add	r5, sp, #12
    da24:	2b04      	cmp	r3, #4
    da26:	d104      	bne.n	da32 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    da28:	3b03      	subs	r3, #3
    da2a:	702b      	strb	r3, [r5, #0]
    da2c:	0028      	movs	r0, r5
    da2e:	4b34      	ldr	r3, [pc, #208]	; (db00 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    da30:	4798      	blx	r3
    da32:	9805      	ldr	r0, [sp, #20]
    da34:	4b33      	ldr	r3, [pc, #204]	; (db04 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    da36:	9906      	ldr	r1, [sp, #24]
    da38:	9a07      	ldr	r2, [sp, #28]
    da3a:	4798      	blx	r3
    da3c:	0023      	movs	r3, r4
    da3e:	339a      	adds	r3, #154	; 0x9a
    da40:	881b      	ldrh	r3, [r3, #0]
    da42:	0028      	movs	r0, r5
    da44:	702b      	strb	r3, [r5, #0]
    da46:	4b30      	ldr	r3, [pc, #192]	; (db08 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    da48:	606b      	str	r3, [r5, #4]
    da4a:	4b30      	ldr	r3, [pc, #192]	; (db0c <LorawanGetChAndInitiateRadioTransmit+0x134>)
    da4c:	4798      	blx	r3
    da4e:	2800      	cmp	r0, #0
    da50:	d109      	bne.n	da66 <LorawanGetChAndInitiateRadioTransmit+0x8e>
    da52:	220e      	movs	r2, #14
    da54:	3450      	adds	r4, #80	; 0x50
    da56:	7823      	ldrb	r3, [r4, #0]
    da58:	4393      	bics	r3, r2
    da5a:	001a      	movs	r2, r3
    da5c:	2302      	movs	r3, #2
    da5e:	4313      	orrs	r3, r2
    da60:	7023      	strb	r3, [r4, #0]
    da62:	b009      	add	sp, #36	; 0x24
    da64:	bd30      	pop	{r4, r5, pc}
    da66:	232c      	movs	r3, #44	; 0x2c
    da68:	2200      	movs	r2, #0
    da6a:	33ff      	adds	r3, #255	; 0xff
    da6c:	5ce3      	ldrb	r3, [r4, r3]
    da6e:	4928      	ldr	r1, [pc, #160]	; (db10 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    da70:	34c7      	adds	r4, #199	; 0xc7
    da72:	4359      	muls	r1, r3
    da74:	4b27      	ldr	r3, [pc, #156]	; (db14 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    da76:	7820      	ldrb	r0, [r4, #0]
    da78:	18c9      	adds	r1, r1, r3
    da7a:	4b27      	ldr	r3, [pc, #156]	; (db18 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    da7c:	9200      	str	r2, [sp, #0]
    da7e:	4c27      	ldr	r4, [pc, #156]	; (db1c <LorawanGetChAndInitiateRadioTransmit+0x144>)
    da80:	47a0      	blx	r4
    da82:	e7ee      	b.n	da62 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    da84:	33e4      	adds	r3, #228	; 0xe4
    da86:	781b      	ldrb	r3, [r3, #0]
    da88:	079a      	lsls	r2, r3, #30
    da8a:	d516      	bpl.n	daba <LorawanGetChAndInitiateRadioTransmit+0xe2>
    da8c:	aa03      	add	r2, sp, #12
    da8e:	4924      	ldr	r1, [pc, #144]	; (db20 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    da90:	2024      	movs	r0, #36	; 0x24
    da92:	47a8      	blx	r5
    da94:	9b03      	ldr	r3, [sp, #12]
    da96:	1c5a      	adds	r2, r3, #1
    da98:	d001      	beq.n	da9e <LorawanGetChAndInitiateRadioTransmit+0xc6>
    da9a:	3314      	adds	r3, #20
    da9c:	9303      	str	r3, [sp, #12]
    da9e:	232c      	movs	r3, #44	; 0x2c
    daa0:	21fa      	movs	r1, #250	; 0xfa
    daa2:	33ff      	adds	r3, #255	; 0xff
    daa4:	5ce3      	ldrb	r3, [r4, r3]
    daa6:	9a03      	ldr	r2, [sp, #12]
    daa8:	0089      	lsls	r1, r1, #2
    daaa:	1ad3      	subs	r3, r2, r3
    daac:	2200      	movs	r2, #0
    daae:	4359      	muls	r1, r3
    dab0:	34bd      	adds	r4, #189	; 0xbd
    dab2:	7820      	ldrb	r0, [r4, #0]
    dab4:	9200      	str	r2, [sp, #0]
    dab6:	4b1b      	ldr	r3, [pc, #108]	; (db24 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    dab8:	e7e1      	b.n	da7e <LorawanGetChAndInitiateRadioTransmit+0xa6>
    daba:	075b      	lsls	r3, r3, #29
    dabc:	d508      	bpl.n	dad0 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    dabe:	aa03      	add	r2, sp, #12
    dac0:	4917      	ldr	r1, [pc, #92]	; (db20 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    dac2:	2031      	movs	r0, #49	; 0x31
    dac4:	47a8      	blx	r5
    dac6:	9b03      	ldr	r3, [sp, #12]
    dac8:	1c5a      	adds	r2, r3, #1
    daca:	d0e8      	beq.n	da9e <LorawanGetChAndInitiateRadioTransmit+0xc6>
    dacc:	3301      	adds	r3, #1
    dace:	e7e5      	b.n	da9c <LorawanGetChAndInitiateRadioTransmit+0xc4>
    dad0:	0023      	movs	r3, r4
    dad2:	2201      	movs	r2, #1
    dad4:	3360      	adds	r3, #96	; 0x60
    dad6:	781b      	ldrb	r3, [r3, #0]
    dad8:	401a      	ands	r2, r3
    dada:	d109      	bne.n	daf0 <LorawanGetChAndInitiateRadioTransmit+0x118>
    dadc:	232c      	movs	r3, #44	; 0x2c
    dade:	33ff      	adds	r3, #255	; 0xff
    dae0:	5ce3      	ldrb	r3, [r4, r3]
    dae2:	490b      	ldr	r1, [pc, #44]	; (db10 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    dae4:	34bd      	adds	r4, #189	; 0xbd
    dae6:	4359      	muls	r1, r3
    dae8:	4b0a      	ldr	r3, [pc, #40]	; (db14 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    daea:	7820      	ldrb	r0, [r4, #0]
    daec:	18c9      	adds	r1, r1, r3
    daee:	e7e1      	b.n	dab4 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    daf0:	4b0d      	ldr	r3, [pc, #52]	; (db28 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    daf2:	4798      	blx	r3
    daf4:	e7b5      	b.n	da62 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    daf6:	46c0      	nop			; (mov r8, r8)
    daf8:	20001ce4 	.word	0x20001ce4
    dafc:	00008a85 	.word	0x00008a85
    db00:	000120c9 	.word	0x000120c9
    db04:	0000d96d 	.word	0x0000d96d
    db08:	20001e21 	.word	0x20001e21
    db0c:	000116e9 	.word	0x000116e9
    db10:	fffffc18 	.word	0xfffffc18
    db14:	001e8480 	.word	0x001e8480
    db18:	0000db2d 	.word	0x0000db2d
    db1c:	00009eed 	.word	0x00009eed
    db20:	20001d97 	.word	0x20001d97
    db24:	0000dbe1 	.word	0x0000dbe1
    db28:	0000d345 	.word	0x0000d345

0000db2c <TransmissionErrorCallback>:
    db2c:	b530      	push	{r4, r5, lr}
    db2e:	4c22      	ldr	r4, [pc, #136]	; (dbb8 <TransmissionErrorCallback+0x8c>)
    db30:	2501      	movs	r5, #1
    db32:	0023      	movs	r3, r4
    db34:	b08b      	sub	sp, #44	; 0x2c
    db36:	a903      	add	r1, sp, #12
    db38:	700d      	strb	r5, [r1, #0]
    db3a:	33b5      	adds	r3, #181	; 0xb5
    db3c:	781b      	ldrb	r3, [r3, #0]
    db3e:	aa07      	add	r2, sp, #28
    db40:	704b      	strb	r3, [r1, #1]
    db42:	0023      	movs	r3, r4
    db44:	33b3      	adds	r3, #179	; 0xb3
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	202d      	movs	r0, #45	; 0x2d
    db4a:	708b      	strb	r3, [r1, #2]
    db4c:	4b1b      	ldr	r3, [pc, #108]	; (dbbc <TransmissionErrorCallback+0x90>)
    db4e:	4798      	blx	r3
    db50:	2808      	cmp	r0, #8
    db52:	d121      	bne.n	db98 <TransmissionErrorCallback+0x6c>
    db54:	a804      	add	r0, sp, #16
    db56:	4b1a      	ldr	r3, [pc, #104]	; (dbc0 <TransmissionErrorCallback+0x94>)
    db58:	7005      	strb	r5, [r0, #0]
    db5a:	4798      	blx	r3
    db5c:	9807      	ldr	r0, [sp, #28]
    db5e:	4b19      	ldr	r3, [pc, #100]	; (dbc4 <TransmissionErrorCallback+0x98>)
    db60:	9908      	ldr	r1, [sp, #32]
    db62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    db64:	4798      	blx	r3
    db66:	0023      	movs	r3, r4
    db68:	339a      	adds	r3, #154	; 0x9a
    db6a:	881b      	ldrh	r3, [r3, #0]
    db6c:	a805      	add	r0, sp, #20
    db6e:	7003      	strb	r3, [r0, #0]
    db70:	4b15      	ldr	r3, [pc, #84]	; (dbc8 <TransmissionErrorCallback+0x9c>)
    db72:	6043      	str	r3, [r0, #4]
    db74:	4b15      	ldr	r3, [pc, #84]	; (dbcc <TransmissionErrorCallback+0xa0>)
    db76:	4798      	blx	r3
    db78:	2800      	cmp	r0, #0
    db7a:	d01b      	beq.n	dbb4 <TransmissionErrorCallback+0x88>
    db7c:	0023      	movs	r3, r4
    db7e:	33c8      	adds	r3, #200	; 0xc8
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	42ab      	cmp	r3, r5
    db84:	d108      	bne.n	db98 <TransmissionErrorCallback+0x6c>
    db86:	0021      	movs	r1, r4
    db88:	220e      	movs	r2, #14
    db8a:	3150      	adds	r1, #80	; 0x50
    db8c:	780b      	ldrb	r3, [r1, #0]
    db8e:	4393      	bics	r3, r2
    db90:	001a      	movs	r2, r3
    db92:	230c      	movs	r3, #12
    db94:	4313      	orrs	r3, r2
    db96:	700b      	strb	r3, [r1, #0]
    db98:	232c      	movs	r3, #44	; 0x2c
    db9a:	2200      	movs	r2, #0
    db9c:	33ff      	adds	r3, #255	; 0xff
    db9e:	5ce3      	ldrb	r3, [r4, r3]
    dba0:	490b      	ldr	r1, [pc, #44]	; (dbd0 <TransmissionErrorCallback+0xa4>)
    dba2:	34c7      	adds	r4, #199	; 0xc7
    dba4:	4359      	muls	r1, r3
    dba6:	4b0b      	ldr	r3, [pc, #44]	; (dbd4 <TransmissionErrorCallback+0xa8>)
    dba8:	7820      	ldrb	r0, [r4, #0]
    dbaa:	18c9      	adds	r1, r1, r3
    dbac:	9200      	str	r2, [sp, #0]
    dbae:	4b0a      	ldr	r3, [pc, #40]	; (dbd8 <TransmissionErrorCallback+0xac>)
    dbb0:	4c0a      	ldr	r4, [pc, #40]	; (dbdc <TransmissionErrorCallback+0xb0>)
    dbb2:	47a0      	blx	r4
    dbb4:	b00b      	add	sp, #44	; 0x2c
    dbb6:	bd30      	pop	{r4, r5, pc}
    dbb8:	20001ce4 	.word	0x20001ce4
    dbbc:	00008a85 	.word	0x00008a85
    dbc0:	000120c9 	.word	0x000120c9
    dbc4:	0000d96d 	.word	0x0000d96d
    dbc8:	20001e21 	.word	0x20001e21
    dbcc:	000116e9 	.word	0x000116e9
    dbd0:	fffffc18 	.word	0xfffffc18
    dbd4:	001e8480 	.word	0x001e8480
    dbd8:	0000db2d 	.word	0x0000db2d
    dbdc:	00009eed 	.word	0x00009eed

0000dbe0 <UnconfirmedTransmissionCallback>:
    dbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbe2:	4c38      	ldr	r4, [pc, #224]	; (dcc4 <UnconfirmedTransmissionCallback+0xe4>)
    dbe4:	b08b      	sub	sp, #44	; 0x2c
    dbe6:	0023      	movs	r3, r4
    dbe8:	339a      	adds	r3, #154	; 0x9a
    dbea:	881b      	ldrh	r3, [r3, #0]
    dbec:	af05      	add	r7, sp, #20
    dbee:	703b      	strb	r3, [r7, #0]
    dbf0:	4b35      	ldr	r3, [pc, #212]	; (dcc8 <UnconfirmedTransmissionCallback+0xe8>)
    dbf2:	a903      	add	r1, sp, #12
    dbf4:	9306      	str	r3, [sp, #24]
    dbf6:	2301      	movs	r3, #1
    dbf8:	700b      	strb	r3, [r1, #0]
    dbfa:	0023      	movs	r3, r4
    dbfc:	0026      	movs	r6, r4
    dbfe:	33b5      	adds	r3, #181	; 0xb5
    dc00:	781b      	ldrb	r3, [r3, #0]
    dc02:	36b3      	adds	r6, #179	; 0xb3
    dc04:	704b      	strb	r3, [r1, #1]
    dc06:	7833      	ldrb	r3, [r6, #0]
    dc08:	aa07      	add	r2, sp, #28
    dc0a:	202d      	movs	r0, #45	; 0x2d
    dc0c:	4d2f      	ldr	r5, [pc, #188]	; (dccc <UnconfirmedTransmissionCallback+0xec>)
    dc0e:	708b      	strb	r3, [r1, #2]
    dc10:	47a8      	blx	r5
    dc12:	2808      	cmp	r0, #8
    dc14:	d12c      	bne.n	dc70 <UnconfirmedTransmissionCallback+0x90>
    dc16:	2301      	movs	r3, #1
    dc18:	a804      	add	r0, sp, #16
    dc1a:	7003      	strb	r3, [r0, #0]
    dc1c:	4b2c      	ldr	r3, [pc, #176]	; (dcd0 <UnconfirmedTransmissionCallback+0xf0>)
    dc1e:	4798      	blx	r3
    dc20:	9807      	ldr	r0, [sp, #28]
    dc22:	4b2c      	ldr	r3, [pc, #176]	; (dcd4 <UnconfirmedTransmissionCallback+0xf4>)
    dc24:	9908      	ldr	r1, [sp, #32]
    dc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dc28:	4798      	blx	r3
    dc2a:	0038      	movs	r0, r7
    dc2c:	4b2a      	ldr	r3, [pc, #168]	; (dcd8 <UnconfirmedTransmissionCallback+0xf8>)
    dc2e:	4798      	blx	r3
    dc30:	2800      	cmp	r0, #0
    dc32:	d01b      	beq.n	dc6c <UnconfirmedTransmissionCallback+0x8c>
    dc34:	0023      	movs	r3, r4
    dc36:	33c8      	adds	r3, #200	; 0xc8
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	2b01      	cmp	r3, #1
    dc3c:	d108      	bne.n	dc50 <UnconfirmedTransmissionCallback+0x70>
    dc3e:	0021      	movs	r1, r4
    dc40:	220e      	movs	r2, #14
    dc42:	3150      	adds	r1, #80	; 0x50
    dc44:	780b      	ldrb	r3, [r1, #0]
    dc46:	4393      	bics	r3, r2
    dc48:	001a      	movs	r2, r3
    dc4a:	230c      	movs	r3, #12
    dc4c:	4313      	orrs	r3, r2
    dc4e:	700b      	strb	r3, [r1, #0]
    dc50:	232c      	movs	r3, #44	; 0x2c
    dc52:	2200      	movs	r2, #0
    dc54:	33ff      	adds	r3, #255	; 0xff
    dc56:	5ce3      	ldrb	r3, [r4, r3]
    dc58:	4920      	ldr	r1, [pc, #128]	; (dcdc <UnconfirmedTransmissionCallback+0xfc>)
    dc5a:	34c7      	adds	r4, #199	; 0xc7
    dc5c:	4359      	muls	r1, r3
    dc5e:	4b20      	ldr	r3, [pc, #128]	; (dce0 <UnconfirmedTransmissionCallback+0x100>)
    dc60:	7820      	ldrb	r0, [r4, #0]
    dc62:	18c9      	adds	r1, r1, r3
    dc64:	4b1f      	ldr	r3, [pc, #124]	; (dce4 <UnconfirmedTransmissionCallback+0x104>)
    dc66:	9200      	str	r2, [sp, #0]
    dc68:	4c1f      	ldr	r4, [pc, #124]	; (dce8 <UnconfirmedTransmissionCallback+0x108>)
    dc6a:	47a0      	blx	r4
    dc6c:	b00b      	add	sp, #44	; 0x2c
    dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc70:	23fa      	movs	r3, #250	; 0xfa
    dc72:	00db      	lsls	r3, r3, #3
    dc74:	9304      	str	r3, [sp, #16]
    dc76:	0023      	movs	r3, r4
    dc78:	33e4      	adds	r3, #228	; 0xe4
    dc7a:	781b      	ldrb	r3, [r3, #0]
    dc7c:	079a      	lsls	r2, r3, #30
    dc7e:	d516      	bpl.n	dcae <UnconfirmedTransmissionCallback+0xce>
    dc80:	aa04      	add	r2, sp, #16
    dc82:	0031      	movs	r1, r6
    dc84:	2024      	movs	r0, #36	; 0x24
    dc86:	47a8      	blx	r5
    dc88:	9b04      	ldr	r3, [sp, #16]
    dc8a:	1c5a      	adds	r2, r3, #1
    dc8c:	d001      	beq.n	dc92 <UnconfirmedTransmissionCallback+0xb2>
    dc8e:	3314      	adds	r3, #20
    dc90:	9304      	str	r3, [sp, #16]
    dc92:	232c      	movs	r3, #44	; 0x2c
    dc94:	33ff      	adds	r3, #255	; 0xff
    dc96:	5ce3      	ldrb	r3, [r4, r3]
    dc98:	9a04      	ldr	r2, [sp, #16]
    dc9a:	21fa      	movs	r1, #250	; 0xfa
    dc9c:	1ad3      	subs	r3, r2, r3
    dc9e:	2200      	movs	r2, #0
    dca0:	0089      	lsls	r1, r1, #2
    dca2:	34bd      	adds	r4, #189	; 0xbd
    dca4:	4359      	muls	r1, r3
    dca6:	7820      	ldrb	r0, [r4, #0]
    dca8:	4b10      	ldr	r3, [pc, #64]	; (dcec <UnconfirmedTransmissionCallback+0x10c>)
    dcaa:	9200      	str	r2, [sp, #0]
    dcac:	e7dc      	b.n	dc68 <UnconfirmedTransmissionCallback+0x88>
    dcae:	075b      	lsls	r3, r3, #29
    dcb0:	d5ef      	bpl.n	dc92 <UnconfirmedTransmissionCallback+0xb2>
    dcb2:	aa04      	add	r2, sp, #16
    dcb4:	0031      	movs	r1, r6
    dcb6:	2031      	movs	r0, #49	; 0x31
    dcb8:	47a8      	blx	r5
    dcba:	9b04      	ldr	r3, [sp, #16]
    dcbc:	1c5a      	adds	r2, r3, #1
    dcbe:	d0e8      	beq.n	dc92 <UnconfirmedTransmissionCallback+0xb2>
    dcc0:	3301      	adds	r3, #1
    dcc2:	e7e5      	b.n	dc90 <UnconfirmedTransmissionCallback+0xb0>
    dcc4:	20001ce4 	.word	0x20001ce4
    dcc8:	20001e21 	.word	0x20001e21
    dccc:	00008a85 	.word	0x00008a85
    dcd0:	000120c9 	.word	0x000120c9
    dcd4:	0000d96d 	.word	0x0000d96d
    dcd8:	000116e9 	.word	0x000116e9
    dcdc:	fffffc18 	.word	0xfffffc18
    dce0:	001e8480 	.word	0x001e8480
    dce4:	0000db2d 	.word	0x0000db2d
    dce8:	00009eed 	.word	0x00009eed
    dcec:	0000dbe1 	.word	0x0000dbe1

0000dcf0 <UpdateJoinInProgress>:
    dcf0:	b570      	push	{r4, r5, r6, lr}
    dcf2:	2504      	movs	r5, #4
    dcf4:	4c0a      	ldr	r4, [pc, #40]	; (dd20 <UpdateJoinInProgress+0x30>)
    dcf6:	0002      	movs	r2, r0
    dcf8:	0021      	movs	r1, r4
    dcfa:	3460      	adds	r4, #96	; 0x60
    dcfc:	7826      	ldrb	r6, [r4, #0]
    dcfe:	2001      	movs	r0, #1
    dd00:	4335      	orrs	r5, r6
    dd02:	7025      	strb	r5, [r4, #0]
    dd04:	2407      	movs	r4, #7
    dd06:	4022      	ands	r2, r4
    dd08:	4082      	lsls	r2, r0
    dd0a:	3150      	adds	r1, #80	; 0x50
    dd0c:	780b      	ldrb	r3, [r1, #0]
    dd0e:	1924      	adds	r4, r4, r4
    dd10:	4383      	bics	r3, r0
    dd12:	43a3      	bics	r3, r4
    dd14:	4313      	orrs	r3, r2
    dd16:	700b      	strb	r3, [r1, #0]
    dd18:	210b      	movs	r1, #11
    dd1a:	4b02      	ldr	r3, [pc, #8]	; (dd24 <UpdateJoinInProgress+0x34>)
    dd1c:	4798      	blx	r3
    dd1e:	bd70      	pop	{r4, r5, r6, pc}
    dd20:	20001ce4 	.word	0x20001ce4
    dd24:	00008ec5 	.word	0x00008ec5

0000dd28 <LORAWAN_Join>:
    dd28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd2a:	4c2c      	ldr	r4, [pc, #176]	; (dddc <LORAWAN_Join+0xb4>)
    dd2c:	0005      	movs	r5, r0
    dd2e:	0023      	movs	r3, r4
    dd30:	3350      	adds	r3, #80	; 0x50
    dd32:	781b      	ldrb	r3, [r3, #0]
    dd34:	210f      	movs	r1, #15
    dd36:	b25a      	sxtb	r2, r3
    dd38:	2a00      	cmp	r2, #0
    dd3a:	db3c      	blt.n	ddb6 <LORAWAN_Join+0x8e>
    dd3c:	3903      	subs	r1, #3
    dd3e:	065b      	lsls	r3, r3, #25
    dd40:	d439      	bmi.n	ddb6 <LORAWAN_Join+0x8e>
    dd42:	0023      	movs	r3, r4
    dd44:	3360      	adds	r3, #96	; 0x60
    dd46:	781b      	ldrb	r3, [r3, #0]
    dd48:	3107      	adds	r1, #7
    dd4a:	075b      	lsls	r3, r3, #29
    dd4c:	d433      	bmi.n	ddb6 <LORAWAN_Join+0x8e>
    dd4e:	0023      	movs	r3, r4
    dd50:	33c8      	adds	r3, #200	; 0xc8
    dd52:	781b      	ldrb	r3, [r3, #0]
    dd54:	2b04      	cmp	r3, #4
    dd56:	d029      	beq.n	ddac <LORAWAN_Join+0x84>
    dd58:	0023      	movs	r3, r4
    dd5a:	33c8      	adds	r3, #200	; 0xc8
    dd5c:	781b      	ldrb	r3, [r3, #0]
    dd5e:	2b01      	cmp	r3, #1
    dd60:	d105      	bne.n	dd6e <LORAWAN_Join+0x46>
    dd62:	0023      	movs	r3, r4
    dd64:	3350      	adds	r3, #80	; 0x50
    dd66:	781a      	ldrb	r2, [r3, #0]
    dd68:	230e      	movs	r3, #14
    dd6a:	421a      	tst	r2, r3
    dd6c:	d122      	bne.n	ddb4 <LORAWAN_Join+0x8c>
    dd6e:	2102      	movs	r1, #2
    dd70:	2001      	movs	r0, #1
    dd72:	4e1b      	ldr	r6, [pc, #108]	; (dde0 <LORAWAN_Join+0xb8>)
    dd74:	7025      	strb	r5, [r4, #0]
    dd76:	47b0      	blx	r6
    dd78:	0023      	movs	r3, r4
    dd7a:	33aa      	adds	r3, #170	; 0xaa
    dd7c:	781b      	ldrb	r3, [r3, #0]
    dd7e:	2d00      	cmp	r5, #0
    dd80:	d11b      	bne.n	ddba <LORAWAN_Join+0x92>
    dd82:	210b      	movs	r1, #11
    dd84:	400b      	ands	r3, r1
    dd86:	428b      	cmp	r3, r1
    dd88:	d115      	bne.n	ddb6 <LORAWAN_Join+0x8e>
    dd8a:	0022      	movs	r2, r4
    dd8c:	2001      	movs	r0, #1
    dd8e:	3250      	adds	r2, #80	; 0x50
    dd90:	7813      	ldrb	r3, [r2, #0]
    dd92:	3460      	adds	r4, #96	; 0x60
    dd94:	4383      	bics	r3, r0
    dd96:	7013      	strb	r3, [r2, #0]
    dd98:	2304      	movs	r3, #4
    dd9a:	7822      	ldrb	r2, [r4, #0]
    dd9c:	4313      	orrs	r3, r2
    dd9e:	7023      	strb	r3, [r4, #0]
    dda0:	47b0      	blx	r6
    dda2:	0028      	movs	r0, r5
    dda4:	4b0f      	ldr	r3, [pc, #60]	; (dde4 <LORAWAN_Join+0xbc>)
    dda6:	4798      	blx	r3
    dda8:	2108      	movs	r1, #8
    ddaa:	e004      	b.n	ddb6 <LORAWAN_Join+0x8e>
    ddac:	4b0e      	ldr	r3, [pc, #56]	; (dde8 <LORAWAN_Join+0xc0>)
    ddae:	4798      	blx	r3
    ddb0:	2808      	cmp	r0, #8
    ddb2:	d0d1      	beq.n	dd58 <LORAWAN_Join+0x30>
    ddb4:	2111      	movs	r1, #17
    ddb6:	0008      	movs	r0, r1
    ddb8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ddba:	2234      	movs	r2, #52	; 0x34
    ddbc:	210b      	movs	r1, #11
    ddbe:	4013      	ands	r3, r2
    ddc0:	4293      	cmp	r3, r2
    ddc2:	d1f8      	bne.n	ddb6 <LORAWAN_Join+0x8e>
    ddc4:	2007      	movs	r0, #7
    ddc6:	4b09      	ldr	r3, [pc, #36]	; (ddec <LORAWAN_Join+0xc4>)
    ddc8:	4798      	blx	r3
    ddca:	2200      	movs	r2, #0
    ddcc:	34c6      	adds	r4, #198	; 0xc6
    ddce:	7820      	ldrb	r0, [r4, #0]
    ddd0:	4b07      	ldr	r3, [pc, #28]	; (ddf0 <LORAWAN_Join+0xc8>)
    ddd2:	9200      	str	r2, [sp, #0]
    ddd4:	4907      	ldr	r1, [pc, #28]	; (ddf4 <LORAWAN_Join+0xcc>)
    ddd6:	4c08      	ldr	r4, [pc, #32]	; (ddf8 <LORAWAN_Join+0xd0>)
    ddd8:	47a0      	blx	r4
    ddda:	e7e5      	b.n	dda8 <LORAWAN_Join+0x80>
    dddc:	20001ce4 	.word	0x20001ce4
    dde0:	00008ec5 	.word	0x00008ec5
    dde4:	00010c29 	.word	0x00010c29
    dde8:	00010619 	.word	0x00010619
    ddec:	0000dcf1 	.word	0x0000dcf1
    ddf0:	0000cc99 	.word	0x0000cc99
    ddf4:	0000c350 	.word	0x0000c350
    ddf8:	00009eed 	.word	0x00009eed

0000ddfc <EncryptFRMPayload>:
    ddfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddfe:	0007      	movs	r7, r0
    de00:	2401      	movs	r4, #1
    de02:	b089      	sub	sp, #36	; 0x24
    de04:	9305      	str	r3, [sp, #20]
    de06:	ab0e      	add	r3, sp, #56	; 0x38
    de08:	9204      	str	r2, [sp, #16]
    de0a:	cb04      	ldmia	r3!, {r2}
    de0c:	9103      	str	r1, [sp, #12]
    de0e:	781d      	ldrb	r5, [r3, #0]
    de10:	090b      	lsrs	r3, r1, #4
    de12:	9206      	str	r2, [sp, #24]
    de14:	9302      	str	r3, [sp, #8]
    de16:	9b02      	ldr	r3, [sp, #8]
    de18:	429c      	cmp	r4, r3
    de1a:	d922      	bls.n	de62 <EncryptFRMPayload+0x66>
    de1c:	260f      	movs	r6, #15
    de1e:	9b03      	ldr	r3, [sp, #12]
    de20:	4033      	ands	r3, r6
    de22:	1e1e      	subs	r6, r3, #0
    de24:	d01b      	beq.n	de5e <EncryptFRMPayload+0x62>
    de26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    de28:	0022      	movs	r2, r4
    de2a:	9300      	str	r3, [sp, #0]
    de2c:	9905      	ldr	r1, [sp, #20]
    de2e:	2301      	movs	r3, #1
    de30:	9804      	ldr	r0, [sp, #16]
    de32:	4c1d      	ldr	r4, [pc, #116]	; (dea8 <EncryptFRMPayload+0xac>)
    de34:	47a0      	blx	r4
    de36:	4c1d      	ldr	r4, [pc, #116]	; (deac <EncryptFRMPayload+0xb0>)
    de38:	4b1d      	ldr	r3, [pc, #116]	; (deb0 <EncryptFRMPayload+0xb4>)
    de3a:	9906      	ldr	r1, [sp, #24]
    de3c:	0020      	movs	r0, r4
    de3e:	4798      	blx	r3
    de40:	9b02      	ldr	r3, [sp, #8]
    de42:	011a      	lsls	r2, r3, #4
    de44:	2300      	movs	r3, #0
    de46:	18ba      	adds	r2, r7, r2
    de48:	5d1f      	ldrb	r7, [r3, r4]
    de4a:	5cd0      	ldrb	r0, [r2, r3]
    de4c:	18e9      	adds	r1, r5, r3
    de4e:	4078      	eors	r0, r7
    de50:	9f10      	ldr	r7, [sp, #64]	; 0x40
    de52:	b2c9      	uxtb	r1, r1
    de54:	3301      	adds	r3, #1
    de56:	5478      	strb	r0, [r7, r1]
    de58:	b2d9      	uxtb	r1, r3
    de5a:	428e      	cmp	r6, r1
    de5c:	d8f4      	bhi.n	de48 <EncryptFRMPayload+0x4c>
    de5e:	b009      	add	sp, #36	; 0x24
    de60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    de64:	0022      	movs	r2, r4
    de66:	9300      	str	r3, [sp, #0]
    de68:	9905      	ldr	r1, [sp, #20]
    de6a:	2301      	movs	r3, #1
    de6c:	9804      	ldr	r0, [sp, #16]
    de6e:	4e0e      	ldr	r6, [pc, #56]	; (dea8 <EncryptFRMPayload+0xac>)
    de70:	47b0      	blx	r6
    de72:	4e0e      	ldr	r6, [pc, #56]	; (deac <EncryptFRMPayload+0xb0>)
    de74:	4b0e      	ldr	r3, [pc, #56]	; (deb0 <EncryptFRMPayload+0xb4>)
    de76:	9906      	ldr	r1, [sp, #24]
    de78:	0030      	movs	r0, r6
    de7a:	4798      	blx	r3
    de7c:	2300      	movs	r3, #0
    de7e:	1e62      	subs	r2, r4, #1
    de80:	0112      	lsls	r2, r2, #4
    de82:	18ba      	adds	r2, r7, r2
    de84:	9207      	str	r2, [sp, #28]
    de86:	9a07      	ldr	r2, [sp, #28]
    de88:	18e9      	adds	r1, r5, r3
    de8a:	5cd0      	ldrb	r0, [r2, r3]
    de8c:	5d9a      	ldrb	r2, [r3, r6]
    de8e:	b2c9      	uxtb	r1, r1
    de90:	4050      	eors	r0, r2
    de92:	9a10      	ldr	r2, [sp, #64]	; 0x40
    de94:	3301      	adds	r3, #1
    de96:	5450      	strb	r0, [r2, r1]
    de98:	2b10      	cmp	r3, #16
    de9a:	d1f4      	bne.n	de86 <EncryptFRMPayload+0x8a>
    de9c:	3510      	adds	r5, #16
    de9e:	3401      	adds	r4, #1
    dea0:	b2ed      	uxtb	r5, r5
    dea2:	b2e4      	uxtb	r4, r4
    dea4:	e7b7      	b.n	de16 <EncryptFRMPayload+0x1a>
    dea6:	46c0      	nop			; (mov r8, r8)
    dea8:	0000cd75 	.word	0x0000cd75
    deac:	2000109c 	.word	0x2000109c
    deb0:	00010449 	.word	0x00010449

0000deb4 <AssemblePacket>:
    deb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    deb6:	2710      	movs	r7, #16
    deb8:	b08b      	sub	sp, #44	; 0x2c
    deba:	9304      	str	r3, [sp, #16]
    debc:	ab04      	add	r3, sp, #16
    debe:	829f      	strh	r7, [r3, #20]
    dec0:	2316      	movs	r3, #22
    dec2:	9205      	str	r2, [sp, #20]
    dec4:	aa04      	add	r2, sp, #16
    dec6:	189b      	adds	r3, r3, r2
    dec8:	2500      	movs	r5, #0
    deca:	2210      	movs	r2, #16
    decc:	ac08      	add	r4, sp, #32
    dece:	9006      	str	r0, [sp, #24]
    ded0:	9107      	str	r1, [sp, #28]
    ded2:	32ff      	adds	r2, #255	; 0xff
    ded4:	0029      	movs	r1, r5
    ded6:	4ea1      	ldr	r6, [pc, #644]	; (e15c <AssemblePacket+0x2a8>)
    ded8:	7025      	strb	r5, [r4, #0]
    deda:	48a1      	ldr	r0, [pc, #644]	; (e160 <AssemblePacket+0x2ac>)
    dedc:	801d      	strh	r5, [r3, #0]
    dede:	47b0      	blx	r6
    dee0:	003a      	movs	r2, r7
    dee2:	0029      	movs	r1, r5
    dee4:	489f      	ldr	r0, [pc, #636]	; (e164 <AssemblePacket+0x2b0>)
    dee6:	47b0      	blx	r6
    dee8:	221f      	movs	r2, #31
    deea:	7823      	ldrb	r3, [r4, #0]
    deec:	9906      	ldr	r1, [sp, #24]
    deee:	4013      	ands	r3, r2
    def0:	42a9      	cmp	r1, r5
    def2:	d041      	beq.n	df78 <AssemblePacket+0xc4>
    def4:	3a9f      	subs	r2, #159	; 0x9f
    def6:	4313      	orrs	r3, r2
    def8:	7023      	strb	r3, [r4, #0]
    defa:	4b9b      	ldr	r3, [pc, #620]	; (e168 <AssemblePacket+0x2b4>)
    defc:	3281      	adds	r2, #129	; 0x81
    defe:	3360      	adds	r3, #96	; 0x60
    df00:	7819      	ldrb	r1, [r3, #0]
    df02:	430a      	orrs	r2, r1
    df04:	701a      	strb	r2, [r3, #0]
    df06:	22e0      	movs	r2, #224	; 0xe0
    df08:	7823      	ldrb	r3, [r4, #0]
    df0a:	4895      	ldr	r0, [pc, #596]	; (e160 <AssemblePacket+0x2ac>)
    df0c:	4013      	ands	r3, r2
    df0e:	7023      	strb	r3, [r4, #0]
    df10:	4c95      	ldr	r4, [pc, #596]	; (e168 <AssemblePacket+0x2b4>)
    df12:	7403      	strb	r3, [r0, #16]
    df14:	3adc      	subs	r2, #220	; 0xdc
    df16:	4b95      	ldr	r3, [pc, #596]	; (e16c <AssemblePacket+0x2b8>)
    df18:	3011      	adds	r0, #17
    df1a:	1c61      	adds	r1, r4, #1
    df1c:	4798      	blx	r3
    df1e:	2315      	movs	r3, #21
    df20:	aa04      	add	r2, sp, #16
    df22:	8293      	strh	r3, [r2, #20]
    df24:	2300      	movs	r3, #0
    df26:	469c      	mov	ip, r3
    df28:	0023      	movs	r3, r4
    df2a:	3350      	adds	r3, #80	; 0x50
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	069b      	lsls	r3, r3, #26
    df30:	d400      	bmi.n	df34 <AssemblePacket+0x80>
    df32:	e0e2      	b.n	e0fa <AssemblePacket+0x246>
    df34:	0023      	movs	r3, r4
    df36:	33b3      	adds	r3, #179	; 0xb3
    df38:	781a      	ldrb	r2, [r3, #0]
    df3a:	4b8d      	ldr	r3, [pc, #564]	; (e170 <AssemblePacket+0x2bc>)
    df3c:	781d      	ldrb	r5, [r3, #0]
    df3e:	42aa      	cmp	r2, r5
    df40:	d200      	bcs.n	df44 <AssemblePacket+0x90>
    df42:	e0da      	b.n	e0fa <AssemblePacket+0x246>
    df44:	0021      	movs	r1, r4
    df46:	0026      	movs	r6, r4
    df48:	2780      	movs	r7, #128	; 0x80
    df4a:	3196      	adds	r1, #150	; 0x96
    df4c:	880b      	ldrh	r3, [r1, #0]
    df4e:	36a8      	adds	r6, #168	; 0xa8
    df50:	3301      	adds	r3, #1
    df52:	b29b      	uxth	r3, r3
    df54:	800b      	strh	r3, [r1, #0]
    df56:	7836      	ldrb	r6, [r6, #0]
    df58:	427f      	negs	r7, r7
    df5a:	1c38      	adds	r0, r7, #0
    df5c:	42b3      	cmp	r3, r6
    df5e:	d10f      	bne.n	df80 <AssemblePacket+0xcc>
    df60:	0023      	movs	r3, r4
    df62:	4662      	mov	r2, ip
    df64:	33c1      	adds	r3, #193	; 0xc1
    df66:	701a      	strb	r2, [r3, #0]
    df68:	2040      	movs	r0, #64	; 0x40
    df6a:	2310      	movs	r3, #16
    df6c:	3460      	adds	r4, #96	; 0x60
    df6e:	7822      	ldrb	r2, [r4, #0]
    df70:	4338      	orrs	r0, r7
    df72:	4313      	orrs	r3, r2
    df74:	7023      	strb	r3, [r4, #0]
    df76:	e02e      	b.n	dfd6 <AssemblePacket+0x122>
    df78:	2240      	movs	r2, #64	; 0x40
    df7a:	4313      	orrs	r3, r2
    df7c:	7023      	strb	r3, [r4, #0]
    df7e:	e7c2      	b.n	df06 <AssemblePacket+0x52>
    df80:	42b3      	cmp	r3, r6
    df82:	d928      	bls.n	dfd6 <AssemblePacket+0x122>
    df84:	42aa      	cmp	r2, r5
    df86:	d100      	bne.n	df8a <AssemblePacket+0xd6>
    df88:	e0b0      	b.n	e0ec <AssemblePacket+0x238>
    df8a:	0021      	movs	r1, r4
    df8c:	0020      	movs	r0, r4
    df8e:	31c1      	adds	r1, #193	; 0xc1
    df90:	780b      	ldrb	r3, [r1, #0]
    df92:	30a9      	adds	r0, #169	; 0xa9
    df94:	3301      	adds	r3, #1
    df96:	b2db      	uxtb	r3, r3
    df98:	700b      	strb	r3, [r1, #0]
    df9a:	7800      	ldrb	r0, [r0, #0]
    df9c:	3801      	subs	r0, #1
    df9e:	4283      	cmp	r3, r0
    dfa0:	dbe2      	blt.n	df68 <AssemblePacket+0xb4>
    dfa2:	4663      	mov	r3, ip
    dfa4:	700b      	strb	r3, [r1, #0]
    dfa6:	42aa      	cmp	r2, r5
    dfa8:	d90d      	bls.n	dfc6 <AssemblePacket+0x112>
    dfaa:	2313      	movs	r3, #19
    dfac:	a904      	add	r1, sp, #16
    dfae:	3a01      	subs	r2, #1
    dfb0:	185b      	adds	r3, r3, r1
    dfb2:	4d6f      	ldr	r5, [pc, #444]	; (e170 <AssemblePacket+0x2bc>)
    dfb4:	701a      	strb	r2, [r3, #0]
    dfb6:	2613      	movs	r6, #19
    dfb8:	ab04      	add	r3, sp, #16
    dfba:	18f6      	adds	r6, r6, r3
    dfbc:	782a      	ldrb	r2, [r5, #0]
    dfbe:	7833      	ldrb	r3, [r6, #0]
    dfc0:	429a      	cmp	r2, r3
    dfc2:	d800      	bhi.n	dfc6 <AssemblePacket+0x112>
    dfc4:	e084      	b.n	e0d0 <AssemblePacket+0x21c>
    dfc6:	2210      	movs	r2, #16
    dfc8:	2040      	movs	r0, #64	; 0x40
    dfca:	4b67      	ldr	r3, [pc, #412]	; (e168 <AssemblePacket+0x2b4>)
    dfcc:	4338      	orrs	r0, r7
    dfce:	3360      	adds	r3, #96	; 0x60
    dfd0:	7819      	ldrb	r1, [r3, #0]
    dfd2:	430a      	orrs	r2, r1
    dfd4:	701a      	strb	r2, [r3, #0]
    dfd6:	4b64      	ldr	r3, [pc, #400]	; (e168 <AssemblePacket+0x2b4>)
    dfd8:	2402      	movs	r4, #2
    dfda:	0019      	movs	r1, r3
    dfdc:	3160      	adds	r1, #96	; 0x60
    dfde:	780a      	ldrb	r2, [r1, #0]
    dfe0:	4222      	tst	r2, r4
    dfe2:	d003      	beq.n	dfec <AssemblePacket+0x138>
    dfe4:	2520      	movs	r5, #32
    dfe6:	43a2      	bics	r2, r4
    dfe8:	4328      	orrs	r0, r5
    dfea:	700a      	strb	r2, [r1, #0]
    dfec:	2210      	movs	r2, #16
    dfee:	0004      	movs	r4, r0
    dff0:	33ac      	adds	r3, #172	; 0xac
    dff2:	781e      	ldrb	r6, [r3, #0]
    dff4:	4394      	bics	r4, r2
    dff6:	2e00      	cmp	r6, #0
    dff8:	d003      	beq.n	e002 <AssemblePacket+0x14e>
    dffa:	9b04      	ldr	r3, [sp, #16]
    dffc:	2b00      	cmp	r3, #0
    dffe:	d000      	beq.n	e002 <AssemblePacket+0x14e>
    e000:	e07d      	b.n	e0fe <AssemblePacket+0x24a>
    e002:	230f      	movs	r3, #15
    e004:	439c      	bics	r4, r3
    e006:	0020      	movs	r0, r4
    e008:	ac09      	add	r4, sp, #36	; 0x24
    e00a:	8825      	ldrh	r5, [r4, #0]
    e00c:	4f54      	ldr	r7, [pc, #336]	; (e160 <AssemblePacket+0x2ac>)
    e00e:	2202      	movs	r2, #2
    e010:	5578      	strb	r0, [r7, r5]
    e012:	1c68      	adds	r0, r5, #1
    e014:	b280      	uxth	r0, r0
    e016:	19c0      	adds	r0, r0, r7
    e018:	4956      	ldr	r1, [pc, #344]	; (e174 <AssemblePacket+0x2c0>)
    e01a:	4b54      	ldr	r3, [pc, #336]	; (e16c <AssemblePacket+0x2b8>)
    e01c:	3503      	adds	r5, #3
    e01e:	4798      	blx	r3
    e020:	8025      	strh	r5, [r4, #0]
    e022:	2e00      	cmp	r6, #0
    e024:	d007      	beq.n	e036 <AssemblePacket+0x182>
    e026:	9b04      	ldr	r3, [sp, #16]
    e028:	2b00      	cmp	r3, #0
    e02a:	d004      	beq.n	e036 <AssemblePacket+0x182>
    e02c:	2201      	movs	r2, #1
    e02e:	0021      	movs	r1, r4
    e030:	0038      	movs	r0, r7
    e032:	4b51      	ldr	r3, [pc, #324]	; (e178 <AssemblePacket+0x2c4>)
    e034:	4798      	blx	r3
    e036:	466a      	mov	r2, sp
    e038:	8823      	ldrh	r3, [r4, #0]
    e03a:	7f12      	ldrb	r2, [r2, #28]
    e03c:	1c5d      	adds	r5, r3, #1
    e03e:	54fa      	strb	r2, [r7, r3]
    e040:	9b04      	ldr	r3, [sp, #16]
    e042:	b2ad      	uxth	r5, r5
    e044:	8025      	strh	r5, [r4, #0]
    e046:	2b00      	cmp	r3, #0
    e048:	d062      	beq.n	e110 <AssemblePacket+0x25c>
    e04a:	001a      	movs	r2, r3
    e04c:	1978      	adds	r0, r7, r5
    e04e:	9905      	ldr	r1, [sp, #20]
    e050:	4b46      	ldr	r3, [pc, #280]	; (e16c <AssemblePacket+0x2b8>)
    e052:	4798      	blx	r3
    e054:	466b      	mov	r3, sp
    e056:	4a44      	ldr	r2, [pc, #272]	; (e168 <AssemblePacket+0x2b4>)
    e058:	7c19      	ldrb	r1, [r3, #16]
    e05a:	6813      	ldr	r3, [r2, #0]
    e05c:	b2ed      	uxtb	r5, r5
    e05e:	0a18      	lsrs	r0, r3, #8
    e060:	7913      	ldrb	r3, [r2, #4]
    e062:	9501      	str	r5, [sp, #4]
    e064:	061b      	lsls	r3, r3, #24
    e066:	4303      	orrs	r3, r0
    e068:	9303      	str	r3, [sp, #12]
    e06a:	4b44      	ldr	r3, [pc, #272]	; (e17c <AssemblePacket+0x2c8>)
    e06c:	9702      	str	r7, [sp, #8]
    e06e:	9300      	str	r3, [sp, #0]
    e070:	6d53      	ldr	r3, [r2, #84]	; 0x54
    e072:	9805      	ldr	r0, [sp, #20]
    e074:	2200      	movs	r2, #0
    e076:	4d42      	ldr	r5, [pc, #264]	; (e180 <AssemblePacket+0x2cc>)
    e078:	47a8      	blx	r5
    e07a:	8823      	ldrh	r3, [r4, #0]
    e07c:	9a04      	ldr	r2, [sp, #16]
    e07e:	189b      	adds	r3, r3, r2
    e080:	8023      	strh	r3, [r4, #0]
    e082:	4c39      	ldr	r4, [pc, #228]	; (e168 <AssemblePacket+0x2b4>)
    e084:	ae09      	add	r6, sp, #36	; 0x24
    e086:	6823      	ldr	r3, [r4, #0]
    e088:	8832      	ldrh	r2, [r6, #0]
    e08a:	0a19      	lsrs	r1, r3, #8
    e08c:	7923      	ldrb	r3, [r4, #4]
    e08e:	3a10      	subs	r2, #16
    e090:	061b      	lsls	r3, r3, #24
    e092:	430b      	orrs	r3, r1
    e094:	9300      	str	r3, [sp, #0]
    e096:	6d61      	ldr	r1, [r4, #84]	; 0x54
    e098:	b2d2      	uxtb	r2, r2
    e09a:	2349      	movs	r3, #73	; 0x49
    e09c:	2000      	movs	r0, #0
    e09e:	4d39      	ldr	r5, [pc, #228]	; (e184 <AssemblePacket+0x2d0>)
    e0a0:	47a8      	blx	r5
    e0a2:	4f2f      	ldr	r7, [pc, #188]	; (e160 <AssemblePacket+0x2ac>)
    e0a4:	2210      	movs	r2, #16
    e0a6:	492f      	ldr	r1, [pc, #188]	; (e164 <AssemblePacket+0x2b0>)
    e0a8:	0038      	movs	r0, r7
    e0aa:	4b30      	ldr	r3, [pc, #192]	; (e16c <AssemblePacket+0x2b8>)
    e0ac:	4798      	blx	r3
    e0ae:	7833      	ldrb	r3, [r6, #0]
    e0b0:	003a      	movs	r2, r7
    e0b2:	492c      	ldr	r1, [pc, #176]	; (e164 <AssemblePacket+0x2b0>)
    e0b4:	4834      	ldr	r0, [pc, #208]	; (e188 <AssemblePacket+0x2d4>)
    e0b6:	4d35      	ldr	r5, [pc, #212]	; (e18c <AssemblePacket+0x2d8>)
    e0b8:	47a8      	blx	r5
    e0ba:	8836      	ldrh	r6, [r6, #0]
    e0bc:	2204      	movs	r2, #4
    e0be:	19f0      	adds	r0, r6, r7
    e0c0:	4928      	ldr	r1, [pc, #160]	; (e164 <AssemblePacket+0x2b0>)
    e0c2:	4b2a      	ldr	r3, [pc, #168]	; (e16c <AssemblePacket+0x2b8>)
    e0c4:	4798      	blx	r3
    e0c6:	3e0c      	subs	r6, #12
    e0c8:	349a      	adds	r4, #154	; 0x9a
    e0ca:	8026      	strh	r6, [r4, #0]
    e0cc:	b00b      	add	sp, #44	; 0x2c
    e0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0d0:	4b2f      	ldr	r3, [pc, #188]	; (e190 <AssemblePacket+0x2dc>)
    e0d2:	0031      	movs	r1, r6
    e0d4:	2011      	movs	r0, #17
    e0d6:	4798      	blx	r3
    e0d8:	7833      	ldrb	r3, [r6, #0]
    e0da:	2808      	cmp	r0, #8
    e0dc:	d03a      	beq.n	e154 <AssemblePacket+0x2a0>
    e0de:	782a      	ldrb	r2, [r5, #0]
    e0e0:	429a      	cmp	r2, r3
    e0e2:	d300      	bcc.n	e0e6 <AssemblePacket+0x232>
    e0e4:	e767      	b.n	dfb6 <AssemblePacket+0x102>
    e0e6:	3b01      	subs	r3, #1
    e0e8:	7033      	strb	r3, [r6, #0]
    e0ea:	e764      	b.n	dfb6 <AssemblePacket+0x102>
    e0ec:	4663      	mov	r3, ip
    e0ee:	800b      	strh	r3, [r1, #0]
    e0f0:	2210      	movs	r2, #16
    e0f2:	3460      	adds	r4, #96	; 0x60
    e0f4:	7823      	ldrb	r3, [r4, #0]
    e0f6:	4393      	bics	r3, r2
    e0f8:	e73c      	b.n	df74 <AssemblePacket+0xc0>
    e0fa:	2000      	movs	r0, #0
    e0fc:	e7f8      	b.n	e0f0 <AssemblePacket+0x23c>
    e0fe:	4b25      	ldr	r3, [pc, #148]	; (e194 <AssemblePacket+0x2e0>)
    e100:	4798      	blx	r3
    e102:	220f      	movs	r2, #15
    e104:	0003      	movs	r3, r0
    e106:	0020      	movs	r0, r4
    e108:	4013      	ands	r3, r2
    e10a:	4390      	bics	r0, r2
    e10c:	4318      	orrs	r0, r3
    e10e:	e77b      	b.n	e008 <AssemblePacket+0x154>
    e110:	4d15      	ldr	r5, [pc, #84]	; (e168 <AssemblePacket+0x2b4>)
    e112:	002b      	movs	r3, r5
    e114:	33ac      	adds	r3, #172	; 0xac
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	2b00      	cmp	r3, #0
    e11a:	d0b2      	beq.n	e082 <AssemblePacket+0x1ce>
    e11c:	2616      	movs	r6, #22
    e11e:	ab04      	add	r3, sp, #16
    e120:	18f6      	adds	r6, r6, r3
    e122:	9a04      	ldr	r2, [sp, #16]
    e124:	0031      	movs	r1, r6
    e126:	481c      	ldr	r0, [pc, #112]	; (e198 <AssemblePacket+0x2e4>)
    e128:	4b13      	ldr	r3, [pc, #76]	; (e178 <AssemblePacket+0x2c4>)
    e12a:	4798      	blx	r3
    e12c:	682b      	ldr	r3, [r5, #0]
    e12e:	7831      	ldrb	r1, [r6, #0]
    e130:	0a1a      	lsrs	r2, r3, #8
    e132:	792b      	ldrb	r3, [r5, #4]
    e134:	9702      	str	r7, [sp, #8]
    e136:	061b      	lsls	r3, r3, #24
    e138:	4313      	orrs	r3, r2
    e13a:	9303      	str	r3, [sp, #12]
    e13c:	7823      	ldrb	r3, [r4, #0]
    e13e:	9a04      	ldr	r2, [sp, #16]
    e140:	9301      	str	r3, [sp, #4]
    e142:	4b11      	ldr	r3, [pc, #68]	; (e188 <AssemblePacket+0x2d4>)
    e144:	4814      	ldr	r0, [pc, #80]	; (e198 <AssemblePacket+0x2e4>)
    e146:	9300      	str	r3, [sp, #0]
    e148:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    e14a:	4d0d      	ldr	r5, [pc, #52]	; (e180 <AssemblePacket+0x2cc>)
    e14c:	47a8      	blx	r5
    e14e:	8823      	ldrh	r3, [r4, #0]
    e150:	8832      	ldrh	r2, [r6, #0]
    e152:	e794      	b.n	e07e <AssemblePacket+0x1ca>
    e154:	34b3      	adds	r4, #179	; 0xb3
    e156:	7023      	strb	r3, [r4, #0]
    e158:	e735      	b.n	dfc6 <AssemblePacket+0x112>
    e15a:	46c0      	nop			; (mov r8, r8)
    e15c:	0001594d 	.word	0x0001594d
    e160:	20001e11 	.word	0x20001e11
    e164:	2000109c 	.word	0x2000109c
    e168:	20001ce4 	.word	0x20001ce4
    e16c:	000158c9 	.word	0x000158c9
    e170:	20001da2 	.word	0x20001da2
    e174:	20001d38 	.word	0x20001d38
    e178:	0000cad9 	.word	0x0000cad9
    e17c:	20001cf9 	.word	0x20001cf9
    e180:	0000ddfd 	.word	0x0000ddfd
    e184:	0000cd75 	.word	0x0000cd75
    e188:	20001ce9 	.word	0x20001ce9
    e18c:	00010489 	.word	0x00010489
    e190:	00008aa1 	.word	0x00008aa1
    e194:	0000c9d5 	.word	0x0000c9d5
    e198:	20001f2c 	.word	0x20001f2c

0000e19c <UpdateTransactionCompleteCbParams>:
    e19c:	2390      	movs	r3, #144	; 0x90
    e19e:	2201      	movs	r2, #1
    e1a0:	b570      	push	{r4, r5, r6, lr}
    e1a2:	4915      	ldr	r1, [pc, #84]	; (e1f8 <UpdateTransactionCompleteCbParams+0x5c>)
    e1a4:	4c15      	ldr	r4, [pc, #84]	; (e1fc <UpdateTransactionCompleteCbParams+0x60>)
    e1a6:	005b      	lsls	r3, r3, #1
    e1a8:	54e2      	strb	r2, [r4, r3]
    e1aa:	784a      	ldrb	r2, [r1, #1]
    e1ac:	780b      	ldrb	r3, [r1, #0]
    e1ae:	0212      	lsls	r2, r2, #8
    e1b0:	431a      	orrs	r2, r3
    e1b2:	788b      	ldrb	r3, [r1, #2]
    e1b4:	041b      	lsls	r3, r3, #16
    e1b6:	431a      	orrs	r2, r3
    e1b8:	78cb      	ldrb	r3, [r1, #3]
    e1ba:	061b      	lsls	r3, r3, #24
    e1bc:	4313      	orrs	r3, r2
    e1be:	d012      	beq.n	e1e6 <UpdateTransactionCompleteCbParams+0x4a>
    e1c0:	0022      	movs	r2, r4
    e1c2:	2504      	movs	r5, #4
    e1c4:	32cc      	adds	r2, #204	; 0xcc
    e1c6:	6812      	ldr	r2, [r2, #0]
    e1c8:	422a      	tst	r2, r5
    e1ca:	d00c      	beq.n	e1e6 <UpdateTransactionCompleteCbParams+0x4a>
    e1cc:	0022      	movs	r2, r4
    e1ce:	32d0      	adds	r2, #208	; 0xd0
    e1d0:	6812      	ldr	r2, [r2, #0]
    e1d2:	2a00      	cmp	r2, #0
    e1d4:	d007      	beq.n	e1e6 <UpdateTransactionCompleteCbParams+0x4a>
    e1d6:	0021      	movs	r1, r4
    e1d8:	31d4      	adds	r1, #212	; 0xd4
    e1da:	700d      	strb	r5, [r1, #0]
    e1dc:	0025      	movs	r5, r4
    e1de:	35d8      	adds	r5, #216	; 0xd8
    e1e0:	7028      	strb	r0, [r5, #0]
    e1e2:	0010      	movs	r0, r2
    e1e4:	4798      	blx	r3
    e1e6:	2390      	movs	r3, #144	; 0x90
    e1e8:	005b      	lsls	r3, r3, #1
    e1ea:	5ce3      	ldrb	r3, [r4, r3]
    e1ec:	2b00      	cmp	r3, #0
    e1ee:	d002      	beq.n	e1f6 <UpdateTransactionCompleteCbParams+0x5a>
    e1f0:	2300      	movs	r3, #0
    e1f2:	34d0      	adds	r4, #208	; 0xd0
    e1f4:	6023      	str	r3, [r4, #0]
    e1f6:	bd70      	pop	{r4, r5, r6, pc}
    e1f8:	20001f24 	.word	0x20001f24
    e1fc:	20001ce4 	.word	0x20001ce4

0000e200 <UpdateRxDataAvailableCbParams>:
    e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e202:	4e13      	ldr	r6, [pc, #76]	; (e250 <UpdateRxDataAvailableCbParams+0x50>)
    e204:	7874      	ldrb	r4, [r6, #1]
    e206:	7835      	ldrb	r5, [r6, #0]
    e208:	0224      	lsls	r4, r4, #8
    e20a:	432c      	orrs	r4, r5
    e20c:	78b5      	ldrb	r5, [r6, #2]
    e20e:	042d      	lsls	r5, r5, #16
    e210:	432c      	orrs	r4, r5
    e212:	78f5      	ldrb	r5, [r6, #3]
    e214:	062d      	lsls	r5, r5, #24
    e216:	4325      	orrs	r5, r4
    e218:	d019      	beq.n	e24e <UpdateRxDataAvailableCbParams+0x4e>
    e21a:	4c0e      	ldr	r4, [pc, #56]	; (e254 <UpdateRxDataAvailableCbParams+0x54>)
    e21c:	2702      	movs	r7, #2
    e21e:	0026      	movs	r6, r4
    e220:	36cc      	adds	r6, #204	; 0xcc
    e222:	6836      	ldr	r6, [r6, #0]
    e224:	423e      	tst	r6, r7
    e226:	d012      	beq.n	e24e <UpdateRxDataAvailableCbParams+0x4e>
    e228:	0026      	movs	r6, r4
    e22a:	36d4      	adds	r6, #212	; 0xd4
    e22c:	7037      	strb	r7, [r6, #0]
    e22e:	0027      	movs	r7, r4
    e230:	37d8      	adds	r7, #216	; 0xd8
    e232:	6038      	str	r0, [r7, #0]
    e234:	0020      	movs	r0, r4
    e236:	30dc      	adds	r0, #220	; 0xdc
    e238:	6001      	str	r1, [r0, #0]
    e23a:	0021      	movs	r1, r4
    e23c:	31e0      	adds	r1, #224	; 0xe0
    e23e:	700a      	strb	r2, [r1, #0]
    e240:	0022      	movs	r2, r4
    e242:	34d0      	adds	r4, #208	; 0xd0
    e244:	32e1      	adds	r2, #225	; 0xe1
    e246:	7013      	strb	r3, [r2, #0]
    e248:	0031      	movs	r1, r6
    e24a:	6820      	ldr	r0, [r4, #0]
    e24c:	47a8      	blx	r5
    e24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e250:	20001f24 	.word	0x20001f24
    e254:	20001ce4 	.word	0x20001ce4

0000e258 <LorawanNotifyAppOnRxdone>:
    e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e25a:	4c25      	ldr	r4, [pc, #148]	; (e2f0 <LorawanNotifyAppOnRxdone+0x98>)
    e25c:	0007      	movs	r7, r0
    e25e:	0023      	movs	r3, r4
    e260:	33c8      	adds	r3, #200	; 0xc8
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	000d      	movs	r5, r1
    e266:	0016      	movs	r6, r2
    e268:	2b01      	cmp	r3, #1
    e26a:	d136      	bne.n	e2da <LorawanNotifyAppOnRxdone+0x82>
    e26c:	0022      	movs	r2, r4
    e26e:	210e      	movs	r1, #14
    e270:	3250      	adds	r2, #80	; 0x50
    e272:	7813      	ldrb	r3, [r2, #0]
    e274:	438b      	bics	r3, r1
    e276:	7013      	strb	r3, [r2, #0]
    e278:	491e      	ldr	r1, [pc, #120]	; (e2f4 <LorawanNotifyAppOnRxdone+0x9c>)
    e27a:	784a      	ldrb	r2, [r1, #1]
    e27c:	780b      	ldrb	r3, [r1, #0]
    e27e:	0212      	lsls	r2, r2, #8
    e280:	431a      	orrs	r2, r3
    e282:	788b      	ldrb	r3, [r1, #2]
    e284:	041b      	lsls	r3, r3, #16
    e286:	431a      	orrs	r2, r3
    e288:	78cb      	ldrb	r3, [r1, #3]
    e28a:	061b      	lsls	r3, r3, #24
    e28c:	4313      	orrs	r3, r2
    e28e:	d023      	beq.n	e2d8 <LorawanNotifyAppOnRxdone+0x80>
    e290:	0022      	movs	r2, r4
    e292:	2120      	movs	r1, #32
    e294:	3260      	adds	r2, #96	; 0x60
    e296:	7813      	ldrb	r3, [r2, #0]
    e298:	438b      	bics	r3, r1
    e29a:	7013      	strb	r3, [r2, #0]
    e29c:	0023      	movs	r3, r4
    e29e:	33c8      	adds	r3, #200	; 0xc8
    e2a0:	781b      	ldrb	r3, [r3, #0]
    e2a2:	7878      	ldrb	r0, [r7, #1]
    e2a4:	469c      	mov	ip, r3
    e2a6:	78fa      	ldrb	r2, [r7, #3]
    e2a8:	78b9      	ldrb	r1, [r7, #2]
    e2aa:	793b      	ldrb	r3, [r7, #4]
    e2ac:	4667      	mov	r7, ip
    e2ae:	0209      	lsls	r1, r1, #8
    e2b0:	4301      	orrs	r1, r0
    e2b2:	0410      	lsls	r0, r2, #16
    e2b4:	4308      	orrs	r0, r1
    e2b6:	061b      	lsls	r3, r3, #24
    e2b8:	4318      	orrs	r0, r3
    e2ba:	0032      	movs	r2, r6
    e2bc:	2308      	movs	r3, #8
    e2be:	0029      	movs	r1, r5
    e2c0:	2f04      	cmp	r7, #4
    e2c2:	d112      	bne.n	e2ea <LorawanNotifyAppOnRxdone+0x92>
    e2c4:	4d0c      	ldr	r5, [pc, #48]	; (e2f8 <LorawanNotifyAppOnRxdone+0xa0>)
    e2c6:	47a8      	blx	r5
    e2c8:	2390      	movs	r3, #144	; 0x90
    e2ca:	005b      	lsls	r3, r3, #1
    e2cc:	5ce3      	ldrb	r3, [r4, r3]
    e2ce:	2b00      	cmp	r3, #0
    e2d0:	d102      	bne.n	e2d8 <LorawanNotifyAppOnRxdone+0x80>
    e2d2:	2008      	movs	r0, #8
    e2d4:	4b09      	ldr	r3, [pc, #36]	; (e2fc <LorawanNotifyAppOnRxdone+0xa4>)
    e2d6:	4798      	blx	r3
    e2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2da:	2b04      	cmp	r3, #4
    e2dc:	d1cc      	bne.n	e278 <LorawanNotifyAppOnRxdone+0x20>
    e2de:	0023      	movs	r3, r4
    e2e0:	33bc      	adds	r3, #188	; 0xbc
    e2e2:	7818      	ldrb	r0, [r3, #0]
    e2e4:	4b06      	ldr	r3, [pc, #24]	; (e300 <LorawanNotifyAppOnRxdone+0xa8>)
    e2e6:	4798      	blx	r3
    e2e8:	e7c6      	b.n	e278 <LorawanNotifyAppOnRxdone+0x20>
    e2ea:	4d06      	ldr	r5, [pc, #24]	; (e304 <LorawanNotifyAppOnRxdone+0xac>)
    e2ec:	47a8      	blx	r5
    e2ee:	e7eb      	b.n	e2c8 <LorawanNotifyAppOnRxdone+0x70>
    e2f0:	20001ce4 	.word	0x20001ce4
    e2f4:	20001f24 	.word	0x20001f24
    e2f8:	000107e9 	.word	0x000107e9
    e2fc:	0000e19d 	.word	0x0000e19d
    e300:	0000a1f1 	.word	0x0000a1f1
    e304:	0000e201 	.word	0x0000e201

0000e308 <LorawanSetReceiveWindow2Parameters>:
    e308:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e30a:	466b      	mov	r3, sp
    e30c:	1cdd      	adds	r5, r3, #3
    e30e:	9001      	str	r0, [sp, #4]
    e310:	7029      	strb	r1, [r5, #0]
    e312:	2001      	movs	r0, #1
    e314:	a901      	add	r1, sp, #4
    e316:	4c09      	ldr	r4, [pc, #36]	; (e33c <LorawanSetReceiveWindow2Parameters+0x34>)
    e318:	47a0      	blx	r4
    e31a:	2808      	cmp	r0, #8
    e31c:	d002      	beq.n	e324 <LorawanSetReceiveWindow2Parameters+0x1c>
    e31e:	240a      	movs	r4, #10
    e320:	0020      	movs	r0, r4
    e322:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e324:	0029      	movs	r1, r5
    e326:	200f      	movs	r0, #15
    e328:	47a0      	blx	r4
    e32a:	0004      	movs	r4, r0
    e32c:	2808      	cmp	r0, #8
    e32e:	d1f6      	bne.n	e31e <LorawanSetReceiveWindow2Parameters+0x16>
    e330:	7829      	ldrb	r1, [r5, #0]
    e332:	9801      	ldr	r0, [sp, #4]
    e334:	4b02      	ldr	r3, [pc, #8]	; (e340 <LorawanSetReceiveWindow2Parameters+0x38>)
    e336:	4798      	blx	r3
    e338:	e7f2      	b.n	e320 <LorawanSetReceiveWindow2Parameters+0x18>
    e33a:	46c0      	nop			; (mov r8, r8)
    e33c:	00008aa1 	.word	0x00008aa1
    e340:	0000d395 	.word	0x0000d395

0000e344 <LorawanSetFrequency>:
    e344:	b507      	push	{r0, r1, r2, lr}
    e346:	466b      	mov	r3, sp
    e348:	9100      	str	r1, [sp, #0]
    e34a:	7118      	strb	r0, [r3, #4]
    e34c:	4669      	mov	r1, sp
    e34e:	2000      	movs	r0, #0
    e350:	4b01      	ldr	r3, [pc, #4]	; (e358 <LorawanSetFrequency+0x14>)
    e352:	4798      	blx	r3
    e354:	bd0e      	pop	{r1, r2, r3, pc}
    e356:	46c0      	nop			; (mov r8, r8)
    e358:	00008abd 	.word	0x00008abd

0000e35c <LorawanGetReceiveWindow2Parameters>:
    e35c:	4a06      	ldr	r2, [pc, #24]	; (e378 <LorawanGetReceiveWindow2Parameters+0x1c>)
    e35e:	0013      	movs	r3, r2
    e360:	334e      	adds	r3, #78	; 0x4e
    e362:	781b      	ldrb	r3, [r3, #0]
    e364:	7103      	strb	r3, [r0, #4]
    e366:	0013      	movs	r3, r2
    e368:	324c      	adds	r2, #76	; 0x4c
    e36a:	334a      	adds	r3, #74	; 0x4a
    e36c:	8819      	ldrh	r1, [r3, #0]
    e36e:	8813      	ldrh	r3, [r2, #0]
    e370:	041b      	lsls	r3, r3, #16
    e372:	430b      	orrs	r3, r1
    e374:	6003      	str	r3, [r0, #0]
    e376:	4770      	bx	lr
    e378:	20001ce4 	.word	0x20001ce4

0000e37c <LORAWAN_GetAttr>:
    e37c:	b530      	push	{r4, r5, lr}
    e37e:	000b      	movs	r3, r1
    e380:	b085      	sub	sp, #20
    e382:	0014      	movs	r4, r2
    e384:	2835      	cmp	r0, #53	; 0x35
    e386:	d837      	bhi.n	e3f8 <LORAWAN_GetAttr+0x7c>
    e388:	f004 f9b6 	bl	126f8 <__gnu_thumb1_case_uhi>
    e38c:	00580039 	.word	0x00580039
    e390:	006c005c 	.word	0x006c005c
    e394:	00680064 	.word	0x00680064
    e398:	00760070 	.word	0x00760070
    e39c:	007e007b 	.word	0x007e007b
    e3a0:	00840081 	.word	0x00840081
    e3a4:	008f0087 	.word	0x008f0087
    e3a8:	00950092 	.word	0x00950092
    e3ac:	009c0099 	.word	0x009c0099
    e3b0:	00a2009f 	.word	0x00a2009f
    e3b4:	00cd00a5 	.word	0x00cd00a5
    e3b8:	00a800ab 	.word	0x00a800ab
    e3bc:	00d400da 	.word	0x00d400da
    e3c0:	00c300c8 	.word	0x00c300c8
    e3c4:	003600bc 	.word	0x003600bc
    e3c8:	00b6008c 	.word	0x00b6008c
    e3cc:	00b300b9 	.word	0x00b300b9
    e3d0:	00d100b0 	.word	0x00d100b0
    e3d4:	003f00d7 	.word	0x003f00d7
    e3d8:	0041003f 	.word	0x0041003f
    e3dc:	00f000e2 	.word	0x00f000e2
    e3e0:	00e700ec 	.word	0x00e700ec
    e3e4:	003600f3 	.word	0x003600f3
    e3e8:	00fb00f7 	.word	0x00fb00f7
    e3ec:	01050100 	.word	0x01050100
    e3f0:	010e010a 	.word	0x010e010a
    e3f4:	01140111 	.word	0x01140111
    e3f8:	200a      	movs	r0, #10
    e3fa:	b005      	add	sp, #20
    e3fc:	bd30      	pop	{r4, r5, pc}
    e3fe:	2208      	movs	r2, #8
    e400:	4971      	ldr	r1, [pc, #452]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e402:	313d      	adds	r1, #61	; 0x3d
    e404:	0020      	movs	r0, r4
    e406:	4b71      	ldr	r3, [pc, #452]	; (e5cc <LORAWAN_GetAttr+0x250>)
    e408:	4798      	blx	r3
    e40a:	2008      	movs	r0, #8
    e40c:	e7f5      	b.n	e3fa <LORAWAN_GetAttr+0x7e>
    e40e:	4669      	mov	r1, sp
    e410:	4b6f      	ldr	r3, [pc, #444]	; (e5d0 <LORAWAN_GetAttr+0x254>)
    e412:	201d      	movs	r0, #29
    e414:	4798      	blx	r3
    e416:	4b6c      	ldr	r3, [pc, #432]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e418:	a902      	add	r1, sp, #8
    e41a:	33e8      	adds	r3, #232	; 0xe8
    e41c:	881b      	ldrh	r3, [r3, #0]
    e41e:	2208      	movs	r2, #8
    e420:	808b      	strh	r3, [r1, #4]
    e422:	466b      	mov	r3, sp
    e424:	791b      	ldrb	r3, [r3, #4]
    e426:	718b      	strb	r3, [r1, #6]
    e428:	466b      	mov	r3, sp
    e42a:	881b      	ldrh	r3, [r3, #0]
    e42c:	800b      	strh	r3, [r1, #0]
    e42e:	466b      	mov	r3, sp
    e430:	885b      	ldrh	r3, [r3, #2]
    e432:	804b      	strh	r3, [r1, #2]
    e434:	466b      	mov	r3, sp
    e436:	795b      	ldrb	r3, [r3, #5]
    e438:	71cb      	strb	r3, [r1, #7]
    e43a:	e7e3      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e43c:	4962      	ldr	r1, [pc, #392]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e43e:	2208      	movs	r2, #8
    e440:	3135      	adds	r1, #53	; 0x35
    e442:	e7df      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e444:	4b60      	ldr	r3, [pc, #384]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e446:	681a      	ldr	r2, [r3, #0]
    e448:	791b      	ldrb	r3, [r3, #4]
    e44a:	0a12      	lsrs	r2, r2, #8
    e44c:	061b      	lsls	r3, r3, #24
    e44e:	4313      	orrs	r3, r2
    e450:	6023      	str	r3, [r4, #0]
    e452:	e7da      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e454:	495c      	ldr	r1, [pc, #368]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e456:	2210      	movs	r2, #16
    e458:	3105      	adds	r1, #5
    e45a:	e7d3      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e45c:	495a      	ldr	r1, [pc, #360]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e45e:	2210      	movs	r2, #16
    e460:	3115      	adds	r1, #21
    e462:	e7cf      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e464:	4958      	ldr	r1, [pc, #352]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e466:	2210      	movs	r2, #16
    e468:	3125      	adds	r1, #37	; 0x25
    e46a:	e7cb      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e46c:	4b56      	ldr	r3, [pc, #344]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e46e:	3350      	adds	r3, #80	; 0x50
    e470:	781b      	ldrb	r3, [r3, #0]
    e472:	069b      	lsls	r3, r3, #26
    e474:	0fdb      	lsrs	r3, r3, #31
    e476:	e002      	b.n	e47e <LORAWAN_GetAttr+0x102>
    e478:	4b53      	ldr	r3, [pc, #332]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e47a:	33b3      	adds	r3, #179	; 0xb3
    e47c:	781b      	ldrb	r3, [r3, #0]
    e47e:	7023      	strb	r3, [r4, #0]
    e480:	e7c3      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e482:	4b51      	ldr	r3, [pc, #324]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e484:	33b5      	adds	r3, #181	; 0xb5
    e486:	e7f9      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e488:	4b4f      	ldr	r3, [pc, #316]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e48a:	33cb      	adds	r3, #203	; 0xcb
    e48c:	e7f6      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e48e:	4b4e      	ldr	r3, [pc, #312]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e492:	e7dd      	b.n	e450 <LORAWAN_GetAttr+0xd4>
    e494:	4b4c      	ldr	r3, [pc, #304]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e498:	e7da      	b.n	e450 <LORAWAN_GetAttr+0xd4>
    e49a:	4b4b      	ldr	r3, [pc, #300]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e49c:	339c      	adds	r3, #156	; 0x9c
    e49e:	881b      	ldrh	r3, [r3, #0]
    e4a0:	8023      	strh	r3, [r4, #0]
    e4a2:	e7b2      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e4a4:	4b48      	ldr	r3, [pc, #288]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4a6:	339e      	adds	r3, #158	; 0x9e
    e4a8:	e7f9      	b.n	e49e <LORAWAN_GetAttr+0x122>
    e4aa:	4b47      	ldr	r3, [pc, #284]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4ac:	33a0      	adds	r3, #160	; 0xa0
    e4ae:	e7f6      	b.n	e49e <LORAWAN_GetAttr+0x122>
    e4b0:	4b45      	ldr	r3, [pc, #276]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4b2:	33a2      	adds	r3, #162	; 0xa2
    e4b4:	e7f3      	b.n	e49e <LORAWAN_GetAttr+0x122>
    e4b6:	4b44      	ldr	r3, [pc, #272]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4b8:	33a4      	adds	r3, #164	; 0xa4
    e4ba:	881b      	ldrh	r3, [r3, #0]
    e4bc:	e7df      	b.n	e47e <LORAWAN_GetAttr+0x102>
    e4be:	4b42      	ldr	r3, [pc, #264]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4c0:	33a8      	adds	r3, #168	; 0xa8
    e4c2:	e7db      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4c4:	4b40      	ldr	r3, [pc, #256]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4c6:	33a9      	adds	r3, #169	; 0xa9
    e4c8:	e7d8      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4ca:	4b3f      	ldr	r3, [pc, #252]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4cc:	33a6      	adds	r3, #166	; 0xa6
    e4ce:	e7f4      	b.n	e4ba <LORAWAN_GetAttr+0x13e>
    e4d0:	4b3d      	ldr	r3, [pc, #244]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4d2:	33ae      	adds	r3, #174	; 0xae
    e4d4:	e7d2      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4d6:	4b3c      	ldr	r3, [pc, #240]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4d8:	33ad      	adds	r3, #173	; 0xad
    e4da:	e7cf      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4dc:	4b3a      	ldr	r3, [pc, #232]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4de:	33b4      	adds	r3, #180	; 0xb4
    e4e0:	e7cc      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4e2:	4b39      	ldr	r3, [pc, #228]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4e4:	3350      	adds	r3, #80	; 0x50
    e4e6:	781b      	ldrb	r3, [r3, #0]
    e4e8:	06db      	lsls	r3, r3, #27
    e4ea:	e7c3      	b.n	e474 <LORAWAN_GetAttr+0xf8>
    e4ec:	4b36      	ldr	r3, [pc, #216]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4ee:	33b2      	adds	r3, #178	; 0xb2
    e4f0:	e7c4      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4f2:	4b35      	ldr	r3, [pc, #212]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4f4:	33b1      	adds	r3, #177	; 0xb1
    e4f6:	e7c1      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e4f8:	4b33      	ldr	r3, [pc, #204]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e4fa:	3364      	adds	r3, #100	; 0x64
    e4fc:	e7cf      	b.n	e49e <LORAWAN_GetAttr+0x122>
    e4fe:	4b32      	ldr	r3, [pc, #200]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    e502:	e7a5      	b.n	e450 <LORAWAN_GetAttr+0xd4>
    e504:	2016      	movs	r0, #22
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	a902      	add	r1, sp, #8
    e50a:	700b      	strb	r3, [r1, #0]
    e50c:	4b31      	ldr	r3, [pc, #196]	; (e5d4 <LORAWAN_GetAttr+0x258>)
    e50e:	4798      	blx	r3
    e510:	e77b      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	a902      	add	r1, sp, #8
    e516:	700b      	strb	r3, [r1, #0]
    e518:	2012      	movs	r0, #18
    e51a:	e7f7      	b.n	e50c <LORAWAN_GetAttr+0x190>
    e51c:	781b      	ldrb	r3, [r3, #0]
    e51e:	a902      	add	r1, sp, #8
    e520:	700b      	strb	r3, [r1, #0]
    e522:	2000      	movs	r0, #0
    e524:	e7f2      	b.n	e50c <LORAWAN_GetAttr+0x190>
    e526:	0010      	movs	r0, r2
    e528:	4b2b      	ldr	r3, [pc, #172]	; (e5d8 <LORAWAN_GetAttr+0x25c>)
    e52a:	4798      	blx	r3
    e52c:	e76d      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e52e:	4b26      	ldr	r3, [pc, #152]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e530:	33ca      	adds	r3, #202	; 0xca
    e532:	e7a3      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e534:	4b24      	ldr	r3, [pc, #144]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e536:	33c8      	adds	r3, #200	; 0xc8
    e538:	e7a0      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e53a:	4b23      	ldr	r3, [pc, #140]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e53c:	33c9      	adds	r3, #201	; 0xc9
    e53e:	e79d      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e540:	21fa      	movs	r1, #250	; 0xfa
    e542:	4b21      	ldr	r3, [pc, #132]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e544:	0089      	lsls	r1, r1, #2
    e546:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    e548:	4b24      	ldr	r3, [pc, #144]	; (e5dc <LORAWAN_GetAttr+0x260>)
    e54a:	4798      	blx	r3
    e54c:	8020      	strh	r0, [r4, #0]
    e54e:	e75c      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e550:	4b1d      	ldr	r3, [pc, #116]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e552:	3352      	adds	r3, #82	; 0x52
    e554:	781b      	ldrb	r3, [r3, #0]
    e556:	079b      	lsls	r3, r3, #30
    e558:	e78c      	b.n	e474 <LORAWAN_GetAttr+0xf8>
    e55a:	491b      	ldr	r1, [pc, #108]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e55c:	2210      	movs	r2, #16
    e55e:	310d      	adds	r1, #13
    e560:	31ff      	adds	r1, #255	; 0xff
    e562:	e74f      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e564:	4918      	ldr	r1, [pc, #96]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e566:	2210      	movs	r2, #16
    e568:	31fc      	adds	r1, #252	; 0xfc
    e56a:	e74b      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e56c:	2204      	movs	r2, #4
    e56e:	491c      	ldr	r1, [pc, #112]	; (e5e0 <LORAWAN_GetAttr+0x264>)
    e570:	e748      	b.n	e404 <LORAWAN_GetAttr+0x88>
    e572:	4b15      	ldr	r3, [pc, #84]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e574:	33fe      	adds	r3, #254	; 0xfe
    e576:	8bdb      	ldrh	r3, [r3, #30]
    e578:	e792      	b.n	e4a0 <LORAWAN_GetAttr+0x124>
    e57a:	0010      	movs	r0, r2
    e57c:	4b19      	ldr	r3, [pc, #100]	; (e5e4 <LORAWAN_GetAttr+0x268>)
    e57e:	4798      	blx	r3
    e580:	e73b      	b.n	e3fa <LORAWAN_GetAttr+0x7e>
    e582:	0011      	movs	r1, r2
    e584:	4b12      	ldr	r3, [pc, #72]	; (e5d0 <LORAWAN_GetAttr+0x254>)
    e586:	201f      	movs	r0, #31
    e588:	4798      	blx	r3
    e58a:	e73e      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e58c:	4b0e      	ldr	r3, [pc, #56]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e58e:	3360      	adds	r3, #96	; 0x60
    e590:	781b      	ldrb	r3, [r3, #0]
    e592:	071b      	lsls	r3, r3, #28
    e594:	e76e      	b.n	e474 <LORAWAN_GetAttr+0xf8>
    e596:	4b0c      	ldr	r3, [pc, #48]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e598:	3360      	adds	r3, #96	; 0x60
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	07db      	lsls	r3, r3, #31
    e59e:	e769      	b.n	e474 <LORAWAN_GetAttr+0xf8>
    e5a0:	202f      	movs	r0, #47	; 0x2f
    e5a2:	4b0c      	ldr	r3, [pc, #48]	; (e5d4 <LORAWAN_GetAttr+0x258>)
    e5a4:	4798      	blx	r3
    e5a6:	e728      	b.n	e3fa <LORAWAN_GetAttr+0x7e>
    e5a8:	490f      	ldr	r1, [pc, #60]	; (e5e8 <LORAWAN_GetAttr+0x26c>)
    e5aa:	2024      	movs	r0, #36	; 0x24
    e5ac:	e7f9      	b.n	e5a2 <LORAWAN_GetAttr+0x226>
    e5ae:	4b06      	ldr	r3, [pc, #24]	; (e5c8 <LORAWAN_GetAttr+0x24c>)
    e5b0:	33b0      	adds	r3, #176	; 0xb0
    e5b2:	e763      	b.n	e47c <LORAWAN_GetAttr+0x100>
    e5b4:	4b0d      	ldr	r3, [pc, #52]	; (e5ec <LORAWAN_GetAttr+0x270>)
    e5b6:	4798      	blx	r3
    e5b8:	4b0d      	ldr	r3, [pc, #52]	; (e5f0 <LORAWAN_GetAttr+0x274>)
    e5ba:	0005      	movs	r5, r0
    e5bc:	4798      	blx	r3
    e5be:	3808      	subs	r0, #8
    e5c0:	1b40      	subs	r0, r0, r5
    e5c2:	7020      	strb	r0, [r4, #0]
    e5c4:	e721      	b.n	e40a <LORAWAN_GetAttr+0x8e>
    e5c6:	46c0      	nop			; (mov r8, r8)
    e5c8:	20001ce4 	.word	0x20001ce4
    e5cc:	000158c9 	.word	0x000158c9
    e5d0:	00010cad 	.word	0x00010cad
    e5d4:	00008a85 	.word	0x00008a85
    e5d8:	0000e35d 	.word	0x0000e35d
    e5dc:	0001270d 	.word	0x0001270d
    e5e0:	20001ddc 	.word	0x20001ddc
    e5e4:	00008be9 	.word	0x00008be9
    e5e8:	20001d97 	.word	0x20001d97
    e5ec:	0000c9d5 	.word	0x0000c9d5
    e5f0:	0000ca7d 	.word	0x0000ca7d

0000e5f4 <LORAWAN_TxDone>:
    e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5f6:	6843      	ldr	r3, [r0, #4]
    e5f8:	b08f      	sub	sp, #60	; 0x3c
    e5fa:	ae07      	add	r6, sp, #28
    e5fc:	7805      	ldrb	r5, [r0, #0]
    e5fe:	9303      	str	r3, [sp, #12]
    e600:	0032      	movs	r2, r6
    e602:	4bd2      	ldr	r3, [pc, #840]	; (e94c <LORAWAN_TxDone+0x358>)
    e604:	2100      	movs	r1, #0
    e606:	2027      	movs	r0, #39	; 0x27
    e608:	4798      	blx	r3
    e60a:	4cd1      	ldr	r4, [pc, #836]	; (e950 <LORAWAN_TxDone+0x35c>)
    e60c:	0023      	movs	r3, r4
    e60e:	3350      	adds	r3, #80	; 0x50
    e610:	781b      	ldrb	r3, [r3, #0]
    e612:	2b7f      	cmp	r3, #127	; 0x7f
    e614:	d900      	bls.n	e618 <LORAWAN_TxDone+0x24>
    e616:	e200      	b.n	ea1a <LORAWAN_TxDone+0x426>
    e618:	4bce      	ldr	r3, [pc, #824]	; (e954 <LORAWAN_TxDone+0x360>)
    e61a:	201b      	movs	r0, #27
    e61c:	781a      	ldrb	r2, [r3, #0]
    e61e:	2a04      	cmp	r2, #4
    e620:	d100      	bne.n	e624 <LORAWAN_TxDone+0x30>
    e622:	e0b1      	b.n	e788 <LORAWAN_TxDone+0x194>
    e624:	781b      	ldrb	r3, [r3, #0]
    e626:	2b02      	cmp	r3, #2
    e628:	d11f      	bne.n	e66a <LORAWAN_TxDone+0x76>
    e62a:	3321      	adds	r3, #33	; 0x21
    e62c:	33ff      	adds	r3, #255	; 0xff
    e62e:	5ce2      	ldrb	r2, [r4, r3]
    e630:	2a00      	cmp	r2, #0
    e632:	d005      	beq.n	e640 <LORAWAN_TxDone+0x4c>
    e634:	2200      	movs	r2, #0
    e636:	49c8      	ldr	r1, [pc, #800]	; (e958 <LORAWAN_TxDone+0x364>)
    e638:	54e2      	strb	r2, [r4, r3]
    e63a:	200b      	movs	r0, #11
    e63c:	4bc7      	ldr	r3, [pc, #796]	; (e95c <LORAWAN_TxDone+0x368>)
    e63e:	4798      	blx	r3
    e640:	2d07      	cmp	r5, #7
    e642:	d000      	beq.n	e646 <LORAWAN_TxDone+0x52>
    e644:	e0a5      	b.n	e792 <LORAWAN_TxDone+0x19e>
    e646:	79f3      	ldrb	r3, [r6, #7]
    e648:	2b00      	cmp	r3, #0
    e64a:	d00e      	beq.n	e66a <LORAWAN_TxDone+0x76>
    e64c:	0023      	movs	r3, r4
    e64e:	3360      	adds	r3, #96	; 0x60
    e650:	7818      	ldrb	r0, [r3, #0]
    e652:	0026      	movs	r6, r4
    e654:	2304      	movs	r3, #4
    e656:	36e6      	adds	r6, #230	; 0xe6
    e658:	4018      	ands	r0, r3
    e65a:	4dc1      	ldr	r5, [pc, #772]	; (e960 <LORAWAN_TxDone+0x36c>)
    e65c:	d007      	beq.n	e66e <LORAWAN_TxDone+0x7a>
    e65e:	2000      	movs	r0, #0
    e660:	2109      	movs	r1, #9
    e662:	8030      	strh	r0, [r6, #0]
    e664:	47a8      	blx	r5
    e666:	4bbf      	ldr	r3, [pc, #764]	; (e964 <LORAWAN_TxDone+0x370>)
    e668:	4798      	blx	r3
    e66a:	b00f      	add	sp, #60	; 0x3c
    e66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e66e:	8833      	ldrh	r3, [r6, #0]
    e670:	2109      	movs	r1, #9
    e672:	3301      	adds	r3, #1
    e674:	8033      	strh	r3, [r6, #0]
    e676:	47a8      	blx	r5
    e678:	0023      	movs	r3, r4
    e67a:	33e8      	adds	r3, #232	; 0xe8
    e67c:	881b      	ldrh	r3, [r3, #0]
    e67e:	4aba      	ldr	r2, [pc, #744]	; (e968 <LORAWAN_TxDone+0x374>)
    e680:	4293      	cmp	r3, r2
    e682:	d002      	beq.n	e68a <LORAWAN_TxDone+0x96>
    e684:	8832      	ldrh	r2, [r6, #0]
    e686:	429a      	cmp	r2, r3
    e688:	d266      	bcs.n	e758 <LORAWAN_TxDone+0x164>
    e68a:	2395      	movs	r3, #149	; 0x95
    e68c:	005b      	lsls	r3, r3, #1
    e68e:	5ce3      	ldrb	r3, [r4, r3]
    e690:	2b00      	cmp	r3, #0
    e692:	d061      	beq.n	e758 <LORAWAN_TxDone+0x164>
    e694:	2701      	movs	r7, #1
    e696:	0023      	movs	r3, r4
    e698:	a905      	add	r1, sp, #20
    e69a:	700f      	strb	r7, [r1, #0]
    e69c:	33b5      	adds	r3, #181	; 0xb5
    e69e:	781b      	ldrb	r3, [r3, #0]
    e6a0:	aa0b      	add	r2, sp, #44	; 0x2c
    e6a2:	704b      	strb	r3, [r1, #1]
    e6a4:	0023      	movs	r3, r4
    e6a6:	33b3      	adds	r3, #179	; 0xb3
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	202d      	movs	r0, #45	; 0x2d
    e6ac:	708b      	strb	r3, [r1, #2]
    e6ae:	4baf      	ldr	r3, [pc, #700]	; (e96c <LORAWAN_TxDone+0x378>)
    e6b0:	4798      	blx	r3
    e6b2:	2808      	cmp	r0, #8
    e6b4:	d135      	bne.n	e722 <LORAWAN_TxDone+0x12e>
    e6b6:	a806      	add	r0, sp, #24
    e6b8:	4bad      	ldr	r3, [pc, #692]	; (e970 <LORAWAN_TxDone+0x37c>)
    e6ba:	7007      	strb	r7, [r0, #0]
    e6bc:	4798      	blx	r3
    e6be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e6c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    e6c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e6c4:	4bab      	ldr	r3, [pc, #684]	; (e974 <LORAWAN_TxDone+0x380>)
    e6c6:	4798      	blx	r3
    e6c8:	0023      	movs	r3, r4
    e6ca:	339a      	adds	r3, #154	; 0x9a
    e6cc:	881b      	ldrh	r3, [r3, #0]
    e6ce:	a809      	add	r0, sp, #36	; 0x24
    e6d0:	7003      	strb	r3, [r0, #0]
    e6d2:	4ba9      	ldr	r3, [pc, #676]	; (e978 <LORAWAN_TxDone+0x384>)
    e6d4:	6043      	str	r3, [r0, #4]
    e6d6:	4ba9      	ldr	r3, [pc, #676]	; (e97c <LORAWAN_TxDone+0x388>)
    e6d8:	4798      	blx	r3
    e6da:	1e06      	subs	r6, r0, #0
    e6dc:	d108      	bne.n	e6f0 <LORAWAN_TxDone+0xfc>
    e6de:	220e      	movs	r2, #14
    e6e0:	3450      	adds	r4, #80	; 0x50
    e6e2:	7823      	ldrb	r3, [r4, #0]
    e6e4:	4393      	bics	r3, r2
    e6e6:	001a      	movs	r2, r3
    e6e8:	2302      	movs	r3, #2
    e6ea:	4313      	orrs	r3, r2
    e6ec:	7023      	strb	r3, [r4, #0]
    e6ee:	e7bc      	b.n	e66a <LORAWAN_TxDone+0x76>
    e6f0:	0023      	movs	r3, r4
    e6f2:	3360      	adds	r3, #96	; 0x60
    e6f4:	7818      	ldrb	r0, [r3, #0]
    e6f6:	0023      	movs	r3, r4
    e6f8:	4038      	ands	r0, r7
    e6fa:	33e6      	adds	r3, #230	; 0xe6
    e6fc:	4fa0      	ldr	r7, [pc, #640]	; (e980 <LORAWAN_TxDone+0x38c>)
    e6fe:	4ca1      	ldr	r4, [pc, #644]	; (e984 <LORAWAN_TxDone+0x390>)
    e700:	2800      	cmp	r0, #0
    e702:	d009      	beq.n	e718 <LORAWAN_TxDone+0x124>
    e704:	2000      	movs	r0, #0
    e706:	2109      	movs	r1, #9
    e708:	8018      	strh	r0, [r3, #0]
    e70a:	47a8      	blx	r5
    e70c:	4b9e      	ldr	r3, [pc, #632]	; (e988 <LORAWAN_TxDone+0x394>)
    e70e:	4798      	blx	r3
    e710:	47a0      	blx	r4
    e712:	0030      	movs	r0, r6
    e714:	47b8      	blx	r7
    e716:	e7a8      	b.n	e66a <LORAWAN_TxDone+0x76>
    e718:	2109      	movs	r1, #9
    e71a:	8018      	strh	r0, [r3, #0]
    e71c:	47a8      	blx	r5
    e71e:	4b9b      	ldr	r3, [pc, #620]	; (e98c <LORAWAN_TxDone+0x398>)
    e720:	e7f5      	b.n	e70e <LORAWAN_TxDone+0x11a>
    e722:	0023      	movs	r3, r4
    e724:	3360      	adds	r3, #96	; 0x60
    e726:	7818      	ldrb	r0, [r3, #0]
    e728:	0023      	movs	r3, r4
    e72a:	4007      	ands	r7, r0
    e72c:	4e94      	ldr	r6, [pc, #592]	; (e980 <LORAWAN_TxDone+0x38c>)
    e72e:	33e6      	adds	r3, #230	; 0xe6
    e730:	4c94      	ldr	r4, [pc, #592]	; (e984 <LORAWAN_TxDone+0x390>)
    e732:	2f00      	cmp	r7, #0
    e734:	d00a      	beq.n	e74c <LORAWAN_TxDone+0x158>
    e736:	2700      	movs	r7, #0
    e738:	2109      	movs	r1, #9
    e73a:	0038      	movs	r0, r7
    e73c:	801f      	strh	r7, [r3, #0]
    e73e:	47a8      	blx	r5
    e740:	4b91      	ldr	r3, [pc, #580]	; (e988 <LORAWAN_TxDone+0x394>)
    e742:	4798      	blx	r3
    e744:	47a0      	blx	r4
    e746:	0038      	movs	r0, r7
    e748:	47b0      	blx	r6
    e74a:	e78e      	b.n	e66a <LORAWAN_TxDone+0x76>
    e74c:	2109      	movs	r1, #9
    e74e:	0038      	movs	r0, r7
    e750:	801f      	strh	r7, [r3, #0]
    e752:	47a8      	blx	r5
    e754:	4b8d      	ldr	r3, [pc, #564]	; (e98c <LORAWAN_TxDone+0x398>)
    e756:	e7f4      	b.n	e742 <LORAWAN_TxDone+0x14e>
    e758:	0023      	movs	r3, r4
    e75a:	2000      	movs	r0, #0
    e75c:	33e6      	adds	r3, #230	; 0xe6
    e75e:	2109      	movs	r1, #9
    e760:	8018      	strh	r0, [r3, #0]
    e762:	47a8      	blx	r5
    e764:	0022      	movs	r2, r4
    e766:	210e      	movs	r1, #14
    e768:	3250      	adds	r2, #80	; 0x50
    e76a:	7813      	ldrb	r3, [r2, #0]
    e76c:	3460      	adds	r4, #96	; 0x60
    e76e:	438b      	bics	r3, r1
    e770:	7013      	strb	r3, [r2, #0]
    e772:	2220      	movs	r2, #32
    e774:	7823      	ldrb	r3, [r4, #0]
    e776:	4393      	bics	r3, r2
    e778:	7023      	strb	r3, [r4, #0]
    e77a:	4c82      	ldr	r4, [pc, #520]	; (e984 <LORAWAN_TxDone+0x390>)
    e77c:	07db      	lsls	r3, r3, #31
    e77e:	d506      	bpl.n	e78e <LORAWAN_TxDone+0x19a>
    e780:	4b81      	ldr	r3, [pc, #516]	; (e988 <LORAWAN_TxDone+0x394>)
    e782:	4798      	blx	r3
    e784:	47a0      	blx	r4
    e786:	2007      	movs	r0, #7
    e788:	4b7d      	ldr	r3, [pc, #500]	; (e980 <LORAWAN_TxDone+0x38c>)
    e78a:	4798      	blx	r3
    e78c:	e76d      	b.n	e66a <LORAWAN_TxDone+0x76>
    e78e:	4b7f      	ldr	r3, [pc, #508]	; (e98c <LORAWAN_TxDone+0x398>)
    e790:	e7f7      	b.n	e782 <LORAWAN_TxDone+0x18e>
    e792:	2d00      	cmp	r5, #0
    e794:	d000      	beq.n	e798 <LORAWAN_TxDone+0x1a4>
    e796:	e768      	b.n	e66a <LORAWAN_TxDone+0x76>
    e798:	0023      	movs	r3, r4
    e79a:	33d0      	adds	r3, #208	; 0xd0
    e79c:	681b      	ldr	r3, [r3, #0]
    e79e:	0026      	movs	r6, r4
    e7a0:	9302      	str	r3, [sp, #8]
    e7a2:	0023      	movs	r3, r4
    e7a4:	33e6      	adds	r3, #230	; 0xe6
    e7a6:	801d      	strh	r5, [r3, #0]
    e7a8:	2109      	movs	r1, #9
    e7aa:	4b6d      	ldr	r3, [pc, #436]	; (e960 <LORAWAN_TxDone+0x36c>)
    e7ac:	0028      	movs	r0, r5
    e7ae:	36af      	adds	r6, #175	; 0xaf
    e7b0:	4798      	blx	r3
    e7b2:	7833      	ldrb	r3, [r6, #0]
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d000      	beq.n	e7ba <LORAWAN_TxDone+0x1c6>
    e7b8:	e0b2      	b.n	e920 <LORAWAN_TxDone+0x32c>
    e7ba:	0027      	movs	r7, r4
    e7bc:	37b0      	adds	r7, #176	; 0xb0
    e7be:	783a      	ldrb	r2, [r7, #0]
    e7c0:	2a00      	cmp	r2, #0
    e7c2:	d000      	beq.n	e7c6 <LORAWAN_TxDone+0x1d2>
    e7c4:	e0ac      	b.n	e920 <LORAWAN_TxDone+0x32c>
    e7c6:	4b72      	ldr	r3, [pc, #456]	; (e990 <LORAWAN_TxDone+0x39c>)
    e7c8:	781b      	ldrb	r3, [r3, #0]
    e7ca:	07db      	lsls	r3, r3, #31
    e7cc:	d513      	bpl.n	e7f6 <LORAWAN_TxDone+0x202>
    e7ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e7d0:	2116      	movs	r1, #22
    e7d2:	3301      	adds	r3, #1
    e7d4:	6563      	str	r3, [r4, #84]	; 0x54
    e7d6:	0028      	movs	r0, r5
    e7d8:	4b61      	ldr	r3, [pc, #388]	; (e960 <LORAWAN_TxDone+0x36c>)
    e7da:	4798      	blx	r3
    e7dc:	9b02      	ldr	r3, [sp, #8]
    e7de:	781b      	ldrb	r3, [r3, #0]
    e7e0:	2b01      	cmp	r3, #1
    e7e2:	d000      	beq.n	e7e6 <LORAWAN_TxDone+0x1f2>
    e7e4:	e098      	b.n	e918 <LORAWAN_TxDone+0x324>
    e7e6:	0022      	movs	r2, r4
    e7e8:	3260      	adds	r2, #96	; 0x60
    e7ea:	7811      	ldrb	r1, [r2, #0]
    e7ec:	430b      	orrs	r3, r1
    e7ee:	7013      	strb	r3, [r2, #0]
    e7f0:	783b      	ldrb	r3, [r7, #0]
    e7f2:	3301      	adds	r3, #1
    e7f4:	703b      	strb	r3, [r7, #0]
    e7f6:	0023      	movs	r3, r4
    e7f8:	2200      	movs	r2, #0
    e7fa:	33c4      	adds	r3, #196	; 0xc4
    e7fc:	701a      	strb	r2, [r3, #0]
    e7fe:	0022      	movs	r2, r4
    e800:	210e      	movs	r1, #14
    e802:	2604      	movs	r6, #4
    e804:	3250      	adds	r2, #80	; 0x50
    e806:	7813      	ldrb	r3, [r2, #0]
    e808:	0027      	movs	r7, r4
    e80a:	438b      	bics	r3, r1
    e80c:	4333      	orrs	r3, r6
    e80e:	7013      	strb	r3, [r2, #0]
    e810:	0023      	movs	r3, r4
    e812:	33b3      	adds	r3, #179	; 0xb3
    e814:	781b      	ldrb	r3, [r3, #0]
    e816:	a906      	add	r1, sp, #24
    e818:	708b      	strb	r3, [r1, #2]
    e81a:	0023      	movs	r3, r4
    e81c:	33c2      	adds	r3, #194	; 0xc2
    e81e:	781b      	ldrb	r3, [r3, #0]
    e820:	3760      	adds	r7, #96	; 0x60
    e822:	704b      	strb	r3, [r1, #1]
    e824:	783b      	ldrb	r3, [r7, #0]
    e826:	ad0b      	add	r5, sp, #44	; 0x2c
    e828:	075b      	lsls	r3, r3, #29
    e82a:	0fdb      	lsrs	r3, r3, #31
    e82c:	700b      	strb	r3, [r1, #0]
    e82e:	002a      	movs	r2, r5
    e830:	4b4e      	ldr	r3, [pc, #312]	; (e96c <LORAWAN_TxDone+0x378>)
    e832:	2019      	movs	r0, #25
    e834:	4798      	blx	r3
    e836:	783b      	ldrb	r3, [r7, #0]
    e838:	4233      	tst	r3, r6
    e83a:	d100      	bne.n	e83e <LORAWAN_TxDone+0x24a>
    e83c:	e0b2      	b.n	e9a4 <LORAWAN_TxDone+0x3b0>
    e83e:	2300      	movs	r3, #0
    e840:	af09      	add	r7, sp, #36	; 0x24
    e842:	703b      	strb	r3, [r7, #0]
    e844:	003a      	movs	r2, r7
    e846:	2100      	movs	r1, #0
    e848:	2009      	movs	r0, #9
    e84a:	4b48      	ldr	r3, [pc, #288]	; (e96c <LORAWAN_TxDone+0x378>)
    e84c:	4798      	blx	r3
    e84e:	0039      	movs	r1, r7
    e850:	aa05      	add	r2, sp, #20
    e852:	0030      	movs	r0, r6
    e854:	4b45      	ldr	r3, [pc, #276]	; (e96c <LORAWAN_TxDone+0x378>)
    e856:	4798      	blx	r3
    e858:	0021      	movs	r1, r4
    e85a:	792b      	ldrb	r3, [r5, #4]
    e85c:	3149      	adds	r1, #73	; 0x49
    e85e:	700b      	strb	r3, [r1, #0]
    e860:	0023      	movs	r3, r4
    e862:	270b      	movs	r7, #11
    e864:	782a      	ldrb	r2, [r5, #0]
    e866:	3345      	adds	r3, #69	; 0x45
    e868:	701a      	strb	r2, [r3, #0]
    e86a:	786a      	ldrb	r2, [r5, #1]
    e86c:	2004      	movs	r0, #4
    e86e:	705a      	strb	r2, [r3, #1]
    e870:	78aa      	ldrb	r2, [r5, #2]
    e872:	2600      	movs	r6, #0
    e874:	709a      	strb	r2, [r3, #2]
    e876:	78ea      	ldrb	r2, [r5, #3]
    e878:	70da      	strb	r2, [r3, #3]
    e87a:	ab02      	add	r3, sp, #8
    e87c:	18ff      	adds	r7, r7, r3
    e87e:	003a      	movs	r2, r7
    e880:	4b3a      	ldr	r3, [pc, #232]	; (e96c <LORAWAN_TxDone+0x378>)
    e882:	4798      	blx	r3
    e884:	0023      	movs	r3, r4
    e886:	3360      	adds	r3, #96	; 0x60
    e888:	781d      	ldrb	r5, [r3, #0]
    e88a:	2304      	movs	r3, #4
    e88c:	401d      	ands	r5, r3
    e88e:	2300      	movs	r3, #0
    e890:	0022      	movs	r2, r4
    e892:	56fb      	ldrsb	r3, [r7, r3]
    e894:	42b5      	cmp	r5, r6
    e896:	d100      	bne.n	e89a <LORAWAN_TxDone+0x2a6>
    e898:	e087      	b.n	e9aa <LORAWAN_TxDone+0x3b6>
    e89a:	2100      	movs	r1, #0
    e89c:	32a2      	adds	r2, #162	; 0xa2
    e89e:	8817      	ldrh	r7, [r2, #0]
    e8a0:	aa05      	add	r2, sp, #20
    e8a2:	5651      	ldrsb	r1, [r2, r1]
    e8a4:	4d3b      	ldr	r5, [pc, #236]	; (e994 <LORAWAN_TxDone+0x3a0>)
    e8a6:	187a      	adds	r2, r7, r1
    e8a8:	9202      	str	r2, [sp, #8]
    e8aa:	0022      	movs	r2, r4
    e8ac:	32a0      	adds	r2, #160	; 0xa0
    e8ae:	8811      	ldrh	r1, [r2, #0]
    e8b0:	27fa      	movs	r7, #250	; 0xfa
    e8b2:	18c9      	adds	r1, r1, r3
    e8b4:	232c      	movs	r3, #44	; 0x2c
    e8b6:	33ff      	adds	r3, #255	; 0xff
    e8b8:	5ce3      	ldrb	r3, [r4, r3]
    e8ba:	00bf      	lsls	r7, r7, #2
    e8bc:	1ac9      	subs	r1, r1, r3
    e8be:	0023      	movs	r3, r4
    e8c0:	33b6      	adds	r3, #182	; 0xb6
    e8c2:	7818      	ldrb	r0, [r3, #0]
    e8c4:	4379      	muls	r1, r7
    e8c6:	4b34      	ldr	r3, [pc, #208]	; (e998 <LORAWAN_TxDone+0x3a4>)
    e8c8:	0032      	movs	r2, r6
    e8ca:	9600      	str	r6, [sp, #0]
    e8cc:	47a8      	blx	r5
    e8ce:	232c      	movs	r3, #44	; 0x2c
    e8d0:	33ff      	adds	r3, #255	; 0xff
    e8d2:	5ce1      	ldrb	r1, [r4, r3]
    e8d4:	9b02      	ldr	r3, [sp, #8]
    e8d6:	34b7      	adds	r4, #183	; 0xb7
    e8d8:	1a59      	subs	r1, r3, r1
    e8da:	7820      	ldrb	r0, [r4, #0]
    e8dc:	4379      	muls	r1, r7
    e8de:	9600      	str	r6, [sp, #0]
    e8e0:	4b2e      	ldr	r3, [pc, #184]	; (e99c <LORAWAN_TxDone+0x3a8>)
    e8e2:	0032      	movs	r2, r6
    e8e4:	47a8      	blx	r5
    e8e6:	4b1a      	ldr	r3, [pc, #104]	; (e950 <LORAWAN_TxDone+0x35c>)
    e8e8:	2102      	movs	r1, #2
    e8ea:	001a      	movs	r2, r3
    e8ec:	32e4      	adds	r2, #228	; 0xe4
    e8ee:	7812      	ldrb	r2, [r2, #0]
    e8f0:	4011      	ands	r1, r2
    e8f2:	d100      	bne.n	e8f6 <LORAWAN_TxDone+0x302>
    e8f4:	e08c      	b.n	ea10 <LORAWAN_TxDone+0x41c>
    e8f6:	466a      	mov	r2, sp
    e8f8:	8992      	ldrh	r2, [r2, #12]
    e8fa:	a909      	add	r1, sp, #36	; 0x24
    e8fc:	800a      	strh	r2, [r1, #0]
    e8fe:	001a      	movs	r2, r3
    e900:	201f      	movs	r0, #31
    e902:	3260      	adds	r2, #96	; 0x60
    e904:	7812      	ldrb	r2, [r2, #0]
    e906:	3364      	adds	r3, #100	; 0x64
    e908:	0752      	lsls	r2, r2, #29
    e90a:	0fd2      	lsrs	r2, r2, #31
    e90c:	710a      	strb	r2, [r1, #4]
    e90e:	881b      	ldrh	r3, [r3, #0]
    e910:	804b      	strh	r3, [r1, #2]
    e912:	4b23      	ldr	r3, [pc, #140]	; (e9a0 <LORAWAN_TxDone+0x3ac>)
    e914:	4798      	blx	r3
    e916:	e6a8      	b.n	e66a <LORAWAN_TxDone+0x76>
    e918:	7833      	ldrb	r3, [r6, #0]
    e91a:	3301      	adds	r3, #1
    e91c:	7033      	strb	r3, [r6, #0]
    e91e:	e76a      	b.n	e7f6 <LORAWAN_TxDone+0x202>
    e920:	0022      	movs	r2, r4
    e922:	3250      	adds	r2, #80	; 0x50
    e924:	7811      	ldrb	r1, [r2, #0]
    e926:	2201      	movs	r2, #1
    e928:	4211      	tst	r1, r2
    e92a:	d100      	bne.n	e92e <LORAWAN_TxDone+0x33a>
    e92c:	e763      	b.n	e7f6 <LORAWAN_TxDone+0x202>
    e92e:	0021      	movs	r1, r4
    e930:	3160      	adds	r1, #96	; 0x60
    e932:	7809      	ldrb	r1, [r1, #0]
    e934:	4211      	tst	r1, r2
    e936:	d104      	bne.n	e942 <LORAWAN_TxDone+0x34e>
    e938:	189b      	adds	r3, r3, r2
    e93a:	0022      	movs	r2, r4
    e93c:	32af      	adds	r2, #175	; 0xaf
    e93e:	7013      	strb	r3, [r2, #0]
    e940:	e759      	b.n	e7f6 <LORAWAN_TxDone+0x202>
    e942:	0022      	movs	r2, r4
    e944:	32b0      	adds	r2, #176	; 0xb0
    e946:	7813      	ldrb	r3, [r2, #0]
    e948:	3301      	adds	r3, #1
    e94a:	e7f8      	b.n	e93e <LORAWAN_TxDone+0x34a>
    e94c:	0000e37d 	.word	0x0000e37d
    e950:	20001ce4 	.word	0x20001ce4
    e954:	20001e10 	.word	0x20001e10
    e958:	20001e05 	.word	0x20001e05
    e95c:	00010d99 	.word	0x00010d99
    e960:	00008ec5 	.word	0x00008ec5
    e964:	0000d40d 	.word	0x0000d40d
    e968:	0000ffff 	.word	0x0000ffff
    e96c:	00008a85 	.word	0x00008a85
    e970:	000120c9 	.word	0x000120c9
    e974:	0000d96d 	.word	0x0000d96d
    e978:	20001e21 	.word	0x20001e21
    e97c:	000116e9 	.word	0x000116e9
    e980:	0000e19d 	.word	0x0000e19d
    e984:	0000c991 	.word	0x0000c991
    e988:	0000d3b9 	.word	0x0000d3b9
    e98c:	0000d3e9 	.word	0x0000d3e9
    e990:	20001d34 	.word	0x20001d34
    e994:	00009eed 	.word	0x00009eed
    e998:	0000d8f5 	.word	0x0000d8f5
    e99c:	0000eda9 	.word	0x0000eda9
    e9a0:	00008abd 	.word	0x00008abd
    e9a4:	aa05      	add	r2, sp, #20
    e9a6:	492d      	ldr	r1, [pc, #180]	; (ea5c <LORAWAN_TxDone+0x468>)
    e9a8:	e753      	b.n	e852 <LORAWAN_TxDone+0x25e>
    e9aa:	329c      	adds	r2, #156	; 0x9c
    e9ac:	8811      	ldrh	r1, [r2, #0]
    e9ae:	26fa      	movs	r6, #250	; 0xfa
    e9b0:	18c9      	adds	r1, r1, r3
    e9b2:	232c      	movs	r3, #44	; 0x2c
    e9b4:	33ff      	adds	r3, #255	; 0xff
    e9b6:	5ce3      	ldrb	r3, [r4, r3]
    e9b8:	00b6      	lsls	r6, r6, #2
    e9ba:	1ac9      	subs	r1, r1, r3
    e9bc:	0023      	movs	r3, r4
    e9be:	33b8      	adds	r3, #184	; 0xb8
    e9c0:	7818      	ldrb	r0, [r3, #0]
    e9c2:	4371      	muls	r1, r6
    e9c4:	4b26      	ldr	r3, [pc, #152]	; (ea60 <LORAWAN_TxDone+0x46c>)
    e9c6:	9500      	str	r5, [sp, #0]
    e9c8:	002a      	movs	r2, r5
    e9ca:	4f26      	ldr	r7, [pc, #152]	; (ea64 <LORAWAN_TxDone+0x470>)
    e9cc:	47b8      	blx	r7
    e9ce:	0023      	movs	r3, r4
    e9d0:	33c8      	adds	r3, #200	; 0xc8
    e9d2:	781b      	ldrb	r3, [r3, #0]
    e9d4:	2b04      	cmp	r3, #4
    e9d6:	d105      	bne.n	e9e4 <LORAWAN_TxDone+0x3f0>
    e9d8:	2000      	movs	r0, #0
    e9da:	ab05      	add	r3, sp, #20
    e9dc:	5618      	ldrsb	r0, [r3, r0]
    e9de:	4b22      	ldr	r3, [pc, #136]	; (ea68 <LORAWAN_TxDone+0x474>)
    e9e0:	4798      	blx	r3
    e9e2:	e780      	b.n	e8e6 <LORAWAN_TxDone+0x2f2>
    e9e4:	2b01      	cmp	r3, #1
    e9e6:	d000      	beq.n	e9ea <LORAWAN_TxDone+0x3f6>
    e9e8:	e77d      	b.n	e8e6 <LORAWAN_TxDone+0x2f2>
    e9ea:	0023      	movs	r3, r4
    e9ec:	339e      	adds	r3, #158	; 0x9e
    e9ee:	8819      	ldrh	r1, [r3, #0]
    e9f0:	ab05      	add	r3, sp, #20
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	002a      	movs	r2, r5
    e9f6:	b25b      	sxtb	r3, r3
    e9f8:	18c9      	adds	r1, r1, r3
    e9fa:	232c      	movs	r3, #44	; 0x2c
    e9fc:	33ff      	adds	r3, #255	; 0xff
    e9fe:	5ce3      	ldrb	r3, [r4, r3]
    ea00:	34b9      	adds	r4, #185	; 0xb9
    ea02:	1ac9      	subs	r1, r1, r3
    ea04:	7820      	ldrb	r0, [r4, #0]
    ea06:	4371      	muls	r1, r6
    ea08:	9500      	str	r5, [sp, #0]
    ea0a:	4b18      	ldr	r3, [pc, #96]	; (ea6c <LORAWAN_TxDone+0x478>)
    ea0c:	47b8      	blx	r7
    ea0e:	e76a      	b.n	e8e6 <LORAWAN_TxDone+0x2f2>
    ea10:	0753      	lsls	r3, r2, #29
    ea12:	d400      	bmi.n	ea16 <LORAWAN_TxDone+0x422>
    ea14:	e629      	b.n	e66a <LORAWAN_TxDone+0x76>
    ea16:	2020      	movs	r0, #32
    ea18:	e77b      	b.n	e912 <LORAWAN_TxDone+0x31e>
    ea1a:	4915      	ldr	r1, [pc, #84]	; (ea70 <LORAWAN_TxDone+0x47c>)
    ea1c:	784a      	ldrb	r2, [r1, #1]
    ea1e:	780b      	ldrb	r3, [r1, #0]
    ea20:	0212      	lsls	r2, r2, #8
    ea22:	431a      	orrs	r2, r3
    ea24:	788b      	ldrb	r3, [r1, #2]
    ea26:	041b      	lsls	r3, r3, #16
    ea28:	431a      	orrs	r2, r3
    ea2a:	78cb      	ldrb	r3, [r1, #3]
    ea2c:	061b      	lsls	r3, r3, #24
    ea2e:	4313      	orrs	r3, r2
    ea30:	d100      	bne.n	ea34 <LORAWAN_TxDone+0x440>
    ea32:	e61a      	b.n	e66a <LORAWAN_TxDone+0x76>
    ea34:	4a0f      	ldr	r2, [pc, #60]	; (ea74 <LORAWAN_TxDone+0x480>)
    ea36:	7811      	ldrb	r1, [r2, #0]
    ea38:	221c      	movs	r2, #28
    ea3a:	2904      	cmp	r1, #4
    ea3c:	d003      	beq.n	ea46 <LORAWAN_TxDone+0x452>
    ea3e:	2200      	movs	r2, #0
    ea40:	2d07      	cmp	r5, #7
    ea42:	d100      	bne.n	ea46 <LORAWAN_TxDone+0x452>
    ea44:	002a      	movs	r2, r5
    ea46:	0021      	movs	r1, r4
    ea48:	2004      	movs	r0, #4
    ea4a:	31d4      	adds	r1, #212	; 0xd4
    ea4c:	7008      	strb	r0, [r1, #0]
    ea4e:	0020      	movs	r0, r4
    ea50:	34d0      	adds	r4, #208	; 0xd0
    ea52:	30d8      	adds	r0, #216	; 0xd8
    ea54:	7002      	strb	r2, [r0, #0]
    ea56:	6820      	ldr	r0, [r4, #0]
    ea58:	4798      	blx	r3
    ea5a:	e606      	b.n	e66a <LORAWAN_TxDone+0x76>
    ea5c:	20001d32 	.word	0x20001d32
    ea60:	0000d8f5 	.word	0x0000d8f5
    ea64:	00009eed 	.word	0x00009eed
    ea68:	00010739 	.word	0x00010739
    ea6c:	0000eda9 	.word	0x0000eda9
    ea70:	20001f24 	.word	0x20001f24
    ea74:	20001e10 	.word	0x20001e10

0000ea78 <radioCallback>:
    ea78:	4b10      	ldr	r3, [pc, #64]	; (eabc <radioCallback+0x44>)
    ea7a:	b510      	push	{r4, lr}
    ea7c:	7018      	strb	r0, [r3, #0]
    ea7e:	3801      	subs	r0, #1
    ea80:	b2c0      	uxtb	r0, r0
    ea82:	000c      	movs	r4, r1
    ea84:	281f      	cmp	r0, #31
    ea86:	d809      	bhi.n	ea9c <radioCallback+0x24>
    ea88:	2301      	movs	r3, #1
    ea8a:	4083      	lsls	r3, r0
    ea8c:	4a0c      	ldr	r2, [pc, #48]	; (eac0 <radioCallback+0x48>)
    ea8e:	4213      	tst	r3, r2
    ea90:	d109      	bne.n	eaa6 <radioCallback+0x2e>
    ea92:	220a      	movs	r2, #10
    ea94:	4213      	tst	r3, r2
    ea96:	d102      	bne.n	ea9e <radioCallback+0x26>
    ea98:	2b00      	cmp	r3, #0
    ea9a:	db08      	blt.n	eaae <radioCallback+0x36>
    ea9c:	bd10      	pop	{r4, pc}
    ea9e:	0008      	movs	r0, r1
    eaa0:	4b08      	ldr	r3, [pc, #32]	; (eac4 <radioCallback+0x4c>)
    eaa2:	4798      	blx	r3
    eaa4:	e7fa      	b.n	ea9c <radioCallback+0x24>
    eaa6:	2002      	movs	r0, #2
    eaa8:	4b07      	ldr	r3, [pc, #28]	; (eac8 <radioCallback+0x50>)
    eaaa:	4798      	blx	r3
    eaac:	e7f6      	b.n	ea9c <radioCallback+0x24>
    eaae:	4b07      	ldr	r3, [pc, #28]	; (eacc <radioCallback+0x54>)
    eab0:	681b      	ldr	r3, [r3, #0]
    eab2:	2b00      	cmp	r3, #0
    eab4:	d0f2      	beq.n	ea9c <radioCallback+0x24>
    eab6:	4798      	blx	r3
    eab8:	6020      	str	r0, [r4, #0]
    eaba:	e7ef      	b.n	ea9c <radioCallback+0x24>
    eabc:	20001e10 	.word	0x20001e10
    eac0:	00008081 	.word	0x00008081
    eac4:	0000e5f5 	.word	0x0000e5f5
    eac8:	00010c29 	.word	0x00010c29
    eacc:	20001f20 	.word	0x20001f20

0000ead0 <LorawanCheckAndDoRetryOnTimeout>:
    ead0:	b513      	push	{r0, r1, r4, lr}
    ead2:	4c34      	ldr	r4, [pc, #208]	; (eba4 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    ead4:	0023      	movs	r3, r4
    ead6:	3360      	adds	r3, #96	; 0x60
    ead8:	781b      	ldrb	r3, [r3, #0]
    eada:	0022      	movs	r2, r4
    eadc:	07db      	lsls	r3, r3, #31
    eade:	d54e      	bpl.n	eb7e <LorawanCheckAndDoRetryOnTimeout+0xae>
    eae0:	0023      	movs	r3, r4
    eae2:	32b0      	adds	r2, #176	; 0xb0
    eae4:	33ae      	adds	r3, #174	; 0xae
    eae6:	7812      	ldrb	r2, [r2, #0]
    eae8:	781b      	ldrb	r3, [r3, #0]
    eaea:	429a      	cmp	r2, r3
    eaec:	d839      	bhi.n	eb62 <LorawanCheckAndDoRetryOnTimeout+0x92>
    eaee:	2395      	movs	r3, #149	; 0x95
    eaf0:	005b      	lsls	r3, r3, #1
    eaf2:	5ce3      	ldrb	r3, [r4, r3]
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	d034      	beq.n	eb62 <LorawanCheckAndDoRetryOnTimeout+0x92>
    eaf8:	0023      	movs	r3, r4
    eafa:	33c8      	adds	r3, #200	; 0xc8
    eafc:	781b      	ldrb	r3, [r3, #0]
    eafe:	2b01      	cmp	r3, #1
    eb00:	d11a      	bne.n	eb38 <LorawanCheckAndDoRetryOnTimeout+0x68>
    eb02:	0021      	movs	r1, r4
    eb04:	220e      	movs	r2, #14
    eb06:	3150      	adds	r1, #80	; 0x50
    eb08:	780b      	ldrb	r3, [r1, #0]
    eb0a:	4393      	bics	r3, r2
    eb0c:	001a      	movs	r2, r3
    eb0e:	230c      	movs	r3, #12
    eb10:	4313      	orrs	r3, r2
    eb12:	700b      	strb	r3, [r1, #0]
    eb14:	0023      	movs	r3, r4
    eb16:	33a6      	adds	r3, #166	; 0xa6
    eb18:	8819      	ldrh	r1, [r3, #0]
    eb1a:	232c      	movs	r3, #44	; 0x2c
    eb1c:	33ff      	adds	r3, #255	; 0xff
    eb1e:	5ce3      	ldrb	r3, [r4, r3]
    eb20:	2200      	movs	r2, #0
    eb22:	1acb      	subs	r3, r1, r3
    eb24:	21fa      	movs	r1, #250	; 0xfa
    eb26:	34bc      	adds	r4, #188	; 0xbc
    eb28:	0089      	lsls	r1, r1, #2
    eb2a:	7820      	ldrb	r0, [r4, #0]
    eb2c:	4359      	muls	r1, r3
    eb2e:	9200      	str	r2, [sp, #0]
    eb30:	4b1d      	ldr	r3, [pc, #116]	; (eba8 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    eb32:	4c1e      	ldr	r4, [pc, #120]	; (ebac <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    eb34:	47a0      	blx	r4
    eb36:	bd13      	pop	{r0, r1, r4, pc}
    eb38:	2b04      	cmp	r3, #4
    eb3a:	d1fc      	bne.n	eb36 <LorawanCheckAndDoRetryOnTimeout+0x66>
    eb3c:	4b1c      	ldr	r3, [pc, #112]	; (ebb0 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    eb3e:	4798      	blx	r3
    eb40:	349a      	adds	r4, #154	; 0x9a
    eb42:	300d      	adds	r0, #13
    eb44:	8823      	ldrh	r3, [r4, #0]
    eb46:	b280      	uxth	r0, r0
    eb48:	4283      	cmp	r3, r0
    eb4a:	d802      	bhi.n	eb52 <LorawanCheckAndDoRetryOnTimeout+0x82>
    eb4c:	4b19      	ldr	r3, [pc, #100]	; (ebb4 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    eb4e:	4798      	blx	r3
    eb50:	e7f1      	b.n	eb36 <LorawanCheckAndDoRetryOnTimeout+0x66>
    eb52:	4b19      	ldr	r3, [pc, #100]	; (ebb8 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    eb54:	4798      	blx	r3
    eb56:	4b19      	ldr	r3, [pc, #100]	; (ebbc <LorawanCheckAndDoRetryOnTimeout+0xec>)
    eb58:	4798      	blx	r3
    eb5a:	200e      	movs	r0, #14
    eb5c:	4b18      	ldr	r3, [pc, #96]	; (ebc0 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    eb5e:	4798      	blx	r3
    eb60:	e7e9      	b.n	eb36 <LorawanCheckAndDoRetryOnTimeout+0x66>
    eb62:	4b15      	ldr	r3, [pc, #84]	; (ebb8 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    eb64:	4798      	blx	r3
    eb66:	4b15      	ldr	r3, [pc, #84]	; (ebbc <LorawanCheckAndDoRetryOnTimeout+0xec>)
    eb68:	4798      	blx	r3
    eb6a:	34c8      	adds	r4, #200	; 0xc8
    eb6c:	4b14      	ldr	r3, [pc, #80]	; (ebc0 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    eb6e:	2012      	movs	r0, #18
    eb70:	4798      	blx	r3
    eb72:	7823      	ldrb	r3, [r4, #0]
    eb74:	2b04      	cmp	r3, #4
    eb76:	d1de      	bne.n	eb36 <LorawanCheckAndDoRetryOnTimeout+0x66>
    eb78:	4b12      	ldr	r3, [pc, #72]	; (ebc4 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    eb7a:	4798      	blx	r3
    eb7c:	e7db      	b.n	eb36 <LorawanCheckAndDoRetryOnTimeout+0x66>
    eb7e:	0023      	movs	r3, r4
    eb80:	32af      	adds	r2, #175	; 0xaf
    eb82:	33ad      	adds	r3, #173	; 0xad
    eb84:	7812      	ldrb	r2, [r2, #0]
    eb86:	781b      	ldrb	r3, [r3, #0]
    eb88:	429a      	cmp	r2, r3
    eb8a:	d804      	bhi.n	eb96 <LorawanCheckAndDoRetryOnTimeout+0xc6>
    eb8c:	2395      	movs	r3, #149	; 0x95
    eb8e:	005b      	lsls	r3, r3, #1
    eb90:	5ce3      	ldrb	r3, [r4, r3]
    eb92:	2b00      	cmp	r3, #0
    eb94:	d1da      	bne.n	eb4c <LorawanCheckAndDoRetryOnTimeout+0x7c>
    eb96:	4b0c      	ldr	r3, [pc, #48]	; (ebc8 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    eb98:	4798      	blx	r3
    eb9a:	4b08      	ldr	r3, [pc, #32]	; (ebbc <LorawanCheckAndDoRetryOnTimeout+0xec>)
    eb9c:	4798      	blx	r3
    eb9e:	2008      	movs	r0, #8
    eba0:	e7dc      	b.n	eb5c <LorawanCheckAndDoRetryOnTimeout+0x8c>
    eba2:	46c0      	nop			; (mov r8, r8)
    eba4:	20001ce4 	.word	0x20001ce4
    eba8:	0000ebcd 	.word	0x0000ebcd
    ebac:	00009eed 	.word	0x00009eed
    ebb0:	0000ca7d 	.word	0x0000ca7d
    ebb4:	0000d9d9 	.word	0x0000d9d9
    ebb8:	0000d3b9 	.word	0x0000d3b9
    ebbc:	0000c991 	.word	0x0000c991
    ebc0:	0000e19d 	.word	0x0000e19d
    ebc4:	000116cd 	.word	0x000116cd
    ebc8:	0000d3e9 	.word	0x0000d3e9

0000ebcc <AckRetransmissionCallback>:
    ebcc:	b510      	push	{r4, lr}
    ebce:	4c1c      	ldr	r4, [pc, #112]	; (ec40 <AckRetransmissionCallback+0x74>)
    ebd0:	0023      	movs	r3, r4
    ebd2:	3350      	adds	r3, #80	; 0x50
    ebd4:	781b      	ldrb	r3, [r3, #0]
    ebd6:	2b7f      	cmp	r3, #127	; 0x7f
    ebd8:	d82e      	bhi.n	ec38 <AckRetransmissionCallback+0x6c>
    ebda:	0023      	movs	r3, r4
    ebdc:	33c8      	adds	r3, #200	; 0xc8
    ebde:	781b      	ldrb	r3, [r3, #0]
    ebe0:	2b04      	cmp	r3, #4
    ebe2:	d102      	bne.n	ebea <AckRetransmissionCallback+0x1e>
    ebe4:	4b17      	ldr	r3, [pc, #92]	; (ec44 <AckRetransmissionCallback+0x78>)
    ebe6:	4798      	blx	r3
    ebe8:	e01f      	b.n	ec2a <AckRetransmissionCallback+0x5e>
    ebea:	2b01      	cmp	r3, #1
    ebec:	d11d      	bne.n	ec2a <AckRetransmissionCallback+0x5e>
    ebee:	0022      	movs	r2, r4
    ebf0:	0023      	movs	r3, r4
    ebf2:	32b0      	adds	r2, #176	; 0xb0
    ebf4:	33ae      	adds	r3, #174	; 0xae
    ebf6:	7812      	ldrb	r2, [r2, #0]
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	429a      	cmp	r2, r3
    ebfc:	d816      	bhi.n	ec2c <AckRetransmissionCallback+0x60>
    ebfe:	2395      	movs	r3, #149	; 0x95
    ec00:	005b      	lsls	r3, r3, #1
    ec02:	5ce3      	ldrb	r3, [r4, r3]
    ec04:	2b00      	cmp	r3, #0
    ec06:	d011      	beq.n	ec2c <AckRetransmissionCallback+0x60>
    ec08:	4b0f      	ldr	r3, [pc, #60]	; (ec48 <AckRetransmissionCallback+0x7c>)
    ec0a:	4798      	blx	r3
    ec0c:	349a      	adds	r4, #154	; 0x9a
    ec0e:	300d      	adds	r0, #13
    ec10:	8823      	ldrh	r3, [r4, #0]
    ec12:	b280      	uxth	r0, r0
    ec14:	4283      	cmp	r3, r0
    ec16:	d801      	bhi.n	ec1c <AckRetransmissionCallback+0x50>
    ec18:	4b0c      	ldr	r3, [pc, #48]	; (ec4c <AckRetransmissionCallback+0x80>)
    ec1a:	e7e4      	b.n	ebe6 <AckRetransmissionCallback+0x1a>
    ec1c:	4b0c      	ldr	r3, [pc, #48]	; (ec50 <AckRetransmissionCallback+0x84>)
    ec1e:	4798      	blx	r3
    ec20:	4b0c      	ldr	r3, [pc, #48]	; (ec54 <AckRetransmissionCallback+0x88>)
    ec22:	4798      	blx	r3
    ec24:	200e      	movs	r0, #14
    ec26:	4b0c      	ldr	r3, [pc, #48]	; (ec58 <AckRetransmissionCallback+0x8c>)
    ec28:	4798      	blx	r3
    ec2a:	bd10      	pop	{r4, pc}
    ec2c:	4b08      	ldr	r3, [pc, #32]	; (ec50 <AckRetransmissionCallback+0x84>)
    ec2e:	4798      	blx	r3
    ec30:	4b08      	ldr	r3, [pc, #32]	; (ec54 <AckRetransmissionCallback+0x88>)
    ec32:	4798      	blx	r3
    ec34:	2012      	movs	r0, #18
    ec36:	e7f6      	b.n	ec26 <AckRetransmissionCallback+0x5a>
    ec38:	4b05      	ldr	r3, [pc, #20]	; (ec50 <AckRetransmissionCallback+0x84>)
    ec3a:	4798      	blx	r3
    ec3c:	4b05      	ldr	r3, [pc, #20]	; (ec54 <AckRetransmissionCallback+0x88>)
    ec3e:	e7d2      	b.n	ebe6 <AckRetransmissionCallback+0x1a>
    ec40:	20001ce4 	.word	0x20001ce4
    ec44:	0000ead1 	.word	0x0000ead1
    ec48:	0000ca7d 	.word	0x0000ca7d
    ec4c:	0000d9d9 	.word	0x0000d9d9
    ec50:	0000d3b9 	.word	0x0000d3b9
    ec54:	0000c991 	.word	0x0000c991
    ec58:	0000e19d 	.word	0x0000e19d

0000ec5c <LORAWAN_RxTimeout>:
    ec5c:	4b22      	ldr	r3, [pc, #136]	; (ece8 <LORAWAN_RxTimeout+0x8c>)
    ec5e:	b510      	push	{r4, lr}
    ec60:	001a      	movs	r2, r3
    ec62:	3250      	adds	r2, #80	; 0x50
    ec64:	7812      	ldrb	r2, [r2, #0]
    ec66:	b251      	sxtb	r1, r2
    ec68:	2900      	cmp	r1, #0
    ec6a:	db21      	blt.n	ecb0 <LORAWAN_RxTimeout+0x54>
    ec6c:	0019      	movs	r1, r3
    ec6e:	31c8      	adds	r1, #200	; 0xc8
    ec70:	7809      	ldrb	r1, [r1, #0]
    ec72:	2904      	cmp	r1, #4
    ec74:	d104      	bne.n	ec80 <LORAWAN_RxTimeout+0x24>
    ec76:	07d1      	lsls	r1, r2, #31
    ec78:	d502      	bpl.n	ec80 <LORAWAN_RxTimeout+0x24>
    ec7a:	4b1c      	ldr	r3, [pc, #112]	; (ecec <LORAWAN_RxTimeout+0x90>)
    ec7c:	4798      	blx	r3
    ec7e:	bd10      	pop	{r4, pc}
    ec80:	210e      	movs	r1, #14
    ec82:	0010      	movs	r0, r2
    ec84:	4008      	ands	r0, r1
    ec86:	2806      	cmp	r0, #6
    ec88:	d107      	bne.n	ec9a <LORAWAN_RxTimeout+0x3e>
    ec8a:	3350      	adds	r3, #80	; 0x50
    ec8c:	781a      	ldrb	r2, [r3, #0]
    ec8e:	438a      	bics	r2, r1
    ec90:	0011      	movs	r1, r2
    ec92:	2208      	movs	r2, #8
    ec94:	430a      	orrs	r2, r1
    ec96:	701a      	strb	r2, [r3, #0]
    ec98:	e7f1      	b.n	ec7e <LORAWAN_RxTimeout+0x22>
    ec9a:	3360      	adds	r3, #96	; 0x60
    ec9c:	781b      	ldrb	r3, [r3, #0]
    ec9e:	075b      	lsls	r3, r3, #29
    eca0:	d502      	bpl.n	eca8 <LORAWAN_RxTimeout+0x4c>
    eca2:	4b13      	ldr	r3, [pc, #76]	; (ecf0 <LORAWAN_RxTimeout+0x94>)
    eca4:	4798      	blx	r3
    eca6:	e7ea      	b.n	ec7e <LORAWAN_RxTimeout+0x22>
    eca8:	07d3      	lsls	r3, r2, #31
    ecaa:	d5e8      	bpl.n	ec7e <LORAWAN_RxTimeout+0x22>
    ecac:	4b11      	ldr	r3, [pc, #68]	; (ecf4 <LORAWAN_RxTimeout+0x98>)
    ecae:	e7f9      	b.n	eca4 <LORAWAN_RxTimeout+0x48>
    ecb0:	4811      	ldr	r0, [pc, #68]	; (ecf8 <LORAWAN_RxTimeout+0x9c>)
    ecb2:	7841      	ldrb	r1, [r0, #1]
    ecb4:	7802      	ldrb	r2, [r0, #0]
    ecb6:	0209      	lsls	r1, r1, #8
    ecb8:	4311      	orrs	r1, r2
    ecba:	7882      	ldrb	r2, [r0, #2]
    ecbc:	0412      	lsls	r2, r2, #16
    ecbe:	4311      	orrs	r1, r2
    ecc0:	78c2      	ldrb	r2, [r0, #3]
    ecc2:	0612      	lsls	r2, r2, #24
    ecc4:	430a      	orrs	r2, r1
    ecc6:	d0da      	beq.n	ec7e <LORAWAN_RxTimeout+0x22>
    ecc8:	2190      	movs	r1, #144	; 0x90
    ecca:	2001      	movs	r0, #1
    eccc:	0049      	lsls	r1, r1, #1
    ecce:	5458      	strb	r0, [r3, r1]
    ecd0:	0019      	movs	r1, r3
    ecd2:	2404      	movs	r4, #4
    ecd4:	31d4      	adds	r1, #212	; 0xd4
    ecd6:	700c      	strb	r4, [r1, #0]
    ecd8:	001c      	movs	r4, r3
    ecda:	33d0      	adds	r3, #208	; 0xd0
    ecdc:	34d8      	adds	r4, #216	; 0xd8
    ecde:	7020      	strb	r0, [r4, #0]
    ece0:	6818      	ldr	r0, [r3, #0]
    ece2:	4790      	blx	r2
    ece4:	e7cb      	b.n	ec7e <LORAWAN_RxTimeout+0x22>
    ece6:	46c0      	nop			; (mov r8, r8)
    ece8:	20001ce4 	.word	0x20001ce4
    ecec:	000107bd 	.word	0x000107bd
    ecf0:	0000d40d 	.word	0x0000d40d
    ecf4:	0000ead1 	.word	0x0000ead1
    ecf8:	20001f24 	.word	0x20001f24

0000ecfc <LorawanConfigureRadioForRX2>:
    ecfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecfe:	466b      	mov	r3, sp
    ed00:	4c21      	ldr	r4, [pc, #132]	; (ed88 <LorawanConfigureRadioForRX2+0x8c>)
    ed02:	1cdd      	adds	r5, r3, #3
    ed04:	0023      	movs	r3, r4
    ed06:	2100      	movs	r1, #0
    ed08:	3360      	adds	r3, #96	; 0x60
    ed0a:	781b      	ldrb	r3, [r3, #0]
    ed0c:	0007      	movs	r7, r0
    ed0e:	7029      	strb	r1, [r5, #0]
    ed10:	075b      	lsls	r3, r3, #29
    ed12:	d52c      	bpl.n	ed6e <LorawanConfigureRadioForRX2+0x72>
    ed14:	002a      	movs	r2, r5
    ed16:	2009      	movs	r0, #9
    ed18:	4b1c      	ldr	r3, [pc, #112]	; (ed8c <LorawanConfigureRadioForRX2+0x90>)
    ed1a:	4798      	blx	r3
    ed1c:	0022      	movs	r2, r4
    ed1e:	0023      	movs	r3, r4
    ed20:	324c      	adds	r2, #76	; 0x4c
    ed22:	8811      	ldrh	r1, [r2, #0]
    ed24:	334a      	adds	r3, #74	; 0x4a
    ed26:	881b      	ldrh	r3, [r3, #0]
    ed28:	0409      	lsls	r1, r1, #16
    ed2a:	4319      	orrs	r1, r3
    ed2c:	7828      	ldrb	r0, [r5, #0]
    ed2e:	4b18      	ldr	r3, [pc, #96]	; (ed90 <LorawanConfigureRadioForRX2+0x94>)
    ed30:	4798      	blx	r3
    ed32:	2300      	movs	r3, #0
    ed34:	0022      	movs	r2, r4
    ed36:	ae01      	add	r6, sp, #4
    ed38:	7033      	strb	r3, [r6, #0]
    ed3a:	32c8      	adds	r2, #200	; 0xc8
    ed3c:	7812      	ldrb	r2, [r2, #0]
    ed3e:	2a04      	cmp	r2, #4
    ed40:	d11a      	bne.n	ed78 <LorawanConfigureRadioForRX2+0x7c>
    ed42:	3450      	adds	r4, #80	; 0x50
    ed44:	7822      	ldrb	r2, [r4, #0]
    ed46:	07d2      	lsls	r2, r2, #31
    ed48:	d516      	bpl.n	ed78 <LorawanConfigureRadioForRX2+0x7c>
    ed4a:	8073      	strh	r3, [r6, #2]
    ed4c:	0030      	movs	r0, r6
    ed4e:	4b11      	ldr	r3, [pc, #68]	; (ed94 <LorawanConfigureRadioForRX2+0x98>)
    ed50:	4798      	blx	r3
    ed52:	1e04      	subs	r4, r0, #0
    ed54:	d00a      	beq.n	ed6c <LorawanConfigureRadioForRX2+0x70>
    ed56:	4b10      	ldr	r3, [pc, #64]	; (ed98 <LorawanConfigureRadioForRX2+0x9c>)
    ed58:	4798      	blx	r3
    ed5a:	4b10      	ldr	r3, [pc, #64]	; (ed9c <LorawanConfigureRadioForRX2+0xa0>)
    ed5c:	4798      	blx	r3
    ed5e:	4b10      	ldr	r3, [pc, #64]	; (eda0 <LorawanConfigureRadioForRX2+0xa4>)
    ed60:	4798      	blx	r3
    ed62:	2f00      	cmp	r7, #0
    ed64:	d002      	beq.n	ed6c <LorawanConfigureRadioForRX2+0x70>
    ed66:	0020      	movs	r0, r4
    ed68:	4b0e      	ldr	r3, [pc, #56]	; (eda4 <LorawanConfigureRadioForRX2+0xa8>)
    ed6a:	4798      	blx	r3
    ed6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ed6e:	0023      	movs	r3, r4
    ed70:	334e      	adds	r3, #78	; 0x4e
    ed72:	781b      	ldrb	r3, [r3, #0]
    ed74:	702b      	strb	r3, [r5, #0]
    ed76:	e7d1      	b.n	ed1c <LorawanConfigureRadioForRX2+0x20>
    ed78:	466b      	mov	r3, sp
    ed7a:	0029      	movs	r1, r5
    ed7c:	1d9a      	adds	r2, r3, #6
    ed7e:	2003      	movs	r0, #3
    ed80:	4b02      	ldr	r3, [pc, #8]	; (ed8c <LorawanConfigureRadioForRX2+0x90>)
    ed82:	4798      	blx	r3
    ed84:	e7e2      	b.n	ed4c <LorawanConfigureRadioForRX2+0x50>
    ed86:	46c0      	nop			; (mov r8, r8)
    ed88:	20001ce4 	.word	0x20001ce4
    ed8c:	00008a85 	.word	0x00008a85
    ed90:	0000d889 	.word	0x0000d889
    ed94:	000120c9 	.word	0x000120c9
    ed98:	0000d3b9 	.word	0x0000d3b9
    ed9c:	0000d3e9 	.word	0x0000d3e9
    eda0:	0000c991 	.word	0x0000c991
    eda4:	0000e19d 	.word	0x0000e19d

0000eda8 <LorawanReceiveWindow2Callback>:
    eda8:	b570      	push	{r4, r5, r6, lr}
    edaa:	4c16      	ldr	r4, [pc, #88]	; (ee04 <LorawanReceiveWindow2Callback+0x5c>)
    edac:	0025      	movs	r5, r4
    edae:	3550      	adds	r5, #80	; 0x50
    edb0:	782b      	ldrb	r3, [r5, #0]
    edb2:	2b7f      	cmp	r3, #127	; 0x7f
    edb4:	d811      	bhi.n	edda <LorawanReceiveWindow2Callback+0x32>
    edb6:	4b14      	ldr	r3, [pc, #80]	; (ee08 <LorawanReceiveWindow2Callback+0x60>)
    edb8:	4798      	blx	r3
    edba:	2801      	cmp	r0, #1
    edbc:	d109      	bne.n	edd2 <LorawanReceiveWindow2Callback+0x2a>
    edbe:	220e      	movs	r2, #14
    edc0:	782b      	ldrb	r3, [r5, #0]
    edc2:	4393      	bics	r3, r2
    edc4:	001a      	movs	r2, r3
    edc6:	230a      	movs	r3, #10
    edc8:	4313      	orrs	r3, r2
    edca:	702b      	strb	r3, [r5, #0]
    edcc:	4b0f      	ldr	r3, [pc, #60]	; (ee0c <LorawanReceiveWindow2Callback+0x64>)
    edce:	4798      	blx	r3
    edd0:	bd70      	pop	{r4, r5, r6, pc}
    edd2:	2301      	movs	r3, #1
    edd4:	34c4      	adds	r4, #196	; 0xc4
    edd6:	7023      	strb	r3, [r4, #0]
    edd8:	e7fa      	b.n	edd0 <LorawanReceiveWindow2Callback+0x28>
    edda:	2104      	movs	r1, #4
    eddc:	3460      	adds	r4, #96	; 0x60
    edde:	7822      	ldrb	r2, [r4, #0]
    ede0:	420a      	tst	r2, r1
    ede2:	d007      	beq.n	edf4 <LorawanReceiveWindow2Callback+0x4c>
    ede4:	2001      	movs	r0, #1
    ede6:	4383      	bics	r3, r0
    ede8:	438a      	bics	r2, r1
    edea:	702b      	strb	r3, [r5, #0]
    edec:	3107      	adds	r1, #7
    edee:	4b08      	ldr	r3, [pc, #32]	; (ee10 <LorawanReceiveWindow2Callback+0x68>)
    edf0:	7022      	strb	r2, [r4, #0]
    edf2:	4798      	blx	r3
    edf4:	4b07      	ldr	r3, [pc, #28]	; (ee14 <LorawanReceiveWindow2Callback+0x6c>)
    edf6:	4798      	blx	r3
    edf8:	4b07      	ldr	r3, [pc, #28]	; (ee18 <LorawanReceiveWindow2Callback+0x70>)
    edfa:	4798      	blx	r3
    edfc:	4b07      	ldr	r3, [pc, #28]	; (ee1c <LorawanReceiveWindow2Callback+0x74>)
    edfe:	4798      	blx	r3
    ee00:	e7e6      	b.n	edd0 <LorawanReceiveWindow2Callback+0x28>
    ee02:	46c0      	nop			; (mov r8, r8)
    ee04:	20001ce4 	.word	0x20001ce4
    ee08:	000116cd 	.word	0x000116cd
    ee0c:	0000ecfd 	.word	0x0000ecfd
    ee10:	00008ec5 	.word	0x00008ec5
    ee14:	0000d3e9 	.word	0x0000d3e9
    ee18:	0000d3b9 	.word	0x0000d3b9
    ee1c:	0000c991 	.word	0x0000c991

0000ee20 <SetReceptionNotOkState>:
    ee20:	2290      	movs	r2, #144	; 0x90
    ee22:	2101      	movs	r1, #1
    ee24:	4b19      	ldr	r3, [pc, #100]	; (ee8c <SetReceptionNotOkState+0x6c>)
    ee26:	0052      	lsls	r2, r2, #1
    ee28:	b510      	push	{r4, lr}
    ee2a:	5499      	strb	r1, [r3, r2]
    ee2c:	001a      	movs	r2, r3
    ee2e:	0019      	movs	r1, r3
    ee30:	32c8      	adds	r2, #200	; 0xc8
    ee32:	7812      	ldrb	r2, [r2, #0]
    ee34:	3150      	adds	r1, #80	; 0x50
    ee36:	200e      	movs	r0, #14
    ee38:	2a01      	cmp	r2, #1
    ee3a:	d11d      	bne.n	ee78 <SetReceptionNotOkState+0x58>
    ee3c:	780a      	ldrb	r2, [r1, #0]
    ee3e:	4002      	ands	r2, r0
    ee40:	2a0a      	cmp	r2, #10
    ee42:	d006      	beq.n	ee52 <SetReceptionNotOkState+0x32>
    ee44:	2a06      	cmp	r2, #6
    ee46:	d113      	bne.n	ee70 <SetReceptionNotOkState+0x50>
    ee48:	001a      	movs	r2, r3
    ee4a:	32c4      	adds	r2, #196	; 0xc4
    ee4c:	7812      	ldrb	r2, [r2, #0]
    ee4e:	2a00      	cmp	r2, #0
    ee50:	d00e      	beq.n	ee70 <SetReceptionNotOkState+0x50>
    ee52:	0019      	movs	r1, r3
    ee54:	2001      	movs	r0, #1
    ee56:	3160      	adds	r1, #96	; 0x60
    ee58:	780a      	ldrb	r2, [r1, #0]
    ee5a:	240e      	movs	r4, #14
    ee5c:	4382      	bics	r2, r0
    ee5e:	700a      	strb	r2, [r1, #0]
    ee60:	001a      	movs	r2, r3
    ee62:	3250      	adds	r2, #80	; 0x50
    ee64:	7811      	ldrb	r1, [r2, #0]
    ee66:	43a1      	bics	r1, r4
    ee68:	7011      	strb	r1, [r2, #0]
    ee6a:	7851      	ldrb	r1, [r2, #1]
    ee6c:	4381      	bics	r1, r0
    ee6e:	7051      	strb	r1, [r2, #1]
    ee70:	2200      	movs	r2, #0
    ee72:	33c4      	adds	r3, #196	; 0xc4
    ee74:	701a      	strb	r2, [r3, #0]
    ee76:	bd10      	pop	{r4, pc}
    ee78:	230a      	movs	r3, #10
    ee7a:	780a      	ldrb	r2, [r1, #0]
    ee7c:	4382      	bics	r2, r0
    ee7e:	4313      	orrs	r3, r2
    ee80:	700b      	strb	r3, [r1, #0]
    ee82:	2000      	movs	r0, #0
    ee84:	4b02      	ldr	r3, [pc, #8]	; (ee90 <SetReceptionNotOkState+0x70>)
    ee86:	4798      	blx	r3
    ee88:	e7f5      	b.n	ee76 <SetReceptionNotOkState+0x56>
    ee8a:	46c0      	nop			; (mov r8, r8)
    ee8c:	20001ce4 	.word	0x20001ce4
    ee90:	0000ecfd 	.word	0x0000ecfd

0000ee94 <UpdateCurrentDataRateAfterDataRangeChanges>:
    ee94:	4b09      	ldr	r3, [pc, #36]	; (eebc <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    ee96:	001a      	movs	r2, r3
    ee98:	32bf      	adds	r2, #191	; 0xbf
    ee9a:	7811      	ldrb	r1, [r2, #0]
    ee9c:	001a      	movs	r2, r3
    ee9e:	32b3      	adds	r2, #179	; 0xb3
    eea0:	7810      	ldrb	r0, [r2, #0]
    eea2:	4288      	cmp	r0, r1
    eea4:	d900      	bls.n	eea8 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    eea6:	7011      	strb	r1, [r2, #0]
    eea8:	001a      	movs	r2, r3
    eeaa:	33b3      	adds	r3, #179	; 0xb3
    eeac:	32be      	adds	r2, #190	; 0xbe
    eeae:	7812      	ldrb	r2, [r2, #0]
    eeb0:	7819      	ldrb	r1, [r3, #0]
    eeb2:	4291      	cmp	r1, r2
    eeb4:	d200      	bcs.n	eeb8 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    eeb6:	701a      	strb	r2, [r3, #0]
    eeb8:	4770      	bx	lr
    eeba:	46c0      	nop			; (mov r8, r8)
    eebc:	20001ce4 	.word	0x20001ce4

0000eec0 <ExecuteNewChannel>:
    eec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eec2:	b08d      	sub	sp, #52	; 0x34
    eec4:	7804      	ldrb	r4, [r0, #0]
    eec6:	ab02      	add	r3, sp, #8
    eec8:	0006      	movs	r6, r0
    eeca:	71dc      	strb	r4, [r3, #7]
    eecc:	1c41      	adds	r1, r0, #1
    eece:	2204      	movs	r2, #4
    eed0:	4b54      	ldr	r3, [pc, #336]	; (f024 <ExecuteNewChannel+0x164>)
    eed2:	a808      	add	r0, sp, #32
    eed4:	4798      	blx	r3
    eed6:	9b08      	ldr	r3, [sp, #32]
    eed8:	a904      	add	r1, sp, #16
    eeda:	021d      	lsls	r5, r3, #8
    eedc:	2364      	movs	r3, #100	; 0x64
    eede:	0a2d      	lsrs	r5, r5, #8
    eee0:	435d      	muls	r5, r3
    eee2:	1d73      	adds	r3, r6, #5
    eee4:	9301      	str	r3, [sp, #4]
    eee6:	7933      	ldrb	r3, [r6, #4]
    eee8:	2015      	movs	r0, #21
    eeea:	9300      	str	r3, [sp, #0]
    eeec:	2300      	movs	r3, #0
    eeee:	4e4e      	ldr	r6, [pc, #312]	; (f028 <ExecuteNewChannel+0x168>)
    eef0:	700c      	strb	r4, [r1, #0]
    eef2:	9508      	str	r5, [sp, #32]
    eef4:	704b      	strb	r3, [r1, #1]
    eef6:	47b0      	blx	r6
    eef8:	4c4c      	ldr	r4, [pc, #304]	; (f02c <ExecuteNewChannel+0x16c>)
    eefa:	2808      	cmp	r0, #8
    eefc:	d12b      	bne.n	ef56 <ExecuteNewChannel+0x96>
    eefe:	466a      	mov	r2, sp
    ef00:	ab02      	add	r3, sp, #8
    ef02:	79db      	ldrb	r3, [r3, #7]
    ef04:	7812      	ldrb	r2, [r2, #0]
    ef06:	af06      	add	r7, sp, #24
    ef08:	a90a      	add	r1, sp, #40	; 0x28
    ef0a:	3806      	subs	r0, #6
    ef0c:	703b      	strb	r3, [r7, #0]
    ef0e:	707a      	strb	r2, [r7, #1]
    ef10:	710b      	strb	r3, [r1, #4]
    ef12:	950a      	str	r5, [sp, #40]	; 0x28
    ef14:	47b0      	blx	r6
    ef16:	2808      	cmp	r0, #8
    ef18:	d001      	beq.n	ef1e <ExecuteNewChannel+0x5e>
    ef1a:	2d00      	cmp	r5, #0
    ef1c:	d10b      	bne.n	ef36 <ExecuteNewChannel+0x76>
    ef1e:	0023      	movs	r3, r4
    ef20:	33ac      	adds	r3, #172	; 0xac
    ef22:	781a      	ldrb	r2, [r3, #0]
    ef24:	2303      	movs	r3, #3
    ef26:	4353      	muls	r3, r2
    ef28:	2280      	movs	r2, #128	; 0x80
    ef2a:	18e3      	adds	r3, r4, r3
    ef2c:	3360      	adds	r3, #96	; 0x60
    ef2e:	79d9      	ldrb	r1, [r3, #7]
    ef30:	4252      	negs	r2, r2
    ef32:	430a      	orrs	r2, r1
    ef34:	71da      	strb	r2, [r3, #7]
    ef36:	0039      	movs	r1, r7
    ef38:	2012      	movs	r0, #18
    ef3a:	47b0      	blx	r6
    ef3c:	2808      	cmp	r0, #8
    ef3e:	d10a      	bne.n	ef56 <ExecuteNewChannel+0x96>
    ef40:	0023      	movs	r3, r4
    ef42:	33ac      	adds	r3, #172	; 0xac
    ef44:	781a      	ldrb	r2, [r3, #0]
    ef46:	2303      	movs	r3, #3
    ef48:	4353      	muls	r3, r2
    ef4a:	2240      	movs	r2, #64	; 0x40
    ef4c:	18e3      	adds	r3, r4, r3
    ef4e:	3360      	adds	r3, #96	; 0x60
    ef50:	79d9      	ldrb	r1, [r3, #7]
    ef52:	430a      	orrs	r2, r1
    ef54:	71da      	strb	r2, [r3, #7]
    ef56:	0023      	movs	r3, r4
    ef58:	33ac      	adds	r3, #172	; 0xac
    ef5a:	781a      	ldrb	r2, [r3, #0]
    ef5c:	2303      	movs	r3, #3
    ef5e:	4353      	muls	r3, r2
    ef60:	18e3      	adds	r3, r4, r3
    ef62:	3360      	adds	r3, #96	; 0x60
    ef64:	79db      	ldrb	r3, [r3, #7]
    ef66:	09da      	lsrs	r2, r3, #7
    ef68:	2a01      	cmp	r2, #1
    ef6a:	d150      	bne.n	f00e <ExecuteNewChannel+0x14e>
    ef6c:	065b      	lsls	r3, r3, #25
    ef6e:	d54e      	bpl.n	f00e <ExecuteNewChannel+0x14e>
    ef70:	4e2f      	ldr	r6, [pc, #188]	; (f030 <ExecuteNewChannel+0x170>)
    ef72:	2d00      	cmp	r5, #0
    ef74:	d04e      	beq.n	f014 <ExecuteNewChannel+0x154>
    ef76:	a906      	add	r1, sp, #24
    ef78:	2012      	movs	r0, #18
    ef7a:	47b0      	blx	r6
    ef7c:	ad07      	add	r5, sp, #28
    ef7e:	a90a      	add	r1, sp, #40	; 0x28
    ef80:	2000      	movs	r0, #0
    ef82:	47b0      	blx	r6
    ef84:	002a      	movs	r2, r5
    ef86:	2100      	movs	r1, #0
    ef88:	2014      	movs	r0, #20
    ef8a:	4f2a      	ldr	r7, [pc, #168]	; (f034 <ExecuteNewChannel+0x174>)
    ef8c:	47b8      	blx	r7
    ef8e:	0023      	movs	r3, r4
    ef90:	782a      	ldrb	r2, [r5, #0]
    ef92:	33be      	adds	r3, #190	; 0xbe
    ef94:	701a      	strb	r2, [r3, #0]
    ef96:	0023      	movs	r3, r4
    ef98:	786a      	ldrb	r2, [r5, #1]
    ef9a:	33bf      	adds	r3, #191	; 0xbf
    ef9c:	701a      	strb	r2, [r3, #0]
    ef9e:	34e4      	adds	r4, #228	; 0xe4
    efa0:	4b25      	ldr	r3, [pc, #148]	; (f038 <ExecuteNewChannel+0x178>)
    efa2:	4798      	blx	r3
    efa4:	7823      	ldrb	r3, [r4, #0]
    efa6:	079b      	lsls	r3, r3, #30
    efa8:	d50e      	bpl.n	efc8 <ExecuteNewChannel+0x108>
    efaa:	2416      	movs	r4, #22
    efac:	ab02      	add	r3, sp, #8
    efae:	18e4      	adds	r4, r4, r3
    efb0:	1dd9      	adds	r1, r3, #7
    efb2:	0022      	movs	r2, r4
    efb4:	201e      	movs	r0, #30
    efb6:	47b8      	blx	r7
    efb8:	ab02      	add	r3, sp, #8
    efba:	79db      	ldrb	r3, [r3, #7]
    efbc:	a909      	add	r1, sp, #36	; 0x24
    efbe:	708b      	strb	r3, [r1, #2]
    efc0:	8823      	ldrh	r3, [r4, #0]
    efc2:	201e      	movs	r0, #30
    efc4:	800b      	strh	r3, [r1, #0]
    efc6:	47b0      	blx	r6
    efc8:	ab02      	add	r3, sp, #8
    efca:	79db      	ldrb	r3, [r3, #7]
    efcc:	a905      	add	r1, sp, #20
    efce:	700b      	strb	r3, [r1, #0]
    efd0:	2301      	movs	r3, #1
    efd2:	2016      	movs	r0, #22
    efd4:	704b      	strb	r3, [r1, #1]
    efd6:	4b16      	ldr	r3, [pc, #88]	; (f030 <ExecuteNewChannel+0x170>)
    efd8:	4798      	blx	r3
    efda:	ad09      	add	r5, sp, #36	; 0x24
    efdc:	2100      	movs	r1, #0
    efde:	002a      	movs	r2, r5
    efe0:	4b14      	ldr	r3, [pc, #80]	; (f034 <ExecuteNewChannel+0x174>)
    efe2:	2014      	movs	r0, #20
    efe4:	4798      	blx	r3
    efe6:	4c11      	ldr	r4, [pc, #68]	; (f02c <ExecuteNewChannel+0x16c>)
    efe8:	782a      	ldrb	r2, [r5, #0]
    efea:	0023      	movs	r3, r4
    efec:	33be      	adds	r3, #190	; 0xbe
    efee:	701a      	strb	r2, [r3, #0]
    eff0:	0023      	movs	r3, r4
    eff2:	786a      	ldrb	r2, [r5, #1]
    eff4:	33bf      	adds	r3, #191	; 0xbf
    eff6:	701a      	strb	r2, [r3, #0]
    eff8:	4b0f      	ldr	r3, [pc, #60]	; (f038 <ExecuteNewChannel+0x178>)
    effa:	4798      	blx	r3
    effc:	2304      	movs	r3, #4
    effe:	3450      	adds	r4, #80	; 0x50
    f000:	7862      	ldrb	r2, [r4, #1]
    f002:	210b      	movs	r1, #11
    f004:	4313      	orrs	r3, r2
    f006:	7063      	strb	r3, [r4, #1]
    f008:	2001      	movs	r0, #1
    f00a:	4b0c      	ldr	r3, [pc, #48]	; (f03c <ExecuteNewChannel+0x17c>)
    f00c:	4798      	blx	r3
    f00e:	9801      	ldr	r0, [sp, #4]
    f010:	b00d      	add	sp, #52	; 0x34
    f012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f014:	ab02      	add	r3, sp, #8
    f016:	79db      	ldrb	r3, [r3, #7]
    f018:	a905      	add	r1, sp, #20
    f01a:	2016      	movs	r0, #22
    f01c:	700b      	strb	r3, [r1, #0]
    f01e:	704d      	strb	r5, [r1, #1]
    f020:	47b0      	blx	r6
    f022:	e7da      	b.n	efda <ExecuteNewChannel+0x11a>
    f024:	000158c9 	.word	0x000158c9
    f028:	00008aa1 	.word	0x00008aa1
    f02c:	20001ce4 	.word	0x20001ce4
    f030:	00008abd 	.word	0x00008abd
    f034:	00008a85 	.word	0x00008a85
    f038:	0000ee95 	.word	0x0000ee95
    f03c:	00008ec5 	.word	0x00008ec5

0000f040 <MacExecuteCommands>:
    f040:	2300      	movs	r3, #0
    f042:	b5f0      	push	{r4, r5, r6, r7, lr}
    f044:	0007      	movs	r7, r0
    f046:	2601      	movs	r6, #1
    f048:	b087      	sub	sp, #28
    f04a:	9002      	str	r0, [sp, #8]
    f04c:	9103      	str	r1, [sp, #12]
    f04e:	9300      	str	r3, [sp, #0]
    f050:	9b02      	ldr	r3, [sp, #8]
    f052:	9a03      	ldr	r2, [sp, #12]
    f054:	4c69      	ldr	r4, [pc, #420]	; (f1fc <MacExecuteCommands+0x1bc>)
    f056:	1898      	adds	r0, r3, r2
    f058:	4287      	cmp	r7, r0
    f05a:	d353      	bcc.n	f104 <MacExecuteCommands+0xc4>
    f05c:	2393      	movs	r3, #147	; 0x93
    f05e:	005b      	lsls	r3, r3, #1
    f060:	5ce3      	ldrb	r3, [r4, r3]
    f062:	2b00      	cmp	r3, #0
    f064:	d000      	beq.n	f068 <MacExecuteCommands+0x28>
    f066:	e072      	b.n	f14e <MacExecuteCommands+0x10e>
    f068:	0038      	movs	r0, r7
    f06a:	b007      	add	sp, #28
    f06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f06e:	0023      	movs	r3, r4
    f070:	787a      	ldrb	r2, [r7, #1]
    f072:	33b1      	adds	r3, #177	; 0xb1
    f074:	701a      	strb	r2, [r3, #0]
    f076:	0023      	movs	r3, r4
    f078:	78ba      	ldrb	r2, [r7, #2]
    f07a:	33b2      	adds	r3, #178	; 0xb2
    f07c:	701a      	strb	r2, [r3, #0]
    f07e:	2203      	movs	r2, #3
    f080:	9b01      	ldr	r3, [sp, #4]
    f082:	1cfd      	adds	r5, r7, #3
    f084:	4353      	muls	r3, r2
    f086:	18e3      	adds	r3, r4, r3
    f088:	3366      	adds	r3, #102	; 0x66
    f08a:	32fc      	adds	r2, #252	; 0xfc
    f08c:	701a      	strb	r2, [r3, #0]
    f08e:	0022      	movs	r2, r4
    f090:	2103      	movs	r1, #3
    f092:	32ac      	adds	r2, #172	; 0xac
    f094:	7813      	ldrb	r3, [r2, #0]
    f096:	4359      	muls	r1, r3
    f098:	1864      	adds	r4, r4, r1
    f09a:	3466      	adds	r4, #102	; 0x66
    f09c:	7821      	ldrb	r1, [r4, #0]
    f09e:	29ff      	cmp	r1, #255	; 0xff
    f0a0:	d003      	beq.n	f0aa <MacExecuteCommands+0x6a>
    f0a2:	2b0f      	cmp	r3, #15
    f0a4:	d801      	bhi.n	f0aa <MacExecuteCommands+0x6a>
    f0a6:	3301      	adds	r3, #1
    f0a8:	7013      	strb	r3, [r2, #0]
    f0aa:	002f      	movs	r7, r5
    f0ac:	e7d0      	b.n	f050 <MacExecuteCommands+0x10>
    f0ae:	0028      	movs	r0, r5
    f0b0:	4b53      	ldr	r3, [pc, #332]	; (f200 <MacExecuteCommands+0x1c0>)
    f0b2:	4798      	blx	r3
    f0b4:	0005      	movs	r5, r0
    f0b6:	e7ea      	b.n	f08e <MacExecuteCommands+0x4e>
    f0b8:	0028      	movs	r0, r5
    f0ba:	4b52      	ldr	r3, [pc, #328]	; (f204 <MacExecuteCommands+0x1c4>)
    f0bc:	e7f9      	b.n	f0b2 <MacExecuteCommands+0x72>
    f0be:	0028      	movs	r0, r5
    f0c0:	4b51      	ldr	r3, [pc, #324]	; (f208 <MacExecuteCommands+0x1c8>)
    f0c2:	e7f6      	b.n	f0b2 <MacExecuteCommands+0x72>
    f0c4:	0028      	movs	r0, r5
    f0c6:	4b51      	ldr	r3, [pc, #324]	; (f20c <MacExecuteCommands+0x1cc>)
    f0c8:	e7f3      	b.n	f0b2 <MacExecuteCommands+0x72>
    f0ca:	230f      	movs	r3, #15
    f0cc:	7878      	ldrb	r0, [r7, #1]
    f0ce:	1cbd      	adds	r5, r7, #2
    f0d0:	4018      	ands	r0, r3
    f0d2:	4b4f      	ldr	r3, [pc, #316]	; (f210 <MacExecuteCommands+0x1d0>)
    f0d4:	4798      	blx	r3
    f0d6:	0022      	movs	r2, r4
    f0d8:	2380      	movs	r3, #128	; 0x80
    f0da:	3250      	adds	r2, #80	; 0x50
    f0dc:	7851      	ldrb	r1, [r2, #1]
    f0de:	425b      	negs	r3, r3
    f0e0:	430b      	orrs	r3, r1
    f0e2:	7053      	strb	r3, [r2, #1]
    f0e4:	210b      	movs	r1, #11
    f0e6:	0030      	movs	r0, r6
    f0e8:	4b4a      	ldr	r3, [pc, #296]	; (f214 <MacExecuteCommands+0x1d4>)
    f0ea:	4798      	blx	r3
    f0ec:	e7cf      	b.n	f08e <MacExecuteCommands+0x4e>
    f0ee:	0028      	movs	r0, r5
    f0f0:	4b49      	ldr	r3, [pc, #292]	; (f218 <MacExecuteCommands+0x1d8>)
    f0f2:	e7de      	b.n	f0b2 <MacExecuteCommands+0x72>
    f0f4:	0028      	movs	r0, r5
    f0f6:	4b49      	ldr	r3, [pc, #292]	; (f21c <MacExecuteCommands+0x1dc>)
    f0f8:	e7db      	b.n	f0b2 <MacExecuteCommands+0x72>
    f0fa:	22ff      	movs	r2, #255	; 0xff
    f0fc:	0005      	movs	r5, r0
    f0fe:	701a      	strb	r2, [r3, #0]
    f100:	9600      	str	r6, [sp, #0]
    f102:	e7c4      	b.n	f08e <MacExecuteCommands+0x4e>
    f104:	9b00      	ldr	r3, [sp, #0]
    f106:	2b00      	cmp	r3, #0
    f108:	d1a8      	bne.n	f05c <MacExecuteCommands+0x1c>
    f10a:	0023      	movs	r3, r4
    f10c:	33ac      	adds	r3, #172	; 0xac
    f10e:	781b      	ldrb	r3, [r3, #0]
    f110:	2501      	movs	r5, #1
    f112:	9301      	str	r3, [sp, #4]
    f114:	2303      	movs	r3, #3
    f116:	9a01      	ldr	r2, [sp, #4]
    f118:	4353      	muls	r3, r2
    f11a:	18e3      	adds	r3, r4, r3
    f11c:	0019      	movs	r1, r3
    f11e:	3160      	adds	r1, #96	; 0x60
    f120:	79ca      	ldrb	r2, [r1, #7]
    f122:	3366      	adds	r3, #102	; 0x66
    f124:	43b2      	bics	r2, r6
    f126:	402a      	ands	r2, r5
    f128:	71ca      	strb	r2, [r1, #7]
    f12a:	7a0a      	ldrb	r2, [r1, #8]
    f12c:	197d      	adds	r5, r7, r5
    f12e:	43b2      	bics	r2, r6
    f130:	720a      	strb	r2, [r1, #8]
    f132:	783a      	ldrb	r2, [r7, #0]
    f134:	701a      	strb	r2, [r3, #0]
    f136:	783a      	ldrb	r2, [r7, #0]
    f138:	3a02      	subs	r2, #2
    f13a:	2a08      	cmp	r2, #8
    f13c:	d8dd      	bhi.n	f0fa <MacExecuteCommands+0xba>
    f13e:	0010      	movs	r0, r2
    f140:	f003 fac6 	bl	126d0 <__gnu_thumb1_case_sqi>
    f144:	bdbab595 	.word	0xbdbab595
    f148:	d5c3c0a5 	.word	0xd5c3c0a5
    f14c:	d8          	.byte	0xd8
    f14d:	00          	.byte	0x00
    f14e:	2324      	movs	r3, #36	; 0x24
    f150:	33ff      	adds	r3, #255	; 0xff
    f152:	5ce3      	ldrb	r3, [r4, r3]
    f154:	43db      	mvns	r3, r3
    f156:	075b      	lsls	r3, r3, #29
    f158:	d000      	beq.n	f15c <MacExecuteCommands+0x11c>
    f15a:	e785      	b.n	f068 <MacExecuteCommands+0x28>
    f15c:	232a      	movs	r3, #42	; 0x2a
    f15e:	33ff      	adds	r3, #255	; 0xff
    f160:	5ce5      	ldrb	r5, [r4, r3]
    f162:	2326      	movs	r3, #38	; 0x26
    f164:	33ff      	adds	r3, #255	; 0xff
    f166:	5ce3      	ldrb	r3, [r4, r3]
    f168:	a905      	add	r1, sp, #20
    f16a:	9300      	str	r3, [sp, #0]
    f16c:	2392      	movs	r3, #146	; 0x92
    f16e:	005b      	lsls	r3, r3, #1
    f170:	5ce3      	ldrb	r3, [r4, r3]
    f172:	066a      	lsls	r2, r5, #25
    f174:	9301      	str	r3, [sp, #4]
    f176:	2328      	movs	r3, #40	; 0x28
    f178:	33ff      	adds	r3, #255	; 0xff
    f17a:	5ce0      	ldrb	r0, [r4, r3]
    f17c:	3301      	adds	r3, #1
    f17e:	5ce3      	ldrb	r3, [r4, r3]
    f180:	0f52      	lsrs	r2, r2, #29
    f182:	021b      	lsls	r3, r3, #8
    f184:	4303      	orrs	r3, r0
    f186:	800b      	strh	r3, [r1, #0]
    f188:	201c      	movs	r0, #28
    f18a:	4b25      	ldr	r3, [pc, #148]	; (f220 <MacExecuteCommands+0x1e0>)
    f18c:	708a      	strb	r2, [r1, #2]
    f18e:	4798      	blx	r3
    f190:	2100      	movs	r1, #0
    f192:	aa04      	add	r2, sp, #16
    f194:	4b23      	ldr	r3, [pc, #140]	; (f224 <MacExecuteCommands+0x1e4>)
    f196:	2014      	movs	r0, #20
    f198:	4798      	blx	r3
    f19a:	0023      	movs	r3, r4
    f19c:	aa04      	add	r2, sp, #16
    f19e:	7812      	ldrb	r2, [r2, #0]
    f1a0:	33be      	adds	r3, #190	; 0xbe
    f1a2:	701a      	strb	r2, [r3, #0]
    f1a4:	0023      	movs	r3, r4
    f1a6:	aa04      	add	r2, sp, #16
    f1a8:	7852      	ldrb	r2, [r2, #1]
    f1aa:	33bf      	adds	r3, #191	; 0xbf
    f1ac:	701a      	strb	r2, [r3, #0]
    f1ae:	4b1e      	ldr	r3, [pc, #120]	; (f228 <MacExecuteCommands+0x1e8>)
    f1b0:	4798      	blx	r3
    f1b2:	9800      	ldr	r0, [sp, #0]
    f1b4:	4b1d      	ldr	r3, [pc, #116]	; (f22c <MacExecuteCommands+0x1ec>)
    f1b6:	4798      	blx	r3
    f1b8:	0022      	movs	r2, r4
    f1ba:	2308      	movs	r3, #8
    f1bc:	3250      	adds	r2, #80	; 0x50
    f1be:	7851      	ldrb	r1, [r2, #1]
    f1c0:	072d      	lsls	r5, r5, #28
    f1c2:	430b      	orrs	r3, r1
    f1c4:	7053      	strb	r3, [r2, #1]
    f1c6:	0f2d      	lsrs	r5, r5, #28
    f1c8:	9801      	ldr	r0, [sp, #4]
    f1ca:	4b19      	ldr	r3, [pc, #100]	; (f230 <MacExecuteCommands+0x1f0>)
    f1cc:	b2ee      	uxtb	r6, r5
    f1ce:	4798      	blx	r3
    f1d0:	34ad      	adds	r4, #173	; 0xad
    f1d2:	2e00      	cmp	r6, #0
    f1d4:	d10e      	bne.n	f1f4 <MacExecuteCommands+0x1b4>
    f1d6:	7025      	strb	r5, [r4, #0]
    f1d8:	2114      	movs	r1, #20
    f1da:	4c0e      	ldr	r4, [pc, #56]	; (f214 <MacExecuteCommands+0x1d4>)
    f1dc:	2000      	movs	r0, #0
    f1de:	47a0      	blx	r4
    f1e0:	2210      	movs	r2, #16
    f1e2:	4b06      	ldr	r3, [pc, #24]	; (f1fc <MacExecuteCommands+0x1bc>)
    f1e4:	2001      	movs	r0, #1
    f1e6:	3350      	adds	r3, #80	; 0x50
    f1e8:	7859      	ldrb	r1, [r3, #1]
    f1ea:	430a      	orrs	r2, r1
    f1ec:	705a      	strb	r2, [r3, #1]
    f1ee:	210b      	movs	r1, #11
    f1f0:	47a0      	blx	r4
    f1f2:	e739      	b.n	f068 <MacExecuteCommands+0x28>
    f1f4:	1e73      	subs	r3, r6, #1
    f1f6:	7023      	strb	r3, [r4, #0]
    f1f8:	e7ee      	b.n	f1d8 <MacExecuteCommands+0x198>
    f1fa:	46c0      	nop			; (mov r8, r8)
    f1fc:	20001ce4 	.word	0x20001ce4
    f200:	0000d6b9 	.word	0x0000d6b9
    f204:	0000d55d 	.word	0x0000d55d
    f208:	0000d461 	.word	0x0000d461
    f20c:	0000eec1 	.word	0x0000eec1
    f210:	0000ca9d 	.word	0x0000ca9d
    f214:	00008ec5 	.word	0x00008ec5
    f218:	0000d669 	.word	0x0000d669
    f21c:	0000d5b5 	.word	0x0000d5b5
    f220:	00008abd 	.word	0x00008abd
    f224:	00008a85 	.word	0x00008a85
    f228:	0000ee95 	.word	0x0000ee95
    f22c:	0000d329 	.word	0x0000d329
    f230:	0000d2bd 	.word	0x0000d2bd

0000f234 <LorawanSetDataRange>:
    f234:	2201      	movs	r2, #1
    f236:	b530      	push	{r4, r5, lr}
    f238:	b085      	sub	sp, #20
    f23a:	ab01      	add	r3, sp, #4
    f23c:	ac02      	add	r4, sp, #8
    f23e:	7018      	strb	r0, [r3, #0]
    f240:	7020      	strb	r0, [r4, #0]
    f242:	7061      	strb	r1, [r4, #1]
    f244:	2015      	movs	r0, #21
    f246:	0019      	movs	r1, r3
    f248:	4d11      	ldr	r5, [pc, #68]	; (f290 <LorawanSetDataRange+0x5c>)
    f24a:	705a      	strb	r2, [r3, #1]
    f24c:	47a8      	blx	r5
    f24e:	2808      	cmp	r0, #8
    f250:	d003      	beq.n	f25a <LorawanSetDataRange+0x26>
    f252:	250a      	movs	r5, #10
    f254:	0028      	movs	r0, r5
    f256:	b005      	add	sp, #20
    f258:	bd30      	pop	{r4, r5, pc}
    f25a:	0021      	movs	r1, r4
    f25c:	2012      	movs	r0, #18
    f25e:	47a8      	blx	r5
    f260:	0005      	movs	r5, r0
    f262:	2808      	cmp	r0, #8
    f264:	d1f5      	bne.n	f252 <LorawanSetDataRange+0x1e>
    f266:	0021      	movs	r1, r4
    f268:	4b0a      	ldr	r3, [pc, #40]	; (f294 <LorawanSetDataRange+0x60>)
    f26a:	ac03      	add	r4, sp, #12
    f26c:	2012      	movs	r0, #18
    f26e:	4798      	blx	r3
    f270:	0022      	movs	r2, r4
    f272:	2100      	movs	r1, #0
    f274:	4b08      	ldr	r3, [pc, #32]	; (f298 <LorawanSetDataRange+0x64>)
    f276:	2014      	movs	r0, #20
    f278:	4798      	blx	r3
    f27a:	4b08      	ldr	r3, [pc, #32]	; (f29c <LorawanSetDataRange+0x68>)
    f27c:	7821      	ldrb	r1, [r4, #0]
    f27e:	001a      	movs	r2, r3
    f280:	32be      	adds	r2, #190	; 0xbe
    f282:	7011      	strb	r1, [r2, #0]
    f284:	7862      	ldrb	r2, [r4, #1]
    f286:	33bf      	adds	r3, #191	; 0xbf
    f288:	701a      	strb	r2, [r3, #0]
    f28a:	4b05      	ldr	r3, [pc, #20]	; (f2a0 <LorawanSetDataRange+0x6c>)
    f28c:	4798      	blx	r3
    f28e:	e7e1      	b.n	f254 <LorawanSetDataRange+0x20>
    f290:	00008aa1 	.word	0x00008aa1
    f294:	00008abd 	.word	0x00008abd
    f298:	00008a85 	.word	0x00008a85
    f29c:	20001ce4 	.word	0x20001ce4
    f2a0:	0000ee95 	.word	0x0000ee95

0000f2a4 <LorawanSetChannelIdStatus>:
    f2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f2a6:	466b      	mov	r3, sp
    f2a8:	7018      	strb	r0, [r3, #0]
    f2aa:	7059      	strb	r1, [r3, #1]
    f2ac:	2016      	movs	r0, #22
    f2ae:	4669      	mov	r1, sp
    f2b0:	4b0c      	ldr	r3, [pc, #48]	; (f2e4 <LorawanSetChannelIdStatus+0x40>)
    f2b2:	4798      	blx	r3
    f2b4:	0004      	movs	r4, r0
    f2b6:	2808      	cmp	r0, #8
    f2b8:	d111      	bne.n	f2de <LorawanSetChannelIdStatus+0x3a>
    f2ba:	ad01      	add	r5, sp, #4
    f2bc:	002a      	movs	r2, r5
    f2be:	2100      	movs	r1, #0
    f2c0:	4b09      	ldr	r3, [pc, #36]	; (f2e8 <LorawanSetChannelIdStatus+0x44>)
    f2c2:	2014      	movs	r0, #20
    f2c4:	4798      	blx	r3
    f2c6:	4b09      	ldr	r3, [pc, #36]	; (f2ec <LorawanSetChannelIdStatus+0x48>)
    f2c8:	7829      	ldrb	r1, [r5, #0]
    f2ca:	001a      	movs	r2, r3
    f2cc:	32be      	adds	r2, #190	; 0xbe
    f2ce:	7011      	strb	r1, [r2, #0]
    f2d0:	786a      	ldrb	r2, [r5, #1]
    f2d2:	33bf      	adds	r3, #191	; 0xbf
    f2d4:	701a      	strb	r2, [r3, #0]
    f2d6:	4b06      	ldr	r3, [pc, #24]	; (f2f0 <LorawanSetChannelIdStatus+0x4c>)
    f2d8:	4798      	blx	r3
    f2da:	0020      	movs	r0, r4
    f2dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f2de:	240a      	movs	r4, #10
    f2e0:	e7fb      	b.n	f2da <LorawanSetChannelIdStatus+0x36>
    f2e2:	46c0      	nop			; (mov r8, r8)
    f2e4:	00008abd 	.word	0x00008abd
    f2e8:	00008a85 	.word	0x00008a85
    f2ec:	20001ce4 	.word	0x20001ce4
    f2f0:	0000ee95 	.word	0x0000ee95

0000f2f4 <LORAWAN_RxDone>:
    f2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2f6:	4ddc      	ldr	r5, [pc, #880]	; (f668 <LORAWAN_RxDone+0x374>)
    f2f8:	b091      	sub	sp, #68	; 0x44
    f2fa:	002b      	movs	r3, r5
    f2fc:	3350      	adds	r3, #80	; 0x50
    f2fe:	781b      	ldrb	r3, [r3, #0]
    f300:	0007      	movs	r7, r0
    f302:	b25a      	sxtb	r2, r3
    f304:	000c      	movs	r4, r1
    f306:	2a00      	cmp	r2, #0
    f308:	da01      	bge.n	f30e <LORAWAN_RxDone+0x1a>
    f30a:	f000 fc90 	bl	fc2e <LORAWAN_RxDone+0x93a>
    f30e:	7801      	ldrb	r1, [r0, #0]
    f310:	221f      	movs	r2, #31
    f312:	000e      	movs	r6, r1
    f314:	4396      	bics	r6, r2
    f316:	2e20      	cmp	r6, #32
    f318:	d000      	beq.n	f31c <LORAWAN_RxDone+0x28>
    f31a:	e131      	b.n	f580 <LORAWAN_RxDone+0x28c>
    f31c:	782b      	ldrb	r3, [r5, #0]
    f31e:	2b00      	cmp	r3, #0
    f320:	d001      	beq.n	f326 <LORAWAN_RxDone+0x32>
    f322:	f000 fc6d 	bl	fc00 <LORAWAN_RxDone+0x90c>
    f326:	002b      	movs	r3, r5
    f328:	3360      	adds	r3, #96	; 0x60
    f32a:	781b      	ldrb	r3, [r3, #0]
    f32c:	075b      	lsls	r3, r3, #29
    f32e:	d401      	bmi.n	f334 <LORAWAN_RxDone+0x40>
    f330:	f000 fc66 	bl	fc00 <LORAWAN_RxDone+0x90c>
    f334:	1e63      	subs	r3, r4, #1
    f336:	b2db      	uxtb	r3, r3
    f338:	9304      	str	r3, [sp, #16]
    f33a:	4bcc      	ldr	r3, [pc, #816]	; (f66c <LORAWAN_RxDone+0x378>)
    f33c:	469c      	mov	ip, r3
    f33e:	9b04      	ldr	r3, [sp, #16]
    f340:	2b00      	cmp	r3, #0
    f342:	d12c      	bne.n	f39e <LORAWAN_RxDone+0xaa>
    f344:	1f23      	subs	r3, r4, #4
    f346:	9305      	str	r3, [sp, #20]
    f348:	466b      	mov	r3, sp
    f34a:	4660      	mov	r0, ip
    f34c:	7d1b      	ldrb	r3, [r3, #20]
    f34e:	003a      	movs	r2, r7
    f350:	49c7      	ldr	r1, [pc, #796]	; (f670 <LORAWAN_RxDone+0x37c>)
    f352:	4ec8      	ldr	r6, [pc, #800]	; (f674 <LORAWAN_RxDone+0x380>)
    f354:	47b0      	blx	r6
    f356:	2204      	movs	r2, #4
    f358:	49c5      	ldr	r1, [pc, #788]	; (f670 <LORAWAN_RxDone+0x37c>)
    f35a:	4bc7      	ldr	r3, [pc, #796]	; (f678 <LORAWAN_RxDone+0x384>)
    f35c:	a80e      	add	r0, sp, #56	; 0x38
    f35e:	4798      	blx	r3
    f360:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f362:	1f23      	subs	r3, r4, #4
    f364:	18f9      	adds	r1, r7, r3
    f366:	2204      	movs	r2, #4
    f368:	4bc3      	ldr	r3, [pc, #780]	; (f678 <LORAWAN_RxDone+0x384>)
    f36a:	a80e      	add	r0, sp, #56	; 0x38
    f36c:	960b      	str	r6, [sp, #44]	; 0x2c
    f36e:	4798      	blx	r3
    f370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f372:	4bbd      	ldr	r3, [pc, #756]	; (f668 <LORAWAN_RxDone+0x374>)
    f374:	210e      	movs	r1, #14
    f376:	42b2      	cmp	r2, r6
    f378:	d01e      	beq.n	f3b8 <LORAWAN_RxDone+0xc4>
    f37a:	001a      	movs	r2, r3
    f37c:	3250      	adds	r2, #80	; 0x50
    f37e:	7812      	ldrb	r2, [r2, #0]
    f380:	400a      	ands	r2, r1
    f382:	2a0a      	cmp	r2, #10
    f384:	d005      	beq.n	f392 <LORAWAN_RxDone+0x9e>
    f386:	2a06      	cmp	r2, #6
    f388:	d105      	bne.n	f396 <LORAWAN_RxDone+0xa2>
    f38a:	33c4      	adds	r3, #196	; 0xc4
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	2b00      	cmp	r3, #0
    f390:	d001      	beq.n	f396 <LORAWAN_RxDone+0xa2>
    f392:	4bba      	ldr	r3, [pc, #744]	; (f67c <LORAWAN_RxDone+0x388>)
    f394:	4798      	blx	r3
    f396:	4bba      	ldr	r3, [pc, #744]	; (f680 <LORAWAN_RxDone+0x38c>)
    f398:	4798      	blx	r3
    f39a:	200a      	movs	r0, #10
    f39c:	e0eb      	b.n	f576 <LORAWAN_RxDone+0x282>
    f39e:	9b04      	ldr	r3, [sp, #16]
    f3a0:	4661      	mov	r1, ip
    f3a2:	1ae0      	subs	r0, r4, r3
    f3a4:	1838      	adds	r0, r7, r0
    f3a6:	4bb7      	ldr	r3, [pc, #732]	; (f684 <LORAWAN_RxDone+0x390>)
    f3a8:	4798      	blx	r3
    f3aa:	9b04      	ldr	r3, [sp, #16]
    f3ac:	2b10      	cmp	r3, #16
    f3ae:	d901      	bls.n	f3b4 <LORAWAN_RxDone+0xc0>
    f3b0:	3b10      	subs	r3, #16
    f3b2:	e7c0      	b.n	f336 <LORAWAN_RxDone+0x42>
    f3b4:	2300      	movs	r3, #0
    f3b6:	e7bf      	b.n	f338 <LORAWAN_RxDone+0x44>
    f3b8:	001a      	movs	r2, r3
    f3ba:	3250      	adds	r2, #80	; 0x50
    f3bc:	7812      	ldrb	r2, [r2, #0]
    f3be:	400a      	ands	r2, r1
    f3c0:	2a06      	cmp	r2, #6
    f3c2:	d103      	bne.n	f3cc <LORAWAN_RxDone+0xd8>
    f3c4:	33b7      	adds	r3, #183	; 0xb7
    f3c6:	7818      	ldrb	r0, [r3, #0]
    f3c8:	4baf      	ldr	r3, [pc, #700]	; (f688 <LORAWAN_RxDone+0x394>)
    f3ca:	4798      	blx	r3
    f3cc:	7a3a      	ldrb	r2, [r7, #8]
    f3ce:	79fb      	ldrb	r3, [r7, #7]
    f3d0:	0212      	lsls	r2, r2, #8
    f3d2:	431a      	orrs	r2, r3
    f3d4:	7a7b      	ldrb	r3, [r7, #9]
    f3d6:	2001      	movs	r0, #1
    f3d8:	041b      	lsls	r3, r3, #16
    f3da:	431a      	orrs	r2, r3
    f3dc:	7abb      	ldrb	r3, [r7, #10]
    f3de:	061b      	lsls	r3, r3, #24
    f3e0:	4313      	orrs	r3, r2
    f3e2:	0a19      	lsrs	r1, r3, #8
    f3e4:	706b      	strb	r3, [r5, #1]
    f3e6:	70a9      	strb	r1, [r5, #2]
    f3e8:	0c19      	lsrs	r1, r3, #16
    f3ea:	0e1b      	lsrs	r3, r3, #24
    f3ec:	70e9      	strb	r1, [r5, #3]
    f3ee:	712b      	strb	r3, [r5, #4]
    f3f0:	250f      	movs	r5, #15
    f3f2:	2103      	movs	r1, #3
    f3f4:	4ba5      	ldr	r3, [pc, #660]	; (f68c <LORAWAN_RxDone+0x398>)
    f3f6:	4798      	blx	r3
    f3f8:	7b38      	ldrb	r0, [r7, #12]
    f3fa:	4ba5      	ldr	r3, [pc, #660]	; (f690 <LORAWAN_RxDone+0x39c>)
    f3fc:	4028      	ands	r0, r5
    f3fe:	4798      	blx	r3
    f400:	7af8      	ldrb	r0, [r7, #11]
    f402:	4ba4      	ldr	r3, [pc, #656]	; (f694 <LORAWAN_RxDone+0x3a0>)
    f404:	0641      	lsls	r1, r0, #25
    f406:	0700      	lsls	r0, r0, #28
    f408:	0f49      	lsrs	r1, r1, #29
    f40a:	0f00      	lsrs	r0, r0, #28
    f40c:	4798      	blx	r3
    f40e:	2c21      	cmp	r4, #33	; 0x21
    f410:	d000      	beq.n	f414 <LORAWAN_RxDone+0x120>
    f412:	e088      	b.n	f526 <LORAWAN_RxDone+0x232>
    f414:	ab04      	add	r3, sp, #16
    f416:	3c0f      	subs	r4, #15
    f418:	18e4      	adds	r4, r4, r3
    f41a:	0022      	movs	r2, r4
    f41c:	4b9e      	ldr	r3, [pc, #632]	; (f698 <LORAWAN_RxDone+0x3a4>)
    f41e:	499f      	ldr	r1, [pc, #636]	; (f69c <LORAWAN_RxDone+0x3a8>)
    f420:	2007      	movs	r0, #7
    f422:	4798      	blx	r3
    f424:	7823      	ldrb	r3, [r4, #0]
    f426:	2bff      	cmp	r3, #255	; 0xff
    f428:	d07d      	beq.n	f526 <LORAWAN_RxDone+0x232>
    f42a:	2350      	movs	r3, #80	; 0x50
    f42c:	43ab      	bics	r3, r5
    f42e:	9306      	str	r3, [sp, #24]
    f430:	003b      	movs	r3, r7
    f432:	330d      	adds	r3, #13
    f434:	9305      	str	r3, [sp, #20]
    f436:	2400      	movs	r4, #0
    f438:	2203      	movs	r2, #3
    f43a:	9905      	ldr	r1, [sp, #20]
    f43c:	4b8e      	ldr	r3, [pc, #568]	; (f678 <LORAWAN_RxDone+0x384>)
    f43e:	a80c      	add	r0, sp, #48	; 0x30
    f440:	940c      	str	r4, [sp, #48]	; 0x30
    f442:	4798      	blx	r3
    f444:	2364      	movs	r3, #100	; 0x64
    f446:	990c      	ldr	r1, [sp, #48]	; 0x30
    f448:	aa04      	add	r2, sp, #16
    f44a:	4359      	muls	r1, r3
    f44c:	3b52      	subs	r3, #82	; 0x52
    f44e:	189b      	adds	r3, r3, r2
    f450:	7818      	ldrb	r0, [r3, #0]
    f452:	9b04      	ldr	r3, [sp, #16]
    f454:	910c      	str	r1, [sp, #48]	; 0x30
    f456:	1818      	adds	r0, r3, r0
    f458:	b2c0      	uxtb	r0, r0
    f45a:	74d0      	strb	r0, [r2, #19]
    f45c:	42a1      	cmp	r1, r4
    f45e:	d100      	bne.n	f462 <LORAWAN_RxDone+0x16e>
    f460:	e08b      	b.n	f57a <LORAWAN_RxDone+0x286>
    f462:	466b      	mov	r3, sp
    f464:	7e1b      	ldrb	r3, [r3, #24]
    f466:	ae0e      	add	r6, sp, #56	; 0x38
    f468:	ad09      	add	r5, sp, #36	; 0x24
    f46a:	7130      	strb	r0, [r6, #4]
    f46c:	910e      	str	r1, [sp, #56]	; 0x38
    f46e:	7028      	strb	r0, [r5, #0]
    f470:	706b      	strb	r3, [r5, #1]
    f472:	0031      	movs	r1, r6
    f474:	2002      	movs	r0, #2
    f476:	4b8a      	ldr	r3, [pc, #552]	; (f6a0 <LORAWAN_RxDone+0x3ac>)
    f478:	4798      	blx	r3
    f47a:	2808      	cmp	r0, #8
    f47c:	d13f      	bne.n	f4fe <LORAWAN_RxDone+0x20a>
    f47e:	0031      	movs	r1, r6
    f480:	0020      	movs	r0, r4
    f482:	4e88      	ldr	r6, [pc, #544]	; (f6a4 <LORAWAN_RxDone+0x3b0>)
    f484:	47b0      	blx	r6
    f486:	0029      	movs	r1, r5
    f488:	2012      	movs	r0, #18
    f48a:	ad0a      	add	r5, sp, #40	; 0x28
    f48c:	47b0      	blx	r6
    f48e:	0021      	movs	r1, r4
    f490:	002a      	movs	r2, r5
    f492:	4b81      	ldr	r3, [pc, #516]	; (f698 <LORAWAN_RxDone+0x3a4>)
    f494:	2014      	movs	r0, #20
    f496:	4798      	blx	r3
    f498:	4c73      	ldr	r4, [pc, #460]	; (f668 <LORAWAN_RxDone+0x374>)
    f49a:	782a      	ldrb	r2, [r5, #0]
    f49c:	0023      	movs	r3, r4
    f49e:	33be      	adds	r3, #190	; 0xbe
    f4a0:	701a      	strb	r2, [r3, #0]
    f4a2:	0023      	movs	r3, r4
    f4a4:	786a      	ldrb	r2, [r5, #1]
    f4a6:	251a      	movs	r5, #26
    f4a8:	33bf      	adds	r3, #191	; 0xbf
    f4aa:	701a      	strb	r2, [r3, #0]
    f4ac:	4b7e      	ldr	r3, [pc, #504]	; (f6a8 <LORAWAN_RxDone+0x3b4>)
    f4ae:	4798      	blx	r3
    f4b0:	ab04      	add	r3, sp, #16
    f4b2:	18ed      	adds	r5, r5, r3
    f4b4:	2313      	movs	r3, #19
    f4b6:	a904      	add	r1, sp, #16
    f4b8:	185b      	adds	r3, r3, r1
    f4ba:	0019      	movs	r1, r3
    f4bc:	002a      	movs	r2, r5
    f4be:	4b76      	ldr	r3, [pc, #472]	; (f698 <LORAWAN_RxDone+0x3a4>)
    f4c0:	201e      	movs	r0, #30
    f4c2:	4798      	blx	r3
    f4c4:	0023      	movs	r3, r4
    f4c6:	33e4      	adds	r3, #228	; 0xe4
    f4c8:	781b      	ldrb	r3, [r3, #0]
    f4ca:	079b      	lsls	r3, r3, #30
    f4cc:	d507      	bpl.n	f4de <LORAWAN_RxDone+0x1ea>
    f4ce:	ab04      	add	r3, sp, #16
    f4d0:	7cdb      	ldrb	r3, [r3, #19]
    f4d2:	a90d      	add	r1, sp, #52	; 0x34
    f4d4:	708b      	strb	r3, [r1, #2]
    f4d6:	882b      	ldrh	r3, [r5, #0]
    f4d8:	201e      	movs	r0, #30
    f4da:	800b      	strh	r3, [r1, #0]
    f4dc:	47b0      	blx	r6
    f4de:	2313      	movs	r3, #19
    f4e0:	aa04      	add	r2, sp, #16
    f4e2:	189b      	adds	r3, r3, r2
    f4e4:	7818      	ldrb	r0, [r3, #0]
    f4e6:	2101      	movs	r1, #1
    f4e8:	4b70      	ldr	r3, [pc, #448]	; (f6ac <LORAWAN_RxDone+0x3b8>)
    f4ea:	4798      	blx	r3
    f4ec:	2204      	movs	r2, #4
    f4ee:	3450      	adds	r4, #80	; 0x50
    f4f0:	7863      	ldrb	r3, [r4, #1]
    f4f2:	210b      	movs	r1, #11
    f4f4:	4313      	orrs	r3, r2
    f4f6:	7063      	strb	r3, [r4, #1]
    f4f8:	2001      	movs	r0, #1
    f4fa:	4b64      	ldr	r3, [pc, #400]	; (f68c <LORAWAN_RxDone+0x398>)
    f4fc:	4798      	blx	r3
    f4fe:	9b04      	ldr	r3, [sp, #16]
    f500:	3301      	adds	r3, #1
    f502:	b2db      	uxtb	r3, r3
    f504:	9304      	str	r3, [sp, #16]
    f506:	9b05      	ldr	r3, [sp, #20]
    f508:	3303      	adds	r3, #3
    f50a:	9305      	str	r3, [sp, #20]
    f50c:	9b04      	ldr	r3, [sp, #16]
    f50e:	2b05      	cmp	r3, #5
    f510:	d191      	bne.n	f436 <LORAWAN_RxDone+0x142>
    f512:	2204      	movs	r2, #4
    f514:	4b54      	ldr	r3, [pc, #336]	; (f668 <LORAWAN_RxDone+0x374>)
    f516:	2001      	movs	r0, #1
    f518:	3350      	adds	r3, #80	; 0x50
    f51a:	7859      	ldrb	r1, [r3, #1]
    f51c:	430a      	orrs	r2, r1
    f51e:	705a      	strb	r2, [r3, #1]
    f520:	210b      	movs	r1, #11
    f522:	4b5a      	ldr	r3, [pc, #360]	; (f68c <LORAWAN_RxDone+0x398>)
    f524:	4798      	blx	r3
    f526:	4c62      	ldr	r4, [pc, #392]	; (f6b0 <LORAWAN_RxDone+0x3bc>)
    f528:	1c7e      	adds	r6, r7, #1
    f52a:	3704      	adds	r7, #4
    f52c:	0031      	movs	r1, r6
    f52e:	0020      	movs	r0, r4
    f530:	003a      	movs	r2, r7
    f532:	4b60      	ldr	r3, [pc, #384]	; (f6b4 <LORAWAN_RxDone+0x3c0>)
    f534:	4798      	blx	r3
    f536:	2302      	movs	r3, #2
    f538:	4a4b      	ldr	r2, [pc, #300]	; (f668 <LORAWAN_RxDone+0x374>)
    f53a:	4d4c      	ldr	r5, [pc, #304]	; (f66c <LORAWAN_RxDone+0x378>)
    f53c:	7553      	strb	r3, [r2, #21]
    f53e:	0020      	movs	r0, r4
    f540:	0029      	movs	r1, r5
    f542:	4b50      	ldr	r3, [pc, #320]	; (f684 <LORAWAN_RxDone+0x390>)
    f544:	4798      	blx	r3
    f546:	2105      	movs	r1, #5
    f548:	4b50      	ldr	r3, [pc, #320]	; (f68c <LORAWAN_RxDone+0x398>)
    f54a:	2001      	movs	r0, #1
    f54c:	4798      	blx	r3
    f54e:	0031      	movs	r1, r6
    f550:	2601      	movs	r6, #1
    f552:	4c59      	ldr	r4, [pc, #356]	; (f6b8 <LORAWAN_RxDone+0x3c4>)
    f554:	003a      	movs	r2, r7
    f556:	0020      	movs	r0, r4
    f558:	4b56      	ldr	r3, [pc, #344]	; (f6b4 <LORAWAN_RxDone+0x3c0>)
    f55a:	4798      	blx	r3
    f55c:	4b42      	ldr	r3, [pc, #264]	; (f668 <LORAWAN_RxDone+0x374>)
    f55e:	0029      	movs	r1, r5
    f560:	715e      	strb	r6, [r3, #5]
    f562:	0020      	movs	r0, r4
    f564:	4b47      	ldr	r3, [pc, #284]	; (f684 <LORAWAN_RxDone+0x390>)
    f566:	4798      	blx	r3
    f568:	2104      	movs	r1, #4
    f56a:	4b48      	ldr	r3, [pc, #288]	; (f68c <LORAWAN_RxDone+0x398>)
    f56c:	0030      	movs	r0, r6
    f56e:	4798      	blx	r3
    f570:	4b52      	ldr	r3, [pc, #328]	; (f6bc <LORAWAN_RxDone+0x3c8>)
    f572:	4798      	blx	r3
    f574:	2008      	movs	r0, #8
    f576:	b011      	add	sp, #68	; 0x44
    f578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f57a:	4b4c      	ldr	r3, [pc, #304]	; (f6ac <LORAWAN_RxDone+0x3b8>)
    f57c:	4798      	blx	r3
    f57e:	e7be      	b.n	f4fe <LORAWAN_RxDone+0x20a>
    f580:	22bf      	movs	r2, #191	; 0xbf
    f582:	3e60      	subs	r6, #96	; 0x60
    f584:	4032      	ands	r2, r6
    f586:	d000      	beq.n	f58a <LORAWAN_RxDone+0x296>
    f588:	e33a      	b.n	fc00 <LORAWAN_RxDone+0x90c>
    f58a:	2601      	movs	r6, #1
    f58c:	4233      	tst	r3, r6
    f58e:	d100      	bne.n	f592 <LORAWAN_RxDone+0x29e>
    f590:	e336      	b.n	fc00 <LORAWAN_RxDone+0x90c>
    f592:	7928      	ldrb	r0, [r5, #4]
    f594:	682b      	ldr	r3, [r5, #0]
    f596:	0600      	lsls	r0, r0, #24
    f598:	0a1b      	lsrs	r3, r3, #8
    f59a:	4318      	orrs	r0, r3
    f59c:	002b      	movs	r3, r5
    f59e:	33ac      	adds	r3, #172	; 0xac
    f5a0:	701a      	strb	r2, [r3, #0]
    f5a2:	9004      	str	r0, [sp, #16]
    f5a4:	78b8      	ldrb	r0, [r7, #2]
    f5a6:	787b      	ldrb	r3, [r7, #1]
    f5a8:	0200      	lsls	r0, r0, #8
    f5aa:	4318      	orrs	r0, r3
    f5ac:	78fb      	ldrb	r3, [r7, #3]
    f5ae:	041b      	lsls	r3, r3, #16
    f5b0:	4318      	orrs	r0, r3
    f5b2:	793b      	ldrb	r3, [r7, #4]
    f5b4:	061b      	lsls	r3, r3, #24
    f5b6:	4303      	orrs	r3, r0
    f5b8:	9804      	ldr	r0, [sp, #16]
    f5ba:	4298      	cmp	r0, r3
    f5bc:	d050      	beq.n	f660 <LORAWAN_RxDone+0x36c>
    f5be:	7a3a      	ldrb	r2, [r7, #8]
    f5c0:	0949      	lsrs	r1, r1, #5
    f5c2:	0038      	movs	r0, r7
    f5c4:	4b3e      	ldr	r3, [pc, #248]	; (f6c0 <LORAWAN_RxDone+0x3cc>)
    f5c6:	4798      	blx	r3
    f5c8:	2808      	cmp	r0, #8
    f5ca:	d000      	beq.n	f5ce <LORAWAN_RxDone+0x2da>
    f5cc:	e6e3      	b.n	f396 <LORAWAN_RxDone+0xa2>
    f5ce:	35f8      	adds	r5, #248	; 0xf8
    f5d0:	4a3c      	ldr	r2, [pc, #240]	; (f6c4 <LORAWAN_RxDone+0x3d0>)
    f5d2:	682b      	ldr	r3, [r5, #0]
    f5d4:	9204      	str	r2, [sp, #16]
    f5d6:	9606      	str	r6, [sp, #24]
    f5d8:	1f22      	subs	r2, r4, #4
    f5da:	9205      	str	r2, [sp, #20]
    f5dc:	466a      	mov	r2, sp
    f5de:	79f9      	ldrb	r1, [r7, #7]
    f5e0:	79b8      	ldrb	r0, [r7, #6]
    f5e2:	0209      	lsls	r1, r1, #8
    f5e4:	7d12      	ldrb	r2, [r2, #20]
    f5e6:	4301      	orrs	r1, r0
    f5e8:	9300      	str	r3, [sp, #0]
    f5ea:	2001      	movs	r0, #1
    f5ec:	2349      	movs	r3, #73	; 0x49
    f5ee:	4d36      	ldr	r5, [pc, #216]	; (f6c8 <LORAWAN_RxDone+0x3d4>)
    f5f0:	47a8      	blx	r5
    f5f2:	4d21      	ldr	r5, [pc, #132]	; (f678 <LORAWAN_RxDone+0x384>)
    f5f4:	2210      	movs	r2, #16
    f5f6:	491e      	ldr	r1, [pc, #120]	; (f670 <LORAWAN_RxDone+0x37c>)
    f5f8:	4834      	ldr	r0, [pc, #208]	; (f6cc <LORAWAN_RxDone+0x3d8>)
    f5fa:	47a8      	blx	r5
    f5fc:	1f22      	subs	r2, r4, #4
    f5fe:	0039      	movs	r1, r7
    f600:	4833      	ldr	r0, [pc, #204]	; (f6d0 <LORAWAN_RxDone+0x3dc>)
    f602:	47a8      	blx	r5
    f604:	0023      	movs	r3, r4
    f606:	330c      	adds	r3, #12
    f608:	b2db      	uxtb	r3, r3
    f60a:	4a30      	ldr	r2, [pc, #192]	; (f6cc <LORAWAN_RxDone+0x3d8>)
    f60c:	4918      	ldr	r1, [pc, #96]	; (f670 <LORAWAN_RxDone+0x37c>)
    f60e:	9804      	ldr	r0, [sp, #16]
    f610:	4e18      	ldr	r6, [pc, #96]	; (f674 <LORAWAN_RxDone+0x380>)
    f612:	47b0      	blx	r6
    f614:	2204      	movs	r2, #4
    f616:	4916      	ldr	r1, [pc, #88]	; (f670 <LORAWAN_RxDone+0x37c>)
    f618:	a80b      	add	r0, sp, #44	; 0x2c
    f61a:	47a8      	blx	r5
    f61c:	1f23      	subs	r3, r4, #4
    f61e:	18f9      	adds	r1, r7, r3
    f620:	2204      	movs	r2, #4
    f622:	a80e      	add	r0, sp, #56	; 0x38
    f624:	47a8      	blx	r5
    f626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f62a:	4293      	cmp	r3, r2
    f62c:	d056      	beq.n	f6dc <LORAWAN_RxDone+0x3e8>
    f62e:	4b14      	ldr	r3, [pc, #80]	; (f680 <LORAWAN_RxDone+0x38c>)
    f630:	4798      	blx	r3
    f632:	4928      	ldr	r1, [pc, #160]	; (f6d4 <LORAWAN_RxDone+0x3e0>)
    f634:	784a      	ldrb	r2, [r1, #1]
    f636:	780b      	ldrb	r3, [r1, #0]
    f638:	0212      	lsls	r2, r2, #8
    f63a:	431a      	orrs	r2, r3
    f63c:	788b      	ldrb	r3, [r1, #2]
    f63e:	041b      	lsls	r3, r3, #16
    f640:	431a      	orrs	r2, r3
    f642:	78cb      	ldrb	r3, [r1, #3]
    f644:	061b      	lsls	r3, r3, #24
    f646:	4313      	orrs	r3, r2
    f648:	d100      	bne.n	f64c <LORAWAN_RxDone+0x358>
    f64a:	e6a6      	b.n	f39a <LORAWAN_RxDone+0xa6>
    f64c:	2120      	movs	r1, #32
    f64e:	2018      	movs	r0, #24
    f650:	4b05      	ldr	r3, [pc, #20]	; (f668 <LORAWAN_RxDone+0x374>)
    f652:	3360      	adds	r3, #96	; 0x60
    f654:	781a      	ldrb	r2, [r3, #0]
    f656:	438a      	bics	r2, r1
    f658:	701a      	strb	r2, [r3, #0]
    f65a:	4b1f      	ldr	r3, [pc, #124]	; (f6d8 <LORAWAN_RxDone+0x3e4>)
    f65c:	4798      	blx	r3
    f65e:	e69c      	b.n	f39a <LORAWAN_RxDone+0xa6>
    f660:	4915      	ldr	r1, [pc, #84]	; (f6b8 <LORAWAN_RxDone+0x3c4>)
    f662:	9206      	str	r2, [sp, #24]
    f664:	9104      	str	r1, [sp, #16]
    f666:	e7b7      	b.n	f5d8 <LORAWAN_RxDone+0x2e4>
    f668:	20001ce4 	.word	0x20001ce4
    f66c:	20001d09 	.word	0x20001d09
    f670:	2000109c 	.word	0x2000109c
    f674:	00010489 	.word	0x00010489
    f678:	000158c9 	.word	0x000158c9
    f67c:	0000d40d 	.word	0x0000d40d
    f680:	0000ee21 	.word	0x0000ee21
    f684:	00010449 	.word	0x00010449
    f688:	0000a1f1 	.word	0x0000a1f1
    f68c:	00008ec5 	.word	0x00008ec5
    f690:	0000ca9d 	.word	0x0000ca9d
    f694:	0000d2d9 	.word	0x0000d2d9
    f698:	00008a85 	.word	0x00008a85
    f69c:	20001d97 	.word	0x20001d97
    f6a0:	00008aa1 	.word	0x00008aa1
    f6a4:	00008abd 	.word	0x00008abd
    f6a8:	0000ee95 	.word	0x0000ee95
    f6ac:	0000f2a5 	.word	0x0000f2a5
    f6b0:	20001cf9 	.word	0x20001cf9
    f6b4:	0000cd39 	.word	0x0000cd39
    f6b8:	20001ce9 	.word	0x20001ce9
    f6bc:	0000cc99 	.word	0x0000cc99
    f6c0:	000108dd 	.word	0x000108dd
    f6c4:	20001de0 	.word	0x20001de0
    f6c8:	0000cd75 	.word	0x0000cd75
    f6cc:	20001f2c 	.word	0x20001f2c
    f6d0:	20001f3c 	.word	0x20001f3c
    f6d4:	20001f24 	.word	0x20001f24
    f6d8:	0000e19d 	.word	0x0000e19d
    f6dc:	9b06      	ldr	r3, [sp, #24]
    f6de:	2b00      	cmp	r3, #0
    f6e0:	d006      	beq.n	f6f0 <LORAWAN_RxDone+0x3fc>
    f6e2:	003a      	movs	r2, r7
    f6e4:	0021      	movs	r1, r4
    f6e6:	0038      	movs	r0, r7
    f6e8:	4bd4      	ldr	r3, [pc, #848]	; (fa3c <LORAWAN_RxDone+0x748>)
    f6ea:	4798      	blx	r3
    f6ec:	2001      	movs	r0, #1
    f6ee:	e742      	b.n	f576 <LORAWAN_RxDone+0x282>
    f6f0:	4ed3      	ldr	r6, [pc, #844]	; (fa40 <LORAWAN_RxDone+0x74c>)
    f6f2:	79fb      	ldrb	r3, [r7, #7]
    f6f4:	0031      	movs	r1, r6
    f6f6:	79ba      	ldrb	r2, [r7, #6]
    f6f8:	021b      	lsls	r3, r3, #8
    f6fa:	3158      	adds	r1, #88	; 0x58
    f6fc:	4313      	orrs	r3, r2
    f6fe:	880a      	ldrh	r2, [r1, #0]
    f700:	4293      	cmp	r3, r2
    f702:	d357      	bcc.n	f7b4 <LORAWAN_RxDone+0x4c0>
    f704:	0030      	movs	r0, r6
    f706:	30a4      	adds	r0, #164	; 0xa4
    f708:	8800      	ldrh	r0, [r0, #0]
    f70a:	1a9a      	subs	r2, r3, r2
    f70c:	4dcd      	ldr	r5, [pc, #820]	; (fa44 <LORAWAN_RxDone+0x750>)
    f70e:	4282      	cmp	r2, r0
    f710:	dd3d      	ble.n	f78e <LORAWAN_RxDone+0x49a>
    f712:	0032      	movs	r2, r6
    f714:	2101      	movs	r1, #1
    f716:	3260      	adds	r2, #96	; 0x60
    f718:	7813      	ldrb	r3, [r2, #0]
    f71a:	438b      	bics	r3, r1
    f71c:	7013      	strb	r3, [r2, #0]
    f71e:	0033      	movs	r3, r6
    f720:	33c8      	adds	r3, #200	; 0xc8
    f722:	781b      	ldrb	r3, [r3, #0]
    f724:	428b      	cmp	r3, r1
    f726:	d10f      	bne.n	f748 <LORAWAN_RxDone+0x454>
    f728:	0032      	movs	r2, r6
    f72a:	0034      	movs	r4, r6
    f72c:	3250      	adds	r2, #80	; 0x50
    f72e:	7813      	ldrb	r3, [r2, #0]
    f730:	310d      	adds	r1, #13
    f732:	438b      	bics	r3, r1
    f734:	7013      	strb	r3, [r2, #0]
    f736:	34b9      	adds	r4, #185	; 0xb9
    f738:	7820      	ldrb	r0, [r4, #0]
    f73a:	4bc3      	ldr	r3, [pc, #780]	; (fa48 <LORAWAN_RxDone+0x754>)
    f73c:	4798      	blx	r3
    f73e:	2800      	cmp	r0, #0
    f740:	d002      	beq.n	f748 <LORAWAN_RxDone+0x454>
    f742:	7820      	ldrb	r0, [r4, #0]
    f744:	4bc1      	ldr	r3, [pc, #772]	; (fa4c <LORAWAN_RxDone+0x758>)
    f746:	4798      	blx	r3
    f748:	49c1      	ldr	r1, [pc, #772]	; (fa50 <LORAWAN_RxDone+0x75c>)
    f74a:	784a      	ldrb	r2, [r1, #1]
    f74c:	780b      	ldrb	r3, [r1, #0]
    f74e:	0212      	lsls	r2, r2, #8
    f750:	431a      	orrs	r2, r3
    f752:	788b      	ldrb	r3, [r1, #2]
    f754:	041b      	lsls	r3, r3, #16
    f756:	431a      	orrs	r2, r3
    f758:	78cb      	ldrb	r3, [r1, #3]
    f75a:	061b      	lsls	r3, r3, #24
    f75c:	4313      	orrs	r3, r2
    f75e:	d008      	beq.n	f772 <LORAWAN_RxDone+0x47e>
    f760:	0032      	movs	r2, r6
    f762:	2120      	movs	r1, #32
    f764:	3260      	adds	r2, #96	; 0x60
    f766:	7813      	ldrb	r3, [r2, #0]
    f768:	2017      	movs	r0, #23
    f76a:	438b      	bics	r3, r1
    f76c:	7013      	strb	r3, [r2, #0]
    f76e:	4bb9      	ldr	r3, [pc, #740]	; (fa54 <LORAWAN_RxDone+0x760>)
    f770:	4798      	blx	r3
    f772:	2401      	movs	r4, #1
    f774:	3650      	adds	r6, #80	; 0x50
    f776:	7873      	ldrb	r3, [r6, #1]
    f778:	43a3      	bics	r3, r4
    f77a:	7073      	strb	r3, [r6, #1]
    f77c:	78b3      	ldrb	r3, [r6, #2]
    f77e:	4323      	orrs	r3, r4
    f780:	70b3      	strb	r3, [r6, #2]
    f782:	4bb5      	ldr	r3, [pc, #724]	; (fa58 <LORAWAN_RxDone+0x764>)
    f784:	4798      	blx	r3
    f786:	210b      	movs	r1, #11
    f788:	0020      	movs	r0, r4
    f78a:	47a8      	blx	r5
    f78c:	e7ae      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    f78e:	800b      	strh	r3, [r1, #0]
    f790:	2001      	movs	r0, #1
    f792:	210a      	movs	r1, #10
    f794:	47a8      	blx	r5
    f796:	6db3      	ldr	r3, [r6, #88]	; 0x58
    f798:	3301      	adds	r3, #1
    f79a:	d14a      	bne.n	f832 <LORAWAN_RxDone+0x53e>
    f79c:	2401      	movs	r4, #1
    f79e:	3650      	adds	r6, #80	; 0x50
    f7a0:	78b3      	ldrb	r3, [r6, #2]
    f7a2:	4323      	orrs	r3, r4
    f7a4:	70b3      	strb	r3, [r6, #2]
    f7a6:	4bac      	ldr	r3, [pc, #688]	; (fa58 <LORAWAN_RxDone+0x764>)
    f7a8:	4798      	blx	r3
    f7aa:	210b      	movs	r1, #11
    f7ac:	0020      	movs	r0, r4
    f7ae:	4ba5      	ldr	r3, [pc, #660]	; (fa44 <LORAWAN_RxDone+0x750>)
    f7b0:	4798      	blx	r3
    f7b2:	e79b      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d10f      	bne.n	f7d8 <LORAWAN_RxDone+0x4e4>
    f7b8:	4ba8      	ldr	r3, [pc, #672]	; (fa5c <LORAWAN_RxDone+0x768>)
    f7ba:	429a      	cmp	r2, r3
    f7bc:	d10c      	bne.n	f7d8 <LORAWAN_RxDone+0x4e4>
    f7be:	466b      	mov	r3, sp
    f7c0:	0032      	movs	r2, r6
    f7c2:	8b1b      	ldrh	r3, [r3, #24]
    f7c4:	325a      	adds	r2, #90	; 0x5a
    f7c6:	800b      	strh	r3, [r1, #0]
    f7c8:	8813      	ldrh	r3, [r2, #0]
    f7ca:	210a      	movs	r1, #10
    f7cc:	3301      	adds	r3, #1
    f7ce:	8013      	strh	r3, [r2, #0]
    f7d0:	2001      	movs	r0, #1
    f7d2:	4b9c      	ldr	r3, [pc, #624]	; (fa44 <LORAWAN_RxDone+0x750>)
    f7d4:	4798      	blx	r3
    f7d6:	e7de      	b.n	f796 <LORAWAN_RxDone+0x4a2>
    f7d8:	0033      	movs	r3, r6
    f7da:	33c8      	adds	r3, #200	; 0xc8
    f7dc:	781b      	ldrb	r3, [r3, #0]
    f7de:	2b01      	cmp	r3, #1
    f7e0:	d10f      	bne.n	f802 <LORAWAN_RxDone+0x50e>
    f7e2:	0032      	movs	r2, r6
    f7e4:	210e      	movs	r1, #14
    f7e6:	0034      	movs	r4, r6
    f7e8:	3250      	adds	r2, #80	; 0x50
    f7ea:	7813      	ldrb	r3, [r2, #0]
    f7ec:	34b9      	adds	r4, #185	; 0xb9
    f7ee:	438b      	bics	r3, r1
    f7f0:	7013      	strb	r3, [r2, #0]
    f7f2:	7820      	ldrb	r0, [r4, #0]
    f7f4:	4b94      	ldr	r3, [pc, #592]	; (fa48 <LORAWAN_RxDone+0x754>)
    f7f6:	4798      	blx	r3
    f7f8:	2800      	cmp	r0, #0
    f7fa:	d002      	beq.n	f802 <LORAWAN_RxDone+0x50e>
    f7fc:	7820      	ldrb	r0, [r4, #0]
    f7fe:	4b93      	ldr	r3, [pc, #588]	; (fa4c <LORAWAN_RxDone+0x758>)
    f800:	4798      	blx	r3
    f802:	4b95      	ldr	r3, [pc, #596]	; (fa58 <LORAWAN_RxDone+0x764>)
    f804:	4798      	blx	r3
    f806:	4992      	ldr	r1, [pc, #584]	; (fa50 <LORAWAN_RxDone+0x75c>)
    f808:	784a      	ldrb	r2, [r1, #1]
    f80a:	780b      	ldrb	r3, [r1, #0]
    f80c:	0212      	lsls	r2, r2, #8
    f80e:	431a      	orrs	r2, r3
    f810:	788b      	ldrb	r3, [r1, #2]
    f812:	041b      	lsls	r3, r3, #16
    f814:	431a      	orrs	r2, r3
    f816:	78cb      	ldrb	r3, [r1, #3]
    f818:	061b      	lsls	r3, r3, #24
    f81a:	4313      	orrs	r3, r2
    f81c:	d100      	bne.n	f820 <LORAWAN_RxDone+0x52c>
    f81e:	e765      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    f820:	2220      	movs	r2, #32
    f822:	3660      	adds	r6, #96	; 0x60
    f824:	7833      	ldrb	r3, [r6, #0]
    f826:	2017      	movs	r0, #23
    f828:	4393      	bics	r3, r2
    f82a:	7033      	strb	r3, [r6, #0]
    f82c:	4b89      	ldr	r3, [pc, #548]	; (fa54 <LORAWAN_RxDone+0x760>)
    f82e:	4798      	blx	r3
    f830:	e75c      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    f832:	0033      	movs	r3, r6
    f834:	2200      	movs	r2, #0
    f836:	33af      	adds	r3, #175	; 0xaf
    f838:	701a      	strb	r2, [r3, #0]
    f83a:	797b      	ldrb	r3, [r7, #5]
    f83c:	2b7f      	cmp	r3, #127	; 0x7f
    f83e:	d909      	bls.n	f854 <LORAWAN_RxDone+0x560>
    f840:	0032      	movs	r2, r6
    f842:	2320      	movs	r3, #32
    f844:	3250      	adds	r2, #80	; 0x50
    f846:	7811      	ldrb	r1, [r2, #0]
    f848:	2001      	movs	r0, #1
    f84a:	430b      	orrs	r3, r1
    f84c:	7013      	strb	r3, [r2, #0]
    f84e:	210b      	movs	r1, #11
    f850:	4b7c      	ldr	r3, [pc, #496]	; (fa44 <LORAWAN_RxDone+0x750>)
    f852:	4798      	blx	r3
    f854:	797b      	ldrb	r3, [r7, #5]
    f856:	06db      	lsls	r3, r3, #27
    f858:	d505      	bpl.n	f866 <LORAWAN_RxDone+0x572>
    f85a:	0032      	movs	r2, r6
    f85c:	2308      	movs	r3, #8
    f85e:	3260      	adds	r2, #96	; 0x60
    f860:	7811      	ldrb	r1, [r2, #0]
    f862:	430b      	orrs	r3, r1
    f864:	7013      	strb	r3, [r2, #0]
    f866:	797b      	ldrb	r3, [r7, #5]
    f868:	065b      	lsls	r3, r3, #25
    f86a:	d505      	bpl.n	f878 <LORAWAN_RxDone+0x584>
    f86c:	0032      	movs	r2, r6
    f86e:	2310      	movs	r3, #16
    f870:	3260      	adds	r2, #96	; 0x60
    f872:	7811      	ldrb	r1, [r2, #0]
    f874:	430b      	orrs	r3, r1
    f876:	7013      	strb	r3, [r2, #0]
    f878:	221f      	movs	r2, #31
    f87a:	783b      	ldrb	r3, [r7, #0]
    f87c:	4393      	bics	r3, r2
    f87e:	2ba0      	cmp	r3, #160	; 0xa0
    f880:	d105      	bne.n	f88e <LORAWAN_RxDone+0x59a>
    f882:	0032      	movs	r2, r6
    f884:	3260      	adds	r2, #96	; 0x60
    f886:	7811      	ldrb	r1, [r2, #0]
    f888:	3b9e      	subs	r3, #158	; 0x9e
    f88a:	430b      	orrs	r3, r1
    f88c:	7013      	strb	r3, [r2, #0]
    f88e:	003d      	movs	r5, r7
    f890:	7979      	ldrb	r1, [r7, #5]
    f892:	3508      	adds	r5, #8
    f894:	070b      	lsls	r3, r1, #28
    f896:	d007      	beq.n	f8a8 <LORAWAN_RxDone+0x5b4>
    f898:	0709      	lsls	r1, r1, #28
    f89a:	0028      	movs	r0, r5
    f89c:	4b70      	ldr	r3, [pc, #448]	; (fa60 <LORAWAN_RxDone+0x76c>)
    f89e:	0f09      	lsrs	r1, r1, #28
    f8a0:	4798      	blx	r3
    f8a2:	2301      	movs	r3, #1
    f8a4:	0005      	movs	r5, r0
    f8a6:	9306      	str	r3, [sp, #24]
    f8a8:	7978      	ldrb	r0, [r7, #5]
    f8aa:	0703      	lsls	r3, r0, #28
    f8ac:	0f1b      	lsrs	r3, r3, #28
    f8ae:	001a      	movs	r2, r3
    f8b0:	320c      	adds	r2, #12
    f8b2:	4294      	cmp	r4, r2
    f8b4:	d100      	bne.n	f8b8 <LORAWAN_RxDone+0x5c4>
    f8b6:	e0b8      	b.n	fa2a <LORAWAN_RxDone+0x736>
    f8b8:	1c6a      	adds	r2, r5, #1
    f8ba:	1ae4      	subs	r4, r4, r3
    f8bc:	9207      	str	r2, [sp, #28]
    f8be:	782a      	ldrb	r2, [r5, #0]
    f8c0:	b2e4      	uxtb	r4, r4
    f8c2:	9204      	str	r2, [sp, #16]
    f8c4:	0022      	movs	r2, r4
    f8c6:	9904      	ldr	r1, [sp, #16]
    f8c8:	3a0c      	subs	r2, #12
    f8ca:	b2d2      	uxtb	r2, r2
    f8cc:	9205      	str	r2, [sp, #20]
    f8ce:	3319      	adds	r3, #25
    f8d0:	4a5b      	ldr	r2, [pc, #364]	; (fa40 <LORAWAN_RxDone+0x74c>)
    f8d2:	2900      	cmp	r1, #0
    f8d4:	d100      	bne.n	f8d8 <LORAWAN_RxDone+0x5e4>
    f8d6:	e07f      	b.n	f9d8 <LORAWAN_RxDone+0x6e4>
    f8d8:	6810      	ldr	r0, [r2, #0]
    f8da:	3c0d      	subs	r4, #13
    f8dc:	b2e1      	uxtb	r1, r4
    f8de:	0a04      	lsrs	r4, r0, #8
    f8e0:	7910      	ldrb	r0, [r2, #4]
    f8e2:	9301      	str	r3, [sp, #4]
    f8e4:	0600      	lsls	r0, r0, #24
    f8e6:	4320      	orrs	r0, r4
    f8e8:	9003      	str	r0, [sp, #12]
    f8ea:	4b5e      	ldr	r3, [pc, #376]	; (fa64 <LORAWAN_RxDone+0x770>)
    f8ec:	485e      	ldr	r0, [pc, #376]	; (fa68 <LORAWAN_RxDone+0x774>)
    f8ee:	9300      	str	r3, [sp, #0]
    f8f0:	9002      	str	r0, [sp, #8]
    f8f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
    f8f4:	2201      	movs	r2, #1
    f8f6:	4c5d      	ldr	r4, [pc, #372]	; (fa6c <LORAWAN_RxDone+0x778>)
    f8f8:	18a8      	adds	r0, r5, r2
    f8fa:	47a0      	blx	r4
    f8fc:	4c50      	ldr	r4, [pc, #320]	; (fa40 <LORAWAN_RxDone+0x74c>)
    f8fe:	2300      	movs	r3, #0
    f900:	0022      	movs	r2, r4
    f902:	3296      	adds	r2, #150	; 0x96
    f904:	8013      	strh	r3, [r2, #0]
    f906:	0022      	movs	r2, r4
    f908:	32c1      	adds	r2, #193	; 0xc1
    f90a:	7013      	strb	r3, [r2, #0]
    f90c:	0022      	movs	r2, r4
    f90e:	2110      	movs	r1, #16
    f910:	3260      	adds	r2, #96	; 0x60
    f912:	7813      	ldrb	r3, [r2, #0]
    f914:	438b      	bics	r3, r1
    f916:	7013      	strb	r3, [r2, #0]
    f918:	0023      	movs	r3, r4
    f91a:	2201      	movs	r2, #1
    f91c:	3350      	adds	r3, #80	; 0x50
    f91e:	7859      	ldrb	r1, [r3, #1]
    f920:	430a      	orrs	r2, r1
    f922:	705a      	strb	r2, [r3, #1]
    f924:	220e      	movs	r2, #14
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	4013      	ands	r3, r2
    f92a:	2b06      	cmp	r3, #6
    f92c:	d109      	bne.n	f942 <LORAWAN_RxDone+0x64e>
    f92e:	0023      	movs	r3, r4
    f930:	33c8      	adds	r3, #200	; 0xc8
    f932:	781b      	ldrb	r3, [r3, #0]
    f934:	2b01      	cmp	r3, #1
    f936:	d104      	bne.n	f942 <LORAWAN_RxDone+0x64e>
    f938:	0023      	movs	r3, r4
    f93a:	33b9      	adds	r3, #185	; 0xb9
    f93c:	7818      	ldrb	r0, [r3, #0]
    f93e:	4b43      	ldr	r3, [pc, #268]	; (fa4c <LORAWAN_RxDone+0x758>)
    f940:	4798      	blx	r3
    f942:	0026      	movs	r6, r4
    f944:	2201      	movs	r2, #1
    f946:	3660      	adds	r6, #96	; 0x60
    f948:	7833      	ldrb	r3, [r6, #0]
    f94a:	4213      	tst	r3, r2
    f94c:	d100      	bne.n	f950 <LORAWAN_RxDone+0x65c>
    f94e:	e0d7      	b.n	fb00 <LORAWAN_RxDone+0x80c>
    f950:	797b      	ldrb	r3, [r7, #5]
    f952:	321f      	adds	r2, #31
    f954:	4213      	tst	r3, r2
    f956:	d100      	bne.n	f95a <LORAWAN_RxDone+0x666>
    f958:	e0b8      	b.n	facc <LORAWAN_RxDone+0x7d8>
    f95a:	4b45      	ldr	r3, [pc, #276]	; (fa70 <LORAWAN_RxDone+0x77c>)
    f95c:	4798      	blx	r3
    f95e:	0023      	movs	r3, r4
    f960:	2101      	movs	r1, #1
    f962:	3350      	adds	r3, #80	; 0x50
    f964:	785a      	ldrb	r2, [r3, #1]
    f966:	438a      	bics	r2, r1
    f968:	705a      	strb	r2, [r3, #1]
    f96a:	9a04      	ldr	r2, [sp, #16]
    f96c:	2a00      	cmp	r2, #0
    f96e:	d100      	bne.n	f972 <LORAWAN_RxDone+0x67e>
    f970:	e08c      	b.n	fa8c <LORAWAN_RxDone+0x798>
    f972:	9a05      	ldr	r2, [sp, #20]
    f974:	0029      	movs	r1, r5
    f976:	0038      	movs	r0, r7
    f978:	4b3e      	ldr	r3, [pc, #248]	; (fa74 <LORAWAN_RxDone+0x780>)
    f97a:	4798      	blx	r3
    f97c:	4b3e      	ldr	r3, [pc, #248]	; (fa78 <LORAWAN_RxDone+0x784>)
    f97e:	4d30      	ldr	r5, [pc, #192]	; (fa40 <LORAWAN_RxDone+0x74c>)
    f980:	781b      	ldrb	r3, [r3, #0]
    f982:	06db      	lsls	r3, r3, #27
    f984:	d400      	bmi.n	f988 <LORAWAN_RxDone+0x694>
    f986:	e132      	b.n	fbee <LORAWAN_RxDone+0x8fa>
    f988:	2220      	movs	r2, #32
    f98a:	4b3c      	ldr	r3, [pc, #240]	; (fa7c <LORAWAN_RxDone+0x788>)
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	401a      	ands	r2, r3
    f990:	9204      	str	r2, [sp, #16]
    f992:	d000      	beq.n	f996 <LORAWAN_RxDone+0x6a2>
    f994:	e12b      	b.n	fbee <LORAWAN_RxDone+0x8fa>
    f996:	320a      	adds	r2, #10
    f998:	4213      	tst	r3, r2
    f99a:	d100      	bne.n	f99e <LORAWAN_RxDone+0x6aa>
    f99c:	e127      	b.n	fbee <LORAWAN_RxDone+0x8fa>
    f99e:	002b      	movs	r3, r5
    f9a0:	33c0      	adds	r3, #192	; 0xc0
    f9a2:	781b      	ldrb	r3, [r3, #0]
    f9a4:	a90d      	add	r1, sp, #52	; 0x34
    f9a6:	704b      	strb	r3, [r1, #1]
    f9a8:	002e      	movs	r6, r5
    f9aa:	2301      	movs	r3, #1
    f9ac:	36b3      	adds	r6, #179	; 0xb3
    f9ae:	700b      	strb	r3, [r1, #0]
    f9b0:	7833      	ldrb	r3, [r6, #0]
    f9b2:	aa0c      	add	r2, sp, #48	; 0x30
    f9b4:	202e      	movs	r0, #46	; 0x2e
    f9b6:	4f32      	ldr	r7, [pc, #200]	; (fa80 <LORAWAN_RxDone+0x78c>)
    f9b8:	708b      	strb	r3, [r1, #2]
    f9ba:	47b8      	blx	r7
    f9bc:	9005      	str	r0, [sp, #20]
    f9be:	2808      	cmp	r0, #8
    f9c0:	d000      	beq.n	f9c4 <LORAWAN_RxDone+0x6d0>
    f9c2:	e0cb      	b.n	fb5c <LORAWAN_RxDone+0x868>
    f9c4:	4b2f      	ldr	r3, [pc, #188]	; (fa84 <LORAWAN_RxDone+0x790>)
    f9c6:	9804      	ldr	r0, [sp, #16]
    f9c8:	4798      	blx	r3
    f9ca:	4b2c      	ldr	r3, [pc, #176]	; (fa7c <LORAWAN_RxDone+0x788>)
    f9cc:	9a05      	ldr	r2, [sp, #20]
    f9ce:	781b      	ldrb	r3, [r3, #0]
    f9d0:	4393      	bics	r3, r2
    f9d2:	4a2a      	ldr	r2, [pc, #168]	; (fa7c <LORAWAN_RxDone+0x788>)
    f9d4:	7013      	strb	r3, [r2, #0]
    f9d6:	e689      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    f9d8:	9905      	ldr	r1, [sp, #20]
    f9da:	2900      	cmp	r1, #0
    f9dc:	d029      	beq.n	fa32 <LORAWAN_RxDone+0x73e>
    f9de:	0701      	lsls	r1, r0, #28
    f9e0:	d11c      	bne.n	fa1c <LORAWAN_RxDone+0x728>
    f9e2:	6811      	ldr	r1, [r2, #0]
    f9e4:	3c0d      	subs	r4, #13
    f9e6:	0a08      	lsrs	r0, r1, #8
    f9e8:	7911      	ldrb	r1, [r2, #4]
    f9ea:	9301      	str	r3, [sp, #4]
    f9ec:	0609      	lsls	r1, r1, #24
    f9ee:	4301      	orrs	r1, r0
    f9f0:	9103      	str	r1, [sp, #12]
    f9f2:	4b25      	ldr	r3, [pc, #148]	; (fa88 <LORAWAN_RxDone+0x794>)
    f9f4:	491c      	ldr	r1, [pc, #112]	; (fa68 <LORAWAN_RxDone+0x774>)
    f9f6:	b2e4      	uxtb	r4, r4
    f9f8:	9102      	str	r1, [sp, #8]
    f9fa:	9300      	str	r3, [sp, #0]
    f9fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
    f9fe:	0021      	movs	r1, r4
    fa00:	2201      	movs	r2, #1
    fa02:	9807      	ldr	r0, [sp, #28]
    fa04:	4d19      	ldr	r5, [pc, #100]	; (fa6c <LORAWAN_RxDone+0x778>)
    fa06:	47a8      	blx	r5
    fa08:	4b15      	ldr	r3, [pc, #84]	; (fa60 <LORAWAN_RxDone+0x76c>)
    fa0a:	0021      	movs	r1, r4
    fa0c:	9807      	ldr	r0, [sp, #28]
    fa0e:	4798      	blx	r3
    fa10:	9b04      	ldr	r3, [sp, #16]
    fa12:	9d04      	ldr	r5, [sp, #16]
    fa14:	9305      	str	r3, [sp, #20]
    fa16:	2301      	movs	r3, #1
    fa18:	9306      	str	r3, [sp, #24]
    fa1a:	e76f      	b.n	f8fc <LORAWAN_RxDone+0x608>
    fa1c:	466b      	mov	r3, sp
    fa1e:	7c1b      	ldrb	r3, [r3, #16]
    fa20:	36ac      	adds	r6, #172	; 0xac
    fa22:	7033      	strb	r3, [r6, #0]
    fa24:	4b0c      	ldr	r3, [pc, #48]	; (fa58 <LORAWAN_RxDone+0x764>)
    fa26:	4798      	blx	r3
    fa28:	e660      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fa2a:	2500      	movs	r5, #0
    fa2c:	9504      	str	r5, [sp, #16]
    fa2e:	9505      	str	r5, [sp, #20]
    fa30:	e764      	b.n	f8fc <LORAWAN_RxDone+0x608>
    fa32:	9b05      	ldr	r3, [sp, #20]
    fa34:	9304      	str	r3, [sp, #16]
    fa36:	001d      	movs	r5, r3
    fa38:	e760      	b.n	f8fc <LORAWAN_RxDone+0x608>
    fa3a:	46c0      	nop			; (mov r8, r8)
    fa3c:	00010931 	.word	0x00010931
    fa40:	20001ce4 	.word	0x20001ce4
    fa44:	00008ec5 	.word	0x00008ec5
    fa48:	0000a085 	.word	0x0000a085
    fa4c:	0000a1f1 	.word	0x0000a1f1
    fa50:	20001f24 	.word	0x20001f24
    fa54:	0000e19d 	.word	0x0000e19d
    fa58:	0000ee21 	.word	0x0000ee21
    fa5c:	0000ffff 	.word	0x0000ffff
    fa60:	0000f041 	.word	0x0000f041
    fa64:	20001cf9 	.word	0x20001cf9
    fa68:	20001f2c 	.word	0x20001f2c
    fa6c:	0000ddfd 	.word	0x0000ddfd
    fa70:	0000d3b9 	.word	0x0000d3b9
    fa74:	0000e259 	.word	0x0000e259
    fa78:	20001d34 	.word	0x20001d34
    fa7c:	20001d44 	.word	0x20001d44
    fa80:	00008a85 	.word	0x00008a85
    fa84:	0000d015 	.word	0x0000d015
    fa88:	20001ce9 	.word	0x20001ce9
    fa8c:	2120      	movs	r1, #32
    fa8e:	7832      	ldrb	r2, [r6, #0]
    fa90:	438a      	bics	r2, r1
    fa92:	7032      	strb	r2, [r6, #0]
    fa94:	0022      	movs	r2, r4
    fa96:	32c8      	adds	r2, #200	; 0xc8
    fa98:	7812      	ldrb	r2, [r2, #0]
    fa9a:	2a01      	cmp	r2, #1
    fa9c:	d10e      	bne.n	fabc <LORAWAN_RxDone+0x7c8>
    fa9e:	781a      	ldrb	r2, [r3, #0]
    faa0:	3912      	subs	r1, #18
    faa2:	438a      	bics	r2, r1
    faa4:	701a      	strb	r2, [r3, #0]
    faa6:	2390      	movs	r3, #144	; 0x90
    faa8:	4a6f      	ldr	r2, [pc, #444]	; (fc68 <LORAWAN_RxDone+0x974>)
    faaa:	005b      	lsls	r3, r3, #1
    faac:	5cd3      	ldrb	r3, [r2, r3]
    faae:	2b00      	cmp	r3, #0
    fab0:	d000      	beq.n	fab4 <LORAWAN_RxDone+0x7c0>
    fab2:	e763      	b.n	f97c <LORAWAN_RxDone+0x688>
    fab4:	2008      	movs	r0, #8
    fab6:	4b6d      	ldr	r3, [pc, #436]	; (fc6c <LORAWAN_RxDone+0x978>)
    fab8:	4798      	blx	r3
    faba:	e75f      	b.n	f97c <LORAWAN_RxDone+0x688>
    fabc:	2a04      	cmp	r2, #4
    fabe:	d1f2      	bne.n	faa6 <LORAWAN_RxDone+0x7b2>
    fac0:	0023      	movs	r3, r4
    fac2:	33bc      	adds	r3, #188	; 0xbc
    fac4:	7818      	ldrb	r0, [r3, #0]
    fac6:	4b6a      	ldr	r3, [pc, #424]	; (fc70 <LORAWAN_RxDone+0x97c>)
    fac8:	4798      	blx	r3
    faca:	e7ec      	b.n	faa6 <LORAWAN_RxDone+0x7b2>
    facc:	9b06      	ldr	r3, [sp, #24]
    face:	2b00      	cmp	r3, #0
    fad0:	d013      	beq.n	fafa <LORAWAN_RxDone+0x806>
    fad2:	0023      	movs	r3, r4
    fad4:	33c8      	adds	r3, #200	; 0xc8
    fad6:	781d      	ldrb	r5, [r3, #0]
    fad8:	2d01      	cmp	r5, #1
    fada:	d10e      	bne.n	fafa <LORAWAN_RxDone+0x806>
    fadc:	4b65      	ldr	r3, [pc, #404]	; (fc74 <LORAWAN_RxDone+0x980>)
    fade:	4798      	blx	r3
    fae0:	0022      	movs	r2, r4
    fae2:	3250      	adds	r2, #80	; 0x50
    fae4:	7853      	ldrb	r3, [r2, #1]
    fae6:	43ab      	bics	r3, r5
    fae8:	7053      	strb	r3, [r2, #1]
    faea:	2220      	movs	r2, #32
    faec:	7833      	ldrb	r3, [r6, #0]
    faee:	4393      	bics	r3, r2
    faf0:	7033      	strb	r3, [r6, #0]
    faf2:	2390      	movs	r3, #144	; 0x90
    faf4:	005b      	lsls	r3, r3, #1
    faf6:	5ce3      	ldrb	r3, [r4, r3]
    faf8:	e7d9      	b.n	faae <LORAWAN_RxDone+0x7ba>
    fafa:	4b5f      	ldr	r3, [pc, #380]	; (fc78 <LORAWAN_RxDone+0x984>)
    fafc:	4798      	blx	r3
    fafe:	e73d      	b.n	f97c <LORAWAN_RxDone+0x688>
    fb00:	9a04      	ldr	r2, [sp, #16]
    fb02:	2a00      	cmp	r2, #0
    fb04:	d00b      	beq.n	fb1e <LORAWAN_RxDone+0x82a>
    fb06:	9a05      	ldr	r2, [sp, #20]
    fb08:	0029      	movs	r1, r5
    fb0a:	0038      	movs	r0, r7
    fb0c:	4b5b      	ldr	r3, [pc, #364]	; (fc7c <LORAWAN_RxDone+0x988>)
    fb0e:	4798      	blx	r3
    fb10:	0022      	movs	r2, r4
    fb12:	2101      	movs	r1, #1
    fb14:	3250      	adds	r2, #80	; 0x50
    fb16:	7853      	ldrb	r3, [r2, #1]
    fb18:	438b      	bics	r3, r1
    fb1a:	7053      	strb	r3, [r2, #1]
    fb1c:	e72e      	b.n	f97c <LORAWAN_RxDone+0x688>
    fb1e:	2220      	movs	r2, #32
    fb20:	4393      	bics	r3, r2
    fb22:	7033      	strb	r3, [r6, #0]
    fb24:	0023      	movs	r3, r4
    fb26:	33c8      	adds	r3, #200	; 0xc8
    fb28:	781b      	ldrb	r3, [r3, #0]
    fb2a:	2b01      	cmp	r3, #1
    fb2c:	d10e      	bne.n	fb4c <LORAWAN_RxDone+0x858>
    fb2e:	0022      	movs	r2, r4
    fb30:	210e      	movs	r1, #14
    fb32:	3250      	adds	r2, #80	; 0x50
    fb34:	7813      	ldrb	r3, [r2, #0]
    fb36:	438b      	bics	r3, r1
    fb38:	7013      	strb	r3, [r2, #0]
    fb3a:	2390      	movs	r3, #144	; 0x90
    fb3c:	005b      	lsls	r3, r3, #1
    fb3e:	5ce3      	ldrb	r3, [r4, r3]
    fb40:	2b00      	cmp	r3, #0
    fb42:	d1e5      	bne.n	fb10 <LORAWAN_RxDone+0x81c>
    fb44:	2008      	movs	r0, #8
    fb46:	4b49      	ldr	r3, [pc, #292]	; (fc6c <LORAWAN_RxDone+0x978>)
    fb48:	4798      	blx	r3
    fb4a:	e7e1      	b.n	fb10 <LORAWAN_RxDone+0x81c>
    fb4c:	2b04      	cmp	r3, #4
    fb4e:	d1f4      	bne.n	fb3a <LORAWAN_RxDone+0x846>
    fb50:	0023      	movs	r3, r4
    fb52:	33bc      	adds	r3, #188	; 0xbc
    fb54:	7818      	ldrb	r0, [r3, #0]
    fb56:	4b46      	ldr	r3, [pc, #280]	; (fc70 <LORAWAN_RxDone+0x97c>)
    fb58:	4798      	blx	r3
    fb5a:	e7ee      	b.n	fb3a <LORAWAN_RxDone+0x846>
    fb5c:	35e4      	adds	r5, #228	; 0xe4
    fb5e:	782b      	ldrb	r3, [r5, #0]
    fb60:	079a      	lsls	r2, r3, #30
    fb62:	d521      	bpl.n	fba8 <LORAWAN_RxDone+0x8b4>
    fb64:	aa0e      	add	r2, sp, #56	; 0x38
    fb66:	0031      	movs	r1, r6
    fb68:	2024      	movs	r0, #36	; 0x24
    fb6a:	47b8      	blx	r7
    fb6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb6e:	1c5a      	adds	r2, r3, #1
    fb70:	d001      	beq.n	fb76 <LORAWAN_RxDone+0x882>
    fb72:	3314      	adds	r3, #20
    fb74:	930e      	str	r3, [sp, #56]	; 0x38
    fb76:	0021      	movs	r1, r4
    fb78:	220e      	movs	r2, #14
    fb7a:	3150      	adds	r1, #80	; 0x50
    fb7c:	780b      	ldrb	r3, [r1, #0]
    fb7e:	4393      	bics	r3, r2
    fb80:	001a      	movs	r2, r3
    fb82:	230c      	movs	r3, #12
    fb84:	4313      	orrs	r3, r2
    fb86:	700b      	strb	r3, [r1, #0]
    fb88:	232c      	movs	r3, #44	; 0x2c
    fb8a:	33ff      	adds	r3, #255	; 0xff
    fb8c:	5ce3      	ldrb	r3, [r4, r3]
    fb8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fb90:	21fa      	movs	r1, #250	; 0xfa
    fb92:	1ad3      	subs	r3, r2, r3
    fb94:	2200      	movs	r2, #0
    fb96:	0089      	lsls	r1, r1, #2
    fb98:	4359      	muls	r1, r3
    fb9a:	34ba      	adds	r4, #186	; 0xba
    fb9c:	4b38      	ldr	r3, [pc, #224]	; (fc80 <LORAWAN_RxDone+0x98c>)
    fb9e:	7820      	ldrb	r0, [r4, #0]
    fba0:	9200      	str	r2, [sp, #0]
    fba2:	4c38      	ldr	r4, [pc, #224]	; (fc84 <LORAWAN_RxDone+0x990>)
    fba4:	47a0      	blx	r4
    fba6:	e5a1      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fba8:	075b      	lsls	r3, r3, #29
    fbaa:	d400      	bmi.n	fbae <LORAWAN_RxDone+0x8ba>
    fbac:	e59e      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fbae:	aa0e      	add	r2, sp, #56	; 0x38
    fbb0:	0031      	movs	r1, r6
    fbb2:	2031      	movs	r0, #49	; 0x31
    fbb4:	47b8      	blx	r7
    fbb6:	220e      	movs	r2, #14
    fbb8:	4b33      	ldr	r3, [pc, #204]	; (fc88 <LORAWAN_RxDone+0x994>)
    fbba:	781b      	ldrb	r3, [r3, #0]
    fbbc:	4393      	bics	r3, r2
    fbbe:	001a      	movs	r2, r3
    fbc0:	230c      	movs	r3, #12
    fbc2:	4313      	orrs	r3, r2
    fbc4:	4a30      	ldr	r2, [pc, #192]	; (fc88 <LORAWAN_RxDone+0x994>)
    fbc6:	7013      	strb	r3, [r2, #0]
    fbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbca:	1c5a      	adds	r2, r3, #1
    fbcc:	d001      	beq.n	fbd2 <LORAWAN_RxDone+0x8de>
    fbce:	3301      	adds	r3, #1
    fbd0:	930e      	str	r3, [sp, #56]	; 0x38
    fbd2:	232c      	movs	r3, #44	; 0x2c
    fbd4:	33ff      	adds	r3, #255	; 0xff
    fbd6:	5ce3      	ldrb	r3, [r4, r3]
    fbd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fbda:	21fa      	movs	r1, #250	; 0xfa
    fbdc:	1ad3      	subs	r3, r2, r3
    fbde:	2200      	movs	r2, #0
    fbe0:	0089      	lsls	r1, r1, #2
    fbe2:	34bd      	adds	r4, #189	; 0xbd
    fbe4:	4359      	muls	r1, r3
    fbe6:	7820      	ldrb	r0, [r4, #0]
    fbe8:	4b28      	ldr	r3, [pc, #160]	; (fc8c <LORAWAN_RxDone+0x998>)
    fbea:	9200      	str	r2, [sp, #0]
    fbec:	e7d9      	b.n	fba2 <LORAWAN_RxDone+0x8ae>
    fbee:	35c8      	adds	r5, #200	; 0xc8
    fbf0:	782b      	ldrb	r3, [r5, #0]
    fbf2:	2b04      	cmp	r3, #4
    fbf4:	d000      	beq.n	fbf8 <LORAWAN_RxDone+0x904>
    fbf6:	e579      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fbf8:	0038      	movs	r0, r7
    fbfa:	4b25      	ldr	r3, [pc, #148]	; (fc90 <LORAWAN_RxDone+0x99c>)
    fbfc:	4798      	blx	r3
    fbfe:	e575      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fc00:	4b24      	ldr	r3, [pc, #144]	; (fc94 <LORAWAN_RxDone+0x9a0>)
    fc02:	4798      	blx	r3
    fc04:	4924      	ldr	r1, [pc, #144]	; (fc98 <LORAWAN_RxDone+0x9a4>)
    fc06:	784a      	ldrb	r2, [r1, #1]
    fc08:	780b      	ldrb	r3, [r1, #0]
    fc0a:	0212      	lsls	r2, r2, #8
    fc0c:	431a      	orrs	r2, r3
    fc0e:	788b      	ldrb	r3, [r1, #2]
    fc10:	041b      	lsls	r3, r3, #16
    fc12:	431a      	orrs	r2, r3
    fc14:	78cb      	ldrb	r3, [r1, #3]
    fc16:	061b      	lsls	r3, r3, #24
    fc18:	4313      	orrs	r3, r2
    fc1a:	d101      	bne.n	fc20 <LORAWAN_RxDone+0x92c>
    fc1c:	f7ff fbbd 	bl	f39a <LORAWAN_RxDone+0xa6>
    fc20:	2220      	movs	r2, #32
    fc22:	3560      	adds	r5, #96	; 0x60
    fc24:	782b      	ldrb	r3, [r5, #0]
    fc26:	2019      	movs	r0, #25
    fc28:	4393      	bics	r3, r2
    fc2a:	702b      	strb	r3, [r5, #0]
    fc2c:	e515      	b.n	f65a <LORAWAN_RxDone+0x366>
    fc2e:	491a      	ldr	r1, [pc, #104]	; (fc98 <LORAWAN_RxDone+0x9a4>)
    fc30:	784a      	ldrb	r2, [r1, #1]
    fc32:	780b      	ldrb	r3, [r1, #0]
    fc34:	0212      	lsls	r2, r2, #8
    fc36:	431a      	orrs	r2, r3
    fc38:	788b      	ldrb	r3, [r1, #2]
    fc3a:	041b      	lsls	r3, r3, #16
    fc3c:	431a      	orrs	r2, r3
    fc3e:	78cb      	ldrb	r3, [r1, #3]
    fc40:	061b      	lsls	r3, r3, #24
    fc42:	4313      	orrs	r3, r2
    fc44:	d100      	bne.n	fc48 <LORAWAN_RxDone+0x954>
    fc46:	e551      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fc48:	4b14      	ldr	r3, [pc, #80]	; (fc9c <LORAWAN_RxDone+0x9a8>)
    fc4a:	4d15      	ldr	r5, [pc, #84]	; (fca0 <LORAWAN_RxDone+0x9ac>)
    fc4c:	781b      	ldrb	r3, [r3, #0]
    fc4e:	2b10      	cmp	r3, #16
    fc50:	d105      	bne.n	fc5e <LORAWAN_RxDone+0x96a>
    fc52:	0001      	movs	r1, r0
    fc54:	0022      	movs	r2, r4
    fc56:	2000      	movs	r0, #0
    fc58:	3b0c      	subs	r3, #12
    fc5a:	47a8      	blx	r5
    fc5c:	e546      	b.n	f6ec <LORAWAN_RxDone+0x3f8>
    fc5e:	2300      	movs	r3, #0
    fc60:	0001      	movs	r1, r0
    fc62:	0022      	movs	r2, r4
    fc64:	0018      	movs	r0, r3
    fc66:	e7f8      	b.n	fc5a <LORAWAN_RxDone+0x966>
    fc68:	20001ce4 	.word	0x20001ce4
    fc6c:	0000e19d 	.word	0x0000e19d
    fc70:	0000a1f1 	.word	0x0000a1f1
    fc74:	0000d3b9 	.word	0x0000d3b9
    fc78:	0000d345 	.word	0x0000d345
    fc7c:	0000e259 	.word	0x0000e259
    fc80:	0000d109 	.word	0x0000d109
    fc84:	00009eed 	.word	0x00009eed
    fc88:	20001d34 	.word	0x20001d34
    fc8c:	0000dbe1 	.word	0x0000dbe1
    fc90:	000106cd 	.word	0x000106cd
    fc94:	0000ee21 	.word	0x0000ee21
    fc98:	20001f24 	.word	0x20001f24
    fc9c:	20001e10 	.word	0x20001e10
    fca0:	0000e201 	.word	0x0000e201

0000fca4 <LorawanSetEdClass>:
    fca4:	2390      	movs	r3, #144	; 0x90
    fca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fca8:	4d19      	ldr	r5, [pc, #100]	; (fd10 <LorawanSetEdClass+0x6c>)
    fcaa:	005b      	lsls	r3, r3, #1
    fcac:	5ceb      	ldrb	r3, [r5, r3]
    fcae:	0004      	movs	r4, r0
    fcb0:	2011      	movs	r0, #17
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d013      	beq.n	fcde <LorawanSetEdClass+0x3a>
    fcb6:	002b      	movs	r3, r5
    fcb8:	33c9      	adds	r3, #201	; 0xc9
    fcba:	781b      	ldrb	r3, [r3, #0]
    fcbc:	3807      	subs	r0, #7
    fcbe:	4223      	tst	r3, r4
    fcc0:	d00d      	beq.n	fcde <LorawanSetEdClass+0x3a>
    fcc2:	002b      	movs	r3, r5
    fcc4:	33c8      	adds	r3, #200	; 0xc8
    fcc6:	7819      	ldrb	r1, [r3, #0]
    fcc8:	428c      	cmp	r4, r1
    fcca:	d007      	beq.n	fcdc <LorawanSetEdClass+0x38>
    fccc:	2901      	cmp	r1, #1
    fcce:	d107      	bne.n	fce0 <LorawanSetEdClass+0x3c>
    fcd0:	2c04      	cmp	r4, #4
    fcd2:	d104      	bne.n	fcde <LorawanSetEdClass+0x3a>
    fcd4:	701c      	strb	r4, [r3, #0]
    fcd6:	2000      	movs	r0, #0
    fcd8:	4b0e      	ldr	r3, [pc, #56]	; (fd14 <LorawanSetEdClass+0x70>)
    fcda:	4798      	blx	r3
    fcdc:	2008      	movs	r0, #8
    fcde:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fce0:	2904      	cmp	r1, #4
    fce2:	d1fc      	bne.n	fcde <LorawanSetEdClass+0x3a>
    fce4:	2c01      	cmp	r4, #1
    fce6:	d1fa      	bne.n	fcde <LorawanSetEdClass+0x3a>
    fce8:	701c      	strb	r4, [r3, #0]
    fcea:	0021      	movs	r1, r4
    fcec:	4b09      	ldr	r3, [pc, #36]	; (fd14 <LorawanSetEdClass+0x70>)
    fcee:	2000      	movs	r0, #0
    fcf0:	4798      	blx	r3
    fcf2:	002a      	movs	r2, r5
    fcf4:	210e      	movs	r1, #14
    fcf6:	3250      	adds	r2, #80	; 0x50
    fcf8:	7813      	ldrb	r3, [r2, #0]
    fcfa:	a801      	add	r0, sp, #4
    fcfc:	438b      	bics	r3, r1
    fcfe:	7013      	strb	r3, [r2, #0]
    fd00:	35f0      	adds	r5, #240	; 0xf0
    fd02:	4b05      	ldr	r3, [pc, #20]	; (fd18 <LorawanSetEdClass+0x74>)
    fd04:	7004      	strb	r4, [r0, #0]
    fd06:	4798      	blx	r3
    fd08:	7828      	ldrb	r0, [r5, #0]
    fd0a:	4b04      	ldr	r3, [pc, #16]	; (fd1c <LorawanSetEdClass+0x78>)
    fd0c:	4798      	blx	r3
    fd0e:	e7e5      	b.n	fcdc <LorawanSetEdClass+0x38>
    fd10:	20001ce4 	.word	0x20001ce4
    fd14:	00008ec5 	.word	0x00008ec5
    fd18:	000120c9 	.word	0x000120c9
    fd1c:	0000a1f1 	.word	0x0000a1f1

0000fd20 <LORAWAN_SetAttr>:
    fd20:	2290      	movs	r2, #144	; 0x90
    fd22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fd24:	4cc0      	ldr	r4, [pc, #768]	; (10028 <LORAWAN_SetAttr+0x308>)
    fd26:	0052      	lsls	r2, r2, #1
    fd28:	5ca2      	ldrb	r2, [r4, r2]
    fd2a:	000b      	movs	r3, r1
    fd2c:	2511      	movs	r5, #17
    fd2e:	2a00      	cmp	r2, #0
    fd30:	d04e      	beq.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fd32:	282d      	cmp	r0, #45	; 0x2d
    fd34:	d85f      	bhi.n	fdf6 <LORAWAN_SetAttr+0xd6>
    fd36:	f002 fcdf 	bl	126f8 <__gnu_thumb1_case_uhi>
    fd3a:	002e      	.short	0x002e
    fd3c:	009a007d 	.word	0x009a007d
    fd40:	00ab00d9 	.word	0x00ab00d9
    fd44:	00f700c7 	.word	0x00f700c7
    fd48:	01300110 	.word	0x01300110
    fd4c:	01480142 	.word	0x01480142
    fd50:	015d0154 	.word	0x015d0154
    fd54:	01810172 	.word	0x01810172
    fd58:	018b0186 	.word	0x018b0186
    fd5c:	01950190 	.word	0x01950190
    fd60:	019f019a 	.word	0x019f019a
    fd64:	01a601c1 	.word	0x01a601c1
    fd68:	01ca01a3 	.word	0x01ca01a3
    fd6c:	01bc01c6 	.word	0x01bc01c6
    fd70:	01b201b8 	.word	0x01b201b8
    fd74:	005e005e 	.word	0x005e005e
    fd78:	005e016e 	.word	0x005e016e
    fd7c:	005e005e 	.word	0x005e005e
    fd80:	005e005e 	.word	0x005e005e
    fd84:	01ce005e 	.word	0x01ce005e
    fd88:	01d1004d 	.word	0x01d1004d
    fd8c:	01e601f8 	.word	0x01e601f8
    fd90:	005e01d5 	.word	0x005e01d5
    fd94:	0212      	.short	0x0212
    fd96:	250a      	movs	r5, #10
    fd98:	2900      	cmp	r1, #0
    fd9a:	d019      	beq.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fd9c:	0020      	movs	r0, r4
    fd9e:	2208      	movs	r2, #8
    fda0:	4ba2      	ldr	r3, [pc, #648]	; (1002c <LORAWAN_SetAttr+0x30c>)
    fda2:	303d      	adds	r0, #61	; 0x3d
    fda4:	4798      	blx	r3
    fda6:	4ea2      	ldr	r6, [pc, #648]	; (10030 <LORAWAN_SetAttr+0x310>)
    fda8:	2108      	movs	r1, #8
    fdaa:	2001      	movs	r0, #1
    fdac:	47b0      	blx	r6
    fdae:	0022      	movs	r2, r4
    fdb0:	32aa      	adds	r2, #170	; 0xaa
    fdb2:	7813      	ldrb	r3, [r2, #0]
    fdb4:	3d09      	subs	r5, #9
    fdb6:	432b      	orrs	r3, r5
    fdb8:	2109      	movs	r1, #9
    fdba:	0028      	movs	r0, r5
    fdbc:	3450      	adds	r4, #80	; 0x50
    fdbe:	7013      	strb	r3, [r2, #0]
    fdc0:	47b0      	blx	r6
    fdc2:	7823      	ldrb	r3, [r4, #0]
    fdc4:	0028      	movs	r0, r5
    fdc6:	43ab      	bics	r3, r5
    fdc8:	210b      	movs	r1, #11
    fdca:	7023      	strb	r3, [r4, #0]
    fdcc:	47b0      	blx	r6
    fdce:	3507      	adds	r5, #7
    fdd0:	0028      	movs	r0, r5
    fdd2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    fdd4:	0022      	movs	r2, r4
    fdd6:	32e4      	adds	r2, #228	; 0xe4
    fdd8:	7812      	ldrb	r2, [r2, #0]
    fdda:	250a      	movs	r5, #10
    fddc:	0752      	lsls	r2, r2, #29
    fdde:	d5f7      	bpl.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fde0:	79c9      	ldrb	r1, [r1, #7]
    fde2:	4a94      	ldr	r2, [pc, #592]	; (10034 <LORAWAN_SetAttr+0x314>)
    fde4:	2900      	cmp	r1, #0
    fde6:	d111      	bne.n	fe0c <LORAWAN_SetAttr+0xec>
    fde8:	466b      	mov	r3, sp
    fdea:	201d      	movs	r0, #29
    fdec:	7159      	strb	r1, [r3, #5]
    fdee:	4669      	mov	r1, sp
    fdf0:	4790      	blx	r2
    fdf2:	2800      	cmp	r0, #0
    fdf4:	d001      	beq.n	fdfa <LORAWAN_SetAttr+0xda>
    fdf6:	250a      	movs	r5, #10
    fdf8:	e7ea      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fdfa:	0023      	movs	r3, r4
    fdfc:	2109      	movs	r1, #9
    fdfe:	33e8      	adds	r3, #232	; 0xe8
    fe00:	34e6      	adds	r4, #230	; 0xe6
    fe02:	8018      	strh	r0, [r3, #0]
    fe04:	8020      	strh	r0, [r4, #0]
    fe06:	4b8a      	ldr	r3, [pc, #552]	; (10030 <LORAWAN_SetAttr+0x310>)
    fe08:	4798      	blx	r3
    fe0a:	e011      	b.n	fe30 <LORAWAN_SetAttr+0x110>
    fe0c:	466e      	mov	r6, sp
    fe0e:	2502      	movs	r5, #2
    fe10:	5f59      	ldrsh	r1, [r3, r5]
    fe12:	8818      	ldrh	r0, [r3, #0]
    fe14:	889d      	ldrh	r5, [r3, #4]
    fe16:	799b      	ldrb	r3, [r3, #6]
    fe18:	8030      	strh	r0, [r6, #0]
    fe1a:	7133      	strb	r3, [r6, #4]
    fe1c:	2301      	movs	r3, #1
    fe1e:	8071      	strh	r1, [r6, #2]
    fe20:	201d      	movs	r0, #29
    fe22:	4669      	mov	r1, sp
    fe24:	7173      	strb	r3, [r6, #5]
    fe26:	4790      	blx	r2
    fe28:	2800      	cmp	r0, #0
    fe2a:	d1e4      	bne.n	fdf6 <LORAWAN_SetAttr+0xd6>
    fe2c:	34e8      	adds	r4, #232	; 0xe8
    fe2e:	8025      	strh	r5, [r4, #0]
    fe30:	2508      	movs	r5, #8
    fe32:	e7cd      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fe34:	250a      	movs	r5, #10
    fe36:	2900      	cmp	r1, #0
    fe38:	d0ca      	beq.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fe3a:	0020      	movs	r0, r4
    fe3c:	2208      	movs	r2, #8
    fe3e:	4b7b      	ldr	r3, [pc, #492]	; (1002c <LORAWAN_SetAttr+0x30c>)
    fe40:	3035      	adds	r0, #53	; 0x35
    fe42:	4798      	blx	r3
    fe44:	2107      	movs	r1, #7
    fe46:	2001      	movs	r0, #1
    fe48:	4d79      	ldr	r5, [pc, #484]	; (10030 <LORAWAN_SetAttr+0x310>)
    fe4a:	47a8      	blx	r5
    fe4c:	0022      	movs	r2, r4
    fe4e:	2302      	movs	r3, #2
    fe50:	32aa      	adds	r2, #170	; 0xaa
    fe52:	7811      	ldrb	r1, [r2, #0]
    fe54:	430b      	orrs	r3, r1
    fe56:	7013      	strb	r3, [r2, #0]
    fe58:	2109      	movs	r1, #9
    fe5a:	2001      	movs	r0, #1
    fe5c:	47a8      	blx	r5
    fe5e:	2001      	movs	r0, #1
    fe60:	210b      	movs	r1, #11
    fe62:	3450      	adds	r4, #80	; 0x50
    fe64:	7823      	ldrb	r3, [r4, #0]
    fe66:	4383      	bics	r3, r0
    fe68:	7023      	strb	r3, [r4, #0]
    fe6a:	47a8      	blx	r5
    fe6c:	e7e0      	b.n	fe30 <LORAWAN_SetAttr+0x110>
    fe6e:	680b      	ldr	r3, [r1, #0]
    fe70:	2001      	movs	r0, #1
    fe72:	0a19      	lsrs	r1, r3, #8
    fe74:	70a1      	strb	r1, [r4, #2]
    fe76:	0c19      	lsrs	r1, r3, #16
    fe78:	7063      	strb	r3, [r4, #1]
    fe7a:	70e1      	strb	r1, [r4, #3]
    fe7c:	0e1b      	lsrs	r3, r3, #24
    fe7e:	2103      	movs	r1, #3
    fe80:	4d6b      	ldr	r5, [pc, #428]	; (10030 <LORAWAN_SetAttr+0x310>)
    fe82:	7123      	strb	r3, [r4, #4]
    fe84:	47a8      	blx	r5
    fe86:	0022      	movs	r2, r4
    fe88:	32aa      	adds	r2, #170	; 0xaa
    fe8a:	7811      	ldrb	r1, [r2, #0]
    fe8c:	2304      	movs	r3, #4
    fe8e:	e7e1      	b.n	fe54 <LORAWAN_SetAttr+0x134>
    fe90:	250a      	movs	r5, #10
    fe92:	2900      	cmp	r1, #0
    fe94:	d09c      	beq.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fe96:	3506      	adds	r5, #6
    fe98:	002a      	movs	r2, r5
    fe9a:	4b64      	ldr	r3, [pc, #400]	; (1002c <LORAWAN_SetAttr+0x30c>)
    fe9c:	1d60      	adds	r0, r4, #5
    fe9e:	4798      	blx	r3
    fea0:	4e63      	ldr	r6, [pc, #396]	; (10030 <LORAWAN_SetAttr+0x310>)
    fea2:	2104      	movs	r1, #4
    fea4:	2001      	movs	r0, #1
    fea6:	47b0      	blx	r6
    fea8:	0023      	movs	r3, r4
    feaa:	33aa      	adds	r3, #170	; 0xaa
    feac:	781a      	ldrb	r2, [r3, #0]
    feae:	2109      	movs	r1, #9
    feb0:	4315      	orrs	r5, r2
    feb2:	2001      	movs	r0, #1
    feb4:	701d      	strb	r5, [r3, #0]
    feb6:	47b0      	blx	r6
    feb8:	2001      	movs	r0, #1
    feba:	3450      	adds	r4, #80	; 0x50
    febc:	7823      	ldrb	r3, [r4, #0]
    febe:	210b      	movs	r1, #11
    fec0:	4383      	bics	r3, r0
    fec2:	7023      	strb	r3, [r4, #0]
    fec4:	47b0      	blx	r6
    fec6:	e7b3      	b.n	fe30 <LORAWAN_SetAttr+0x110>
    fec8:	250a      	movs	r5, #10
    feca:	2900      	cmp	r1, #0
    fecc:	d100      	bne.n	fed0 <LORAWAN_SetAttr+0x1b0>
    fece:	e77f      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fed0:	0020      	movs	r0, r4
    fed2:	2210      	movs	r2, #16
    fed4:	4b55      	ldr	r3, [pc, #340]	; (1002c <LORAWAN_SetAttr+0x30c>)
    fed6:	3015      	adds	r0, #21
    fed8:	4798      	blx	r3
    feda:	2105      	movs	r1, #5
    fedc:	2001      	movs	r0, #1
    fede:	4d54      	ldr	r5, [pc, #336]	; (10030 <LORAWAN_SetAttr+0x310>)
    fee0:	47a8      	blx	r5
    fee2:	0022      	movs	r2, r4
    fee4:	32aa      	adds	r2, #170	; 0xaa
    fee6:	7811      	ldrb	r1, [r2, #0]
    fee8:	2320      	movs	r3, #32
    feea:	e7b3      	b.n	fe54 <LORAWAN_SetAttr+0x134>
    feec:	250a      	movs	r5, #10
    feee:	2900      	cmp	r1, #0
    fef0:	d100      	bne.n	fef4 <LORAWAN_SetAttr+0x1d4>
    fef2:	e76d      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    fef4:	0020      	movs	r0, r4
    fef6:	2210      	movs	r2, #16
    fef8:	4b4c      	ldr	r3, [pc, #304]	; (1002c <LORAWAN_SetAttr+0x30c>)
    fefa:	3025      	adds	r0, #37	; 0x25
    fefc:	4798      	blx	r3
    fefe:	4e4c      	ldr	r6, [pc, #304]	; (10030 <LORAWAN_SetAttr+0x310>)
    ff00:	2106      	movs	r1, #6
    ff02:	2001      	movs	r0, #1
    ff04:	47b0      	blx	r6
    ff06:	0022      	movs	r2, r4
    ff08:	32aa      	adds	r2, #170	; 0xaa
    ff0a:	7813      	ldrb	r3, [r2, #0]
    ff0c:	3d02      	subs	r5, #2
    ff0e:	432b      	orrs	r3, r5
    ff10:	2109      	movs	r1, #9
    ff12:	2001      	movs	r0, #1
    ff14:	7013      	strb	r3, [r2, #0]
    ff16:	47b0      	blx	r6
    ff18:	2001      	movs	r0, #1
    ff1a:	3450      	adds	r4, #80	; 0x50
    ff1c:	7823      	ldrb	r3, [r4, #0]
    ff1e:	210b      	movs	r1, #11
    ff20:	4383      	bics	r3, r0
    ff22:	7023      	strb	r3, [r4, #0]
    ff24:	47b0      	blx	r6
    ff26:	e753      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ff28:	780b      	ldrb	r3, [r1, #0]
    ff2a:	2001      	movs	r0, #1
    ff2c:	0021      	movs	r1, r4
    ff2e:	2520      	movs	r5, #32
    ff30:	3150      	adds	r1, #80	; 0x50
    ff32:	4003      	ands	r3, r0
    ff34:	015a      	lsls	r2, r3, #5
    ff36:	780b      	ldrb	r3, [r1, #0]
    ff38:	43ab      	bics	r3, r5
    ff3a:	4313      	orrs	r3, r2
    ff3c:	700b      	strb	r3, [r1, #0]
    ff3e:	0023      	movs	r3, r4
    ff40:	2200      	movs	r2, #0
    ff42:	3396      	adds	r3, #150	; 0x96
    ff44:	3460      	adds	r4, #96	; 0x60
    ff46:	801a      	strh	r2, [r3, #0]
    ff48:	7823      	ldrb	r3, [r4, #0]
    ff4a:	3210      	adds	r2, #16
    ff4c:	4393      	bics	r3, r2
    ff4e:	7023      	strb	r3, [r4, #0]
    ff50:	210b      	movs	r1, #11
    ff52:	4b37      	ldr	r3, [pc, #220]	; (10030 <LORAWAN_SetAttr+0x310>)
    ff54:	4798      	blx	r3
    ff56:	3d18      	subs	r5, #24
    ff58:	e73a      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ff5a:	466a      	mov	r2, sp
    ff5c:	780b      	ldrb	r3, [r1, #0]
    ff5e:	7013      	strb	r3, [r2, #0]
    ff60:	0022      	movs	r2, r4
    ff62:	32be      	adds	r2, #190	; 0xbe
    ff64:	7812      	ldrb	r2, [r2, #0]
    ff66:	429a      	cmp	r2, r3
    ff68:	d900      	bls.n	ff6c <LORAWAN_SetAttr+0x24c>
    ff6a:	e744      	b.n	fdf6 <LORAWAN_SetAttr+0xd6>
    ff6c:	0022      	movs	r2, r4
    ff6e:	32bf      	adds	r2, #191	; 0xbf
    ff70:	7812      	ldrb	r2, [r2, #0]
    ff72:	429a      	cmp	r2, r3
    ff74:	d200      	bcs.n	ff78 <LORAWAN_SetAttr+0x258>
    ff76:	e73e      	b.n	fdf6 <LORAWAN_SetAttr+0xd6>
    ff78:	4669      	mov	r1, sp
    ff7a:	2010      	movs	r0, #16
    ff7c:	4b2e      	ldr	r3, [pc, #184]	; (10038 <LORAWAN_SetAttr+0x318>)
    ff7e:	4798      	blx	r3
    ff80:	0005      	movs	r5, r0
    ff82:	2808      	cmp	r0, #8
    ff84:	d000      	beq.n	ff88 <LORAWAN_SetAttr+0x268>
    ff86:	e736      	b.n	fdf6 <LORAWAN_SetAttr+0xd6>
    ff88:	466b      	mov	r3, sp
    ff8a:	210c      	movs	r1, #12
    ff8c:	2001      	movs	r0, #1
    ff8e:	781b      	ldrb	r3, [r3, #0]
    ff90:	34b3      	adds	r4, #179	; 0xb3
    ff92:	7023      	strb	r3, [r4, #0]
    ff94:	4b26      	ldr	r3, [pc, #152]	; (10030 <LORAWAN_SetAttr+0x310>)
    ff96:	4798      	blx	r3
    ff98:	e71a      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ff9a:	466a      	mov	r2, sp
    ff9c:	780b      	ldrb	r3, [r1, #0]
    ff9e:	201d      	movs	r0, #29
    ffa0:	7013      	strb	r3, [r2, #0]
    ffa2:	4669      	mov	r1, sp
    ffa4:	4b24      	ldr	r3, [pc, #144]	; (10038 <LORAWAN_SetAttr+0x318>)
    ffa6:	4798      	blx	r3
    ffa8:	0005      	movs	r5, r0
    ffaa:	2808      	cmp	r0, #8
    ffac:	d000      	beq.n	ffb0 <LORAWAN_SetAttr+0x290>
    ffae:	e722      	b.n	fdf6 <LORAWAN_SetAttr+0xd6>
    ffb0:	466b      	mov	r3, sp
    ffb2:	781b      	ldrb	r3, [r3, #0]
    ffb4:	34b5      	adds	r4, #181	; 0xb5
    ffb6:	7023      	strb	r3, [r4, #0]
    ffb8:	210a      	movs	r1, #10
    ffba:	2000      	movs	r0, #0
    ffbc:	e7ea      	b.n	ff94 <LORAWAN_SetAttr+0x274>
    ffbe:	780b      	ldrb	r3, [r1, #0]
    ffc0:	2103      	movs	r1, #3
    ffc2:	34cb      	adds	r4, #203	; 0xcb
    ffc4:	7023      	strb	r3, [r4, #0]
    ffc6:	2000      	movs	r0, #0
    ffc8:	e71d      	b.n	fe06 <LORAWAN_SetAttr+0xe6>
    ffca:	680b      	ldr	r3, [r1, #0]
    ffcc:	250a      	movs	r5, #10
    ffce:	1c5a      	adds	r2, r3, #1
    ffd0:	d100      	bne.n	ffd4 <LORAWAN_SetAttr+0x2b4>
    ffd2:	e6fd      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ffd4:	2116      	movs	r1, #22
    ffd6:	2000      	movs	r0, #0
    ffd8:	6563      	str	r3, [r4, #84]	; 0x54
    ffda:	4b15      	ldr	r3, [pc, #84]	; (10030 <LORAWAN_SetAttr+0x310>)
    ffdc:	4798      	blx	r3
    ffde:	3d02      	subs	r5, #2
    ffe0:	e6f6      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ffe2:	680b      	ldr	r3, [r1, #0]
    ffe4:	250a      	movs	r5, #10
    ffe6:	1c5a      	adds	r2, r3, #1
    ffe8:	d100      	bne.n	ffec <LORAWAN_SetAttr+0x2cc>
    ffea:	e6f1      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
    ffec:	65a3      	str	r3, [r4, #88]	; 0x58
    ffee:	0029      	movs	r1, r5
    fff0:	2001      	movs	r0, #1
    fff2:	e7f2      	b.n	ffda <LORAWAN_SetAttr+0x2ba>
    fff4:	0026      	movs	r6, r4
    fff6:	880b      	ldrh	r3, [r1, #0]
    fff8:	369c      	adds	r6, #156	; 0x9c
    fffa:	210c      	movs	r1, #12
    fffc:	2000      	movs	r0, #0
    fffe:	4d0c      	ldr	r5, [pc, #48]	; (10030 <LORAWAN_SetAttr+0x310>)
   10000:	8033      	strh	r3, [r6, #0]
   10002:	47a8      	blx	r5
   10004:	22fa      	movs	r2, #250	; 0xfa
   10006:	8833      	ldrh	r3, [r6, #0]
   10008:	0092      	lsls	r2, r2, #2
   1000a:	189b      	adds	r3, r3, r2
   1000c:	349e      	adds	r4, #158	; 0x9e
   1000e:	8023      	strh	r3, [r4, #0]
   10010:	210d      	movs	r1, #13
   10012:	2000      	movs	r0, #0
   10014:	e729      	b.n	fe6a <LORAWAN_SetAttr+0x14a>
   10016:	880b      	ldrh	r3, [r1, #0]
   10018:	3464      	adds	r4, #100	; 0x64
   1001a:	8023      	strh	r3, [r4, #0]
   1001c:	e708      	b.n	fe30 <LORAWAN_SetAttr+0x110>
   1001e:	880b      	ldrh	r3, [r1, #0]
   10020:	34a0      	adds	r4, #160	; 0xa0
   10022:	8023      	strh	r3, [r4, #0]
   10024:	210e      	movs	r1, #14
   10026:	e7ce      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   10028:	20001ce4 	.word	0x20001ce4
   1002c:	000158c9 	.word	0x000158c9
   10030:	00008ec5 	.word	0x00008ec5
   10034:	00010d99 	.word	0x00010d99
   10038:	00008aa1 	.word	0x00008aa1
   1003c:	880b      	ldrh	r3, [r1, #0]
   1003e:	34a2      	adds	r4, #162	; 0xa2
   10040:	8023      	strh	r3, [r4, #0]
   10042:	210f      	movs	r1, #15
   10044:	e7bf      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   10046:	880b      	ldrh	r3, [r1, #0]
   10048:	34a4      	adds	r4, #164	; 0xa4
   1004a:	8023      	strh	r3, [r4, #0]
   1004c:	2110      	movs	r1, #16
   1004e:	e7ba      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   10050:	780b      	ldrb	r3, [r1, #0]
   10052:	34a8      	adds	r4, #168	; 0xa8
   10054:	7023      	strb	r3, [r4, #0]
   10056:	2112      	movs	r1, #18
   10058:	e7b5      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   1005a:	780b      	ldrb	r3, [r1, #0]
   1005c:	34a9      	adds	r4, #169	; 0xa9
   1005e:	7023      	strb	r3, [r4, #0]
   10060:	2113      	movs	r1, #19
   10062:	e7b0      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   10064:	880b      	ldrh	r3, [r1, #0]
   10066:	34a6      	adds	r4, #166	; 0xa6
   10068:	8023      	strh	r3, [r4, #0]
   1006a:	2111      	movs	r1, #17
   1006c:	e7ab      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   1006e:	780b      	ldrb	r3, [r1, #0]
   10070:	34ae      	adds	r4, #174	; 0xae
   10072:	7023      	strb	r3, [r4, #0]
   10074:	2115      	movs	r1, #21
   10076:	e7a6      	b.n	ffc6 <LORAWAN_SetAttr+0x2a6>
   10078:	780b      	ldrb	r3, [r1, #0]
   1007a:	34ad      	adds	r4, #173	; 0xad
   1007c:	7023      	strb	r3, [r4, #0]
   1007e:	e6d7      	b.n	fe30 <LORAWAN_SetAttr+0x110>
   10080:	780b      	ldrb	r3, [r1, #0]
   10082:	34b4      	adds	r4, #180	; 0xb4
   10084:	e7fa      	b.n	1007c <LORAWAN_SetAttr+0x35c>
   10086:	2001      	movs	r0, #1
   10088:	780b      	ldrb	r3, [r1, #0]
   1008a:	2110      	movs	r1, #16
   1008c:	3450      	adds	r4, #80	; 0x50
   1008e:	4003      	ands	r3, r0
   10090:	011a      	lsls	r2, r3, #4
   10092:	7823      	ldrb	r3, [r4, #0]
   10094:	438b      	bics	r3, r1
   10096:	4313      	orrs	r3, r2
   10098:	7023      	strb	r3, [r4, #0]
   1009a:	3905      	subs	r1, #5
   1009c:	e6b3      	b.n	fe06 <LORAWAN_SetAttr+0xe6>
   1009e:	7818      	ldrb	r0, [r3, #0]
   100a0:	7909      	ldrb	r1, [r1, #4]
   100a2:	4b38      	ldr	r3, [pc, #224]	; (10184 <LORAWAN_SetAttr+0x464>)
   100a4:	4798      	blx	r3
   100a6:	0005      	movs	r5, r0
   100a8:	e692      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
   100aa:	7818      	ldrb	r0, [r3, #0]
   100ac:	7909      	ldrb	r1, [r1, #4]
   100ae:	4b36      	ldr	r3, [pc, #216]	; (10188 <LORAWAN_SetAttr+0x468>)
   100b0:	e7f8      	b.n	100a4 <LORAWAN_SetAttr+0x384>
   100b2:	7808      	ldrb	r0, [r1, #0]
   100b4:	4b35      	ldr	r3, [pc, #212]	; (1018c <LORAWAN_SetAttr+0x46c>)
   100b6:	6849      	ldr	r1, [r1, #4]
   100b8:	4798      	blx	r3
   100ba:	e7f4      	b.n	100a6 <LORAWAN_SetAttr+0x386>
   100bc:	7909      	ldrb	r1, [r1, #4]
   100be:	6818      	ldr	r0, [r3, #0]
   100c0:	4b33      	ldr	r3, [pc, #204]	; (10190 <LORAWAN_SetAttr+0x470>)
   100c2:	4798      	blx	r3
   100c4:	e7ef      	b.n	100a6 <LORAWAN_SetAttr+0x386>
   100c6:	7808      	ldrb	r0, [r1, #0]
   100c8:	4b32      	ldr	r3, [pc, #200]	; (10194 <LORAWAN_SetAttr+0x474>)
   100ca:	4798      	blx	r3
   100cc:	e7eb      	b.n	100a6 <LORAWAN_SetAttr+0x386>
   100ce:	8808      	ldrh	r0, [r1, #0]
   100d0:	4b31      	ldr	r3, [pc, #196]	; (10198 <LORAWAN_SetAttr+0x478>)
   100d2:	4798      	blx	r3
   100d4:	e6ac      	b.n	fe30 <LORAWAN_SetAttr+0x110>
   100d6:	4a31      	ldr	r2, [pc, #196]	; (1019c <LORAWAN_SetAttr+0x47c>)
   100d8:	6011      	str	r1, [r2, #0]
   100da:	e68c      	b.n	fdf6 <LORAWAN_SetAttr+0xd6>
   100dc:	7808      	ldrb	r0, [r1, #0]
   100de:	4b30      	ldr	r3, [pc, #192]	; (101a0 <LORAWAN_SetAttr+0x480>)
   100e0:	4798      	blx	r3
   100e2:	e7e0      	b.n	100a6 <LORAWAN_SetAttr+0x386>
   100e4:	0020      	movs	r0, r4
   100e6:	300d      	adds	r0, #13
   100e8:	4b2e      	ldr	r3, [pc, #184]	; (101a4 <LORAWAN_SetAttr+0x484>)
   100ea:	2210      	movs	r2, #16
   100ec:	30ff      	adds	r0, #255	; 0xff
   100ee:	4798      	blx	r3
   100f0:	2107      	movs	r1, #7
   100f2:	2000      	movs	r0, #0
   100f4:	4d2c      	ldr	r5, [pc, #176]	; (101a8 <LORAWAN_SetAttr+0x488>)
   100f6:	47a8      	blx	r5
   100f8:	2001      	movs	r0, #1
   100fa:	34aa      	adds	r4, #170	; 0xaa
   100fc:	7863      	ldrb	r3, [r4, #1]
   100fe:	2109      	movs	r1, #9
   10100:	4303      	orrs	r3, r0
   10102:	7063      	strb	r3, [r4, #1]
   10104:	e6b1      	b.n	fe6a <LORAWAN_SetAttr+0x14a>
   10106:	0020      	movs	r0, r4
   10108:	2210      	movs	r2, #16
   1010a:	4b26      	ldr	r3, [pc, #152]	; (101a4 <LORAWAN_SetAttr+0x484>)
   1010c:	30fc      	adds	r0, #252	; 0xfc
   1010e:	4798      	blx	r3
   10110:	2108      	movs	r1, #8
   10112:	2000      	movs	r0, #0
   10114:	4d24      	ldr	r5, [pc, #144]	; (101a8 <LORAWAN_SetAttr+0x488>)
   10116:	47a8      	blx	r5
   10118:	2380      	movs	r3, #128	; 0x80
   1011a:	34aa      	adds	r4, #170	; 0xaa
   1011c:	7822      	ldrb	r2, [r4, #0]
   1011e:	425b      	negs	r3, r3
   10120:	4313      	orrs	r3, r2
   10122:	7023      	strb	r3, [r4, #0]
   10124:	2109      	movs	r1, #9
   10126:	2001      	movs	r0, #1
   10128:	e69f      	b.n	fe6a <LORAWAN_SetAttr+0x14a>
   1012a:	0023      	movs	r3, r4
   1012c:	3350      	adds	r3, #80	; 0x50
   1012e:	781b      	ldrb	r3, [r3, #0]
   10130:	6809      	ldr	r1, [r1, #0]
   10132:	07db      	lsls	r3, r3, #31
   10134:	d508      	bpl.n	10148 <LORAWAN_SetAttr+0x428>
   10136:	6823      	ldr	r3, [r4, #0]
   10138:	250a      	movs	r5, #10
   1013a:	0a1a      	lsrs	r2, r3, #8
   1013c:	7923      	ldrb	r3, [r4, #4]
   1013e:	061b      	lsls	r3, r3, #24
   10140:	4313      	orrs	r3, r2
   10142:	4299      	cmp	r1, r3
   10144:	d100      	bne.n	10148 <LORAWAN_SetAttr+0x428>
   10146:	e643      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
   10148:	0023      	movs	r3, r4
   1014a:	33f8      	adds	r3, #248	; 0xf8
   1014c:	6019      	str	r1, [r3, #0]
   1014e:	2000      	movs	r0, #0
   10150:	2106      	movs	r1, #6
   10152:	4d15      	ldr	r5, [pc, #84]	; (101a8 <LORAWAN_SetAttr+0x488>)
   10154:	34aa      	adds	r4, #170	; 0xaa
   10156:	47a8      	blx	r5
   10158:	7822      	ldrb	r2, [r4, #0]
   1015a:	2340      	movs	r3, #64	; 0x40
   1015c:	e7e0      	b.n	10120 <LORAWAN_SetAttr+0x400>
   1015e:	7809      	ldrb	r1, [r1, #0]
   10160:	2900      	cmp	r1, #0
   10162:	d009      	beq.n	10178 <LORAWAN_SetAttr+0x458>
   10164:	2202      	movs	r2, #2
   10166:	34e4      	adds	r4, #228	; 0xe4
   10168:	7823      	ldrb	r3, [r4, #0]
   1016a:	2508      	movs	r5, #8
   1016c:	4213      	tst	r3, r2
   1016e:	d100      	bne.n	10172 <LORAWAN_SetAttr+0x452>
   10170:	e62e      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
   10172:	4393      	bics	r3, r2
   10174:	7023      	strb	r3, [r4, #0]
   10176:	e62b      	b.n	fdd0 <LORAWAN_SetAttr+0xb0>
   10178:	4a0c      	ldr	r2, [pc, #48]	; (101ac <LORAWAN_SetAttr+0x48c>)
   1017a:	4b0d      	ldr	r3, [pc, #52]	; (101b0 <LORAWAN_SetAttr+0x490>)
   1017c:	200e      	movs	r0, #14
   1017e:	4798      	blx	r3
   10180:	e656      	b.n	fe30 <LORAWAN_SetAttr+0x110>
   10182:	46c0      	nop			; (mov r8, r8)
   10184:	0000f2a5 	.word	0x0000f2a5
   10188:	0000f235 	.word	0x0000f235
   1018c:	0000e345 	.word	0x0000e345
   10190:	0000e309 	.word	0x0000e309
   10194:	0000fca5 	.word	0x0000fca5
   10198:	0000d225 	.word	0x0000d225
   1019c:	20001f20 	.word	0x20001f20
   101a0:	00010889 	.word	0x00010889
   101a4:	000158c9 	.word	0x000158c9
   101a8:	00008ec5 	.word	0x00008ec5
   101ac:	20001dc8 	.word	0x20001dc8
   101b0:	00008a85 	.word	0x00008a85

000101b4 <LORAWAN_Reset>:
   101b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   101b6:	b087      	sub	sp, #28
   101b8:	ab02      	add	r3, sp, #8
   101ba:	1ddd      	adds	r5, r3, #7
   101bc:	23ff      	movs	r3, #255	; 0xff
   101be:	4c7e      	ldr	r4, [pc, #504]	; (103b8 <LORAWAN_Reset+0x204>)
   101c0:	702b      	strb	r3, [r5, #0]
   101c2:	0023      	movs	r3, r4
   101c4:	9001      	str	r0, [sp, #4]
   101c6:	33c3      	adds	r3, #195	; 0xc3
   101c8:	781b      	ldrb	r3, [r3, #0]
   101ca:	2b00      	cmp	r3, #0
   101cc:	d001      	beq.n	101d2 <LORAWAN_Reset+0x1e>
   101ce:	4b7b      	ldr	r3, [pc, #492]	; (103bc <LORAWAN_Reset+0x208>)
   101d0:	4798      	blx	r3
   101d2:	002a      	movs	r2, r5
   101d4:	4b7a      	ldr	r3, [pc, #488]	; (103c0 <LORAWAN_Reset+0x20c>)
   101d6:	2100      	movs	r1, #0
   101d8:	2023      	movs	r0, #35	; 0x23
   101da:	4798      	blx	r3
   101dc:	782b      	ldrb	r3, [r5, #0]
   101de:	9a01      	ldr	r2, [sp, #4]
   101e0:	4293      	cmp	r3, r2
   101e2:	d001      	beq.n	101e8 <LORAWAN_Reset+0x34>
   101e4:	4b77      	ldr	r3, [pc, #476]	; (103c4 <LORAWAN_Reset+0x210>)
   101e6:	4798      	blx	r3
   101e8:	0021      	movs	r1, r4
   101ea:	2334      	movs	r3, #52	; 0x34
   101ec:	31cb      	adds	r1, #203	; 0xcb
   101ee:	700b      	strb	r3, [r1, #0]
   101f0:	2000      	movs	r0, #0
   101f2:	4b75      	ldr	r3, [pc, #468]	; (103c8 <LORAWAN_Reset+0x214>)
   101f4:	4798      	blx	r3
   101f6:	0023      	movs	r3, r4
   101f8:	2201      	movs	r2, #1
   101fa:	33c8      	adds	r3, #200	; 0xc8
   101fc:	701a      	strb	r2, [r3, #0]
   101fe:	0023      	movs	r3, r4
   10200:	2205      	movs	r2, #5
   10202:	33c9      	adds	r3, #201	; 0xc9
   10204:	701a      	strb	r2, [r3, #0]
   10206:	0023      	movs	r3, r4
   10208:	32fa      	adds	r2, #250	; 0xfa
   1020a:	33b1      	adds	r3, #177	; 0xb1
   1020c:	701a      	strb	r2, [r3, #0]
   1020e:	0023      	movs	r3, r4
   10210:	2500      	movs	r5, #0
   10212:	33b2      	adds	r3, #178	; 0xb2
   10214:	701d      	strb	r5, [r3, #0]
   10216:	0023      	movs	r3, r4
   10218:	339a      	adds	r3, #154	; 0x9a
   1021a:	801d      	strh	r5, [r3, #0]
   1021c:	0023      	movs	r3, r4
   1021e:	3398      	adds	r3, #152	; 0x98
   10220:	801d      	strh	r5, [r3, #0]
   10222:	0023      	movs	r3, r4
   10224:	3afe      	subs	r2, #254	; 0xfe
   10226:	3364      	adds	r3, #100	; 0x64
   10228:	801a      	strh	r2, [r3, #0]
   1022a:	0023      	movs	r3, r4
   1022c:	3396      	adds	r3, #150	; 0x96
   1022e:	801d      	strh	r5, [r3, #0]
   10230:	0023      	movs	r3, r4
   10232:	33c1      	adds	r3, #193	; 0xc1
   10234:	701d      	strb	r5, [r3, #0]
   10236:	0023      	movs	r3, r4
   10238:	33c2      	adds	r3, #194	; 0xc2
   1023a:	701d      	strb	r5, [r3, #0]
   1023c:	0023      	movs	r3, r4
   1023e:	2206      	movs	r2, #6
   10240:	33cc      	adds	r3, #204	; 0xcc
   10242:	601a      	str	r2, [r3, #0]
   10244:	0023      	movs	r3, r4
   10246:	33d0      	adds	r3, #208	; 0xd0
   10248:	601d      	str	r5, [r3, #0]
   1024a:	0023      	movs	r3, r4
   1024c:	33e6      	adds	r3, #230	; 0xe6
   1024e:	801d      	strh	r5, [r3, #0]
   10250:	0023      	movs	r3, r4
   10252:	33e8      	adds	r3, #232	; 0xe8
   10254:	801d      	strh	r5, [r3, #0]
   10256:	320a      	adds	r2, #10
   10258:	0029      	movs	r1, r5
   1025a:	4b5c      	ldr	r3, [pc, #368]	; (103cc <LORAWAN_Reset+0x218>)
   1025c:	485c      	ldr	r0, [pc, #368]	; (103d0 <LORAWAN_Reset+0x21c>)
   1025e:	65a5      	str	r5, [r4, #88]	; 0x58
   10260:	6565      	str	r5, [r4, #84]	; 0x54
   10262:	4798      	blx	r3
   10264:	2390      	movs	r3, #144	; 0x90
   10266:	2201      	movs	r2, #1
   10268:	2607      	movs	r6, #7
   1026a:	005b      	lsls	r3, r3, #1
   1026c:	54e2      	strb	r2, [r4, r3]
   1026e:	0029      	movs	r1, r5
   10270:	0032      	movs	r2, r6
   10272:	4b56      	ldr	r3, [pc, #344]	; (103cc <LORAWAN_Reset+0x218>)
   10274:	4857      	ldr	r0, [pc, #348]	; (103d4 <LORAWAN_Reset+0x220>)
   10276:	4798      	blx	r3
   10278:	0023      	movs	r3, r4
   1027a:	3360      	adds	r3, #96	; 0x60
   1027c:	801d      	strh	r5, [r3, #0]
   1027e:	0023      	movs	r3, r4
   10280:	33ae      	adds	r3, #174	; 0xae
   10282:	701e      	strb	r6, [r3, #0]
   10284:	0023      	movs	r3, r4
   10286:	33ad      	adds	r3, #173	; 0xad
   10288:	701d      	strb	r5, [r3, #0]
   1028a:	0023      	movs	r3, r4
   1028c:	33b0      	adds	r3, #176	; 0xb0
   1028e:	701d      	strb	r5, [r3, #0]
   10290:	0023      	movs	r3, r4
   10292:	33af      	adds	r3, #175	; 0xaf
   10294:	701d      	strb	r5, [r3, #0]
   10296:	9801      	ldr	r0, [sp, #4]
   10298:	4b4f      	ldr	r3, [pc, #316]	; (103d8 <LORAWAN_Reset+0x224>)
   1029a:	6525      	str	r5, [r4, #80]	; 0x50
   1029c:	4798      	blx	r3
   1029e:	0007      	movs	r7, r0
   102a0:	2808      	cmp	r0, #8
   102a2:	d000      	beq.n	102a6 <LORAWAN_Reset+0xf2>
   102a4:	e085      	b.n	103b2 <LORAWAN_Reset+0x1fe>
   102a6:	4e4d      	ldr	r6, [pc, #308]	; (103dc <LORAWAN_Reset+0x228>)
   102a8:	4a4d      	ldr	r2, [pc, #308]	; (103e0 <LORAWAN_Reset+0x22c>)
   102aa:	0029      	movs	r1, r5
   102ac:	47b0      	blx	r6
   102ae:	4a4d      	ldr	r2, [pc, #308]	; (103e4 <LORAWAN_Reset+0x230>)
   102b0:	0029      	movs	r1, r5
   102b2:	200e      	movs	r0, #14
   102b4:	47b0      	blx	r6
   102b6:	0023      	movs	r3, r4
   102b8:	4a4b      	ldr	r2, [pc, #300]	; (103e8 <LORAWAN_Reset+0x234>)
   102ba:	33b4      	adds	r3, #180	; 0xb4
   102bc:	0029      	movs	r1, r5
   102be:	2006      	movs	r0, #6
   102c0:	701d      	strb	r5, [r3, #0]
   102c2:	47b0      	blx	r6
   102c4:	4b49      	ldr	r3, [pc, #292]	; (103ec <LORAWAN_Reset+0x238>)
   102c6:	4798      	blx	r3
   102c8:	466b      	mov	r3, sp
   102ca:	791b      	ldrb	r3, [r3, #4]
   102cc:	34ca      	adds	r4, #202	; 0xca
   102ce:	7023      	strb	r3, [r4, #0]
   102d0:	0029      	movs	r1, r5
   102d2:	4b47      	ldr	r3, [pc, #284]	; (103f0 <LORAWAN_Reset+0x23c>)
   102d4:	0028      	movs	r0, r5
   102d6:	4798      	blx	r3
   102d8:	2210      	movs	r2, #16
   102da:	4b42      	ldr	r3, [pc, #264]	; (103e4 <LORAWAN_Reset+0x230>)
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	4213      	tst	r3, r2
   102e0:	d006      	beq.n	102f0 <LORAWAN_Reset+0x13c>
   102e2:	ab02      	add	r3, sp, #8
   102e4:	1d99      	adds	r1, r3, #6
   102e6:	2301      	movs	r3, #1
   102e8:	0038      	movs	r0, r7
   102ea:	700b      	strb	r3, [r1, #0]
   102ec:	4b36      	ldr	r3, [pc, #216]	; (103c8 <LORAWAN_Reset+0x214>)
   102ee:	4798      	blx	r3
   102f0:	4b40      	ldr	r3, [pc, #256]	; (103f4 <LORAWAN_Reset+0x240>)
   102f2:	4941      	ldr	r1, [pc, #260]	; (103f8 <LORAWAN_Reset+0x244>)
   102f4:	201e      	movs	r0, #30
   102f6:	4798      	blx	r3
   102f8:	4c2f      	ldr	r4, [pc, #188]	; (103b8 <LORAWAN_Reset+0x204>)
   102fa:	0023      	movs	r3, r4
   102fc:	33e4      	adds	r3, #228	; 0xe4
   102fe:	781b      	ldrb	r3, [r3, #0]
   10300:	075b      	lsls	r3, r3, #29
   10302:	d507      	bpl.n	10314 <LORAWAN_Reset+0x160>
   10304:	2100      	movs	r1, #0
   10306:	aa04      	add	r2, sp, #16
   10308:	2030      	movs	r0, #48	; 0x30
   1030a:	47b0      	blx	r6
   1030c:	a904      	add	r1, sp, #16
   1030e:	2027      	movs	r0, #39	; 0x27
   10310:	4b3a      	ldr	r3, [pc, #232]	; (103fc <LORAWAN_Reset+0x248>)
   10312:	4798      	blx	r3
   10314:	4a3a      	ldr	r2, [pc, #232]	; (10400 <LORAWAN_Reset+0x24c>)
   10316:	2100      	movs	r1, #0
   10318:	2009      	movs	r0, #9
   1031a:	47b0      	blx	r6
   1031c:	4a39      	ldr	r2, [pc, #228]	; (10404 <LORAWAN_Reset+0x250>)
   1031e:	2100      	movs	r1, #0
   10320:	200a      	movs	r0, #10
   10322:	47b0      	blx	r6
   10324:	4a38      	ldr	r2, [pc, #224]	; (10408 <LORAWAN_Reset+0x254>)
   10326:	2100      	movs	r1, #0
   10328:	2034      	movs	r0, #52	; 0x34
   1032a:	47b0      	blx	r6
   1032c:	ad04      	add	r5, sp, #16
   1032e:	4a37      	ldr	r2, [pc, #220]	; (1040c <LORAWAN_Reset+0x258>)
   10330:	2100      	movs	r1, #0
   10332:	2035      	movs	r0, #53	; 0x35
   10334:	47b0      	blx	r6
   10336:	002a      	movs	r2, r5
   10338:	2100      	movs	r1, #0
   1033a:	2014      	movs	r0, #20
   1033c:	47b0      	blx	r6
   1033e:	0023      	movs	r3, r4
   10340:	782a      	ldrb	r2, [r5, #0]
   10342:	33be      	adds	r3, #190	; 0xbe
   10344:	701a      	strb	r2, [r3, #0]
   10346:	0023      	movs	r3, r4
   10348:	786a      	ldrb	r2, [r5, #1]
   1034a:	33bf      	adds	r3, #191	; 0xbf
   1034c:	701a      	strb	r2, [r3, #0]
   1034e:	0023      	movs	r3, r4
   10350:	2500      	movs	r5, #0
   10352:	33aa      	adds	r3, #170	; 0xaa
   10354:	801d      	strh	r5, [r3, #0]
   10356:	2245      	movs	r2, #69	; 0x45
   10358:	0029      	movs	r1, r5
   1035a:	0020      	movs	r0, r4
   1035c:	4b1b      	ldr	r3, [pc, #108]	; (103cc <LORAWAN_Reset+0x218>)
   1035e:	4798      	blx	r3
   10360:	0023      	movs	r3, r4
   10362:	22fa      	movs	r2, #250	; 0xfa
   10364:	339c      	adds	r3, #156	; 0x9c
   10366:	0092      	lsls	r2, r2, #2
   10368:	801a      	strh	r2, [r3, #0]
   1036a:	0022      	movs	r2, r4
   1036c:	23fa      	movs	r3, #250	; 0xfa
   1036e:	329e      	adds	r2, #158	; 0x9e
   10370:	00db      	lsls	r3, r3, #3
   10372:	8013      	strh	r3, [r2, #0]
   10374:	0022      	movs	r2, r4
   10376:	4926      	ldr	r1, [pc, #152]	; (10410 <LORAWAN_Reset+0x25c>)
   10378:	32a0      	adds	r2, #160	; 0xa0
   1037a:	8011      	strh	r1, [r2, #0]
   1037c:	0022      	movs	r2, r4
   1037e:	4925      	ldr	r1, [pc, #148]	; (10414 <LORAWAN_Reset+0x260>)
   10380:	32a2      	adds	r2, #162	; 0xa2
   10382:	8011      	strh	r1, [r2, #0]
   10384:	0022      	movs	r2, r4
   10386:	32a6      	adds	r2, #166	; 0xa6
   10388:	8013      	strh	r3, [r2, #0]
   1038a:	0023      	movs	r3, r4
   1038c:	2220      	movs	r2, #32
   1038e:	33a9      	adds	r3, #169	; 0xa9
   10390:	701a      	strb	r2, [r3, #0]
   10392:	0023      	movs	r3, r4
   10394:	1892      	adds	r2, r2, r2
   10396:	33a8      	adds	r3, #168	; 0xa8
   10398:	701a      	strb	r2, [r3, #0]
   1039a:	2380      	movs	r3, #128	; 0x80
   1039c:	34a4      	adds	r4, #164	; 0xa4
   1039e:	01db      	lsls	r3, r3, #7
   103a0:	8023      	strh	r3, [r4, #0]
   103a2:	0028      	movs	r0, r5
   103a4:	4b1c      	ldr	r3, [pc, #112]	; (10418 <LORAWAN_Reset+0x264>)
   103a6:	4798      	blx	r3
   103a8:	4b1c      	ldr	r3, [pc, #112]	; (1041c <LORAWAN_Reset+0x268>)
   103aa:	4798      	blx	r3
   103ac:	0038      	movs	r0, r7
   103ae:	b007      	add	sp, #28
   103b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103b2:	270a      	movs	r7, #10
   103b4:	e7fa      	b.n	103ac <LORAWAN_Reset+0x1f8>
   103b6:	46c0      	nop			; (mov r8, r8)
   103b8:	20001ce4 	.word	0x20001ce4
   103bc:	0000ca15 	.word	0x0000ca15
   103c0:	0000e37d 	.word	0x0000e37d
   103c4:	00008bf5 	.word	0x00008bf5
   103c8:	00010d99 	.word	0x00010d99
   103cc:	0001594d 	.word	0x0001594d
   103d0:	20001db8 	.word	0x20001db8
   103d4:	20001e07 	.word	0x20001e07
   103d8:	00008b15 	.word	0x00008b15
   103dc:	00008a85 	.word	0x00008a85
   103e0:	20001d2d 	.word	0x20001d2d
   103e4:	20001dc8 	.word	0x20001dc8
   103e8:	20001da4 	.word	0x20001da4
   103ec:	00010fb5 	.word	0x00010fb5
   103f0:	00008ec5 	.word	0x00008ec5
   103f4:	00010cad 	.word	0x00010cad
   103f8:	20001e0f 	.word	0x20001e0f
   103fc:	0000fd21 	.word	0x0000fd21
   10400:	20001d32 	.word	0x20001d32
   10404:	20001d2e 	.word	0x20001d2e
   10408:	20001d99 	.word	0x20001d99
   1040c:	20001d97 	.word	0x20001d97
   10410:	00001388 	.word	0x00001388
   10414:	00001770 	.word	0x00001770
   10418:	0000d225 	.word	0x0000d225
   1041c:	0001081d 	.word	0x0001081d

00010420 <LORAWAN_ReadyToSleep>:
   10420:	4b08      	ldr	r3, [pc, #32]	; (10444 <LORAWAN_ReadyToSleep+0x24>)
   10422:	001a      	movs	r2, r3
   10424:	32c8      	adds	r2, #200	; 0xc8
   10426:	7812      	ldrb	r2, [r2, #0]
   10428:	2a01      	cmp	r2, #1
   1042a:	d002      	beq.n	10432 <LORAWAN_ReadyToSleep+0x12>
   1042c:	2000      	movs	r0, #0
   1042e:	2a04      	cmp	r2, #4
   10430:	d106      	bne.n	10440 <LORAWAN_ReadyToSleep+0x20>
   10432:	3350      	adds	r3, #80	; 0x50
   10434:	7818      	ldrb	r0, [r3, #0]
   10436:	230e      	movs	r3, #14
   10438:	4018      	ands	r0, r3
   1043a:	4243      	negs	r3, r0
   1043c:	4158      	adcs	r0, r3
   1043e:	b2c0      	uxtb	r0, r0
   10440:	4770      	bx	lr
   10442:	46c0      	nop			; (mov r8, r8)
   10444:	20001ce4 	.word	0x20001ce4

00010448 <AESEncodeLoRa>:
   10448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1044a:	0004      	movs	r4, r0
   1044c:	2210      	movs	r2, #16
   1044e:	4668      	mov	r0, sp
   10450:	4b03      	ldr	r3, [pc, #12]	; (10460 <AESEncodeLoRa+0x18>)
   10452:	4798      	blx	r3
   10454:	4669      	mov	r1, sp
   10456:	0020      	movs	r0, r4
   10458:	4b02      	ldr	r3, [pc, #8]	; (10464 <AESEncodeLoRa+0x1c>)
   1045a:	4798      	blx	r3
   1045c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1045e:	46c0      	nop			; (mov r8, r8)
   10460:	000158c9 	.word	0x000158c9
   10464:	00008c41 	.word	0x00008c41

00010468 <FillSubKey.constprop.0>:
   10468:	b530      	push	{r4, r5, lr}
   1046a:	2310      	movs	r3, #16
   1046c:	2400      	movs	r4, #0
   1046e:	3b01      	subs	r3, #1
   10470:	b2db      	uxtb	r3, r3
   10472:	2bff      	cmp	r3, #255	; 0xff
   10474:	d100      	bne.n	10478 <FillSubKey.constprop.0+0x10>
   10476:	bd30      	pop	{r4, r5, pc}
   10478:	18c5      	adds	r5, r0, r3
   1047a:	782a      	ldrb	r2, [r5, #0]
   1047c:	0052      	lsls	r2, r2, #1
   1047e:	4322      	orrs	r2, r4
   10480:	54ca      	strb	r2, [r1, r3]
   10482:	782c      	ldrb	r4, [r5, #0]
   10484:	09e4      	lsrs	r4, r4, #7
   10486:	e7f2      	b.n	1046e <FillSubKey.constprop.0+0x6>

00010488 <AESCmac>:
   10488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1048a:	b09d      	sub	sp, #116	; 0x74
   1048c:	ad18      	add	r5, sp, #96	; 0x60
   1048e:	4c59      	ldr	r4, [pc, #356]	; (105f4 <AESCmac+0x16c>)
   10490:	9001      	str	r0, [sp, #4]
   10492:	9103      	str	r1, [sp, #12]
   10494:	9202      	str	r2, [sp, #8]
   10496:	2100      	movs	r1, #0
   10498:	2210      	movs	r2, #16
   1049a:	0028      	movs	r0, r5
   1049c:	001f      	movs	r7, r3
   1049e:	47a0      	blx	r4
   104a0:	2387      	movs	r3, #135	; 0x87
   104a2:	ae14      	add	r6, sp, #80	; 0x50
   104a4:	2210      	movs	r2, #16
   104a6:	2100      	movs	r1, #0
   104a8:	0030      	movs	r0, r6
   104aa:	73eb      	strb	r3, [r5, #15]
   104ac:	47a0      	blx	r4
   104ae:	9901      	ldr	r1, [sp, #4]
   104b0:	0030      	movs	r0, r6
   104b2:	4b51      	ldr	r3, [pc, #324]	; (105f8 <AESCmac+0x170>)
   104b4:	4798      	blx	r3
   104b6:	7832      	ldrb	r2, [r6, #0]
   104b8:	ac04      	add	r4, sp, #16
   104ba:	4b50      	ldr	r3, [pc, #320]	; (105fc <AESCmac+0x174>)
   104bc:	0021      	movs	r1, r4
   104be:	0030      	movs	r0, r6
   104c0:	2a7f      	cmp	r2, #127	; 0x7f
   104c2:	d83e      	bhi.n	10542 <AESCmac+0xba>
   104c4:	4798      	blx	r3
   104c6:	ab04      	add	r3, sp, #16
   104c8:	781a      	ldrb	r2, [r3, #0]
   104ca:	ac08      	add	r4, sp, #32
   104cc:	4b4b      	ldr	r3, [pc, #300]	; (105fc <AESCmac+0x174>)
   104ce:	0021      	movs	r1, r4
   104d0:	a804      	add	r0, sp, #16
   104d2:	2a7f      	cmp	r2, #127	; 0x7f
   104d4:	d83f      	bhi.n	10556 <AESCmac+0xce>
   104d6:	4798      	blx	r3
   104d8:	0039      	movs	r1, r7
   104da:	310f      	adds	r1, #15
   104dc:	110b      	asrs	r3, r1, #4
   104de:	d04d      	beq.n	1057c <AESCmac+0xf4>
   104e0:	b2db      	uxtb	r3, r3
   104e2:	9300      	str	r3, [sp, #0]
   104e4:	073b      	lsls	r3, r7, #28
   104e6:	d14b      	bne.n	10580 <AESCmac+0xf8>
   104e8:	9b00      	ldr	r3, [sp, #0]
   104ea:	20ff      	movs	r0, #255	; 0xff
   104ec:	1e5a      	subs	r2, r3, #1
   104ee:	0112      	lsls	r2, r2, #4
   104f0:	b2d2      	uxtb	r2, r2
   104f2:	0013      	movs	r3, r2
   104f4:	0100      	lsls	r0, r0, #4
   104f6:	4001      	ands	r1, r0
   104f8:	ad14      	add	r5, sp, #80	; 0x50
   104fa:	1a98      	subs	r0, r3, r2
   104fc:	b2c0      	uxtb	r0, r0
   104fe:	428b      	cmp	r3, r1
   10500:	db33      	blt.n	1056a <AESCmac+0xe2>
   10502:	2210      	movs	r2, #16
   10504:	2100      	movs	r1, #0
   10506:	a80c      	add	r0, sp, #48	; 0x30
   10508:	4b3a      	ldr	r3, [pc, #232]	; (105f4 <AESCmac+0x16c>)
   1050a:	4798      	blx	r3
   1050c:	2400      	movs	r4, #0
   1050e:	9b00      	ldr	r3, [sp, #0]
   10510:	3b01      	subs	r3, #1
   10512:	429c      	cmp	r4, r3
   10514:	db57      	blt.n	105c6 <AESCmac+0x13e>
   10516:	2400      	movs	r4, #0
   10518:	ad10      	add	r5, sp, #64	; 0x40
   1051a:	a80c      	add	r0, sp, #48	; 0x30
   1051c:	a914      	add	r1, sp, #80	; 0x50
   1051e:	5c23      	ldrb	r3, [r4, r0]
   10520:	5c62      	ldrb	r2, [r4, r1]
   10522:	4053      	eors	r3, r2
   10524:	5563      	strb	r3, [r4, r5]
   10526:	3401      	adds	r4, #1
   10528:	2c10      	cmp	r4, #16
   1052a:	d1f8      	bne.n	1051e <AESCmac+0x96>
   1052c:	9901      	ldr	r1, [sp, #4]
   1052e:	0028      	movs	r0, r5
   10530:	4b31      	ldr	r3, [pc, #196]	; (105f8 <AESCmac+0x170>)
   10532:	4798      	blx	r3
   10534:	0022      	movs	r2, r4
   10536:	0029      	movs	r1, r5
   10538:	9803      	ldr	r0, [sp, #12]
   1053a:	4b31      	ldr	r3, [pc, #196]	; (10600 <AESCmac+0x178>)
   1053c:	4798      	blx	r3
   1053e:	b01d      	add	sp, #116	; 0x74
   10540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10542:	4798      	blx	r3
   10544:	2300      	movs	r3, #0
   10546:	5d1a      	ldrb	r2, [r3, r4]
   10548:	5ce9      	ldrb	r1, [r5, r3]
   1054a:	404a      	eors	r2, r1
   1054c:	551a      	strb	r2, [r3, r4]
   1054e:	3301      	adds	r3, #1
   10550:	2b10      	cmp	r3, #16
   10552:	d1f8      	bne.n	10546 <AESCmac+0xbe>
   10554:	e7b7      	b.n	104c6 <AESCmac+0x3e>
   10556:	4798      	blx	r3
   10558:	2300      	movs	r3, #0
   1055a:	5d1a      	ldrb	r2, [r3, r4]
   1055c:	5ce9      	ldrb	r1, [r5, r3]
   1055e:	404a      	eors	r2, r1
   10560:	551a      	strb	r2, [r3, r4]
   10562:	3301      	adds	r3, #1
   10564:	2b10      	cmp	r3, #16
   10566:	d1f8      	bne.n	1055a <AESCmac+0xd2>
   10568:	e7b6      	b.n	104d8 <AESCmac+0x50>
   1056a:	9c02      	ldr	r4, [sp, #8]
   1056c:	ae04      	add	r6, sp, #16
   1056e:	5ce4      	ldrb	r4, [r4, r3]
   10570:	5c36      	ldrb	r6, [r6, r0]
   10572:	3301      	adds	r3, #1
   10574:	4074      	eors	r4, r6
   10576:	542c      	strb	r4, [r5, r0]
   10578:	b2db      	uxtb	r3, r3
   1057a:	e7be      	b.n	104fa <AESCmac+0x72>
   1057c:	2301      	movs	r3, #1
   1057e:	9300      	str	r3, [sp, #0]
   10580:	2300      	movs	r3, #0
   10582:	220f      	movs	r2, #15
   10584:	003e      	movs	r6, r7
   10586:	001c      	movs	r4, r3
   10588:	2080      	movs	r0, #128	; 0x80
   1058a:	4396      	bics	r6, r2
   1058c:	4017      	ands	r7, r2
   1058e:	aa18      	add	r2, sp, #96	; 0x60
   10590:	b2d9      	uxtb	r1, r3
   10592:	428f      	cmp	r7, r1
   10594:	d911      	bls.n	105ba <AESCmac+0x132>
   10596:	9902      	ldr	r1, [sp, #8]
   10598:	1989      	adds	r1, r1, r6
   1059a:	5cc9      	ldrb	r1, [r1, r3]
   1059c:	54d1      	strb	r1, [r2, r3]
   1059e:	3301      	adds	r3, #1
   105a0:	2b10      	cmp	r3, #16
   105a2:	d1f5      	bne.n	10590 <AESCmac+0x108>
   105a4:	2300      	movs	r3, #0
   105a6:	a914      	add	r1, sp, #80	; 0x50
   105a8:	a808      	add	r0, sp, #32
   105aa:	5cea      	ldrb	r2, [r5, r3]
   105ac:	5c1c      	ldrb	r4, [r3, r0]
   105ae:	4062      	eors	r2, r4
   105b0:	545a      	strb	r2, [r3, r1]
   105b2:	3301      	adds	r3, #1
   105b4:	2b10      	cmp	r3, #16
   105b6:	d1f8      	bne.n	105aa <AESCmac+0x122>
   105b8:	e7a3      	b.n	10502 <AESCmac+0x7a>
   105ba:	428f      	cmp	r7, r1
   105bc:	d101      	bne.n	105c2 <AESCmac+0x13a>
   105be:	54d0      	strb	r0, [r2, r3]
   105c0:	e7ed      	b.n	1059e <AESCmac+0x116>
   105c2:	54d4      	strb	r4, [r2, r3]
   105c4:	e7eb      	b.n	1059e <AESCmac+0x116>
   105c6:	2200      	movs	r2, #0
   105c8:	9802      	ldr	r0, [sp, #8]
   105ca:	0123      	lsls	r3, r4, #4
   105cc:	a910      	add	r1, sp, #64	; 0x40
   105ce:	18c0      	adds	r0, r0, r3
   105d0:	ad0c      	add	r5, sp, #48	; 0x30
   105d2:	5c83      	ldrb	r3, [r0, r2]
   105d4:	5d56      	ldrb	r6, [r2, r5]
   105d6:	4073      	eors	r3, r6
   105d8:	5453      	strb	r3, [r2, r1]
   105da:	3201      	adds	r2, #1
   105dc:	2a10      	cmp	r2, #16
   105de:	d1f8      	bne.n	105d2 <AESCmac+0x14a>
   105e0:	4b07      	ldr	r3, [pc, #28]	; (10600 <AESCmac+0x178>)
   105e2:	0028      	movs	r0, r5
   105e4:	4798      	blx	r3
   105e6:	3401      	adds	r4, #1
   105e8:	9901      	ldr	r1, [sp, #4]
   105ea:	0028      	movs	r0, r5
   105ec:	4b02      	ldr	r3, [pc, #8]	; (105f8 <AESCmac+0x170>)
   105ee:	4798      	blx	r3
   105f0:	b2e4      	uxtb	r4, r4
   105f2:	e78c      	b.n	1050e <AESCmac+0x86>
   105f4:	0001594d 	.word	0x0001594d
   105f8:	00010449 	.word	0x00010449
   105fc:	00010469 	.word	0x00010469
   10600:	000158c9 	.word	0x000158c9

00010604 <LorawanClasscUlAckTimerCallback>:
   10604:	2102      	movs	r1, #2
   10606:	4b03      	ldr	r3, [pc, #12]	; (10614 <LorawanClasscUlAckTimerCallback+0x10>)
   10608:	3360      	adds	r3, #96	; 0x60
   1060a:	781a      	ldrb	r2, [r3, #0]
   1060c:	438a      	bics	r2, r1
   1060e:	701a      	strb	r2, [r3, #0]
   10610:	4770      	bx	lr
   10612:	46c0      	nop			; (mov r8, r8)
   10614:	20001ce4 	.word	0x20001ce4

00010618 <LorawanClasscValidateSend>:
   10618:	2390      	movs	r3, #144	; 0x90
   1061a:	b510      	push	{r4, lr}
   1061c:	4c0a      	ldr	r4, [pc, #40]	; (10648 <LorawanClasscValidateSend+0x30>)
   1061e:	005b      	lsls	r3, r3, #1
   10620:	5ce3      	ldrb	r3, [r4, r3]
   10622:	2b00      	cmp	r3, #0
   10624:	d008      	beq.n	10638 <LorawanClasscValidateSend+0x20>
   10626:	220e      	movs	r2, #14
   10628:	3450      	adds	r4, #80	; 0x50
   1062a:	7823      	ldrb	r3, [r4, #0]
   1062c:	2008      	movs	r0, #8
   1062e:	4013      	ands	r3, r2
   10630:	2b02      	cmp	r3, #2
   10632:	d100      	bne.n	10636 <LorawanClasscValidateSend+0x1e>
   10634:	2011      	movs	r0, #17
   10636:	bd10      	pop	{r4, pc}
   10638:	0023      	movs	r3, r4
   1063a:	33f0      	adds	r3, #240	; 0xf0
   1063c:	7818      	ldrb	r0, [r3, #0]
   1063e:	4b03      	ldr	r3, [pc, #12]	; (1064c <LorawanClasscValidateSend+0x34>)
   10640:	4798      	blx	r3
   10642:	2800      	cmp	r0, #0
   10644:	d1ef      	bne.n	10626 <LorawanClasscValidateSend+0xe>
   10646:	e7f5      	b.n	10634 <LorawanClasscValidateSend+0x1c>
   10648:	20001ce4 	.word	0x20001ce4
   1064c:	0000a085 	.word	0x0000a085

00010650 <LorawanClasscPause>:
   10650:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10652:	4c16      	ldr	r4, [pc, #88]	; (106ac <LorawanClasscPause+0x5c>)
   10654:	220e      	movs	r2, #14
   10656:	0023      	movs	r3, r4
   10658:	3350      	adds	r3, #80	; 0x50
   1065a:	781b      	ldrb	r3, [r3, #0]
   1065c:	4013      	ands	r3, r2
   1065e:	2b0a      	cmp	r3, #10
   10660:	d121      	bne.n	106a6 <LorawanClasscPause+0x56>
   10662:	3317      	adds	r3, #23
   10664:	33ff      	adds	r3, #255	; 0xff
   10666:	5ce3      	ldrb	r3, [r4, r3]
   10668:	2b00      	cmp	r3, #0
   1066a:	d00c      	beq.n	10686 <LorawanClasscPause+0x36>
   1066c:	2301      	movs	r3, #1
   1066e:	a801      	add	r0, sp, #4
   10670:	7003      	strb	r3, [r0, #0]
   10672:	4b0f      	ldr	r3, [pc, #60]	; (106b0 <LorawanClasscPause+0x60>)
   10674:	4798      	blx	r3
   10676:	220e      	movs	r2, #14
   10678:	2001      	movs	r0, #1
   1067a:	3450      	adds	r4, #80	; 0x50
   1067c:	7823      	ldrb	r3, [r4, #0]
   1067e:	4240      	negs	r0, r0
   10680:	4393      	bics	r3, r2
   10682:	7023      	strb	r3, [r4, #0]
   10684:	e007      	b.n	10696 <LorawanClasscPause+0x46>
   10686:	0023      	movs	r3, r4
   10688:	33bc      	adds	r3, #188	; 0xbc
   1068a:	7818      	ldrb	r0, [r3, #0]
   1068c:	4d09      	ldr	r5, [pc, #36]	; (106b4 <LorawanClasscPause+0x64>)
   1068e:	47a8      	blx	r5
   10690:	2800      	cmp	r0, #0
   10692:	d001      	beq.n	10698 <LorawanClasscPause+0x48>
   10694:	2000      	movs	r0, #0
   10696:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10698:	0023      	movs	r3, r4
   1069a:	33f0      	adds	r3, #240	; 0xf0
   1069c:	7818      	ldrb	r0, [r3, #0]
   1069e:	47a8      	blx	r5
   106a0:	2800      	cmp	r0, #0
   106a2:	d0e8      	beq.n	10676 <LorawanClasscPause+0x26>
   106a4:	e7f6      	b.n	10694 <LorawanClasscPause+0x44>
   106a6:	2b00      	cmp	r3, #0
   106a8:	d0e5      	beq.n	10676 <LorawanClasscPause+0x26>
   106aa:	e7f3      	b.n	10694 <LorawanClasscPause+0x44>
   106ac:	20001ce4 	.word	0x20001ce4
   106b0:	000120c9 	.word	0x000120c9
   106b4:	0000a085 	.word	0x0000a085

000106b8 <LorawanClasscReceiveWindow1Callback>:
   106b8:	2301      	movs	r3, #1
   106ba:	b507      	push	{r0, r1, r2, lr}
   106bc:	a801      	add	r0, sp, #4
   106be:	7003      	strb	r3, [r0, #0]
   106c0:	4b01      	ldr	r3, [pc, #4]	; (106c8 <LorawanClasscReceiveWindow1Callback+0x10>)
   106c2:	4798      	blx	r3
   106c4:	bd07      	pop	{r0, r1, r2, pc}
   106c6:	46c0      	nop			; (mov r8, r8)
   106c8:	000120c9 	.word	0x000120c9

000106cc <LorawanClasscRxDone>:
   106cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   106ce:	221f      	movs	r2, #31
   106d0:	7803      	ldrb	r3, [r0, #0]
   106d2:	4c13      	ldr	r4, [pc, #76]	; (10720 <LorawanClasscRxDone+0x54>)
   106d4:	4393      	bics	r3, r2
   106d6:	2ba0      	cmp	r3, #160	; 0xa0
   106d8:	d10c      	bne.n	106f4 <LorawanClasscRxDone+0x28>
   106da:	0025      	movs	r5, r4
   106dc:	35f0      	adds	r5, #240	; 0xf0
   106de:	7828      	ldrb	r0, [r5, #0]
   106e0:	4b10      	ldr	r3, [pc, #64]	; (10724 <LorawanClasscRxDone+0x58>)
   106e2:	4798      	blx	r3
   106e4:	1e02      	subs	r2, r0, #0
   106e6:	d014      	beq.n	10712 <LorawanClasscRxDone+0x46>
   106e8:	0022      	movs	r2, r4
   106ea:	2102      	movs	r1, #2
   106ec:	3260      	adds	r2, #96	; 0x60
   106ee:	7813      	ldrb	r3, [r2, #0]
   106f0:	438b      	bics	r3, r1
   106f2:	7013      	strb	r3, [r2, #0]
   106f4:	3450      	adds	r4, #80	; 0x50
   106f6:	7823      	ldrb	r3, [r4, #0]
   106f8:	220e      	movs	r2, #14
   106fa:	0019      	movs	r1, r3
   106fc:	4011      	ands	r1, r2
   106fe:	2906      	cmp	r1, #6
   10700:	d103      	bne.n	1070a <LorawanClasscRxDone+0x3e>
   10702:	4393      	bics	r3, r2
   10704:	3a04      	subs	r2, #4
   10706:	4313      	orrs	r3, r2
   10708:	7023      	strb	r3, [r4, #0]
   1070a:	2000      	movs	r0, #0
   1070c:	4b06      	ldr	r3, [pc, #24]	; (10728 <LorawanClasscRxDone+0x5c>)
   1070e:	4798      	blx	r3
   10710:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10712:	7828      	ldrb	r0, [r5, #0]
   10714:	4b05      	ldr	r3, [pc, #20]	; (1072c <LorawanClasscRxDone+0x60>)
   10716:	9200      	str	r2, [sp, #0]
   10718:	4905      	ldr	r1, [pc, #20]	; (10730 <LorawanClasscRxDone+0x64>)
   1071a:	4d06      	ldr	r5, [pc, #24]	; (10734 <LorawanClasscRxDone+0x68>)
   1071c:	47a8      	blx	r5
   1071e:	e7e9      	b.n	106f4 <LorawanClasscRxDone+0x28>
   10720:	20001ce4 	.word	0x20001ce4
   10724:	0000a085 	.word	0x0000a085
   10728:	0000ecfd 	.word	0x0000ecfd
   1072c:	00010605 	.word	0x00010605
   10730:	001e8480 	.word	0x001e8480
   10734:	00009eed 	.word	0x00009eed

00010738 <LorawanClasscTxDone>:
   10738:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1073a:	4c1b      	ldr	r4, [pc, #108]	; (107a8 <LorawanClasscTxDone+0x70>)
   1073c:	0023      	movs	r3, r4
   1073e:	339e      	adds	r3, #158	; 0x9e
   10740:	881d      	ldrh	r5, [r3, #0]
   10742:	0023      	movs	r3, r4
   10744:	3360      	adds	r3, #96	; 0x60
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	07db      	lsls	r3, r3, #31
   1074a:	d525      	bpl.n	10798 <LorawanClasscTxDone+0x60>
   1074c:	0023      	movs	r3, r4
   1074e:	0022      	movs	r2, r4
   10750:	33ae      	adds	r3, #174	; 0xae
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	32b0      	adds	r2, #176	; 0xb0
   10756:	3301      	adds	r3, #1
   10758:	7812      	ldrb	r2, [r2, #0]
   1075a:	4293      	cmp	r3, r2
   1075c:	db07      	blt.n	1076e <LorawanClasscTxDone+0x36>
   1075e:	2395      	movs	r3, #149	; 0x95
   10760:	005b      	lsls	r3, r3, #1
   10762:	5ce3      	ldrb	r3, [r4, r3]
   10764:	2b00      	cmp	r3, #0
   10766:	d002      	beq.n	1076e <LorawanClasscTxDone+0x36>
   10768:	23fa      	movs	r3, #250	; 0xfa
   1076a:	00db      	lsls	r3, r3, #3
   1076c:	18ed      	adds	r5, r5, r3
   1076e:	0023      	movs	r3, r4
   10770:	33f0      	adds	r3, #240	; 0xf0
   10772:	1945      	adds	r5, r0, r5
   10774:	7818      	ldrb	r0, [r3, #0]
   10776:	4b0d      	ldr	r3, [pc, #52]	; (107ac <LorawanClasscTxDone+0x74>)
   10778:	4798      	blx	r3
   1077a:	34bc      	adds	r4, #188	; 0xbc
   1077c:	21fa      	movs	r1, #250	; 0xfa
   1077e:	7820      	ldrb	r0, [r4, #0]
   10780:	2400      	movs	r4, #0
   10782:	0089      	lsls	r1, r1, #2
   10784:	4369      	muls	r1, r5
   10786:	0022      	movs	r2, r4
   10788:	4d09      	ldr	r5, [pc, #36]	; (107b0 <LorawanClasscTxDone+0x78>)
   1078a:	9400      	str	r4, [sp, #0]
   1078c:	4b09      	ldr	r3, [pc, #36]	; (107b4 <LorawanClasscTxDone+0x7c>)
   1078e:	47a8      	blx	r5
   10790:	0020      	movs	r0, r4
   10792:	4b09      	ldr	r3, [pc, #36]	; (107b8 <LorawanClasscTxDone+0x80>)
   10794:	4798      	blx	r3
   10796:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10798:	0023      	movs	r3, r4
   1079a:	0022      	movs	r2, r4
   1079c:	33ad      	adds	r3, #173	; 0xad
   1079e:	781b      	ldrb	r3, [r3, #0]
   107a0:	32af      	adds	r2, #175	; 0xaf
   107a2:	3301      	adds	r3, #1
   107a4:	e7d8      	b.n	10758 <LorawanClasscTxDone+0x20>
   107a6:	46c0      	nop			; (mov r8, r8)
   107a8:	20001ce4 	.word	0x20001ce4
   107ac:	0000a1f1 	.word	0x0000a1f1
   107b0:	00009eed 	.word	0x00009eed
   107b4:	0000ebcd 	.word	0x0000ebcd
   107b8:	0000ecfd 	.word	0x0000ecfd

000107bc <LorawanClasscRxTimeout>:
   107bc:	b510      	push	{r4, lr}
   107be:	4b08      	ldr	r3, [pc, #32]	; (107e0 <LorawanClasscRxTimeout+0x24>)
   107c0:	210e      	movs	r1, #14
   107c2:	3350      	adds	r3, #80	; 0x50
   107c4:	781a      	ldrb	r2, [r3, #0]
   107c6:	0010      	movs	r0, r2
   107c8:	4008      	ands	r0, r1
   107ca:	2806      	cmp	r0, #6
   107cc:	d106      	bne.n	107dc <LorawanClasscRxTimeout+0x20>
   107ce:	438a      	bics	r2, r1
   107d0:	3904      	subs	r1, #4
   107d2:	430a      	orrs	r2, r1
   107d4:	701a      	strb	r2, [r3, #0]
   107d6:	2000      	movs	r0, #0
   107d8:	4b02      	ldr	r3, [pc, #8]	; (107e4 <LorawanClasscRxTimeout+0x28>)
   107da:	4798      	blx	r3
   107dc:	bd10      	pop	{r4, pc}
   107de:	46c0      	nop			; (mov r8, r8)
   107e0:	20001ce4 	.word	0x20001ce4
   107e4:	0000ecfd 	.word	0x0000ecfd

000107e8 <LorawanClasscNotifyAppOnReceive>:
   107e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107ea:	001f      	movs	r7, r3
   107ec:	4b08      	ldr	r3, [pc, #32]	; (10810 <LorawanClasscNotifyAppOnReceive+0x28>)
   107ee:	0004      	movs	r4, r0
   107f0:	33f0      	adds	r3, #240	; 0xf0
   107f2:	7818      	ldrb	r0, [r3, #0]
   107f4:	4b07      	ldr	r3, [pc, #28]	; (10814 <LorawanClasscNotifyAppOnReceive+0x2c>)
   107f6:	000d      	movs	r5, r1
   107f8:	0016      	movs	r6, r2
   107fa:	4798      	blx	r3
   107fc:	2800      	cmp	r0, #0
   107fe:	d105      	bne.n	1080c <LorawanClasscNotifyAppOnReceive+0x24>
   10800:	0020      	movs	r0, r4
   10802:	003b      	movs	r3, r7
   10804:	0032      	movs	r2, r6
   10806:	0029      	movs	r1, r5
   10808:	4c03      	ldr	r4, [pc, #12]	; (10818 <LorawanClasscNotifyAppOnReceive+0x30>)
   1080a:	47a0      	blx	r4
   1080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1080e:	46c0      	nop			; (mov r8, r8)
   10810:	20001ce4 	.word	0x20001ce4
   10814:	0000a085 	.word	0x0000a085
   10818:	0000e201 	.word	0x0000e201

0001081c <LorawanMcastInit>:
   1081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1081e:	4c15      	ldr	r4, [pc, #84]	; (10874 <LorawanMcastInit+0x58>)
   10820:	2201      	movs	r2, #1
   10822:	0023      	movs	r3, r4
   10824:	33f4      	adds	r3, #244	; 0xf4
   10826:	701a      	strb	r2, [r3, #0]
   10828:	0023      	movs	r3, r4
   1082a:	2201      	movs	r2, #1
   1082c:	2710      	movs	r7, #16
   1082e:	33f8      	adds	r3, #248	; 0xf8
   10830:	4252      	negs	r2, r2
   10832:	601a      	str	r2, [r3, #0]
   10834:	4e10      	ldr	r6, [pc, #64]	; (10878 <LorawanMcastInit+0x5c>)
   10836:	003a      	movs	r2, r7
   10838:	2100      	movs	r1, #0
   1083a:	4810      	ldr	r0, [pc, #64]	; (1087c <LorawanMcastInit+0x60>)
   1083c:	47b0      	blx	r6
   1083e:	4d10      	ldr	r5, [pc, #64]	; (10880 <LorawanMcastInit+0x64>)
   10840:	003a      	movs	r2, r7
   10842:	0028      	movs	r0, r5
   10844:	2100      	movs	r1, #0
   10846:	47b0      	blx	r6
   10848:	0022      	movs	r2, r4
   1084a:	2102      	movs	r1, #2
   1084c:	3250      	adds	r2, #80	; 0x50
   1084e:	7893      	ldrb	r3, [r2, #2]
   10850:	2000      	movs	r0, #0
   10852:	438b      	bics	r3, r1
   10854:	7093      	strb	r3, [r2, #2]
   10856:	223f      	movs	r2, #63	; 0x3f
   10858:	34aa      	adds	r4, #170	; 0xaa
   1085a:	7823      	ldrb	r3, [r4, #0]
   1085c:	3103      	adds	r1, #3
   1085e:	4013      	ands	r3, r2
   10860:	7023      	strb	r3, [r4, #0]
   10862:	7863      	ldrb	r3, [r4, #1]
   10864:	3a3e      	subs	r2, #62	; 0x3e
   10866:	4393      	bics	r3, r2
   10868:	7063      	strb	r3, [r4, #1]
   1086a:	4b06      	ldr	r3, [pc, #24]	; (10884 <LorawanMcastInit+0x68>)
   1086c:	6228      	str	r0, [r5, #32]
   1086e:	4798      	blx	r3
   10870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10872:	46c0      	nop			; (mov r8, r8)
   10874:	20001ce4 	.word	0x20001ce4
   10878:	0001594d 	.word	0x0001594d
   1087c:	20001df0 	.word	0x20001df0
   10880:	20001de0 	.word	0x20001de0
   10884:	00008ec5 	.word	0x00008ec5

00010888 <LorawanMcastEnable>:
   10888:	b510      	push	{r4, lr}
   1088a:	4b12      	ldr	r3, [pc, #72]	; (108d4 <LorawanMcastEnable+0x4c>)
   1088c:	2800      	cmp	r0, #0
   1088e:	d019      	beq.n	108c4 <LorawanMcastEnable+0x3c>
   10890:	001a      	movs	r2, r3
   10892:	21e0      	movs	r1, #224	; 0xe0
   10894:	32aa      	adds	r2, #170	; 0xaa
   10896:	8812      	ldrh	r2, [r2, #0]
   10898:	0049      	lsls	r1, r1, #1
   1089a:	400a      	ands	r2, r1
   1089c:	200a      	movs	r0, #10
   1089e:	428a      	cmp	r2, r1
   108a0:	d10f      	bne.n	108c2 <LorawanMcastEnable+0x3a>
   108a2:	001a      	movs	r2, r3
   108a4:	32c8      	adds	r2, #200	; 0xc8
   108a6:	7811      	ldrb	r1, [r2, #0]
   108a8:	2206      	movs	r2, #6
   108aa:	4211      	tst	r1, r2
   108ac:	d009      	beq.n	108c2 <LorawanMcastEnable+0x3a>
   108ae:	3350      	adds	r3, #80	; 0x50
   108b0:	7899      	ldrb	r1, [r3, #2]
   108b2:	3a04      	subs	r2, #4
   108b4:	430a      	orrs	r2, r1
   108b6:	210b      	movs	r1, #11
   108b8:	709a      	strb	r2, [r3, #2]
   108ba:	3809      	subs	r0, #9
   108bc:	4b06      	ldr	r3, [pc, #24]	; (108d8 <LorawanMcastEnable+0x50>)
   108be:	4798      	blx	r3
   108c0:	2008      	movs	r0, #8
   108c2:	bd10      	pop	{r4, pc}
   108c4:	2102      	movs	r1, #2
   108c6:	3350      	adds	r3, #80	; 0x50
   108c8:	789a      	ldrb	r2, [r3, #2]
   108ca:	2001      	movs	r0, #1
   108cc:	438a      	bics	r2, r1
   108ce:	709a      	strb	r2, [r3, #2]
   108d0:	3109      	adds	r1, #9
   108d2:	e7f3      	b.n	108bc <LorawanMcastEnable+0x34>
   108d4:	20001ce4 	.word	0x20001ce4
   108d8:	00008ec5 	.word	0x00008ec5

000108dc <LorawanMcastValidateHdr>:
   108dc:	0003      	movs	r3, r0
   108de:	b570      	push	{r4, r5, r6, lr}
   108e0:	7845      	ldrb	r5, [r0, #1]
   108e2:	7880      	ldrb	r0, [r0, #2]
   108e4:	4c11      	ldr	r4, [pc, #68]	; (1092c <LorawanMcastValidateHdr+0x50>)
   108e6:	0200      	lsls	r0, r0, #8
   108e8:	4328      	orrs	r0, r5
   108ea:	78dd      	ldrb	r5, [r3, #3]
   108ec:	042d      	lsls	r5, r5, #16
   108ee:	4328      	orrs	r0, r5
   108f0:	791d      	ldrb	r5, [r3, #4]
   108f2:	062d      	lsls	r5, r5, #24
   108f4:	4305      	orrs	r5, r0
   108f6:	0020      	movs	r0, r4
   108f8:	30f8      	adds	r0, #248	; 0xf8
   108fa:	6806      	ldr	r6, [r0, #0]
   108fc:	200a      	movs	r0, #10
   108fe:	42b5      	cmp	r5, r6
   10900:	d112      	bne.n	10928 <LorawanMcastValidateHdr+0x4c>
   10902:	0025      	movs	r5, r4
   10904:	35c8      	adds	r5, #200	; 0xc8
   10906:	782e      	ldrb	r6, [r5, #0]
   10908:	2506      	movs	r5, #6
   1090a:	422e      	tst	r6, r5
   1090c:	d00c      	beq.n	10928 <LorawanMcastValidateHdr+0x4c>
   1090e:	3452      	adds	r4, #82	; 0x52
   10910:	7824      	ldrb	r4, [r4, #0]
   10912:	07a4      	lsls	r4, r4, #30
   10914:	d508      	bpl.n	10928 <LorawanMcastValidateHdr+0x4c>
   10916:	2a00      	cmp	r2, #0
   10918:	d006      	beq.n	10928 <LorawanMcastValidateHdr+0x4c>
   1091a:	795a      	ldrb	r2, [r3, #5]
   1091c:	236f      	movs	r3, #111	; 0x6f
   1091e:	421a      	tst	r2, r3
   10920:	d102      	bne.n	10928 <LorawanMcastValidateHdr+0x4c>
   10922:	2903      	cmp	r1, #3
   10924:	d100      	bne.n	10928 <LorawanMcastValidateHdr+0x4c>
   10926:	3802      	subs	r0, #2
   10928:	bd70      	pop	{r4, r5, r6, pc}
   1092a:	46c0      	nop			; (mov r8, r8)
   1092c:	20001ce4 	.word	0x20001ce4

00010930 <LorawanMcastProcessPkt>:
   10930:	b5f0      	push	{r4, r5, r6, r7, lr}
   10932:	0016      	movs	r6, r2
   10934:	b087      	sub	sp, #28
   10936:	9005      	str	r0, [sp, #20]
   10938:	79f3      	ldrb	r3, [r6, #7]
   1093a:	7992      	ldrb	r2, [r2, #6]
   1093c:	4c2f      	ldr	r4, [pc, #188]	; (109fc <LorawanMcastProcessPkt+0xcc>)
   1093e:	021b      	lsls	r3, r3, #8
   10940:	4313      	orrs	r3, r2
   10942:	0022      	movs	r2, r4
   10944:	32fe      	adds	r2, #254	; 0xfe
   10946:	000d      	movs	r5, r1
   10948:	8bd1      	ldrh	r1, [r2, #30]
   1094a:	270a      	movs	r7, #10
   1094c:	4299      	cmp	r1, r3
   1094e:	d83d      	bhi.n	109cc <LorawanMcastProcessPkt+0x9c>
   10950:	83d3      	strh	r3, [r2, #30]
   10952:	2105      	movs	r1, #5
   10954:	4b2a      	ldr	r3, [pc, #168]	; (10a00 <LorawanMcastProcessPkt+0xd0>)
   10956:	2000      	movs	r0, #0
   10958:	4798      	blx	r3
   1095a:	0022      	movs	r2, r4
   1095c:	32f8      	adds	r2, #248	; 0xf8
   1095e:	6812      	ldr	r2, [r2, #0]
   10960:	0023      	movs	r3, r4
   10962:	9203      	str	r2, [sp, #12]
   10964:	4a27      	ldr	r2, [pc, #156]	; (10a04 <LorawanMcastProcessPkt+0xd4>)
   10966:	0029      	movs	r1, r5
   10968:	9202      	str	r2, [sp, #8]
   1096a:	2219      	movs	r2, #25
   1096c:	9201      	str	r2, [sp, #4]
   1096e:	4a26      	ldr	r2, [pc, #152]	; (10a08 <LorawanMcastProcessPkt+0xd8>)
   10970:	9805      	ldr	r0, [sp, #20]
   10972:	9200      	str	r2, [sp, #0]
   10974:	33fc      	adds	r3, #252	; 0xfc
   10976:	390d      	subs	r1, #13
   10978:	b2c9      	uxtb	r1, r1
   1097a:	6a1b      	ldr	r3, [r3, #32]
   1097c:	2201      	movs	r2, #1
   1097e:	4f23      	ldr	r7, [pc, #140]	; (10a0c <LorawanMcastProcessPkt+0xdc>)
   10980:	3009      	adds	r0, #9
   10982:	47b8      	blx	r7
   10984:	4922      	ldr	r1, [pc, #136]	; (10a10 <LorawanMcastProcessPkt+0xe0>)
   10986:	2708      	movs	r7, #8
   10988:	784a      	ldrb	r2, [r1, #1]
   1098a:	780b      	ldrb	r3, [r1, #0]
   1098c:	0212      	lsls	r2, r2, #8
   1098e:	431a      	orrs	r2, r3
   10990:	788b      	ldrb	r3, [r1, #2]
   10992:	041b      	lsls	r3, r3, #16
   10994:	431a      	orrs	r2, r3
   10996:	78cb      	ldrb	r3, [r1, #3]
   10998:	061b      	lsls	r3, r3, #24
   1099a:	4313      	orrs	r3, r2
   1099c:	d016      	beq.n	109cc <LorawanMcastProcessPkt+0x9c>
   1099e:	2220      	movs	r2, #32
   109a0:	3460      	adds	r4, #96	; 0x60
   109a2:	7823      	ldrb	r3, [r4, #0]
   109a4:	9905      	ldr	r1, [sp, #20]
   109a6:	4393      	bics	r3, r2
   109a8:	7023      	strb	r3, [r4, #0]
   109aa:	78b3      	ldrb	r3, [r6, #2]
   109ac:	002a      	movs	r2, r5
   109ae:	40bb      	lsls	r3, r7
   109b0:	7870      	ldrb	r0, [r6, #1]
   109b2:	3a0c      	subs	r2, #12
   109b4:	4303      	orrs	r3, r0
   109b6:	78f0      	ldrb	r0, [r6, #3]
   109b8:	b2d2      	uxtb	r2, r2
   109ba:	0400      	lsls	r0, r0, #16
   109bc:	4303      	orrs	r3, r0
   109be:	7930      	ldrb	r0, [r6, #4]
   109c0:	19c9      	adds	r1, r1, r7
   109c2:	0600      	lsls	r0, r0, #24
   109c4:	4318      	orrs	r0, r3
   109c6:	4c13      	ldr	r4, [pc, #76]	; (10a14 <LorawanMcastProcessPkt+0xe4>)
   109c8:	003b      	movs	r3, r7
   109ca:	47a0      	blx	r4
   109cc:	4a0b      	ldr	r2, [pc, #44]	; (109fc <LorawanMcastProcessPkt+0xcc>)
   109ce:	200e      	movs	r0, #14
   109d0:	0011      	movs	r1, r2
   109d2:	3150      	adds	r1, #80	; 0x50
   109d4:	780b      	ldrb	r3, [r1, #0]
   109d6:	001c      	movs	r4, r3
   109d8:	4004      	ands	r4, r0
   109da:	2c06      	cmp	r4, #6
   109dc:	d107      	bne.n	109ee <LorawanMcastProcessPkt+0xbe>
   109de:	32c8      	adds	r2, #200	; 0xc8
   109e0:	7812      	ldrb	r2, [r2, #0]
   109e2:	2a04      	cmp	r2, #4
   109e4:	d103      	bne.n	109ee <LorawanMcastProcessPkt+0xbe>
   109e6:	4383      	bics	r3, r0
   109e8:	3206      	adds	r2, #6
   109ea:	4313      	orrs	r3, r2
   109ec:	700b      	strb	r3, [r1, #0]
   109ee:	2000      	movs	r0, #0
   109f0:	4b09      	ldr	r3, [pc, #36]	; (10a18 <LorawanMcastProcessPkt+0xe8>)
   109f2:	4798      	blx	r3
   109f4:	0038      	movs	r0, r7
   109f6:	b007      	add	sp, #28
   109f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109fa:	46c0      	nop			; (mov r8, r8)
   109fc:	20001ce4 	.word	0x20001ce4
   10a00:	00008ec5 	.word	0x00008ec5
   10a04:	20001f2c 	.word	0x20001f2c
   10a08:	20001df0 	.word	0x20001df0
   10a0c:	0000ddfd 	.word	0x0000ddfd
   10a10:	20001f24 	.word	0x20001f24
   10a14:	0000e201 	.word	0x0000e201
   10a18:	0000ecfd 	.word	0x0000ecfd

00010a1c <Lorawan_Pds_fid1_CB>:
   10a1c:	4b04      	ldr	r3, [pc, #16]	; (10a30 <Lorawan_Pds_fid1_CB+0x14>)
   10a1e:	0019      	movs	r1, r3
   10a20:	31fc      	adds	r1, #252	; 0xfc
   10a22:	6a0a      	ldr	r2, [r1, #32]
   10a24:	3201      	adds	r2, #1
   10a26:	620a      	str	r2, [r1, #32]
   10a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10a2a:	3201      	adds	r2, #1
   10a2c:	655a      	str	r2, [r3, #84]	; 0x54
   10a2e:	4770      	bx	lr
   10a30:	20001ce4 	.word	0x20001ce4

00010a34 <Lorawan_Pds_fid2_CB>:
   10a34:	2171      	movs	r1, #113	; 0x71
   10a36:	4b06      	ldr	r3, [pc, #24]	; (10a50 <Lorawan_Pds_fid2_CB+0x1c>)
   10a38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10a3a:	3350      	adds	r3, #80	; 0x50
   10a3c:	3201      	adds	r2, #1
   10a3e:	609a      	str	r2, [r3, #8]
   10a40:	781a      	ldrb	r2, [r3, #0]
   10a42:	400a      	ands	r2, r1
   10a44:	701a      	strb	r2, [r3, #0]
   10a46:	785a      	ldrb	r2, [r3, #1]
   10a48:	3970      	subs	r1, #112	; 0x70
   10a4a:	438a      	bics	r2, r1
   10a4c:	705a      	strb	r2, [r3, #1]
   10a4e:	4770      	bx	lr
   10a50:	20001ce4 	.word	0x20001ce4

00010a54 <LORAWAN_TxHandler>:
   10a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a56:	b087      	sub	sp, #28
   10a58:	466b      	mov	r3, sp
   10a5a:	2501      	movs	r5, #1
   10a5c:	4c30      	ldr	r4, [pc, #192]	; (10b20 <LORAWAN_TxHandler+0xcc>)
   10a5e:	701d      	strb	r5, [r3, #0]
   10a60:	0023      	movs	r3, r4
   10a62:	466a      	mov	r2, sp
   10a64:	33b5      	adds	r3, #181	; 0xb5
   10a66:	781b      	ldrb	r3, [r3, #0]
   10a68:	4669      	mov	r1, sp
   10a6a:	7053      	strb	r3, [r2, #1]
   10a6c:	0023      	movs	r3, r4
   10a6e:	33b3      	adds	r3, #179	; 0xb3
   10a70:	781b      	ldrb	r3, [r3, #0]
   10a72:	202d      	movs	r0, #45	; 0x2d
   10a74:	7093      	strb	r3, [r2, #2]
   10a76:	aa03      	add	r2, sp, #12
   10a78:	4b2a      	ldr	r3, [pc, #168]	; (10b24 <LORAWAN_TxHandler+0xd0>)
   10a7a:	4798      	blx	r3
   10a7c:	2808      	cmp	r0, #8
   10a7e:	d004      	beq.n	10a8a <LORAWAN_TxHandler+0x36>
   10a80:	4b29      	ldr	r3, [pc, #164]	; (10b28 <LORAWAN_TxHandler+0xd4>)
   10a82:	4798      	blx	r3
   10a84:	2000      	movs	r0, #0
   10a86:	b007      	add	sp, #28
   10a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a8a:	0023      	movs	r3, r4
   10a8c:	33c8      	adds	r3, #200	; 0xc8
   10a8e:	781b      	ldrb	r3, [r3, #0]
   10a90:	ae01      	add	r6, sp, #4
   10a92:	2b04      	cmp	r3, #4
   10a94:	d103      	bne.n	10a9e <LORAWAN_TxHandler+0x4a>
   10a96:	0030      	movs	r0, r6
   10a98:	4b24      	ldr	r3, [pc, #144]	; (10b2c <LORAWAN_TxHandler+0xd8>)
   10a9a:	7035      	strb	r5, [r6, #0]
   10a9c:	4798      	blx	r3
   10a9e:	4b24      	ldr	r3, [pc, #144]	; (10b30 <LORAWAN_TxHandler+0xdc>)
   10aa0:	9803      	ldr	r0, [sp, #12]
   10aa2:	9904      	ldr	r1, [sp, #16]
   10aa4:	9a05      	ldr	r2, [sp, #20]
   10aa6:	4798      	blx	r3
   10aa8:	0023      	movs	r3, r4
   10aaa:	33d0      	adds	r3, #208	; 0xd0
   10aac:	681d      	ldr	r5, [r3, #0]
   10aae:	2395      	movs	r3, #149	; 0x95
   10ab0:	4f20      	ldr	r7, [pc, #128]	; (10b34 <LORAWAN_TxHandler+0xe0>)
   10ab2:	005b      	lsls	r3, r3, #1
   10ab4:	2d00      	cmp	r5, #0
   10ab6:	d023      	beq.n	10b00 <LORAWAN_TxHandler+0xac>
   10ab8:	2201      	movs	r2, #1
   10aba:	54e2      	strb	r2, [r4, r3]
   10abc:	7828      	ldrb	r0, [r5, #0]
   10abe:	7a2b      	ldrb	r3, [r5, #8]
   10ac0:	1e42      	subs	r2, r0, #1
   10ac2:	4190      	sbcs	r0, r2
   10ac4:	7869      	ldrb	r1, [r5, #1]
   10ac6:	686a      	ldr	r2, [r5, #4]
   10ac8:	b2c0      	uxtb	r0, r0
   10aca:	47b8      	blx	r7
   10acc:	0023      	movs	r3, r4
   10ace:	339a      	adds	r3, #154	; 0x9a
   10ad0:	881b      	ldrh	r3, [r3, #0]
   10ad2:	0030      	movs	r0, r6
   10ad4:	7033      	strb	r3, [r6, #0]
   10ad6:	4b18      	ldr	r3, [pc, #96]	; (10b38 <LORAWAN_TxHandler+0xe4>)
   10ad8:	6073      	str	r3, [r6, #4]
   10ada:	4b18      	ldr	r3, [pc, #96]	; (10b3c <LORAWAN_TxHandler+0xe8>)
   10adc:	4798      	blx	r3
   10ade:	2800      	cmp	r0, #0
   10ae0:	d114      	bne.n	10b0c <LORAWAN_TxHandler+0xb8>
   10ae2:	0021      	movs	r1, r4
   10ae4:	220e      	movs	r2, #14
   10ae6:	3150      	adds	r1, #80	; 0x50
   10ae8:	780b      	ldrb	r3, [r1, #0]
   10aea:	4393      	bics	r3, r2
   10aec:	001a      	movs	r2, r3
   10aee:	2302      	movs	r3, #2
   10af0:	4313      	orrs	r3, r2
   10af2:	700b      	strb	r3, [r1, #0]
   10af4:	2208      	movs	r2, #8
   10af6:	3460      	adds	r4, #96	; 0x60
   10af8:	7823      	ldrb	r3, [r4, #0]
   10afa:	4393      	bics	r3, r2
   10afc:	7023      	strb	r3, [r4, #0]
   10afe:	e7c1      	b.n	10a84 <LORAWAN_TxHandler+0x30>
   10b00:	54e5      	strb	r5, [r4, r3]
   10b02:	002a      	movs	r2, r5
   10b04:	002b      	movs	r3, r5
   10b06:	0029      	movs	r1, r5
   10b08:	0028      	movs	r0, r5
   10b0a:	e7de      	b.n	10aca <LORAWAN_TxHandler+0x76>
   10b0c:	0022      	movs	r2, r4
   10b0e:	2120      	movs	r1, #32
   10b10:	3260      	adds	r2, #96	; 0x60
   10b12:	7813      	ldrb	r3, [r2, #0]
   10b14:	438b      	bics	r3, r1
   10b16:	7013      	strb	r3, [r2, #0]
   10b18:	4b03      	ldr	r3, [pc, #12]	; (10b28 <LORAWAN_TxHandler+0xd4>)
   10b1a:	4798      	blx	r3
   10b1c:	e7ea      	b.n	10af4 <LORAWAN_TxHandler+0xa0>
   10b1e:	46c0      	nop			; (mov r8, r8)
   10b20:	20001ce4 	.word	0x20001ce4
   10b24:	00008a85 	.word	0x00008a85
   10b28:	0000e19d 	.word	0x0000e19d
   10b2c:	000120c9 	.word	0x000120c9
   10b30:	0000d96d 	.word	0x0000d96d
   10b34:	0000deb5 	.word	0x0000deb5
   10b38:	20001e21 	.word	0x20001e21
   10b3c:	000116e9 	.word	0x000116e9

00010b40 <LORAWAN_JoinReqHandler>:
   10b40:	b530      	push	{r4, r5, lr}
   10b42:	b087      	sub	sp, #28
   10b44:	466a      	mov	r2, sp
   10b46:	2300      	movs	r3, #0
   10b48:	4c1e      	ldr	r4, [pc, #120]	; (10bc4 <LORAWAN_JoinReqHandler+0x84>)
   10b4a:	7013      	strb	r3, [r2, #0]
   10b4c:	0023      	movs	r3, r4
   10b4e:	33b5      	adds	r3, #181	; 0xb5
   10b50:	781b      	ldrb	r3, [r3, #0]
   10b52:	4669      	mov	r1, sp
   10b54:	7053      	strb	r3, [r2, #1]
   10b56:	0023      	movs	r3, r4
   10b58:	33b3      	adds	r3, #179	; 0xb3
   10b5a:	781b      	ldrb	r3, [r3, #0]
   10b5c:	202d      	movs	r0, #45	; 0x2d
   10b5e:	7093      	strb	r3, [r2, #2]
   10b60:	aa03      	add	r2, sp, #12
   10b62:	4b19      	ldr	r3, [pc, #100]	; (10bc8 <LORAWAN_JoinReqHandler+0x88>)
   10b64:	4798      	blx	r3
   10b66:	2808      	cmp	r0, #8
   10b68:	d004      	beq.n	10b74 <LORAWAN_JoinReqHandler+0x34>
   10b6a:	4b18      	ldr	r3, [pc, #96]	; (10bcc <LORAWAN_JoinReqHandler+0x8c>)
   10b6c:	4798      	blx	r3
   10b6e:	2000      	movs	r0, #0
   10b70:	b007      	add	sp, #28
   10b72:	bd30      	pop	{r4, r5, pc}
   10b74:	4b16      	ldr	r3, [pc, #88]	; (10bd0 <LORAWAN_JoinReqHandler+0x90>)
   10b76:	9803      	ldr	r0, [sp, #12]
   10b78:	9904      	ldr	r1, [sp, #16]
   10b7a:	9a05      	ldr	r2, [sp, #20]
   10b7c:	4798      	blx	r3
   10b7e:	0023      	movs	r3, r4
   10b80:	33c8      	adds	r3, #200	; 0xc8
   10b82:	781b      	ldrb	r3, [r3, #0]
   10b84:	ad01      	add	r5, sp, #4
   10b86:	2b04      	cmp	r3, #4
   10b88:	d104      	bne.n	10b94 <LORAWAN_JoinReqHandler+0x54>
   10b8a:	3b03      	subs	r3, #3
   10b8c:	702b      	strb	r3, [r5, #0]
   10b8e:	0028      	movs	r0, r5
   10b90:	4b10      	ldr	r3, [pc, #64]	; (10bd4 <LORAWAN_JoinReqHandler+0x94>)
   10b92:	4798      	blx	r3
   10b94:	2395      	movs	r3, #149	; 0x95
   10b96:	2200      	movs	r2, #0
   10b98:	005b      	lsls	r3, r3, #1
   10b9a:	54e2      	strb	r2, [r4, r3]
   10b9c:	4b0e      	ldr	r3, [pc, #56]	; (10bd8 <LORAWAN_JoinReqHandler+0x98>)
   10b9e:	4798      	blx	r3
   10ba0:	4b0e      	ldr	r3, [pc, #56]	; (10bdc <LORAWAN_JoinReqHandler+0x9c>)
   10ba2:	7028      	strb	r0, [r5, #0]
   10ba4:	606b      	str	r3, [r5, #4]
   10ba6:	0028      	movs	r0, r5
   10ba8:	4b0d      	ldr	r3, [pc, #52]	; (10be0 <LORAWAN_JoinReqHandler+0xa0>)
   10baa:	4798      	blx	r3
   10bac:	2800      	cmp	r0, #0
   10bae:	d1dc      	bne.n	10b6a <LORAWAN_JoinReqHandler+0x2a>
   10bb0:	220e      	movs	r2, #14
   10bb2:	3450      	adds	r4, #80	; 0x50
   10bb4:	7823      	ldrb	r3, [r4, #0]
   10bb6:	4393      	bics	r3, r2
   10bb8:	001a      	movs	r2, r3
   10bba:	2302      	movs	r3, #2
   10bbc:	4313      	orrs	r3, r2
   10bbe:	7023      	strb	r3, [r4, #0]
   10bc0:	e7d5      	b.n	10b6e <LORAWAN_JoinReqHandler+0x2e>
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	20001ce4 	.word	0x20001ce4
   10bc8:	00008a85 	.word	0x00008a85
   10bcc:	0000d40d 	.word	0x0000d40d
   10bd0:	0000d96d 	.word	0x0000d96d
   10bd4:	000120c9 	.word	0x000120c9
   10bd8:	0000d7e5 	.word	0x0000d7e5
   10bdc:	20001e11 	.word	0x20001e11
   10be0:	000116e9 	.word	0x000116e9

00010be4 <LORAWAN_RxHandler>:
   10be4:	b513      	push	{r0, r1, r4, lr}
   10be6:	4b0c      	ldr	r3, [pc, #48]	; (10c18 <LORAWAN_RxHandler+0x34>)
   10be8:	781b      	ldrb	r3, [r3, #0]
   10bea:	2b08      	cmp	r3, #8
   10bec:	d011      	beq.n	10c12 <LORAWAN_RxHandler+0x2e>
   10bee:	2b10      	cmp	r3, #16
   10bf0:	d001      	beq.n	10bf6 <LORAWAN_RxHandler+0x12>
   10bf2:	2b01      	cmp	r3, #1
   10bf4:	d10b      	bne.n	10c0e <LORAWAN_RxHandler+0x2a>
   10bf6:	466b      	mov	r3, sp
   10bf8:	1c9c      	adds	r4, r3, #2
   10bfa:	0021      	movs	r1, r4
   10bfc:	a801      	add	r0, sp, #4
   10bfe:	4b07      	ldr	r3, [pc, #28]	; (10c1c <LORAWAN_RxHandler+0x38>)
   10c00:	4798      	blx	r3
   10c02:	9801      	ldr	r0, [sp, #4]
   10c04:	2800      	cmp	r0, #0
   10c06:	d002      	beq.n	10c0e <LORAWAN_RxHandler+0x2a>
   10c08:	7821      	ldrb	r1, [r4, #0]
   10c0a:	4b05      	ldr	r3, [pc, #20]	; (10c20 <LORAWAN_RxHandler+0x3c>)
   10c0c:	4798      	blx	r3
   10c0e:	2000      	movs	r0, #0
   10c10:	bd16      	pop	{r1, r2, r4, pc}
   10c12:	4b04      	ldr	r3, [pc, #16]	; (10c24 <LORAWAN_RxHandler+0x40>)
   10c14:	4798      	blx	r3
   10c16:	e7fa      	b.n	10c0e <LORAWAN_RxHandler+0x2a>
   10c18:	20001e10 	.word	0x20001e10
   10c1c:	000118bd 	.word	0x000118bd
   10c20:	0000f2f5 	.word	0x0000f2f5
   10c24:	0000ec5d 	.word	0x0000ec5d

00010c28 <LORAWAN_PostTask>:
   10c28:	b510      	push	{r4, lr}
   10c2a:	4b08      	ldr	r3, [pc, #32]	; (10c4c <LORAWAN_PostTask+0x24>)
   10c2c:	0004      	movs	r4, r0
   10c2e:	4798      	blx	r3
   10c30:	2201      	movs	r2, #1
   10c32:	40a2      	lsls	r2, r4
   10c34:	4906      	ldr	r1, [pc, #24]	; (10c50 <LORAWAN_PostTask+0x28>)
   10c36:	780b      	ldrb	r3, [r1, #0]
   10c38:	4313      	orrs	r3, r2
   10c3a:	b2db      	uxtb	r3, r3
   10c3c:	700b      	strb	r3, [r1, #0]
   10c3e:	4b05      	ldr	r3, [pc, #20]	; (10c54 <LORAWAN_PostTask+0x2c>)
   10c40:	4798      	blx	r3
   10c42:	2004      	movs	r0, #4
   10c44:	4b04      	ldr	r3, [pc, #16]	; (10c58 <LORAWAN_PostTask+0x30>)
   10c46:	4798      	blx	r3
   10c48:	bd10      	pop	{r4, pc}
   10c4a:	46c0      	nop			; (mov r8, r8)
   10c4c:	00004165 	.word	0x00004165
   10c50:	200010ac 	.word	0x200010ac
   10c54:	00004171 	.word	0x00004171
   10c58:	0000a511 	.word	0x0000a511

00010c5c <LORAWAN_TaskHandler>:
   10c5c:	b570      	push	{r4, r5, r6, lr}
   10c5e:	2601      	movs	r6, #1
   10c60:	4d0e      	ldr	r5, [pc, #56]	; (10c9c <LORAWAN_TaskHandler+0x40>)
   10c62:	e015      	b.n	10c90 <LORAWAN_TaskHandler+0x34>
   10c64:	2400      	movs	r4, #0
   10c66:	782b      	ldrb	r3, [r5, #0]
   10c68:	4123      	asrs	r3, r4
   10c6a:	4233      	tst	r3, r6
   10c6c:	d00d      	beq.n	10c8a <LORAWAN_TaskHandler+0x2e>
   10c6e:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <LORAWAN_TaskHandler+0x44>)
   10c70:	4798      	blx	r3
   10c72:	0032      	movs	r2, r6
   10c74:	40a2      	lsls	r2, r4
   10c76:	782b      	ldrb	r3, [r5, #0]
   10c78:	00a4      	lsls	r4, r4, #2
   10c7a:	4393      	bics	r3, r2
   10c7c:	702b      	strb	r3, [r5, #0]
   10c7e:	4b09      	ldr	r3, [pc, #36]	; (10ca4 <LORAWAN_TaskHandler+0x48>)
   10c80:	4798      	blx	r3
   10c82:	4b09      	ldr	r3, [pc, #36]	; (10ca8 <LORAWAN_TaskHandler+0x4c>)
   10c84:	58e3      	ldr	r3, [r4, r3]
   10c86:	4798      	blx	r3
   10c88:	e7ea      	b.n	10c60 <LORAWAN_TaskHandler+0x4>
   10c8a:	3401      	adds	r4, #1
   10c8c:	2c03      	cmp	r4, #3
   10c8e:	d1ea      	bne.n	10c66 <LORAWAN_TaskHandler+0xa>
   10c90:	7828      	ldrb	r0, [r5, #0]
   10c92:	b2c0      	uxtb	r0, r0
   10c94:	2800      	cmp	r0, #0
   10c96:	d1e5      	bne.n	10c64 <LORAWAN_TaskHandler+0x8>
   10c98:	bd70      	pop	{r4, r5, r6, pc}
   10c9a:	46c0      	nop			; (mov r8, r8)
   10c9c:	200010ac 	.word	0x200010ac
   10ca0:	00004165 	.word	0x00004165
   10ca4:	00004171 	.word	0x00004171
   10ca8:	0001ddd4 	.word	0x0001ddd4

00010cac <RADIO_GetAttr>:
   10cac:	b510      	push	{r4, lr}
   10cae:	000b      	movs	r3, r1
   10cb0:	281f      	cmp	r0, #31
   10cb2:	d900      	bls.n	10cb6 <RADIO_GetAttr+0xa>
   10cb4:	e067      	b.n	10d86 <RADIO_GetAttr+0xda>
   10cb6:	f001 fd15 	bl	126e4 <__gnu_thumb1_case_uqi>
   10cba:	1410      	.short	0x1410
   10cbc:	66201c19 	.word	0x66201c19
   10cc0:	312e2a27 	.word	0x312e2a27
   10cc4:	3d3a3734 	.word	0x3d3a3734
   10cc8:	46434054 	.word	0x46434054
   10ccc:	66245149 	.word	0x66245149
   10cd0:	66666659 	.word	0x66666659
   10cd4:	5c666617 	.word	0x5c666617
   10cd8:	6360      	.short	0x6360
   10cda:	4a2c      	ldr	r2, [pc, #176]	; (10d8c <RADIO_GetAttr+0xe0>)
   10cdc:	7e12      	ldrb	r2, [r2, #24]
   10cde:	701a      	strb	r2, [r3, #0]
   10ce0:	e002      	b.n	10ce8 <RADIO_GetAttr+0x3c>
   10ce2:	4a2a      	ldr	r2, [pc, #168]	; (10d8c <RADIO_GetAttr+0xe0>)
   10ce4:	6812      	ldr	r2, [r2, #0]
   10ce6:	601a      	str	r2, [r3, #0]
   10ce8:	2000      	movs	r0, #0
   10cea:	bd10      	pop	{r4, pc}
   10cec:	4a27      	ldr	r2, [pc, #156]	; (10d8c <RADIO_GetAttr+0xe0>)
   10cee:	6852      	ldr	r2, [r2, #4]
   10cf0:	e7f9      	b.n	10ce6 <RADIO_GetAttr+0x3a>
   10cf2:	4a26      	ldr	r2, [pc, #152]	; (10d8c <RADIO_GetAttr+0xe0>)
   10cf4:	8a92      	ldrh	r2, [r2, #20]
   10cf6:	801a      	strh	r2, [r3, #0]
   10cf8:	e7f6      	b.n	10ce8 <RADIO_GetAttr+0x3c>
   10cfa:	4a24      	ldr	r2, [pc, #144]	; (10d8c <RADIO_GetAttr+0xe0>)
   10cfc:	3203      	adds	r2, #3
   10cfe:	7fd2      	ldrb	r2, [r2, #31]
   10d00:	e7ed      	b.n	10cde <RADIO_GetAttr+0x32>
   10d02:	4a22      	ldr	r2, [pc, #136]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d04:	3204      	adds	r2, #4
   10d06:	e7fa      	b.n	10cfe <RADIO_GetAttr+0x52>
   10d08:	4a20      	ldr	r2, [pc, #128]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d0a:	3206      	adds	r2, #6
   10d0c:	e7f7      	b.n	10cfe <RADIO_GetAttr+0x52>
   10d0e:	4a1f      	ldr	r2, [pc, #124]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d10:	3236      	adds	r2, #54	; 0x36
   10d12:	7812      	ldrb	r2, [r2, #0]
   10d14:	e7e3      	b.n	10cde <RADIO_GetAttr+0x32>
   10d16:	4a1d      	ldr	r2, [pc, #116]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d18:	3205      	adds	r2, #5
   10d1a:	e7f0      	b.n	10cfe <RADIO_GetAttr+0x52>
   10d1c:	4a1b      	ldr	r2, [pc, #108]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d1e:	3234      	adds	r2, #52	; 0x34
   10d20:	e7f7      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d22:	4a1a      	ldr	r2, [pc, #104]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d24:	8ad2      	ldrh	r2, [r2, #22]
   10d26:	e7e6      	b.n	10cf6 <RADIO_GetAttr+0x4a>
   10d28:	4a18      	ldr	r2, [pc, #96]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d2a:	3233      	adds	r2, #51	; 0x33
   10d2c:	e7f1      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d2e:	4a17      	ldr	r2, [pc, #92]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d30:	68d2      	ldr	r2, [r2, #12]
   10d32:	e7d8      	b.n	10ce6 <RADIO_GetAttr+0x3a>
   10d34:	4a15      	ldr	r2, [pc, #84]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d36:	6892      	ldr	r2, [r2, #8]
   10d38:	e7d5      	b.n	10ce6 <RADIO_GetAttr+0x3a>
   10d3a:	4a14      	ldr	r2, [pc, #80]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d3c:	3237      	adds	r2, #55	; 0x37
   10d3e:	e7e8      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d40:	4a12      	ldr	r2, [pc, #72]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d42:	3238      	adds	r2, #56	; 0x38
   10d44:	e7e5      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d46:	4a11      	ldr	r2, [pc, #68]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d48:	3239      	adds	r2, #57	; 0x39
   10d4a:	e7e2      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d4c:	4a0f      	ldr	r2, [pc, #60]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d4e:	4910      	ldr	r1, [pc, #64]	; (10d90 <RADIO_GetAttr+0xe4>)
   10d50:	3202      	adds	r2, #2
   10d52:	7fd2      	ldrb	r2, [r2, #31]
   10d54:	0018      	movs	r0, r3
   10d56:	4b0f      	ldr	r3, [pc, #60]	; (10d94 <RADIO_GetAttr+0xe8>)
   10d58:	4798      	blx	r3
   10d5a:	e7c5      	b.n	10ce8 <RADIO_GetAttr+0x3c>
   10d5c:	4a0b      	ldr	r2, [pc, #44]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d5e:	3202      	adds	r2, #2
   10d60:	e7cd      	b.n	10cfe <RADIO_GetAttr+0x52>
   10d62:	4a0a      	ldr	r2, [pc, #40]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d64:	3232      	adds	r2, #50	; 0x32
   10d66:	7812      	ldrb	r2, [r2, #0]
   10d68:	b252      	sxtb	r2, r2
   10d6a:	e7b8      	b.n	10cde <RADIO_GetAttr+0x32>
   10d6c:	4a07      	ldr	r2, [pc, #28]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d6e:	3235      	adds	r2, #53	; 0x35
   10d70:	e7cf      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d72:	4906      	ldr	r1, [pc, #24]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d74:	2206      	movs	r2, #6
   10d76:	313c      	adds	r1, #60	; 0x3c
   10d78:	e7ec      	b.n	10d54 <RADIO_GetAttr+0xa8>
   10d7a:	4a04      	ldr	r2, [pc, #16]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d7c:	3254      	adds	r2, #84	; 0x54
   10d7e:	e7c8      	b.n	10d12 <RADIO_GetAttr+0x66>
   10d80:	4a02      	ldr	r2, [pc, #8]	; (10d8c <RADIO_GetAttr+0xe0>)
   10d82:	3256      	adds	r2, #86	; 0x56
   10d84:	e7ef      	b.n	10d66 <RADIO_GetAttr+0xba>
   10d86:	2005      	movs	r0, #5
   10d88:	e7af      	b.n	10cea <RADIO_GetAttr+0x3e>
   10d8a:	46c0      	nop			; (mov r8, r8)
   10d8c:	20001aac 	.word	0x20001aac
   10d90:	20001ac5 	.word	0x20001ac5
   10d94:	000158c9 	.word	0x000158c9

00010d98 <RADIO_SetAttr>:
   10d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d9a:	4b77      	ldr	r3, [pc, #476]	; (10f78 <RADIO_SetAttr+0x1e0>)
   10d9c:	b085      	sub	sp, #20
   10d9e:	0006      	movs	r6, r0
   10da0:	000d      	movs	r5, r1
   10da2:	4798      	blx	r3
   10da4:	2404      	movs	r4, #4
   10da6:	2801      	cmp	r0, #1
   10da8:	d11a      	bne.n	10de0 <RADIO_SetAttr+0x48>
   10daa:	2e1d      	cmp	r6, #29
   10dac:	d900      	bls.n	10db0 <RADIO_SetAttr+0x18>
   10dae:	e0e0      	b.n	10f72 <RADIO_SetAttr+0x1da>
   10db0:	0030      	movs	r0, r6
   10db2:	f001 fc97 	bl	126e4 <__gnu_thumb1_case_uqi>
   10db6:	514d      	.short	0x514d
   10db8:	de6d6965 	.word	0xde6d6965
   10dbc:	8f8b8179 	.word	0x8f8b8179
   10dc0:	a7a49b97 	.word	0xa7a49b97
   10dc4:	bcb3abde 	.word	0xbcb3abde
   10dc8:	de72cdc5 	.word	0xde72cdc5
   10dcc:	dededed5 	.word	0xdededed5
   10dd0:	18dede0f 	.word	0x18dede0f
   10dd4:	2403      	movs	r4, #3
   10dd6:	2d00      	cmp	r5, #0
   10dd8:	d002      	beq.n	10de0 <RADIO_SetAttr+0x48>
   10dda:	4b68      	ldr	r3, [pc, #416]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ddc:	611d      	str	r5, [r3, #16]
   10dde:	2400      	movs	r4, #0
   10de0:	0020      	movs	r0, r4
   10de2:	b005      	add	sp, #20
   10de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10de6:	796e      	ldrb	r6, [r5, #5]
   10de8:	2e00      	cmp	r6, #0
   10dea:	d109      	bne.n	10e00 <RADIO_SetAttr+0x68>
   10dec:	4b63      	ldr	r3, [pc, #396]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10dee:	001a      	movs	r2, r3
   10df0:	649e      	str	r6, [r3, #72]	; 0x48
   10df2:	879e      	strh	r6, [r3, #60]	; 0x3c
   10df4:	87de      	strh	r6, [r3, #62]	; 0x3e
   10df6:	3240      	adds	r2, #64	; 0x40
   10df8:	3341      	adds	r3, #65	; 0x41
   10dfa:	7016      	strb	r6, [r2, #0]
   10dfc:	701e      	strb	r6, [r3, #0]
   10dfe:	e7ee      	b.n	10dde <RADIO_SetAttr+0x46>
   10e00:	882b      	ldrh	r3, [r5, #0]
   10e02:	2403      	movs	r4, #3
   10e04:	9301      	str	r3, [sp, #4]
   10e06:	2b00      	cmp	r3, #0
   10e08:	d0ea      	beq.n	10de0 <RADIO_SetAttr+0x48>
   10e0a:	792f      	ldrb	r7, [r5, #4]
   10e0c:	2f00      	cmp	r7, #0
   10e0e:	d0e7      	beq.n	10de0 <RADIO_SetAttr+0x48>
   10e10:	20fa      	movs	r0, #250	; 0xfa
   10e12:	0080      	lsls	r0, r0, #2
   10e14:	0039      	movs	r1, r7
   10e16:	4358      	muls	r0, r3
   10e18:	4b59      	ldr	r3, [pc, #356]	; (10f80 <RADIO_SetAttr+0x1e8>)
   10e1a:	4798      	blx	r3
   10e1c:	4b59      	ldr	r3, [pc, #356]	; (10f84 <RADIO_SetAttr+0x1ec>)
   10e1e:	4798      	blx	r3
   10e20:	4959      	ldr	r1, [pc, #356]	; (10f88 <RADIO_SetAttr+0x1f0>)
   10e22:	9002      	str	r0, [sp, #8]
   10e24:	4b59      	ldr	r3, [pc, #356]	; (10f8c <RADIO_SetAttr+0x1f4>)
   10e26:	4798      	blx	r3
   10e28:	9003      	str	r0, [sp, #12]
   10e2a:	2800      	cmp	r0, #0
   10e2c:	d1d8      	bne.n	10de0 <RADIO_SetAttr+0x48>
   10e2e:	2302      	movs	r3, #2
   10e30:	5eed      	ldrsh	r5, [r5, r3]
   10e32:	9802      	ldr	r0, [sp, #8]
   10e34:	4b56      	ldr	r3, [pc, #344]	; (10f90 <RADIO_SetAttr+0x1f8>)
   10e36:	4798      	blx	r3
   10e38:	466b      	mov	r3, sp
   10e3a:	4c50      	ldr	r4, [pc, #320]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e3c:	889b      	ldrh	r3, [r3, #4]
   10e3e:	64a0      	str	r0, [r4, #72]	; 0x48
   10e40:	87a3      	strh	r3, [r4, #60]	; 0x3c
   10e42:	0023      	movs	r3, r4
   10e44:	87e5      	strh	r5, [r4, #62]	; 0x3e
   10e46:	3340      	adds	r3, #64	; 0x40
   10e48:	3441      	adds	r4, #65	; 0x41
   10e4a:	701f      	strb	r7, [r3, #0]
   10e4c:	7026      	strb	r6, [r4, #0]
   10e4e:	e7c6      	b.n	10dde <RADIO_SetAttr+0x46>
   10e50:	782a      	ldrb	r2, [r5, #0]
   10e52:	4b4a      	ldr	r3, [pc, #296]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e54:	761a      	strb	r2, [r3, #24]
   10e56:	e7c2      	b.n	10dde <RADIO_SetAttr+0x46>
   10e58:	4a4e      	ldr	r2, [pc, #312]	; (10f94 <RADIO_SetAttr+0x1fc>)
   10e5a:	682b      	ldr	r3, [r5, #0]
   10e5c:	1899      	adds	r1, r3, r2
   10e5e:	4a4e      	ldr	r2, [pc, #312]	; (10f98 <RADIO_SetAttr+0x200>)
   10e60:	4291      	cmp	r1, r2
   10e62:	d90a      	bls.n	10e7a <RADIO_SetAttr+0xe2>
   10e64:	4a4d      	ldr	r2, [pc, #308]	; (10f9c <RADIO_SetAttr+0x204>)
   10e66:	494e      	ldr	r1, [pc, #312]	; (10fa0 <RADIO_SetAttr+0x208>)
   10e68:	189a      	adds	r2, r3, r2
   10e6a:	428a      	cmp	r2, r1
   10e6c:	d905      	bls.n	10e7a <RADIO_SetAttr+0xe2>
   10e6e:	4a4d      	ldr	r2, [pc, #308]	; (10fa4 <RADIO_SetAttr+0x20c>)
   10e70:	494d      	ldr	r1, [pc, #308]	; (10fa8 <RADIO_SetAttr+0x210>)
   10e72:	189a      	adds	r2, r3, r2
   10e74:	2405      	movs	r4, #5
   10e76:	428a      	cmp	r2, r1
   10e78:	d8b2      	bhi.n	10de0 <RADIO_SetAttr+0x48>
   10e7a:	4a40      	ldr	r2, [pc, #256]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e7c:	6013      	str	r3, [r2, #0]
   10e7e:	e7ae      	b.n	10dde <RADIO_SetAttr+0x46>
   10e80:	682a      	ldr	r2, [r5, #0]
   10e82:	4b3e      	ldr	r3, [pc, #248]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e84:	605a      	str	r2, [r3, #4]
   10e86:	e7aa      	b.n	10dde <RADIO_SetAttr+0x46>
   10e88:	882a      	ldrh	r2, [r5, #0]
   10e8a:	4b3c      	ldr	r3, [pc, #240]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e8c:	829a      	strh	r2, [r3, #20]
   10e8e:	e7a6      	b.n	10dde <RADIO_SetAttr+0x46>
   10e90:	4b3a      	ldr	r3, [pc, #232]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10e92:	782a      	ldrb	r2, [r5, #0]
   10e94:	3303      	adds	r3, #3
   10e96:	77da      	strb	r2, [r3, #31]
   10e98:	e7a1      	b.n	10dde <RADIO_SetAttr+0x46>
   10e9a:	782a      	ldrb	r2, [r5, #0]
   10e9c:	2405      	movs	r4, #5
   10e9e:	2a01      	cmp	r2, #1
   10ea0:	d89e      	bhi.n	10de0 <RADIO_SetAttr+0x48>
   10ea2:	4b36      	ldr	r3, [pc, #216]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ea4:	3304      	adds	r3, #4
   10ea6:	e7f6      	b.n	10e96 <RADIO_SetAttr+0xfe>
   10ea8:	782a      	ldrb	r2, [r5, #0]
   10eaa:	2405      	movs	r4, #5
   10eac:	2a01      	cmp	r2, #1
   10eae:	d900      	bls.n	10eb2 <RADIO_SetAttr+0x11a>
   10eb0:	e796      	b.n	10de0 <RADIO_SetAttr+0x48>
   10eb2:	4b32      	ldr	r3, [pc, #200]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10eb4:	3306      	adds	r3, #6
   10eb6:	e7ee      	b.n	10e96 <RADIO_SetAttr+0xfe>
   10eb8:	782a      	ldrb	r2, [r5, #0]
   10eba:	2405      	movs	r4, #5
   10ebc:	1fd3      	subs	r3, r2, #7
   10ebe:	2b02      	cmp	r3, #2
   10ec0:	d900      	bls.n	10ec4 <RADIO_SetAttr+0x12c>
   10ec2:	e78d      	b.n	10de0 <RADIO_SetAttr+0x48>
   10ec4:	4b2d      	ldr	r3, [pc, #180]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ec6:	3336      	adds	r3, #54	; 0x36
   10ec8:	701a      	strb	r2, [r3, #0]
   10eca:	e788      	b.n	10dde <RADIO_SetAttr+0x46>
   10ecc:	4b2b      	ldr	r3, [pc, #172]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ece:	782a      	ldrb	r2, [r5, #0]
   10ed0:	3305      	adds	r3, #5
   10ed2:	e7e0      	b.n	10e96 <RADIO_SetAttr+0xfe>
   10ed4:	782a      	ldrb	r2, [r5, #0]
   10ed6:	2405      	movs	r4, #5
   10ed8:	2a01      	cmp	r2, #1
   10eda:	d900      	bls.n	10ede <RADIO_SetAttr+0x146>
   10edc:	e780      	b.n	10de0 <RADIO_SetAttr+0x48>
   10ede:	4b27      	ldr	r3, [pc, #156]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ee0:	3334      	adds	r3, #52	; 0x34
   10ee2:	e7f1      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10ee4:	882a      	ldrh	r2, [r5, #0]
   10ee6:	4b25      	ldr	r3, [pc, #148]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10ee8:	82da      	strh	r2, [r3, #22]
   10eea:	e778      	b.n	10dde <RADIO_SetAttr+0x46>
   10eec:	782a      	ldrb	r2, [r5, #0]
   10eee:	2405      	movs	r4, #5
   10ef0:	1e53      	subs	r3, r2, #1
   10ef2:	2b03      	cmp	r3, #3
   10ef4:	d900      	bls.n	10ef8 <RADIO_SetAttr+0x160>
   10ef6:	e773      	b.n	10de0 <RADIO_SetAttr+0x48>
   10ef8:	4b20      	ldr	r3, [pc, #128]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10efa:	3333      	adds	r3, #51	; 0x33
   10efc:	e7e4      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10efe:	4b1f      	ldr	r3, [pc, #124]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f00:	682a      	ldr	r2, [r5, #0]
   10f02:	60da      	str	r2, [r3, #12]
   10f04:	682a      	ldr	r2, [r5, #0]
   10f06:	4b1d      	ldr	r3, [pc, #116]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f08:	609a      	str	r2, [r3, #8]
   10f0a:	e768      	b.n	10dde <RADIO_SetAttr+0x46>
   10f0c:	782a      	ldrb	r2, [r5, #0]
   10f0e:	2405      	movs	r4, #5
   10f10:	2a03      	cmp	r2, #3
   10f12:	d900      	bls.n	10f16 <RADIO_SetAttr+0x17e>
   10f14:	e764      	b.n	10de0 <RADIO_SetAttr+0x48>
   10f16:	4b19      	ldr	r3, [pc, #100]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f18:	3337      	adds	r3, #55	; 0x37
   10f1a:	e7d5      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10f1c:	782a      	ldrb	r2, [r5, #0]
   10f1e:	2405      	movs	r4, #5
   10f20:	1e53      	subs	r3, r2, #1
   10f22:	2b16      	cmp	r3, #22
   10f24:	d900      	bls.n	10f28 <RADIO_SetAttr+0x190>
   10f26:	e75b      	b.n	10de0 <RADIO_SetAttr+0x48>
   10f28:	4b14      	ldr	r3, [pc, #80]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f2a:	3338      	adds	r3, #56	; 0x38
   10f2c:	e7cc      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10f2e:	782a      	ldrb	r2, [r5, #0]
   10f30:	2405      	movs	r4, #5
   10f32:	1e53      	subs	r3, r2, #1
   10f34:	2b16      	cmp	r3, #22
   10f36:	d900      	bls.n	10f3a <RADIO_SetAttr+0x1a2>
   10f38:	e752      	b.n	10de0 <RADIO_SetAttr+0x48>
   10f3a:	4b10      	ldr	r3, [pc, #64]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f3c:	3339      	adds	r3, #57	; 0x39
   10f3e:	e7c3      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10f40:	4b0e      	ldr	r3, [pc, #56]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f42:	0029      	movs	r1, r5
   10f44:	3302      	adds	r3, #2
   10f46:	7fda      	ldrb	r2, [r3, #31]
   10f48:	4818      	ldr	r0, [pc, #96]	; (10fac <RADIO_SetAttr+0x214>)
   10f4a:	4b19      	ldr	r3, [pc, #100]	; (10fb0 <RADIO_SetAttr+0x218>)
   10f4c:	4798      	blx	r3
   10f4e:	e746      	b.n	10dde <RADIO_SetAttr+0x46>
   10f50:	782b      	ldrb	r3, [r5, #0]
   10f52:	1c1a      	adds	r2, r3, #0
   10f54:	2b08      	cmp	r3, #8
   10f56:	d900      	bls.n	10f5a <RADIO_SetAttr+0x1c2>
   10f58:	2208      	movs	r2, #8
   10f5a:	4b08      	ldr	r3, [pc, #32]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f5c:	3302      	adds	r3, #2
   10f5e:	e79a      	b.n	10e96 <RADIO_SetAttr+0xfe>
   10f60:	2405      	movs	r4, #5
   10f62:	782a      	ldrb	r2, [r5, #0]
   10f64:	1fd3      	subs	r3, r2, #7
   10f66:	42a3      	cmp	r3, r4
   10f68:	d900      	bls.n	10f6c <RADIO_SetAttr+0x1d4>
   10f6a:	e739      	b.n	10de0 <RADIO_SetAttr+0x48>
   10f6c:	4b03      	ldr	r3, [pc, #12]	; (10f7c <RADIO_SetAttr+0x1e4>)
   10f6e:	3335      	adds	r3, #53	; 0x35
   10f70:	e7aa      	b.n	10ec8 <RADIO_SetAttr+0x130>
   10f72:	2405      	movs	r4, #5
   10f74:	e734      	b.n	10de0 <RADIO_SetAttr+0x48>
   10f76:	46c0      	nop			; (mov r8, r8)
   10f78:	000116cd 	.word	0x000116cd
   10f7c:	20001aac 	.word	0x20001aac
   10f80:	00012821 	.word	0x00012821
   10f84:	000139ad 	.word	0x000139ad
   10f88:	43fa0000 	.word	0x43fa0000
   10f8c:	00012a1d 	.word	0x00012a1d
   10f90:	00012b01 	.word	0x00012b01
   10f94:	f7d58bc0 	.word	0xf7d58bc0
   10f98:	0243d580 	.word	0x0243d580
   10f9c:	e78fe580 	.word	0xe78fe580
   10fa0:	06dac2c0 	.word	0x06dac2c0
   10fa4:	cc9eec80 	.word	0xcc9eec80
   10fa8:	096ae380 	.word	0x096ae380
   10fac:	20001ac5 	.word	0x20001ac5
   10fb0:	000158c9 	.word	0x000158c9

00010fb4 <RADIO_Init>:
   10fb4:	b510      	push	{r4, lr}
   10fb6:	4b0c      	ldr	r3, [pc, #48]	; (10fe8 <RADIO_Init+0x34>)
   10fb8:	4798      	blx	r3
   10fba:	4b0c      	ldr	r3, [pc, #48]	; (10fec <RADIO_Init+0x38>)
   10fbc:	201f      	movs	r0, #31
   10fbe:	4798      	blx	r3
   10fc0:	4c0b      	ldr	r4, [pc, #44]	; (10ff0 <RADIO_Init+0x3c>)
   10fc2:	490c      	ldr	r1, [pc, #48]	; (10ff4 <RADIO_Init+0x40>)
   10fc4:	2001      	movs	r0, #1
   10fc6:	47a0      	blx	r4
   10fc8:	490b      	ldr	r1, [pc, #44]	; (10ff8 <RADIO_Init+0x44>)
   10fca:	2002      	movs	r0, #2
   10fcc:	47a0      	blx	r4
   10fce:	490b      	ldr	r1, [pc, #44]	; (10ffc <RADIO_Init+0x48>)
   10fd0:	2004      	movs	r0, #4
   10fd2:	47a0      	blx	r4
   10fd4:	490a      	ldr	r1, [pc, #40]	; (11000 <RADIO_Init+0x4c>)
   10fd6:	2008      	movs	r0, #8
   10fd8:	47a0      	blx	r4
   10fda:	490a      	ldr	r1, [pc, #40]	; (11004 <RADIO_Init+0x50>)
   10fdc:	2010      	movs	r0, #16
   10fde:	47a0      	blx	r4
   10fe0:	4909      	ldr	r1, [pc, #36]	; (11008 <RADIO_Init+0x54>)
   10fe2:	2020      	movs	r0, #32
   10fe4:	47a0      	blx	r4
   10fe6:	bd10      	pop	{r4, pc}
   10fe8:	00011ed5 	.word	0x00011ed5
   10fec:	000116d9 	.word	0x000116d9
   10ff0:	00003fd9 	.word	0x00003fd9
   10ff4:	00011465 	.word	0x00011465
   10ff8:	000114dd 	.word	0x000114dd
   10ffc:	0001154d 	.word	0x0001154d
   11000:	0001159d 	.word	0x0001159d
   11004:	000115c5 	.word	0x000115c5
   11008:	000115ed 	.word	0x000115ed

0001100c <Radio_WriteFrequency>:
   1100c:	b570      	push	{r4, r5, r6, lr}
   1100e:	490d      	ldr	r1, [pc, #52]	; (11044 <Radio_WriteFrequency+0x38>)
   11010:	4d0d      	ldr	r5, [pc, #52]	; (11048 <Radio_WriteFrequency+0x3c>)
   11012:	0006      	movs	r6, r0
   11014:	47a8      	blx	r5
   11016:	4b0d      	ldr	r3, [pc, #52]	; (1104c <Radio_WriteFrequency+0x40>)
   11018:	0004      	movs	r4, r0
   1101a:	490a      	ldr	r1, [pc, #40]	; (11044 <Radio_WriteFrequency+0x38>)
   1101c:	0030      	movs	r0, r6
   1101e:	4798      	blx	r3
   11020:	0208      	lsls	r0, r1, #8
   11022:	4908      	ldr	r1, [pc, #32]	; (11044 <Radio_WriteFrequency+0x38>)
   11024:	47a8      	blx	r5
   11026:	0224      	lsls	r4, r4, #8
   11028:	1904      	adds	r4, r0, r4
   1102a:	0c21      	lsrs	r1, r4, #16
   1102c:	4d08      	ldr	r5, [pc, #32]	; (11050 <Radio_WriteFrequency+0x44>)
   1102e:	b2c9      	uxtb	r1, r1
   11030:	2006      	movs	r0, #6
   11032:	47a8      	blx	r5
   11034:	0a21      	lsrs	r1, r4, #8
   11036:	b2c9      	uxtb	r1, r1
   11038:	2007      	movs	r0, #7
   1103a:	47a8      	blx	r5
   1103c:	b2e1      	uxtb	r1, r4
   1103e:	2008      	movs	r0, #8
   11040:	47a8      	blx	r5
   11042:	bd70      	pop	{r4, r5, r6, pc}
   11044:	00003d09 	.word	0x00003d09
   11048:	0001270d 	.word	0x0001270d
   1104c:	00012819 	.word	0x00012819
   11050:	00003f05 	.word	0x00003f05

00011054 <Radio_WriteConfiguration>:
   11054:	b5f0      	push	{r4, r5, r6, r7, lr}
   11056:	4cb0      	ldr	r4, [pc, #704]	; (11318 <Radio_WriteConfiguration+0x2c4>)
   11058:	2200      	movs	r2, #0
   1105a:	0023      	movs	r3, r4
   1105c:	b085      	sub	sp, #20
   1105e:	9002      	str	r0, [sp, #8]
   11060:	3334      	adds	r3, #52	; 0x34
   11062:	0010      	movs	r0, r2
   11064:	7819      	ldrb	r1, [r3, #0]
   11066:	4bad      	ldr	r3, [pc, #692]	; (1131c <Radio_WriteConfiguration+0x2c8>)
   11068:	4798      	blx	r3
   1106a:	4bad      	ldr	r3, [pc, #692]	; (11320 <Radio_WriteConfiguration+0x2cc>)
   1106c:	6820      	ldr	r0, [r4, #0]
   1106e:	4798      	blx	r3
   11070:	1ce3      	adds	r3, r4, #3
   11072:	1d62      	adds	r2, r4, #5
   11074:	7fdb      	ldrb	r3, [r3, #31]
   11076:	7fd2      	ldrb	r2, [r2, #31]
   11078:	b25b      	sxtb	r3, r3
   1107a:	4eaa      	ldr	r6, [pc, #680]	; (11324 <Radio_WriteConfiguration+0x2d0>)
   1107c:	4daa      	ldr	r5, [pc, #680]	; (11328 <Radio_WriteConfiguration+0x2d4>)
   1107e:	2a00      	cmp	r2, #0
   11080:	d000      	beq.n	11084 <Radio_WriteConfiguration+0x30>
   11082:	e0fc      	b.n	1127e <Radio_WriteConfiguration+0x22a>
   11084:	1c1f      	adds	r7, r3, #0
   11086:	2b0f      	cmp	r3, #15
   11088:	dc00      	bgt.n	1108c <Radio_WriteConfiguration+0x38>
   1108a:	e0ec      	b.n	11266 <Radio_WriteConfiguration+0x212>
   1108c:	270f      	movs	r7, #15
   1108e:	b27b      	sxtb	r3, r7
   11090:	204d      	movs	r0, #77	; 0x4d
   11092:	9301      	str	r3, [sp, #4]
   11094:	47b0      	blx	r6
   11096:	21f8      	movs	r1, #248	; 0xf8
   11098:	4008      	ands	r0, r1
   1109a:	39f4      	subs	r1, #244	; 0xf4
   1109c:	4301      	orrs	r1, r0
   1109e:	204d      	movs	r0, #77	; 0x4d
   110a0:	47a8      	blx	r5
   110a2:	b27b      	sxtb	r3, r7
   110a4:	2b00      	cmp	r3, #0
   110a6:	db00      	blt.n	110aa <Radio_WriteConfiguration+0x56>
   110a8:	e0e4      	b.n	11274 <Radio_WriteConfiguration+0x220>
   110aa:	3703      	adds	r7, #3
   110ac:	b2f9      	uxtb	r1, r7
   110ae:	2720      	movs	r7, #32
   110b0:	4339      	orrs	r1, r7
   110b2:	2009      	movs	r0, #9
   110b4:	47a8      	blx	r5
   110b6:	0023      	movs	r3, r4
   110b8:	3334      	adds	r3, #52	; 0x34
   110ba:	781f      	ldrb	r7, [r3, #0]
   110bc:	2f01      	cmp	r7, #1
   110be:	d000      	beq.n	110c2 <Radio_WriteConfiguration+0x6e>
   110c0:	e144      	b.n	1134c <Radio_WriteConfiguration+0x2f8>
   110c2:	7e21      	ldrb	r1, [r4, #24]
   110c4:	2039      	movs	r0, #57	; 0x39
   110c6:	47a8      	blx	r5
   110c8:	4b98      	ldr	r3, [pc, #608]	; (1132c <Radio_WriteConfiguration+0x2d8>)
   110ca:	201d      	movs	r0, #29
   110cc:	7819      	ldrb	r1, [r3, #0]
   110ce:	0023      	movs	r3, r4
   110d0:	3333      	adds	r3, #51	; 0x33
   110d2:	781b      	ldrb	r3, [r3, #0]
   110d4:	0109      	lsls	r1, r1, #4
   110d6:	005b      	lsls	r3, r3, #1
   110d8:	4319      	orrs	r1, r3
   110da:	1de3      	adds	r3, r4, #7
   110dc:	7fdb      	ldrb	r3, [r3, #31]
   110de:	401f      	ands	r7, r3
   110e0:	4339      	orrs	r1, r7
   110e2:	b2c9      	uxtb	r1, r1
   110e4:	47a8      	blx	r5
   110e6:	1d23      	adds	r3, r4, #4
   110e8:	7fd9      	ldrb	r1, [r3, #31]
   110ea:	2304      	movs	r3, #4
   110ec:	0089      	lsls	r1, r1, #2
   110ee:	4019      	ands	r1, r3
   110f0:	0023      	movs	r3, r4
   110f2:	3335      	adds	r3, #53	; 0x35
   110f4:	781b      	ldrb	r3, [r3, #0]
   110f6:	201e      	movs	r0, #30
   110f8:	011b      	lsls	r3, r3, #4
   110fa:	4319      	orrs	r1, r3
   110fc:	9b02      	ldr	r3, [sp, #8]
   110fe:	059b      	lsls	r3, r3, #22
   11100:	0f9b      	lsrs	r3, r3, #30
   11102:	4319      	orrs	r1, r3
   11104:	b2c9      	uxtb	r1, r1
   11106:	47a8      	blx	r5
   11108:	2300      	movs	r3, #0
   1110a:	8ae1      	ldrh	r1, [r4, #22]
   1110c:	4299      	cmp	r1, r3
   1110e:	d011      	beq.n	11134 <Radio_WriteConfiguration+0xe0>
   11110:	4a86      	ldr	r2, [pc, #536]	; (1132c <Radio_WriteConfiguration+0x2d8>)
   11112:	7812      	ldrb	r2, [r2, #0]
   11114:	2a08      	cmp	r2, #8
   11116:	d100      	bne.n	1111a <Radio_WriteConfiguration+0xc6>
   11118:	e0e4      	b.n	112e4 <Radio_WriteConfiguration+0x290>
   1111a:	2a09      	cmp	r2, #9
   1111c:	d100      	bne.n	11120 <Radio_WriteConfiguration+0xcc>
   1111e:	e0e3      	b.n	112e8 <Radio_WriteConfiguration+0x294>
   11120:	2a07      	cmp	r2, #7
   11122:	d000      	beq.n	11126 <Radio_WriteConfiguration+0xd2>
   11124:	e0e3      	b.n	112ee <Radio_WriteConfiguration+0x29a>
   11126:	337d      	adds	r3, #125	; 0x7d
   11128:	4359      	muls	r1, r3
   1112a:	0023      	movs	r3, r4
   1112c:	3335      	adds	r3, #53	; 0x35
   1112e:	781b      	ldrb	r3, [r3, #0]
   11130:	40d9      	lsrs	r1, r3
   11132:	000b      	movs	r3, r1
   11134:	b2d9      	uxtb	r1, r3
   11136:	2024      	movs	r0, #36	; 0x24
   11138:	4d7b      	ldr	r5, [pc, #492]	; (11328 <Radio_WriteConfiguration+0x2d4>)
   1113a:	47a8      	blx	r5
   1113c:	466b      	mov	r3, sp
   1113e:	201f      	movs	r0, #31
   11140:	7a19      	ldrb	r1, [r3, #8]
   11142:	47a8      	blx	r5
   11144:	2026      	movs	r0, #38	; 0x26
   11146:	47b0      	blx	r6
   11148:	0023      	movs	r3, r4
   1114a:	3335      	adds	r3, #53	; 0x35
   1114c:	781b      	ldrb	r3, [r3, #0]
   1114e:	2b0c      	cmp	r3, #12
   11150:	d105      	bne.n	1115e <Radio_WriteConfiguration+0x10a>
   11152:	0023      	movs	r3, r4
   11154:	3336      	adds	r3, #54	; 0x36
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	3b07      	subs	r3, #7
   1115a:	2b01      	cmp	r3, #1
   1115c:	d906      	bls.n	1116c <Radio_WriteConfiguration+0x118>
   1115e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11160:	4b73      	ldr	r3, [pc, #460]	; (11330 <Radio_WriteConfiguration+0x2dc>)
   11162:	4013      	ands	r3, r2
   11164:	4a73      	ldr	r2, [pc, #460]	; (11334 <Radio_WriteConfiguration+0x2e0>)
   11166:	4293      	cmp	r3, r2
   11168:	d000      	beq.n	1116c <Radio_WriteConfiguration+0x118>
   1116a:	e0c2      	b.n	112f2 <Radio_WriteConfiguration+0x29e>
   1116c:	2108      	movs	r1, #8
   1116e:	4308      	orrs	r0, r1
   11170:	b2c0      	uxtb	r0, r0
   11172:	2104      	movs	r1, #4
   11174:	4301      	orrs	r1, r0
   11176:	2026      	movs	r0, #38	; 0x26
   11178:	47a8      	blx	r5
   1117a:	2031      	movs	r0, #49	; 0x31
   1117c:	47b0      	blx	r6
   1117e:	21f8      	movs	r1, #248	; 0xf8
   11180:	4008      	ands	r0, r1
   11182:	39f5      	subs	r1, #245	; 0xf5
   11184:	4301      	orrs	r1, r0
   11186:	2031      	movs	r0, #49	; 0x31
   11188:	47a8      	blx	r5
   1118a:	210a      	movs	r1, #10
   1118c:	2037      	movs	r0, #55	; 0x37
   1118e:	47a8      	blx	r5
   11190:	0023      	movs	r3, r4
   11192:	3331      	adds	r3, #49	; 0x31
   11194:	781b      	ldrb	r3, [r3, #0]
   11196:	2b12      	cmp	r3, #18
   11198:	d11e      	bne.n	111d8 <Radio_WriteConfiguration+0x184>
   1119a:	0023      	movs	r3, r4
   1119c:	3336      	adds	r3, #54	; 0x36
   1119e:	781b      	ldrb	r3, [r3, #0]
   111a0:	3b07      	subs	r3, #7
   111a2:	2b01      	cmp	r3, #1
   111a4:	d80b      	bhi.n	111be <Radio_WriteConfiguration+0x16a>
   111a6:	2031      	movs	r0, #49	; 0x31
   111a8:	47b0      	blx	r6
   111aa:	217f      	movs	r1, #127	; 0x7f
   111ac:	4001      	ands	r1, r0
   111ae:	2031      	movs	r0, #49	; 0x31
   111b0:	47a8      	blx	r5
   111b2:	2140      	movs	r1, #64	; 0x40
   111b4:	202f      	movs	r0, #47	; 0x2f
   111b6:	47a8      	blx	r5
   111b8:	2100      	movs	r1, #0
   111ba:	2030      	movs	r0, #48	; 0x30
   111bc:	47a8      	blx	r5
   111be:	0023      	movs	r3, r4
   111c0:	3336      	adds	r3, #54	; 0x36
   111c2:	781b      	ldrb	r3, [r3, #0]
   111c4:	2b09      	cmp	r3, #9
   111c6:	d107      	bne.n	111d8 <Radio_WriteConfiguration+0x184>
   111c8:	2031      	movs	r0, #49	; 0x31
   111ca:	47b0      	blx	r6
   111cc:	2180      	movs	r1, #128	; 0x80
   111ce:	4249      	negs	r1, r1
   111d0:	4301      	orrs	r1, r0
   111d2:	b2c9      	uxtb	r1, r1
   111d4:	2031      	movs	r0, #49	; 0x31
   111d6:	47a8      	blx	r5
   111d8:	2033      	movs	r0, #51	; 0x33
   111da:	47b0      	blx	r6
   111dc:	1da3      	adds	r3, r4, #6
   111de:	7fd9      	ldrb	r1, [r3, #31]
   111e0:	2340      	movs	r3, #64	; 0x40
   111e2:	0189      	lsls	r1, r1, #6
   111e4:	4398      	bics	r0, r3
   111e6:	4019      	ands	r1, r3
   111e8:	4301      	orrs	r1, r0
   111ea:	b2c9      	uxtb	r1, r1
   111ec:	2033      	movs	r0, #51	; 0x33
   111ee:	47a8      	blx	r5
   111f0:	8aa1      	ldrh	r1, [r4, #20]
   111f2:	2020      	movs	r0, #32
   111f4:	0a09      	lsrs	r1, r1, #8
   111f6:	47a8      	blx	r5
   111f8:	7d21      	ldrb	r1, [r4, #20]
   111fa:	2021      	movs	r0, #33	; 0x21
   111fc:	47a8      	blx	r5
   111fe:	2100      	movs	r1, #0
   11200:	200d      	movs	r0, #13
   11202:	47a8      	blx	r5
   11204:	2100      	movs	r1, #0
   11206:	200e      	movs	r0, #14
   11208:	47a8      	blx	r5
   1120a:	2100      	movs	r1, #0
   1120c:	200f      	movs	r0, #15
   1120e:	47a8      	blx	r5
   11210:	0023      	movs	r3, r4
   11212:	3331      	adds	r3, #49	; 0x31
   11214:	781b      	ldrb	r3, [r3, #0]
   11216:	2b12      	cmp	r3, #18
   11218:	d120      	bne.n	1125c <Radio_WriteConfiguration+0x208>
   1121a:	0023      	movs	r3, r4
   1121c:	3336      	adds	r3, #54	; 0x36
   1121e:	781b      	ldrb	r3, [r3, #0]
   11220:	2b09      	cmp	r3, #9
   11222:	d000      	beq.n	11226 <Radio_WriteConfiguration+0x1d2>
   11224:	e072      	b.n	1130c <Radio_WriteConfiguration+0x2b8>
   11226:	4a44      	ldr	r2, [pc, #272]	; (11338 <Radio_WriteConfiguration+0x2e4>)
   11228:	6823      	ldr	r3, [r4, #0]
   1122a:	1899      	adds	r1, r3, r2
   1122c:	4a43      	ldr	r2, [pc, #268]	; (1133c <Radio_WriteConfiguration+0x2e8>)
   1122e:	4291      	cmp	r1, r2
   11230:	d862      	bhi.n	112f8 <Radio_WriteConfiguration+0x2a4>
   11232:	2102      	movs	r1, #2
   11234:	2036      	movs	r0, #54	; 0x36
   11236:	47a8      	blx	r5
   11238:	2164      	movs	r1, #100	; 0x64
   1123a:	203a      	movs	r0, #58	; 0x3a
   1123c:	47a8      	blx	r5
   1123e:	0023      	movs	r3, r4
   11240:	3336      	adds	r3, #54	; 0x36
   11242:	781b      	ldrb	r3, [r3, #0]
   11244:	2165      	movs	r1, #101	; 0x65
   11246:	203a      	movs	r0, #58	; 0x3a
   11248:	2b09      	cmp	r3, #9
   1124a:	d162      	bne.n	11312 <Radio_WriteConfiguration+0x2be>
   1124c:	3406      	adds	r4, #6
   1124e:	7fe3      	ldrb	r3, [r4, #31]
   11250:	2b01      	cmp	r3, #1
   11252:	d15e      	bne.n	11312 <Radio_WriteConfiguration+0x2be>
   11254:	47a8      	blx	r5
   11256:	2119      	movs	r1, #25
   11258:	203b      	movs	r0, #59	; 0x3b
   1125a:	47a8      	blx	r5
   1125c:	21ff      	movs	r1, #255	; 0xff
   1125e:	2012      	movs	r0, #18
   11260:	47a8      	blx	r5
   11262:	b005      	add	sp, #20
   11264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11266:	b25b      	sxtb	r3, r3
   11268:	3303      	adds	r3, #3
   1126a:	db00      	blt.n	1126e <Radio_WriteConfiguration+0x21a>
   1126c:	e70f      	b.n	1108e <Radio_WriteConfiguration+0x3a>
   1126e:	4b34      	ldr	r3, [pc, #208]	; (11340 <Radio_WriteConfiguration+0x2ec>)
   11270:	781f      	ldrb	r7, [r3, #0]
   11272:	e70c      	b.n	1108e <Radio_WriteConfiguration+0x3a>
   11274:	2170      	movs	r1, #112	; 0x70
   11276:	9b01      	ldr	r3, [sp, #4]
   11278:	4319      	orrs	r1, r3
   1127a:	b2c9      	uxtb	r1, r1
   1127c:	e719      	b.n	110b2 <Radio_WriteConfiguration+0x5e>
   1127e:	2b01      	cmp	r3, #1
   11280:	dd07      	ble.n	11292 <Radio_WriteConfiguration+0x23e>
   11282:	2714      	movs	r7, #20
   11284:	2b13      	cmp	r3, #19
   11286:	dc06      	bgt.n	11296 <Radio_WriteConfiguration+0x242>
   11288:	1c1f      	adds	r7, r3, #0
   1128a:	2b11      	cmp	r3, #17
   1128c:	dd02      	ble.n	11294 <Radio_WriteConfiguration+0x240>
   1128e:	2711      	movs	r7, #17
   11290:	e000      	b.n	11294 <Radio_WriteConfiguration+0x240>
   11292:	2702      	movs	r7, #2
   11294:	b27f      	sxtb	r7, r7
   11296:	200b      	movs	r0, #11
   11298:	47b0      	blx	r6
   1129a:	9003      	str	r0, [sp, #12]
   1129c:	204d      	movs	r0, #77	; 0x4d
   1129e:	47b0      	blx	r6
   112a0:	2307      	movs	r3, #7
   112a2:	4398      	bics	r0, r3
   112a4:	b2c1      	uxtb	r1, r0
   112a6:	2f14      	cmp	r7, #20
   112a8:	d112      	bne.n	112d0 <Radio_WriteConfiguration+0x27c>
   112aa:	4319      	orrs	r1, r3
   112ac:	9b03      	ldr	r3, [sp, #12]
   112ae:	37cb      	adds	r7, #203	; 0xcb
   112b0:	403b      	ands	r3, r7
   112b2:	001f      	movs	r7, r3
   112b4:	230f      	movs	r3, #15
   112b6:	9301      	str	r3, [sp, #4]
   112b8:	204d      	movs	r0, #77	; 0x4d
   112ba:	47a8      	blx	r5
   112bc:	2180      	movs	r1, #128	; 0x80
   112be:	9b01      	ldr	r3, [sp, #4]
   112c0:	4249      	negs	r1, r1
   112c2:	4319      	orrs	r1, r3
   112c4:	b2c9      	uxtb	r1, r1
   112c6:	2009      	movs	r0, #9
   112c8:	47a8      	blx	r5
   112ca:	0039      	movs	r1, r7
   112cc:	200b      	movs	r0, #11
   112ce:	e6f1      	b.n	110b4 <Radio_WriteConfiguration+0x60>
   112d0:	3f02      	subs	r7, #2
   112d2:	b27b      	sxtb	r3, r7
   112d4:	2720      	movs	r7, #32
   112d6:	2004      	movs	r0, #4
   112d8:	9301      	str	r3, [sp, #4]
   112da:	9b03      	ldr	r3, [sp, #12]
   112dc:	4301      	orrs	r1, r0
   112de:	431f      	orrs	r7, r3
   112e0:	b2ff      	uxtb	r7, r7
   112e2:	e7e9      	b.n	112b8 <Radio_WriteConfiguration+0x264>
   112e4:	23fa      	movs	r3, #250	; 0xfa
   112e6:	e71f      	b.n	11128 <Radio_WriteConfiguration+0xd4>
   112e8:	23fa      	movs	r3, #250	; 0xfa
   112ea:	005b      	lsls	r3, r3, #1
   112ec:	e71c      	b.n	11128 <Radio_WriteConfiguration+0xd4>
   112ee:	0019      	movs	r1, r3
   112f0:	e71b      	b.n	1112a <Radio_WriteConfiguration+0xd6>
   112f2:	21f7      	movs	r1, #247	; 0xf7
   112f4:	4008      	ands	r0, r1
   112f6:	e73c      	b.n	11172 <Radio_WriteConfiguration+0x11e>
   112f8:	4a12      	ldr	r2, [pc, #72]	; (11344 <Radio_WriteConfiguration+0x2f0>)
   112fa:	189b      	adds	r3, r3, r2
   112fc:	4a12      	ldr	r2, [pc, #72]	; (11348 <Radio_WriteConfiguration+0x2f4>)
   112fe:	4293      	cmp	r3, r2
   11300:	d804      	bhi.n	1130c <Radio_WriteConfiguration+0x2b8>
   11302:	2102      	movs	r1, #2
   11304:	2036      	movs	r0, #54	; 0x36
   11306:	47a8      	blx	r5
   11308:	217f      	movs	r1, #127	; 0x7f
   1130a:	e796      	b.n	1123a <Radio_WriteConfiguration+0x1e6>
   1130c:	2103      	movs	r1, #3
   1130e:	2036      	movs	r0, #54	; 0x36
   11310:	e794      	b.n	1123c <Radio_WriteConfiguration+0x1e8>
   11312:	47a8      	blx	r5
   11314:	211d      	movs	r1, #29
   11316:	e79f      	b.n	11258 <Radio_WriteConfiguration+0x204>
   11318:	20001aac 	.word	0x20001aac
   1131c:	0000a549 	.word	0x0000a549
   11320:	0001100d 	.word	0x0001100d
   11324:	00003f2d 	.word	0x00003f2d
   11328:	00003f05 	.word	0x00003f05
   1132c:	20001ae2 	.word	0x20001ae2
   11330:	00ffff00 	.word	0x00ffff00
   11334:	00070b00 	.word	0x00070b00
   11338:	cc9eec80 	.word	0xcc9eec80
   1133c:	096ae380 	.word	0x096ae380
   11340:	0001dde0 	.word	0x0001dde0
   11344:	e78fe580 	.word	0xe78fe580
   11348:	06dac2c0 	.word	0x06dac2c0
   1134c:	6863      	ldr	r3, [r4, #4]
   1134e:	492c      	ldr	r1, [pc, #176]	; (11400 <Radio_WriteConfiguration+0x3ac>)
   11350:	0218      	lsls	r0, r3, #8
   11352:	4b2c      	ldr	r3, [pc, #176]	; (11404 <Radio_WriteConfiguration+0x3b0>)
   11354:	4798      	blx	r3
   11356:	0007      	movs	r7, r0
   11358:	0a01      	lsrs	r1, r0, #8
   1135a:	b2c9      	uxtb	r1, r1
   1135c:	2004      	movs	r0, #4
   1135e:	47a8      	blx	r5
   11360:	b2f9      	uxtb	r1, r7
   11362:	2005      	movs	r0, #5
   11364:	47a8      	blx	r5
   11366:	4b27      	ldr	r3, [pc, #156]	; (11404 <Radio_WriteConfiguration+0x3b0>)
   11368:	68a1      	ldr	r1, [r4, #8]
   1136a:	4827      	ldr	r0, [pc, #156]	; (11408 <Radio_WriteConfiguration+0x3b4>)
   1136c:	4798      	blx	r3
   1136e:	0007      	movs	r7, r0
   11370:	0a01      	lsrs	r1, r0, #8
   11372:	b2c9      	uxtb	r1, r1
   11374:	2002      	movs	r0, #2
   11376:	47a8      	blx	r5
   11378:	b2f9      	uxtb	r1, r7
   1137a:	2003      	movs	r0, #3
   1137c:	47a8      	blx	r5
   1137e:	2100      	movs	r1, #0
   11380:	205d      	movs	r0, #93	; 0x5d
   11382:	47a8      	blx	r5
   11384:	8aa1      	ldrh	r1, [r4, #20]
   11386:	2025      	movs	r0, #37	; 0x25
   11388:	0a09      	lsrs	r1, r1, #8
   1138a:	47a8      	blx	r5
   1138c:	7d21      	ldrb	r1, [r4, #20]
   1138e:	2026      	movs	r0, #38	; 0x26
   11390:	47a8      	blx	r5
   11392:	219e      	movs	r1, #158	; 0x9e
   11394:	200d      	movs	r0, #13
   11396:	47a8      	blx	r5
   11398:	21a0      	movs	r1, #160	; 0xa0
   1139a:	2035      	movs	r0, #53	; 0x35
   1139c:	47a8      	blx	r5
   1139e:	200a      	movs	r0, #10
   113a0:	47b0      	blx	r6
   113a2:	0023      	movs	r3, r4
   113a4:	3337      	adds	r3, #55	; 0x37
   113a6:	7819      	ldrb	r1, [r3, #0]
   113a8:	2360      	movs	r3, #96	; 0x60
   113aa:	0149      	lsls	r1, r1, #5
   113ac:	4398      	bics	r0, r3
   113ae:	4301      	orrs	r1, r0
   113b0:	b2c9      	uxtb	r1, r1
   113b2:	200a      	movs	r0, #10
   113b4:	47a8      	blx	r5
   113b6:	1d23      	adds	r3, r4, #4
   113b8:	7fdb      	ldrb	r3, [r3, #31]
   113ba:	21c0      	movs	r1, #192	; 0xc0
   113bc:	2b00      	cmp	r3, #0
   113be:	d000      	beq.n	113c2 <Radio_WriteConfiguration+0x36e>
   113c0:	3110      	adds	r1, #16
   113c2:	2030      	movs	r0, #48	; 0x30
   113c4:	47a8      	blx	r5
   113c6:	2600      	movs	r6, #0
   113c8:	1ca3      	adds	r3, r4, #2
   113ca:	7fd9      	ldrb	r1, [r3, #31]
   113cc:	428e      	cmp	r6, r1
   113ce:	d30d      	bcc.n	113ec <Radio_WriteConfiguration+0x398>
   113d0:	2900      	cmp	r1, #0
   113d2:	d003      	beq.n	113dc <Radio_WriteConfiguration+0x388>
   113d4:	2310      	movs	r3, #16
   113d6:	3901      	subs	r1, #1
   113d8:	4319      	orrs	r1, r3
   113da:	b2c9      	uxtb	r1, r1
   113dc:	2027      	movs	r0, #39	; 0x27
   113de:	47a8      	blx	r5
   113e0:	21ff      	movs	r1, #255	; 0xff
   113e2:	203e      	movs	r0, #62	; 0x3e
   113e4:	47a8      	blx	r5
   113e6:	21ff      	movs	r1, #255	; 0xff
   113e8:	203f      	movs	r0, #63	; 0x3f
   113ea:	e739      	b.n	11260 <Radio_WriteConfiguration+0x20c>
   113ec:	0030      	movs	r0, r6
   113ee:	19a3      	adds	r3, r4, r6
   113f0:	3028      	adds	r0, #40	; 0x28
   113f2:	7e59      	ldrb	r1, [r3, #25]
   113f4:	b2c0      	uxtb	r0, r0
   113f6:	3601      	adds	r6, #1
   113f8:	47a8      	blx	r5
   113fa:	b2f6      	uxtb	r6, r6
   113fc:	e7e4      	b.n	113c8 <Radio_WriteConfiguration+0x374>
   113fe:	46c0      	nop			; (mov r8, r8)
   11400:	00003d09 	.word	0x00003d09
   11404:	0001270d 	.word	0x0001270d
   11408:	01e84800 	.word	0x01e84800

0001140c <RADIO_getMappingAndOpmode>:
   1140c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1140e:	0006      	movs	r6, r0
   11410:	4d06      	ldr	r5, [pc, #24]	; (1142c <RADIO_getMappingAndOpmode+0x20>)
   11412:	2040      	movs	r0, #64	; 0x40
   11414:	001f      	movs	r7, r3
   11416:	0014      	movs	r4, r2
   11418:	9101      	str	r1, [sp, #4]
   1141a:	47a8      	blx	r5
   1141c:	4004      	ands	r4, r0
   1141e:	413c      	asrs	r4, r7
   11420:	2001      	movs	r0, #1
   11422:	7034      	strb	r4, [r6, #0]
   11424:	47a8      	blx	r5
   11426:	9b01      	ldr	r3, [sp, #4]
   11428:	7018      	strb	r0, [r3, #0]
   1142a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1142c:	00003f2d 	.word	0x00003f2d

00011430 <RADIO_UnhandledInterrupt.part.0>:
   11430:	b510      	push	{r4, lr}
   11432:	21ff      	movs	r1, #255	; 0xff
   11434:	2012      	movs	r0, #18
   11436:	4b01      	ldr	r3, [pc, #4]	; (1143c <RADIO_UnhandledInterrupt.part.0+0xc>)
   11438:	4798      	blx	r3
   1143a:	bd10      	pop	{r4, pc}
   1143c:	00003f05 	.word	0x00003f05

00011440 <RADIO_UnhandledInterrupt>:
   11440:	b510      	push	{r4, lr}
   11442:	2801      	cmp	r0, #1
   11444:	d102      	bne.n	1144c <RADIO_UnhandledInterrupt+0xc>
   11446:	4b05      	ldr	r3, [pc, #20]	; (1145c <RADIO_UnhandledInterrupt+0x1c>)
   11448:	4798      	blx	r3
   1144a:	bd10      	pop	{r4, pc}
   1144c:	21ff      	movs	r1, #255	; 0xff
   1144e:	203e      	movs	r0, #62	; 0x3e
   11450:	4c03      	ldr	r4, [pc, #12]	; (11460 <RADIO_UnhandledInterrupt+0x20>)
   11452:	47a0      	blx	r4
   11454:	21ff      	movs	r1, #255	; 0xff
   11456:	203f      	movs	r0, #63	; 0x3f
   11458:	47a0      	blx	r4
   1145a:	e7f6      	b.n	1144a <RADIO_UnhandledInterrupt+0xa>
   1145c:	00011431 	.word	0x00011431
   11460:	00003f05 	.word	0x00003f05

00011464 <RADIO_DIO0>:
   11464:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11466:	466b      	mov	r3, sp
   11468:	1ddc      	adds	r4, r3, #7
   1146a:	1d9d      	adds	r5, r3, #6
   1146c:	22c0      	movs	r2, #192	; 0xc0
   1146e:	2306      	movs	r3, #6
   11470:	0028      	movs	r0, r5
   11472:	0021      	movs	r1, r4
   11474:	4e12      	ldr	r6, [pc, #72]	; (114c0 <RADIO_DIO0+0x5c>)
   11476:	47b0      	blx	r6
   11478:	7823      	ldrb	r3, [r4, #0]
   1147a:	7828      	ldrb	r0, [r5, #0]
   1147c:	b25a      	sxtb	r2, r3
   1147e:	b2c0      	uxtb	r0, r0
   11480:	2a00      	cmp	r2, #0
   11482:	da0b      	bge.n	1149c <RADIO_DIO0+0x38>
   11484:	2800      	cmp	r0, #0
   11486:	d004      	beq.n	11492 <RADIO_DIO0+0x2e>
   11488:	2801      	cmp	r0, #1
   1148a:	d005      	beq.n	11498 <RADIO_DIO0+0x34>
   1148c:	4b0d      	ldr	r3, [pc, #52]	; (114c4 <RADIO_DIO0+0x60>)
   1148e:	4798      	blx	r3
   11490:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   11492:	4b0d      	ldr	r3, [pc, #52]	; (114c8 <RADIO_DIO0+0x64>)
   11494:	4798      	blx	r3
   11496:	e7fb      	b.n	11490 <RADIO_DIO0+0x2c>
   11498:	4b0c      	ldr	r3, [pc, #48]	; (114cc <RADIO_DIO0+0x68>)
   1149a:	e7fb      	b.n	11494 <RADIO_DIO0+0x30>
   1149c:	2800      	cmp	r0, #0
   1149e:	d10a      	bne.n	114b6 <RADIO_DIO0+0x52>
   114a0:	2207      	movs	r2, #7
   114a2:	4013      	ands	r3, r2
   114a4:	7023      	strb	r3, [r4, #0]
   114a6:	2b03      	cmp	r3, #3
   114a8:	d101      	bne.n	114ae <RADIO_DIO0+0x4a>
   114aa:	4b09      	ldr	r3, [pc, #36]	; (114d0 <RADIO_DIO0+0x6c>)
   114ac:	e7f2      	b.n	11494 <RADIO_DIO0+0x30>
   114ae:	2b05      	cmp	r3, #5
   114b0:	d102      	bne.n	114b8 <RADIO_DIO0+0x54>
   114b2:	4b08      	ldr	r3, [pc, #32]	; (114d4 <RADIO_DIO0+0x70>)
   114b4:	e7ee      	b.n	11494 <RADIO_DIO0+0x30>
   114b6:	2000      	movs	r0, #0
   114b8:	4b07      	ldr	r3, [pc, #28]	; (114d8 <RADIO_DIO0+0x74>)
   114ba:	4798      	blx	r3
   114bc:	e7e8      	b.n	11490 <RADIO_DIO0+0x2c>
   114be:	46c0      	nop			; (mov r8, r8)
   114c0:	0001140d 	.word	0x0001140d
   114c4:	00011431 	.word	0x00011431
   114c8:	00011be5 	.word	0x00011be5
   114cc:	00011af5 	.word	0x00011af5
   114d0:	00011b71 	.word	0x00011b71
   114d4:	00011c61 	.word	0x00011c61
   114d8:	00011441 	.word	0x00011441

000114dc <RADIO_DIO1>:
   114dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   114de:	466b      	mov	r3, sp
   114e0:	1ddc      	adds	r4, r3, #7
   114e2:	1d9d      	adds	r5, r3, #6
   114e4:	2230      	movs	r2, #48	; 0x30
   114e6:	2304      	movs	r3, #4
   114e8:	0021      	movs	r1, r4
   114ea:	0028      	movs	r0, r5
   114ec:	4e11      	ldr	r6, [pc, #68]	; (11534 <RADIO_DIO1+0x58>)
   114ee:	47b0      	blx	r6
   114f0:	7822      	ldrb	r2, [r4, #0]
   114f2:	782b      	ldrb	r3, [r5, #0]
   114f4:	b251      	sxtb	r1, r2
   114f6:	2900      	cmp	r1, #0
   114f8:	da0c      	bge.n	11514 <RADIO_DIO1+0x38>
   114fa:	b2db      	uxtb	r3, r3
   114fc:	2b00      	cmp	r3, #0
   114fe:	d004      	beq.n	1150a <RADIO_DIO1+0x2e>
   11500:	2b01      	cmp	r3, #1
   11502:	d005      	beq.n	11510 <RADIO_DIO1+0x34>
   11504:	4b0c      	ldr	r3, [pc, #48]	; (11538 <RADIO_DIO1+0x5c>)
   11506:	4798      	blx	r3
   11508:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1150a:	4b0c      	ldr	r3, [pc, #48]	; (1153c <RADIO_DIO1+0x60>)
   1150c:	4798      	blx	r3
   1150e:	e7fb      	b.n	11508 <RADIO_DIO1+0x2c>
   11510:	4b0b      	ldr	r3, [pc, #44]	; (11540 <RADIO_DIO1+0x64>)
   11512:	e7fb      	b.n	1150c <RADIO_DIO1+0x30>
   11514:	2107      	movs	r1, #7
   11516:	b2db      	uxtb	r3, r3
   11518:	400a      	ands	r2, r1
   1151a:	7022      	strb	r2, [r4, #0]
   1151c:	2b00      	cmp	r3, #0
   1151e:	d005      	beq.n	1152c <RADIO_DIO1+0x50>
   11520:	2b01      	cmp	r3, #1
   11522:	d1f1      	bne.n	11508 <RADIO_DIO1+0x2c>
   11524:	2a03      	cmp	r2, #3
   11526:	d1ef      	bne.n	11508 <RADIO_DIO1+0x2c>
   11528:	4b06      	ldr	r3, [pc, #24]	; (11544 <RADIO_DIO1+0x68>)
   1152a:	e7ef      	b.n	1150c <RADIO_DIO1+0x30>
   1152c:	4b06      	ldr	r3, [pc, #24]	; (11548 <RADIO_DIO1+0x6c>)
   1152e:	2a05      	cmp	r2, #5
   11530:	d1ea      	bne.n	11508 <RADIO_DIO1+0x2c>
   11532:	e7eb      	b.n	1150c <RADIO_DIO1+0x30>
   11534:	0001140d 	.word	0x0001140d
   11538:	00011431 	.word	0x00011431
   1153c:	00011a79 	.word	0x00011a79
   11540:	0000a62d 	.word	0x0000a62d
   11544:	000118a1 	.word	0x000118a1
   11548:	00011805 	.word	0x00011805

0001154c <RADIO_DIO2>:
   1154c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1154e:	466b      	mov	r3, sp
   11550:	1ddc      	adds	r4, r3, #7
   11552:	1d9d      	adds	r5, r3, #6
   11554:	220c      	movs	r2, #12
   11556:	2302      	movs	r3, #2
   11558:	0021      	movs	r1, r4
   1155a:	0028      	movs	r0, r5
   1155c:	4e0b      	ldr	r6, [pc, #44]	; (1158c <RADIO_DIO2+0x40>)
   1155e:	47b0      	blx	r6
   11560:	7823      	ldrb	r3, [r4, #0]
   11562:	782a      	ldrb	r2, [r5, #0]
   11564:	b259      	sxtb	r1, r3
   11566:	2900      	cmp	r1, #0
   11568:	da05      	bge.n	11576 <RADIO_DIO2+0x2a>
   1156a:	4b09      	ldr	r3, [pc, #36]	; (11590 <RADIO_DIO2+0x44>)
   1156c:	2a02      	cmp	r2, #2
   1156e:	d90a      	bls.n	11586 <RADIO_DIO2+0x3a>
   11570:	4b08      	ldr	r3, [pc, #32]	; (11594 <RADIO_DIO2+0x48>)
   11572:	4798      	blx	r3
   11574:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   11576:	2107      	movs	r1, #7
   11578:	400b      	ands	r3, r1
   1157a:	7023      	strb	r3, [r4, #0]
   1157c:	2a03      	cmp	r2, #3
   1157e:	d1f9      	bne.n	11574 <RADIO_DIO2+0x28>
   11580:	2b05      	cmp	r3, #5
   11582:	d1f7      	bne.n	11574 <RADIO_DIO2+0x28>
   11584:	4b04      	ldr	r3, [pc, #16]	; (11598 <RADIO_DIO2+0x4c>)
   11586:	4798      	blx	r3
   11588:	e7f4      	b.n	11574 <RADIO_DIO2+0x28>
   1158a:	46c0      	nop			; (mov r8, r8)
   1158c:	0001140d 	.word	0x0001140d
   11590:	0000a62d 	.word	0x0000a62d
   11594:	00011431 	.word	0x00011431
   11598:	000117d5 	.word	0x000117d5

0001159c <RADIO_DIO3>:
   1159c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1159e:	466b      	mov	r3, sp
   115a0:	4668      	mov	r0, sp
   115a2:	1ddc      	adds	r4, r3, #7
   115a4:	2203      	movs	r2, #3
   115a6:	2300      	movs	r3, #0
   115a8:	0021      	movs	r1, r4
   115aa:	3006      	adds	r0, #6
   115ac:	4d03      	ldr	r5, [pc, #12]	; (115bc <RADIO_DIO3+0x20>)
   115ae:	47a8      	blx	r5
   115b0:	7823      	ldrb	r3, [r4, #0]
   115b2:	2b7f      	cmp	r3, #127	; 0x7f
   115b4:	d901      	bls.n	115ba <RADIO_DIO3+0x1e>
   115b6:	4b02      	ldr	r3, [pc, #8]	; (115c0 <RADIO_DIO3+0x24>)
   115b8:	4798      	blx	r3
   115ba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   115bc:	0001140d 	.word	0x0001140d
   115c0:	00011431 	.word	0x00011431

000115c4 <RADIO_DIO4>:
   115c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   115c6:	466b      	mov	r3, sp
   115c8:	4668      	mov	r0, sp
   115ca:	1ddc      	adds	r4, r3, #7
   115cc:	2306      	movs	r3, #6
   115ce:	22c0      	movs	r2, #192	; 0xc0
   115d0:	18c0      	adds	r0, r0, r3
   115d2:	0021      	movs	r1, r4
   115d4:	4d03      	ldr	r5, [pc, #12]	; (115e4 <RADIO_DIO4+0x20>)
   115d6:	47a8      	blx	r5
   115d8:	7823      	ldrb	r3, [r4, #0]
   115da:	2b7f      	cmp	r3, #127	; 0x7f
   115dc:	d901      	bls.n	115e2 <RADIO_DIO4+0x1e>
   115de:	4b02      	ldr	r3, [pc, #8]	; (115e8 <RADIO_DIO4+0x24>)
   115e0:	4798      	blx	r3
   115e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   115e4:	0001140d 	.word	0x0001140d
   115e8:	00011431 	.word	0x00011431

000115ec <RADIO_DIO5>:
   115ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   115ee:	466b      	mov	r3, sp
   115f0:	4668      	mov	r0, sp
   115f2:	1ddc      	adds	r4, r3, #7
   115f4:	2230      	movs	r2, #48	; 0x30
   115f6:	2304      	movs	r3, #4
   115f8:	0021      	movs	r1, r4
   115fa:	3006      	adds	r0, #6
   115fc:	4d03      	ldr	r5, [pc, #12]	; (1160c <RADIO_DIO5+0x20>)
   115fe:	47a8      	blx	r5
   11600:	7823      	ldrb	r3, [r4, #0]
   11602:	2b7f      	cmp	r3, #127	; 0x7f
   11604:	d901      	bls.n	1160a <RADIO_DIO5+0x1e>
   11606:	4b02      	ldr	r3, [pc, #8]	; (11610 <RADIO_DIO5+0x24>)
   11608:	4798      	blx	r3
   1160a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1160c:	0001140d 	.word	0x0001140d
   11610:	00011431 	.word	0x00011431

00011614 <radioPostTask>:
   11614:	b510      	push	{r4, lr}
   11616:	0004      	movs	r4, r0
   11618:	4b05      	ldr	r3, [pc, #20]	; (11630 <radioPostTask+0x1c>)
   1161a:	4798      	blx	r3
   1161c:	4b05      	ldr	r3, [pc, #20]	; (11634 <radioPostTask+0x20>)
   1161e:	8818      	ldrh	r0, [r3, #0]
   11620:	4320      	orrs	r0, r4
   11622:	8018      	strh	r0, [r3, #0]
   11624:	4b04      	ldr	r3, [pc, #16]	; (11638 <radioPostTask+0x24>)
   11626:	4798      	blx	r3
   11628:	2002      	movs	r0, #2
   1162a:	4b04      	ldr	r3, [pc, #16]	; (1163c <radioPostTask+0x28>)
   1162c:	4798      	blx	r3
   1162e:	bd10      	pop	{r4, pc}
   11630:	00004165 	.word	0x00004165
   11634:	200010ae 	.word	0x200010ae
   11638:	00004171 	.word	0x00004171
   1163c:	0000a511 	.word	0x0000a511

00011640 <radioClearTask>:
   11640:	b510      	push	{r4, lr}
   11642:	0004      	movs	r4, r0
   11644:	4b04      	ldr	r3, [pc, #16]	; (11658 <radioClearTask+0x18>)
   11646:	4798      	blx	r3
   11648:	4a04      	ldr	r2, [pc, #16]	; (1165c <radioClearTask+0x1c>)
   1164a:	8813      	ldrh	r3, [r2, #0]
   1164c:	43a3      	bics	r3, r4
   1164e:	8013      	strh	r3, [r2, #0]
   11650:	4b03      	ldr	r3, [pc, #12]	; (11660 <radioClearTask+0x20>)
   11652:	4798      	blx	r3
   11654:	bd10      	pop	{r4, pc}
   11656:	46c0      	nop			; (mov r8, r8)
   11658:	00004165 	.word	0x00004165
   1165c:	200010ae 	.word	0x200010ae
   11660:	00004171 	.word	0x00004171

00011664 <RADIO_TaskHandler>:
   11664:	b570      	push	{r4, r5, r6, lr}
   11666:	2400      	movs	r4, #0
   11668:	4d10      	ldr	r5, [pc, #64]	; (116ac <RADIO_TaskHandler+0x48>)
   1166a:	2601      	movs	r6, #1
   1166c:	882b      	ldrh	r3, [r5, #0]
   1166e:	42a3      	cmp	r3, r4
   11670:	d015      	beq.n	1169e <RADIO_TaskHandler+0x3a>
   11672:	882b      	ldrh	r3, [r5, #0]
   11674:	4123      	asrs	r3, r4
   11676:	4233      	tst	r3, r6
   11678:	d013      	beq.n	116a2 <RADIO_TaskHandler+0x3e>
   1167a:	40a6      	lsls	r6, r4
   1167c:	4b0c      	ldr	r3, [pc, #48]	; (116b0 <RADIO_TaskHandler+0x4c>)
   1167e:	4798      	blx	r3
   11680:	882b      	ldrh	r3, [r5, #0]
   11682:	00a4      	lsls	r4, r4, #2
   11684:	43b3      	bics	r3, r6
   11686:	802b      	strh	r3, [r5, #0]
   11688:	4b0a      	ldr	r3, [pc, #40]	; (116b4 <RADIO_TaskHandler+0x50>)
   1168a:	4798      	blx	r3
   1168c:	4b0a      	ldr	r3, [pc, #40]	; (116b8 <RADIO_TaskHandler+0x54>)
   1168e:	58e3      	ldr	r3, [r4, r3]
   11690:	4798      	blx	r3
   11692:	882b      	ldrh	r3, [r5, #0]
   11694:	2b00      	cmp	r3, #0
   11696:	d002      	beq.n	1169e <RADIO_TaskHandler+0x3a>
   11698:	2002      	movs	r0, #2
   1169a:	4b08      	ldr	r3, [pc, #32]	; (116bc <RADIO_TaskHandler+0x58>)
   1169c:	4798      	blx	r3
   1169e:	2000      	movs	r0, #0
   116a0:	bd70      	pop	{r4, r5, r6, pc}
   116a2:	3401      	adds	r4, #1
   116a4:	2c05      	cmp	r4, #5
   116a6:	d1e4      	bne.n	11672 <RADIO_TaskHandler+0xe>
   116a8:	e7f9      	b.n	1169e <RADIO_TaskHandler+0x3a>
   116aa:	46c0      	nop			; (mov r8, r8)
   116ac:	200010ae 	.word	0x200010ae
   116b0:	00004165 	.word	0x00004165
   116b4:	00004171 	.word	0x00004171
   116b8:	0001dde4 	.word	0x0001dde4
   116bc:	0000a511 	.word	0x0000a511

000116c0 <RadioSetState>:
   116c0:	4b01      	ldr	r3, [pc, #4]	; (116c8 <RadioSetState+0x8>)
   116c2:	7018      	strb	r0, [r3, #0]
   116c4:	4770      	bx	lr
   116c6:	46c0      	nop			; (mov r8, r8)
   116c8:	2000203f 	.word	0x2000203f

000116cc <RADIO_GetState>:
   116cc:	4b01      	ldr	r3, [pc, #4]	; (116d4 <RADIO_GetState+0x8>)
   116ce:	7818      	ldrb	r0, [r3, #0]
   116d0:	b2c0      	uxtb	r0, r0
   116d2:	4770      	bx	lr
   116d4:	2000203f 	.word	0x2000203f

000116d8 <RADIO_SetCallbackBitmask>:
   116d8:	4a02      	ldr	r2, [pc, #8]	; (116e4 <RADIO_SetCallbackBitmask+0xc>)
   116da:	7813      	ldrb	r3, [r2, #0]
   116dc:	4318      	orrs	r0, r3
   116de:	7010      	strb	r0, [r2, #0]
   116e0:	4770      	bx	lr
   116e2:	46c0      	nop			; (mov r8, r8)
   116e4:	2000203e 	.word	0x2000203e

000116e8 <RADIO_Transmit>:
   116e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116ea:	4e12      	ldr	r6, [pc, #72]	; (11734 <RADIO_Transmit+0x4c>)
   116ec:	0007      	movs	r7, r0
   116ee:	7833      	ldrb	r3, [r6, #0]
   116f0:	2404      	movs	r4, #4
   116f2:	2b01      	cmp	r3, #1
   116f4:	d115      	bne.n	11722 <RADIO_Transmit+0x3a>
   116f6:	4d10      	ldr	r5, [pc, #64]	; (11738 <RADIO_Transmit+0x50>)
   116f8:	002b      	movs	r3, r5
   116fa:	332f      	adds	r3, #47	; 0x2f
   116fc:	7818      	ldrb	r0, [r3, #0]
   116fe:	4b0f      	ldr	r3, [pc, #60]	; (1173c <RADIO_Transmit+0x54>)
   11700:	4798      	blx	r3
   11702:	783a      	ldrb	r2, [r7, #0]
   11704:	4b0e      	ldr	r3, [pc, #56]	; (11740 <RADIO_Transmit+0x58>)
   11706:	3541      	adds	r5, #65	; 0x41
   11708:	701a      	strb	r2, [r3, #0]
   1170a:	4b0e      	ldr	r3, [pc, #56]	; (11744 <RADIO_Transmit+0x5c>)
   1170c:	687a      	ldr	r2, [r7, #4]
   1170e:	601a      	str	r2, [r3, #0]
   11710:	782d      	ldrb	r5, [r5, #0]
   11712:	4b0d      	ldr	r3, [pc, #52]	; (11748 <RADIO_Transmit+0x60>)
   11714:	2d00      	cmp	r5, #0
   11716:	d006      	beq.n	11726 <RADIO_Transmit+0x3e>
   11718:	2203      	movs	r2, #3
   1171a:	2010      	movs	r0, #16
   1171c:	7032      	strb	r2, [r6, #0]
   1171e:	2400      	movs	r4, #0
   11720:	4798      	blx	r3
   11722:	0020      	movs	r0, r4
   11724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11726:	2202      	movs	r2, #2
   11728:	0020      	movs	r0, r4
   1172a:	7032      	strb	r2, [r6, #0]
   1172c:	002c      	movs	r4, r5
   1172e:	4798      	blx	r3
   11730:	e7f7      	b.n	11722 <RADIO_Transmit+0x3a>
   11732:	46c0      	nop			; (mov r8, r8)
   11734:	2000203f 	.word	0x2000203f
   11738:	20001aac 	.word	0x20001aac
   1173c:	0000a1f1 	.word	0x0000a1f1
   11740:	200010c4 	.word	0x200010c4
   11744:	200010c0 	.word	0x200010c0
   11748:	00011615 	.word	0x00011615

0001174c <Radio_FSKTxPayloadHandler>:
   1174c:	b570      	push	{r4, r5, r6, lr}
   1174e:	4b1c      	ldr	r3, [pc, #112]	; (117c0 <Radio_FSKTxPayloadHandler+0x74>)
   11750:	000d      	movs	r5, r1
   11752:	4798      	blx	r3
   11754:	4c1b      	ldr	r4, [pc, #108]	; (117c4 <Radio_FSKTxPayloadHandler+0x78>)
   11756:	3457      	adds	r4, #87	; 0x57
   11758:	7820      	ldrb	r0, [r4, #0]
   1175a:	b2c0      	uxtb	r0, r0
   1175c:	2800      	cmp	r0, #0
   1175e:	d112      	bne.n	11786 <Radio_FSKTxPayloadHandler+0x3a>
   11760:	2d00      	cmp	r5, #0
   11762:	d007      	beq.n	11774 <Radio_FSKTxPayloadHandler+0x28>
   11764:	4918      	ldr	r1, [pc, #96]	; (117c8 <Radio_FSKTxPayloadHandler+0x7c>)
   11766:	4b19      	ldr	r3, [pc, #100]	; (117cc <Radio_FSKTxPayloadHandler+0x80>)
   11768:	2d13      	cmp	r5, #19
   1176a:	d806      	bhi.n	1177a <Radio_FSKTxPayloadHandler+0x2e>
   1176c:	002a      	movs	r2, r5
   1176e:	6809      	ldr	r1, [r1, #0]
   11770:	4798      	blx	r3
   11772:	7025      	strb	r5, [r4, #0]
   11774:	4b16      	ldr	r3, [pc, #88]	; (117d0 <Radio_FSKTxPayloadHandler+0x84>)
   11776:	4798      	blx	r3
   11778:	bd70      	pop	{r4, r5, r6, pc}
   1177a:	2214      	movs	r2, #20
   1177c:	6809      	ldr	r1, [r1, #0]
   1177e:	4798      	blx	r3
   11780:	2314      	movs	r3, #20
   11782:	7023      	strb	r3, [r4, #0]
   11784:	e7f6      	b.n	11774 <Radio_FSKTxPayloadHandler+0x28>
   11786:	7823      	ldrb	r3, [r4, #0]
   11788:	429d      	cmp	r5, r3
   1178a:	d0f3      	beq.n	11774 <Radio_FSKTxPayloadHandler+0x28>
   1178c:	7822      	ldrb	r2, [r4, #0]
   1178e:	480e      	ldr	r0, [pc, #56]	; (117c8 <Radio_FSKTxPayloadHandler+0x7c>)
   11790:	1aaa      	subs	r2, r5, r2
   11792:	b2d2      	uxtb	r2, r2
   11794:	4b0d      	ldr	r3, [pc, #52]	; (117cc <Radio_FSKTxPayloadHandler+0x80>)
   11796:	2a14      	cmp	r2, #20
   11798:	d807      	bhi.n	117aa <Radio_FSKTxPayloadHandler+0x5e>
   1179a:	7826      	ldrb	r6, [r4, #0]
   1179c:	7822      	ldrb	r2, [r4, #0]
   1179e:	6801      	ldr	r1, [r0, #0]
   117a0:	1aaa      	subs	r2, r5, r2
   117a2:	b2d2      	uxtb	r2, r2
   117a4:	1989      	adds	r1, r1, r6
   117a6:	2000      	movs	r0, #0
   117a8:	e7e2      	b.n	11770 <Radio_FSKTxPayloadHandler+0x24>
   117aa:	7822      	ldrb	r2, [r4, #0]
   117ac:	6801      	ldr	r1, [r0, #0]
   117ae:	2000      	movs	r0, #0
   117b0:	1889      	adds	r1, r1, r2
   117b2:	2214      	movs	r2, #20
   117b4:	4798      	blx	r3
   117b6:	7823      	ldrb	r3, [r4, #0]
   117b8:	3314      	adds	r3, #20
   117ba:	b2db      	uxtb	r3, r3
   117bc:	e7e1      	b.n	11782 <Radio_FSKTxPayloadHandler+0x36>
   117be:	46c0      	nop			; (mov r8, r8)
   117c0:	000001ad 	.word	0x000001ad
   117c4:	20001aac 	.word	0x20001aac
   117c8:	200010c0 	.word	0x200010c0
   117cc:	00003f59 	.word	0x00003f59
   117d0:	000001ed 	.word	0x000001ed

000117d4 <RADIO_FSKSyncAddr>:
   117d4:	4b08      	ldr	r3, [pc, #32]	; (117f8 <RADIO_FSKSyncAddr+0x24>)
   117d6:	b510      	push	{r4, lr}
   117d8:	4798      	blx	r3
   117da:	4b08      	ldr	r3, [pc, #32]	; (117fc <RADIO_FSKSyncAddr+0x28>)
   117dc:	001a      	movs	r2, r3
   117de:	3234      	adds	r2, #52	; 0x34
   117e0:	7812      	ldrb	r2, [r2, #0]
   117e2:	2a00      	cmp	r2, #0
   117e4:	d104      	bne.n	117f0 <RADIO_FSKSyncAddr+0x1c>
   117e6:	0019      	movs	r1, r3
   117e8:	3357      	adds	r3, #87	; 0x57
   117ea:	312c      	adds	r1, #44	; 0x2c
   117ec:	700a      	strb	r2, [r1, #0]
   117ee:	701a      	strb	r2, [r3, #0]
   117f0:	4b03      	ldr	r3, [pc, #12]	; (11800 <RADIO_FSKSyncAddr+0x2c>)
   117f2:	4798      	blx	r3
   117f4:	bd10      	pop	{r4, pc}
   117f6:	46c0      	nop			; (mov r8, r8)
   117f8:	000001ad 	.word	0x000001ad
   117fc:	20001aac 	.word	0x20001aac
   11800:	000001ed 	.word	0x000001ed

00011804 <RADIO_FSKFifoLevel>:
   11804:	b570      	push	{r4, r5, r6, lr}
   11806:	4b22      	ldr	r3, [pc, #136]	; (11890 <RADIO_FSKFifoLevel+0x8c>)
   11808:	4798      	blx	r3
   1180a:	4d22      	ldr	r5, [pc, #136]	; (11894 <RADIO_FSKFifoLevel+0x90>)
   1180c:	002a      	movs	r2, r5
   1180e:	002b      	movs	r3, r5
   11810:	322c      	adds	r2, #44	; 0x2c
   11812:	3357      	adds	r3, #87	; 0x57
   11814:	7810      	ldrb	r0, [r2, #0]
   11816:	7819      	ldrb	r1, [r3, #0]
   11818:	4288      	cmp	r0, r1
   1181a:	d105      	bne.n	11828 <RADIO_FSKFifoLevel+0x24>
   1181c:	7812      	ldrb	r2, [r2, #0]
   1181e:	2a00      	cmp	r2, #0
   11820:	d002      	beq.n	11828 <RADIO_FSKFifoLevel+0x24>
   11822:	781b      	ldrb	r3, [r3, #0]
   11824:	2b00      	cmp	r3, #0
   11826:	d11f      	bne.n	11868 <RADIO_FSKFifoLevel+0x64>
   11828:	0029      	movs	r1, r5
   1182a:	312c      	adds	r1, #44	; 0x2c
   1182c:	7808      	ldrb	r0, [r1, #0]
   1182e:	b2c0      	uxtb	r0, r0
   11830:	2800      	cmp	r0, #0
   11832:	d102      	bne.n	1183a <RADIO_FSKFifoLevel+0x36>
   11834:	2201      	movs	r2, #1
   11836:	4b18      	ldr	r3, [pc, #96]	; (11898 <RADIO_FSKFifoLevel+0x94>)
   11838:	4798      	blx	r3
   1183a:	002e      	movs	r6, r5
   1183c:	002c      	movs	r4, r5
   1183e:	362c      	adds	r6, #44	; 0x2c
   11840:	3457      	adds	r4, #87	; 0x57
   11842:	7833      	ldrb	r3, [r6, #0]
   11844:	7822      	ldrb	r2, [r4, #0]
   11846:	1a9b      	subs	r3, r3, r2
   11848:	b2db      	uxtb	r3, r3
   1184a:	2b1f      	cmp	r3, #31
   1184c:	d80f      	bhi.n	1186e <RADIO_FSKFifoLevel+0x6a>
   1184e:	7823      	ldrb	r3, [r4, #0]
   11850:	7832      	ldrb	r2, [r6, #0]
   11852:	7821      	ldrb	r1, [r4, #0]
   11854:	2000      	movs	r0, #0
   11856:	1a52      	subs	r2, r2, r1
   11858:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1185a:	b2d2      	uxtb	r2, r2
   1185c:	18c9      	adds	r1, r1, r3
   1185e:	4b0e      	ldr	r3, [pc, #56]	; (11898 <RADIO_FSKFifoLevel+0x94>)
   11860:	4798      	blx	r3
   11862:	7833      	ldrb	r3, [r6, #0]
   11864:	b2db      	uxtb	r3, r3
   11866:	7023      	strb	r3, [r4, #0]
   11868:	4b0c      	ldr	r3, [pc, #48]	; (1189c <RADIO_FSKFifoLevel+0x98>)
   1186a:	4798      	blx	r3
   1186c:	bd70      	pop	{r4, r5, r6, pc}
   1186e:	7833      	ldrb	r3, [r6, #0]
   11870:	7822      	ldrb	r2, [r4, #0]
   11872:	1a9b      	subs	r3, r3, r2
   11874:	b2db      	uxtb	r3, r3
   11876:	2b20      	cmp	r3, #32
   11878:	d9f6      	bls.n	11868 <RADIO_FSKFifoLevel+0x64>
   1187a:	7823      	ldrb	r3, [r4, #0]
   1187c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1187e:	2220      	movs	r2, #32
   11880:	18c9      	adds	r1, r1, r3
   11882:	2000      	movs	r0, #0
   11884:	4b04      	ldr	r3, [pc, #16]	; (11898 <RADIO_FSKFifoLevel+0x94>)
   11886:	4798      	blx	r3
   11888:	7823      	ldrb	r3, [r4, #0]
   1188a:	3320      	adds	r3, #32
   1188c:	e7ea      	b.n	11864 <RADIO_FSKFifoLevel+0x60>
   1188e:	46c0      	nop			; (mov r8, r8)
   11890:	000001ad 	.word	0x000001ad
   11894:	20001aac 	.word	0x20001aac
   11898:	00003f99 	.word	0x00003f99
   1189c:	000001ed 	.word	0x000001ed

000118a0 <RADIO_FSKFifoEmpty>:
   118a0:	b510      	push	{r4, lr}
   118a2:	4b03      	ldr	r3, [pc, #12]	; (118b0 <RADIO_FSKFifoEmpty+0x10>)
   118a4:	7819      	ldrb	r1, [r3, #0]
   118a6:	4b03      	ldr	r3, [pc, #12]	; (118b4 <RADIO_FSKFifoEmpty+0x14>)
   118a8:	6818      	ldr	r0, [r3, #0]
   118aa:	4b03      	ldr	r3, [pc, #12]	; (118b8 <RADIO_FSKFifoEmpty+0x18>)
   118ac:	4798      	blx	r3
   118ae:	bd10      	pop	{r4, pc}
   118b0:	200010c4 	.word	0x200010c4
   118b4:	200010c0 	.word	0x200010c0
   118b8:	0001174d 	.word	0x0001174d

000118bc <RADIO_GetData>:
   118bc:	4b03      	ldr	r3, [pc, #12]	; (118cc <RADIO_GetData+0x10>)
   118be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   118c0:	332c      	adds	r3, #44	; 0x2c
   118c2:	6002      	str	r2, [r0, #0]
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	2000      	movs	r0, #0
   118c8:	800b      	strh	r3, [r1, #0]
   118ca:	4770      	bx	lr
   118cc:	20001aac 	.word	0x20001aac

000118d0 <Radio_EnableRfControl>:
   118d0:	b510      	push	{r4, lr}
   118d2:	4b08      	ldr	r3, [pc, #32]	; (118f4 <Radio_EnableRfControl+0x24>)
   118d4:	0001      	movs	r1, r0
   118d6:	681a      	ldr	r2, [r3, #0]
   118d8:	4807      	ldr	r0, [pc, #28]	; (118f8 <Radio_EnableRfControl+0x28>)
   118da:	4c08      	ldr	r4, [pc, #32]	; (118fc <Radio_EnableRfControl+0x2c>)
   118dc:	1812      	adds	r2, r2, r0
   118de:	2000      	movs	r0, #0
   118e0:	42a2      	cmp	r2, r4
   118e2:	d804      	bhi.n	118ee <Radio_EnableRfControl+0x1e>
   118e4:	3305      	adds	r3, #5
   118e6:	7fdb      	ldrb	r3, [r3, #31]
   118e8:	1e58      	subs	r0, r3, #1
   118ea:	4183      	sbcs	r3, r0
   118ec:	1c58      	adds	r0, r3, #1
   118ee:	4b04      	ldr	r3, [pc, #16]	; (11900 <Radio_EnableRfControl+0x30>)
   118f0:	4798      	blx	r3
   118f2:	bd10      	pop	{r4, pc}
   118f4:	20001aac 	.word	0x20001aac
   118f8:	cc9eec80 	.word	0xcc9eec80
   118fc:	096ae380 	.word	0x096ae380
   11900:	00004005 	.word	0x00004005

00011904 <RADIO_RxHandler>:
   11904:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11906:	4b33      	ldr	r3, [pc, #204]	; (119d4 <RADIO_RxHandler+0xd0>)
   11908:	2000      	movs	r0, #0
   1190a:	4798      	blx	r3
   1190c:	4e32      	ldr	r6, [pc, #200]	; (119d8 <RADIO_RxHandler+0xd4>)
   1190e:	4b33      	ldr	r3, [pc, #204]	; (119dc <RADIO_RxHandler+0xd8>)
   11910:	8830      	ldrh	r0, [r6, #0]
   11912:	2800      	cmp	r0, #0
   11914:	d100      	bne.n	11918 <RADIO_RxHandler+0x14>
   11916:	3004      	adds	r0, #4
   11918:	4798      	blx	r3
   1191a:	4c31      	ldr	r4, [pc, #196]	; (119e0 <RADIO_RxHandler+0xdc>)
   1191c:	4d31      	ldr	r5, [pc, #196]	; (119e4 <RADIO_RxHandler+0xe0>)
   1191e:	0023      	movs	r3, r4
   11920:	3334      	adds	r3, #52	; 0x34
   11922:	7819      	ldrb	r1, [r3, #0]
   11924:	2901      	cmp	r1, #1
   11926:	d122      	bne.n	1196e <RADIO_RxHandler+0x6a>
   11928:	2022      	movs	r0, #34	; 0x22
   1192a:	47a8      	blx	r5
   1192c:	2100      	movs	r1, #0
   1192e:	2040      	movs	r0, #64	; 0x40
   11930:	47a8      	blx	r5
   11932:	2100      	movs	r1, #0
   11934:	2041      	movs	r0, #65	; 0x41
   11936:	47a8      	blx	r5
   11938:	8832      	ldrh	r2, [r6, #0]
   1193a:	4b2b      	ldr	r3, [pc, #172]	; (119e8 <RADIO_RxHandler+0xe4>)
   1193c:	2a00      	cmp	r2, #0
   1193e:	d131      	bne.n	119a4 <RADIO_RxHandler+0xa0>
   11940:	0021      	movs	r1, r4
   11942:	2005      	movs	r0, #5
   11944:	3134      	adds	r1, #52	; 0x34
   11946:	7809      	ldrb	r1, [r1, #0]
   11948:	4798      	blx	r3
   1194a:	68e3      	ldr	r3, [r4, #12]
   1194c:	2b00      	cmp	r3, #0
   1194e:	d00c      	beq.n	1196a <RADIO_RxHandler+0x66>
   11950:	8832      	ldrh	r2, [r6, #0]
   11952:	2a00      	cmp	r2, #0
   11954:	d009      	beq.n	1196a <RADIO_RxHandler+0x66>
   11956:	21fa      	movs	r1, #250	; 0xfa
   11958:	2200      	movs	r2, #0
   1195a:	342f      	adds	r4, #47	; 0x2f
   1195c:	0089      	lsls	r1, r1, #2
   1195e:	7820      	ldrb	r0, [r4, #0]
   11960:	4359      	muls	r1, r3
   11962:	9200      	str	r2, [sp, #0]
   11964:	4b21      	ldr	r3, [pc, #132]	; (119ec <RADIO_RxHandler+0xe8>)
   11966:	4c22      	ldr	r4, [pc, #136]	; (119f0 <RADIO_RxHandler+0xec>)
   11968:	47a0      	blx	r4
   1196a:	2000      	movs	r0, #0
   1196c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1196e:	0023      	movs	r3, r4
   11970:	3338      	adds	r3, #56	; 0x38
   11972:	7819      	ldrb	r1, [r3, #0]
   11974:	2012      	movs	r0, #18
   11976:	47a8      	blx	r5
   11978:	0023      	movs	r3, r4
   1197a:	3339      	adds	r3, #57	; 0x39
   1197c:	7819      	ldrb	r1, [r3, #0]
   1197e:	2013      	movs	r0, #19
   11980:	47a8      	blx	r5
   11982:	210c      	movs	r1, #12
   11984:	2040      	movs	r0, #64	; 0x40
   11986:	47a8      	blx	r5
   11988:	2100      	movs	r1, #0
   1198a:	2041      	movs	r0, #65	; 0x41
   1198c:	47a8      	blx	r5
   1198e:	0022      	movs	r2, r4
   11990:	2300      	movs	r3, #0
   11992:	3256      	adds	r2, #86	; 0x56
   11994:	7013      	strb	r3, [r2, #0]
   11996:	0022      	movs	r2, r4
   11998:	322c      	adds	r2, #44	; 0x2c
   1199a:	7013      	strb	r3, [r2, #0]
   1199c:	0022      	movs	r2, r4
   1199e:	3257      	adds	r2, #87	; 0x57
   119a0:	7013      	strb	r3, [r2, #0]
   119a2:	e7c9      	b.n	11938 <RADIO_RxHandler+0x34>
   119a4:	0022      	movs	r2, r4
   119a6:	3234      	adds	r2, #52	; 0x34
   119a8:	7811      	ldrb	r1, [r2, #0]
   119aa:	2200      	movs	r2, #0
   119ac:	2901      	cmp	r1, #1
   119ae:	d101      	bne.n	119b4 <RADIO_RxHandler+0xb0>
   119b0:	2006      	movs	r0, #6
   119b2:	e7c9      	b.n	11948 <RADIO_RxHandler+0x44>
   119b4:	0011      	movs	r1, r2
   119b6:	2005      	movs	r0, #5
   119b8:	4798      	blx	r3
   119ba:	21fa      	movs	r1, #250	; 0xfa
   119bc:	8833      	ldrh	r3, [r6, #0]
   119be:	0089      	lsls	r1, r1, #2
   119c0:	4359      	muls	r1, r3
   119c2:	0023      	movs	r3, r4
   119c4:	2200      	movs	r2, #0
   119c6:	332e      	adds	r3, #46	; 0x2e
   119c8:	7818      	ldrb	r0, [r3, #0]
   119ca:	4d09      	ldr	r5, [pc, #36]	; (119f0 <RADIO_RxHandler+0xec>)
   119cc:	9200      	str	r2, [sp, #0]
   119ce:	4b09      	ldr	r3, [pc, #36]	; (119f4 <RADIO_RxHandler+0xf0>)
   119d0:	47a8      	blx	r5
   119d2:	e7ba      	b.n	1194a <RADIO_RxHandler+0x46>
   119d4:	000118d1 	.word	0x000118d1
   119d8:	200010b0 	.word	0x200010b0
   119dc:	00011055 	.word	0x00011055
   119e0:	20001aac 	.word	0x20001aac
   119e4:	00003f05 	.word	0x00003f05
   119e8:	0000a549 	.word	0x0000a549
   119ec:	00011a2d 	.word	0x00011a2d
   119f0:	00009eed 	.word	0x00009eed
   119f4:	00011abd 	.word	0x00011abd

000119f8 <Radio_DisableRfControl>:
   119f8:	b510      	push	{r4, lr}
   119fa:	4b08      	ldr	r3, [pc, #32]	; (11a1c <Radio_DisableRfControl+0x24>)
   119fc:	0001      	movs	r1, r0
   119fe:	681a      	ldr	r2, [r3, #0]
   11a00:	4807      	ldr	r0, [pc, #28]	; (11a20 <Radio_DisableRfControl+0x28>)
   11a02:	4c08      	ldr	r4, [pc, #32]	; (11a24 <Radio_DisableRfControl+0x2c>)
   11a04:	1812      	adds	r2, r2, r0
   11a06:	2000      	movs	r0, #0
   11a08:	42a2      	cmp	r2, r4
   11a0a:	d804      	bhi.n	11a16 <Radio_DisableRfControl+0x1e>
   11a0c:	3305      	adds	r3, #5
   11a0e:	7fdb      	ldrb	r3, [r3, #31]
   11a10:	1e58      	subs	r0, r3, #1
   11a12:	4183      	sbcs	r3, r0
   11a14:	1c58      	adds	r0, r3, #1
   11a16:	4b04      	ldr	r3, [pc, #16]	; (11a28 <Radio_DisableRfControl+0x30>)
   11a18:	4798      	blx	r3
   11a1a:	bd10      	pop	{r4, pc}
   11a1c:	20001aac 	.word	0x20001aac
   11a20:	cc9eec80 	.word	0xcc9eec80
   11a24:	096ae380 	.word	0x096ae380
   11a28:	00004019 	.word	0x00004019

00011a2c <Radio_WatchdogTimeout>:
   11a2c:	b510      	push	{r4, lr}
   11a2e:	4b0e      	ldr	r3, [pc, #56]	; (11a68 <Radio_WatchdogTimeout+0x3c>)
   11a30:	781a      	ldrb	r2, [r3, #0]
   11a32:	2a04      	cmp	r2, #4
   11a34:	d10b      	bne.n	11a4e <Radio_WatchdogTimeout+0x22>
   11a36:	2320      	movs	r3, #32
   11a38:	4a0c      	ldr	r2, [pc, #48]	; (11a6c <Radio_WatchdogTimeout+0x40>)
   11a3a:	2000      	movs	r0, #0
   11a3c:	8811      	ldrh	r1, [r2, #0]
   11a3e:	430b      	orrs	r3, r1
   11a40:	8013      	strh	r3, [r2, #0]
   11a42:	4b0b      	ldr	r3, [pc, #44]	; (11a70 <Radio_WatchdogTimeout+0x44>)
   11a44:	4798      	blx	r3
   11a46:	2002      	movs	r0, #2
   11a48:	4b0a      	ldr	r3, [pc, #40]	; (11a74 <Radio_WatchdogTimeout+0x48>)
   11a4a:	4798      	blx	r3
   11a4c:	bd10      	pop	{r4, pc}
   11a4e:	781b      	ldrb	r3, [r3, #0]
   11a50:	2b02      	cmp	r3, #2
   11a52:	d1fb      	bne.n	11a4c <Radio_WatchdogTimeout+0x20>
   11a54:	4a05      	ldr	r2, [pc, #20]	; (11a6c <Radio_WatchdogTimeout+0x40>)
   11a56:	330e      	adds	r3, #14
   11a58:	8811      	ldrh	r1, [r2, #0]
   11a5a:	2001      	movs	r0, #1
   11a5c:	430b      	orrs	r3, r1
   11a5e:	8013      	strh	r3, [r2, #0]
   11a60:	4b03      	ldr	r3, [pc, #12]	; (11a70 <Radio_WatchdogTimeout+0x44>)
   11a62:	4798      	blx	r3
   11a64:	2001      	movs	r0, #1
   11a66:	e7ef      	b.n	11a48 <Radio_WatchdogTimeout+0x1c>
   11a68:	2000203f 	.word	0x2000203f
   11a6c:	2000203c 	.word	0x2000203c
   11a70:	000119f9 	.word	0x000119f9
   11a74:	00011615 	.word	0x00011615

00011a78 <RADIO_RxTimeout>:
   11a78:	b510      	push	{r4, lr}
   11a7a:	4b0a      	ldr	r3, [pc, #40]	; (11aa4 <RADIO_RxTimeout+0x2c>)
   11a7c:	332f      	adds	r3, #47	; 0x2f
   11a7e:	7818      	ldrb	r0, [r3, #0]
   11a80:	4b09      	ldr	r3, [pc, #36]	; (11aa8 <RADIO_RxTimeout+0x30>)
   11a82:	4798      	blx	r3
   11a84:	2000      	movs	r0, #0
   11a86:	4b09      	ldr	r3, [pc, #36]	; (11aac <RADIO_RxTimeout+0x34>)
   11a88:	4798      	blx	r3
   11a8a:	2180      	movs	r1, #128	; 0x80
   11a8c:	2012      	movs	r0, #18
   11a8e:	4b08      	ldr	r3, [pc, #32]	; (11ab0 <RADIO_RxTimeout+0x38>)
   11a90:	4798      	blx	r3
   11a92:	2340      	movs	r3, #64	; 0x40
   11a94:	4a07      	ldr	r2, [pc, #28]	; (11ab4 <RADIO_RxTimeout+0x3c>)
   11a96:	2002      	movs	r0, #2
   11a98:	8811      	ldrh	r1, [r2, #0]
   11a9a:	430b      	orrs	r3, r1
   11a9c:	8013      	strh	r3, [r2, #0]
   11a9e:	4b06      	ldr	r3, [pc, #24]	; (11ab8 <RADIO_RxTimeout+0x40>)
   11aa0:	4798      	blx	r3
   11aa2:	bd10      	pop	{r4, pc}
   11aa4:	20001aac 	.word	0x20001aac
   11aa8:	0000a1f1 	.word	0x0000a1f1
   11aac:	000119f9 	.word	0x000119f9
   11ab0:	00003f05 	.word	0x00003f05
   11ab4:	2000203c 	.word	0x2000203c
   11ab8:	00011615 	.word	0x00011615

00011abc <Radio_RxFSKTimeout>:
   11abc:	b510      	push	{r4, lr}
   11abe:	4b08      	ldr	r3, [pc, #32]	; (11ae0 <Radio_RxFSKTimeout+0x24>)
   11ac0:	332f      	adds	r3, #47	; 0x2f
   11ac2:	7818      	ldrb	r0, [r3, #0]
   11ac4:	4b07      	ldr	r3, [pc, #28]	; (11ae4 <Radio_RxFSKTimeout+0x28>)
   11ac6:	4798      	blx	r3
   11ac8:	2000      	movs	r0, #0
   11aca:	4b07      	ldr	r3, [pc, #28]	; (11ae8 <Radio_RxFSKTimeout+0x2c>)
   11acc:	4798      	blx	r3
   11ace:	2380      	movs	r3, #128	; 0x80
   11ad0:	4a06      	ldr	r2, [pc, #24]	; (11aec <Radio_RxFSKTimeout+0x30>)
   11ad2:	2002      	movs	r0, #2
   11ad4:	8811      	ldrh	r1, [r2, #0]
   11ad6:	430b      	orrs	r3, r1
   11ad8:	8013      	strh	r3, [r2, #0]
   11ada:	4b05      	ldr	r3, [pc, #20]	; (11af0 <Radio_RxFSKTimeout+0x34>)
   11adc:	4798      	blx	r3
   11ade:	bd10      	pop	{r4, pc}
   11ae0:	20001aac 	.word	0x20001aac
   11ae4:	0000a1f1 	.word	0x0000a1f1
   11ae8:	000119f9 	.word	0x000119f9
   11aec:	2000203c 	.word	0x2000203c
   11af0:	00011615 	.word	0x00011615

00011af4 <RADIO_TxDone>:
   11af4:	b570      	push	{r4, r5, r6, lr}
   11af6:	4b14      	ldr	r3, [pc, #80]	; (11b48 <RADIO_TxDone+0x54>)
   11af8:	332f      	adds	r3, #47	; 0x2f
   11afa:	7818      	ldrb	r0, [r3, #0]
   11afc:	4b13      	ldr	r3, [pc, #76]	; (11b4c <RADIO_TxDone+0x58>)
   11afe:	4798      	blx	r3
   11b00:	2001      	movs	r0, #1
   11b02:	4b13      	ldr	r3, [pc, #76]	; (11b50 <RADIO_TxDone+0x5c>)
   11b04:	4798      	blx	r3
   11b06:	4b13      	ldr	r3, [pc, #76]	; (11b54 <RADIO_TxDone+0x60>)
   11b08:	2108      	movs	r1, #8
   11b0a:	2012      	movs	r0, #18
   11b0c:	4798      	blx	r3
   11b0e:	4b12      	ldr	r3, [pc, #72]	; (11b58 <RADIO_TxDone+0x64>)
   11b10:	781a      	ldrb	r2, [r3, #0]
   11b12:	4b12      	ldr	r3, [pc, #72]	; (11b5c <RADIO_TxDone+0x68>)
   11b14:	2a02      	cmp	r2, #2
   11b16:	d002      	beq.n	11b1e <RADIO_TxDone+0x2a>
   11b18:	881a      	ldrh	r2, [r3, #0]
   11b1a:	0692      	lsls	r2, r2, #26
   11b1c:	d413      	bmi.n	11b46 <RADIO_TxDone+0x52>
   11b1e:	2001      	movs	r0, #1
   11b20:	881a      	ldrh	r2, [r3, #0]
   11b22:	4302      	orrs	r2, r0
   11b24:	801a      	strh	r2, [r3, #0]
   11b26:	4b0e      	ldr	r3, [pc, #56]	; (11b60 <RADIO_TxDone+0x6c>)
   11b28:	4798      	blx	r3
   11b2a:	4b0e      	ldr	r3, [pc, #56]	; (11b64 <RADIO_TxDone+0x70>)
   11b2c:	4798      	blx	r3
   11b2e:	4c0e      	ldr	r4, [pc, #56]	; (11b68 <RADIO_TxDone+0x74>)
   11b30:	4d0e      	ldr	r5, [pc, #56]	; (11b6c <RADIO_TxDone+0x78>)
   11b32:	6822      	ldr	r2, [r4, #0]
   11b34:	6863      	ldr	r3, [r4, #4]
   11b36:	1a80      	subs	r0, r0, r2
   11b38:	4199      	sbcs	r1, r3
   11b3a:	22fa      	movs	r2, #250	; 0xfa
   11b3c:	2300      	movs	r3, #0
   11b3e:	0092      	lsls	r2, r2, #2
   11b40:	47a8      	blx	r5
   11b42:	6020      	str	r0, [r4, #0]
   11b44:	6061      	str	r1, [r4, #4]
   11b46:	bd70      	pop	{r4, r5, r6, pc}
   11b48:	20001aac 	.word	0x20001aac
   11b4c:	0000a1f1 	.word	0x0000a1f1
   11b50:	000119f9 	.word	0x000119f9
   11b54:	00003f05 	.word	0x00003f05
   11b58:	2000203f 	.word	0x2000203f
   11b5c:	2000203c 	.word	0x2000203c
   11b60:	00011615 	.word	0x00011615
   11b64:	00009e95 	.word	0x00009e95
   11b68:	200010b8 	.word	0x200010b8
   11b6c:	00012a6d 	.word	0x00012a6d

00011b70 <RADIO_FSKPacketSent>:
   11b70:	b570      	push	{r4, r5, r6, lr}
   11b72:	4b13      	ldr	r3, [pc, #76]	; (11bc0 <RADIO_FSKPacketSent+0x50>)
   11b74:	203f      	movs	r0, #63	; 0x3f
   11b76:	4798      	blx	r3
   11b78:	0703      	lsls	r3, r0, #28
   11b7a:	d51f      	bpl.n	11bbc <RADIO_FSKPacketSent+0x4c>
   11b7c:	4b11      	ldr	r3, [pc, #68]	; (11bc4 <RADIO_FSKPacketSent+0x54>)
   11b7e:	332f      	adds	r3, #47	; 0x2f
   11b80:	7818      	ldrb	r0, [r3, #0]
   11b82:	4b11      	ldr	r3, [pc, #68]	; (11bc8 <RADIO_FSKPacketSent+0x58>)
   11b84:	4798      	blx	r3
   11b86:	4b11      	ldr	r3, [pc, #68]	; (11bcc <RADIO_FSKPacketSent+0x5c>)
   11b88:	2001      	movs	r0, #1
   11b8a:	4798      	blx	r3
   11b8c:	4b10      	ldr	r3, [pc, #64]	; (11bd0 <RADIO_FSKPacketSent+0x60>)
   11b8e:	4c11      	ldr	r4, [pc, #68]	; (11bd4 <RADIO_FSKPacketSent+0x64>)
   11b90:	781b      	ldrb	r3, [r3, #0]
   11b92:	2b02      	cmp	r3, #2
   11b94:	d002      	beq.n	11b9c <RADIO_FSKPacketSent+0x2c>
   11b96:	8823      	ldrh	r3, [r4, #0]
   11b98:	069b      	lsls	r3, r3, #26
   11b9a:	d40f      	bmi.n	11bbc <RADIO_FSKPacketSent+0x4c>
   11b9c:	4b0e      	ldr	r3, [pc, #56]	; (11bd8 <RADIO_FSKPacketSent+0x68>)
   11b9e:	4798      	blx	r3
   11ba0:	4b0e      	ldr	r3, [pc, #56]	; (11bdc <RADIO_FSKPacketSent+0x6c>)
   11ba2:	681d      	ldr	r5, [r3, #0]
   11ba4:	685e      	ldr	r6, [r3, #4]
   11ba6:	1b40      	subs	r0, r0, r5
   11ba8:	41b1      	sbcs	r1, r6
   11baa:	6018      	str	r0, [r3, #0]
   11bac:	6059      	str	r1, [r3, #4]
   11bae:	4b0c      	ldr	r3, [pc, #48]	; (11be0 <RADIO_FSKPacketSent+0x70>)
   11bb0:	2001      	movs	r0, #1
   11bb2:	4798      	blx	r3
   11bb4:	2304      	movs	r3, #4
   11bb6:	8822      	ldrh	r2, [r4, #0]
   11bb8:	4313      	orrs	r3, r2
   11bba:	8023      	strh	r3, [r4, #0]
   11bbc:	bd70      	pop	{r4, r5, r6, pc}
   11bbe:	46c0      	nop			; (mov r8, r8)
   11bc0:	00003f2d 	.word	0x00003f2d
   11bc4:	20001aac 	.word	0x20001aac
   11bc8:	0000a1f1 	.word	0x0000a1f1
   11bcc:	000119f9 	.word	0x000119f9
   11bd0:	2000203f 	.word	0x2000203f
   11bd4:	2000203c 	.word	0x2000203c
   11bd8:	00009e95 	.word	0x00009e95
   11bdc:	200010b8 	.word	0x200010b8
   11be0:	00011615 	.word	0x00011615

00011be4 <RADIO_RxDone>:
   11be4:	b570      	push	{r4, r5, r6, lr}
   11be6:	2012      	movs	r0, #18
   11be8:	4e16      	ldr	r6, [pc, #88]	; (11c44 <RADIO_RxDone+0x60>)
   11bea:	47b0      	blx	r6
   11bec:	4b16      	ldr	r3, [pc, #88]	; (11c48 <RADIO_RxDone+0x64>)
   11bee:	0005      	movs	r5, r0
   11bf0:	2170      	movs	r1, #112	; 0x70
   11bf2:	2012      	movs	r0, #18
   11bf4:	4798      	blx	r3
   11bf6:	2350      	movs	r3, #80	; 0x50
   11bf8:	402b      	ands	r3, r5
   11bfa:	2b50      	cmp	r3, #80	; 0x50
   11bfc:	d119      	bne.n	11c32 <RADIO_RxDone+0x4e>
   11bfe:	4c13      	ldr	r4, [pc, #76]	; (11c4c <RADIO_RxDone+0x68>)
   11c00:	0023      	movs	r3, r4
   11c02:	332f      	adds	r3, #47	; 0x2f
   11c04:	7818      	ldrb	r0, [r3, #0]
   11c06:	4b12      	ldr	r3, [pc, #72]	; (11c50 <RADIO_RxDone+0x6c>)
   11c08:	4798      	blx	r3
   11c0a:	4b12      	ldr	r3, [pc, #72]	; (11c54 <RADIO_RxDone+0x70>)
   11c0c:	2000      	movs	r0, #0
   11c0e:	4798      	blx	r3
   11c10:	3404      	adds	r4, #4
   11c12:	201c      	movs	r0, #28
   11c14:	47b0      	blx	r6
   11c16:	7fe2      	ldrb	r2, [r4, #31]
   11c18:	4b0f      	ldr	r3, [pc, #60]	; (11c58 <RADIO_RxDone+0x74>)
   11c1a:	4910      	ldr	r1, [pc, #64]	; (11c5c <RADIO_RxDone+0x78>)
   11c1c:	2a00      	cmp	r2, #0
   11c1e:	d003      	beq.n	11c28 <RADIO_RxDone+0x44>
   11c20:	06aa      	lsls	r2, r5, #26
   11c22:	d407      	bmi.n	11c34 <RADIO_RxDone+0x50>
   11c24:	0642      	lsls	r2, r0, #25
   11c26:	d505      	bpl.n	11c34 <RADIO_RxDone+0x50>
   11c28:	2002      	movs	r0, #2
   11c2a:	881a      	ldrh	r2, [r3, #0]
   11c2c:	4302      	orrs	r2, r0
   11c2e:	801a      	strh	r2, [r3, #0]
   11c30:	4788      	blx	r1
   11c32:	bd70      	pop	{r4, r5, r6, pc}
   11c34:	2280      	movs	r2, #128	; 0x80
   11c36:	8818      	ldrh	r0, [r3, #0]
   11c38:	0052      	lsls	r2, r2, #1
   11c3a:	4302      	orrs	r2, r0
   11c3c:	801a      	strh	r2, [r3, #0]
   11c3e:	2002      	movs	r0, #2
   11c40:	e7f6      	b.n	11c30 <RADIO_RxDone+0x4c>
   11c42:	46c0      	nop			; (mov r8, r8)
   11c44:	00003f2d 	.word	0x00003f2d
   11c48:	00003f05 	.word	0x00003f05
   11c4c:	20001aac 	.word	0x20001aac
   11c50:	0000a1f1 	.word	0x0000a1f1
   11c54:	000119f9 	.word	0x000119f9
   11c58:	2000203c 	.word	0x2000203c
   11c5c:	00011615 	.word	0x00011615

00011c60 <RADIO_FSKPayloadReady>:
   11c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c62:	203f      	movs	r0, #63	; 0x3f
   11c64:	4b39      	ldr	r3, [pc, #228]	; (11d4c <RADIO_FSKPayloadReady+0xec>)
   11c66:	4798      	blx	r3
   11c68:	0743      	lsls	r3, r0, #29
   11c6a:	d559      	bpl.n	11d20 <RADIO_FSKPayloadReady+0xc0>
   11c6c:	4c38      	ldr	r4, [pc, #224]	; (11d50 <RADIO_FSKPayloadReady+0xf0>)
   11c6e:	4d39      	ldr	r5, [pc, #228]	; (11d54 <RADIO_FSKPayloadReady+0xf4>)
   11c70:	1d23      	adds	r3, r4, #4
   11c72:	7fdb      	ldrb	r3, [r3, #31]
   11c74:	2b01      	cmp	r3, #1
   11c76:	d154      	bne.n	11d22 <RADIO_FSKPayloadReady+0xc2>
   11c78:	2202      	movs	r2, #2
   11c7a:	4210      	tst	r0, r2
   11c7c:	d048      	beq.n	11d10 <RADIO_FSKPayloadReady+0xb0>
   11c7e:	0023      	movs	r3, r4
   11c80:	332f      	adds	r3, #47	; 0x2f
   11c82:	7818      	ldrb	r0, [r3, #0]
   11c84:	4e34      	ldr	r6, [pc, #208]	; (11d58 <RADIO_FSKPayloadReady+0xf8>)
   11c86:	47b0      	blx	r6
   11c88:	0023      	movs	r3, r4
   11c8a:	332e      	adds	r3, #46	; 0x2e
   11c8c:	7818      	ldrb	r0, [r3, #0]
   11c8e:	47b0      	blx	r6
   11c90:	4b32      	ldr	r3, [pc, #200]	; (11d5c <RADIO_FSKPayloadReady+0xfc>)
   11c92:	4798      	blx	r3
   11c94:	0022      	movs	r2, r4
   11c96:	0023      	movs	r3, r4
   11c98:	322c      	adds	r2, #44	; 0x2c
   11c9a:	3357      	adds	r3, #87	; 0x57
   11c9c:	7810      	ldrb	r0, [r2, #0]
   11c9e:	7819      	ldrb	r1, [r3, #0]
   11ca0:	4288      	cmp	r0, r1
   11ca2:	d105      	bne.n	11cb0 <RADIO_FSKPayloadReady+0x50>
   11ca4:	7812      	ldrb	r2, [r2, #0]
   11ca6:	2a00      	cmp	r2, #0
   11ca8:	d002      	beq.n	11cb0 <RADIO_FSKPayloadReady+0x50>
   11caa:	781b      	ldrb	r3, [r3, #0]
   11cac:	2b00      	cmp	r3, #0
   11cae:	d118      	bne.n	11ce2 <RADIO_FSKPayloadReady+0x82>
   11cb0:	0021      	movs	r1, r4
   11cb2:	312c      	adds	r1, #44	; 0x2c
   11cb4:	7808      	ldrb	r0, [r1, #0]
   11cb6:	b2c0      	uxtb	r0, r0
   11cb8:	2800      	cmp	r0, #0
   11cba:	d102      	bne.n	11cc2 <RADIO_FSKPayloadReady+0x62>
   11cbc:	2201      	movs	r2, #1
   11cbe:	4b28      	ldr	r3, [pc, #160]	; (11d60 <RADIO_FSKPayloadReady+0x100>)
   11cc0:	4798      	blx	r3
   11cc2:	0026      	movs	r6, r4
   11cc4:	0027      	movs	r7, r4
   11cc6:	3657      	adds	r6, #87	; 0x57
   11cc8:	7830      	ldrb	r0, [r6, #0]
   11cca:	372c      	adds	r7, #44	; 0x2c
   11ccc:	b2c0      	uxtb	r0, r0
   11cce:	2800      	cmp	r0, #0
   11cd0:	d110      	bne.n	11cf4 <RADIO_FSKPayloadReady+0x94>
   11cd2:	783a      	ldrb	r2, [r7, #0]
   11cd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11cd6:	b2d2      	uxtb	r2, r2
   11cd8:	4b21      	ldr	r3, [pc, #132]	; (11d60 <RADIO_FSKPayloadReady+0x100>)
   11cda:	4798      	blx	r3
   11cdc:	783b      	ldrb	r3, [r7, #0]
   11cde:	b2db      	uxtb	r3, r3
   11ce0:	7033      	strb	r3, [r6, #0]
   11ce2:	4b20      	ldr	r3, [pc, #128]	; (11d64 <RADIO_FSKPayloadReady+0x104>)
   11ce4:	4798      	blx	r3
   11ce6:	4b20      	ldr	r3, [pc, #128]	; (11d68 <RADIO_FSKPayloadReady+0x108>)
   11ce8:	2000      	movs	r0, #0
   11cea:	4798      	blx	r3
   11cec:	2308      	movs	r3, #8
   11cee:	882a      	ldrh	r2, [r5, #0]
   11cf0:	4313      	orrs	r3, r2
   11cf2:	e011      	b.n	11d18 <RADIO_FSKPayloadReady+0xb8>
   11cf4:	783b      	ldrb	r3, [r7, #0]
   11cf6:	7832      	ldrb	r2, [r6, #0]
   11cf8:	1a9b      	subs	r3, r3, r2
   11cfa:	2b00      	cmp	r3, #0
   11cfc:	ddf1      	ble.n	11ce2 <RADIO_FSKPayloadReady+0x82>
   11cfe:	7833      	ldrb	r3, [r6, #0]
   11d00:	783a      	ldrb	r2, [r7, #0]
   11d02:	7831      	ldrb	r1, [r6, #0]
   11d04:	2000      	movs	r0, #0
   11d06:	1a52      	subs	r2, r2, r1
   11d08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11d0a:	b2d2      	uxtb	r2, r2
   11d0c:	18c9      	adds	r1, r1, r3
   11d0e:	e7e3      	b.n	11cd8 <RADIO_FSKPayloadReady+0x78>
   11d10:	2380      	movs	r3, #128	; 0x80
   11d12:	8829      	ldrh	r1, [r5, #0]
   11d14:	005b      	lsls	r3, r3, #1
   11d16:	430b      	orrs	r3, r1
   11d18:	802b      	strh	r3, [r5, #0]
   11d1a:	2002      	movs	r0, #2
   11d1c:	4b13      	ldr	r3, [pc, #76]	; (11d6c <RADIO_FSKPayloadReady+0x10c>)
   11d1e:	4798      	blx	r3
   11d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d22:	0023      	movs	r3, r4
   11d24:	332f      	adds	r3, #47	; 0x2f
   11d26:	4e0c      	ldr	r6, [pc, #48]	; (11d58 <RADIO_FSKPayloadReady+0xf8>)
   11d28:	7818      	ldrb	r0, [r3, #0]
   11d2a:	47b0      	blx	r6
   11d2c:	0023      	movs	r3, r4
   11d2e:	332e      	adds	r3, #46	; 0x2e
   11d30:	7818      	ldrb	r0, [r3, #0]
   11d32:	47b0      	blx	r6
   11d34:	4e0e      	ldr	r6, [pc, #56]	; (11d70 <RADIO_FSKPayloadReady+0x110>)
   11d36:	2201      	movs	r2, #1
   11d38:	0031      	movs	r1, r6
   11d3a:	2000      	movs	r0, #0
   11d3c:	4f08      	ldr	r7, [pc, #32]	; (11d60 <RADIO_FSKPayloadReady+0x100>)
   11d3e:	47b8      	blx	r7
   11d40:	7832      	ldrb	r2, [r6, #0]
   11d42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11d44:	b2d2      	uxtb	r2, r2
   11d46:	2000      	movs	r0, #0
   11d48:	47b8      	blx	r7
   11d4a:	e7cc      	b.n	11ce6 <RADIO_FSKPayloadReady+0x86>
   11d4c:	00003f2d 	.word	0x00003f2d
   11d50:	20001aac 	.word	0x20001aac
   11d54:	2000203c 	.word	0x2000203c
   11d58:	0000a1f1 	.word	0x0000a1f1
   11d5c:	000001ad 	.word	0x000001ad
   11d60:	00003f99 	.word	0x00003f99
   11d64:	000001ed 	.word	0x000001ed
   11d68:	000119f9 	.word	0x000119f9
   11d6c:	00011615 	.word	0x00011615
   11d70:	20001ad8 	.word	0x20001ad8

00011d74 <Radio_SetClockInput>:
   11d74:	b510      	push	{r4, lr}
   11d76:	4b08      	ldr	r3, [pc, #32]	; (11d98 <Radio_SetClockInput+0x24>)
   11d78:	3355      	adds	r3, #85	; 0x55
   11d7a:	781b      	ldrb	r3, [r3, #0]
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	d10a      	bne.n	11d96 <Radio_SetClockInput+0x22>
   11d80:	4b06      	ldr	r3, [pc, #24]	; (11d9c <Radio_SetClockInput+0x28>)
   11d82:	204b      	movs	r0, #75	; 0x4b
   11d84:	4798      	blx	r3
   11d86:	2110      	movs	r1, #16
   11d88:	4301      	orrs	r1, r0
   11d8a:	4b05      	ldr	r3, [pc, #20]	; (11da0 <Radio_SetClockInput+0x2c>)
   11d8c:	b2c9      	uxtb	r1, r1
   11d8e:	204b      	movs	r0, #75	; 0x4b
   11d90:	4798      	blx	r3
   11d92:	4b04      	ldr	r3, [pc, #16]	; (11da4 <Radio_SetClockInput+0x30>)
   11d94:	4798      	blx	r3
   11d96:	bd10      	pop	{r4, pc}
   11d98:	20001aac 	.word	0x20001aac
   11d9c:	00003f2d 	.word	0x00003f2d
   11da0:	00003f05 	.word	0x00003f05
   11da4:	00004035 	.word	0x00004035

00011da8 <RADIO_TxHandler>:
   11da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11daa:	4b32      	ldr	r3, [pc, #200]	; (11e74 <RADIO_TxHandler+0xcc>)
   11dac:	4798      	blx	r3
   11dae:	2001      	movs	r0, #1
   11db0:	4b31      	ldr	r3, [pc, #196]	; (11e78 <RADIO_TxHandler+0xd0>)
   11db2:	4798      	blx	r3
   11db4:	4c31      	ldr	r4, [pc, #196]	; (11e7c <RADIO_TxHandler+0xd4>)
   11db6:	0023      	movs	r3, r4
   11db8:	332d      	adds	r3, #45	; 0x2d
   11dba:	7818      	ldrb	r0, [r3, #0]
   11dbc:	4b30      	ldr	r3, [pc, #192]	; (11e80 <RADIO_TxHandler+0xd8>)
   11dbe:	4798      	blx	r3
   11dc0:	0023      	movs	r3, r4
   11dc2:	3341      	adds	r3, #65	; 0x41
   11dc4:	781b      	ldrb	r3, [r3, #0]
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	d102      	bne.n	11dd0 <RADIO_TxHandler+0x28>
   11dca:	2004      	movs	r0, #4
   11dcc:	4b2d      	ldr	r3, [pc, #180]	; (11e84 <RADIO_TxHandler+0xdc>)
   11dce:	4798      	blx	r3
   11dd0:	4b2d      	ldr	r3, [pc, #180]	; (11e88 <RADIO_TxHandler+0xe0>)
   11dd2:	4e2e      	ldr	r6, [pc, #184]	; (11e8c <RADIO_TxHandler+0xe4>)
   11dd4:	781f      	ldrb	r7, [r3, #0]
   11dd6:	4d2e      	ldr	r5, [pc, #184]	; (11e90 <RADIO_TxHandler+0xe8>)
   11dd8:	2f01      	cmp	r7, #1
   11dda:	d138      	bne.n	11e4e <RADIO_TxHandler+0xa6>
   11ddc:	7831      	ldrb	r1, [r6, #0]
   11dde:	2022      	movs	r0, #34	; 0x22
   11de0:	47a8      	blx	r5
   11de2:	4b2c      	ldr	r3, [pc, #176]	; (11e94 <RADIO_TxHandler+0xec>)
   11de4:	200a      	movs	r0, #10
   11de6:	4798      	blx	r3
   11de8:	21f0      	movs	r1, #240	; 0xf0
   11dea:	4008      	ands	r0, r1
   11dec:	39e8      	subs	r1, #232	; 0xe8
   11dee:	4301      	orrs	r1, r0
   11df0:	200a      	movs	r0, #10
   11df2:	47a8      	blx	r5
   11df4:	2140      	movs	r1, #64	; 0x40
   11df6:	0008      	movs	r0, r1
   11df8:	47a8      	blx	r5
   11dfa:	2100      	movs	r1, #0
   11dfc:	2041      	movs	r0, #65	; 0x41
   11dfe:	47a8      	blx	r5
   11e00:	4b21      	ldr	r3, [pc, #132]	; (11e88 <RADIO_TxHandler+0xe0>)
   11e02:	003a      	movs	r2, r7
   11e04:	7819      	ldrb	r1, [r3, #0]
   11e06:	0038      	movs	r0, r7
   11e08:	4b23      	ldr	r3, [pc, #140]	; (11e98 <RADIO_TxHandler+0xf0>)
   11e0a:	4798      	blx	r3
   11e0c:	4b23      	ldr	r3, [pc, #140]	; (11e9c <RADIO_TxHandler+0xf4>)
   11e0e:	7832      	ldrb	r2, [r6, #0]
   11e10:	6819      	ldr	r1, [r3, #0]
   11e12:	2000      	movs	r0, #0
   11e14:	4b22      	ldr	r3, [pc, #136]	; (11ea0 <RADIO_TxHandler+0xf8>)
   11e16:	4798      	blx	r3
   11e18:	0023      	movs	r3, r4
   11e1a:	3334      	adds	r3, #52	; 0x34
   11e1c:	7819      	ldrb	r1, [r3, #0]
   11e1e:	2200      	movs	r2, #0
   11e20:	2003      	movs	r0, #3
   11e22:	4b1d      	ldr	r3, [pc, #116]	; (11e98 <RADIO_TxHandler+0xf0>)
   11e24:	4798      	blx	r3
   11e26:	4b1f      	ldr	r3, [pc, #124]	; (11ea4 <RADIO_TxHandler+0xfc>)
   11e28:	4798      	blx	r3
   11e2a:	4b1f      	ldr	r3, [pc, #124]	; (11ea8 <RADIO_TxHandler+0x100>)
   11e2c:	6018      	str	r0, [r3, #0]
   11e2e:	6059      	str	r1, [r3, #4]
   11e30:	68e3      	ldr	r3, [r4, #12]
   11e32:	2b00      	cmp	r3, #0
   11e34:	d009      	beq.n	11e4a <RADIO_TxHandler+0xa2>
   11e36:	21fa      	movs	r1, #250	; 0xfa
   11e38:	2200      	movs	r2, #0
   11e3a:	342f      	adds	r4, #47	; 0x2f
   11e3c:	0089      	lsls	r1, r1, #2
   11e3e:	7820      	ldrb	r0, [r4, #0]
   11e40:	4359      	muls	r1, r3
   11e42:	9200      	str	r2, [sp, #0]
   11e44:	4b19      	ldr	r3, [pc, #100]	; (11eac <RADIO_TxHandler+0x104>)
   11e46:	4c1a      	ldr	r4, [pc, #104]	; (11eb0 <RADIO_TxHandler+0x108>)
   11e48:	47a0      	blx	r4
   11e4a:	2000      	movs	r0, #0
   11e4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11e4e:	2110      	movs	r1, #16
   11e50:	2040      	movs	r0, #64	; 0x40
   11e52:	47a8      	blx	r5
   11e54:	2100      	movs	r1, #0
   11e56:	2041      	movs	r0, #65	; 0x41
   11e58:	47a8      	blx	r5
   11e5a:	0023      	movs	r3, r4
   11e5c:	2000      	movs	r0, #0
   11e5e:	3357      	adds	r3, #87	; 0x57
   11e60:	7831      	ldrb	r1, [r6, #0]
   11e62:	7018      	strb	r0, [r3, #0]
   11e64:	47a8      	blx	r5
   11e66:	4b0d      	ldr	r3, [pc, #52]	; (11e9c <RADIO_TxHandler+0xf4>)
   11e68:	7831      	ldrb	r1, [r6, #0]
   11e6a:	6818      	ldr	r0, [r3, #0]
   11e6c:	4b11      	ldr	r3, [pc, #68]	; (11eb4 <RADIO_TxHandler+0x10c>)
   11e6e:	4798      	blx	r3
   11e70:	e7d2      	b.n	11e18 <RADIO_TxHandler+0x70>
   11e72:	46c0      	nop			; (mov r8, r8)
   11e74:	00011d75 	.word	0x00011d75
   11e78:	000118d1 	.word	0x000118d1
   11e7c:	20001aac 	.word	0x20001aac
   11e80:	0000a1f1 	.word	0x0000a1f1
   11e84:	00011055 	.word	0x00011055
   11e88:	20001ae0 	.word	0x20001ae0
   11e8c:	200010c4 	.word	0x200010c4
   11e90:	00003f05 	.word	0x00003f05
   11e94:	00003f2d 	.word	0x00003f2d
   11e98:	0000a549 	.word	0x0000a549
   11e9c:	200010c0 	.word	0x200010c0
   11ea0:	00003f59 	.word	0x00003f59
   11ea4:	00009e95 	.word	0x00009e95
   11ea8:	200010b8 	.word	0x200010b8
   11eac:	00011a2d 	.word	0x00011a2d
   11eb0:	00009eed 	.word	0x00009eed
   11eb4:	0001174d 	.word	0x0001174d

00011eb8 <Radio_ResetClockInput>:
   11eb8:	b510      	push	{r4, lr}
   11eba:	4b04      	ldr	r3, [pc, #16]	; (11ecc <Radio_ResetClockInput+0x14>)
   11ebc:	3355      	adds	r3, #85	; 0x55
   11ebe:	781b      	ldrb	r3, [r3, #0]
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d101      	bne.n	11ec8 <Radio_ResetClockInput+0x10>
   11ec4:	4b02      	ldr	r3, [pc, #8]	; (11ed0 <Radio_ResetClockInput+0x18>)
   11ec6:	4798      	blx	r3
   11ec8:	bd10      	pop	{r4, pc}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	20001aac 	.word	0x20001aac
   11ed0:	00004051 	.word	0x00004051

00011ed4 <RADIO_InitDefaultAttributes>:
   11ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ed6:	2501      	movs	r5, #1
   11ed8:	4b64      	ldr	r3, [pc, #400]	; (1206c <RADIO_InitDefaultAttributes+0x198>)
   11eda:	4c65      	ldr	r4, [pc, #404]	; (12070 <RADIO_InitDefaultAttributes+0x19c>)
   11edc:	701d      	strb	r5, [r3, #0]
   11ede:	4b65      	ldr	r3, [pc, #404]	; (12074 <RADIO_InitDefaultAttributes+0x1a0>)
   11ee0:	2207      	movs	r2, #7
   11ee2:	6023      	str	r3, [r4, #0]
   11ee4:	4b64      	ldr	r3, [pc, #400]	; (12078 <RADIO_InitDefaultAttributes+0x1a4>)
   11ee6:	18a1      	adds	r1, r4, r2
   11ee8:	6063      	str	r3, [r4, #4]
   11eea:	4b64      	ldr	r3, [pc, #400]	; (1207c <RADIO_InitDefaultAttributes+0x1a8>)
   11eec:	0027      	movs	r7, r4
   11eee:	60a3      	str	r3, [r4, #8]
   11ef0:	0023      	movs	r3, r4
   11ef2:	3334      	adds	r3, #52	; 0x34
   11ef4:	701d      	strb	r5, [r3, #0]
   11ef6:	0023      	movs	r3, r4
   11ef8:	3336      	adds	r3, #54	; 0x36
   11efa:	701a      	strb	r2, [r3, #0]
   11efc:	1ce3      	adds	r3, r4, #3
   11efe:	77dd      	strb	r5, [r3, #31]
   11f00:	0023      	movs	r3, r4
   11f02:	3333      	adds	r3, #51	; 0x33
   11f04:	701d      	strb	r5, [r3, #0]
   11f06:	2300      	movs	r3, #0
   11f08:	77cb      	strb	r3, [r1, #31]
   11f0a:	2108      	movs	r1, #8
   11f0c:	82a1      	strh	r1, [r4, #20]
   11f0e:	0021      	movs	r1, r4
   11f10:	3135      	adds	r1, #53	; 0x35
   11f12:	700a      	strb	r2, [r1, #0]
   11f14:	1d22      	adds	r2, r4, #4
   11f16:	77d5      	strb	r5, [r2, #31]
   11f18:	1d62      	adds	r2, r4, #5
   11f1a:	77d3      	strb	r3, [r2, #31]
   11f1c:	1da2      	adds	r2, r4, #6
   11f1e:	77d3      	strb	r3, [r2, #31]
   11f20:	2194      	movs	r1, #148	; 0x94
   11f22:	22c1      	movs	r2, #193	; 0xc1
   11f24:	76a1      	strb	r1, [r4, #26]
   11f26:	7662      	strb	r2, [r4, #25]
   11f28:	76e2      	strb	r2, [r4, #27]
   11f2a:	3991      	subs	r1, #145	; 0x91
   11f2c:	1ca2      	adds	r2, r4, #2
   11f2e:	77d1      	strb	r1, [r2, #31]
   11f30:	2234      	movs	r2, #52	; 0x34
   11f32:	7622      	strb	r2, [r4, #24]
   11f34:	0022      	movs	r2, r4
   11f36:	317d      	adds	r1, #125	; 0x7d
   11f38:	3232      	adds	r2, #50	; 0x32
   11f3a:	7011      	strb	r1, [r2, #0]
   11f3c:	4a50      	ldr	r2, [pc, #320]	; (12080 <RADIO_InitDefaultAttributes+0x1ac>)
   11f3e:	397e      	subs	r1, #126	; 0x7e
   11f40:	60e2      	str	r2, [r4, #12]
   11f42:	0022      	movs	r2, r4
   11f44:	3237      	adds	r2, #55	; 0x37
   11f46:	7011      	strb	r1, [r2, #0]
   11f48:	0022      	movs	r2, r4
   11f4a:	3109      	adds	r1, #9
   11f4c:	3238      	adds	r2, #56	; 0x38
   11f4e:	7011      	strb	r1, [r2, #0]
   11f50:	0022      	movs	r2, r4
   11f52:	3107      	adds	r1, #7
   11f54:	3239      	adds	r2, #57	; 0x39
   11f56:	7011      	strb	r1, [r2, #0]
   11f58:	0022      	movs	r2, r4
   11f5a:	322c      	adds	r2, #44	; 0x2c
   11f5c:	7013      	strb	r3, [r2, #0]
   11f5e:	4a49      	ldr	r2, [pc, #292]	; (12084 <RADIO_InitDefaultAttributes+0x1b0>)
   11f60:	82e3      	strh	r3, [r4, #22]
   11f62:	62a2      	str	r2, [r4, #40]	; 0x28
   11f64:	0022      	movs	r2, r4
   11f66:	324c      	adds	r2, #76	; 0x4c
   11f68:	8013      	strh	r3, [r2, #0]
   11f6a:	0022      	movs	r2, r4
   11f6c:	324e      	adds	r2, #78	; 0x4e
   11f6e:	7013      	strb	r3, [r2, #0]
   11f70:	0022      	movs	r2, r4
   11f72:	324f      	adds	r2, #79	; 0x4f
   11f74:	7013      	strb	r3, [r2, #0]
   11f76:	0022      	movs	r2, r4
   11f78:	3240      	adds	r2, #64	; 0x40
   11f7a:	7013      	strb	r3, [r2, #0]
   11f7c:	0022      	movs	r2, r4
   11f7e:	3241      	adds	r2, #65	; 0x41
   11f80:	7013      	strb	r3, [r2, #0]
   11f82:	0022      	movs	r2, r4
   11f84:	3254      	adds	r2, #84	; 0x54
   11f86:	7013      	strb	r3, [r2, #0]
   11f88:	0022      	movs	r2, r4
   11f8a:	3255      	adds	r2, #85	; 0x55
   11f8c:	7015      	strb	r5, [r2, #0]
   11f8e:	0022      	movs	r2, r4
   11f90:	3257      	adds	r2, #87	; 0x57
   11f92:	6463      	str	r3, [r4, #68]	; 0x44
   11f94:	64a3      	str	r3, [r4, #72]	; 0x48
   11f96:	87a3      	strh	r3, [r4, #60]	; 0x3c
   11f98:	87e3      	strh	r3, [r4, #62]	; 0x3e
   11f9a:	7013      	strb	r3, [r2, #0]
   11f9c:	3730      	adds	r7, #48	; 0x30
   11f9e:	783b      	ldrb	r3, [r7, #0]
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d151      	bne.n	12048 <RADIO_InitDefaultAttributes+0x174>
   11fa4:	4838      	ldr	r0, [pc, #224]	; (12088 <RADIO_InitDefaultAttributes+0x1b4>)
   11fa6:	4e39      	ldr	r6, [pc, #228]	; (1208c <RADIO_InitDefaultAttributes+0x1b8>)
   11fa8:	47b0      	blx	r6
   11faa:	2808      	cmp	r0, #8
   11fac:	d149      	bne.n	12042 <RADIO_InitDefaultAttributes+0x16e>
   11fae:	4838      	ldr	r0, [pc, #224]	; (12090 <RADIO_InitDefaultAttributes+0x1bc>)
   11fb0:	47b0      	blx	r6
   11fb2:	2808      	cmp	r0, #8
   11fb4:	d145      	bne.n	12042 <RADIO_InitDefaultAttributes+0x16e>
   11fb6:	4837      	ldr	r0, [pc, #220]	; (12094 <RADIO_InitDefaultAttributes+0x1c0>)
   11fb8:	47b0      	blx	r6
   11fba:	2808      	cmp	r0, #8
   11fbc:	d141      	bne.n	12042 <RADIO_InitDefaultAttributes+0x16e>
   11fbe:	4836      	ldr	r0, [pc, #216]	; (12098 <RADIO_InitDefaultAttributes+0x1c4>)
   11fc0:	47b0      	blx	r6
   11fc2:	2808      	cmp	r0, #8
   11fc4:	d13d      	bne.n	12042 <RADIO_InitDefaultAttributes+0x16e>
   11fc6:	703d      	strb	r5, [r7, #0]
   11fc8:	4b34      	ldr	r3, [pc, #208]	; (1209c <RADIO_InitDefaultAttributes+0x1c8>)
   11fca:	4798      	blx	r3
   11fcc:	4b34      	ldr	r3, [pc, #208]	; (120a0 <RADIO_InitDefaultAttributes+0x1cc>)
   11fce:	4798      	blx	r3
   11fd0:	2800      	cmp	r0, #0
   11fd2:	d107      	bne.n	11fe4 <RADIO_InitDefaultAttributes+0x110>
   11fd4:	0023      	movs	r3, r4
   11fd6:	3355      	adds	r3, #85	; 0x55
   11fd8:	7018      	strb	r0, [r3, #0]
   11fda:	4b32      	ldr	r3, [pc, #200]	; (120a4 <RADIO_InitDefaultAttributes+0x1d0>)
   11fdc:	4798      	blx	r3
   11fde:	0023      	movs	r3, r4
   11fe0:	3354      	adds	r3, #84	; 0x54
   11fe2:	7018      	strb	r0, [r3, #0]
   11fe4:	4b30      	ldr	r3, [pc, #192]	; (120a8 <RADIO_InitDefaultAttributes+0x1d4>)
   11fe6:	4798      	blx	r3
   11fe8:	2201      	movs	r2, #1
   11fea:	2100      	movs	r1, #0
   11fec:	0010      	movs	r0, r2
   11fee:	4f2f      	ldr	r7, [pc, #188]	; (120ac <RADIO_InitDefaultAttributes+0x1d8>)
   11ff0:	47b8      	blx	r7
   11ff2:	6820      	ldr	r0, [r4, #0]
   11ff4:	4b2e      	ldr	r3, [pc, #184]	; (120b0 <RADIO_InitDefaultAttributes+0x1dc>)
   11ff6:	4798      	blx	r3
   11ff8:	2142      	movs	r1, #66	; 0x42
   11ffa:	203b      	movs	r0, #59	; 0x3b
   11ffc:	4d2d      	ldr	r5, [pc, #180]	; (120b4 <RADIO_InitDefaultAttributes+0x1e0>)
   11ffe:	47a8      	blx	r5
   12000:	203b      	movs	r0, #59	; 0x3b
   12002:	4b2d      	ldr	r3, [pc, #180]	; (120b8 <RADIO_InitDefaultAttributes+0x1e4>)
   12004:	4798      	blx	r3
   12006:	2620      	movs	r6, #32
   12008:	4006      	ands	r6, r0
   1200a:	d1f9      	bne.n	12000 <RADIO_InitDefaultAttributes+0x12c>
   1200c:	2123      	movs	r1, #35	; 0x23
   1200e:	200c      	movs	r0, #12
   12010:	47a8      	blx	r5
   12012:	21aa      	movs	r1, #170	; 0xaa
   12014:	201f      	movs	r0, #31
   12016:	47a8      	blx	r5
   12018:	21ff      	movs	r1, #255	; 0xff
   1201a:	2032      	movs	r0, #50	; 0x32
   1201c:	47a8      	blx	r5
   1201e:	2140      	movs	r1, #64	; 0x40
   12020:	2031      	movs	r0, #49	; 0x31
   12022:	47a8      	blx	r5
   12024:	2201      	movs	r2, #1
   12026:	0030      	movs	r0, r6
   12028:	0011      	movs	r1, r2
   1202a:	47b8      	blx	r7
   1202c:	21ff      	movs	r1, #255	; 0xff
   1202e:	2023      	movs	r0, #35	; 0x23
   12030:	47a8      	blx	r5
   12032:	4b21      	ldr	r3, [pc, #132]	; (120b8 <RADIO_InitDefaultAttributes+0x1e4>)
   12034:	2042      	movs	r0, #66	; 0x42
   12036:	4798      	blx	r3
   12038:	3431      	adds	r4, #49	; 0x31
   1203a:	4b20      	ldr	r3, [pc, #128]	; (120bc <RADIO_InitDefaultAttributes+0x1e8>)
   1203c:	7020      	strb	r0, [r4, #0]
   1203e:	4798      	blx	r3
   12040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12042:	4b1f      	ldr	r3, [pc, #124]	; (120c0 <RADIO_InitDefaultAttributes+0x1ec>)
   12044:	4798      	blx	r3
   12046:	e7bf      	b.n	11fc8 <RADIO_InitDefaultAttributes+0xf4>
   12048:	0023      	movs	r3, r4
   1204a:	332d      	adds	r3, #45	; 0x2d
   1204c:	4d1d      	ldr	r5, [pc, #116]	; (120c4 <RADIO_InitDefaultAttributes+0x1f0>)
   1204e:	7818      	ldrb	r0, [r3, #0]
   12050:	47a8      	blx	r5
   12052:	0023      	movs	r3, r4
   12054:	332e      	adds	r3, #46	; 0x2e
   12056:	7818      	ldrb	r0, [r3, #0]
   12058:	47a8      	blx	r5
   1205a:	0023      	movs	r3, r4
   1205c:	332f      	adds	r3, #47	; 0x2f
   1205e:	7818      	ldrb	r0, [r3, #0]
   12060:	47a8      	blx	r5
   12062:	0023      	movs	r3, r4
   12064:	3350      	adds	r3, #80	; 0x50
   12066:	7818      	ldrb	r0, [r3, #0]
   12068:	47a8      	blx	r5
   1206a:	e7ad      	b.n	11fc8 <RADIO_InitDefaultAttributes+0xf4>
   1206c:	2000203f 	.word	0x2000203f
   12070:	20001aac 	.word	0x20001aac
   12074:	33be27a0 	.word	0x33be27a0
   12078:	000061a8 	.word	0x000061a8
   1207c:	0000c350 	.word	0x0000c350
   12080:	00003a98 	.word	0x00003a98
   12084:	20001f3c 	.word	0x20001f3c
   12088:	20001ad9 	.word	0x20001ad9
   1208c:	00009eb9 	.word	0x00009eb9
   12090:	20001ada 	.word	0x20001ada
   12094:	20001adb 	.word	0x20001adb
   12098:	20001afc 	.word	0x20001afc
   1209c:	00003ec5 	.word	0x00003ec5
   120a0:	00004031 	.word	0x00004031
   120a4:	0000402d 	.word	0x0000402d
   120a8:	00011d75 	.word	0x00011d75
   120ac:	0000a549 	.word	0x0000a549
   120b0:	0001100d 	.word	0x0001100d
   120b4:	00003f05 	.word	0x00003f05
   120b8:	00003f2d 	.word	0x00003f2d
   120bc:	00011eb9 	.word	0x00011eb9
   120c0:	00009dfd 	.word	0x00009dfd
   120c4:	0000a1f1 	.word	0x0000a1f1

000120c8 <RADIO_Receive>:
   120c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120ca:	7803      	ldrb	r3, [r0, #0]
   120cc:	0006      	movs	r6, r0
   120ce:	4d24      	ldr	r5, [pc, #144]	; (12160 <RADIO_Receive+0x98>)
   120d0:	2b00      	cmp	r3, #0
   120d2:	d11d      	bne.n	12110 <RADIO_Receive+0x48>
   120d4:	782b      	ldrb	r3, [r5, #0]
   120d6:	2004      	movs	r0, #4
   120d8:	2b01      	cmp	r3, #1
   120da:	d118      	bne.n	1210e <RADIO_Receive+0x46>
   120dc:	4c21      	ldr	r4, [pc, #132]	; (12164 <RADIO_Receive+0x9c>)
   120de:	4f22      	ldr	r7, [pc, #136]	; (12168 <RADIO_Receive+0xa0>)
   120e0:	0023      	movs	r3, r4
   120e2:	332f      	adds	r3, #47	; 0x2f
   120e4:	7818      	ldrb	r0, [r3, #0]
   120e6:	47b8      	blx	r7
   120e8:	0023      	movs	r3, r4
   120ea:	3334      	adds	r3, #52	; 0x34
   120ec:	781b      	ldrb	r3, [r3, #0]
   120ee:	2b00      	cmp	r3, #0
   120f0:	d102      	bne.n	120f8 <RADIO_Receive+0x30>
   120f2:	342e      	adds	r4, #46	; 0x2e
   120f4:	7820      	ldrb	r0, [r4, #0]
   120f6:	47b8      	blx	r7
   120f8:	8872      	ldrh	r2, [r6, #2]
   120fa:	4b1c      	ldr	r3, [pc, #112]	; (1216c <RADIO_Receive+0xa4>)
   120fc:	2008      	movs	r0, #8
   120fe:	801a      	strh	r2, [r3, #0]
   12100:	2304      	movs	r3, #4
   12102:	702b      	strb	r3, [r5, #0]
   12104:	4b1a      	ldr	r3, [pc, #104]	; (12170 <RADIO_Receive+0xa8>)
   12106:	4798      	blx	r3
   12108:	4b1a      	ldr	r3, [pc, #104]	; (12174 <RADIO_Receive+0xac>)
   1210a:	4798      	blx	r3
   1210c:	2000      	movs	r0, #0
   1210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12110:	782b      	ldrb	r3, [r5, #0]
   12112:	2000      	movs	r0, #0
   12114:	2b01      	cmp	r3, #1
   12116:	d0fa      	beq.n	1210e <RADIO_Receive+0x46>
   12118:	782b      	ldrb	r3, [r5, #0]
   1211a:	3003      	adds	r0, #3
   1211c:	2b04      	cmp	r3, #4
   1211e:	d1f6      	bne.n	1210e <RADIO_Receive+0x46>
   12120:	4c10      	ldr	r4, [pc, #64]	; (12164 <RADIO_Receive+0x9c>)
   12122:	4e11      	ldr	r6, [pc, #68]	; (12168 <RADIO_Receive+0xa0>)
   12124:	0023      	movs	r3, r4
   12126:	332f      	adds	r3, #47	; 0x2f
   12128:	7818      	ldrb	r0, [r3, #0]
   1212a:	47b0      	blx	r6
   1212c:	0023      	movs	r3, r4
   1212e:	3334      	adds	r3, #52	; 0x34
   12130:	781b      	ldrb	r3, [r3, #0]
   12132:	2b00      	cmp	r3, #0
   12134:	d103      	bne.n	1213e <RADIO_Receive+0x76>
   12136:	0023      	movs	r3, r4
   12138:	332e      	adds	r3, #46	; 0x2e
   1213a:	7818      	ldrb	r0, [r3, #0]
   1213c:	47b0      	blx	r6
   1213e:	2200      	movs	r2, #0
   12140:	3434      	adds	r4, #52	; 0x34
   12142:	7821      	ldrb	r1, [r4, #0]
   12144:	0010      	movs	r0, r2
   12146:	4b0c      	ldr	r3, [pc, #48]	; (12178 <RADIO_Receive+0xb0>)
   12148:	4798      	blx	r3
   1214a:	4b0c      	ldr	r3, [pc, #48]	; (1217c <RADIO_Receive+0xb4>)
   1214c:	4798      	blx	r3
   1214e:	2301      	movs	r3, #1
   12150:	2008      	movs	r0, #8
   12152:	4c0b      	ldr	r4, [pc, #44]	; (12180 <RADIO_Receive+0xb8>)
   12154:	702b      	strb	r3, [r5, #0]
   12156:	47a0      	blx	r4
   12158:	2002      	movs	r0, #2
   1215a:	47a0      	blx	r4
   1215c:	e7d6      	b.n	1210c <RADIO_Receive+0x44>
   1215e:	46c0      	nop			; (mov r8, r8)
   12160:	2000203f 	.word	0x2000203f
   12164:	20001aac 	.word	0x20001aac
   12168:	0000a1f1 	.word	0x0000a1f1
   1216c:	200010b0 	.word	0x200010b0
   12170:	00011615 	.word	0x00011615
   12174:	00011d75 	.word	0x00011d75
   12178:	0000a549 	.word	0x0000a549
   1217c:	00011eb9 	.word	0x00011eb9
   12180:	00011641 	.word	0x00011641

00012184 <RADIO_TxDoneHandler>:
   12184:	b5f0      	push	{r4, r5, r6, r7, lr}
   12186:	4b35      	ldr	r3, [pc, #212]	; (1225c <RADIO_TxDoneHandler+0xd8>)
   12188:	b087      	sub	sp, #28
   1218a:	881a      	ldrh	r2, [r3, #0]
   1218c:	06d2      	lsls	r2, r2, #27
   1218e:	0fd2      	lsrs	r2, r2, #31
   12190:	9200      	str	r2, [sp, #0]
   12192:	466a      	mov	r2, sp
   12194:	7810      	ldrb	r0, [r2, #0]
   12196:	881a      	ldrh	r2, [r3, #0]
   12198:	2801      	cmp	r0, #1
   1219a:	d12b      	bne.n	121f4 <RADIO_TxDoneHandler+0x70>
   1219c:	4c30      	ldr	r4, [pc, #192]	; (12260 <RADIO_TxDoneHandler+0xdc>)
   1219e:	2110      	movs	r1, #16
   121a0:	0027      	movs	r7, r4
   121a2:	2500      	movs	r5, #0
   121a4:	438a      	bics	r2, r1
   121a6:	801a      	strh	r2, [r3, #0]
   121a8:	3734      	adds	r7, #52	; 0x34
   121aa:	0002      	movs	r2, r0
   121ac:	7839      	ldrb	r1, [r7, #0]
   121ae:	4b2d      	ldr	r3, [pc, #180]	; (12264 <RADIO_TxDoneHandler+0xe0>)
   121b0:	4798      	blx	r3
   121b2:	68e3      	ldr	r3, [r4, #12]
   121b4:	ae03      	add	r6, sp, #12
   121b6:	9304      	str	r3, [sp, #16]
   121b8:	7035      	strb	r5, [r6, #0]
   121ba:	002a      	movs	r2, r5
   121bc:	4b29      	ldr	r3, [pc, #164]	; (12264 <RADIO_TxDoneHandler+0xe0>)
   121be:	7839      	ldrb	r1, [r7, #0]
   121c0:	0028      	movs	r0, r5
   121c2:	4798      	blx	r3
   121c4:	466a      	mov	r2, sp
   121c6:	4b28      	ldr	r3, [pc, #160]	; (12268 <RADIO_TxDoneHandler+0xe4>)
   121c8:	7812      	ldrb	r2, [r2, #0]
   121ca:	701a      	strb	r2, [r3, #0]
   121cc:	0023      	movs	r3, r4
   121ce:	3357      	adds	r3, #87	; 0x57
   121d0:	701d      	strb	r5, [r3, #0]
   121d2:	4b26      	ldr	r3, [pc, #152]	; (1226c <RADIO_TxDoneHandler+0xe8>)
   121d4:	781b      	ldrb	r3, [r3, #0]
   121d6:	075b      	lsls	r3, r3, #29
   121d8:	d505      	bpl.n	121e6 <RADIO_TxDoneHandler+0x62>
   121da:	6923      	ldr	r3, [r4, #16]
   121dc:	42ab      	cmp	r3, r5
   121de:	d002      	beq.n	121e6 <RADIO_TxDoneHandler+0x62>
   121e0:	0031      	movs	r1, r6
   121e2:	2004      	movs	r0, #4
   121e4:	4798      	blx	r3
   121e6:	4b22      	ldr	r3, [pc, #136]	; (12270 <RADIO_TxDoneHandler+0xec>)
   121e8:	4798      	blx	r3
   121ea:	4b22      	ldr	r3, [pc, #136]	; (12274 <RADIO_TxDoneHandler+0xf0>)
   121ec:	4798      	blx	r3
   121ee:	2000      	movs	r0, #0
   121f0:	b007      	add	sp, #28
   121f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   121f4:	07d2      	lsls	r2, r2, #31
   121f6:	d402      	bmi.n	121fe <RADIO_TxDoneHandler+0x7a>
   121f8:	881a      	ldrh	r2, [r3, #0]
   121fa:	0752      	lsls	r2, r2, #29
   121fc:	d527      	bpl.n	1224e <RADIO_TxDoneHandler+0xca>
   121fe:	2601      	movs	r6, #1
   12200:	2104      	movs	r1, #4
   12202:	881a      	ldrh	r2, [r3, #0]
   12204:	4f16      	ldr	r7, [pc, #88]	; (12260 <RADIO_TxDoneHandler+0xdc>)
   12206:	43b2      	bics	r2, r6
   12208:	801a      	strh	r2, [r3, #0]
   1220a:	881a      	ldrh	r2, [r3, #0]
   1220c:	2400      	movs	r4, #0
   1220e:	438a      	bics	r2, r1
   12210:	801a      	strh	r2, [r3, #0]
   12212:	4b19      	ldr	r3, [pc, #100]	; (12278 <RADIO_TxDoneHandler+0xf4>)
   12214:	ad03      	add	r5, sp, #12
   12216:	681b      	ldr	r3, [r3, #0]
   12218:	702c      	strb	r4, [r5, #0]
   1221a:	9304      	str	r3, [sp, #16]
   1221c:	003b      	movs	r3, r7
   1221e:	3334      	adds	r3, #52	; 0x34
   12220:	7819      	ldrb	r1, [r3, #0]
   12222:	0022      	movs	r2, r4
   12224:	0020      	movs	r0, r4
   12226:	4b0f      	ldr	r3, [pc, #60]	; (12264 <RADIO_TxDoneHandler+0xe0>)
   12228:	4798      	blx	r3
   1222a:	4b14      	ldr	r3, [pc, #80]	; (1227c <RADIO_TxDoneHandler+0xf8>)
   1222c:	4798      	blx	r3
   1222e:	4b0e      	ldr	r3, [pc, #56]	; (12268 <RADIO_TxDoneHandler+0xe4>)
   12230:	701e      	strb	r6, [r3, #0]
   12232:	003b      	movs	r3, r7
   12234:	3357      	adds	r3, #87	; 0x57
   12236:	701c      	strb	r4, [r3, #0]
   12238:	4b0c      	ldr	r3, [pc, #48]	; (1226c <RADIO_TxDoneHandler+0xe8>)
   1223a:	781b      	ldrb	r3, [r3, #0]
   1223c:	079b      	lsls	r3, r3, #30
   1223e:	d5d6      	bpl.n	121ee <RADIO_TxDoneHandler+0x6a>
   12240:	693b      	ldr	r3, [r7, #16]
   12242:	42a3      	cmp	r3, r4
   12244:	d0d3      	beq.n	121ee <RADIO_TxDoneHandler+0x6a>
   12246:	0029      	movs	r1, r5
   12248:	2002      	movs	r0, #2
   1224a:	4798      	blx	r3
   1224c:	e7cf      	b.n	121ee <RADIO_TxDoneHandler+0x6a>
   1224e:	881b      	ldrh	r3, [r3, #0]
   12250:	059b      	lsls	r3, r3, #22
   12252:	d5cc      	bpl.n	121ee <RADIO_TxDoneHandler+0x6a>
   12254:	4b0a      	ldr	r3, [pc, #40]	; (12280 <RADIO_TxDoneHandler+0xfc>)
   12256:	4798      	blx	r3
   12258:	e7c9      	b.n	121ee <RADIO_TxDoneHandler+0x6a>
   1225a:	46c0      	nop			; (mov r8, r8)
   1225c:	2000203c 	.word	0x2000203c
   12260:	20001aac 	.word	0x20001aac
   12264:	0000a549 	.word	0x0000a549
   12268:	2000203f 	.word	0x2000203f
   1226c:	2000203e 	.word	0x2000203e
   12270:	00003ec5 	.word	0x00003ec5
   12274:	00011ed5 	.word	0x00011ed5
   12278:	200010b8 	.word	0x200010b8
   1227c:	00011eb9 	.word	0x00011eb9
   12280:	0001261d 	.word	0x0001261d

00012284 <RADIO_RxDoneHandler>:
   12284:	b5f0      	push	{r4, r5, r6, r7, lr}
   12286:	4b8b      	ldr	r3, [pc, #556]	; (124b4 <RADIO_RxDoneHandler+0x230>)
   12288:	b085      	sub	sp, #20
   1228a:	881c      	ldrh	r4, [r3, #0]
   1228c:	881a      	ldrh	r2, [r3, #0]
   1228e:	06a4      	lsls	r4, r4, #26
   12290:	0fe4      	lsrs	r4, r4, #31
   12292:	b2e0      	uxtb	r0, r4
   12294:	2801      	cmp	r0, #1
   12296:	d126      	bne.n	122e6 <RADIO_RxDoneHandler+0x62>
   12298:	4d87      	ldr	r5, [pc, #540]	; (124b8 <RADIO_RxDoneHandler+0x234>)
   1229a:	2120      	movs	r1, #32
   1229c:	002e      	movs	r6, r5
   1229e:	438a      	bics	r2, r1
   122a0:	801a      	strh	r2, [r3, #0]
   122a2:	3634      	adds	r6, #52	; 0x34
   122a4:	0002      	movs	r2, r0
   122a6:	7831      	ldrb	r1, [r6, #0]
   122a8:	4f84      	ldr	r7, [pc, #528]	; (124bc <RADIO_RxDoneHandler+0x238>)
   122aa:	47b8      	blx	r7
   122ac:	2200      	movs	r2, #0
   122ae:	7831      	ldrb	r1, [r6, #0]
   122b0:	0010      	movs	r0, r2
   122b2:	47b8      	blx	r7
   122b4:	4b82      	ldr	r3, [pc, #520]	; (124c0 <RADIO_RxDoneHandler+0x23c>)
   122b6:	4798      	blx	r3
   122b8:	4b82      	ldr	r3, [pc, #520]	; (124c4 <RADIO_RxDoneHandler+0x240>)
   122ba:	002a      	movs	r2, r5
   122bc:	701c      	strb	r4, [r3, #0]
   122be:	2300      	movs	r3, #0
   122c0:	322c      	adds	r2, #44	; 0x2c
   122c2:	7013      	strb	r3, [r2, #0]
   122c4:	002a      	movs	r2, r5
   122c6:	a901      	add	r1, sp, #4
   122c8:	3257      	adds	r2, #87	; 0x57
   122ca:	7013      	strb	r3, [r2, #0]
   122cc:	700b      	strb	r3, [r1, #0]
   122ce:	4b7e      	ldr	r3, [pc, #504]	; (124c8 <RADIO_RxDoneHandler+0x244>)
   122d0:	781b      	ldrb	r3, [r3, #0]
   122d2:	071b      	lsls	r3, r3, #28
   122d4:	d504      	bpl.n	122e0 <RADIO_RxDoneHandler+0x5c>
   122d6:	692b      	ldr	r3, [r5, #16]
   122d8:	2008      	movs	r0, #8
   122da:	2b00      	cmp	r3, #0
   122dc:	d000      	beq.n	122e0 <RADIO_RxDoneHandler+0x5c>
   122de:	e07e      	b.n	123de <RADIO_RxDoneHandler+0x15a>
   122e0:	2000      	movs	r0, #0
   122e2:	b005      	add	sp, #20
   122e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122e6:	0652      	lsls	r2, r2, #25
   122e8:	d402      	bmi.n	122f0 <RADIO_RxDoneHandler+0x6c>
   122ea:	881a      	ldrh	r2, [r3, #0]
   122ec:	0612      	lsls	r2, r2, #24
   122ee:	d523      	bpl.n	12338 <RADIO_RxDoneHandler+0xb4>
   122f0:	2140      	movs	r1, #64	; 0x40
   122f2:	881a      	ldrh	r2, [r3, #0]
   122f4:	4c70      	ldr	r4, [pc, #448]	; (124b8 <RADIO_RxDoneHandler+0x234>)
   122f6:	438a      	bics	r2, r1
   122f8:	801a      	strh	r2, [r3, #0]
   122fa:	881a      	ldrh	r2, [r3, #0]
   122fc:	1849      	adds	r1, r1, r1
   122fe:	438a      	bics	r2, r1
   12300:	801a      	strh	r2, [r3, #0]
   12302:	0023      	movs	r3, r4
   12304:	2200      	movs	r2, #0
   12306:	3334      	adds	r3, #52	; 0x34
   12308:	7819      	ldrb	r1, [r3, #0]
   1230a:	0010      	movs	r0, r2
   1230c:	4b6b      	ldr	r3, [pc, #428]	; (124bc <RADIO_RxDoneHandler+0x238>)
   1230e:	4798      	blx	r3
   12310:	4b6b      	ldr	r3, [pc, #428]	; (124c0 <RADIO_RxDoneHandler+0x23c>)
   12312:	4798      	blx	r3
   12314:	2201      	movs	r2, #1
   12316:	4b6b      	ldr	r3, [pc, #428]	; (124c4 <RADIO_RxDoneHandler+0x240>)
   12318:	a901      	add	r1, sp, #4
   1231a:	701a      	strb	r2, [r3, #0]
   1231c:	0022      	movs	r2, r4
   1231e:	2300      	movs	r3, #0
   12320:	322c      	adds	r2, #44	; 0x2c
   12322:	7013      	strb	r3, [r2, #0]
   12324:	0022      	movs	r2, r4
   12326:	3257      	adds	r2, #87	; 0x57
   12328:	7013      	strb	r3, [r2, #0]
   1232a:	700b      	strb	r3, [r1, #0]
   1232c:	4b66      	ldr	r3, [pc, #408]	; (124c8 <RADIO_RxDoneHandler+0x244>)
   1232e:	781b      	ldrb	r3, [r3, #0]
   12330:	071b      	lsls	r3, r3, #28
   12332:	d5d5      	bpl.n	122e0 <RADIO_RxDoneHandler+0x5c>
   12334:	6923      	ldr	r3, [r4, #16]
   12336:	e7cf      	b.n	122d8 <RADIO_RxDoneHandler+0x54>
   12338:	881a      	ldrh	r2, [r3, #0]
   1233a:	0792      	lsls	r2, r2, #30
   1233c:	d55a      	bpl.n	123f4 <RADIO_RxDoneHandler+0x170>
   1233e:	2102      	movs	r1, #2
   12340:	881a      	ldrh	r2, [r3, #0]
   12342:	4d62      	ldr	r5, [pc, #392]	; (124cc <RADIO_RxDoneHandler+0x248>)
   12344:	438a      	bics	r2, r1
   12346:	801a      	strh	r2, [r3, #0]
   12348:	2013      	movs	r0, #19
   1234a:	47a8      	blx	r5
   1234c:	4c5a      	ldr	r4, [pc, #360]	; (124b8 <RADIO_RxDoneHandler+0x234>)
   1234e:	2100      	movs	r1, #0
   12350:	0026      	movs	r6, r4
   12352:	362c      	adds	r6, #44	; 0x2c
   12354:	7030      	strb	r0, [r6, #0]
   12356:	4b5e      	ldr	r3, [pc, #376]	; (124d0 <RADIO_RxDoneHandler+0x24c>)
   12358:	200d      	movs	r0, #13
   1235a:	4798      	blx	r3
   1235c:	7832      	ldrb	r2, [r6, #0]
   1235e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   12360:	b2d2      	uxtb	r2, r2
   12362:	4b5c      	ldr	r3, [pc, #368]	; (124d4 <RADIO_RxDoneHandler+0x250>)
   12364:	2000      	movs	r0, #0
   12366:	4798      	blx	r3
   12368:	2019      	movs	r0, #25
   1236a:	47a8      	blx	r5
   1236c:	0023      	movs	r3, r4
   1236e:	3332      	adds	r3, #50	; 0x32
   12370:	4a59      	ldr	r2, [pc, #356]	; (124d8 <RADIO_RxDoneHandler+0x254>)
   12372:	7018      	strb	r0, [r3, #0]
   12374:	6823      	ldr	r3, [r4, #0]
   12376:	1899      	adds	r1, r3, r2
   12378:	4a58      	ldr	r2, [pc, #352]	; (124dc <RADIO_RxDoneHandler+0x258>)
   1237a:	4291      	cmp	r1, r2
   1237c:	d831      	bhi.n	123e2 <RADIO_RxDoneHandler+0x15e>
   1237e:	201a      	movs	r0, #26
   12380:	47a8      	blx	r5
   12382:	3063      	adds	r0, #99	; 0x63
   12384:	0023      	movs	r3, r4
   12386:	3356      	adds	r3, #86	; 0x56
   12388:	7018      	strb	r0, [r3, #0]
   1238a:	0022      	movs	r2, r4
   1238c:	2100      	movs	r1, #0
   1238e:	2003      	movs	r0, #3
   12390:	3232      	adds	r2, #50	; 0x32
   12392:	5651      	ldrsb	r1, [r2, r1]
   12394:	17cb      	asrs	r3, r1, #31
   12396:	4003      	ands	r3, r0
   12398:	185b      	adds	r3, r3, r1
   1239a:	109b      	asrs	r3, r3, #2
   1239c:	7013      	strb	r3, [r2, #0]
   1239e:	0023      	movs	r3, r4
   123a0:	2200      	movs	r2, #0
   123a2:	3334      	adds	r3, #52	; 0x34
   123a4:	7819      	ldrb	r1, [r3, #0]
   123a6:	0010      	movs	r0, r2
   123a8:	4b44      	ldr	r3, [pc, #272]	; (124bc <RADIO_RxDoneHandler+0x238>)
   123aa:	4798      	blx	r3
   123ac:	4b44      	ldr	r3, [pc, #272]	; (124c0 <RADIO_RxDoneHandler+0x23c>)
   123ae:	4798      	blx	r3
   123b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   123b2:	a901      	add	r1, sp, #4
   123b4:	604b      	str	r3, [r1, #4]
   123b6:	0023      	movs	r3, r4
   123b8:	332c      	adds	r3, #44	; 0x2c
   123ba:	781b      	ldrb	r3, [r3, #0]
   123bc:	2201      	movs	r2, #1
   123be:	720b      	strb	r3, [r1, #8]
   123c0:	2300      	movs	r3, #0
   123c2:	700b      	strb	r3, [r1, #0]
   123c4:	4b3f      	ldr	r3, [pc, #252]	; (124c4 <RADIO_RxDoneHandler+0x240>)
   123c6:	701a      	strb	r2, [r3, #0]
   123c8:	4b3f      	ldr	r3, [pc, #252]	; (124c8 <RADIO_RxDoneHandler+0x244>)
   123ca:	7818      	ldrb	r0, [r3, #0]
   123cc:	07c0      	lsls	r0, r0, #31
   123ce:	0fc0      	lsrs	r0, r0, #31
   123d0:	4290      	cmp	r0, r2
   123d2:	d000      	beq.n	123d6 <RADIO_RxDoneHandler+0x152>
   123d4:	e784      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   123d6:	6923      	ldr	r3, [r4, #16]
   123d8:	2b00      	cmp	r3, #0
   123da:	d100      	bne.n	123de <RADIO_RxDoneHandler+0x15a>
   123dc:	e780      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   123de:	4798      	blx	r3
   123e0:	e77e      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   123e2:	4a3f      	ldr	r2, [pc, #252]	; (124e0 <RADIO_RxDoneHandler+0x25c>)
   123e4:	189b      	adds	r3, r3, r2
   123e6:	4a3f      	ldr	r2, [pc, #252]	; (124e4 <RADIO_RxDoneHandler+0x260>)
   123e8:	4293      	cmp	r3, r2
   123ea:	d8ce      	bhi.n	1238a <RADIO_RxDoneHandler+0x106>
   123ec:	201a      	movs	r0, #26
   123ee:	47a8      	blx	r5
   123f0:	305c      	adds	r0, #92	; 0x5c
   123f2:	e7c7      	b.n	12384 <RADIO_RxDoneHandler+0x100>
   123f4:	881a      	ldrh	r2, [r3, #0]
   123f6:	0712      	lsls	r2, r2, #28
   123f8:	0fd5      	lsrs	r5, r2, #31
   123fa:	2a00      	cmp	r2, #0
   123fc:	da27      	bge.n	1244e <RADIO_RxDoneHandler+0x1ca>
   123fe:	2108      	movs	r1, #8
   12400:	881a      	ldrh	r2, [r3, #0]
   12402:	4c2d      	ldr	r4, [pc, #180]	; (124b8 <RADIO_RxDoneHandler+0x234>)
   12404:	438a      	bics	r2, r1
   12406:	801a      	strh	r2, [r3, #0]
   12408:	0023      	movs	r3, r4
   1240a:	2280      	movs	r2, #128	; 0x80
   1240c:	3332      	adds	r3, #50	; 0x32
   1240e:	701a      	strb	r2, [r3, #0]
   12410:	0023      	movs	r3, r4
   12412:	2200      	movs	r2, #0
   12414:	3334      	adds	r3, #52	; 0x34
   12416:	7819      	ldrb	r1, [r3, #0]
   12418:	0010      	movs	r0, r2
   1241a:	4b28      	ldr	r3, [pc, #160]	; (124bc <RADIO_RxDoneHandler+0x238>)
   1241c:	4798      	blx	r3
   1241e:	4b28      	ldr	r3, [pc, #160]	; (124c0 <RADIO_RxDoneHandler+0x23c>)
   12420:	4798      	blx	r3
   12422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12424:	a901      	add	r1, sp, #4
   12426:	604b      	str	r3, [r1, #4]
   12428:	0023      	movs	r3, r4
   1242a:	332c      	adds	r3, #44	; 0x2c
   1242c:	781b      	ldrb	r3, [r3, #0]
   1242e:	0022      	movs	r2, r4
   12430:	720b      	strb	r3, [r1, #8]
   12432:	2300      	movs	r3, #0
   12434:	3257      	adds	r2, #87	; 0x57
   12436:	7013      	strb	r3, [r2, #0]
   12438:	700b      	strb	r3, [r1, #0]
   1243a:	4b22      	ldr	r3, [pc, #136]	; (124c4 <RADIO_RxDoneHandler+0x240>)
   1243c:	701d      	strb	r5, [r3, #0]
   1243e:	4b22      	ldr	r3, [pc, #136]	; (124c8 <RADIO_RxDoneHandler+0x244>)
   12440:	7818      	ldrb	r0, [r3, #0]
   12442:	07c0      	lsls	r0, r0, #31
   12444:	0fc0      	lsrs	r0, r0, #31
   12446:	2801      	cmp	r0, #1
   12448:	d000      	beq.n	1244c <RADIO_RxDoneHandler+0x1c8>
   1244a:	e749      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   1244c:	e7c3      	b.n	123d6 <RADIO_RxDoneHandler+0x152>
   1244e:	881a      	ldrh	r2, [r3, #0]
   12450:	05d2      	lsls	r2, r2, #23
   12452:	0fd5      	lsrs	r5, r2, #31
   12454:	2a00      	cmp	r2, #0
   12456:	db00      	blt.n	1245a <RADIO_RxDoneHandler+0x1d6>
   12458:	e742      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   1245a:	4c17      	ldr	r4, [pc, #92]	; (124b8 <RADIO_RxDoneHandler+0x234>)
   1245c:	881a      	ldrh	r2, [r3, #0]
   1245e:	0026      	movs	r6, r4
   12460:	4921      	ldr	r1, [pc, #132]	; (124e8 <RADIO_RxDoneHandler+0x264>)
   12462:	362c      	adds	r6, #44	; 0x2c
   12464:	400a      	ands	r2, r1
   12466:	801a      	strh	r2, [r3, #0]
   12468:	7832      	ldrb	r2, [r6, #0]
   1246a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1246c:	b2d2      	uxtb	r2, r2
   1246e:	2000      	movs	r0, #0
   12470:	4b18      	ldr	r3, [pc, #96]	; (124d4 <RADIO_RxDoneHandler+0x250>)
   12472:	4798      	blx	r3
   12474:	0023      	movs	r3, r4
   12476:	2200      	movs	r2, #0
   12478:	3334      	adds	r3, #52	; 0x34
   1247a:	7819      	ldrb	r1, [r3, #0]
   1247c:	0010      	movs	r0, r2
   1247e:	4b0f      	ldr	r3, [pc, #60]	; (124bc <RADIO_RxDoneHandler+0x238>)
   12480:	4798      	blx	r3
   12482:	4b0f      	ldr	r3, [pc, #60]	; (124c0 <RADIO_RxDoneHandler+0x23c>)
   12484:	4798      	blx	r3
   12486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12488:	a901      	add	r1, sp, #4
   1248a:	604b      	str	r3, [r1, #4]
   1248c:	7833      	ldrb	r3, [r6, #0]
   1248e:	0022      	movs	r2, r4
   12490:	720b      	strb	r3, [r1, #8]
   12492:	2300      	movs	r3, #0
   12494:	3257      	adds	r2, #87	; 0x57
   12496:	7013      	strb	r3, [r2, #0]
   12498:	700b      	strb	r3, [r1, #0]
   1249a:	4b0a      	ldr	r3, [pc, #40]	; (124c4 <RADIO_RxDoneHandler+0x240>)
   1249c:	701d      	strb	r5, [r3, #0]
   1249e:	4b0a      	ldr	r3, [pc, #40]	; (124c8 <RADIO_RxDoneHandler+0x244>)
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	06db      	lsls	r3, r3, #27
   124a4:	d400      	bmi.n	124a8 <RADIO_RxDoneHandler+0x224>
   124a6:	e71b      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   124a8:	6923      	ldr	r3, [r4, #16]
   124aa:	2b00      	cmp	r3, #0
   124ac:	d100      	bne.n	124b0 <RADIO_RxDoneHandler+0x22c>
   124ae:	e717      	b.n	122e0 <RADIO_RxDoneHandler+0x5c>
   124b0:	2010      	movs	r0, #16
   124b2:	e794      	b.n	123de <RADIO_RxDoneHandler+0x15a>
   124b4:	2000203c 	.word	0x2000203c
   124b8:	20001aac 	.word	0x20001aac
   124bc:	0000a549 	.word	0x0000a549
   124c0:	00011eb9 	.word	0x00011eb9
   124c4:	2000203f 	.word	0x2000203f
   124c8:	2000203e 	.word	0x2000203e
   124cc:	00003f2d 	.word	0x00003f2d
   124d0:	00003f05 	.word	0x00003f05
   124d4:	00003f99 	.word	0x00003f99
   124d8:	cc9eec80 	.word	0xcc9eec80
   124dc:	096ae380 	.word	0x096ae380
   124e0:	e78fe580 	.word	0xe78fe580
   124e4:	06dac2c0 	.word	0x06dac2c0
   124e8:	fffffeff 	.word	0xfffffeff

000124ec <Radio_LBTScanTimeout>:
   124ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   124ee:	4c1c      	ldr	r4, [pc, #112]	; (12560 <Radio_LBTScanTimeout+0x74>)
   124f0:	0025      	movs	r5, r4
   124f2:	0023      	movs	r3, r4
   124f4:	354f      	adds	r5, #79	; 0x4f
   124f6:	7829      	ldrb	r1, [r5, #0]
   124f8:	3340      	adds	r3, #64	; 0x40
   124fa:	3101      	adds	r1, #1
   124fc:	b2c9      	uxtb	r1, r1
   124fe:	7029      	strb	r1, [r5, #0]
   12500:	781b      	ldrb	r3, [r3, #0]
   12502:	428b      	cmp	r3, r1
   12504:	d315      	bcc.n	12532 <Radio_LBTScanTimeout+0x46>
   12506:	260e      	movs	r6, #14
   12508:	446e      	add	r6, sp
   1250a:	4b16      	ldr	r3, [pc, #88]	; (12564 <Radio_LBTScanTimeout+0x78>)
   1250c:	0030      	movs	r0, r6
   1250e:	4798      	blx	r3
   12510:	2300      	movs	r3, #0
   12512:	5ef2      	ldrsh	r2, [r6, r3]
   12514:	782b      	ldrb	r3, [r5, #0]
   12516:	4353      	muls	r3, r2
   12518:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1251a:	189b      	adds	r3, r3, r2
   1251c:	6463      	str	r3, [r4, #68]	; 0x44
   1251e:	0023      	movs	r3, r4
   12520:	2200      	movs	r2, #0
   12522:	3350      	adds	r3, #80	; 0x50
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	9200      	str	r2, [sp, #0]
   12528:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1252a:	4b0f      	ldr	r3, [pc, #60]	; (12568 <Radio_LBTScanTimeout+0x7c>)
   1252c:	4c0f      	ldr	r4, [pc, #60]	; (1256c <Radio_LBTScanTimeout+0x80>)
   1252e:	47a0      	blx	r4
   12530:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   12532:	2380      	movs	r3, #128	; 0x80
   12534:	4a0e      	ldr	r2, [pc, #56]	; (12570 <Radio_LBTScanTimeout+0x84>)
   12536:	009b      	lsls	r3, r3, #2
   12538:	8810      	ldrh	r0, [r2, #0]
   1253a:	4303      	orrs	r3, r0
   1253c:	8013      	strh	r3, [r2, #0]
   1253e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12540:	0058      	lsls	r0, r3, #1
   12542:	1e4b      	subs	r3, r1, #1
   12544:	4359      	muls	r1, r3
   12546:	4b0b      	ldr	r3, [pc, #44]	; (12574 <Radio_LBTScanTimeout+0x88>)
   12548:	b289      	uxth	r1, r1
   1254a:	4798      	blx	r3
   1254c:	0023      	movs	r3, r4
   1254e:	334c      	adds	r3, #76	; 0x4c
   12550:	8018      	strh	r0, [r3, #0]
   12552:	2300      	movs	r3, #0
   12554:	2001      	movs	r0, #1
   12556:	702b      	strb	r3, [r5, #0]
   12558:	6463      	str	r3, [r4, #68]	; 0x44
   1255a:	4b07      	ldr	r3, [pc, #28]	; (12578 <Radio_LBTScanTimeout+0x8c>)
   1255c:	4798      	blx	r3
   1255e:	e7e7      	b.n	12530 <Radio_LBTScanTimeout+0x44>
   12560:	20001aac 	.word	0x20001aac
   12564:	0000a70d 	.word	0x0000a70d
   12568:	000124ed 	.word	0x000124ed
   1256c:	00009eed 	.word	0x00009eed
   12570:	2000203c 	.word	0x2000203c
   12574:	00012821 	.word	0x00012821
   12578:	00011615 	.word	0x00011615

0001257c <RADIO_ScanHandler>:
   1257c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1257e:	4b1e      	ldr	r3, [pc, #120]	; (125f8 <RADIO_ScanHandler+0x7c>)
   12580:	4798      	blx	r3
   12582:	2000      	movs	r0, #0
   12584:	4b1d      	ldr	r3, [pc, #116]	; (125fc <RADIO_ScanHandler+0x80>)
   12586:	4798      	blx	r3
   12588:	4b1d      	ldr	r3, [pc, #116]	; (12600 <RADIO_ScanHandler+0x84>)
   1258a:	2004      	movs	r0, #4
   1258c:	4798      	blx	r3
   1258e:	4d1d      	ldr	r5, [pc, #116]	; (12604 <RADIO_ScanHandler+0x88>)
   12590:	2600      	movs	r6, #0
   12592:	002b      	movs	r3, r5
   12594:	334c      	adds	r3, #76	; 0x4c
   12596:	801e      	strh	r6, [r3, #0]
   12598:	002b      	movs	r3, r5
   1259a:	3334      	adds	r3, #52	; 0x34
   1259c:	781c      	ldrb	r4, [r3, #0]
   1259e:	2c01      	cmp	r4, #1
   125a0:	d11e      	bne.n	125e0 <RADIO_ScanHandler+0x64>
   125a2:	0022      	movs	r2, r4
   125a4:	0021      	movs	r1, r4
   125a6:	0030      	movs	r0, r6
   125a8:	4f17      	ldr	r7, [pc, #92]	; (12608 <RADIO_ScanHandler+0x8c>)
   125aa:	47b8      	blx	r7
   125ac:	4b17      	ldr	r3, [pc, #92]	; (1260c <RADIO_ScanHandler+0x90>)
   125ae:	2011      	movs	r0, #17
   125b0:	4798      	blx	r3
   125b2:	002b      	movs	r3, r5
   125b4:	334e      	adds	r3, #78	; 0x4e
   125b6:	7018      	strb	r0, [r3, #0]
   125b8:	21ff      	movs	r1, #255	; 0xff
   125ba:	2011      	movs	r0, #17
   125bc:	4b14      	ldr	r3, [pc, #80]	; (12610 <RADIO_ScanHandler+0x94>)
   125be:	4798      	blx	r3
   125c0:	0032      	movs	r2, r6
   125c2:	0021      	movs	r1, r4
   125c4:	2005      	movs	r0, #5
   125c6:	47b8      	blx	r7
   125c8:	2400      	movs	r4, #0
   125ca:	21fa      	movs	r1, #250	; 0xfa
   125cc:	3550      	adds	r5, #80	; 0x50
   125ce:	7828      	ldrb	r0, [r5, #0]
   125d0:	4b10      	ldr	r3, [pc, #64]	; (12614 <RADIO_ScanHandler+0x98>)
   125d2:	4d11      	ldr	r5, [pc, #68]	; (12618 <RADIO_ScanHandler+0x9c>)
   125d4:	9400      	str	r4, [sp, #0]
   125d6:	0022      	movs	r2, r4
   125d8:	0089      	lsls	r1, r1, #2
   125da:	47a8      	blx	r5
   125dc:	0020      	movs	r0, r4
   125de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   125e0:	2c00      	cmp	r4, #0
   125e2:	d1f1      	bne.n	125c8 <RADIO_ScanHandler+0x4c>
   125e4:	0021      	movs	r1, r4
   125e6:	0020      	movs	r0, r4
   125e8:	2201      	movs	r2, #1
   125ea:	4e07      	ldr	r6, [pc, #28]	; (12608 <RADIO_ScanHandler+0x8c>)
   125ec:	47b0      	blx	r6
   125ee:	0022      	movs	r2, r4
   125f0:	0021      	movs	r1, r4
   125f2:	2005      	movs	r0, #5
   125f4:	47b0      	blx	r6
   125f6:	e7e7      	b.n	125c8 <RADIO_ScanHandler+0x4c>
   125f8:	00011d75 	.word	0x00011d75
   125fc:	000118d1 	.word	0x000118d1
   12600:	00011055 	.word	0x00011055
   12604:	20001aac 	.word	0x20001aac
   12608:	0000a549 	.word	0x0000a549
   1260c:	00003f2d 	.word	0x00003f2d
   12610:	00003f05 	.word	0x00003f05
   12614:	000124ed 	.word	0x000124ed
   12618:	00009eed 	.word	0x00009eed

0001261c <radioScanDoneHandler>:
   1261c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1261e:	4a22      	ldr	r2, [pc, #136]	; (126a8 <radioScanDoneHandler+0x8c>)
   12620:	4922      	ldr	r1, [pc, #136]	; (126ac <radioScanDoneHandler+0x90>)
   12622:	8813      	ldrh	r3, [r2, #0]
   12624:	4d22      	ldr	r5, [pc, #136]	; (126b0 <radioScanDoneHandler+0x94>)
   12626:	400b      	ands	r3, r1
   12628:	8013      	strh	r3, [r2, #0]
   1262a:	002b      	movs	r3, r5
   1262c:	3334      	adds	r3, #52	; 0x34
   1262e:	781c      	ldrb	r4, [r3, #0]
   12630:	2c01      	cmp	r4, #1
   12632:	d122      	bne.n	1267a <radioScanDoneHandler+0x5e>
   12634:	21ff      	movs	r1, #255	; 0xff
   12636:	2012      	movs	r0, #18
   12638:	4e1e      	ldr	r6, [pc, #120]	; (126b4 <radioScanDoneHandler+0x98>)
   1263a:	47b0      	blx	r6
   1263c:	002b      	movs	r3, r5
   1263e:	334e      	adds	r3, #78	; 0x4e
   12640:	7819      	ldrb	r1, [r3, #0]
   12642:	2011      	movs	r0, #17
   12644:	47b0      	blx	r6
   12646:	2200      	movs	r2, #0
   12648:	0021      	movs	r1, r4
   1264a:	0010      	movs	r0, r2
   1264c:	4b1a      	ldr	r3, [pc, #104]	; (126b8 <radioScanDoneHandler+0x9c>)
   1264e:	4798      	blx	r3
   12650:	2000      	movs	r0, #0
   12652:	4b1a      	ldr	r3, [pc, #104]	; (126bc <radioScanDoneHandler+0xa0>)
   12654:	4798      	blx	r3
   12656:	4b1a      	ldr	r3, [pc, #104]	; (126c0 <radioScanDoneHandler+0xa4>)
   12658:	4798      	blx	r3
   1265a:	002b      	movs	r3, r5
   1265c:	334c      	adds	r3, #76	; 0x4c
   1265e:	2100      	movs	r1, #0
   12660:	5e59      	ldrsh	r1, [r3, r1]
   12662:	233e      	movs	r3, #62	; 0x3e
   12664:	5eea      	ldrsh	r2, [r5, r3]
   12666:	4b17      	ldr	r3, [pc, #92]	; (126c4 <radioScanDoneHandler+0xa8>)
   12668:	4291      	cmp	r1, r2
   1266a:	da0c      	bge.n	12686 <radioScanDoneHandler+0x6a>
   1266c:	2002      	movs	r0, #2
   1266e:	4798      	blx	r3
   12670:	4b15      	ldr	r3, [pc, #84]	; (126c8 <radioScanDoneHandler+0xac>)
   12672:	4798      	blx	r3
   12674:	2000      	movs	r0, #0
   12676:	b004      	add	sp, #16
   12678:	bd70      	pop	{r4, r5, r6, pc}
   1267a:	2c00      	cmp	r4, #0
   1267c:	d1e8      	bne.n	12650 <radioScanDoneHandler+0x34>
   1267e:	0022      	movs	r2, r4
   12680:	0021      	movs	r1, r4
   12682:	0020      	movs	r0, r4
   12684:	e7e2      	b.n	1264c <radioScanDoneHandler+0x30>
   12686:	2207      	movs	r2, #7
   12688:	ac01      	add	r4, sp, #4
   1268a:	2001      	movs	r0, #1
   1268c:	7022      	strb	r2, [r4, #0]
   1268e:	4798      	blx	r3
   12690:	4b0e      	ldr	r3, [pc, #56]	; (126cc <radioScanDoneHandler+0xb0>)
   12692:	781b      	ldrb	r3, [r3, #0]
   12694:	079b      	lsls	r3, r3, #30
   12696:	d5ed      	bpl.n	12674 <radioScanDoneHandler+0x58>
   12698:	692b      	ldr	r3, [r5, #16]
   1269a:	2b00      	cmp	r3, #0
   1269c:	d0ea      	beq.n	12674 <radioScanDoneHandler+0x58>
   1269e:	0021      	movs	r1, r4
   126a0:	2002      	movs	r0, #2
   126a2:	4798      	blx	r3
   126a4:	e7e6      	b.n	12674 <radioScanDoneHandler+0x58>
   126a6:	46c0      	nop			; (mov r8, r8)
   126a8:	2000203c 	.word	0x2000203c
   126ac:	fffffdff 	.word	0xfffffdff
   126b0:	20001aac 	.word	0x20001aac
   126b4:	00003f05 	.word	0x00003f05
   126b8:	0000a549 	.word	0x0000a549
   126bc:	000119f9 	.word	0x000119f9
   126c0:	00011eb9 	.word	0x00011eb9
   126c4:	000116c1 	.word	0x000116c1
   126c8:	00011da9 	.word	0x00011da9
   126cc:	2000203e 	.word	0x2000203e

000126d0 <__gnu_thumb1_case_sqi>:
   126d0:	b402      	push	{r1}
   126d2:	4671      	mov	r1, lr
   126d4:	0849      	lsrs	r1, r1, #1
   126d6:	0049      	lsls	r1, r1, #1
   126d8:	5609      	ldrsb	r1, [r1, r0]
   126da:	0049      	lsls	r1, r1, #1
   126dc:	448e      	add	lr, r1
   126de:	bc02      	pop	{r1}
   126e0:	4770      	bx	lr
   126e2:	46c0      	nop			; (mov r8, r8)

000126e4 <__gnu_thumb1_case_uqi>:
   126e4:	b402      	push	{r1}
   126e6:	4671      	mov	r1, lr
   126e8:	0849      	lsrs	r1, r1, #1
   126ea:	0049      	lsls	r1, r1, #1
   126ec:	5c09      	ldrb	r1, [r1, r0]
   126ee:	0049      	lsls	r1, r1, #1
   126f0:	448e      	add	lr, r1
   126f2:	bc02      	pop	{r1}
   126f4:	4770      	bx	lr
   126f6:	46c0      	nop			; (mov r8, r8)

000126f8 <__gnu_thumb1_case_uhi>:
   126f8:	b403      	push	{r0, r1}
   126fa:	4671      	mov	r1, lr
   126fc:	0849      	lsrs	r1, r1, #1
   126fe:	0040      	lsls	r0, r0, #1
   12700:	0049      	lsls	r1, r1, #1
   12702:	5a09      	ldrh	r1, [r1, r0]
   12704:	0049      	lsls	r1, r1, #1
   12706:	448e      	add	lr, r1
   12708:	bc03      	pop	{r0, r1}
   1270a:	4770      	bx	lr

0001270c <__udivsi3>:
   1270c:	2200      	movs	r2, #0
   1270e:	0843      	lsrs	r3, r0, #1
   12710:	428b      	cmp	r3, r1
   12712:	d374      	bcc.n	127fe <__udivsi3+0xf2>
   12714:	0903      	lsrs	r3, r0, #4
   12716:	428b      	cmp	r3, r1
   12718:	d35f      	bcc.n	127da <__udivsi3+0xce>
   1271a:	0a03      	lsrs	r3, r0, #8
   1271c:	428b      	cmp	r3, r1
   1271e:	d344      	bcc.n	127aa <__udivsi3+0x9e>
   12720:	0b03      	lsrs	r3, r0, #12
   12722:	428b      	cmp	r3, r1
   12724:	d328      	bcc.n	12778 <__udivsi3+0x6c>
   12726:	0c03      	lsrs	r3, r0, #16
   12728:	428b      	cmp	r3, r1
   1272a:	d30d      	bcc.n	12748 <__udivsi3+0x3c>
   1272c:	22ff      	movs	r2, #255	; 0xff
   1272e:	0209      	lsls	r1, r1, #8
   12730:	ba12      	rev	r2, r2
   12732:	0c03      	lsrs	r3, r0, #16
   12734:	428b      	cmp	r3, r1
   12736:	d302      	bcc.n	1273e <__udivsi3+0x32>
   12738:	1212      	asrs	r2, r2, #8
   1273a:	0209      	lsls	r1, r1, #8
   1273c:	d065      	beq.n	1280a <__udivsi3+0xfe>
   1273e:	0b03      	lsrs	r3, r0, #12
   12740:	428b      	cmp	r3, r1
   12742:	d319      	bcc.n	12778 <__udivsi3+0x6c>
   12744:	e000      	b.n	12748 <__udivsi3+0x3c>
   12746:	0a09      	lsrs	r1, r1, #8
   12748:	0bc3      	lsrs	r3, r0, #15
   1274a:	428b      	cmp	r3, r1
   1274c:	d301      	bcc.n	12752 <__udivsi3+0x46>
   1274e:	03cb      	lsls	r3, r1, #15
   12750:	1ac0      	subs	r0, r0, r3
   12752:	4152      	adcs	r2, r2
   12754:	0b83      	lsrs	r3, r0, #14
   12756:	428b      	cmp	r3, r1
   12758:	d301      	bcc.n	1275e <__udivsi3+0x52>
   1275a:	038b      	lsls	r3, r1, #14
   1275c:	1ac0      	subs	r0, r0, r3
   1275e:	4152      	adcs	r2, r2
   12760:	0b43      	lsrs	r3, r0, #13
   12762:	428b      	cmp	r3, r1
   12764:	d301      	bcc.n	1276a <__udivsi3+0x5e>
   12766:	034b      	lsls	r3, r1, #13
   12768:	1ac0      	subs	r0, r0, r3
   1276a:	4152      	adcs	r2, r2
   1276c:	0b03      	lsrs	r3, r0, #12
   1276e:	428b      	cmp	r3, r1
   12770:	d301      	bcc.n	12776 <__udivsi3+0x6a>
   12772:	030b      	lsls	r3, r1, #12
   12774:	1ac0      	subs	r0, r0, r3
   12776:	4152      	adcs	r2, r2
   12778:	0ac3      	lsrs	r3, r0, #11
   1277a:	428b      	cmp	r3, r1
   1277c:	d301      	bcc.n	12782 <__udivsi3+0x76>
   1277e:	02cb      	lsls	r3, r1, #11
   12780:	1ac0      	subs	r0, r0, r3
   12782:	4152      	adcs	r2, r2
   12784:	0a83      	lsrs	r3, r0, #10
   12786:	428b      	cmp	r3, r1
   12788:	d301      	bcc.n	1278e <__udivsi3+0x82>
   1278a:	028b      	lsls	r3, r1, #10
   1278c:	1ac0      	subs	r0, r0, r3
   1278e:	4152      	adcs	r2, r2
   12790:	0a43      	lsrs	r3, r0, #9
   12792:	428b      	cmp	r3, r1
   12794:	d301      	bcc.n	1279a <__udivsi3+0x8e>
   12796:	024b      	lsls	r3, r1, #9
   12798:	1ac0      	subs	r0, r0, r3
   1279a:	4152      	adcs	r2, r2
   1279c:	0a03      	lsrs	r3, r0, #8
   1279e:	428b      	cmp	r3, r1
   127a0:	d301      	bcc.n	127a6 <__udivsi3+0x9a>
   127a2:	020b      	lsls	r3, r1, #8
   127a4:	1ac0      	subs	r0, r0, r3
   127a6:	4152      	adcs	r2, r2
   127a8:	d2cd      	bcs.n	12746 <__udivsi3+0x3a>
   127aa:	09c3      	lsrs	r3, r0, #7
   127ac:	428b      	cmp	r3, r1
   127ae:	d301      	bcc.n	127b4 <__udivsi3+0xa8>
   127b0:	01cb      	lsls	r3, r1, #7
   127b2:	1ac0      	subs	r0, r0, r3
   127b4:	4152      	adcs	r2, r2
   127b6:	0983      	lsrs	r3, r0, #6
   127b8:	428b      	cmp	r3, r1
   127ba:	d301      	bcc.n	127c0 <__udivsi3+0xb4>
   127bc:	018b      	lsls	r3, r1, #6
   127be:	1ac0      	subs	r0, r0, r3
   127c0:	4152      	adcs	r2, r2
   127c2:	0943      	lsrs	r3, r0, #5
   127c4:	428b      	cmp	r3, r1
   127c6:	d301      	bcc.n	127cc <__udivsi3+0xc0>
   127c8:	014b      	lsls	r3, r1, #5
   127ca:	1ac0      	subs	r0, r0, r3
   127cc:	4152      	adcs	r2, r2
   127ce:	0903      	lsrs	r3, r0, #4
   127d0:	428b      	cmp	r3, r1
   127d2:	d301      	bcc.n	127d8 <__udivsi3+0xcc>
   127d4:	010b      	lsls	r3, r1, #4
   127d6:	1ac0      	subs	r0, r0, r3
   127d8:	4152      	adcs	r2, r2
   127da:	08c3      	lsrs	r3, r0, #3
   127dc:	428b      	cmp	r3, r1
   127de:	d301      	bcc.n	127e4 <__udivsi3+0xd8>
   127e0:	00cb      	lsls	r3, r1, #3
   127e2:	1ac0      	subs	r0, r0, r3
   127e4:	4152      	adcs	r2, r2
   127e6:	0883      	lsrs	r3, r0, #2
   127e8:	428b      	cmp	r3, r1
   127ea:	d301      	bcc.n	127f0 <__udivsi3+0xe4>
   127ec:	008b      	lsls	r3, r1, #2
   127ee:	1ac0      	subs	r0, r0, r3
   127f0:	4152      	adcs	r2, r2
   127f2:	0843      	lsrs	r3, r0, #1
   127f4:	428b      	cmp	r3, r1
   127f6:	d301      	bcc.n	127fc <__udivsi3+0xf0>
   127f8:	004b      	lsls	r3, r1, #1
   127fa:	1ac0      	subs	r0, r0, r3
   127fc:	4152      	adcs	r2, r2
   127fe:	1a41      	subs	r1, r0, r1
   12800:	d200      	bcs.n	12804 <__udivsi3+0xf8>
   12802:	4601      	mov	r1, r0
   12804:	4152      	adcs	r2, r2
   12806:	4610      	mov	r0, r2
   12808:	4770      	bx	lr
   1280a:	e7ff      	b.n	1280c <__udivsi3+0x100>
   1280c:	b501      	push	{r0, lr}
   1280e:	2000      	movs	r0, #0
   12810:	f000 f8f0 	bl	129f4 <__aeabi_idiv0>
   12814:	bd02      	pop	{r1, pc}
   12816:	46c0      	nop			; (mov r8, r8)

00012818 <__aeabi_uidivmod>:
   12818:	2900      	cmp	r1, #0
   1281a:	d0f7      	beq.n	1280c <__udivsi3+0x100>
   1281c:	e776      	b.n	1270c <__udivsi3>
   1281e:	4770      	bx	lr

00012820 <__divsi3>:
   12820:	4603      	mov	r3, r0
   12822:	430b      	orrs	r3, r1
   12824:	d47f      	bmi.n	12926 <__divsi3+0x106>
   12826:	2200      	movs	r2, #0
   12828:	0843      	lsrs	r3, r0, #1
   1282a:	428b      	cmp	r3, r1
   1282c:	d374      	bcc.n	12918 <__divsi3+0xf8>
   1282e:	0903      	lsrs	r3, r0, #4
   12830:	428b      	cmp	r3, r1
   12832:	d35f      	bcc.n	128f4 <__divsi3+0xd4>
   12834:	0a03      	lsrs	r3, r0, #8
   12836:	428b      	cmp	r3, r1
   12838:	d344      	bcc.n	128c4 <__divsi3+0xa4>
   1283a:	0b03      	lsrs	r3, r0, #12
   1283c:	428b      	cmp	r3, r1
   1283e:	d328      	bcc.n	12892 <__divsi3+0x72>
   12840:	0c03      	lsrs	r3, r0, #16
   12842:	428b      	cmp	r3, r1
   12844:	d30d      	bcc.n	12862 <__divsi3+0x42>
   12846:	22ff      	movs	r2, #255	; 0xff
   12848:	0209      	lsls	r1, r1, #8
   1284a:	ba12      	rev	r2, r2
   1284c:	0c03      	lsrs	r3, r0, #16
   1284e:	428b      	cmp	r3, r1
   12850:	d302      	bcc.n	12858 <__divsi3+0x38>
   12852:	1212      	asrs	r2, r2, #8
   12854:	0209      	lsls	r1, r1, #8
   12856:	d065      	beq.n	12924 <__divsi3+0x104>
   12858:	0b03      	lsrs	r3, r0, #12
   1285a:	428b      	cmp	r3, r1
   1285c:	d319      	bcc.n	12892 <__divsi3+0x72>
   1285e:	e000      	b.n	12862 <__divsi3+0x42>
   12860:	0a09      	lsrs	r1, r1, #8
   12862:	0bc3      	lsrs	r3, r0, #15
   12864:	428b      	cmp	r3, r1
   12866:	d301      	bcc.n	1286c <__divsi3+0x4c>
   12868:	03cb      	lsls	r3, r1, #15
   1286a:	1ac0      	subs	r0, r0, r3
   1286c:	4152      	adcs	r2, r2
   1286e:	0b83      	lsrs	r3, r0, #14
   12870:	428b      	cmp	r3, r1
   12872:	d301      	bcc.n	12878 <__divsi3+0x58>
   12874:	038b      	lsls	r3, r1, #14
   12876:	1ac0      	subs	r0, r0, r3
   12878:	4152      	adcs	r2, r2
   1287a:	0b43      	lsrs	r3, r0, #13
   1287c:	428b      	cmp	r3, r1
   1287e:	d301      	bcc.n	12884 <__divsi3+0x64>
   12880:	034b      	lsls	r3, r1, #13
   12882:	1ac0      	subs	r0, r0, r3
   12884:	4152      	adcs	r2, r2
   12886:	0b03      	lsrs	r3, r0, #12
   12888:	428b      	cmp	r3, r1
   1288a:	d301      	bcc.n	12890 <__divsi3+0x70>
   1288c:	030b      	lsls	r3, r1, #12
   1288e:	1ac0      	subs	r0, r0, r3
   12890:	4152      	adcs	r2, r2
   12892:	0ac3      	lsrs	r3, r0, #11
   12894:	428b      	cmp	r3, r1
   12896:	d301      	bcc.n	1289c <__divsi3+0x7c>
   12898:	02cb      	lsls	r3, r1, #11
   1289a:	1ac0      	subs	r0, r0, r3
   1289c:	4152      	adcs	r2, r2
   1289e:	0a83      	lsrs	r3, r0, #10
   128a0:	428b      	cmp	r3, r1
   128a2:	d301      	bcc.n	128a8 <__divsi3+0x88>
   128a4:	028b      	lsls	r3, r1, #10
   128a6:	1ac0      	subs	r0, r0, r3
   128a8:	4152      	adcs	r2, r2
   128aa:	0a43      	lsrs	r3, r0, #9
   128ac:	428b      	cmp	r3, r1
   128ae:	d301      	bcc.n	128b4 <__divsi3+0x94>
   128b0:	024b      	lsls	r3, r1, #9
   128b2:	1ac0      	subs	r0, r0, r3
   128b4:	4152      	adcs	r2, r2
   128b6:	0a03      	lsrs	r3, r0, #8
   128b8:	428b      	cmp	r3, r1
   128ba:	d301      	bcc.n	128c0 <__divsi3+0xa0>
   128bc:	020b      	lsls	r3, r1, #8
   128be:	1ac0      	subs	r0, r0, r3
   128c0:	4152      	adcs	r2, r2
   128c2:	d2cd      	bcs.n	12860 <__divsi3+0x40>
   128c4:	09c3      	lsrs	r3, r0, #7
   128c6:	428b      	cmp	r3, r1
   128c8:	d301      	bcc.n	128ce <__divsi3+0xae>
   128ca:	01cb      	lsls	r3, r1, #7
   128cc:	1ac0      	subs	r0, r0, r3
   128ce:	4152      	adcs	r2, r2
   128d0:	0983      	lsrs	r3, r0, #6
   128d2:	428b      	cmp	r3, r1
   128d4:	d301      	bcc.n	128da <__divsi3+0xba>
   128d6:	018b      	lsls	r3, r1, #6
   128d8:	1ac0      	subs	r0, r0, r3
   128da:	4152      	adcs	r2, r2
   128dc:	0943      	lsrs	r3, r0, #5
   128de:	428b      	cmp	r3, r1
   128e0:	d301      	bcc.n	128e6 <__divsi3+0xc6>
   128e2:	014b      	lsls	r3, r1, #5
   128e4:	1ac0      	subs	r0, r0, r3
   128e6:	4152      	adcs	r2, r2
   128e8:	0903      	lsrs	r3, r0, #4
   128ea:	428b      	cmp	r3, r1
   128ec:	d301      	bcc.n	128f2 <__divsi3+0xd2>
   128ee:	010b      	lsls	r3, r1, #4
   128f0:	1ac0      	subs	r0, r0, r3
   128f2:	4152      	adcs	r2, r2
   128f4:	08c3      	lsrs	r3, r0, #3
   128f6:	428b      	cmp	r3, r1
   128f8:	d301      	bcc.n	128fe <__divsi3+0xde>
   128fa:	00cb      	lsls	r3, r1, #3
   128fc:	1ac0      	subs	r0, r0, r3
   128fe:	4152      	adcs	r2, r2
   12900:	0883      	lsrs	r3, r0, #2
   12902:	428b      	cmp	r3, r1
   12904:	d301      	bcc.n	1290a <__divsi3+0xea>
   12906:	008b      	lsls	r3, r1, #2
   12908:	1ac0      	subs	r0, r0, r3
   1290a:	4152      	adcs	r2, r2
   1290c:	0843      	lsrs	r3, r0, #1
   1290e:	428b      	cmp	r3, r1
   12910:	d301      	bcc.n	12916 <__divsi3+0xf6>
   12912:	004b      	lsls	r3, r1, #1
   12914:	1ac0      	subs	r0, r0, r3
   12916:	4152      	adcs	r2, r2
   12918:	1a41      	subs	r1, r0, r1
   1291a:	d200      	bcs.n	1291e <__divsi3+0xfe>
   1291c:	4601      	mov	r1, r0
   1291e:	4152      	adcs	r2, r2
   12920:	4610      	mov	r0, r2
   12922:	4770      	bx	lr
   12924:	e05d      	b.n	129e2 <__divsi3+0x1c2>
   12926:	0fca      	lsrs	r2, r1, #31
   12928:	d000      	beq.n	1292c <__divsi3+0x10c>
   1292a:	4249      	negs	r1, r1
   1292c:	1003      	asrs	r3, r0, #32
   1292e:	d300      	bcc.n	12932 <__divsi3+0x112>
   12930:	4240      	negs	r0, r0
   12932:	4053      	eors	r3, r2
   12934:	2200      	movs	r2, #0
   12936:	469c      	mov	ip, r3
   12938:	0903      	lsrs	r3, r0, #4
   1293a:	428b      	cmp	r3, r1
   1293c:	d32d      	bcc.n	1299a <__divsi3+0x17a>
   1293e:	0a03      	lsrs	r3, r0, #8
   12940:	428b      	cmp	r3, r1
   12942:	d312      	bcc.n	1296a <__divsi3+0x14a>
   12944:	22fc      	movs	r2, #252	; 0xfc
   12946:	0189      	lsls	r1, r1, #6
   12948:	ba12      	rev	r2, r2
   1294a:	0a03      	lsrs	r3, r0, #8
   1294c:	428b      	cmp	r3, r1
   1294e:	d30c      	bcc.n	1296a <__divsi3+0x14a>
   12950:	0189      	lsls	r1, r1, #6
   12952:	1192      	asrs	r2, r2, #6
   12954:	428b      	cmp	r3, r1
   12956:	d308      	bcc.n	1296a <__divsi3+0x14a>
   12958:	0189      	lsls	r1, r1, #6
   1295a:	1192      	asrs	r2, r2, #6
   1295c:	428b      	cmp	r3, r1
   1295e:	d304      	bcc.n	1296a <__divsi3+0x14a>
   12960:	0189      	lsls	r1, r1, #6
   12962:	d03a      	beq.n	129da <__divsi3+0x1ba>
   12964:	1192      	asrs	r2, r2, #6
   12966:	e000      	b.n	1296a <__divsi3+0x14a>
   12968:	0989      	lsrs	r1, r1, #6
   1296a:	09c3      	lsrs	r3, r0, #7
   1296c:	428b      	cmp	r3, r1
   1296e:	d301      	bcc.n	12974 <__divsi3+0x154>
   12970:	01cb      	lsls	r3, r1, #7
   12972:	1ac0      	subs	r0, r0, r3
   12974:	4152      	adcs	r2, r2
   12976:	0983      	lsrs	r3, r0, #6
   12978:	428b      	cmp	r3, r1
   1297a:	d301      	bcc.n	12980 <__divsi3+0x160>
   1297c:	018b      	lsls	r3, r1, #6
   1297e:	1ac0      	subs	r0, r0, r3
   12980:	4152      	adcs	r2, r2
   12982:	0943      	lsrs	r3, r0, #5
   12984:	428b      	cmp	r3, r1
   12986:	d301      	bcc.n	1298c <__divsi3+0x16c>
   12988:	014b      	lsls	r3, r1, #5
   1298a:	1ac0      	subs	r0, r0, r3
   1298c:	4152      	adcs	r2, r2
   1298e:	0903      	lsrs	r3, r0, #4
   12990:	428b      	cmp	r3, r1
   12992:	d301      	bcc.n	12998 <__divsi3+0x178>
   12994:	010b      	lsls	r3, r1, #4
   12996:	1ac0      	subs	r0, r0, r3
   12998:	4152      	adcs	r2, r2
   1299a:	08c3      	lsrs	r3, r0, #3
   1299c:	428b      	cmp	r3, r1
   1299e:	d301      	bcc.n	129a4 <__divsi3+0x184>
   129a0:	00cb      	lsls	r3, r1, #3
   129a2:	1ac0      	subs	r0, r0, r3
   129a4:	4152      	adcs	r2, r2
   129a6:	0883      	lsrs	r3, r0, #2
   129a8:	428b      	cmp	r3, r1
   129aa:	d301      	bcc.n	129b0 <__divsi3+0x190>
   129ac:	008b      	lsls	r3, r1, #2
   129ae:	1ac0      	subs	r0, r0, r3
   129b0:	4152      	adcs	r2, r2
   129b2:	d2d9      	bcs.n	12968 <__divsi3+0x148>
   129b4:	0843      	lsrs	r3, r0, #1
   129b6:	428b      	cmp	r3, r1
   129b8:	d301      	bcc.n	129be <__divsi3+0x19e>
   129ba:	004b      	lsls	r3, r1, #1
   129bc:	1ac0      	subs	r0, r0, r3
   129be:	4152      	adcs	r2, r2
   129c0:	1a41      	subs	r1, r0, r1
   129c2:	d200      	bcs.n	129c6 <__divsi3+0x1a6>
   129c4:	4601      	mov	r1, r0
   129c6:	4663      	mov	r3, ip
   129c8:	4152      	adcs	r2, r2
   129ca:	105b      	asrs	r3, r3, #1
   129cc:	4610      	mov	r0, r2
   129ce:	d301      	bcc.n	129d4 <__divsi3+0x1b4>
   129d0:	4240      	negs	r0, r0
   129d2:	2b00      	cmp	r3, #0
   129d4:	d500      	bpl.n	129d8 <__divsi3+0x1b8>
   129d6:	4249      	negs	r1, r1
   129d8:	4770      	bx	lr
   129da:	4663      	mov	r3, ip
   129dc:	105b      	asrs	r3, r3, #1
   129de:	d300      	bcc.n	129e2 <__divsi3+0x1c2>
   129e0:	4240      	negs	r0, r0
   129e2:	b501      	push	{r0, lr}
   129e4:	2000      	movs	r0, #0
   129e6:	f000 f805 	bl	129f4 <__aeabi_idiv0>
   129ea:	bd02      	pop	{r1, pc}

000129ec <__aeabi_idivmod>:
   129ec:	2900      	cmp	r1, #0
   129ee:	d0f8      	beq.n	129e2 <__divsi3+0x1c2>
   129f0:	e716      	b.n	12820 <__divsi3>
   129f2:	4770      	bx	lr

000129f4 <__aeabi_idiv0>:
   129f4:	4770      	bx	lr
   129f6:	46c0      	nop			; (mov r8, r8)

000129f8 <__aeabi_cfrcmple>:
   129f8:	4684      	mov	ip, r0
   129fa:	1c08      	adds	r0, r1, #0
   129fc:	4661      	mov	r1, ip
   129fe:	e7ff      	b.n	12a00 <__aeabi_cfcmpeq>

00012a00 <__aeabi_cfcmpeq>:
   12a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12a02:	f000 fcb5 	bl	13370 <__lesf2>
   12a06:	2800      	cmp	r0, #0
   12a08:	d401      	bmi.n	12a0e <__aeabi_cfcmpeq+0xe>
   12a0a:	2100      	movs	r1, #0
   12a0c:	42c8      	cmn	r0, r1
   12a0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00012a10 <__aeabi_fcmpeq>:
   12a10:	b510      	push	{r4, lr}
   12a12:	f000 fc47 	bl	132a4 <__eqsf2>
   12a16:	4240      	negs	r0, r0
   12a18:	3001      	adds	r0, #1
   12a1a:	bd10      	pop	{r4, pc}

00012a1c <__aeabi_fcmplt>:
   12a1c:	b510      	push	{r4, lr}
   12a1e:	f000 fca7 	bl	13370 <__lesf2>
   12a22:	2800      	cmp	r0, #0
   12a24:	db01      	blt.n	12a2a <__aeabi_fcmplt+0xe>
   12a26:	2000      	movs	r0, #0
   12a28:	bd10      	pop	{r4, pc}
   12a2a:	2001      	movs	r0, #1
   12a2c:	bd10      	pop	{r4, pc}
   12a2e:	46c0      	nop			; (mov r8, r8)

00012a30 <__aeabi_fcmple>:
   12a30:	b510      	push	{r4, lr}
   12a32:	f000 fc9d 	bl	13370 <__lesf2>
   12a36:	2800      	cmp	r0, #0
   12a38:	dd01      	ble.n	12a3e <__aeabi_fcmple+0xe>
   12a3a:	2000      	movs	r0, #0
   12a3c:	bd10      	pop	{r4, pc}
   12a3e:	2001      	movs	r0, #1
   12a40:	bd10      	pop	{r4, pc}
   12a42:	46c0      	nop			; (mov r8, r8)

00012a44 <__aeabi_fcmpgt>:
   12a44:	b510      	push	{r4, lr}
   12a46:	f000 fc53 	bl	132f0 <__gesf2>
   12a4a:	2800      	cmp	r0, #0
   12a4c:	dc01      	bgt.n	12a52 <__aeabi_fcmpgt+0xe>
   12a4e:	2000      	movs	r0, #0
   12a50:	bd10      	pop	{r4, pc}
   12a52:	2001      	movs	r0, #1
   12a54:	bd10      	pop	{r4, pc}
   12a56:	46c0      	nop			; (mov r8, r8)

00012a58 <__aeabi_fcmpge>:
   12a58:	b510      	push	{r4, lr}
   12a5a:	f000 fc49 	bl	132f0 <__gesf2>
   12a5e:	2800      	cmp	r0, #0
   12a60:	da01      	bge.n	12a66 <__aeabi_fcmpge+0xe>
   12a62:	2000      	movs	r0, #0
   12a64:	bd10      	pop	{r4, pc}
   12a66:	2001      	movs	r0, #1
   12a68:	bd10      	pop	{r4, pc}
   12a6a:	46c0      	nop			; (mov r8, r8)

00012a6c <__aeabi_uldivmod>:
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	d111      	bne.n	12a94 <__aeabi_uldivmod+0x28>
   12a70:	2a00      	cmp	r2, #0
   12a72:	d10f      	bne.n	12a94 <__aeabi_uldivmod+0x28>
   12a74:	2900      	cmp	r1, #0
   12a76:	d100      	bne.n	12a7a <__aeabi_uldivmod+0xe>
   12a78:	2800      	cmp	r0, #0
   12a7a:	d002      	beq.n	12a82 <__aeabi_uldivmod+0x16>
   12a7c:	2100      	movs	r1, #0
   12a7e:	43c9      	mvns	r1, r1
   12a80:	1c08      	adds	r0, r1, #0
   12a82:	b407      	push	{r0, r1, r2}
   12a84:	4802      	ldr	r0, [pc, #8]	; (12a90 <__aeabi_uldivmod+0x24>)
   12a86:	a102      	add	r1, pc, #8	; (adr r1, 12a90 <__aeabi_uldivmod+0x24>)
   12a88:	1840      	adds	r0, r0, r1
   12a8a:	9002      	str	r0, [sp, #8]
   12a8c:	bd03      	pop	{r0, r1, pc}
   12a8e:	46c0      	nop			; (mov r8, r8)
   12a90:	ffffff65 	.word	0xffffff65
   12a94:	b403      	push	{r0, r1}
   12a96:	4668      	mov	r0, sp
   12a98:	b501      	push	{r0, lr}
   12a9a:	9802      	ldr	r0, [sp, #8]
   12a9c:	f000 f868 	bl	12b70 <__udivmoddi4>
   12aa0:	9b01      	ldr	r3, [sp, #4]
   12aa2:	469e      	mov	lr, r3
   12aa4:	b002      	add	sp, #8
   12aa6:	bc0c      	pop	{r2, r3}
   12aa8:	4770      	bx	lr
   12aaa:	46c0      	nop			; (mov r8, r8)

00012aac <__aeabi_lmul>:
   12aac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aae:	46ce      	mov	lr, r9
   12ab0:	4647      	mov	r7, r8
   12ab2:	0415      	lsls	r5, r2, #16
   12ab4:	0c2d      	lsrs	r5, r5, #16
   12ab6:	002e      	movs	r6, r5
   12ab8:	b580      	push	{r7, lr}
   12aba:	0407      	lsls	r7, r0, #16
   12abc:	0c14      	lsrs	r4, r2, #16
   12abe:	0c3f      	lsrs	r7, r7, #16
   12ac0:	4699      	mov	r9, r3
   12ac2:	0c03      	lsrs	r3, r0, #16
   12ac4:	437e      	muls	r6, r7
   12ac6:	435d      	muls	r5, r3
   12ac8:	4367      	muls	r7, r4
   12aca:	4363      	muls	r3, r4
   12acc:	197f      	adds	r7, r7, r5
   12ace:	0c34      	lsrs	r4, r6, #16
   12ad0:	19e4      	adds	r4, r4, r7
   12ad2:	469c      	mov	ip, r3
   12ad4:	42a5      	cmp	r5, r4
   12ad6:	d903      	bls.n	12ae0 <__aeabi_lmul+0x34>
   12ad8:	2380      	movs	r3, #128	; 0x80
   12ada:	025b      	lsls	r3, r3, #9
   12adc:	4698      	mov	r8, r3
   12ade:	44c4      	add	ip, r8
   12ae0:	464b      	mov	r3, r9
   12ae2:	4351      	muls	r1, r2
   12ae4:	4343      	muls	r3, r0
   12ae6:	0436      	lsls	r6, r6, #16
   12ae8:	0c36      	lsrs	r6, r6, #16
   12aea:	0c25      	lsrs	r5, r4, #16
   12aec:	0424      	lsls	r4, r4, #16
   12aee:	4465      	add	r5, ip
   12af0:	19a4      	adds	r4, r4, r6
   12af2:	1859      	adds	r1, r3, r1
   12af4:	1949      	adds	r1, r1, r5
   12af6:	0020      	movs	r0, r4
   12af8:	bc0c      	pop	{r2, r3}
   12afa:	4690      	mov	r8, r2
   12afc:	4699      	mov	r9, r3
   12afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012b00 <__aeabi_f2uiz>:
   12b00:	219e      	movs	r1, #158	; 0x9e
   12b02:	b510      	push	{r4, lr}
   12b04:	05c9      	lsls	r1, r1, #23
   12b06:	1c04      	adds	r4, r0, #0
   12b08:	f7ff ffa6 	bl	12a58 <__aeabi_fcmpge>
   12b0c:	2800      	cmp	r0, #0
   12b0e:	d103      	bne.n	12b18 <__aeabi_f2uiz+0x18>
   12b10:	1c20      	adds	r0, r4, #0
   12b12:	f000 ff2b 	bl	1396c <__aeabi_f2iz>
   12b16:	bd10      	pop	{r4, pc}
   12b18:	219e      	movs	r1, #158	; 0x9e
   12b1a:	1c20      	adds	r0, r4, #0
   12b1c:	05c9      	lsls	r1, r1, #23
   12b1e:	f000 fd89 	bl	13634 <__aeabi_fsub>
   12b22:	f000 ff23 	bl	1396c <__aeabi_f2iz>
   12b26:	2380      	movs	r3, #128	; 0x80
   12b28:	061b      	lsls	r3, r3, #24
   12b2a:	469c      	mov	ip, r3
   12b2c:	4460      	add	r0, ip
   12b2e:	e7f2      	b.n	12b16 <__aeabi_f2uiz+0x16>

00012b30 <__aeabi_f2ulz>:
   12b30:	b570      	push	{r4, r5, r6, lr}
   12b32:	f002 fc17 	bl	15364 <__aeabi_f2d>
   12b36:	2200      	movs	r2, #0
   12b38:	4b0b      	ldr	r3, [pc, #44]	; (12b68 <__aeabi_f2ulz+0x38>)
   12b3a:	000d      	movs	r5, r1
   12b3c:	0004      	movs	r4, r0
   12b3e:	f001 fe0f 	bl	14760 <__aeabi_dmul>
   12b42:	f002 fd15 	bl	15570 <__aeabi_d2uiz>
   12b46:	0006      	movs	r6, r0
   12b48:	f002 fbd4 	bl	152f4 <__aeabi_ui2d>
   12b4c:	2200      	movs	r2, #0
   12b4e:	4b07      	ldr	r3, [pc, #28]	; (12b6c <__aeabi_f2ulz+0x3c>)
   12b50:	f001 fe06 	bl	14760 <__aeabi_dmul>
   12b54:	0002      	movs	r2, r0
   12b56:	000b      	movs	r3, r1
   12b58:	0020      	movs	r0, r4
   12b5a:	0029      	movs	r1, r5
   12b5c:	f002 f880 	bl	14c60 <__aeabi_dsub>
   12b60:	f002 fd06 	bl	15570 <__aeabi_d2uiz>
   12b64:	0031      	movs	r1, r6
   12b66:	bd70      	pop	{r4, r5, r6, pc}
   12b68:	3df00000 	.word	0x3df00000
   12b6c:	41f00000 	.word	0x41f00000

00012b70 <__udivmoddi4>:
   12b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b72:	4657      	mov	r7, sl
   12b74:	464e      	mov	r6, r9
   12b76:	4645      	mov	r5, r8
   12b78:	46de      	mov	lr, fp
   12b7a:	b5e0      	push	{r5, r6, r7, lr}
   12b7c:	0004      	movs	r4, r0
   12b7e:	b083      	sub	sp, #12
   12b80:	000d      	movs	r5, r1
   12b82:	4692      	mov	sl, r2
   12b84:	4699      	mov	r9, r3
   12b86:	428b      	cmp	r3, r1
   12b88:	d82f      	bhi.n	12bea <__udivmoddi4+0x7a>
   12b8a:	d02c      	beq.n	12be6 <__udivmoddi4+0x76>
   12b8c:	4649      	mov	r1, r9
   12b8e:	4650      	mov	r0, sl
   12b90:	f002 fce2 	bl	15558 <__clzdi2>
   12b94:	0029      	movs	r1, r5
   12b96:	0006      	movs	r6, r0
   12b98:	0020      	movs	r0, r4
   12b9a:	f002 fcdd 	bl	15558 <__clzdi2>
   12b9e:	1a33      	subs	r3, r6, r0
   12ba0:	4698      	mov	r8, r3
   12ba2:	3b20      	subs	r3, #32
   12ba4:	469b      	mov	fp, r3
   12ba6:	d500      	bpl.n	12baa <__udivmoddi4+0x3a>
   12ba8:	e074      	b.n	12c94 <__udivmoddi4+0x124>
   12baa:	4653      	mov	r3, sl
   12bac:	465a      	mov	r2, fp
   12bae:	4093      	lsls	r3, r2
   12bb0:	001f      	movs	r7, r3
   12bb2:	4653      	mov	r3, sl
   12bb4:	4642      	mov	r2, r8
   12bb6:	4093      	lsls	r3, r2
   12bb8:	001e      	movs	r6, r3
   12bba:	42af      	cmp	r7, r5
   12bbc:	d829      	bhi.n	12c12 <__udivmoddi4+0xa2>
   12bbe:	d026      	beq.n	12c0e <__udivmoddi4+0x9e>
   12bc0:	465b      	mov	r3, fp
   12bc2:	1ba4      	subs	r4, r4, r6
   12bc4:	41bd      	sbcs	r5, r7
   12bc6:	2b00      	cmp	r3, #0
   12bc8:	da00      	bge.n	12bcc <__udivmoddi4+0x5c>
   12bca:	e079      	b.n	12cc0 <__udivmoddi4+0x150>
   12bcc:	2200      	movs	r2, #0
   12bce:	2300      	movs	r3, #0
   12bd0:	9200      	str	r2, [sp, #0]
   12bd2:	9301      	str	r3, [sp, #4]
   12bd4:	2301      	movs	r3, #1
   12bd6:	465a      	mov	r2, fp
   12bd8:	4093      	lsls	r3, r2
   12bda:	9301      	str	r3, [sp, #4]
   12bdc:	2301      	movs	r3, #1
   12bde:	4642      	mov	r2, r8
   12be0:	4093      	lsls	r3, r2
   12be2:	9300      	str	r3, [sp, #0]
   12be4:	e019      	b.n	12c1a <__udivmoddi4+0xaa>
   12be6:	4282      	cmp	r2, r0
   12be8:	d9d0      	bls.n	12b8c <__udivmoddi4+0x1c>
   12bea:	2200      	movs	r2, #0
   12bec:	2300      	movs	r3, #0
   12bee:	9200      	str	r2, [sp, #0]
   12bf0:	9301      	str	r3, [sp, #4]
   12bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12bf4:	2b00      	cmp	r3, #0
   12bf6:	d001      	beq.n	12bfc <__udivmoddi4+0x8c>
   12bf8:	601c      	str	r4, [r3, #0]
   12bfa:	605d      	str	r5, [r3, #4]
   12bfc:	9800      	ldr	r0, [sp, #0]
   12bfe:	9901      	ldr	r1, [sp, #4]
   12c00:	b003      	add	sp, #12
   12c02:	bc3c      	pop	{r2, r3, r4, r5}
   12c04:	4690      	mov	r8, r2
   12c06:	4699      	mov	r9, r3
   12c08:	46a2      	mov	sl, r4
   12c0a:	46ab      	mov	fp, r5
   12c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c0e:	42a3      	cmp	r3, r4
   12c10:	d9d6      	bls.n	12bc0 <__udivmoddi4+0x50>
   12c12:	2200      	movs	r2, #0
   12c14:	2300      	movs	r3, #0
   12c16:	9200      	str	r2, [sp, #0]
   12c18:	9301      	str	r3, [sp, #4]
   12c1a:	4643      	mov	r3, r8
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d0e8      	beq.n	12bf2 <__udivmoddi4+0x82>
   12c20:	07fb      	lsls	r3, r7, #31
   12c22:	0872      	lsrs	r2, r6, #1
   12c24:	431a      	orrs	r2, r3
   12c26:	4646      	mov	r6, r8
   12c28:	087b      	lsrs	r3, r7, #1
   12c2a:	e00e      	b.n	12c4a <__udivmoddi4+0xda>
   12c2c:	42ab      	cmp	r3, r5
   12c2e:	d101      	bne.n	12c34 <__udivmoddi4+0xc4>
   12c30:	42a2      	cmp	r2, r4
   12c32:	d80c      	bhi.n	12c4e <__udivmoddi4+0xde>
   12c34:	1aa4      	subs	r4, r4, r2
   12c36:	419d      	sbcs	r5, r3
   12c38:	2001      	movs	r0, #1
   12c3a:	1924      	adds	r4, r4, r4
   12c3c:	416d      	adcs	r5, r5
   12c3e:	2100      	movs	r1, #0
   12c40:	3e01      	subs	r6, #1
   12c42:	1824      	adds	r4, r4, r0
   12c44:	414d      	adcs	r5, r1
   12c46:	2e00      	cmp	r6, #0
   12c48:	d006      	beq.n	12c58 <__udivmoddi4+0xe8>
   12c4a:	42ab      	cmp	r3, r5
   12c4c:	d9ee      	bls.n	12c2c <__udivmoddi4+0xbc>
   12c4e:	3e01      	subs	r6, #1
   12c50:	1924      	adds	r4, r4, r4
   12c52:	416d      	adcs	r5, r5
   12c54:	2e00      	cmp	r6, #0
   12c56:	d1f8      	bne.n	12c4a <__udivmoddi4+0xda>
   12c58:	465b      	mov	r3, fp
   12c5a:	9800      	ldr	r0, [sp, #0]
   12c5c:	9901      	ldr	r1, [sp, #4]
   12c5e:	1900      	adds	r0, r0, r4
   12c60:	4169      	adcs	r1, r5
   12c62:	2b00      	cmp	r3, #0
   12c64:	db22      	blt.n	12cac <__udivmoddi4+0x13c>
   12c66:	002b      	movs	r3, r5
   12c68:	465a      	mov	r2, fp
   12c6a:	40d3      	lsrs	r3, r2
   12c6c:	002a      	movs	r2, r5
   12c6e:	4644      	mov	r4, r8
   12c70:	40e2      	lsrs	r2, r4
   12c72:	001c      	movs	r4, r3
   12c74:	465b      	mov	r3, fp
   12c76:	0015      	movs	r5, r2
   12c78:	2b00      	cmp	r3, #0
   12c7a:	db2c      	blt.n	12cd6 <__udivmoddi4+0x166>
   12c7c:	0026      	movs	r6, r4
   12c7e:	409e      	lsls	r6, r3
   12c80:	0033      	movs	r3, r6
   12c82:	0026      	movs	r6, r4
   12c84:	4647      	mov	r7, r8
   12c86:	40be      	lsls	r6, r7
   12c88:	0032      	movs	r2, r6
   12c8a:	1a80      	subs	r0, r0, r2
   12c8c:	4199      	sbcs	r1, r3
   12c8e:	9000      	str	r0, [sp, #0]
   12c90:	9101      	str	r1, [sp, #4]
   12c92:	e7ae      	b.n	12bf2 <__udivmoddi4+0x82>
   12c94:	4642      	mov	r2, r8
   12c96:	2320      	movs	r3, #32
   12c98:	1a9b      	subs	r3, r3, r2
   12c9a:	4652      	mov	r2, sl
   12c9c:	40da      	lsrs	r2, r3
   12c9e:	4641      	mov	r1, r8
   12ca0:	0013      	movs	r3, r2
   12ca2:	464a      	mov	r2, r9
   12ca4:	408a      	lsls	r2, r1
   12ca6:	0017      	movs	r7, r2
   12ca8:	431f      	orrs	r7, r3
   12caa:	e782      	b.n	12bb2 <__udivmoddi4+0x42>
   12cac:	4642      	mov	r2, r8
   12cae:	2320      	movs	r3, #32
   12cb0:	1a9b      	subs	r3, r3, r2
   12cb2:	002a      	movs	r2, r5
   12cb4:	4646      	mov	r6, r8
   12cb6:	409a      	lsls	r2, r3
   12cb8:	0023      	movs	r3, r4
   12cba:	40f3      	lsrs	r3, r6
   12cbc:	4313      	orrs	r3, r2
   12cbe:	e7d5      	b.n	12c6c <__udivmoddi4+0xfc>
   12cc0:	4642      	mov	r2, r8
   12cc2:	2320      	movs	r3, #32
   12cc4:	2100      	movs	r1, #0
   12cc6:	1a9b      	subs	r3, r3, r2
   12cc8:	2200      	movs	r2, #0
   12cca:	9100      	str	r1, [sp, #0]
   12ccc:	9201      	str	r2, [sp, #4]
   12cce:	2201      	movs	r2, #1
   12cd0:	40da      	lsrs	r2, r3
   12cd2:	9201      	str	r2, [sp, #4]
   12cd4:	e782      	b.n	12bdc <__udivmoddi4+0x6c>
   12cd6:	4642      	mov	r2, r8
   12cd8:	2320      	movs	r3, #32
   12cda:	0026      	movs	r6, r4
   12cdc:	1a9b      	subs	r3, r3, r2
   12cde:	40de      	lsrs	r6, r3
   12ce0:	002f      	movs	r7, r5
   12ce2:	46b4      	mov	ip, r6
   12ce4:	4097      	lsls	r7, r2
   12ce6:	4666      	mov	r6, ip
   12ce8:	003b      	movs	r3, r7
   12cea:	4333      	orrs	r3, r6
   12cec:	e7c9      	b.n	12c82 <__udivmoddi4+0x112>
   12cee:	46c0      	nop			; (mov r8, r8)

00012cf0 <__aeabi_fadd>:
   12cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cf2:	46c6      	mov	lr, r8
   12cf4:	024e      	lsls	r6, r1, #9
   12cf6:	0247      	lsls	r7, r0, #9
   12cf8:	0a76      	lsrs	r6, r6, #9
   12cfa:	0a7b      	lsrs	r3, r7, #9
   12cfc:	0044      	lsls	r4, r0, #1
   12cfe:	0fc5      	lsrs	r5, r0, #31
   12d00:	00f7      	lsls	r7, r6, #3
   12d02:	0048      	lsls	r0, r1, #1
   12d04:	4698      	mov	r8, r3
   12d06:	b500      	push	{lr}
   12d08:	0e24      	lsrs	r4, r4, #24
   12d0a:	002a      	movs	r2, r5
   12d0c:	00db      	lsls	r3, r3, #3
   12d0e:	0e00      	lsrs	r0, r0, #24
   12d10:	0fc9      	lsrs	r1, r1, #31
   12d12:	46bc      	mov	ip, r7
   12d14:	428d      	cmp	r5, r1
   12d16:	d067      	beq.n	12de8 <__aeabi_fadd+0xf8>
   12d18:	1a22      	subs	r2, r4, r0
   12d1a:	2a00      	cmp	r2, #0
   12d1c:	dc00      	bgt.n	12d20 <__aeabi_fadd+0x30>
   12d1e:	e0a5      	b.n	12e6c <__aeabi_fadd+0x17c>
   12d20:	2800      	cmp	r0, #0
   12d22:	d13a      	bne.n	12d9a <__aeabi_fadd+0xaa>
   12d24:	2f00      	cmp	r7, #0
   12d26:	d100      	bne.n	12d2a <__aeabi_fadd+0x3a>
   12d28:	e093      	b.n	12e52 <__aeabi_fadd+0x162>
   12d2a:	1e51      	subs	r1, r2, #1
   12d2c:	2900      	cmp	r1, #0
   12d2e:	d000      	beq.n	12d32 <__aeabi_fadd+0x42>
   12d30:	e0bc      	b.n	12eac <__aeabi_fadd+0x1bc>
   12d32:	2401      	movs	r4, #1
   12d34:	1bdb      	subs	r3, r3, r7
   12d36:	015a      	lsls	r2, r3, #5
   12d38:	d546      	bpl.n	12dc8 <__aeabi_fadd+0xd8>
   12d3a:	019b      	lsls	r3, r3, #6
   12d3c:	099e      	lsrs	r6, r3, #6
   12d3e:	0030      	movs	r0, r6
   12d40:	f002 fbec 	bl	1551c <__clzsi2>
   12d44:	3805      	subs	r0, #5
   12d46:	4086      	lsls	r6, r0
   12d48:	4284      	cmp	r4, r0
   12d4a:	dd00      	ble.n	12d4e <__aeabi_fadd+0x5e>
   12d4c:	e09d      	b.n	12e8a <__aeabi_fadd+0x19a>
   12d4e:	1b04      	subs	r4, r0, r4
   12d50:	0032      	movs	r2, r6
   12d52:	2020      	movs	r0, #32
   12d54:	3401      	adds	r4, #1
   12d56:	40e2      	lsrs	r2, r4
   12d58:	1b04      	subs	r4, r0, r4
   12d5a:	40a6      	lsls	r6, r4
   12d5c:	0033      	movs	r3, r6
   12d5e:	1e5e      	subs	r6, r3, #1
   12d60:	41b3      	sbcs	r3, r6
   12d62:	2400      	movs	r4, #0
   12d64:	4313      	orrs	r3, r2
   12d66:	075a      	lsls	r2, r3, #29
   12d68:	d004      	beq.n	12d74 <__aeabi_fadd+0x84>
   12d6a:	220f      	movs	r2, #15
   12d6c:	401a      	ands	r2, r3
   12d6e:	2a04      	cmp	r2, #4
   12d70:	d000      	beq.n	12d74 <__aeabi_fadd+0x84>
   12d72:	3304      	adds	r3, #4
   12d74:	015a      	lsls	r2, r3, #5
   12d76:	d529      	bpl.n	12dcc <__aeabi_fadd+0xdc>
   12d78:	3401      	adds	r4, #1
   12d7a:	2cff      	cmp	r4, #255	; 0xff
   12d7c:	d100      	bne.n	12d80 <__aeabi_fadd+0x90>
   12d7e:	e081      	b.n	12e84 <__aeabi_fadd+0x194>
   12d80:	002a      	movs	r2, r5
   12d82:	019b      	lsls	r3, r3, #6
   12d84:	0a5b      	lsrs	r3, r3, #9
   12d86:	b2e4      	uxtb	r4, r4
   12d88:	025b      	lsls	r3, r3, #9
   12d8a:	05e4      	lsls	r4, r4, #23
   12d8c:	0a58      	lsrs	r0, r3, #9
   12d8e:	07d2      	lsls	r2, r2, #31
   12d90:	4320      	orrs	r0, r4
   12d92:	4310      	orrs	r0, r2
   12d94:	bc04      	pop	{r2}
   12d96:	4690      	mov	r8, r2
   12d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d9a:	2cff      	cmp	r4, #255	; 0xff
   12d9c:	d0e3      	beq.n	12d66 <__aeabi_fadd+0x76>
   12d9e:	2180      	movs	r1, #128	; 0x80
   12da0:	0038      	movs	r0, r7
   12da2:	04c9      	lsls	r1, r1, #19
   12da4:	4308      	orrs	r0, r1
   12da6:	4684      	mov	ip, r0
   12da8:	2a1b      	cmp	r2, #27
   12daa:	dd00      	ble.n	12dae <__aeabi_fadd+0xbe>
   12dac:	e082      	b.n	12eb4 <__aeabi_fadd+0x1c4>
   12dae:	2020      	movs	r0, #32
   12db0:	4661      	mov	r1, ip
   12db2:	40d1      	lsrs	r1, r2
   12db4:	1a82      	subs	r2, r0, r2
   12db6:	4660      	mov	r0, ip
   12db8:	4090      	lsls	r0, r2
   12dba:	0002      	movs	r2, r0
   12dbc:	1e50      	subs	r0, r2, #1
   12dbe:	4182      	sbcs	r2, r0
   12dc0:	430a      	orrs	r2, r1
   12dc2:	1a9b      	subs	r3, r3, r2
   12dc4:	015a      	lsls	r2, r3, #5
   12dc6:	d4b8      	bmi.n	12d3a <__aeabi_fadd+0x4a>
   12dc8:	075a      	lsls	r2, r3, #29
   12dca:	d1ce      	bne.n	12d6a <__aeabi_fadd+0x7a>
   12dcc:	08de      	lsrs	r6, r3, #3
   12dce:	002a      	movs	r2, r5
   12dd0:	2cff      	cmp	r4, #255	; 0xff
   12dd2:	d13a      	bne.n	12e4a <__aeabi_fadd+0x15a>
   12dd4:	2e00      	cmp	r6, #0
   12dd6:	d100      	bne.n	12dda <__aeabi_fadd+0xea>
   12dd8:	e0ae      	b.n	12f38 <__aeabi_fadd+0x248>
   12dda:	2380      	movs	r3, #128	; 0x80
   12ddc:	03db      	lsls	r3, r3, #15
   12dde:	4333      	orrs	r3, r6
   12de0:	025b      	lsls	r3, r3, #9
   12de2:	0a5b      	lsrs	r3, r3, #9
   12de4:	24ff      	movs	r4, #255	; 0xff
   12de6:	e7cf      	b.n	12d88 <__aeabi_fadd+0x98>
   12de8:	1a21      	subs	r1, r4, r0
   12dea:	2900      	cmp	r1, #0
   12dec:	dd52      	ble.n	12e94 <__aeabi_fadd+0x1a4>
   12dee:	2800      	cmp	r0, #0
   12df0:	d031      	beq.n	12e56 <__aeabi_fadd+0x166>
   12df2:	2cff      	cmp	r4, #255	; 0xff
   12df4:	d0b7      	beq.n	12d66 <__aeabi_fadd+0x76>
   12df6:	2080      	movs	r0, #128	; 0x80
   12df8:	003e      	movs	r6, r7
   12dfa:	04c0      	lsls	r0, r0, #19
   12dfc:	4306      	orrs	r6, r0
   12dfe:	46b4      	mov	ip, r6
   12e00:	291b      	cmp	r1, #27
   12e02:	dd00      	ble.n	12e06 <__aeabi_fadd+0x116>
   12e04:	e0aa      	b.n	12f5c <__aeabi_fadd+0x26c>
   12e06:	2620      	movs	r6, #32
   12e08:	4660      	mov	r0, ip
   12e0a:	40c8      	lsrs	r0, r1
   12e0c:	1a71      	subs	r1, r6, r1
   12e0e:	4666      	mov	r6, ip
   12e10:	408e      	lsls	r6, r1
   12e12:	0031      	movs	r1, r6
   12e14:	1e4e      	subs	r6, r1, #1
   12e16:	41b1      	sbcs	r1, r6
   12e18:	4301      	orrs	r1, r0
   12e1a:	185b      	adds	r3, r3, r1
   12e1c:	0159      	lsls	r1, r3, #5
   12e1e:	d5d3      	bpl.n	12dc8 <__aeabi_fadd+0xd8>
   12e20:	3401      	adds	r4, #1
   12e22:	2cff      	cmp	r4, #255	; 0xff
   12e24:	d100      	bne.n	12e28 <__aeabi_fadd+0x138>
   12e26:	e087      	b.n	12f38 <__aeabi_fadd+0x248>
   12e28:	2201      	movs	r2, #1
   12e2a:	4978      	ldr	r1, [pc, #480]	; (1300c <__aeabi_fadd+0x31c>)
   12e2c:	401a      	ands	r2, r3
   12e2e:	085b      	lsrs	r3, r3, #1
   12e30:	400b      	ands	r3, r1
   12e32:	4313      	orrs	r3, r2
   12e34:	e797      	b.n	12d66 <__aeabi_fadd+0x76>
   12e36:	2c00      	cmp	r4, #0
   12e38:	d000      	beq.n	12e3c <__aeabi_fadd+0x14c>
   12e3a:	e0a7      	b.n	12f8c <__aeabi_fadd+0x29c>
   12e3c:	2b00      	cmp	r3, #0
   12e3e:	d000      	beq.n	12e42 <__aeabi_fadd+0x152>
   12e40:	e0b6      	b.n	12fb0 <__aeabi_fadd+0x2c0>
   12e42:	1e3b      	subs	r3, r7, #0
   12e44:	d162      	bne.n	12f0c <__aeabi_fadd+0x21c>
   12e46:	2600      	movs	r6, #0
   12e48:	2200      	movs	r2, #0
   12e4a:	0273      	lsls	r3, r6, #9
   12e4c:	0a5b      	lsrs	r3, r3, #9
   12e4e:	b2e4      	uxtb	r4, r4
   12e50:	e79a      	b.n	12d88 <__aeabi_fadd+0x98>
   12e52:	0014      	movs	r4, r2
   12e54:	e787      	b.n	12d66 <__aeabi_fadd+0x76>
   12e56:	2f00      	cmp	r7, #0
   12e58:	d04d      	beq.n	12ef6 <__aeabi_fadd+0x206>
   12e5a:	1e48      	subs	r0, r1, #1
   12e5c:	2800      	cmp	r0, #0
   12e5e:	d157      	bne.n	12f10 <__aeabi_fadd+0x220>
   12e60:	4463      	add	r3, ip
   12e62:	2401      	movs	r4, #1
   12e64:	015a      	lsls	r2, r3, #5
   12e66:	d5af      	bpl.n	12dc8 <__aeabi_fadd+0xd8>
   12e68:	2402      	movs	r4, #2
   12e6a:	e7dd      	b.n	12e28 <__aeabi_fadd+0x138>
   12e6c:	2a00      	cmp	r2, #0
   12e6e:	d124      	bne.n	12eba <__aeabi_fadd+0x1ca>
   12e70:	1c62      	adds	r2, r4, #1
   12e72:	b2d2      	uxtb	r2, r2
   12e74:	2a01      	cmp	r2, #1
   12e76:	ddde      	ble.n	12e36 <__aeabi_fadd+0x146>
   12e78:	1bde      	subs	r6, r3, r7
   12e7a:	0172      	lsls	r2, r6, #5
   12e7c:	d535      	bpl.n	12eea <__aeabi_fadd+0x1fa>
   12e7e:	1afe      	subs	r6, r7, r3
   12e80:	000d      	movs	r5, r1
   12e82:	e75c      	b.n	12d3e <__aeabi_fadd+0x4e>
   12e84:	002a      	movs	r2, r5
   12e86:	2300      	movs	r3, #0
   12e88:	e77e      	b.n	12d88 <__aeabi_fadd+0x98>
   12e8a:	0033      	movs	r3, r6
   12e8c:	4a60      	ldr	r2, [pc, #384]	; (13010 <__aeabi_fadd+0x320>)
   12e8e:	1a24      	subs	r4, r4, r0
   12e90:	4013      	ands	r3, r2
   12e92:	e768      	b.n	12d66 <__aeabi_fadd+0x76>
   12e94:	2900      	cmp	r1, #0
   12e96:	d163      	bne.n	12f60 <__aeabi_fadd+0x270>
   12e98:	1c61      	adds	r1, r4, #1
   12e9a:	b2c8      	uxtb	r0, r1
   12e9c:	2801      	cmp	r0, #1
   12e9e:	dd4e      	ble.n	12f3e <__aeabi_fadd+0x24e>
   12ea0:	29ff      	cmp	r1, #255	; 0xff
   12ea2:	d049      	beq.n	12f38 <__aeabi_fadd+0x248>
   12ea4:	4463      	add	r3, ip
   12ea6:	085b      	lsrs	r3, r3, #1
   12ea8:	000c      	movs	r4, r1
   12eaa:	e75c      	b.n	12d66 <__aeabi_fadd+0x76>
   12eac:	2aff      	cmp	r2, #255	; 0xff
   12eae:	d041      	beq.n	12f34 <__aeabi_fadd+0x244>
   12eb0:	000a      	movs	r2, r1
   12eb2:	e779      	b.n	12da8 <__aeabi_fadd+0xb8>
   12eb4:	2201      	movs	r2, #1
   12eb6:	1a9b      	subs	r3, r3, r2
   12eb8:	e784      	b.n	12dc4 <__aeabi_fadd+0xd4>
   12eba:	2c00      	cmp	r4, #0
   12ebc:	d01d      	beq.n	12efa <__aeabi_fadd+0x20a>
   12ebe:	28ff      	cmp	r0, #255	; 0xff
   12ec0:	d022      	beq.n	12f08 <__aeabi_fadd+0x218>
   12ec2:	2480      	movs	r4, #128	; 0x80
   12ec4:	04e4      	lsls	r4, r4, #19
   12ec6:	4252      	negs	r2, r2
   12ec8:	4323      	orrs	r3, r4
   12eca:	2a1b      	cmp	r2, #27
   12ecc:	dd00      	ble.n	12ed0 <__aeabi_fadd+0x1e0>
   12ece:	e08a      	b.n	12fe6 <__aeabi_fadd+0x2f6>
   12ed0:	001c      	movs	r4, r3
   12ed2:	2520      	movs	r5, #32
   12ed4:	40d4      	lsrs	r4, r2
   12ed6:	1aaa      	subs	r2, r5, r2
   12ed8:	4093      	lsls	r3, r2
   12eda:	1e5a      	subs	r2, r3, #1
   12edc:	4193      	sbcs	r3, r2
   12ede:	4323      	orrs	r3, r4
   12ee0:	4662      	mov	r2, ip
   12ee2:	0004      	movs	r4, r0
   12ee4:	1ad3      	subs	r3, r2, r3
   12ee6:	000d      	movs	r5, r1
   12ee8:	e725      	b.n	12d36 <__aeabi_fadd+0x46>
   12eea:	2e00      	cmp	r6, #0
   12eec:	d000      	beq.n	12ef0 <__aeabi_fadd+0x200>
   12eee:	e726      	b.n	12d3e <__aeabi_fadd+0x4e>
   12ef0:	2200      	movs	r2, #0
   12ef2:	2400      	movs	r4, #0
   12ef4:	e7a9      	b.n	12e4a <__aeabi_fadd+0x15a>
   12ef6:	000c      	movs	r4, r1
   12ef8:	e735      	b.n	12d66 <__aeabi_fadd+0x76>
   12efa:	2b00      	cmp	r3, #0
   12efc:	d04d      	beq.n	12f9a <__aeabi_fadd+0x2aa>
   12efe:	43d2      	mvns	r2, r2
   12f00:	2a00      	cmp	r2, #0
   12f02:	d0ed      	beq.n	12ee0 <__aeabi_fadd+0x1f0>
   12f04:	28ff      	cmp	r0, #255	; 0xff
   12f06:	d1e0      	bne.n	12eca <__aeabi_fadd+0x1da>
   12f08:	4663      	mov	r3, ip
   12f0a:	24ff      	movs	r4, #255	; 0xff
   12f0c:	000d      	movs	r5, r1
   12f0e:	e72a      	b.n	12d66 <__aeabi_fadd+0x76>
   12f10:	29ff      	cmp	r1, #255	; 0xff
   12f12:	d00f      	beq.n	12f34 <__aeabi_fadd+0x244>
   12f14:	0001      	movs	r1, r0
   12f16:	e773      	b.n	12e00 <__aeabi_fadd+0x110>
   12f18:	2b00      	cmp	r3, #0
   12f1a:	d061      	beq.n	12fe0 <__aeabi_fadd+0x2f0>
   12f1c:	24ff      	movs	r4, #255	; 0xff
   12f1e:	2f00      	cmp	r7, #0
   12f20:	d100      	bne.n	12f24 <__aeabi_fadd+0x234>
   12f22:	e720      	b.n	12d66 <__aeabi_fadd+0x76>
   12f24:	2280      	movs	r2, #128	; 0x80
   12f26:	4641      	mov	r1, r8
   12f28:	03d2      	lsls	r2, r2, #15
   12f2a:	4211      	tst	r1, r2
   12f2c:	d002      	beq.n	12f34 <__aeabi_fadd+0x244>
   12f2e:	4216      	tst	r6, r2
   12f30:	d100      	bne.n	12f34 <__aeabi_fadd+0x244>
   12f32:	003b      	movs	r3, r7
   12f34:	24ff      	movs	r4, #255	; 0xff
   12f36:	e716      	b.n	12d66 <__aeabi_fadd+0x76>
   12f38:	24ff      	movs	r4, #255	; 0xff
   12f3a:	2300      	movs	r3, #0
   12f3c:	e724      	b.n	12d88 <__aeabi_fadd+0x98>
   12f3e:	2c00      	cmp	r4, #0
   12f40:	d1ea      	bne.n	12f18 <__aeabi_fadd+0x228>
   12f42:	2b00      	cmp	r3, #0
   12f44:	d058      	beq.n	12ff8 <__aeabi_fadd+0x308>
   12f46:	2f00      	cmp	r7, #0
   12f48:	d100      	bne.n	12f4c <__aeabi_fadd+0x25c>
   12f4a:	e70c      	b.n	12d66 <__aeabi_fadd+0x76>
   12f4c:	4463      	add	r3, ip
   12f4e:	015a      	lsls	r2, r3, #5
   12f50:	d400      	bmi.n	12f54 <__aeabi_fadd+0x264>
   12f52:	e739      	b.n	12dc8 <__aeabi_fadd+0xd8>
   12f54:	4a2e      	ldr	r2, [pc, #184]	; (13010 <__aeabi_fadd+0x320>)
   12f56:	000c      	movs	r4, r1
   12f58:	4013      	ands	r3, r2
   12f5a:	e704      	b.n	12d66 <__aeabi_fadd+0x76>
   12f5c:	2101      	movs	r1, #1
   12f5e:	e75c      	b.n	12e1a <__aeabi_fadd+0x12a>
   12f60:	2c00      	cmp	r4, #0
   12f62:	d11e      	bne.n	12fa2 <__aeabi_fadd+0x2b2>
   12f64:	2b00      	cmp	r3, #0
   12f66:	d040      	beq.n	12fea <__aeabi_fadd+0x2fa>
   12f68:	43c9      	mvns	r1, r1
   12f6a:	2900      	cmp	r1, #0
   12f6c:	d00b      	beq.n	12f86 <__aeabi_fadd+0x296>
   12f6e:	28ff      	cmp	r0, #255	; 0xff
   12f70:	d036      	beq.n	12fe0 <__aeabi_fadd+0x2f0>
   12f72:	291b      	cmp	r1, #27
   12f74:	dc47      	bgt.n	13006 <__aeabi_fadd+0x316>
   12f76:	001c      	movs	r4, r3
   12f78:	2620      	movs	r6, #32
   12f7a:	40cc      	lsrs	r4, r1
   12f7c:	1a71      	subs	r1, r6, r1
   12f7e:	408b      	lsls	r3, r1
   12f80:	1e59      	subs	r1, r3, #1
   12f82:	418b      	sbcs	r3, r1
   12f84:	4323      	orrs	r3, r4
   12f86:	4463      	add	r3, ip
   12f88:	0004      	movs	r4, r0
   12f8a:	e747      	b.n	12e1c <__aeabi_fadd+0x12c>
   12f8c:	2b00      	cmp	r3, #0
   12f8e:	d118      	bne.n	12fc2 <__aeabi_fadd+0x2d2>
   12f90:	1e3b      	subs	r3, r7, #0
   12f92:	d02d      	beq.n	12ff0 <__aeabi_fadd+0x300>
   12f94:	000d      	movs	r5, r1
   12f96:	24ff      	movs	r4, #255	; 0xff
   12f98:	e6e5      	b.n	12d66 <__aeabi_fadd+0x76>
   12f9a:	003b      	movs	r3, r7
   12f9c:	0004      	movs	r4, r0
   12f9e:	000d      	movs	r5, r1
   12fa0:	e6e1      	b.n	12d66 <__aeabi_fadd+0x76>
   12fa2:	28ff      	cmp	r0, #255	; 0xff
   12fa4:	d01c      	beq.n	12fe0 <__aeabi_fadd+0x2f0>
   12fa6:	2480      	movs	r4, #128	; 0x80
   12fa8:	04e4      	lsls	r4, r4, #19
   12faa:	4249      	negs	r1, r1
   12fac:	4323      	orrs	r3, r4
   12fae:	e7e0      	b.n	12f72 <__aeabi_fadd+0x282>
   12fb0:	2f00      	cmp	r7, #0
   12fb2:	d100      	bne.n	12fb6 <__aeabi_fadd+0x2c6>
   12fb4:	e6d7      	b.n	12d66 <__aeabi_fadd+0x76>
   12fb6:	1bde      	subs	r6, r3, r7
   12fb8:	0172      	lsls	r2, r6, #5
   12fba:	d51f      	bpl.n	12ffc <__aeabi_fadd+0x30c>
   12fbc:	1afb      	subs	r3, r7, r3
   12fbe:	000d      	movs	r5, r1
   12fc0:	e6d1      	b.n	12d66 <__aeabi_fadd+0x76>
   12fc2:	24ff      	movs	r4, #255	; 0xff
   12fc4:	2f00      	cmp	r7, #0
   12fc6:	d100      	bne.n	12fca <__aeabi_fadd+0x2da>
   12fc8:	e6cd      	b.n	12d66 <__aeabi_fadd+0x76>
   12fca:	2280      	movs	r2, #128	; 0x80
   12fcc:	4640      	mov	r0, r8
   12fce:	03d2      	lsls	r2, r2, #15
   12fd0:	4210      	tst	r0, r2
   12fd2:	d0af      	beq.n	12f34 <__aeabi_fadd+0x244>
   12fd4:	4216      	tst	r6, r2
   12fd6:	d1ad      	bne.n	12f34 <__aeabi_fadd+0x244>
   12fd8:	003b      	movs	r3, r7
   12fda:	000d      	movs	r5, r1
   12fdc:	24ff      	movs	r4, #255	; 0xff
   12fde:	e6c2      	b.n	12d66 <__aeabi_fadd+0x76>
   12fe0:	4663      	mov	r3, ip
   12fe2:	24ff      	movs	r4, #255	; 0xff
   12fe4:	e6bf      	b.n	12d66 <__aeabi_fadd+0x76>
   12fe6:	2301      	movs	r3, #1
   12fe8:	e77a      	b.n	12ee0 <__aeabi_fadd+0x1f0>
   12fea:	003b      	movs	r3, r7
   12fec:	0004      	movs	r4, r0
   12fee:	e6ba      	b.n	12d66 <__aeabi_fadd+0x76>
   12ff0:	2680      	movs	r6, #128	; 0x80
   12ff2:	2200      	movs	r2, #0
   12ff4:	03f6      	lsls	r6, r6, #15
   12ff6:	e6f0      	b.n	12dda <__aeabi_fadd+0xea>
   12ff8:	003b      	movs	r3, r7
   12ffa:	e6b4      	b.n	12d66 <__aeabi_fadd+0x76>
   12ffc:	1e33      	subs	r3, r6, #0
   12ffe:	d000      	beq.n	13002 <__aeabi_fadd+0x312>
   13000:	e6e2      	b.n	12dc8 <__aeabi_fadd+0xd8>
   13002:	2200      	movs	r2, #0
   13004:	e721      	b.n	12e4a <__aeabi_fadd+0x15a>
   13006:	2301      	movs	r3, #1
   13008:	e7bd      	b.n	12f86 <__aeabi_fadd+0x296>
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	7dffffff 	.word	0x7dffffff
   13010:	fbffffff 	.word	0xfbffffff

00013014 <__aeabi_fdiv>:
   13014:	b5f0      	push	{r4, r5, r6, r7, lr}
   13016:	4657      	mov	r7, sl
   13018:	464e      	mov	r6, r9
   1301a:	46de      	mov	lr, fp
   1301c:	4645      	mov	r5, r8
   1301e:	b5e0      	push	{r5, r6, r7, lr}
   13020:	0244      	lsls	r4, r0, #9
   13022:	0043      	lsls	r3, r0, #1
   13024:	0fc6      	lsrs	r6, r0, #31
   13026:	b083      	sub	sp, #12
   13028:	1c0f      	adds	r7, r1, #0
   1302a:	0a64      	lsrs	r4, r4, #9
   1302c:	0e1b      	lsrs	r3, r3, #24
   1302e:	46b2      	mov	sl, r6
   13030:	d053      	beq.n	130da <__aeabi_fdiv+0xc6>
   13032:	2bff      	cmp	r3, #255	; 0xff
   13034:	d027      	beq.n	13086 <__aeabi_fdiv+0x72>
   13036:	2280      	movs	r2, #128	; 0x80
   13038:	00e4      	lsls	r4, r4, #3
   1303a:	04d2      	lsls	r2, r2, #19
   1303c:	4314      	orrs	r4, r2
   1303e:	227f      	movs	r2, #127	; 0x7f
   13040:	4252      	negs	r2, r2
   13042:	4690      	mov	r8, r2
   13044:	4498      	add	r8, r3
   13046:	2300      	movs	r3, #0
   13048:	4699      	mov	r9, r3
   1304a:	469b      	mov	fp, r3
   1304c:	027d      	lsls	r5, r7, #9
   1304e:	0078      	lsls	r0, r7, #1
   13050:	0ffb      	lsrs	r3, r7, #31
   13052:	0a6d      	lsrs	r5, r5, #9
   13054:	0e00      	lsrs	r0, r0, #24
   13056:	9300      	str	r3, [sp, #0]
   13058:	d024      	beq.n	130a4 <__aeabi_fdiv+0x90>
   1305a:	28ff      	cmp	r0, #255	; 0xff
   1305c:	d046      	beq.n	130ec <__aeabi_fdiv+0xd8>
   1305e:	2380      	movs	r3, #128	; 0x80
   13060:	2100      	movs	r1, #0
   13062:	00ed      	lsls	r5, r5, #3
   13064:	04db      	lsls	r3, r3, #19
   13066:	431d      	orrs	r5, r3
   13068:	387f      	subs	r0, #127	; 0x7f
   1306a:	4647      	mov	r7, r8
   1306c:	1a38      	subs	r0, r7, r0
   1306e:	464f      	mov	r7, r9
   13070:	430f      	orrs	r7, r1
   13072:	00bf      	lsls	r7, r7, #2
   13074:	46b9      	mov	r9, r7
   13076:	0033      	movs	r3, r6
   13078:	9a00      	ldr	r2, [sp, #0]
   1307a:	4f87      	ldr	r7, [pc, #540]	; (13298 <__aeabi_fdiv+0x284>)
   1307c:	4053      	eors	r3, r2
   1307e:	464a      	mov	r2, r9
   13080:	58ba      	ldr	r2, [r7, r2]
   13082:	9301      	str	r3, [sp, #4]
   13084:	4697      	mov	pc, r2
   13086:	2c00      	cmp	r4, #0
   13088:	d14e      	bne.n	13128 <__aeabi_fdiv+0x114>
   1308a:	2308      	movs	r3, #8
   1308c:	4699      	mov	r9, r3
   1308e:	33f7      	adds	r3, #247	; 0xf7
   13090:	4698      	mov	r8, r3
   13092:	3bfd      	subs	r3, #253	; 0xfd
   13094:	469b      	mov	fp, r3
   13096:	027d      	lsls	r5, r7, #9
   13098:	0078      	lsls	r0, r7, #1
   1309a:	0ffb      	lsrs	r3, r7, #31
   1309c:	0a6d      	lsrs	r5, r5, #9
   1309e:	0e00      	lsrs	r0, r0, #24
   130a0:	9300      	str	r3, [sp, #0]
   130a2:	d1da      	bne.n	1305a <__aeabi_fdiv+0x46>
   130a4:	2d00      	cmp	r5, #0
   130a6:	d126      	bne.n	130f6 <__aeabi_fdiv+0xe2>
   130a8:	2000      	movs	r0, #0
   130aa:	2101      	movs	r1, #1
   130ac:	0033      	movs	r3, r6
   130ae:	9a00      	ldr	r2, [sp, #0]
   130b0:	4f7a      	ldr	r7, [pc, #488]	; (1329c <__aeabi_fdiv+0x288>)
   130b2:	4053      	eors	r3, r2
   130b4:	4642      	mov	r2, r8
   130b6:	1a10      	subs	r0, r2, r0
   130b8:	464a      	mov	r2, r9
   130ba:	430a      	orrs	r2, r1
   130bc:	0092      	lsls	r2, r2, #2
   130be:	58ba      	ldr	r2, [r7, r2]
   130c0:	001d      	movs	r5, r3
   130c2:	4697      	mov	pc, r2
   130c4:	9b00      	ldr	r3, [sp, #0]
   130c6:	002c      	movs	r4, r5
   130c8:	469a      	mov	sl, r3
   130ca:	468b      	mov	fp, r1
   130cc:	465b      	mov	r3, fp
   130ce:	2b02      	cmp	r3, #2
   130d0:	d131      	bne.n	13136 <__aeabi_fdiv+0x122>
   130d2:	4653      	mov	r3, sl
   130d4:	21ff      	movs	r1, #255	; 0xff
   130d6:	2400      	movs	r4, #0
   130d8:	e038      	b.n	1314c <__aeabi_fdiv+0x138>
   130da:	2c00      	cmp	r4, #0
   130dc:	d117      	bne.n	1310e <__aeabi_fdiv+0xfa>
   130de:	2304      	movs	r3, #4
   130e0:	4699      	mov	r9, r3
   130e2:	2300      	movs	r3, #0
   130e4:	4698      	mov	r8, r3
   130e6:	3301      	adds	r3, #1
   130e8:	469b      	mov	fp, r3
   130ea:	e7af      	b.n	1304c <__aeabi_fdiv+0x38>
   130ec:	20ff      	movs	r0, #255	; 0xff
   130ee:	2d00      	cmp	r5, #0
   130f0:	d10b      	bne.n	1310a <__aeabi_fdiv+0xf6>
   130f2:	2102      	movs	r1, #2
   130f4:	e7da      	b.n	130ac <__aeabi_fdiv+0x98>
   130f6:	0028      	movs	r0, r5
   130f8:	f002 fa10 	bl	1551c <__clzsi2>
   130fc:	1f43      	subs	r3, r0, #5
   130fe:	409d      	lsls	r5, r3
   13100:	2376      	movs	r3, #118	; 0x76
   13102:	425b      	negs	r3, r3
   13104:	1a18      	subs	r0, r3, r0
   13106:	2100      	movs	r1, #0
   13108:	e7af      	b.n	1306a <__aeabi_fdiv+0x56>
   1310a:	2103      	movs	r1, #3
   1310c:	e7ad      	b.n	1306a <__aeabi_fdiv+0x56>
   1310e:	0020      	movs	r0, r4
   13110:	f002 fa04 	bl	1551c <__clzsi2>
   13114:	1f43      	subs	r3, r0, #5
   13116:	409c      	lsls	r4, r3
   13118:	2376      	movs	r3, #118	; 0x76
   1311a:	425b      	negs	r3, r3
   1311c:	1a1b      	subs	r3, r3, r0
   1311e:	4698      	mov	r8, r3
   13120:	2300      	movs	r3, #0
   13122:	4699      	mov	r9, r3
   13124:	469b      	mov	fp, r3
   13126:	e791      	b.n	1304c <__aeabi_fdiv+0x38>
   13128:	230c      	movs	r3, #12
   1312a:	4699      	mov	r9, r3
   1312c:	33f3      	adds	r3, #243	; 0xf3
   1312e:	4698      	mov	r8, r3
   13130:	3bfc      	subs	r3, #252	; 0xfc
   13132:	469b      	mov	fp, r3
   13134:	e78a      	b.n	1304c <__aeabi_fdiv+0x38>
   13136:	2b03      	cmp	r3, #3
   13138:	d100      	bne.n	1313c <__aeabi_fdiv+0x128>
   1313a:	e0a5      	b.n	13288 <__aeabi_fdiv+0x274>
   1313c:	4655      	mov	r5, sl
   1313e:	2b01      	cmp	r3, #1
   13140:	d000      	beq.n	13144 <__aeabi_fdiv+0x130>
   13142:	e081      	b.n	13248 <__aeabi_fdiv+0x234>
   13144:	2301      	movs	r3, #1
   13146:	2100      	movs	r1, #0
   13148:	2400      	movs	r4, #0
   1314a:	402b      	ands	r3, r5
   1314c:	0264      	lsls	r4, r4, #9
   1314e:	05c9      	lsls	r1, r1, #23
   13150:	0a60      	lsrs	r0, r4, #9
   13152:	07db      	lsls	r3, r3, #31
   13154:	4308      	orrs	r0, r1
   13156:	4318      	orrs	r0, r3
   13158:	b003      	add	sp, #12
   1315a:	bc3c      	pop	{r2, r3, r4, r5}
   1315c:	4690      	mov	r8, r2
   1315e:	4699      	mov	r9, r3
   13160:	46a2      	mov	sl, r4
   13162:	46ab      	mov	fp, r5
   13164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13166:	2480      	movs	r4, #128	; 0x80
   13168:	2300      	movs	r3, #0
   1316a:	03e4      	lsls	r4, r4, #15
   1316c:	21ff      	movs	r1, #255	; 0xff
   1316e:	e7ed      	b.n	1314c <__aeabi_fdiv+0x138>
   13170:	21ff      	movs	r1, #255	; 0xff
   13172:	2400      	movs	r4, #0
   13174:	e7ea      	b.n	1314c <__aeabi_fdiv+0x138>
   13176:	2301      	movs	r3, #1
   13178:	1a59      	subs	r1, r3, r1
   1317a:	291b      	cmp	r1, #27
   1317c:	dd66      	ble.n	1324c <__aeabi_fdiv+0x238>
   1317e:	9a01      	ldr	r2, [sp, #4]
   13180:	4013      	ands	r3, r2
   13182:	2100      	movs	r1, #0
   13184:	2400      	movs	r4, #0
   13186:	e7e1      	b.n	1314c <__aeabi_fdiv+0x138>
   13188:	2380      	movs	r3, #128	; 0x80
   1318a:	03db      	lsls	r3, r3, #15
   1318c:	421c      	tst	r4, r3
   1318e:	d038      	beq.n	13202 <__aeabi_fdiv+0x1ee>
   13190:	421d      	tst	r5, r3
   13192:	d051      	beq.n	13238 <__aeabi_fdiv+0x224>
   13194:	431c      	orrs	r4, r3
   13196:	0264      	lsls	r4, r4, #9
   13198:	0a64      	lsrs	r4, r4, #9
   1319a:	0033      	movs	r3, r6
   1319c:	21ff      	movs	r1, #255	; 0xff
   1319e:	e7d5      	b.n	1314c <__aeabi_fdiv+0x138>
   131a0:	0163      	lsls	r3, r4, #5
   131a2:	016c      	lsls	r4, r5, #5
   131a4:	42a3      	cmp	r3, r4
   131a6:	d23b      	bcs.n	13220 <__aeabi_fdiv+0x20c>
   131a8:	261b      	movs	r6, #27
   131aa:	2100      	movs	r1, #0
   131ac:	3801      	subs	r0, #1
   131ae:	2501      	movs	r5, #1
   131b0:	001f      	movs	r7, r3
   131b2:	0049      	lsls	r1, r1, #1
   131b4:	005b      	lsls	r3, r3, #1
   131b6:	2f00      	cmp	r7, #0
   131b8:	db01      	blt.n	131be <__aeabi_fdiv+0x1aa>
   131ba:	429c      	cmp	r4, r3
   131bc:	d801      	bhi.n	131c2 <__aeabi_fdiv+0x1ae>
   131be:	1b1b      	subs	r3, r3, r4
   131c0:	4329      	orrs	r1, r5
   131c2:	3e01      	subs	r6, #1
   131c4:	2e00      	cmp	r6, #0
   131c6:	d1f3      	bne.n	131b0 <__aeabi_fdiv+0x19c>
   131c8:	001c      	movs	r4, r3
   131ca:	1e63      	subs	r3, r4, #1
   131cc:	419c      	sbcs	r4, r3
   131ce:	430c      	orrs	r4, r1
   131d0:	0001      	movs	r1, r0
   131d2:	317f      	adds	r1, #127	; 0x7f
   131d4:	2900      	cmp	r1, #0
   131d6:	ddce      	ble.n	13176 <__aeabi_fdiv+0x162>
   131d8:	0763      	lsls	r3, r4, #29
   131da:	d004      	beq.n	131e6 <__aeabi_fdiv+0x1d2>
   131dc:	230f      	movs	r3, #15
   131de:	4023      	ands	r3, r4
   131e0:	2b04      	cmp	r3, #4
   131e2:	d000      	beq.n	131e6 <__aeabi_fdiv+0x1d2>
   131e4:	3404      	adds	r4, #4
   131e6:	0123      	lsls	r3, r4, #4
   131e8:	d503      	bpl.n	131f2 <__aeabi_fdiv+0x1de>
   131ea:	0001      	movs	r1, r0
   131ec:	4b2c      	ldr	r3, [pc, #176]	; (132a0 <__aeabi_fdiv+0x28c>)
   131ee:	3180      	adds	r1, #128	; 0x80
   131f0:	401c      	ands	r4, r3
   131f2:	29fe      	cmp	r1, #254	; 0xfe
   131f4:	dd0d      	ble.n	13212 <__aeabi_fdiv+0x1fe>
   131f6:	2301      	movs	r3, #1
   131f8:	9a01      	ldr	r2, [sp, #4]
   131fa:	21ff      	movs	r1, #255	; 0xff
   131fc:	4013      	ands	r3, r2
   131fe:	2400      	movs	r4, #0
   13200:	e7a4      	b.n	1314c <__aeabi_fdiv+0x138>
   13202:	2380      	movs	r3, #128	; 0x80
   13204:	03db      	lsls	r3, r3, #15
   13206:	431c      	orrs	r4, r3
   13208:	0264      	lsls	r4, r4, #9
   1320a:	0a64      	lsrs	r4, r4, #9
   1320c:	0033      	movs	r3, r6
   1320e:	21ff      	movs	r1, #255	; 0xff
   13210:	e79c      	b.n	1314c <__aeabi_fdiv+0x138>
   13212:	2301      	movs	r3, #1
   13214:	9a01      	ldr	r2, [sp, #4]
   13216:	01a4      	lsls	r4, r4, #6
   13218:	0a64      	lsrs	r4, r4, #9
   1321a:	b2c9      	uxtb	r1, r1
   1321c:	4013      	ands	r3, r2
   1321e:	e795      	b.n	1314c <__aeabi_fdiv+0x138>
   13220:	1b1b      	subs	r3, r3, r4
   13222:	261a      	movs	r6, #26
   13224:	2101      	movs	r1, #1
   13226:	e7c2      	b.n	131ae <__aeabi_fdiv+0x19a>
   13228:	9b00      	ldr	r3, [sp, #0]
   1322a:	468b      	mov	fp, r1
   1322c:	469a      	mov	sl, r3
   1322e:	2400      	movs	r4, #0
   13230:	e74c      	b.n	130cc <__aeabi_fdiv+0xb8>
   13232:	0263      	lsls	r3, r4, #9
   13234:	d5e5      	bpl.n	13202 <__aeabi_fdiv+0x1ee>
   13236:	2500      	movs	r5, #0
   13238:	2480      	movs	r4, #128	; 0x80
   1323a:	03e4      	lsls	r4, r4, #15
   1323c:	432c      	orrs	r4, r5
   1323e:	0264      	lsls	r4, r4, #9
   13240:	0a64      	lsrs	r4, r4, #9
   13242:	9b00      	ldr	r3, [sp, #0]
   13244:	21ff      	movs	r1, #255	; 0xff
   13246:	e781      	b.n	1314c <__aeabi_fdiv+0x138>
   13248:	9501      	str	r5, [sp, #4]
   1324a:	e7c1      	b.n	131d0 <__aeabi_fdiv+0x1bc>
   1324c:	0023      	movs	r3, r4
   1324e:	2020      	movs	r0, #32
   13250:	40cb      	lsrs	r3, r1
   13252:	1a41      	subs	r1, r0, r1
   13254:	408c      	lsls	r4, r1
   13256:	1e61      	subs	r1, r4, #1
   13258:	418c      	sbcs	r4, r1
   1325a:	431c      	orrs	r4, r3
   1325c:	0763      	lsls	r3, r4, #29
   1325e:	d004      	beq.n	1326a <__aeabi_fdiv+0x256>
   13260:	230f      	movs	r3, #15
   13262:	4023      	ands	r3, r4
   13264:	2b04      	cmp	r3, #4
   13266:	d000      	beq.n	1326a <__aeabi_fdiv+0x256>
   13268:	3404      	adds	r4, #4
   1326a:	0163      	lsls	r3, r4, #5
   1326c:	d505      	bpl.n	1327a <__aeabi_fdiv+0x266>
   1326e:	2301      	movs	r3, #1
   13270:	9a01      	ldr	r2, [sp, #4]
   13272:	2101      	movs	r1, #1
   13274:	4013      	ands	r3, r2
   13276:	2400      	movs	r4, #0
   13278:	e768      	b.n	1314c <__aeabi_fdiv+0x138>
   1327a:	2301      	movs	r3, #1
   1327c:	9a01      	ldr	r2, [sp, #4]
   1327e:	01a4      	lsls	r4, r4, #6
   13280:	0a64      	lsrs	r4, r4, #9
   13282:	4013      	ands	r3, r2
   13284:	2100      	movs	r1, #0
   13286:	e761      	b.n	1314c <__aeabi_fdiv+0x138>
   13288:	2380      	movs	r3, #128	; 0x80
   1328a:	03db      	lsls	r3, r3, #15
   1328c:	431c      	orrs	r4, r3
   1328e:	0264      	lsls	r4, r4, #9
   13290:	0a64      	lsrs	r4, r4, #9
   13292:	4653      	mov	r3, sl
   13294:	21ff      	movs	r1, #255	; 0xff
   13296:	e759      	b.n	1314c <__aeabi_fdiv+0x138>
   13298:	0001ddf8 	.word	0x0001ddf8
   1329c:	0001de38 	.word	0x0001de38
   132a0:	f7ffffff 	.word	0xf7ffffff

000132a4 <__eqsf2>:
   132a4:	b570      	push	{r4, r5, r6, lr}
   132a6:	0042      	lsls	r2, r0, #1
   132a8:	0245      	lsls	r5, r0, #9
   132aa:	024e      	lsls	r6, r1, #9
   132ac:	004c      	lsls	r4, r1, #1
   132ae:	0fc3      	lsrs	r3, r0, #31
   132b0:	0a6d      	lsrs	r5, r5, #9
   132b2:	0e12      	lsrs	r2, r2, #24
   132b4:	0a76      	lsrs	r6, r6, #9
   132b6:	0e24      	lsrs	r4, r4, #24
   132b8:	0fc9      	lsrs	r1, r1, #31
   132ba:	2001      	movs	r0, #1
   132bc:	2aff      	cmp	r2, #255	; 0xff
   132be:	d006      	beq.n	132ce <__eqsf2+0x2a>
   132c0:	2cff      	cmp	r4, #255	; 0xff
   132c2:	d003      	beq.n	132cc <__eqsf2+0x28>
   132c4:	42a2      	cmp	r2, r4
   132c6:	d101      	bne.n	132cc <__eqsf2+0x28>
   132c8:	42b5      	cmp	r5, r6
   132ca:	d006      	beq.n	132da <__eqsf2+0x36>
   132cc:	bd70      	pop	{r4, r5, r6, pc}
   132ce:	2d00      	cmp	r5, #0
   132d0:	d1fc      	bne.n	132cc <__eqsf2+0x28>
   132d2:	2cff      	cmp	r4, #255	; 0xff
   132d4:	d1fa      	bne.n	132cc <__eqsf2+0x28>
   132d6:	2e00      	cmp	r6, #0
   132d8:	d1f8      	bne.n	132cc <__eqsf2+0x28>
   132da:	428b      	cmp	r3, r1
   132dc:	d006      	beq.n	132ec <__eqsf2+0x48>
   132de:	2001      	movs	r0, #1
   132e0:	2a00      	cmp	r2, #0
   132e2:	d1f3      	bne.n	132cc <__eqsf2+0x28>
   132e4:	0028      	movs	r0, r5
   132e6:	1e45      	subs	r5, r0, #1
   132e8:	41a8      	sbcs	r0, r5
   132ea:	e7ef      	b.n	132cc <__eqsf2+0x28>
   132ec:	2000      	movs	r0, #0
   132ee:	e7ed      	b.n	132cc <__eqsf2+0x28>

000132f0 <__gesf2>:
   132f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   132f2:	0042      	lsls	r2, r0, #1
   132f4:	0245      	lsls	r5, r0, #9
   132f6:	024c      	lsls	r4, r1, #9
   132f8:	0fc3      	lsrs	r3, r0, #31
   132fa:	0048      	lsls	r0, r1, #1
   132fc:	0a6d      	lsrs	r5, r5, #9
   132fe:	0e12      	lsrs	r2, r2, #24
   13300:	0a64      	lsrs	r4, r4, #9
   13302:	0e00      	lsrs	r0, r0, #24
   13304:	0fc9      	lsrs	r1, r1, #31
   13306:	2aff      	cmp	r2, #255	; 0xff
   13308:	d01e      	beq.n	13348 <__gesf2+0x58>
   1330a:	28ff      	cmp	r0, #255	; 0xff
   1330c:	d021      	beq.n	13352 <__gesf2+0x62>
   1330e:	2a00      	cmp	r2, #0
   13310:	d10a      	bne.n	13328 <__gesf2+0x38>
   13312:	426e      	negs	r6, r5
   13314:	416e      	adcs	r6, r5
   13316:	b2f6      	uxtb	r6, r6
   13318:	2800      	cmp	r0, #0
   1331a:	d10f      	bne.n	1333c <__gesf2+0x4c>
   1331c:	2c00      	cmp	r4, #0
   1331e:	d10d      	bne.n	1333c <__gesf2+0x4c>
   13320:	2000      	movs	r0, #0
   13322:	2d00      	cmp	r5, #0
   13324:	d009      	beq.n	1333a <__gesf2+0x4a>
   13326:	e005      	b.n	13334 <__gesf2+0x44>
   13328:	2800      	cmp	r0, #0
   1332a:	d101      	bne.n	13330 <__gesf2+0x40>
   1332c:	2c00      	cmp	r4, #0
   1332e:	d001      	beq.n	13334 <__gesf2+0x44>
   13330:	428b      	cmp	r3, r1
   13332:	d011      	beq.n	13358 <__gesf2+0x68>
   13334:	2101      	movs	r1, #1
   13336:	4258      	negs	r0, r3
   13338:	4308      	orrs	r0, r1
   1333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1333c:	2e00      	cmp	r6, #0
   1333e:	d0f7      	beq.n	13330 <__gesf2+0x40>
   13340:	2001      	movs	r0, #1
   13342:	3901      	subs	r1, #1
   13344:	4308      	orrs	r0, r1
   13346:	e7f8      	b.n	1333a <__gesf2+0x4a>
   13348:	2d00      	cmp	r5, #0
   1334a:	d0de      	beq.n	1330a <__gesf2+0x1a>
   1334c:	2002      	movs	r0, #2
   1334e:	4240      	negs	r0, r0
   13350:	e7f3      	b.n	1333a <__gesf2+0x4a>
   13352:	2c00      	cmp	r4, #0
   13354:	d0db      	beq.n	1330e <__gesf2+0x1e>
   13356:	e7f9      	b.n	1334c <__gesf2+0x5c>
   13358:	4282      	cmp	r2, r0
   1335a:	dceb      	bgt.n	13334 <__gesf2+0x44>
   1335c:	db04      	blt.n	13368 <__gesf2+0x78>
   1335e:	42a5      	cmp	r5, r4
   13360:	d8e8      	bhi.n	13334 <__gesf2+0x44>
   13362:	2000      	movs	r0, #0
   13364:	42a5      	cmp	r5, r4
   13366:	d2e8      	bcs.n	1333a <__gesf2+0x4a>
   13368:	2101      	movs	r1, #1
   1336a:	1e58      	subs	r0, r3, #1
   1336c:	4308      	orrs	r0, r1
   1336e:	e7e4      	b.n	1333a <__gesf2+0x4a>

00013370 <__lesf2>:
   13370:	b5f0      	push	{r4, r5, r6, r7, lr}
   13372:	0042      	lsls	r2, r0, #1
   13374:	024d      	lsls	r5, r1, #9
   13376:	004c      	lsls	r4, r1, #1
   13378:	0246      	lsls	r6, r0, #9
   1337a:	0a76      	lsrs	r6, r6, #9
   1337c:	0e12      	lsrs	r2, r2, #24
   1337e:	0fc3      	lsrs	r3, r0, #31
   13380:	0a6d      	lsrs	r5, r5, #9
   13382:	0e24      	lsrs	r4, r4, #24
   13384:	0fc9      	lsrs	r1, r1, #31
   13386:	2aff      	cmp	r2, #255	; 0xff
   13388:	d016      	beq.n	133b8 <__lesf2+0x48>
   1338a:	2cff      	cmp	r4, #255	; 0xff
   1338c:	d018      	beq.n	133c0 <__lesf2+0x50>
   1338e:	2a00      	cmp	r2, #0
   13390:	d10a      	bne.n	133a8 <__lesf2+0x38>
   13392:	4270      	negs	r0, r6
   13394:	4170      	adcs	r0, r6
   13396:	b2c0      	uxtb	r0, r0
   13398:	2c00      	cmp	r4, #0
   1339a:	d015      	beq.n	133c8 <__lesf2+0x58>
   1339c:	2800      	cmp	r0, #0
   1339e:	d005      	beq.n	133ac <__lesf2+0x3c>
   133a0:	2001      	movs	r0, #1
   133a2:	3901      	subs	r1, #1
   133a4:	4308      	orrs	r0, r1
   133a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   133a8:	2c00      	cmp	r4, #0
   133aa:	d013      	beq.n	133d4 <__lesf2+0x64>
   133ac:	4299      	cmp	r1, r3
   133ae:	d014      	beq.n	133da <__lesf2+0x6a>
   133b0:	2001      	movs	r0, #1
   133b2:	425b      	negs	r3, r3
   133b4:	4318      	orrs	r0, r3
   133b6:	e7f6      	b.n	133a6 <__lesf2+0x36>
   133b8:	2002      	movs	r0, #2
   133ba:	2e00      	cmp	r6, #0
   133bc:	d1f3      	bne.n	133a6 <__lesf2+0x36>
   133be:	e7e4      	b.n	1338a <__lesf2+0x1a>
   133c0:	2002      	movs	r0, #2
   133c2:	2d00      	cmp	r5, #0
   133c4:	d1ef      	bne.n	133a6 <__lesf2+0x36>
   133c6:	e7e2      	b.n	1338e <__lesf2+0x1e>
   133c8:	2d00      	cmp	r5, #0
   133ca:	d1e7      	bne.n	1339c <__lesf2+0x2c>
   133cc:	2000      	movs	r0, #0
   133ce:	2e00      	cmp	r6, #0
   133d0:	d0e9      	beq.n	133a6 <__lesf2+0x36>
   133d2:	e7ed      	b.n	133b0 <__lesf2+0x40>
   133d4:	2d00      	cmp	r5, #0
   133d6:	d1e9      	bne.n	133ac <__lesf2+0x3c>
   133d8:	e7ea      	b.n	133b0 <__lesf2+0x40>
   133da:	42a2      	cmp	r2, r4
   133dc:	dc06      	bgt.n	133ec <__lesf2+0x7c>
   133de:	dbdf      	blt.n	133a0 <__lesf2+0x30>
   133e0:	42ae      	cmp	r6, r5
   133e2:	d803      	bhi.n	133ec <__lesf2+0x7c>
   133e4:	2000      	movs	r0, #0
   133e6:	42ae      	cmp	r6, r5
   133e8:	d3da      	bcc.n	133a0 <__lesf2+0x30>
   133ea:	e7dc      	b.n	133a6 <__lesf2+0x36>
   133ec:	2001      	movs	r0, #1
   133ee:	4249      	negs	r1, r1
   133f0:	4308      	orrs	r0, r1
   133f2:	e7d8      	b.n	133a6 <__lesf2+0x36>

000133f4 <__aeabi_fmul>:
   133f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133f6:	4657      	mov	r7, sl
   133f8:	464e      	mov	r6, r9
   133fa:	4645      	mov	r5, r8
   133fc:	46de      	mov	lr, fp
   133fe:	b5e0      	push	{r5, r6, r7, lr}
   13400:	0247      	lsls	r7, r0, #9
   13402:	0046      	lsls	r6, r0, #1
   13404:	4688      	mov	r8, r1
   13406:	0a7f      	lsrs	r7, r7, #9
   13408:	0e36      	lsrs	r6, r6, #24
   1340a:	0fc4      	lsrs	r4, r0, #31
   1340c:	2e00      	cmp	r6, #0
   1340e:	d047      	beq.n	134a0 <__aeabi_fmul+0xac>
   13410:	2eff      	cmp	r6, #255	; 0xff
   13412:	d024      	beq.n	1345e <__aeabi_fmul+0x6a>
   13414:	00fb      	lsls	r3, r7, #3
   13416:	2780      	movs	r7, #128	; 0x80
   13418:	04ff      	lsls	r7, r7, #19
   1341a:	431f      	orrs	r7, r3
   1341c:	2300      	movs	r3, #0
   1341e:	4699      	mov	r9, r3
   13420:	469a      	mov	sl, r3
   13422:	3e7f      	subs	r6, #127	; 0x7f
   13424:	4643      	mov	r3, r8
   13426:	025d      	lsls	r5, r3, #9
   13428:	0058      	lsls	r0, r3, #1
   1342a:	0fdb      	lsrs	r3, r3, #31
   1342c:	0a6d      	lsrs	r5, r5, #9
   1342e:	0e00      	lsrs	r0, r0, #24
   13430:	4698      	mov	r8, r3
   13432:	d043      	beq.n	134bc <__aeabi_fmul+0xc8>
   13434:	28ff      	cmp	r0, #255	; 0xff
   13436:	d03b      	beq.n	134b0 <__aeabi_fmul+0xbc>
   13438:	00eb      	lsls	r3, r5, #3
   1343a:	2580      	movs	r5, #128	; 0x80
   1343c:	2200      	movs	r2, #0
   1343e:	04ed      	lsls	r5, r5, #19
   13440:	431d      	orrs	r5, r3
   13442:	387f      	subs	r0, #127	; 0x7f
   13444:	1836      	adds	r6, r6, r0
   13446:	1c73      	adds	r3, r6, #1
   13448:	4641      	mov	r1, r8
   1344a:	469b      	mov	fp, r3
   1344c:	464b      	mov	r3, r9
   1344e:	4061      	eors	r1, r4
   13450:	4313      	orrs	r3, r2
   13452:	2b0f      	cmp	r3, #15
   13454:	d864      	bhi.n	13520 <__aeabi_fmul+0x12c>
   13456:	4875      	ldr	r0, [pc, #468]	; (1362c <__aeabi_fmul+0x238>)
   13458:	009b      	lsls	r3, r3, #2
   1345a:	58c3      	ldr	r3, [r0, r3]
   1345c:	469f      	mov	pc, r3
   1345e:	2f00      	cmp	r7, #0
   13460:	d142      	bne.n	134e8 <__aeabi_fmul+0xf4>
   13462:	2308      	movs	r3, #8
   13464:	4699      	mov	r9, r3
   13466:	3b06      	subs	r3, #6
   13468:	26ff      	movs	r6, #255	; 0xff
   1346a:	469a      	mov	sl, r3
   1346c:	e7da      	b.n	13424 <__aeabi_fmul+0x30>
   1346e:	4641      	mov	r1, r8
   13470:	2a02      	cmp	r2, #2
   13472:	d028      	beq.n	134c6 <__aeabi_fmul+0xd2>
   13474:	2a03      	cmp	r2, #3
   13476:	d100      	bne.n	1347a <__aeabi_fmul+0x86>
   13478:	e0ce      	b.n	13618 <__aeabi_fmul+0x224>
   1347a:	2a01      	cmp	r2, #1
   1347c:	d000      	beq.n	13480 <__aeabi_fmul+0x8c>
   1347e:	e0ac      	b.n	135da <__aeabi_fmul+0x1e6>
   13480:	4011      	ands	r1, r2
   13482:	2000      	movs	r0, #0
   13484:	2200      	movs	r2, #0
   13486:	b2cc      	uxtb	r4, r1
   13488:	0240      	lsls	r0, r0, #9
   1348a:	05d2      	lsls	r2, r2, #23
   1348c:	0a40      	lsrs	r0, r0, #9
   1348e:	07e4      	lsls	r4, r4, #31
   13490:	4310      	orrs	r0, r2
   13492:	4320      	orrs	r0, r4
   13494:	bc3c      	pop	{r2, r3, r4, r5}
   13496:	4690      	mov	r8, r2
   13498:	4699      	mov	r9, r3
   1349a:	46a2      	mov	sl, r4
   1349c:	46ab      	mov	fp, r5
   1349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134a0:	2f00      	cmp	r7, #0
   134a2:	d115      	bne.n	134d0 <__aeabi_fmul+0xdc>
   134a4:	2304      	movs	r3, #4
   134a6:	4699      	mov	r9, r3
   134a8:	3b03      	subs	r3, #3
   134aa:	2600      	movs	r6, #0
   134ac:	469a      	mov	sl, r3
   134ae:	e7b9      	b.n	13424 <__aeabi_fmul+0x30>
   134b0:	20ff      	movs	r0, #255	; 0xff
   134b2:	2202      	movs	r2, #2
   134b4:	2d00      	cmp	r5, #0
   134b6:	d0c5      	beq.n	13444 <__aeabi_fmul+0x50>
   134b8:	2203      	movs	r2, #3
   134ba:	e7c3      	b.n	13444 <__aeabi_fmul+0x50>
   134bc:	2d00      	cmp	r5, #0
   134be:	d119      	bne.n	134f4 <__aeabi_fmul+0x100>
   134c0:	2000      	movs	r0, #0
   134c2:	2201      	movs	r2, #1
   134c4:	e7be      	b.n	13444 <__aeabi_fmul+0x50>
   134c6:	2401      	movs	r4, #1
   134c8:	22ff      	movs	r2, #255	; 0xff
   134ca:	400c      	ands	r4, r1
   134cc:	2000      	movs	r0, #0
   134ce:	e7db      	b.n	13488 <__aeabi_fmul+0x94>
   134d0:	0038      	movs	r0, r7
   134d2:	f002 f823 	bl	1551c <__clzsi2>
   134d6:	2676      	movs	r6, #118	; 0x76
   134d8:	1f43      	subs	r3, r0, #5
   134da:	409f      	lsls	r7, r3
   134dc:	2300      	movs	r3, #0
   134de:	4276      	negs	r6, r6
   134e0:	1a36      	subs	r6, r6, r0
   134e2:	4699      	mov	r9, r3
   134e4:	469a      	mov	sl, r3
   134e6:	e79d      	b.n	13424 <__aeabi_fmul+0x30>
   134e8:	230c      	movs	r3, #12
   134ea:	4699      	mov	r9, r3
   134ec:	3b09      	subs	r3, #9
   134ee:	26ff      	movs	r6, #255	; 0xff
   134f0:	469a      	mov	sl, r3
   134f2:	e797      	b.n	13424 <__aeabi_fmul+0x30>
   134f4:	0028      	movs	r0, r5
   134f6:	f002 f811 	bl	1551c <__clzsi2>
   134fa:	1f43      	subs	r3, r0, #5
   134fc:	409d      	lsls	r5, r3
   134fe:	2376      	movs	r3, #118	; 0x76
   13500:	425b      	negs	r3, r3
   13502:	1a18      	subs	r0, r3, r0
   13504:	2200      	movs	r2, #0
   13506:	e79d      	b.n	13444 <__aeabi_fmul+0x50>
   13508:	2080      	movs	r0, #128	; 0x80
   1350a:	2400      	movs	r4, #0
   1350c:	03c0      	lsls	r0, r0, #15
   1350e:	22ff      	movs	r2, #255	; 0xff
   13510:	e7ba      	b.n	13488 <__aeabi_fmul+0x94>
   13512:	003d      	movs	r5, r7
   13514:	4652      	mov	r2, sl
   13516:	e7ab      	b.n	13470 <__aeabi_fmul+0x7c>
   13518:	003d      	movs	r5, r7
   1351a:	0021      	movs	r1, r4
   1351c:	4652      	mov	r2, sl
   1351e:	e7a7      	b.n	13470 <__aeabi_fmul+0x7c>
   13520:	0c3b      	lsrs	r3, r7, #16
   13522:	469c      	mov	ip, r3
   13524:	042a      	lsls	r2, r5, #16
   13526:	0c12      	lsrs	r2, r2, #16
   13528:	0c2b      	lsrs	r3, r5, #16
   1352a:	0014      	movs	r4, r2
   1352c:	4660      	mov	r0, ip
   1352e:	4665      	mov	r5, ip
   13530:	043f      	lsls	r7, r7, #16
   13532:	0c3f      	lsrs	r7, r7, #16
   13534:	437c      	muls	r4, r7
   13536:	4342      	muls	r2, r0
   13538:	435d      	muls	r5, r3
   1353a:	437b      	muls	r3, r7
   1353c:	0c27      	lsrs	r7, r4, #16
   1353e:	189b      	adds	r3, r3, r2
   13540:	18ff      	adds	r7, r7, r3
   13542:	42ba      	cmp	r2, r7
   13544:	d903      	bls.n	1354e <__aeabi_fmul+0x15a>
   13546:	2380      	movs	r3, #128	; 0x80
   13548:	025b      	lsls	r3, r3, #9
   1354a:	469c      	mov	ip, r3
   1354c:	4465      	add	r5, ip
   1354e:	0424      	lsls	r4, r4, #16
   13550:	043a      	lsls	r2, r7, #16
   13552:	0c24      	lsrs	r4, r4, #16
   13554:	1912      	adds	r2, r2, r4
   13556:	0193      	lsls	r3, r2, #6
   13558:	1e5c      	subs	r4, r3, #1
   1355a:	41a3      	sbcs	r3, r4
   1355c:	0c3f      	lsrs	r7, r7, #16
   1355e:	0e92      	lsrs	r2, r2, #26
   13560:	197d      	adds	r5, r7, r5
   13562:	431a      	orrs	r2, r3
   13564:	01ad      	lsls	r5, r5, #6
   13566:	4315      	orrs	r5, r2
   13568:	012b      	lsls	r3, r5, #4
   1356a:	d504      	bpl.n	13576 <__aeabi_fmul+0x182>
   1356c:	2301      	movs	r3, #1
   1356e:	465e      	mov	r6, fp
   13570:	086a      	lsrs	r2, r5, #1
   13572:	401d      	ands	r5, r3
   13574:	4315      	orrs	r5, r2
   13576:	0032      	movs	r2, r6
   13578:	327f      	adds	r2, #127	; 0x7f
   1357a:	2a00      	cmp	r2, #0
   1357c:	dd25      	ble.n	135ca <__aeabi_fmul+0x1d6>
   1357e:	076b      	lsls	r3, r5, #29
   13580:	d004      	beq.n	1358c <__aeabi_fmul+0x198>
   13582:	230f      	movs	r3, #15
   13584:	402b      	ands	r3, r5
   13586:	2b04      	cmp	r3, #4
   13588:	d000      	beq.n	1358c <__aeabi_fmul+0x198>
   1358a:	3504      	adds	r5, #4
   1358c:	012b      	lsls	r3, r5, #4
   1358e:	d503      	bpl.n	13598 <__aeabi_fmul+0x1a4>
   13590:	0032      	movs	r2, r6
   13592:	4b27      	ldr	r3, [pc, #156]	; (13630 <__aeabi_fmul+0x23c>)
   13594:	3280      	adds	r2, #128	; 0x80
   13596:	401d      	ands	r5, r3
   13598:	2afe      	cmp	r2, #254	; 0xfe
   1359a:	dc94      	bgt.n	134c6 <__aeabi_fmul+0xd2>
   1359c:	2401      	movs	r4, #1
   1359e:	01a8      	lsls	r0, r5, #6
   135a0:	0a40      	lsrs	r0, r0, #9
   135a2:	b2d2      	uxtb	r2, r2
   135a4:	400c      	ands	r4, r1
   135a6:	e76f      	b.n	13488 <__aeabi_fmul+0x94>
   135a8:	2080      	movs	r0, #128	; 0x80
   135aa:	03c0      	lsls	r0, r0, #15
   135ac:	4207      	tst	r7, r0
   135ae:	d007      	beq.n	135c0 <__aeabi_fmul+0x1cc>
   135b0:	4205      	tst	r5, r0
   135b2:	d105      	bne.n	135c0 <__aeabi_fmul+0x1cc>
   135b4:	4328      	orrs	r0, r5
   135b6:	0240      	lsls	r0, r0, #9
   135b8:	0a40      	lsrs	r0, r0, #9
   135ba:	4644      	mov	r4, r8
   135bc:	22ff      	movs	r2, #255	; 0xff
   135be:	e763      	b.n	13488 <__aeabi_fmul+0x94>
   135c0:	4338      	orrs	r0, r7
   135c2:	0240      	lsls	r0, r0, #9
   135c4:	0a40      	lsrs	r0, r0, #9
   135c6:	22ff      	movs	r2, #255	; 0xff
   135c8:	e75e      	b.n	13488 <__aeabi_fmul+0x94>
   135ca:	2401      	movs	r4, #1
   135cc:	1aa3      	subs	r3, r4, r2
   135ce:	2b1b      	cmp	r3, #27
   135d0:	dd05      	ble.n	135de <__aeabi_fmul+0x1ea>
   135d2:	400c      	ands	r4, r1
   135d4:	2200      	movs	r2, #0
   135d6:	2000      	movs	r0, #0
   135d8:	e756      	b.n	13488 <__aeabi_fmul+0x94>
   135da:	465e      	mov	r6, fp
   135dc:	e7cb      	b.n	13576 <__aeabi_fmul+0x182>
   135de:	002a      	movs	r2, r5
   135e0:	2020      	movs	r0, #32
   135e2:	40da      	lsrs	r2, r3
   135e4:	1ac3      	subs	r3, r0, r3
   135e6:	409d      	lsls	r5, r3
   135e8:	002b      	movs	r3, r5
   135ea:	1e5d      	subs	r5, r3, #1
   135ec:	41ab      	sbcs	r3, r5
   135ee:	4313      	orrs	r3, r2
   135f0:	075a      	lsls	r2, r3, #29
   135f2:	d004      	beq.n	135fe <__aeabi_fmul+0x20a>
   135f4:	220f      	movs	r2, #15
   135f6:	401a      	ands	r2, r3
   135f8:	2a04      	cmp	r2, #4
   135fa:	d000      	beq.n	135fe <__aeabi_fmul+0x20a>
   135fc:	3304      	adds	r3, #4
   135fe:	015a      	lsls	r2, r3, #5
   13600:	d504      	bpl.n	1360c <__aeabi_fmul+0x218>
   13602:	2401      	movs	r4, #1
   13604:	2201      	movs	r2, #1
   13606:	400c      	ands	r4, r1
   13608:	2000      	movs	r0, #0
   1360a:	e73d      	b.n	13488 <__aeabi_fmul+0x94>
   1360c:	2401      	movs	r4, #1
   1360e:	019b      	lsls	r3, r3, #6
   13610:	0a58      	lsrs	r0, r3, #9
   13612:	400c      	ands	r4, r1
   13614:	2200      	movs	r2, #0
   13616:	e737      	b.n	13488 <__aeabi_fmul+0x94>
   13618:	2080      	movs	r0, #128	; 0x80
   1361a:	2401      	movs	r4, #1
   1361c:	03c0      	lsls	r0, r0, #15
   1361e:	4328      	orrs	r0, r5
   13620:	0240      	lsls	r0, r0, #9
   13622:	0a40      	lsrs	r0, r0, #9
   13624:	400c      	ands	r4, r1
   13626:	22ff      	movs	r2, #255	; 0xff
   13628:	e72e      	b.n	13488 <__aeabi_fmul+0x94>
   1362a:	46c0      	nop			; (mov r8, r8)
   1362c:	0001de78 	.word	0x0001de78
   13630:	f7ffffff 	.word	0xf7ffffff

00013634 <__aeabi_fsub>:
   13634:	b5f0      	push	{r4, r5, r6, r7, lr}
   13636:	464f      	mov	r7, r9
   13638:	46d6      	mov	lr, sl
   1363a:	4646      	mov	r6, r8
   1363c:	0044      	lsls	r4, r0, #1
   1363e:	b5c0      	push	{r6, r7, lr}
   13640:	0fc2      	lsrs	r2, r0, #31
   13642:	0247      	lsls	r7, r0, #9
   13644:	0248      	lsls	r0, r1, #9
   13646:	0a40      	lsrs	r0, r0, #9
   13648:	4684      	mov	ip, r0
   1364a:	4666      	mov	r6, ip
   1364c:	0a7b      	lsrs	r3, r7, #9
   1364e:	0048      	lsls	r0, r1, #1
   13650:	0fc9      	lsrs	r1, r1, #31
   13652:	469a      	mov	sl, r3
   13654:	0e24      	lsrs	r4, r4, #24
   13656:	0015      	movs	r5, r2
   13658:	00db      	lsls	r3, r3, #3
   1365a:	0e00      	lsrs	r0, r0, #24
   1365c:	4689      	mov	r9, r1
   1365e:	00f6      	lsls	r6, r6, #3
   13660:	28ff      	cmp	r0, #255	; 0xff
   13662:	d100      	bne.n	13666 <__aeabi_fsub+0x32>
   13664:	e08f      	b.n	13786 <__aeabi_fsub+0x152>
   13666:	2101      	movs	r1, #1
   13668:	464f      	mov	r7, r9
   1366a:	404f      	eors	r7, r1
   1366c:	0039      	movs	r1, r7
   1366e:	4291      	cmp	r1, r2
   13670:	d066      	beq.n	13740 <__aeabi_fsub+0x10c>
   13672:	1a22      	subs	r2, r4, r0
   13674:	2a00      	cmp	r2, #0
   13676:	dc00      	bgt.n	1367a <__aeabi_fsub+0x46>
   13678:	e09d      	b.n	137b6 <__aeabi_fsub+0x182>
   1367a:	2800      	cmp	r0, #0
   1367c:	d13d      	bne.n	136fa <__aeabi_fsub+0xc6>
   1367e:	2e00      	cmp	r6, #0
   13680:	d100      	bne.n	13684 <__aeabi_fsub+0x50>
   13682:	e08b      	b.n	1379c <__aeabi_fsub+0x168>
   13684:	1e51      	subs	r1, r2, #1
   13686:	2900      	cmp	r1, #0
   13688:	d000      	beq.n	1368c <__aeabi_fsub+0x58>
   1368a:	e0b5      	b.n	137f8 <__aeabi_fsub+0x1c4>
   1368c:	2401      	movs	r4, #1
   1368e:	1b9b      	subs	r3, r3, r6
   13690:	015a      	lsls	r2, r3, #5
   13692:	d544      	bpl.n	1371e <__aeabi_fsub+0xea>
   13694:	019b      	lsls	r3, r3, #6
   13696:	099f      	lsrs	r7, r3, #6
   13698:	0038      	movs	r0, r7
   1369a:	f001 ff3f 	bl	1551c <__clzsi2>
   1369e:	3805      	subs	r0, #5
   136a0:	4087      	lsls	r7, r0
   136a2:	4284      	cmp	r4, r0
   136a4:	dd00      	ble.n	136a8 <__aeabi_fsub+0x74>
   136a6:	e096      	b.n	137d6 <__aeabi_fsub+0x1a2>
   136a8:	1b04      	subs	r4, r0, r4
   136aa:	003a      	movs	r2, r7
   136ac:	2020      	movs	r0, #32
   136ae:	3401      	adds	r4, #1
   136b0:	40e2      	lsrs	r2, r4
   136b2:	1b04      	subs	r4, r0, r4
   136b4:	40a7      	lsls	r7, r4
   136b6:	003b      	movs	r3, r7
   136b8:	1e5f      	subs	r7, r3, #1
   136ba:	41bb      	sbcs	r3, r7
   136bc:	2400      	movs	r4, #0
   136be:	4313      	orrs	r3, r2
   136c0:	075a      	lsls	r2, r3, #29
   136c2:	d004      	beq.n	136ce <__aeabi_fsub+0x9a>
   136c4:	220f      	movs	r2, #15
   136c6:	401a      	ands	r2, r3
   136c8:	2a04      	cmp	r2, #4
   136ca:	d000      	beq.n	136ce <__aeabi_fsub+0x9a>
   136cc:	3304      	adds	r3, #4
   136ce:	015a      	lsls	r2, r3, #5
   136d0:	d527      	bpl.n	13722 <__aeabi_fsub+0xee>
   136d2:	3401      	adds	r4, #1
   136d4:	2cff      	cmp	r4, #255	; 0xff
   136d6:	d100      	bne.n	136da <__aeabi_fsub+0xa6>
   136d8:	e079      	b.n	137ce <__aeabi_fsub+0x19a>
   136da:	2201      	movs	r2, #1
   136dc:	019b      	lsls	r3, r3, #6
   136de:	0a5b      	lsrs	r3, r3, #9
   136e0:	b2e4      	uxtb	r4, r4
   136e2:	402a      	ands	r2, r5
   136e4:	025b      	lsls	r3, r3, #9
   136e6:	05e4      	lsls	r4, r4, #23
   136e8:	0a58      	lsrs	r0, r3, #9
   136ea:	07d2      	lsls	r2, r2, #31
   136ec:	4320      	orrs	r0, r4
   136ee:	4310      	orrs	r0, r2
   136f0:	bc1c      	pop	{r2, r3, r4}
   136f2:	4690      	mov	r8, r2
   136f4:	4699      	mov	r9, r3
   136f6:	46a2      	mov	sl, r4
   136f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   136fa:	2cff      	cmp	r4, #255	; 0xff
   136fc:	d0e0      	beq.n	136c0 <__aeabi_fsub+0x8c>
   136fe:	2180      	movs	r1, #128	; 0x80
   13700:	04c9      	lsls	r1, r1, #19
   13702:	430e      	orrs	r6, r1
   13704:	2a1b      	cmp	r2, #27
   13706:	dc7b      	bgt.n	13800 <__aeabi_fsub+0x1cc>
   13708:	0031      	movs	r1, r6
   1370a:	2020      	movs	r0, #32
   1370c:	40d1      	lsrs	r1, r2
   1370e:	1a82      	subs	r2, r0, r2
   13710:	4096      	lsls	r6, r2
   13712:	1e72      	subs	r2, r6, #1
   13714:	4196      	sbcs	r6, r2
   13716:	430e      	orrs	r6, r1
   13718:	1b9b      	subs	r3, r3, r6
   1371a:	015a      	lsls	r2, r3, #5
   1371c:	d4ba      	bmi.n	13694 <__aeabi_fsub+0x60>
   1371e:	075a      	lsls	r2, r3, #29
   13720:	d1d0      	bne.n	136c4 <__aeabi_fsub+0x90>
   13722:	2201      	movs	r2, #1
   13724:	08df      	lsrs	r7, r3, #3
   13726:	402a      	ands	r2, r5
   13728:	2cff      	cmp	r4, #255	; 0xff
   1372a:	d133      	bne.n	13794 <__aeabi_fsub+0x160>
   1372c:	2f00      	cmp	r7, #0
   1372e:	d100      	bne.n	13732 <__aeabi_fsub+0xfe>
   13730:	e0a8      	b.n	13884 <__aeabi_fsub+0x250>
   13732:	2380      	movs	r3, #128	; 0x80
   13734:	03db      	lsls	r3, r3, #15
   13736:	433b      	orrs	r3, r7
   13738:	025b      	lsls	r3, r3, #9
   1373a:	0a5b      	lsrs	r3, r3, #9
   1373c:	24ff      	movs	r4, #255	; 0xff
   1373e:	e7d1      	b.n	136e4 <__aeabi_fsub+0xb0>
   13740:	1a21      	subs	r1, r4, r0
   13742:	2900      	cmp	r1, #0
   13744:	dd4c      	ble.n	137e0 <__aeabi_fsub+0x1ac>
   13746:	2800      	cmp	r0, #0
   13748:	d02a      	beq.n	137a0 <__aeabi_fsub+0x16c>
   1374a:	2cff      	cmp	r4, #255	; 0xff
   1374c:	d0b8      	beq.n	136c0 <__aeabi_fsub+0x8c>
   1374e:	2080      	movs	r0, #128	; 0x80
   13750:	04c0      	lsls	r0, r0, #19
   13752:	4306      	orrs	r6, r0
   13754:	291b      	cmp	r1, #27
   13756:	dd00      	ble.n	1375a <__aeabi_fsub+0x126>
   13758:	e0af      	b.n	138ba <__aeabi_fsub+0x286>
   1375a:	0030      	movs	r0, r6
   1375c:	2720      	movs	r7, #32
   1375e:	40c8      	lsrs	r0, r1
   13760:	1a79      	subs	r1, r7, r1
   13762:	408e      	lsls	r6, r1
   13764:	1e71      	subs	r1, r6, #1
   13766:	418e      	sbcs	r6, r1
   13768:	4306      	orrs	r6, r0
   1376a:	199b      	adds	r3, r3, r6
   1376c:	0159      	lsls	r1, r3, #5
   1376e:	d5d6      	bpl.n	1371e <__aeabi_fsub+0xea>
   13770:	3401      	adds	r4, #1
   13772:	2cff      	cmp	r4, #255	; 0xff
   13774:	d100      	bne.n	13778 <__aeabi_fsub+0x144>
   13776:	e085      	b.n	13884 <__aeabi_fsub+0x250>
   13778:	2201      	movs	r2, #1
   1377a:	497a      	ldr	r1, [pc, #488]	; (13964 <__aeabi_fsub+0x330>)
   1377c:	401a      	ands	r2, r3
   1377e:	085b      	lsrs	r3, r3, #1
   13780:	400b      	ands	r3, r1
   13782:	4313      	orrs	r3, r2
   13784:	e79c      	b.n	136c0 <__aeabi_fsub+0x8c>
   13786:	2e00      	cmp	r6, #0
   13788:	d000      	beq.n	1378c <__aeabi_fsub+0x158>
   1378a:	e770      	b.n	1366e <__aeabi_fsub+0x3a>
   1378c:	e76b      	b.n	13666 <__aeabi_fsub+0x32>
   1378e:	1e3b      	subs	r3, r7, #0
   13790:	d1c5      	bne.n	1371e <__aeabi_fsub+0xea>
   13792:	2200      	movs	r2, #0
   13794:	027b      	lsls	r3, r7, #9
   13796:	0a5b      	lsrs	r3, r3, #9
   13798:	b2e4      	uxtb	r4, r4
   1379a:	e7a3      	b.n	136e4 <__aeabi_fsub+0xb0>
   1379c:	0014      	movs	r4, r2
   1379e:	e78f      	b.n	136c0 <__aeabi_fsub+0x8c>
   137a0:	2e00      	cmp	r6, #0
   137a2:	d04d      	beq.n	13840 <__aeabi_fsub+0x20c>
   137a4:	1e48      	subs	r0, r1, #1
   137a6:	2800      	cmp	r0, #0
   137a8:	d157      	bne.n	1385a <__aeabi_fsub+0x226>
   137aa:	199b      	adds	r3, r3, r6
   137ac:	2401      	movs	r4, #1
   137ae:	015a      	lsls	r2, r3, #5
   137b0:	d5b5      	bpl.n	1371e <__aeabi_fsub+0xea>
   137b2:	2402      	movs	r4, #2
   137b4:	e7e0      	b.n	13778 <__aeabi_fsub+0x144>
   137b6:	2a00      	cmp	r2, #0
   137b8:	d125      	bne.n	13806 <__aeabi_fsub+0x1d2>
   137ba:	1c62      	adds	r2, r4, #1
   137bc:	b2d2      	uxtb	r2, r2
   137be:	2a01      	cmp	r2, #1
   137c0:	dd72      	ble.n	138a8 <__aeabi_fsub+0x274>
   137c2:	1b9f      	subs	r7, r3, r6
   137c4:	017a      	lsls	r2, r7, #5
   137c6:	d535      	bpl.n	13834 <__aeabi_fsub+0x200>
   137c8:	1af7      	subs	r7, r6, r3
   137ca:	000d      	movs	r5, r1
   137cc:	e764      	b.n	13698 <__aeabi_fsub+0x64>
   137ce:	2201      	movs	r2, #1
   137d0:	2300      	movs	r3, #0
   137d2:	402a      	ands	r2, r5
   137d4:	e786      	b.n	136e4 <__aeabi_fsub+0xb0>
   137d6:	003b      	movs	r3, r7
   137d8:	4a63      	ldr	r2, [pc, #396]	; (13968 <__aeabi_fsub+0x334>)
   137da:	1a24      	subs	r4, r4, r0
   137dc:	4013      	ands	r3, r2
   137de:	e76f      	b.n	136c0 <__aeabi_fsub+0x8c>
   137e0:	2900      	cmp	r1, #0
   137e2:	d16c      	bne.n	138be <__aeabi_fsub+0x28a>
   137e4:	1c61      	adds	r1, r4, #1
   137e6:	b2c8      	uxtb	r0, r1
   137e8:	2801      	cmp	r0, #1
   137ea:	dd4e      	ble.n	1388a <__aeabi_fsub+0x256>
   137ec:	29ff      	cmp	r1, #255	; 0xff
   137ee:	d049      	beq.n	13884 <__aeabi_fsub+0x250>
   137f0:	199b      	adds	r3, r3, r6
   137f2:	085b      	lsrs	r3, r3, #1
   137f4:	000c      	movs	r4, r1
   137f6:	e763      	b.n	136c0 <__aeabi_fsub+0x8c>
   137f8:	2aff      	cmp	r2, #255	; 0xff
   137fa:	d041      	beq.n	13880 <__aeabi_fsub+0x24c>
   137fc:	000a      	movs	r2, r1
   137fe:	e781      	b.n	13704 <__aeabi_fsub+0xd0>
   13800:	2601      	movs	r6, #1
   13802:	1b9b      	subs	r3, r3, r6
   13804:	e789      	b.n	1371a <__aeabi_fsub+0xe6>
   13806:	2c00      	cmp	r4, #0
   13808:	d01c      	beq.n	13844 <__aeabi_fsub+0x210>
   1380a:	28ff      	cmp	r0, #255	; 0xff
   1380c:	d021      	beq.n	13852 <__aeabi_fsub+0x21e>
   1380e:	2480      	movs	r4, #128	; 0x80
   13810:	04e4      	lsls	r4, r4, #19
   13812:	4252      	negs	r2, r2
   13814:	4323      	orrs	r3, r4
   13816:	2a1b      	cmp	r2, #27
   13818:	dd00      	ble.n	1381c <__aeabi_fsub+0x1e8>
   1381a:	e096      	b.n	1394a <__aeabi_fsub+0x316>
   1381c:	001c      	movs	r4, r3
   1381e:	2520      	movs	r5, #32
   13820:	40d4      	lsrs	r4, r2
   13822:	1aaa      	subs	r2, r5, r2
   13824:	4093      	lsls	r3, r2
   13826:	1e5a      	subs	r2, r3, #1
   13828:	4193      	sbcs	r3, r2
   1382a:	4323      	orrs	r3, r4
   1382c:	1af3      	subs	r3, r6, r3
   1382e:	0004      	movs	r4, r0
   13830:	000d      	movs	r5, r1
   13832:	e72d      	b.n	13690 <__aeabi_fsub+0x5c>
   13834:	2f00      	cmp	r7, #0
   13836:	d000      	beq.n	1383a <__aeabi_fsub+0x206>
   13838:	e72e      	b.n	13698 <__aeabi_fsub+0x64>
   1383a:	2200      	movs	r2, #0
   1383c:	2400      	movs	r4, #0
   1383e:	e7a9      	b.n	13794 <__aeabi_fsub+0x160>
   13840:	000c      	movs	r4, r1
   13842:	e73d      	b.n	136c0 <__aeabi_fsub+0x8c>
   13844:	2b00      	cmp	r3, #0
   13846:	d058      	beq.n	138fa <__aeabi_fsub+0x2c6>
   13848:	43d2      	mvns	r2, r2
   1384a:	2a00      	cmp	r2, #0
   1384c:	d0ee      	beq.n	1382c <__aeabi_fsub+0x1f8>
   1384e:	28ff      	cmp	r0, #255	; 0xff
   13850:	d1e1      	bne.n	13816 <__aeabi_fsub+0x1e2>
   13852:	0033      	movs	r3, r6
   13854:	24ff      	movs	r4, #255	; 0xff
   13856:	000d      	movs	r5, r1
   13858:	e732      	b.n	136c0 <__aeabi_fsub+0x8c>
   1385a:	29ff      	cmp	r1, #255	; 0xff
   1385c:	d010      	beq.n	13880 <__aeabi_fsub+0x24c>
   1385e:	0001      	movs	r1, r0
   13860:	e778      	b.n	13754 <__aeabi_fsub+0x120>
   13862:	2b00      	cmp	r3, #0
   13864:	d06e      	beq.n	13944 <__aeabi_fsub+0x310>
   13866:	24ff      	movs	r4, #255	; 0xff
   13868:	2e00      	cmp	r6, #0
   1386a:	d100      	bne.n	1386e <__aeabi_fsub+0x23a>
   1386c:	e728      	b.n	136c0 <__aeabi_fsub+0x8c>
   1386e:	2280      	movs	r2, #128	; 0x80
   13870:	4651      	mov	r1, sl
   13872:	03d2      	lsls	r2, r2, #15
   13874:	4211      	tst	r1, r2
   13876:	d003      	beq.n	13880 <__aeabi_fsub+0x24c>
   13878:	4661      	mov	r1, ip
   1387a:	4211      	tst	r1, r2
   1387c:	d100      	bne.n	13880 <__aeabi_fsub+0x24c>
   1387e:	0033      	movs	r3, r6
   13880:	24ff      	movs	r4, #255	; 0xff
   13882:	e71d      	b.n	136c0 <__aeabi_fsub+0x8c>
   13884:	24ff      	movs	r4, #255	; 0xff
   13886:	2300      	movs	r3, #0
   13888:	e72c      	b.n	136e4 <__aeabi_fsub+0xb0>
   1388a:	2c00      	cmp	r4, #0
   1388c:	d1e9      	bne.n	13862 <__aeabi_fsub+0x22e>
   1388e:	2b00      	cmp	r3, #0
   13890:	d063      	beq.n	1395a <__aeabi_fsub+0x326>
   13892:	2e00      	cmp	r6, #0
   13894:	d100      	bne.n	13898 <__aeabi_fsub+0x264>
   13896:	e713      	b.n	136c0 <__aeabi_fsub+0x8c>
   13898:	199b      	adds	r3, r3, r6
   1389a:	015a      	lsls	r2, r3, #5
   1389c:	d400      	bmi.n	138a0 <__aeabi_fsub+0x26c>
   1389e:	e73e      	b.n	1371e <__aeabi_fsub+0xea>
   138a0:	4a31      	ldr	r2, [pc, #196]	; (13968 <__aeabi_fsub+0x334>)
   138a2:	000c      	movs	r4, r1
   138a4:	4013      	ands	r3, r2
   138a6:	e70b      	b.n	136c0 <__aeabi_fsub+0x8c>
   138a8:	2c00      	cmp	r4, #0
   138aa:	d11e      	bne.n	138ea <__aeabi_fsub+0x2b6>
   138ac:	2b00      	cmp	r3, #0
   138ae:	d12f      	bne.n	13910 <__aeabi_fsub+0x2dc>
   138b0:	2e00      	cmp	r6, #0
   138b2:	d04f      	beq.n	13954 <__aeabi_fsub+0x320>
   138b4:	0033      	movs	r3, r6
   138b6:	000d      	movs	r5, r1
   138b8:	e702      	b.n	136c0 <__aeabi_fsub+0x8c>
   138ba:	2601      	movs	r6, #1
   138bc:	e755      	b.n	1376a <__aeabi_fsub+0x136>
   138be:	2c00      	cmp	r4, #0
   138c0:	d11f      	bne.n	13902 <__aeabi_fsub+0x2ce>
   138c2:	2b00      	cmp	r3, #0
   138c4:	d043      	beq.n	1394e <__aeabi_fsub+0x31a>
   138c6:	43c9      	mvns	r1, r1
   138c8:	2900      	cmp	r1, #0
   138ca:	d00b      	beq.n	138e4 <__aeabi_fsub+0x2b0>
   138cc:	28ff      	cmp	r0, #255	; 0xff
   138ce:	d039      	beq.n	13944 <__aeabi_fsub+0x310>
   138d0:	291b      	cmp	r1, #27
   138d2:	dc44      	bgt.n	1395e <__aeabi_fsub+0x32a>
   138d4:	001c      	movs	r4, r3
   138d6:	2720      	movs	r7, #32
   138d8:	40cc      	lsrs	r4, r1
   138da:	1a79      	subs	r1, r7, r1
   138dc:	408b      	lsls	r3, r1
   138de:	1e59      	subs	r1, r3, #1
   138e0:	418b      	sbcs	r3, r1
   138e2:	4323      	orrs	r3, r4
   138e4:	199b      	adds	r3, r3, r6
   138e6:	0004      	movs	r4, r0
   138e8:	e740      	b.n	1376c <__aeabi_fsub+0x138>
   138ea:	2b00      	cmp	r3, #0
   138ec:	d11a      	bne.n	13924 <__aeabi_fsub+0x2f0>
   138ee:	2e00      	cmp	r6, #0
   138f0:	d124      	bne.n	1393c <__aeabi_fsub+0x308>
   138f2:	2780      	movs	r7, #128	; 0x80
   138f4:	2200      	movs	r2, #0
   138f6:	03ff      	lsls	r7, r7, #15
   138f8:	e71b      	b.n	13732 <__aeabi_fsub+0xfe>
   138fa:	0033      	movs	r3, r6
   138fc:	0004      	movs	r4, r0
   138fe:	000d      	movs	r5, r1
   13900:	e6de      	b.n	136c0 <__aeabi_fsub+0x8c>
   13902:	28ff      	cmp	r0, #255	; 0xff
   13904:	d01e      	beq.n	13944 <__aeabi_fsub+0x310>
   13906:	2480      	movs	r4, #128	; 0x80
   13908:	04e4      	lsls	r4, r4, #19
   1390a:	4249      	negs	r1, r1
   1390c:	4323      	orrs	r3, r4
   1390e:	e7df      	b.n	138d0 <__aeabi_fsub+0x29c>
   13910:	2e00      	cmp	r6, #0
   13912:	d100      	bne.n	13916 <__aeabi_fsub+0x2e2>
   13914:	e6d4      	b.n	136c0 <__aeabi_fsub+0x8c>
   13916:	1b9f      	subs	r7, r3, r6
   13918:	017a      	lsls	r2, r7, #5
   1391a:	d400      	bmi.n	1391e <__aeabi_fsub+0x2ea>
   1391c:	e737      	b.n	1378e <__aeabi_fsub+0x15a>
   1391e:	1af3      	subs	r3, r6, r3
   13920:	000d      	movs	r5, r1
   13922:	e6cd      	b.n	136c0 <__aeabi_fsub+0x8c>
   13924:	24ff      	movs	r4, #255	; 0xff
   13926:	2e00      	cmp	r6, #0
   13928:	d100      	bne.n	1392c <__aeabi_fsub+0x2f8>
   1392a:	e6c9      	b.n	136c0 <__aeabi_fsub+0x8c>
   1392c:	2280      	movs	r2, #128	; 0x80
   1392e:	4650      	mov	r0, sl
   13930:	03d2      	lsls	r2, r2, #15
   13932:	4210      	tst	r0, r2
   13934:	d0a4      	beq.n	13880 <__aeabi_fsub+0x24c>
   13936:	4660      	mov	r0, ip
   13938:	4210      	tst	r0, r2
   1393a:	d1a1      	bne.n	13880 <__aeabi_fsub+0x24c>
   1393c:	0033      	movs	r3, r6
   1393e:	000d      	movs	r5, r1
   13940:	24ff      	movs	r4, #255	; 0xff
   13942:	e6bd      	b.n	136c0 <__aeabi_fsub+0x8c>
   13944:	0033      	movs	r3, r6
   13946:	24ff      	movs	r4, #255	; 0xff
   13948:	e6ba      	b.n	136c0 <__aeabi_fsub+0x8c>
   1394a:	2301      	movs	r3, #1
   1394c:	e76e      	b.n	1382c <__aeabi_fsub+0x1f8>
   1394e:	0033      	movs	r3, r6
   13950:	0004      	movs	r4, r0
   13952:	e6b5      	b.n	136c0 <__aeabi_fsub+0x8c>
   13954:	2700      	movs	r7, #0
   13956:	2200      	movs	r2, #0
   13958:	e71c      	b.n	13794 <__aeabi_fsub+0x160>
   1395a:	0033      	movs	r3, r6
   1395c:	e6b0      	b.n	136c0 <__aeabi_fsub+0x8c>
   1395e:	2301      	movs	r3, #1
   13960:	e7c0      	b.n	138e4 <__aeabi_fsub+0x2b0>
   13962:	46c0      	nop			; (mov r8, r8)
   13964:	7dffffff 	.word	0x7dffffff
   13968:	fbffffff 	.word	0xfbffffff

0001396c <__aeabi_f2iz>:
   1396c:	0241      	lsls	r1, r0, #9
   1396e:	0043      	lsls	r3, r0, #1
   13970:	0fc2      	lsrs	r2, r0, #31
   13972:	0a49      	lsrs	r1, r1, #9
   13974:	0e1b      	lsrs	r3, r3, #24
   13976:	2000      	movs	r0, #0
   13978:	2b7e      	cmp	r3, #126	; 0x7e
   1397a:	dd0d      	ble.n	13998 <__aeabi_f2iz+0x2c>
   1397c:	2b9d      	cmp	r3, #157	; 0x9d
   1397e:	dc0c      	bgt.n	1399a <__aeabi_f2iz+0x2e>
   13980:	2080      	movs	r0, #128	; 0x80
   13982:	0400      	lsls	r0, r0, #16
   13984:	4301      	orrs	r1, r0
   13986:	2b95      	cmp	r3, #149	; 0x95
   13988:	dc0a      	bgt.n	139a0 <__aeabi_f2iz+0x34>
   1398a:	2096      	movs	r0, #150	; 0x96
   1398c:	1ac3      	subs	r3, r0, r3
   1398e:	40d9      	lsrs	r1, r3
   13990:	4248      	negs	r0, r1
   13992:	2a00      	cmp	r2, #0
   13994:	d100      	bne.n	13998 <__aeabi_f2iz+0x2c>
   13996:	0008      	movs	r0, r1
   13998:	4770      	bx	lr
   1399a:	4b03      	ldr	r3, [pc, #12]	; (139a8 <__aeabi_f2iz+0x3c>)
   1399c:	18d0      	adds	r0, r2, r3
   1399e:	e7fb      	b.n	13998 <__aeabi_f2iz+0x2c>
   139a0:	3b96      	subs	r3, #150	; 0x96
   139a2:	4099      	lsls	r1, r3
   139a4:	e7f4      	b.n	13990 <__aeabi_f2iz+0x24>
   139a6:	46c0      	nop			; (mov r8, r8)
   139a8:	7fffffff 	.word	0x7fffffff

000139ac <__aeabi_i2f>:
   139ac:	b570      	push	{r4, r5, r6, lr}
   139ae:	2800      	cmp	r0, #0
   139b0:	d030      	beq.n	13a14 <__aeabi_i2f+0x68>
   139b2:	17c3      	asrs	r3, r0, #31
   139b4:	18c4      	adds	r4, r0, r3
   139b6:	405c      	eors	r4, r3
   139b8:	0fc5      	lsrs	r5, r0, #31
   139ba:	0020      	movs	r0, r4
   139bc:	f001 fdae 	bl	1551c <__clzsi2>
   139c0:	239e      	movs	r3, #158	; 0x9e
   139c2:	1a1b      	subs	r3, r3, r0
   139c4:	2b96      	cmp	r3, #150	; 0x96
   139c6:	dc0d      	bgt.n	139e4 <__aeabi_i2f+0x38>
   139c8:	2296      	movs	r2, #150	; 0x96
   139ca:	1ad2      	subs	r2, r2, r3
   139cc:	4094      	lsls	r4, r2
   139ce:	002a      	movs	r2, r5
   139d0:	0264      	lsls	r4, r4, #9
   139d2:	0a64      	lsrs	r4, r4, #9
   139d4:	b2db      	uxtb	r3, r3
   139d6:	0264      	lsls	r4, r4, #9
   139d8:	05db      	lsls	r3, r3, #23
   139da:	0a60      	lsrs	r0, r4, #9
   139dc:	07d2      	lsls	r2, r2, #31
   139de:	4318      	orrs	r0, r3
   139e0:	4310      	orrs	r0, r2
   139e2:	bd70      	pop	{r4, r5, r6, pc}
   139e4:	2b99      	cmp	r3, #153	; 0x99
   139e6:	dc19      	bgt.n	13a1c <__aeabi_i2f+0x70>
   139e8:	2299      	movs	r2, #153	; 0x99
   139ea:	1ad2      	subs	r2, r2, r3
   139ec:	2a00      	cmp	r2, #0
   139ee:	dd29      	ble.n	13a44 <__aeabi_i2f+0x98>
   139f0:	4094      	lsls	r4, r2
   139f2:	0022      	movs	r2, r4
   139f4:	4c14      	ldr	r4, [pc, #80]	; (13a48 <__aeabi_i2f+0x9c>)
   139f6:	4014      	ands	r4, r2
   139f8:	0751      	lsls	r1, r2, #29
   139fa:	d004      	beq.n	13a06 <__aeabi_i2f+0x5a>
   139fc:	210f      	movs	r1, #15
   139fe:	400a      	ands	r2, r1
   13a00:	2a04      	cmp	r2, #4
   13a02:	d000      	beq.n	13a06 <__aeabi_i2f+0x5a>
   13a04:	3404      	adds	r4, #4
   13a06:	0162      	lsls	r2, r4, #5
   13a08:	d413      	bmi.n	13a32 <__aeabi_i2f+0x86>
   13a0a:	01a4      	lsls	r4, r4, #6
   13a0c:	0a64      	lsrs	r4, r4, #9
   13a0e:	b2db      	uxtb	r3, r3
   13a10:	002a      	movs	r2, r5
   13a12:	e7e0      	b.n	139d6 <__aeabi_i2f+0x2a>
   13a14:	2200      	movs	r2, #0
   13a16:	2300      	movs	r3, #0
   13a18:	2400      	movs	r4, #0
   13a1a:	e7dc      	b.n	139d6 <__aeabi_i2f+0x2a>
   13a1c:	2205      	movs	r2, #5
   13a1e:	0021      	movs	r1, r4
   13a20:	1a12      	subs	r2, r2, r0
   13a22:	40d1      	lsrs	r1, r2
   13a24:	22b9      	movs	r2, #185	; 0xb9
   13a26:	1ad2      	subs	r2, r2, r3
   13a28:	4094      	lsls	r4, r2
   13a2a:	1e62      	subs	r2, r4, #1
   13a2c:	4194      	sbcs	r4, r2
   13a2e:	430c      	orrs	r4, r1
   13a30:	e7da      	b.n	139e8 <__aeabi_i2f+0x3c>
   13a32:	4b05      	ldr	r3, [pc, #20]	; (13a48 <__aeabi_i2f+0x9c>)
   13a34:	002a      	movs	r2, r5
   13a36:	401c      	ands	r4, r3
   13a38:	239f      	movs	r3, #159	; 0x9f
   13a3a:	01a4      	lsls	r4, r4, #6
   13a3c:	1a1b      	subs	r3, r3, r0
   13a3e:	0a64      	lsrs	r4, r4, #9
   13a40:	b2db      	uxtb	r3, r3
   13a42:	e7c8      	b.n	139d6 <__aeabi_i2f+0x2a>
   13a44:	0022      	movs	r2, r4
   13a46:	e7d5      	b.n	139f4 <__aeabi_i2f+0x48>
   13a48:	fbffffff 	.word	0xfbffffff

00013a4c <__aeabi_ui2f>:
   13a4c:	b510      	push	{r4, lr}
   13a4e:	1e04      	subs	r4, r0, #0
   13a50:	d027      	beq.n	13aa2 <__aeabi_ui2f+0x56>
   13a52:	f001 fd63 	bl	1551c <__clzsi2>
   13a56:	239e      	movs	r3, #158	; 0x9e
   13a58:	1a1b      	subs	r3, r3, r0
   13a5a:	2b96      	cmp	r3, #150	; 0x96
   13a5c:	dc0a      	bgt.n	13a74 <__aeabi_ui2f+0x28>
   13a5e:	2296      	movs	r2, #150	; 0x96
   13a60:	1ad2      	subs	r2, r2, r3
   13a62:	4094      	lsls	r4, r2
   13a64:	0264      	lsls	r4, r4, #9
   13a66:	0a64      	lsrs	r4, r4, #9
   13a68:	b2db      	uxtb	r3, r3
   13a6a:	0264      	lsls	r4, r4, #9
   13a6c:	05db      	lsls	r3, r3, #23
   13a6e:	0a60      	lsrs	r0, r4, #9
   13a70:	4318      	orrs	r0, r3
   13a72:	bd10      	pop	{r4, pc}
   13a74:	2b99      	cmp	r3, #153	; 0x99
   13a76:	dc17      	bgt.n	13aa8 <__aeabi_ui2f+0x5c>
   13a78:	2299      	movs	r2, #153	; 0x99
   13a7a:	1ad2      	subs	r2, r2, r3
   13a7c:	2a00      	cmp	r2, #0
   13a7e:	dd27      	ble.n	13ad0 <__aeabi_ui2f+0x84>
   13a80:	4094      	lsls	r4, r2
   13a82:	0022      	movs	r2, r4
   13a84:	4c13      	ldr	r4, [pc, #76]	; (13ad4 <__aeabi_ui2f+0x88>)
   13a86:	4014      	ands	r4, r2
   13a88:	0751      	lsls	r1, r2, #29
   13a8a:	d004      	beq.n	13a96 <__aeabi_ui2f+0x4a>
   13a8c:	210f      	movs	r1, #15
   13a8e:	400a      	ands	r2, r1
   13a90:	2a04      	cmp	r2, #4
   13a92:	d000      	beq.n	13a96 <__aeabi_ui2f+0x4a>
   13a94:	3404      	adds	r4, #4
   13a96:	0162      	lsls	r2, r4, #5
   13a98:	d412      	bmi.n	13ac0 <__aeabi_ui2f+0x74>
   13a9a:	01a4      	lsls	r4, r4, #6
   13a9c:	0a64      	lsrs	r4, r4, #9
   13a9e:	b2db      	uxtb	r3, r3
   13aa0:	e7e3      	b.n	13a6a <__aeabi_ui2f+0x1e>
   13aa2:	2300      	movs	r3, #0
   13aa4:	2400      	movs	r4, #0
   13aa6:	e7e0      	b.n	13a6a <__aeabi_ui2f+0x1e>
   13aa8:	22b9      	movs	r2, #185	; 0xb9
   13aaa:	0021      	movs	r1, r4
   13aac:	1ad2      	subs	r2, r2, r3
   13aae:	4091      	lsls	r1, r2
   13ab0:	000a      	movs	r2, r1
   13ab2:	1e51      	subs	r1, r2, #1
   13ab4:	418a      	sbcs	r2, r1
   13ab6:	2105      	movs	r1, #5
   13ab8:	1a09      	subs	r1, r1, r0
   13aba:	40cc      	lsrs	r4, r1
   13abc:	4314      	orrs	r4, r2
   13abe:	e7db      	b.n	13a78 <__aeabi_ui2f+0x2c>
   13ac0:	4b04      	ldr	r3, [pc, #16]	; (13ad4 <__aeabi_ui2f+0x88>)
   13ac2:	401c      	ands	r4, r3
   13ac4:	239f      	movs	r3, #159	; 0x9f
   13ac6:	01a4      	lsls	r4, r4, #6
   13ac8:	1a1b      	subs	r3, r3, r0
   13aca:	0a64      	lsrs	r4, r4, #9
   13acc:	b2db      	uxtb	r3, r3
   13ace:	e7cc      	b.n	13a6a <__aeabi_ui2f+0x1e>
   13ad0:	0022      	movs	r2, r4
   13ad2:	e7d7      	b.n	13a84 <__aeabi_ui2f+0x38>
   13ad4:	fbffffff 	.word	0xfbffffff

00013ad8 <__aeabi_dadd>:
   13ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ada:	4645      	mov	r5, r8
   13adc:	46de      	mov	lr, fp
   13ade:	4657      	mov	r7, sl
   13ae0:	464e      	mov	r6, r9
   13ae2:	030c      	lsls	r4, r1, #12
   13ae4:	b5e0      	push	{r5, r6, r7, lr}
   13ae6:	004e      	lsls	r6, r1, #1
   13ae8:	0fc9      	lsrs	r1, r1, #31
   13aea:	4688      	mov	r8, r1
   13aec:	000d      	movs	r5, r1
   13aee:	0a61      	lsrs	r1, r4, #9
   13af0:	0f44      	lsrs	r4, r0, #29
   13af2:	430c      	orrs	r4, r1
   13af4:	00c7      	lsls	r7, r0, #3
   13af6:	0319      	lsls	r1, r3, #12
   13af8:	0058      	lsls	r0, r3, #1
   13afa:	0fdb      	lsrs	r3, r3, #31
   13afc:	469b      	mov	fp, r3
   13afe:	0a4b      	lsrs	r3, r1, #9
   13b00:	0f51      	lsrs	r1, r2, #29
   13b02:	430b      	orrs	r3, r1
   13b04:	0d76      	lsrs	r6, r6, #21
   13b06:	0d40      	lsrs	r0, r0, #21
   13b08:	0019      	movs	r1, r3
   13b0a:	00d2      	lsls	r2, r2, #3
   13b0c:	45d8      	cmp	r8, fp
   13b0e:	d100      	bne.n	13b12 <__aeabi_dadd+0x3a>
   13b10:	e0ae      	b.n	13c70 <__aeabi_dadd+0x198>
   13b12:	1a35      	subs	r5, r6, r0
   13b14:	2d00      	cmp	r5, #0
   13b16:	dc00      	bgt.n	13b1a <__aeabi_dadd+0x42>
   13b18:	e0f6      	b.n	13d08 <__aeabi_dadd+0x230>
   13b1a:	2800      	cmp	r0, #0
   13b1c:	d10f      	bne.n	13b3e <__aeabi_dadd+0x66>
   13b1e:	4313      	orrs	r3, r2
   13b20:	d100      	bne.n	13b24 <__aeabi_dadd+0x4c>
   13b22:	e0db      	b.n	13cdc <__aeabi_dadd+0x204>
   13b24:	1e6b      	subs	r3, r5, #1
   13b26:	2b00      	cmp	r3, #0
   13b28:	d000      	beq.n	13b2c <__aeabi_dadd+0x54>
   13b2a:	e137      	b.n	13d9c <__aeabi_dadd+0x2c4>
   13b2c:	1aba      	subs	r2, r7, r2
   13b2e:	4297      	cmp	r7, r2
   13b30:	41bf      	sbcs	r7, r7
   13b32:	1a64      	subs	r4, r4, r1
   13b34:	427f      	negs	r7, r7
   13b36:	1be4      	subs	r4, r4, r7
   13b38:	2601      	movs	r6, #1
   13b3a:	0017      	movs	r7, r2
   13b3c:	e024      	b.n	13b88 <__aeabi_dadd+0xb0>
   13b3e:	4bc6      	ldr	r3, [pc, #792]	; (13e58 <__aeabi_dadd+0x380>)
   13b40:	429e      	cmp	r6, r3
   13b42:	d04d      	beq.n	13be0 <__aeabi_dadd+0x108>
   13b44:	2380      	movs	r3, #128	; 0x80
   13b46:	041b      	lsls	r3, r3, #16
   13b48:	4319      	orrs	r1, r3
   13b4a:	2d38      	cmp	r5, #56	; 0x38
   13b4c:	dd00      	ble.n	13b50 <__aeabi_dadd+0x78>
   13b4e:	e107      	b.n	13d60 <__aeabi_dadd+0x288>
   13b50:	2d1f      	cmp	r5, #31
   13b52:	dd00      	ble.n	13b56 <__aeabi_dadd+0x7e>
   13b54:	e138      	b.n	13dc8 <__aeabi_dadd+0x2f0>
   13b56:	2020      	movs	r0, #32
   13b58:	1b43      	subs	r3, r0, r5
   13b5a:	469a      	mov	sl, r3
   13b5c:	000b      	movs	r3, r1
   13b5e:	4650      	mov	r0, sl
   13b60:	4083      	lsls	r3, r0
   13b62:	4699      	mov	r9, r3
   13b64:	0013      	movs	r3, r2
   13b66:	4648      	mov	r0, r9
   13b68:	40eb      	lsrs	r3, r5
   13b6a:	4318      	orrs	r0, r3
   13b6c:	0003      	movs	r3, r0
   13b6e:	4650      	mov	r0, sl
   13b70:	4082      	lsls	r2, r0
   13b72:	1e50      	subs	r0, r2, #1
   13b74:	4182      	sbcs	r2, r0
   13b76:	40e9      	lsrs	r1, r5
   13b78:	431a      	orrs	r2, r3
   13b7a:	1aba      	subs	r2, r7, r2
   13b7c:	1a61      	subs	r1, r4, r1
   13b7e:	4297      	cmp	r7, r2
   13b80:	41a4      	sbcs	r4, r4
   13b82:	0017      	movs	r7, r2
   13b84:	4264      	negs	r4, r4
   13b86:	1b0c      	subs	r4, r1, r4
   13b88:	0223      	lsls	r3, r4, #8
   13b8a:	d562      	bpl.n	13c52 <__aeabi_dadd+0x17a>
   13b8c:	0264      	lsls	r4, r4, #9
   13b8e:	0a65      	lsrs	r5, r4, #9
   13b90:	2d00      	cmp	r5, #0
   13b92:	d100      	bne.n	13b96 <__aeabi_dadd+0xbe>
   13b94:	e0df      	b.n	13d56 <__aeabi_dadd+0x27e>
   13b96:	0028      	movs	r0, r5
   13b98:	f001 fcc0 	bl	1551c <__clzsi2>
   13b9c:	0003      	movs	r3, r0
   13b9e:	3b08      	subs	r3, #8
   13ba0:	2b1f      	cmp	r3, #31
   13ba2:	dd00      	ble.n	13ba6 <__aeabi_dadd+0xce>
   13ba4:	e0d2      	b.n	13d4c <__aeabi_dadd+0x274>
   13ba6:	2220      	movs	r2, #32
   13ba8:	003c      	movs	r4, r7
   13baa:	1ad2      	subs	r2, r2, r3
   13bac:	409d      	lsls	r5, r3
   13bae:	40d4      	lsrs	r4, r2
   13bb0:	409f      	lsls	r7, r3
   13bb2:	4325      	orrs	r5, r4
   13bb4:	429e      	cmp	r6, r3
   13bb6:	dd00      	ble.n	13bba <__aeabi_dadd+0xe2>
   13bb8:	e0c4      	b.n	13d44 <__aeabi_dadd+0x26c>
   13bba:	1b9e      	subs	r6, r3, r6
   13bbc:	1c73      	adds	r3, r6, #1
   13bbe:	2b1f      	cmp	r3, #31
   13bc0:	dd00      	ble.n	13bc4 <__aeabi_dadd+0xec>
   13bc2:	e0f1      	b.n	13da8 <__aeabi_dadd+0x2d0>
   13bc4:	2220      	movs	r2, #32
   13bc6:	0038      	movs	r0, r7
   13bc8:	0029      	movs	r1, r5
   13bca:	1ad2      	subs	r2, r2, r3
   13bcc:	40d8      	lsrs	r0, r3
   13bce:	4091      	lsls	r1, r2
   13bd0:	4097      	lsls	r7, r2
   13bd2:	002c      	movs	r4, r5
   13bd4:	4301      	orrs	r1, r0
   13bd6:	1e78      	subs	r0, r7, #1
   13bd8:	4187      	sbcs	r7, r0
   13bda:	40dc      	lsrs	r4, r3
   13bdc:	2600      	movs	r6, #0
   13bde:	430f      	orrs	r7, r1
   13be0:	077b      	lsls	r3, r7, #29
   13be2:	d009      	beq.n	13bf8 <__aeabi_dadd+0x120>
   13be4:	230f      	movs	r3, #15
   13be6:	403b      	ands	r3, r7
   13be8:	2b04      	cmp	r3, #4
   13bea:	d005      	beq.n	13bf8 <__aeabi_dadd+0x120>
   13bec:	1d3b      	adds	r3, r7, #4
   13bee:	42bb      	cmp	r3, r7
   13bf0:	41bf      	sbcs	r7, r7
   13bf2:	427f      	negs	r7, r7
   13bf4:	19e4      	adds	r4, r4, r7
   13bf6:	001f      	movs	r7, r3
   13bf8:	0223      	lsls	r3, r4, #8
   13bfa:	d52c      	bpl.n	13c56 <__aeabi_dadd+0x17e>
   13bfc:	4b96      	ldr	r3, [pc, #600]	; (13e58 <__aeabi_dadd+0x380>)
   13bfe:	3601      	adds	r6, #1
   13c00:	429e      	cmp	r6, r3
   13c02:	d100      	bne.n	13c06 <__aeabi_dadd+0x12e>
   13c04:	e09a      	b.n	13d3c <__aeabi_dadd+0x264>
   13c06:	4645      	mov	r5, r8
   13c08:	4b94      	ldr	r3, [pc, #592]	; (13e5c <__aeabi_dadd+0x384>)
   13c0a:	08ff      	lsrs	r7, r7, #3
   13c0c:	401c      	ands	r4, r3
   13c0e:	0760      	lsls	r0, r4, #29
   13c10:	0576      	lsls	r6, r6, #21
   13c12:	0264      	lsls	r4, r4, #9
   13c14:	4307      	orrs	r7, r0
   13c16:	0b24      	lsrs	r4, r4, #12
   13c18:	0d76      	lsrs	r6, r6, #21
   13c1a:	2100      	movs	r1, #0
   13c1c:	0324      	lsls	r4, r4, #12
   13c1e:	0b23      	lsrs	r3, r4, #12
   13c20:	0d0c      	lsrs	r4, r1, #20
   13c22:	4a8f      	ldr	r2, [pc, #572]	; (13e60 <__aeabi_dadd+0x388>)
   13c24:	0524      	lsls	r4, r4, #20
   13c26:	431c      	orrs	r4, r3
   13c28:	4014      	ands	r4, r2
   13c2a:	0533      	lsls	r3, r6, #20
   13c2c:	4323      	orrs	r3, r4
   13c2e:	005b      	lsls	r3, r3, #1
   13c30:	07ed      	lsls	r5, r5, #31
   13c32:	085b      	lsrs	r3, r3, #1
   13c34:	432b      	orrs	r3, r5
   13c36:	0038      	movs	r0, r7
   13c38:	0019      	movs	r1, r3
   13c3a:	bc3c      	pop	{r2, r3, r4, r5}
   13c3c:	4690      	mov	r8, r2
   13c3e:	4699      	mov	r9, r3
   13c40:	46a2      	mov	sl, r4
   13c42:	46ab      	mov	fp, r5
   13c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c46:	4664      	mov	r4, ip
   13c48:	4304      	orrs	r4, r0
   13c4a:	d100      	bne.n	13c4e <__aeabi_dadd+0x176>
   13c4c:	e211      	b.n	14072 <__aeabi_dadd+0x59a>
   13c4e:	0004      	movs	r4, r0
   13c50:	4667      	mov	r7, ip
   13c52:	077b      	lsls	r3, r7, #29
   13c54:	d1c6      	bne.n	13be4 <__aeabi_dadd+0x10c>
   13c56:	4645      	mov	r5, r8
   13c58:	0760      	lsls	r0, r4, #29
   13c5a:	08ff      	lsrs	r7, r7, #3
   13c5c:	4307      	orrs	r7, r0
   13c5e:	08e4      	lsrs	r4, r4, #3
   13c60:	4b7d      	ldr	r3, [pc, #500]	; (13e58 <__aeabi_dadd+0x380>)
   13c62:	429e      	cmp	r6, r3
   13c64:	d030      	beq.n	13cc8 <__aeabi_dadd+0x1f0>
   13c66:	0324      	lsls	r4, r4, #12
   13c68:	0576      	lsls	r6, r6, #21
   13c6a:	0b24      	lsrs	r4, r4, #12
   13c6c:	0d76      	lsrs	r6, r6, #21
   13c6e:	e7d4      	b.n	13c1a <__aeabi_dadd+0x142>
   13c70:	1a33      	subs	r3, r6, r0
   13c72:	469a      	mov	sl, r3
   13c74:	2b00      	cmp	r3, #0
   13c76:	dd78      	ble.n	13d6a <__aeabi_dadd+0x292>
   13c78:	2800      	cmp	r0, #0
   13c7a:	d031      	beq.n	13ce0 <__aeabi_dadd+0x208>
   13c7c:	4876      	ldr	r0, [pc, #472]	; (13e58 <__aeabi_dadd+0x380>)
   13c7e:	4286      	cmp	r6, r0
   13c80:	d0ae      	beq.n	13be0 <__aeabi_dadd+0x108>
   13c82:	2080      	movs	r0, #128	; 0x80
   13c84:	0400      	lsls	r0, r0, #16
   13c86:	4301      	orrs	r1, r0
   13c88:	4653      	mov	r3, sl
   13c8a:	2b38      	cmp	r3, #56	; 0x38
   13c8c:	dc00      	bgt.n	13c90 <__aeabi_dadd+0x1b8>
   13c8e:	e0e9      	b.n	13e64 <__aeabi_dadd+0x38c>
   13c90:	430a      	orrs	r2, r1
   13c92:	1e51      	subs	r1, r2, #1
   13c94:	418a      	sbcs	r2, r1
   13c96:	2100      	movs	r1, #0
   13c98:	19d2      	adds	r2, r2, r7
   13c9a:	42ba      	cmp	r2, r7
   13c9c:	41bf      	sbcs	r7, r7
   13c9e:	1909      	adds	r1, r1, r4
   13ca0:	427c      	negs	r4, r7
   13ca2:	0017      	movs	r7, r2
   13ca4:	190c      	adds	r4, r1, r4
   13ca6:	0223      	lsls	r3, r4, #8
   13ca8:	d5d3      	bpl.n	13c52 <__aeabi_dadd+0x17a>
   13caa:	4b6b      	ldr	r3, [pc, #428]	; (13e58 <__aeabi_dadd+0x380>)
   13cac:	3601      	adds	r6, #1
   13cae:	429e      	cmp	r6, r3
   13cb0:	d100      	bne.n	13cb4 <__aeabi_dadd+0x1dc>
   13cb2:	e13a      	b.n	13f2a <__aeabi_dadd+0x452>
   13cb4:	2001      	movs	r0, #1
   13cb6:	4b69      	ldr	r3, [pc, #420]	; (13e5c <__aeabi_dadd+0x384>)
   13cb8:	401c      	ands	r4, r3
   13cba:	087b      	lsrs	r3, r7, #1
   13cbc:	4007      	ands	r7, r0
   13cbe:	431f      	orrs	r7, r3
   13cc0:	07e0      	lsls	r0, r4, #31
   13cc2:	4307      	orrs	r7, r0
   13cc4:	0864      	lsrs	r4, r4, #1
   13cc6:	e78b      	b.n	13be0 <__aeabi_dadd+0x108>
   13cc8:	0023      	movs	r3, r4
   13cca:	433b      	orrs	r3, r7
   13ccc:	d100      	bne.n	13cd0 <__aeabi_dadd+0x1f8>
   13cce:	e1cb      	b.n	14068 <__aeabi_dadd+0x590>
   13cd0:	2280      	movs	r2, #128	; 0x80
   13cd2:	0312      	lsls	r2, r2, #12
   13cd4:	4314      	orrs	r4, r2
   13cd6:	0324      	lsls	r4, r4, #12
   13cd8:	0b24      	lsrs	r4, r4, #12
   13cda:	e79e      	b.n	13c1a <__aeabi_dadd+0x142>
   13cdc:	002e      	movs	r6, r5
   13cde:	e77f      	b.n	13be0 <__aeabi_dadd+0x108>
   13ce0:	0008      	movs	r0, r1
   13ce2:	4310      	orrs	r0, r2
   13ce4:	d100      	bne.n	13ce8 <__aeabi_dadd+0x210>
   13ce6:	e0b4      	b.n	13e52 <__aeabi_dadd+0x37a>
   13ce8:	1e58      	subs	r0, r3, #1
   13cea:	2800      	cmp	r0, #0
   13cec:	d000      	beq.n	13cf0 <__aeabi_dadd+0x218>
   13cee:	e0de      	b.n	13eae <__aeabi_dadd+0x3d6>
   13cf0:	18ba      	adds	r2, r7, r2
   13cf2:	42ba      	cmp	r2, r7
   13cf4:	419b      	sbcs	r3, r3
   13cf6:	1864      	adds	r4, r4, r1
   13cf8:	425b      	negs	r3, r3
   13cfa:	18e4      	adds	r4, r4, r3
   13cfc:	0017      	movs	r7, r2
   13cfe:	2601      	movs	r6, #1
   13d00:	0223      	lsls	r3, r4, #8
   13d02:	d5a6      	bpl.n	13c52 <__aeabi_dadd+0x17a>
   13d04:	2602      	movs	r6, #2
   13d06:	e7d5      	b.n	13cb4 <__aeabi_dadd+0x1dc>
   13d08:	2d00      	cmp	r5, #0
   13d0a:	d16e      	bne.n	13dea <__aeabi_dadd+0x312>
   13d0c:	1c70      	adds	r0, r6, #1
   13d0e:	0540      	lsls	r0, r0, #21
   13d10:	0d40      	lsrs	r0, r0, #21
   13d12:	2801      	cmp	r0, #1
   13d14:	dc00      	bgt.n	13d18 <__aeabi_dadd+0x240>
   13d16:	e0f9      	b.n	13f0c <__aeabi_dadd+0x434>
   13d18:	1ab8      	subs	r0, r7, r2
   13d1a:	4684      	mov	ip, r0
   13d1c:	4287      	cmp	r7, r0
   13d1e:	4180      	sbcs	r0, r0
   13d20:	1ae5      	subs	r5, r4, r3
   13d22:	4240      	negs	r0, r0
   13d24:	1a2d      	subs	r5, r5, r0
   13d26:	0228      	lsls	r0, r5, #8
   13d28:	d400      	bmi.n	13d2c <__aeabi_dadd+0x254>
   13d2a:	e089      	b.n	13e40 <__aeabi_dadd+0x368>
   13d2c:	1bd7      	subs	r7, r2, r7
   13d2e:	42ba      	cmp	r2, r7
   13d30:	4192      	sbcs	r2, r2
   13d32:	1b1c      	subs	r4, r3, r4
   13d34:	4252      	negs	r2, r2
   13d36:	1aa5      	subs	r5, r4, r2
   13d38:	46d8      	mov	r8, fp
   13d3a:	e729      	b.n	13b90 <__aeabi_dadd+0xb8>
   13d3c:	4645      	mov	r5, r8
   13d3e:	2400      	movs	r4, #0
   13d40:	2700      	movs	r7, #0
   13d42:	e76a      	b.n	13c1a <__aeabi_dadd+0x142>
   13d44:	4c45      	ldr	r4, [pc, #276]	; (13e5c <__aeabi_dadd+0x384>)
   13d46:	1af6      	subs	r6, r6, r3
   13d48:	402c      	ands	r4, r5
   13d4a:	e749      	b.n	13be0 <__aeabi_dadd+0x108>
   13d4c:	003d      	movs	r5, r7
   13d4e:	3828      	subs	r0, #40	; 0x28
   13d50:	4085      	lsls	r5, r0
   13d52:	2700      	movs	r7, #0
   13d54:	e72e      	b.n	13bb4 <__aeabi_dadd+0xdc>
   13d56:	0038      	movs	r0, r7
   13d58:	f001 fbe0 	bl	1551c <__clzsi2>
   13d5c:	3020      	adds	r0, #32
   13d5e:	e71d      	b.n	13b9c <__aeabi_dadd+0xc4>
   13d60:	430a      	orrs	r2, r1
   13d62:	1e51      	subs	r1, r2, #1
   13d64:	418a      	sbcs	r2, r1
   13d66:	2100      	movs	r1, #0
   13d68:	e707      	b.n	13b7a <__aeabi_dadd+0xa2>
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	d000      	beq.n	13d70 <__aeabi_dadd+0x298>
   13d6e:	e0f3      	b.n	13f58 <__aeabi_dadd+0x480>
   13d70:	1c70      	adds	r0, r6, #1
   13d72:	0543      	lsls	r3, r0, #21
   13d74:	0d5b      	lsrs	r3, r3, #21
   13d76:	2b01      	cmp	r3, #1
   13d78:	dc00      	bgt.n	13d7c <__aeabi_dadd+0x2a4>
   13d7a:	e0ad      	b.n	13ed8 <__aeabi_dadd+0x400>
   13d7c:	4b36      	ldr	r3, [pc, #216]	; (13e58 <__aeabi_dadd+0x380>)
   13d7e:	4298      	cmp	r0, r3
   13d80:	d100      	bne.n	13d84 <__aeabi_dadd+0x2ac>
   13d82:	e0d1      	b.n	13f28 <__aeabi_dadd+0x450>
   13d84:	18ba      	adds	r2, r7, r2
   13d86:	42ba      	cmp	r2, r7
   13d88:	41bf      	sbcs	r7, r7
   13d8a:	1864      	adds	r4, r4, r1
   13d8c:	427f      	negs	r7, r7
   13d8e:	19e4      	adds	r4, r4, r7
   13d90:	07e7      	lsls	r7, r4, #31
   13d92:	0852      	lsrs	r2, r2, #1
   13d94:	4317      	orrs	r7, r2
   13d96:	0864      	lsrs	r4, r4, #1
   13d98:	0006      	movs	r6, r0
   13d9a:	e721      	b.n	13be0 <__aeabi_dadd+0x108>
   13d9c:	482e      	ldr	r0, [pc, #184]	; (13e58 <__aeabi_dadd+0x380>)
   13d9e:	4285      	cmp	r5, r0
   13da0:	d100      	bne.n	13da4 <__aeabi_dadd+0x2cc>
   13da2:	e093      	b.n	13ecc <__aeabi_dadd+0x3f4>
   13da4:	001d      	movs	r5, r3
   13da6:	e6d0      	b.n	13b4a <__aeabi_dadd+0x72>
   13da8:	0029      	movs	r1, r5
   13daa:	3e1f      	subs	r6, #31
   13dac:	40f1      	lsrs	r1, r6
   13dae:	2b20      	cmp	r3, #32
   13db0:	d100      	bne.n	13db4 <__aeabi_dadd+0x2dc>
   13db2:	e08d      	b.n	13ed0 <__aeabi_dadd+0x3f8>
   13db4:	2240      	movs	r2, #64	; 0x40
   13db6:	1ad3      	subs	r3, r2, r3
   13db8:	409d      	lsls	r5, r3
   13dba:	432f      	orrs	r7, r5
   13dbc:	1e7d      	subs	r5, r7, #1
   13dbe:	41af      	sbcs	r7, r5
   13dc0:	2400      	movs	r4, #0
   13dc2:	430f      	orrs	r7, r1
   13dc4:	2600      	movs	r6, #0
   13dc6:	e744      	b.n	13c52 <__aeabi_dadd+0x17a>
   13dc8:	002b      	movs	r3, r5
   13dca:	0008      	movs	r0, r1
   13dcc:	3b20      	subs	r3, #32
   13dce:	40d8      	lsrs	r0, r3
   13dd0:	0003      	movs	r3, r0
   13dd2:	2d20      	cmp	r5, #32
   13dd4:	d100      	bne.n	13dd8 <__aeabi_dadd+0x300>
   13dd6:	e07d      	b.n	13ed4 <__aeabi_dadd+0x3fc>
   13dd8:	2040      	movs	r0, #64	; 0x40
   13dda:	1b45      	subs	r5, r0, r5
   13ddc:	40a9      	lsls	r1, r5
   13dde:	430a      	orrs	r2, r1
   13de0:	1e51      	subs	r1, r2, #1
   13de2:	418a      	sbcs	r2, r1
   13de4:	2100      	movs	r1, #0
   13de6:	431a      	orrs	r2, r3
   13de8:	e6c7      	b.n	13b7a <__aeabi_dadd+0xa2>
   13dea:	2e00      	cmp	r6, #0
   13dec:	d050      	beq.n	13e90 <__aeabi_dadd+0x3b8>
   13dee:	4e1a      	ldr	r6, [pc, #104]	; (13e58 <__aeabi_dadd+0x380>)
   13df0:	42b0      	cmp	r0, r6
   13df2:	d057      	beq.n	13ea4 <__aeabi_dadd+0x3cc>
   13df4:	2680      	movs	r6, #128	; 0x80
   13df6:	426b      	negs	r3, r5
   13df8:	4699      	mov	r9, r3
   13dfa:	0436      	lsls	r6, r6, #16
   13dfc:	4334      	orrs	r4, r6
   13dfe:	464b      	mov	r3, r9
   13e00:	2b38      	cmp	r3, #56	; 0x38
   13e02:	dd00      	ble.n	13e06 <__aeabi_dadd+0x32e>
   13e04:	e0d6      	b.n	13fb4 <__aeabi_dadd+0x4dc>
   13e06:	2b1f      	cmp	r3, #31
   13e08:	dd00      	ble.n	13e0c <__aeabi_dadd+0x334>
   13e0a:	e135      	b.n	14078 <__aeabi_dadd+0x5a0>
   13e0c:	2620      	movs	r6, #32
   13e0e:	1af5      	subs	r5, r6, r3
   13e10:	0026      	movs	r6, r4
   13e12:	40ae      	lsls	r6, r5
   13e14:	46b2      	mov	sl, r6
   13e16:	003e      	movs	r6, r7
   13e18:	40de      	lsrs	r6, r3
   13e1a:	46ac      	mov	ip, r5
   13e1c:	0035      	movs	r5, r6
   13e1e:	4656      	mov	r6, sl
   13e20:	432e      	orrs	r6, r5
   13e22:	4665      	mov	r5, ip
   13e24:	40af      	lsls	r7, r5
   13e26:	1e7d      	subs	r5, r7, #1
   13e28:	41af      	sbcs	r7, r5
   13e2a:	40dc      	lsrs	r4, r3
   13e2c:	4337      	orrs	r7, r6
   13e2e:	1bd7      	subs	r7, r2, r7
   13e30:	42ba      	cmp	r2, r7
   13e32:	4192      	sbcs	r2, r2
   13e34:	1b0c      	subs	r4, r1, r4
   13e36:	4252      	negs	r2, r2
   13e38:	1aa4      	subs	r4, r4, r2
   13e3a:	0006      	movs	r6, r0
   13e3c:	46d8      	mov	r8, fp
   13e3e:	e6a3      	b.n	13b88 <__aeabi_dadd+0xb0>
   13e40:	4664      	mov	r4, ip
   13e42:	4667      	mov	r7, ip
   13e44:	432c      	orrs	r4, r5
   13e46:	d000      	beq.n	13e4a <__aeabi_dadd+0x372>
   13e48:	e6a2      	b.n	13b90 <__aeabi_dadd+0xb8>
   13e4a:	2500      	movs	r5, #0
   13e4c:	2600      	movs	r6, #0
   13e4e:	2700      	movs	r7, #0
   13e50:	e706      	b.n	13c60 <__aeabi_dadd+0x188>
   13e52:	001e      	movs	r6, r3
   13e54:	e6c4      	b.n	13be0 <__aeabi_dadd+0x108>
   13e56:	46c0      	nop			; (mov r8, r8)
   13e58:	000007ff 	.word	0x000007ff
   13e5c:	ff7fffff 	.word	0xff7fffff
   13e60:	800fffff 	.word	0x800fffff
   13e64:	2b1f      	cmp	r3, #31
   13e66:	dc63      	bgt.n	13f30 <__aeabi_dadd+0x458>
   13e68:	2020      	movs	r0, #32
   13e6a:	1ac3      	subs	r3, r0, r3
   13e6c:	0008      	movs	r0, r1
   13e6e:	4098      	lsls	r0, r3
   13e70:	469c      	mov	ip, r3
   13e72:	4683      	mov	fp, r0
   13e74:	4653      	mov	r3, sl
   13e76:	0010      	movs	r0, r2
   13e78:	40d8      	lsrs	r0, r3
   13e7a:	0003      	movs	r3, r0
   13e7c:	4658      	mov	r0, fp
   13e7e:	4318      	orrs	r0, r3
   13e80:	4663      	mov	r3, ip
   13e82:	409a      	lsls	r2, r3
   13e84:	1e53      	subs	r3, r2, #1
   13e86:	419a      	sbcs	r2, r3
   13e88:	4653      	mov	r3, sl
   13e8a:	4302      	orrs	r2, r0
   13e8c:	40d9      	lsrs	r1, r3
   13e8e:	e703      	b.n	13c98 <__aeabi_dadd+0x1c0>
   13e90:	0026      	movs	r6, r4
   13e92:	433e      	orrs	r6, r7
   13e94:	d006      	beq.n	13ea4 <__aeabi_dadd+0x3cc>
   13e96:	43eb      	mvns	r3, r5
   13e98:	4699      	mov	r9, r3
   13e9a:	2b00      	cmp	r3, #0
   13e9c:	d0c7      	beq.n	13e2e <__aeabi_dadd+0x356>
   13e9e:	4e94      	ldr	r6, [pc, #592]	; (140f0 <__aeabi_dadd+0x618>)
   13ea0:	42b0      	cmp	r0, r6
   13ea2:	d1ac      	bne.n	13dfe <__aeabi_dadd+0x326>
   13ea4:	000c      	movs	r4, r1
   13ea6:	0017      	movs	r7, r2
   13ea8:	0006      	movs	r6, r0
   13eaa:	46d8      	mov	r8, fp
   13eac:	e698      	b.n	13be0 <__aeabi_dadd+0x108>
   13eae:	4b90      	ldr	r3, [pc, #576]	; (140f0 <__aeabi_dadd+0x618>)
   13eb0:	459a      	cmp	sl, r3
   13eb2:	d00b      	beq.n	13ecc <__aeabi_dadd+0x3f4>
   13eb4:	4682      	mov	sl, r0
   13eb6:	e6e7      	b.n	13c88 <__aeabi_dadd+0x1b0>
   13eb8:	2800      	cmp	r0, #0
   13eba:	d000      	beq.n	13ebe <__aeabi_dadd+0x3e6>
   13ebc:	e09e      	b.n	13ffc <__aeabi_dadd+0x524>
   13ebe:	0018      	movs	r0, r3
   13ec0:	4310      	orrs	r0, r2
   13ec2:	d100      	bne.n	13ec6 <__aeabi_dadd+0x3ee>
   13ec4:	e0e9      	b.n	1409a <__aeabi_dadd+0x5c2>
   13ec6:	001c      	movs	r4, r3
   13ec8:	0017      	movs	r7, r2
   13eca:	46d8      	mov	r8, fp
   13ecc:	4e88      	ldr	r6, [pc, #544]	; (140f0 <__aeabi_dadd+0x618>)
   13ece:	e687      	b.n	13be0 <__aeabi_dadd+0x108>
   13ed0:	2500      	movs	r5, #0
   13ed2:	e772      	b.n	13dba <__aeabi_dadd+0x2e2>
   13ed4:	2100      	movs	r1, #0
   13ed6:	e782      	b.n	13dde <__aeabi_dadd+0x306>
   13ed8:	0023      	movs	r3, r4
   13eda:	433b      	orrs	r3, r7
   13edc:	2e00      	cmp	r6, #0
   13ede:	d000      	beq.n	13ee2 <__aeabi_dadd+0x40a>
   13ee0:	e0ab      	b.n	1403a <__aeabi_dadd+0x562>
   13ee2:	2b00      	cmp	r3, #0
   13ee4:	d100      	bne.n	13ee8 <__aeabi_dadd+0x410>
   13ee6:	e0e7      	b.n	140b8 <__aeabi_dadd+0x5e0>
   13ee8:	000b      	movs	r3, r1
   13eea:	4313      	orrs	r3, r2
   13eec:	d100      	bne.n	13ef0 <__aeabi_dadd+0x418>
   13eee:	e677      	b.n	13be0 <__aeabi_dadd+0x108>
   13ef0:	18ba      	adds	r2, r7, r2
   13ef2:	42ba      	cmp	r2, r7
   13ef4:	41bf      	sbcs	r7, r7
   13ef6:	1864      	adds	r4, r4, r1
   13ef8:	427f      	negs	r7, r7
   13efa:	19e4      	adds	r4, r4, r7
   13efc:	0223      	lsls	r3, r4, #8
   13efe:	d400      	bmi.n	13f02 <__aeabi_dadd+0x42a>
   13f00:	e0f2      	b.n	140e8 <__aeabi_dadd+0x610>
   13f02:	4b7c      	ldr	r3, [pc, #496]	; (140f4 <__aeabi_dadd+0x61c>)
   13f04:	0017      	movs	r7, r2
   13f06:	401c      	ands	r4, r3
   13f08:	0006      	movs	r6, r0
   13f0a:	e669      	b.n	13be0 <__aeabi_dadd+0x108>
   13f0c:	0020      	movs	r0, r4
   13f0e:	4338      	orrs	r0, r7
   13f10:	2e00      	cmp	r6, #0
   13f12:	d1d1      	bne.n	13eb8 <__aeabi_dadd+0x3e0>
   13f14:	2800      	cmp	r0, #0
   13f16:	d15b      	bne.n	13fd0 <__aeabi_dadd+0x4f8>
   13f18:	001c      	movs	r4, r3
   13f1a:	4314      	orrs	r4, r2
   13f1c:	d100      	bne.n	13f20 <__aeabi_dadd+0x448>
   13f1e:	e0a8      	b.n	14072 <__aeabi_dadd+0x59a>
   13f20:	001c      	movs	r4, r3
   13f22:	0017      	movs	r7, r2
   13f24:	46d8      	mov	r8, fp
   13f26:	e65b      	b.n	13be0 <__aeabi_dadd+0x108>
   13f28:	0006      	movs	r6, r0
   13f2a:	2400      	movs	r4, #0
   13f2c:	2700      	movs	r7, #0
   13f2e:	e697      	b.n	13c60 <__aeabi_dadd+0x188>
   13f30:	4650      	mov	r0, sl
   13f32:	000b      	movs	r3, r1
   13f34:	3820      	subs	r0, #32
   13f36:	40c3      	lsrs	r3, r0
   13f38:	4699      	mov	r9, r3
   13f3a:	4653      	mov	r3, sl
   13f3c:	2b20      	cmp	r3, #32
   13f3e:	d100      	bne.n	13f42 <__aeabi_dadd+0x46a>
   13f40:	e095      	b.n	1406e <__aeabi_dadd+0x596>
   13f42:	2340      	movs	r3, #64	; 0x40
   13f44:	4650      	mov	r0, sl
   13f46:	1a1b      	subs	r3, r3, r0
   13f48:	4099      	lsls	r1, r3
   13f4a:	430a      	orrs	r2, r1
   13f4c:	1e51      	subs	r1, r2, #1
   13f4e:	418a      	sbcs	r2, r1
   13f50:	464b      	mov	r3, r9
   13f52:	2100      	movs	r1, #0
   13f54:	431a      	orrs	r2, r3
   13f56:	e69f      	b.n	13c98 <__aeabi_dadd+0x1c0>
   13f58:	2e00      	cmp	r6, #0
   13f5a:	d130      	bne.n	13fbe <__aeabi_dadd+0x4e6>
   13f5c:	0026      	movs	r6, r4
   13f5e:	433e      	orrs	r6, r7
   13f60:	d067      	beq.n	14032 <__aeabi_dadd+0x55a>
   13f62:	43db      	mvns	r3, r3
   13f64:	469a      	mov	sl, r3
   13f66:	2b00      	cmp	r3, #0
   13f68:	d01c      	beq.n	13fa4 <__aeabi_dadd+0x4cc>
   13f6a:	4e61      	ldr	r6, [pc, #388]	; (140f0 <__aeabi_dadd+0x618>)
   13f6c:	42b0      	cmp	r0, r6
   13f6e:	d060      	beq.n	14032 <__aeabi_dadd+0x55a>
   13f70:	4653      	mov	r3, sl
   13f72:	2b38      	cmp	r3, #56	; 0x38
   13f74:	dd00      	ble.n	13f78 <__aeabi_dadd+0x4a0>
   13f76:	e096      	b.n	140a6 <__aeabi_dadd+0x5ce>
   13f78:	2b1f      	cmp	r3, #31
   13f7a:	dd00      	ble.n	13f7e <__aeabi_dadd+0x4a6>
   13f7c:	e09f      	b.n	140be <__aeabi_dadd+0x5e6>
   13f7e:	2620      	movs	r6, #32
   13f80:	1af3      	subs	r3, r6, r3
   13f82:	0026      	movs	r6, r4
   13f84:	409e      	lsls	r6, r3
   13f86:	469c      	mov	ip, r3
   13f88:	46b3      	mov	fp, r6
   13f8a:	4653      	mov	r3, sl
   13f8c:	003e      	movs	r6, r7
   13f8e:	40de      	lsrs	r6, r3
   13f90:	0033      	movs	r3, r6
   13f92:	465e      	mov	r6, fp
   13f94:	431e      	orrs	r6, r3
   13f96:	4663      	mov	r3, ip
   13f98:	409f      	lsls	r7, r3
   13f9a:	1e7b      	subs	r3, r7, #1
   13f9c:	419f      	sbcs	r7, r3
   13f9e:	4653      	mov	r3, sl
   13fa0:	40dc      	lsrs	r4, r3
   13fa2:	4337      	orrs	r7, r6
   13fa4:	18bf      	adds	r7, r7, r2
   13fa6:	4297      	cmp	r7, r2
   13fa8:	4192      	sbcs	r2, r2
   13faa:	1864      	adds	r4, r4, r1
   13fac:	4252      	negs	r2, r2
   13fae:	18a4      	adds	r4, r4, r2
   13fb0:	0006      	movs	r6, r0
   13fb2:	e678      	b.n	13ca6 <__aeabi_dadd+0x1ce>
   13fb4:	4327      	orrs	r7, r4
   13fb6:	1e7c      	subs	r4, r7, #1
   13fb8:	41a7      	sbcs	r7, r4
   13fba:	2400      	movs	r4, #0
   13fbc:	e737      	b.n	13e2e <__aeabi_dadd+0x356>
   13fbe:	4e4c      	ldr	r6, [pc, #304]	; (140f0 <__aeabi_dadd+0x618>)
   13fc0:	42b0      	cmp	r0, r6
   13fc2:	d036      	beq.n	14032 <__aeabi_dadd+0x55a>
   13fc4:	2680      	movs	r6, #128	; 0x80
   13fc6:	425b      	negs	r3, r3
   13fc8:	0436      	lsls	r6, r6, #16
   13fca:	469a      	mov	sl, r3
   13fcc:	4334      	orrs	r4, r6
   13fce:	e7cf      	b.n	13f70 <__aeabi_dadd+0x498>
   13fd0:	0018      	movs	r0, r3
   13fd2:	4310      	orrs	r0, r2
   13fd4:	d100      	bne.n	13fd8 <__aeabi_dadd+0x500>
   13fd6:	e603      	b.n	13be0 <__aeabi_dadd+0x108>
   13fd8:	1ab8      	subs	r0, r7, r2
   13fda:	4684      	mov	ip, r0
   13fdc:	4567      	cmp	r7, ip
   13fde:	41ad      	sbcs	r5, r5
   13fe0:	1ae0      	subs	r0, r4, r3
   13fe2:	426d      	negs	r5, r5
   13fe4:	1b40      	subs	r0, r0, r5
   13fe6:	0205      	lsls	r5, r0, #8
   13fe8:	d400      	bmi.n	13fec <__aeabi_dadd+0x514>
   13fea:	e62c      	b.n	13c46 <__aeabi_dadd+0x16e>
   13fec:	1bd7      	subs	r7, r2, r7
   13fee:	42ba      	cmp	r2, r7
   13ff0:	4192      	sbcs	r2, r2
   13ff2:	1b1c      	subs	r4, r3, r4
   13ff4:	4252      	negs	r2, r2
   13ff6:	1aa4      	subs	r4, r4, r2
   13ff8:	46d8      	mov	r8, fp
   13ffa:	e5f1      	b.n	13be0 <__aeabi_dadd+0x108>
   13ffc:	0018      	movs	r0, r3
   13ffe:	4310      	orrs	r0, r2
   14000:	d100      	bne.n	14004 <__aeabi_dadd+0x52c>
   14002:	e763      	b.n	13ecc <__aeabi_dadd+0x3f4>
   14004:	08f8      	lsrs	r0, r7, #3
   14006:	0767      	lsls	r7, r4, #29
   14008:	4307      	orrs	r7, r0
   1400a:	2080      	movs	r0, #128	; 0x80
   1400c:	08e4      	lsrs	r4, r4, #3
   1400e:	0300      	lsls	r0, r0, #12
   14010:	4204      	tst	r4, r0
   14012:	d008      	beq.n	14026 <__aeabi_dadd+0x54e>
   14014:	08dd      	lsrs	r5, r3, #3
   14016:	4205      	tst	r5, r0
   14018:	d105      	bne.n	14026 <__aeabi_dadd+0x54e>
   1401a:	08d2      	lsrs	r2, r2, #3
   1401c:	0759      	lsls	r1, r3, #29
   1401e:	4311      	orrs	r1, r2
   14020:	000f      	movs	r7, r1
   14022:	002c      	movs	r4, r5
   14024:	46d8      	mov	r8, fp
   14026:	0f7b      	lsrs	r3, r7, #29
   14028:	00e4      	lsls	r4, r4, #3
   1402a:	431c      	orrs	r4, r3
   1402c:	00ff      	lsls	r7, r7, #3
   1402e:	4e30      	ldr	r6, [pc, #192]	; (140f0 <__aeabi_dadd+0x618>)
   14030:	e5d6      	b.n	13be0 <__aeabi_dadd+0x108>
   14032:	000c      	movs	r4, r1
   14034:	0017      	movs	r7, r2
   14036:	0006      	movs	r6, r0
   14038:	e5d2      	b.n	13be0 <__aeabi_dadd+0x108>
   1403a:	2b00      	cmp	r3, #0
   1403c:	d038      	beq.n	140b0 <__aeabi_dadd+0x5d8>
   1403e:	000b      	movs	r3, r1
   14040:	4313      	orrs	r3, r2
   14042:	d100      	bne.n	14046 <__aeabi_dadd+0x56e>
   14044:	e742      	b.n	13ecc <__aeabi_dadd+0x3f4>
   14046:	08f8      	lsrs	r0, r7, #3
   14048:	0767      	lsls	r7, r4, #29
   1404a:	4307      	orrs	r7, r0
   1404c:	2080      	movs	r0, #128	; 0x80
   1404e:	08e4      	lsrs	r4, r4, #3
   14050:	0300      	lsls	r0, r0, #12
   14052:	4204      	tst	r4, r0
   14054:	d0e7      	beq.n	14026 <__aeabi_dadd+0x54e>
   14056:	08cb      	lsrs	r3, r1, #3
   14058:	4203      	tst	r3, r0
   1405a:	d1e4      	bne.n	14026 <__aeabi_dadd+0x54e>
   1405c:	08d2      	lsrs	r2, r2, #3
   1405e:	0749      	lsls	r1, r1, #29
   14060:	4311      	orrs	r1, r2
   14062:	000f      	movs	r7, r1
   14064:	001c      	movs	r4, r3
   14066:	e7de      	b.n	14026 <__aeabi_dadd+0x54e>
   14068:	2700      	movs	r7, #0
   1406a:	2400      	movs	r4, #0
   1406c:	e5d5      	b.n	13c1a <__aeabi_dadd+0x142>
   1406e:	2100      	movs	r1, #0
   14070:	e76b      	b.n	13f4a <__aeabi_dadd+0x472>
   14072:	2500      	movs	r5, #0
   14074:	2700      	movs	r7, #0
   14076:	e5f3      	b.n	13c60 <__aeabi_dadd+0x188>
   14078:	464e      	mov	r6, r9
   1407a:	0025      	movs	r5, r4
   1407c:	3e20      	subs	r6, #32
   1407e:	40f5      	lsrs	r5, r6
   14080:	464b      	mov	r3, r9
   14082:	002e      	movs	r6, r5
   14084:	2b20      	cmp	r3, #32
   14086:	d02d      	beq.n	140e4 <__aeabi_dadd+0x60c>
   14088:	2540      	movs	r5, #64	; 0x40
   1408a:	1aed      	subs	r5, r5, r3
   1408c:	40ac      	lsls	r4, r5
   1408e:	4327      	orrs	r7, r4
   14090:	1e7c      	subs	r4, r7, #1
   14092:	41a7      	sbcs	r7, r4
   14094:	2400      	movs	r4, #0
   14096:	4337      	orrs	r7, r6
   14098:	e6c9      	b.n	13e2e <__aeabi_dadd+0x356>
   1409a:	2480      	movs	r4, #128	; 0x80
   1409c:	2500      	movs	r5, #0
   1409e:	0324      	lsls	r4, r4, #12
   140a0:	4e13      	ldr	r6, [pc, #76]	; (140f0 <__aeabi_dadd+0x618>)
   140a2:	2700      	movs	r7, #0
   140a4:	e5dc      	b.n	13c60 <__aeabi_dadd+0x188>
   140a6:	4327      	orrs	r7, r4
   140a8:	1e7c      	subs	r4, r7, #1
   140aa:	41a7      	sbcs	r7, r4
   140ac:	2400      	movs	r4, #0
   140ae:	e779      	b.n	13fa4 <__aeabi_dadd+0x4cc>
   140b0:	000c      	movs	r4, r1
   140b2:	0017      	movs	r7, r2
   140b4:	4e0e      	ldr	r6, [pc, #56]	; (140f0 <__aeabi_dadd+0x618>)
   140b6:	e593      	b.n	13be0 <__aeabi_dadd+0x108>
   140b8:	000c      	movs	r4, r1
   140ba:	0017      	movs	r7, r2
   140bc:	e590      	b.n	13be0 <__aeabi_dadd+0x108>
   140be:	4656      	mov	r6, sl
   140c0:	0023      	movs	r3, r4
   140c2:	3e20      	subs	r6, #32
   140c4:	40f3      	lsrs	r3, r6
   140c6:	4699      	mov	r9, r3
   140c8:	4653      	mov	r3, sl
   140ca:	2b20      	cmp	r3, #32
   140cc:	d00e      	beq.n	140ec <__aeabi_dadd+0x614>
   140ce:	2340      	movs	r3, #64	; 0x40
   140d0:	4656      	mov	r6, sl
   140d2:	1b9b      	subs	r3, r3, r6
   140d4:	409c      	lsls	r4, r3
   140d6:	4327      	orrs	r7, r4
   140d8:	1e7c      	subs	r4, r7, #1
   140da:	41a7      	sbcs	r7, r4
   140dc:	464b      	mov	r3, r9
   140de:	2400      	movs	r4, #0
   140e0:	431f      	orrs	r7, r3
   140e2:	e75f      	b.n	13fa4 <__aeabi_dadd+0x4cc>
   140e4:	2400      	movs	r4, #0
   140e6:	e7d2      	b.n	1408e <__aeabi_dadd+0x5b6>
   140e8:	0017      	movs	r7, r2
   140ea:	e5b2      	b.n	13c52 <__aeabi_dadd+0x17a>
   140ec:	2400      	movs	r4, #0
   140ee:	e7f2      	b.n	140d6 <__aeabi_dadd+0x5fe>
   140f0:	000007ff 	.word	0x000007ff
   140f4:	ff7fffff 	.word	0xff7fffff

000140f8 <__aeabi_ddiv>:
   140f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   140fa:	4657      	mov	r7, sl
   140fc:	4645      	mov	r5, r8
   140fe:	46de      	mov	lr, fp
   14100:	464e      	mov	r6, r9
   14102:	b5e0      	push	{r5, r6, r7, lr}
   14104:	004c      	lsls	r4, r1, #1
   14106:	030e      	lsls	r6, r1, #12
   14108:	b087      	sub	sp, #28
   1410a:	4683      	mov	fp, r0
   1410c:	4692      	mov	sl, r2
   1410e:	001d      	movs	r5, r3
   14110:	4680      	mov	r8, r0
   14112:	0b36      	lsrs	r6, r6, #12
   14114:	0d64      	lsrs	r4, r4, #21
   14116:	0fcf      	lsrs	r7, r1, #31
   14118:	2c00      	cmp	r4, #0
   1411a:	d04f      	beq.n	141bc <__aeabi_ddiv+0xc4>
   1411c:	4b6f      	ldr	r3, [pc, #444]	; (142dc <__aeabi_ddiv+0x1e4>)
   1411e:	429c      	cmp	r4, r3
   14120:	d035      	beq.n	1418e <__aeabi_ddiv+0x96>
   14122:	2380      	movs	r3, #128	; 0x80
   14124:	0f42      	lsrs	r2, r0, #29
   14126:	041b      	lsls	r3, r3, #16
   14128:	00f6      	lsls	r6, r6, #3
   1412a:	4313      	orrs	r3, r2
   1412c:	4333      	orrs	r3, r6
   1412e:	4699      	mov	r9, r3
   14130:	00c3      	lsls	r3, r0, #3
   14132:	4698      	mov	r8, r3
   14134:	4b6a      	ldr	r3, [pc, #424]	; (142e0 <__aeabi_ddiv+0x1e8>)
   14136:	2600      	movs	r6, #0
   14138:	469c      	mov	ip, r3
   1413a:	2300      	movs	r3, #0
   1413c:	4464      	add	r4, ip
   1413e:	9303      	str	r3, [sp, #12]
   14140:	032b      	lsls	r3, r5, #12
   14142:	0b1b      	lsrs	r3, r3, #12
   14144:	469b      	mov	fp, r3
   14146:	006b      	lsls	r3, r5, #1
   14148:	0fed      	lsrs	r5, r5, #31
   1414a:	4650      	mov	r0, sl
   1414c:	0d5b      	lsrs	r3, r3, #21
   1414e:	9501      	str	r5, [sp, #4]
   14150:	d05e      	beq.n	14210 <__aeabi_ddiv+0x118>
   14152:	4a62      	ldr	r2, [pc, #392]	; (142dc <__aeabi_ddiv+0x1e4>)
   14154:	4293      	cmp	r3, r2
   14156:	d053      	beq.n	14200 <__aeabi_ddiv+0x108>
   14158:	465a      	mov	r2, fp
   1415a:	00d1      	lsls	r1, r2, #3
   1415c:	2280      	movs	r2, #128	; 0x80
   1415e:	0f40      	lsrs	r0, r0, #29
   14160:	0412      	lsls	r2, r2, #16
   14162:	4302      	orrs	r2, r0
   14164:	430a      	orrs	r2, r1
   14166:	4693      	mov	fp, r2
   14168:	4652      	mov	r2, sl
   1416a:	00d1      	lsls	r1, r2, #3
   1416c:	4a5c      	ldr	r2, [pc, #368]	; (142e0 <__aeabi_ddiv+0x1e8>)
   1416e:	4694      	mov	ip, r2
   14170:	2200      	movs	r2, #0
   14172:	4463      	add	r3, ip
   14174:	0038      	movs	r0, r7
   14176:	4068      	eors	r0, r5
   14178:	4684      	mov	ip, r0
   1417a:	9002      	str	r0, [sp, #8]
   1417c:	1ae4      	subs	r4, r4, r3
   1417e:	4316      	orrs	r6, r2
   14180:	2e0f      	cmp	r6, #15
   14182:	d900      	bls.n	14186 <__aeabi_ddiv+0x8e>
   14184:	e0b4      	b.n	142f0 <__aeabi_ddiv+0x1f8>
   14186:	4b57      	ldr	r3, [pc, #348]	; (142e4 <__aeabi_ddiv+0x1ec>)
   14188:	00b6      	lsls	r6, r6, #2
   1418a:	599b      	ldr	r3, [r3, r6]
   1418c:	469f      	mov	pc, r3
   1418e:	0003      	movs	r3, r0
   14190:	4333      	orrs	r3, r6
   14192:	4699      	mov	r9, r3
   14194:	d16c      	bne.n	14270 <__aeabi_ddiv+0x178>
   14196:	2300      	movs	r3, #0
   14198:	4698      	mov	r8, r3
   1419a:	3302      	adds	r3, #2
   1419c:	2608      	movs	r6, #8
   1419e:	9303      	str	r3, [sp, #12]
   141a0:	e7ce      	b.n	14140 <__aeabi_ddiv+0x48>
   141a2:	46cb      	mov	fp, r9
   141a4:	4641      	mov	r1, r8
   141a6:	9a03      	ldr	r2, [sp, #12]
   141a8:	9701      	str	r7, [sp, #4]
   141aa:	2a02      	cmp	r2, #2
   141ac:	d165      	bne.n	1427a <__aeabi_ddiv+0x182>
   141ae:	9b01      	ldr	r3, [sp, #4]
   141b0:	4c4a      	ldr	r4, [pc, #296]	; (142dc <__aeabi_ddiv+0x1e4>)
   141b2:	469c      	mov	ip, r3
   141b4:	2300      	movs	r3, #0
   141b6:	2200      	movs	r2, #0
   141b8:	4698      	mov	r8, r3
   141ba:	e06b      	b.n	14294 <__aeabi_ddiv+0x19c>
   141bc:	0003      	movs	r3, r0
   141be:	4333      	orrs	r3, r6
   141c0:	4699      	mov	r9, r3
   141c2:	d04e      	beq.n	14262 <__aeabi_ddiv+0x16a>
   141c4:	2e00      	cmp	r6, #0
   141c6:	d100      	bne.n	141ca <__aeabi_ddiv+0xd2>
   141c8:	e1bc      	b.n	14544 <__aeabi_ddiv+0x44c>
   141ca:	0030      	movs	r0, r6
   141cc:	f001 f9a6 	bl	1551c <__clzsi2>
   141d0:	0003      	movs	r3, r0
   141d2:	3b0b      	subs	r3, #11
   141d4:	2b1c      	cmp	r3, #28
   141d6:	dd00      	ble.n	141da <__aeabi_ddiv+0xe2>
   141d8:	e1ac      	b.n	14534 <__aeabi_ddiv+0x43c>
   141da:	221d      	movs	r2, #29
   141dc:	1ad3      	subs	r3, r2, r3
   141de:	465a      	mov	r2, fp
   141e0:	0001      	movs	r1, r0
   141e2:	40da      	lsrs	r2, r3
   141e4:	3908      	subs	r1, #8
   141e6:	408e      	lsls	r6, r1
   141e8:	0013      	movs	r3, r2
   141ea:	4333      	orrs	r3, r6
   141ec:	4699      	mov	r9, r3
   141ee:	465b      	mov	r3, fp
   141f0:	408b      	lsls	r3, r1
   141f2:	4698      	mov	r8, r3
   141f4:	2300      	movs	r3, #0
   141f6:	4c3c      	ldr	r4, [pc, #240]	; (142e8 <__aeabi_ddiv+0x1f0>)
   141f8:	2600      	movs	r6, #0
   141fa:	1a24      	subs	r4, r4, r0
   141fc:	9303      	str	r3, [sp, #12]
   141fe:	e79f      	b.n	14140 <__aeabi_ddiv+0x48>
   14200:	4651      	mov	r1, sl
   14202:	465a      	mov	r2, fp
   14204:	4311      	orrs	r1, r2
   14206:	d129      	bne.n	1425c <__aeabi_ddiv+0x164>
   14208:	2200      	movs	r2, #0
   1420a:	4693      	mov	fp, r2
   1420c:	3202      	adds	r2, #2
   1420e:	e7b1      	b.n	14174 <__aeabi_ddiv+0x7c>
   14210:	4659      	mov	r1, fp
   14212:	4301      	orrs	r1, r0
   14214:	d01e      	beq.n	14254 <__aeabi_ddiv+0x15c>
   14216:	465b      	mov	r3, fp
   14218:	2b00      	cmp	r3, #0
   1421a:	d100      	bne.n	1421e <__aeabi_ddiv+0x126>
   1421c:	e19e      	b.n	1455c <__aeabi_ddiv+0x464>
   1421e:	4658      	mov	r0, fp
   14220:	f001 f97c 	bl	1551c <__clzsi2>
   14224:	0003      	movs	r3, r0
   14226:	3b0b      	subs	r3, #11
   14228:	2b1c      	cmp	r3, #28
   1422a:	dd00      	ble.n	1422e <__aeabi_ddiv+0x136>
   1422c:	e18f      	b.n	1454e <__aeabi_ddiv+0x456>
   1422e:	0002      	movs	r2, r0
   14230:	4659      	mov	r1, fp
   14232:	3a08      	subs	r2, #8
   14234:	4091      	lsls	r1, r2
   14236:	468b      	mov	fp, r1
   14238:	211d      	movs	r1, #29
   1423a:	1acb      	subs	r3, r1, r3
   1423c:	4651      	mov	r1, sl
   1423e:	40d9      	lsrs	r1, r3
   14240:	000b      	movs	r3, r1
   14242:	4659      	mov	r1, fp
   14244:	430b      	orrs	r3, r1
   14246:	4651      	mov	r1, sl
   14248:	469b      	mov	fp, r3
   1424a:	4091      	lsls	r1, r2
   1424c:	4b26      	ldr	r3, [pc, #152]	; (142e8 <__aeabi_ddiv+0x1f0>)
   1424e:	2200      	movs	r2, #0
   14250:	1a1b      	subs	r3, r3, r0
   14252:	e78f      	b.n	14174 <__aeabi_ddiv+0x7c>
   14254:	2300      	movs	r3, #0
   14256:	2201      	movs	r2, #1
   14258:	469b      	mov	fp, r3
   1425a:	e78b      	b.n	14174 <__aeabi_ddiv+0x7c>
   1425c:	4651      	mov	r1, sl
   1425e:	2203      	movs	r2, #3
   14260:	e788      	b.n	14174 <__aeabi_ddiv+0x7c>
   14262:	2300      	movs	r3, #0
   14264:	4698      	mov	r8, r3
   14266:	3301      	adds	r3, #1
   14268:	2604      	movs	r6, #4
   1426a:	2400      	movs	r4, #0
   1426c:	9303      	str	r3, [sp, #12]
   1426e:	e767      	b.n	14140 <__aeabi_ddiv+0x48>
   14270:	2303      	movs	r3, #3
   14272:	46b1      	mov	r9, r6
   14274:	9303      	str	r3, [sp, #12]
   14276:	260c      	movs	r6, #12
   14278:	e762      	b.n	14140 <__aeabi_ddiv+0x48>
   1427a:	2a03      	cmp	r2, #3
   1427c:	d100      	bne.n	14280 <__aeabi_ddiv+0x188>
   1427e:	e25c      	b.n	1473a <__aeabi_ddiv+0x642>
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	2a01      	cmp	r2, #1
   14284:	d000      	beq.n	14288 <__aeabi_ddiv+0x190>
   14286:	e1e4      	b.n	14652 <__aeabi_ddiv+0x55a>
   14288:	4013      	ands	r3, r2
   1428a:	469c      	mov	ip, r3
   1428c:	2300      	movs	r3, #0
   1428e:	2400      	movs	r4, #0
   14290:	2200      	movs	r2, #0
   14292:	4698      	mov	r8, r3
   14294:	2100      	movs	r1, #0
   14296:	0312      	lsls	r2, r2, #12
   14298:	0b13      	lsrs	r3, r2, #12
   1429a:	0d0a      	lsrs	r2, r1, #20
   1429c:	0512      	lsls	r2, r2, #20
   1429e:	431a      	orrs	r2, r3
   142a0:	0523      	lsls	r3, r4, #20
   142a2:	4c12      	ldr	r4, [pc, #72]	; (142ec <__aeabi_ddiv+0x1f4>)
   142a4:	4640      	mov	r0, r8
   142a6:	4022      	ands	r2, r4
   142a8:	4313      	orrs	r3, r2
   142aa:	4662      	mov	r2, ip
   142ac:	005b      	lsls	r3, r3, #1
   142ae:	07d2      	lsls	r2, r2, #31
   142b0:	085b      	lsrs	r3, r3, #1
   142b2:	4313      	orrs	r3, r2
   142b4:	0019      	movs	r1, r3
   142b6:	b007      	add	sp, #28
   142b8:	bc3c      	pop	{r2, r3, r4, r5}
   142ba:	4690      	mov	r8, r2
   142bc:	4699      	mov	r9, r3
   142be:	46a2      	mov	sl, r4
   142c0:	46ab      	mov	fp, r5
   142c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142c4:	2300      	movs	r3, #0
   142c6:	2280      	movs	r2, #128	; 0x80
   142c8:	469c      	mov	ip, r3
   142ca:	0312      	lsls	r2, r2, #12
   142cc:	4698      	mov	r8, r3
   142ce:	4c03      	ldr	r4, [pc, #12]	; (142dc <__aeabi_ddiv+0x1e4>)
   142d0:	e7e0      	b.n	14294 <__aeabi_ddiv+0x19c>
   142d2:	2300      	movs	r3, #0
   142d4:	4c01      	ldr	r4, [pc, #4]	; (142dc <__aeabi_ddiv+0x1e4>)
   142d6:	2200      	movs	r2, #0
   142d8:	4698      	mov	r8, r3
   142da:	e7db      	b.n	14294 <__aeabi_ddiv+0x19c>
   142dc:	000007ff 	.word	0x000007ff
   142e0:	fffffc01 	.word	0xfffffc01
   142e4:	0001deb8 	.word	0x0001deb8
   142e8:	fffffc0d 	.word	0xfffffc0d
   142ec:	800fffff 	.word	0x800fffff
   142f0:	45d9      	cmp	r9, fp
   142f2:	d900      	bls.n	142f6 <__aeabi_ddiv+0x1fe>
   142f4:	e139      	b.n	1456a <__aeabi_ddiv+0x472>
   142f6:	d100      	bne.n	142fa <__aeabi_ddiv+0x202>
   142f8:	e134      	b.n	14564 <__aeabi_ddiv+0x46c>
   142fa:	2300      	movs	r3, #0
   142fc:	4646      	mov	r6, r8
   142fe:	464d      	mov	r5, r9
   14300:	469a      	mov	sl, r3
   14302:	3c01      	subs	r4, #1
   14304:	465b      	mov	r3, fp
   14306:	0e0a      	lsrs	r2, r1, #24
   14308:	021b      	lsls	r3, r3, #8
   1430a:	431a      	orrs	r2, r3
   1430c:	020b      	lsls	r3, r1, #8
   1430e:	0c17      	lsrs	r7, r2, #16
   14310:	9303      	str	r3, [sp, #12]
   14312:	0413      	lsls	r3, r2, #16
   14314:	0c1b      	lsrs	r3, r3, #16
   14316:	0039      	movs	r1, r7
   14318:	0028      	movs	r0, r5
   1431a:	4690      	mov	r8, r2
   1431c:	9301      	str	r3, [sp, #4]
   1431e:	f7fe f9f5 	bl	1270c <__udivsi3>
   14322:	0002      	movs	r2, r0
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	4683      	mov	fp, r0
   14328:	435a      	muls	r2, r3
   1432a:	0028      	movs	r0, r5
   1432c:	0039      	movs	r1, r7
   1432e:	4691      	mov	r9, r2
   14330:	f7fe fa72 	bl	12818 <__aeabi_uidivmod>
   14334:	0c35      	lsrs	r5, r6, #16
   14336:	0409      	lsls	r1, r1, #16
   14338:	430d      	orrs	r5, r1
   1433a:	45a9      	cmp	r9, r5
   1433c:	d90d      	bls.n	1435a <__aeabi_ddiv+0x262>
   1433e:	465b      	mov	r3, fp
   14340:	4445      	add	r5, r8
   14342:	3b01      	subs	r3, #1
   14344:	45a8      	cmp	r8, r5
   14346:	d900      	bls.n	1434a <__aeabi_ddiv+0x252>
   14348:	e13a      	b.n	145c0 <__aeabi_ddiv+0x4c8>
   1434a:	45a9      	cmp	r9, r5
   1434c:	d800      	bhi.n	14350 <__aeabi_ddiv+0x258>
   1434e:	e137      	b.n	145c0 <__aeabi_ddiv+0x4c8>
   14350:	2302      	movs	r3, #2
   14352:	425b      	negs	r3, r3
   14354:	469c      	mov	ip, r3
   14356:	4445      	add	r5, r8
   14358:	44e3      	add	fp, ip
   1435a:	464b      	mov	r3, r9
   1435c:	1aeb      	subs	r3, r5, r3
   1435e:	0039      	movs	r1, r7
   14360:	0018      	movs	r0, r3
   14362:	9304      	str	r3, [sp, #16]
   14364:	f7fe f9d2 	bl	1270c <__udivsi3>
   14368:	9b01      	ldr	r3, [sp, #4]
   1436a:	0005      	movs	r5, r0
   1436c:	4343      	muls	r3, r0
   1436e:	0039      	movs	r1, r7
   14370:	9804      	ldr	r0, [sp, #16]
   14372:	4699      	mov	r9, r3
   14374:	f7fe fa50 	bl	12818 <__aeabi_uidivmod>
   14378:	0433      	lsls	r3, r6, #16
   1437a:	0409      	lsls	r1, r1, #16
   1437c:	0c1b      	lsrs	r3, r3, #16
   1437e:	430b      	orrs	r3, r1
   14380:	4599      	cmp	r9, r3
   14382:	d909      	bls.n	14398 <__aeabi_ddiv+0x2a0>
   14384:	4443      	add	r3, r8
   14386:	1e6a      	subs	r2, r5, #1
   14388:	4598      	cmp	r8, r3
   1438a:	d900      	bls.n	1438e <__aeabi_ddiv+0x296>
   1438c:	e11a      	b.n	145c4 <__aeabi_ddiv+0x4cc>
   1438e:	4599      	cmp	r9, r3
   14390:	d800      	bhi.n	14394 <__aeabi_ddiv+0x29c>
   14392:	e117      	b.n	145c4 <__aeabi_ddiv+0x4cc>
   14394:	3d02      	subs	r5, #2
   14396:	4443      	add	r3, r8
   14398:	464a      	mov	r2, r9
   1439a:	1a9b      	subs	r3, r3, r2
   1439c:	465a      	mov	r2, fp
   1439e:	0412      	lsls	r2, r2, #16
   143a0:	432a      	orrs	r2, r5
   143a2:	9903      	ldr	r1, [sp, #12]
   143a4:	4693      	mov	fp, r2
   143a6:	0c10      	lsrs	r0, r2, #16
   143a8:	0c0a      	lsrs	r2, r1, #16
   143aa:	4691      	mov	r9, r2
   143ac:	0409      	lsls	r1, r1, #16
   143ae:	465a      	mov	r2, fp
   143b0:	0c09      	lsrs	r1, r1, #16
   143b2:	464e      	mov	r6, r9
   143b4:	000d      	movs	r5, r1
   143b6:	0412      	lsls	r2, r2, #16
   143b8:	0c12      	lsrs	r2, r2, #16
   143ba:	4345      	muls	r5, r0
   143bc:	9105      	str	r1, [sp, #20]
   143be:	4351      	muls	r1, r2
   143c0:	4372      	muls	r2, r6
   143c2:	4370      	muls	r0, r6
   143c4:	1952      	adds	r2, r2, r5
   143c6:	0c0e      	lsrs	r6, r1, #16
   143c8:	18b2      	adds	r2, r6, r2
   143ca:	4295      	cmp	r5, r2
   143cc:	d903      	bls.n	143d6 <__aeabi_ddiv+0x2de>
   143ce:	2580      	movs	r5, #128	; 0x80
   143d0:	026d      	lsls	r5, r5, #9
   143d2:	46ac      	mov	ip, r5
   143d4:	4460      	add	r0, ip
   143d6:	0c15      	lsrs	r5, r2, #16
   143d8:	0409      	lsls	r1, r1, #16
   143da:	0412      	lsls	r2, r2, #16
   143dc:	0c09      	lsrs	r1, r1, #16
   143de:	1828      	adds	r0, r5, r0
   143e0:	1852      	adds	r2, r2, r1
   143e2:	4283      	cmp	r3, r0
   143e4:	d200      	bcs.n	143e8 <__aeabi_ddiv+0x2f0>
   143e6:	e0ce      	b.n	14586 <__aeabi_ddiv+0x48e>
   143e8:	d100      	bne.n	143ec <__aeabi_ddiv+0x2f4>
   143ea:	e0c8      	b.n	1457e <__aeabi_ddiv+0x486>
   143ec:	1a1d      	subs	r5, r3, r0
   143ee:	4653      	mov	r3, sl
   143f0:	1a9e      	subs	r6, r3, r2
   143f2:	45b2      	cmp	sl, r6
   143f4:	4192      	sbcs	r2, r2
   143f6:	4252      	negs	r2, r2
   143f8:	1aab      	subs	r3, r5, r2
   143fa:	469a      	mov	sl, r3
   143fc:	4598      	cmp	r8, r3
   143fe:	d100      	bne.n	14402 <__aeabi_ddiv+0x30a>
   14400:	e117      	b.n	14632 <__aeabi_ddiv+0x53a>
   14402:	0039      	movs	r1, r7
   14404:	0018      	movs	r0, r3
   14406:	f7fe f981 	bl	1270c <__udivsi3>
   1440a:	9b01      	ldr	r3, [sp, #4]
   1440c:	0005      	movs	r5, r0
   1440e:	4343      	muls	r3, r0
   14410:	0039      	movs	r1, r7
   14412:	4650      	mov	r0, sl
   14414:	9304      	str	r3, [sp, #16]
   14416:	f7fe f9ff 	bl	12818 <__aeabi_uidivmod>
   1441a:	9804      	ldr	r0, [sp, #16]
   1441c:	040b      	lsls	r3, r1, #16
   1441e:	0c31      	lsrs	r1, r6, #16
   14420:	4319      	orrs	r1, r3
   14422:	4288      	cmp	r0, r1
   14424:	d909      	bls.n	1443a <__aeabi_ddiv+0x342>
   14426:	4441      	add	r1, r8
   14428:	1e6b      	subs	r3, r5, #1
   1442a:	4588      	cmp	r8, r1
   1442c:	d900      	bls.n	14430 <__aeabi_ddiv+0x338>
   1442e:	e107      	b.n	14640 <__aeabi_ddiv+0x548>
   14430:	4288      	cmp	r0, r1
   14432:	d800      	bhi.n	14436 <__aeabi_ddiv+0x33e>
   14434:	e104      	b.n	14640 <__aeabi_ddiv+0x548>
   14436:	3d02      	subs	r5, #2
   14438:	4441      	add	r1, r8
   1443a:	9b04      	ldr	r3, [sp, #16]
   1443c:	1acb      	subs	r3, r1, r3
   1443e:	0018      	movs	r0, r3
   14440:	0039      	movs	r1, r7
   14442:	9304      	str	r3, [sp, #16]
   14444:	f7fe f962 	bl	1270c <__udivsi3>
   14448:	9b01      	ldr	r3, [sp, #4]
   1444a:	4682      	mov	sl, r0
   1444c:	4343      	muls	r3, r0
   1444e:	0039      	movs	r1, r7
   14450:	9804      	ldr	r0, [sp, #16]
   14452:	9301      	str	r3, [sp, #4]
   14454:	f7fe f9e0 	bl	12818 <__aeabi_uidivmod>
   14458:	9801      	ldr	r0, [sp, #4]
   1445a:	040b      	lsls	r3, r1, #16
   1445c:	0431      	lsls	r1, r6, #16
   1445e:	0c09      	lsrs	r1, r1, #16
   14460:	4319      	orrs	r1, r3
   14462:	4288      	cmp	r0, r1
   14464:	d90d      	bls.n	14482 <__aeabi_ddiv+0x38a>
   14466:	4653      	mov	r3, sl
   14468:	4441      	add	r1, r8
   1446a:	3b01      	subs	r3, #1
   1446c:	4588      	cmp	r8, r1
   1446e:	d900      	bls.n	14472 <__aeabi_ddiv+0x37a>
   14470:	e0e8      	b.n	14644 <__aeabi_ddiv+0x54c>
   14472:	4288      	cmp	r0, r1
   14474:	d800      	bhi.n	14478 <__aeabi_ddiv+0x380>
   14476:	e0e5      	b.n	14644 <__aeabi_ddiv+0x54c>
   14478:	2302      	movs	r3, #2
   1447a:	425b      	negs	r3, r3
   1447c:	469c      	mov	ip, r3
   1447e:	4441      	add	r1, r8
   14480:	44e2      	add	sl, ip
   14482:	9b01      	ldr	r3, [sp, #4]
   14484:	042d      	lsls	r5, r5, #16
   14486:	1ace      	subs	r6, r1, r3
   14488:	4651      	mov	r1, sl
   1448a:	4329      	orrs	r1, r5
   1448c:	9d05      	ldr	r5, [sp, #20]
   1448e:	464f      	mov	r7, r9
   14490:	002a      	movs	r2, r5
   14492:	040b      	lsls	r3, r1, #16
   14494:	0c08      	lsrs	r0, r1, #16
   14496:	0c1b      	lsrs	r3, r3, #16
   14498:	435a      	muls	r2, r3
   1449a:	4345      	muls	r5, r0
   1449c:	437b      	muls	r3, r7
   1449e:	4378      	muls	r0, r7
   144a0:	195b      	adds	r3, r3, r5
   144a2:	0c17      	lsrs	r7, r2, #16
   144a4:	18fb      	adds	r3, r7, r3
   144a6:	429d      	cmp	r5, r3
   144a8:	d903      	bls.n	144b2 <__aeabi_ddiv+0x3ba>
   144aa:	2580      	movs	r5, #128	; 0x80
   144ac:	026d      	lsls	r5, r5, #9
   144ae:	46ac      	mov	ip, r5
   144b0:	4460      	add	r0, ip
   144b2:	0c1d      	lsrs	r5, r3, #16
   144b4:	0412      	lsls	r2, r2, #16
   144b6:	041b      	lsls	r3, r3, #16
   144b8:	0c12      	lsrs	r2, r2, #16
   144ba:	1828      	adds	r0, r5, r0
   144bc:	189b      	adds	r3, r3, r2
   144be:	4286      	cmp	r6, r0
   144c0:	d200      	bcs.n	144c4 <__aeabi_ddiv+0x3cc>
   144c2:	e093      	b.n	145ec <__aeabi_ddiv+0x4f4>
   144c4:	d100      	bne.n	144c8 <__aeabi_ddiv+0x3d0>
   144c6:	e08e      	b.n	145e6 <__aeabi_ddiv+0x4ee>
   144c8:	2301      	movs	r3, #1
   144ca:	4319      	orrs	r1, r3
   144cc:	4ba0      	ldr	r3, [pc, #640]	; (14750 <__aeabi_ddiv+0x658>)
   144ce:	18e3      	adds	r3, r4, r3
   144d0:	2b00      	cmp	r3, #0
   144d2:	dc00      	bgt.n	144d6 <__aeabi_ddiv+0x3de>
   144d4:	e099      	b.n	1460a <__aeabi_ddiv+0x512>
   144d6:	074a      	lsls	r2, r1, #29
   144d8:	d000      	beq.n	144dc <__aeabi_ddiv+0x3e4>
   144da:	e09e      	b.n	1461a <__aeabi_ddiv+0x522>
   144dc:	465a      	mov	r2, fp
   144de:	01d2      	lsls	r2, r2, #7
   144e0:	d506      	bpl.n	144f0 <__aeabi_ddiv+0x3f8>
   144e2:	465a      	mov	r2, fp
   144e4:	4b9b      	ldr	r3, [pc, #620]	; (14754 <__aeabi_ddiv+0x65c>)
   144e6:	401a      	ands	r2, r3
   144e8:	2380      	movs	r3, #128	; 0x80
   144ea:	4693      	mov	fp, r2
   144ec:	00db      	lsls	r3, r3, #3
   144ee:	18e3      	adds	r3, r4, r3
   144f0:	4a99      	ldr	r2, [pc, #612]	; (14758 <__aeabi_ddiv+0x660>)
   144f2:	4293      	cmp	r3, r2
   144f4:	dd68      	ble.n	145c8 <__aeabi_ddiv+0x4d0>
   144f6:	2301      	movs	r3, #1
   144f8:	9a02      	ldr	r2, [sp, #8]
   144fa:	4c98      	ldr	r4, [pc, #608]	; (1475c <__aeabi_ddiv+0x664>)
   144fc:	401a      	ands	r2, r3
   144fe:	2300      	movs	r3, #0
   14500:	4694      	mov	ip, r2
   14502:	4698      	mov	r8, r3
   14504:	2200      	movs	r2, #0
   14506:	e6c5      	b.n	14294 <__aeabi_ddiv+0x19c>
   14508:	2280      	movs	r2, #128	; 0x80
   1450a:	464b      	mov	r3, r9
   1450c:	0312      	lsls	r2, r2, #12
   1450e:	4213      	tst	r3, r2
   14510:	d00a      	beq.n	14528 <__aeabi_ddiv+0x430>
   14512:	465b      	mov	r3, fp
   14514:	4213      	tst	r3, r2
   14516:	d106      	bne.n	14526 <__aeabi_ddiv+0x42e>
   14518:	431a      	orrs	r2, r3
   1451a:	0312      	lsls	r2, r2, #12
   1451c:	0b12      	lsrs	r2, r2, #12
   1451e:	46ac      	mov	ip, r5
   14520:	4688      	mov	r8, r1
   14522:	4c8e      	ldr	r4, [pc, #568]	; (1475c <__aeabi_ddiv+0x664>)
   14524:	e6b6      	b.n	14294 <__aeabi_ddiv+0x19c>
   14526:	464b      	mov	r3, r9
   14528:	431a      	orrs	r2, r3
   1452a:	0312      	lsls	r2, r2, #12
   1452c:	0b12      	lsrs	r2, r2, #12
   1452e:	46bc      	mov	ip, r7
   14530:	4c8a      	ldr	r4, [pc, #552]	; (1475c <__aeabi_ddiv+0x664>)
   14532:	e6af      	b.n	14294 <__aeabi_ddiv+0x19c>
   14534:	0003      	movs	r3, r0
   14536:	465a      	mov	r2, fp
   14538:	3b28      	subs	r3, #40	; 0x28
   1453a:	409a      	lsls	r2, r3
   1453c:	2300      	movs	r3, #0
   1453e:	4691      	mov	r9, r2
   14540:	4698      	mov	r8, r3
   14542:	e657      	b.n	141f4 <__aeabi_ddiv+0xfc>
   14544:	4658      	mov	r0, fp
   14546:	f000 ffe9 	bl	1551c <__clzsi2>
   1454a:	3020      	adds	r0, #32
   1454c:	e640      	b.n	141d0 <__aeabi_ddiv+0xd8>
   1454e:	0003      	movs	r3, r0
   14550:	4652      	mov	r2, sl
   14552:	3b28      	subs	r3, #40	; 0x28
   14554:	409a      	lsls	r2, r3
   14556:	2100      	movs	r1, #0
   14558:	4693      	mov	fp, r2
   1455a:	e677      	b.n	1424c <__aeabi_ddiv+0x154>
   1455c:	f000 ffde 	bl	1551c <__clzsi2>
   14560:	3020      	adds	r0, #32
   14562:	e65f      	b.n	14224 <__aeabi_ddiv+0x12c>
   14564:	4588      	cmp	r8, r1
   14566:	d200      	bcs.n	1456a <__aeabi_ddiv+0x472>
   14568:	e6c7      	b.n	142fa <__aeabi_ddiv+0x202>
   1456a:	464b      	mov	r3, r9
   1456c:	07de      	lsls	r6, r3, #31
   1456e:	085d      	lsrs	r5, r3, #1
   14570:	4643      	mov	r3, r8
   14572:	085b      	lsrs	r3, r3, #1
   14574:	431e      	orrs	r6, r3
   14576:	4643      	mov	r3, r8
   14578:	07db      	lsls	r3, r3, #31
   1457a:	469a      	mov	sl, r3
   1457c:	e6c2      	b.n	14304 <__aeabi_ddiv+0x20c>
   1457e:	2500      	movs	r5, #0
   14580:	4592      	cmp	sl, r2
   14582:	d300      	bcc.n	14586 <__aeabi_ddiv+0x48e>
   14584:	e733      	b.n	143ee <__aeabi_ddiv+0x2f6>
   14586:	9e03      	ldr	r6, [sp, #12]
   14588:	4659      	mov	r1, fp
   1458a:	46b4      	mov	ip, r6
   1458c:	44e2      	add	sl, ip
   1458e:	45b2      	cmp	sl, r6
   14590:	41ad      	sbcs	r5, r5
   14592:	426d      	negs	r5, r5
   14594:	4445      	add	r5, r8
   14596:	18eb      	adds	r3, r5, r3
   14598:	3901      	subs	r1, #1
   1459a:	4598      	cmp	r8, r3
   1459c:	d207      	bcs.n	145ae <__aeabi_ddiv+0x4b6>
   1459e:	4298      	cmp	r0, r3
   145a0:	d900      	bls.n	145a4 <__aeabi_ddiv+0x4ac>
   145a2:	e07f      	b.n	146a4 <__aeabi_ddiv+0x5ac>
   145a4:	d100      	bne.n	145a8 <__aeabi_ddiv+0x4b0>
   145a6:	e0bc      	b.n	14722 <__aeabi_ddiv+0x62a>
   145a8:	1a1d      	subs	r5, r3, r0
   145aa:	468b      	mov	fp, r1
   145ac:	e71f      	b.n	143ee <__aeabi_ddiv+0x2f6>
   145ae:	4598      	cmp	r8, r3
   145b0:	d1fa      	bne.n	145a8 <__aeabi_ddiv+0x4b0>
   145b2:	9d03      	ldr	r5, [sp, #12]
   145b4:	4555      	cmp	r5, sl
   145b6:	d9f2      	bls.n	1459e <__aeabi_ddiv+0x4a6>
   145b8:	4643      	mov	r3, r8
   145ba:	468b      	mov	fp, r1
   145bc:	1a1d      	subs	r5, r3, r0
   145be:	e716      	b.n	143ee <__aeabi_ddiv+0x2f6>
   145c0:	469b      	mov	fp, r3
   145c2:	e6ca      	b.n	1435a <__aeabi_ddiv+0x262>
   145c4:	0015      	movs	r5, r2
   145c6:	e6e7      	b.n	14398 <__aeabi_ddiv+0x2a0>
   145c8:	465a      	mov	r2, fp
   145ca:	08c9      	lsrs	r1, r1, #3
   145cc:	0752      	lsls	r2, r2, #29
   145ce:	430a      	orrs	r2, r1
   145d0:	055b      	lsls	r3, r3, #21
   145d2:	4690      	mov	r8, r2
   145d4:	0d5c      	lsrs	r4, r3, #21
   145d6:	465a      	mov	r2, fp
   145d8:	2301      	movs	r3, #1
   145da:	9902      	ldr	r1, [sp, #8]
   145dc:	0252      	lsls	r2, r2, #9
   145de:	4019      	ands	r1, r3
   145e0:	0b12      	lsrs	r2, r2, #12
   145e2:	468c      	mov	ip, r1
   145e4:	e656      	b.n	14294 <__aeabi_ddiv+0x19c>
   145e6:	2b00      	cmp	r3, #0
   145e8:	d100      	bne.n	145ec <__aeabi_ddiv+0x4f4>
   145ea:	e76f      	b.n	144cc <__aeabi_ddiv+0x3d4>
   145ec:	4446      	add	r6, r8
   145ee:	1e4a      	subs	r2, r1, #1
   145f0:	45b0      	cmp	r8, r6
   145f2:	d929      	bls.n	14648 <__aeabi_ddiv+0x550>
   145f4:	0011      	movs	r1, r2
   145f6:	4286      	cmp	r6, r0
   145f8:	d000      	beq.n	145fc <__aeabi_ddiv+0x504>
   145fa:	e765      	b.n	144c8 <__aeabi_ddiv+0x3d0>
   145fc:	9a03      	ldr	r2, [sp, #12]
   145fe:	4293      	cmp	r3, r2
   14600:	d000      	beq.n	14604 <__aeabi_ddiv+0x50c>
   14602:	e761      	b.n	144c8 <__aeabi_ddiv+0x3d0>
   14604:	e762      	b.n	144cc <__aeabi_ddiv+0x3d4>
   14606:	2101      	movs	r1, #1
   14608:	4249      	negs	r1, r1
   1460a:	2001      	movs	r0, #1
   1460c:	1ac2      	subs	r2, r0, r3
   1460e:	2a38      	cmp	r2, #56	; 0x38
   14610:	dd21      	ble.n	14656 <__aeabi_ddiv+0x55e>
   14612:	9b02      	ldr	r3, [sp, #8]
   14614:	4003      	ands	r3, r0
   14616:	469c      	mov	ip, r3
   14618:	e638      	b.n	1428c <__aeabi_ddiv+0x194>
   1461a:	220f      	movs	r2, #15
   1461c:	400a      	ands	r2, r1
   1461e:	2a04      	cmp	r2, #4
   14620:	d100      	bne.n	14624 <__aeabi_ddiv+0x52c>
   14622:	e75b      	b.n	144dc <__aeabi_ddiv+0x3e4>
   14624:	000a      	movs	r2, r1
   14626:	1d11      	adds	r1, r2, #4
   14628:	4291      	cmp	r1, r2
   1462a:	4192      	sbcs	r2, r2
   1462c:	4252      	negs	r2, r2
   1462e:	4493      	add	fp, r2
   14630:	e754      	b.n	144dc <__aeabi_ddiv+0x3e4>
   14632:	4b47      	ldr	r3, [pc, #284]	; (14750 <__aeabi_ddiv+0x658>)
   14634:	18e3      	adds	r3, r4, r3
   14636:	2b00      	cmp	r3, #0
   14638:	dde5      	ble.n	14606 <__aeabi_ddiv+0x50e>
   1463a:	2201      	movs	r2, #1
   1463c:	4252      	negs	r2, r2
   1463e:	e7f2      	b.n	14626 <__aeabi_ddiv+0x52e>
   14640:	001d      	movs	r5, r3
   14642:	e6fa      	b.n	1443a <__aeabi_ddiv+0x342>
   14644:	469a      	mov	sl, r3
   14646:	e71c      	b.n	14482 <__aeabi_ddiv+0x38a>
   14648:	42b0      	cmp	r0, r6
   1464a:	d839      	bhi.n	146c0 <__aeabi_ddiv+0x5c8>
   1464c:	d06e      	beq.n	1472c <__aeabi_ddiv+0x634>
   1464e:	0011      	movs	r1, r2
   14650:	e73a      	b.n	144c8 <__aeabi_ddiv+0x3d0>
   14652:	9302      	str	r3, [sp, #8]
   14654:	e73a      	b.n	144cc <__aeabi_ddiv+0x3d4>
   14656:	2a1f      	cmp	r2, #31
   14658:	dc3c      	bgt.n	146d4 <__aeabi_ddiv+0x5dc>
   1465a:	2320      	movs	r3, #32
   1465c:	1a9b      	subs	r3, r3, r2
   1465e:	000c      	movs	r4, r1
   14660:	4658      	mov	r0, fp
   14662:	4099      	lsls	r1, r3
   14664:	4098      	lsls	r0, r3
   14666:	1e4b      	subs	r3, r1, #1
   14668:	4199      	sbcs	r1, r3
   1466a:	465b      	mov	r3, fp
   1466c:	40d4      	lsrs	r4, r2
   1466e:	40d3      	lsrs	r3, r2
   14670:	4320      	orrs	r0, r4
   14672:	4308      	orrs	r0, r1
   14674:	001a      	movs	r2, r3
   14676:	0743      	lsls	r3, r0, #29
   14678:	d009      	beq.n	1468e <__aeabi_ddiv+0x596>
   1467a:	230f      	movs	r3, #15
   1467c:	4003      	ands	r3, r0
   1467e:	2b04      	cmp	r3, #4
   14680:	d005      	beq.n	1468e <__aeabi_ddiv+0x596>
   14682:	0001      	movs	r1, r0
   14684:	1d08      	adds	r0, r1, #4
   14686:	4288      	cmp	r0, r1
   14688:	419b      	sbcs	r3, r3
   1468a:	425b      	negs	r3, r3
   1468c:	18d2      	adds	r2, r2, r3
   1468e:	0213      	lsls	r3, r2, #8
   14690:	d53a      	bpl.n	14708 <__aeabi_ddiv+0x610>
   14692:	2301      	movs	r3, #1
   14694:	9a02      	ldr	r2, [sp, #8]
   14696:	2401      	movs	r4, #1
   14698:	401a      	ands	r2, r3
   1469a:	2300      	movs	r3, #0
   1469c:	4694      	mov	ip, r2
   1469e:	4698      	mov	r8, r3
   146a0:	2200      	movs	r2, #0
   146a2:	e5f7      	b.n	14294 <__aeabi_ddiv+0x19c>
   146a4:	2102      	movs	r1, #2
   146a6:	4249      	negs	r1, r1
   146a8:	468c      	mov	ip, r1
   146aa:	9d03      	ldr	r5, [sp, #12]
   146ac:	44e3      	add	fp, ip
   146ae:	46ac      	mov	ip, r5
   146b0:	44e2      	add	sl, ip
   146b2:	45aa      	cmp	sl, r5
   146b4:	41ad      	sbcs	r5, r5
   146b6:	426d      	negs	r5, r5
   146b8:	4445      	add	r5, r8
   146ba:	18ed      	adds	r5, r5, r3
   146bc:	1a2d      	subs	r5, r5, r0
   146be:	e696      	b.n	143ee <__aeabi_ddiv+0x2f6>
   146c0:	1e8a      	subs	r2, r1, #2
   146c2:	9903      	ldr	r1, [sp, #12]
   146c4:	004d      	lsls	r5, r1, #1
   146c6:	428d      	cmp	r5, r1
   146c8:	4189      	sbcs	r1, r1
   146ca:	4249      	negs	r1, r1
   146cc:	4441      	add	r1, r8
   146ce:	1876      	adds	r6, r6, r1
   146d0:	9503      	str	r5, [sp, #12]
   146d2:	e78f      	b.n	145f4 <__aeabi_ddiv+0x4fc>
   146d4:	201f      	movs	r0, #31
   146d6:	4240      	negs	r0, r0
   146d8:	1ac3      	subs	r3, r0, r3
   146da:	4658      	mov	r0, fp
   146dc:	40d8      	lsrs	r0, r3
   146de:	0003      	movs	r3, r0
   146e0:	2a20      	cmp	r2, #32
   146e2:	d028      	beq.n	14736 <__aeabi_ddiv+0x63e>
   146e4:	2040      	movs	r0, #64	; 0x40
   146e6:	465d      	mov	r5, fp
   146e8:	1a82      	subs	r2, r0, r2
   146ea:	4095      	lsls	r5, r2
   146ec:	4329      	orrs	r1, r5
   146ee:	1e4a      	subs	r2, r1, #1
   146f0:	4191      	sbcs	r1, r2
   146f2:	4319      	orrs	r1, r3
   146f4:	2307      	movs	r3, #7
   146f6:	2200      	movs	r2, #0
   146f8:	400b      	ands	r3, r1
   146fa:	d009      	beq.n	14710 <__aeabi_ddiv+0x618>
   146fc:	230f      	movs	r3, #15
   146fe:	2200      	movs	r2, #0
   14700:	400b      	ands	r3, r1
   14702:	0008      	movs	r0, r1
   14704:	2b04      	cmp	r3, #4
   14706:	d1bd      	bne.n	14684 <__aeabi_ddiv+0x58c>
   14708:	0001      	movs	r1, r0
   1470a:	0753      	lsls	r3, r2, #29
   1470c:	0252      	lsls	r2, r2, #9
   1470e:	0b12      	lsrs	r2, r2, #12
   14710:	08c9      	lsrs	r1, r1, #3
   14712:	4319      	orrs	r1, r3
   14714:	2301      	movs	r3, #1
   14716:	4688      	mov	r8, r1
   14718:	9902      	ldr	r1, [sp, #8]
   1471a:	2400      	movs	r4, #0
   1471c:	4019      	ands	r1, r3
   1471e:	468c      	mov	ip, r1
   14720:	e5b8      	b.n	14294 <__aeabi_ddiv+0x19c>
   14722:	4552      	cmp	r2, sl
   14724:	d8be      	bhi.n	146a4 <__aeabi_ddiv+0x5ac>
   14726:	468b      	mov	fp, r1
   14728:	2500      	movs	r5, #0
   1472a:	e660      	b.n	143ee <__aeabi_ddiv+0x2f6>
   1472c:	9d03      	ldr	r5, [sp, #12]
   1472e:	429d      	cmp	r5, r3
   14730:	d3c6      	bcc.n	146c0 <__aeabi_ddiv+0x5c8>
   14732:	0011      	movs	r1, r2
   14734:	e762      	b.n	145fc <__aeabi_ddiv+0x504>
   14736:	2500      	movs	r5, #0
   14738:	e7d8      	b.n	146ec <__aeabi_ddiv+0x5f4>
   1473a:	2280      	movs	r2, #128	; 0x80
   1473c:	465b      	mov	r3, fp
   1473e:	0312      	lsls	r2, r2, #12
   14740:	431a      	orrs	r2, r3
   14742:	9b01      	ldr	r3, [sp, #4]
   14744:	0312      	lsls	r2, r2, #12
   14746:	0b12      	lsrs	r2, r2, #12
   14748:	469c      	mov	ip, r3
   1474a:	4688      	mov	r8, r1
   1474c:	4c03      	ldr	r4, [pc, #12]	; (1475c <__aeabi_ddiv+0x664>)
   1474e:	e5a1      	b.n	14294 <__aeabi_ddiv+0x19c>
   14750:	000003ff 	.word	0x000003ff
   14754:	feffffff 	.word	0xfeffffff
   14758:	000007fe 	.word	0x000007fe
   1475c:	000007ff 	.word	0x000007ff

00014760 <__aeabi_dmul>:
   14760:	b5f0      	push	{r4, r5, r6, r7, lr}
   14762:	4657      	mov	r7, sl
   14764:	4645      	mov	r5, r8
   14766:	46de      	mov	lr, fp
   14768:	464e      	mov	r6, r9
   1476a:	b5e0      	push	{r5, r6, r7, lr}
   1476c:	030c      	lsls	r4, r1, #12
   1476e:	4698      	mov	r8, r3
   14770:	004e      	lsls	r6, r1, #1
   14772:	0b23      	lsrs	r3, r4, #12
   14774:	b087      	sub	sp, #28
   14776:	0007      	movs	r7, r0
   14778:	4692      	mov	sl, r2
   1477a:	469b      	mov	fp, r3
   1477c:	0d76      	lsrs	r6, r6, #21
   1477e:	0fcd      	lsrs	r5, r1, #31
   14780:	2e00      	cmp	r6, #0
   14782:	d06b      	beq.n	1485c <__aeabi_dmul+0xfc>
   14784:	4b6d      	ldr	r3, [pc, #436]	; (1493c <__aeabi_dmul+0x1dc>)
   14786:	429e      	cmp	r6, r3
   14788:	d035      	beq.n	147f6 <__aeabi_dmul+0x96>
   1478a:	2480      	movs	r4, #128	; 0x80
   1478c:	465b      	mov	r3, fp
   1478e:	0f42      	lsrs	r2, r0, #29
   14790:	0424      	lsls	r4, r4, #16
   14792:	00db      	lsls	r3, r3, #3
   14794:	4314      	orrs	r4, r2
   14796:	431c      	orrs	r4, r3
   14798:	00c3      	lsls	r3, r0, #3
   1479a:	4699      	mov	r9, r3
   1479c:	4b68      	ldr	r3, [pc, #416]	; (14940 <__aeabi_dmul+0x1e0>)
   1479e:	46a3      	mov	fp, r4
   147a0:	469c      	mov	ip, r3
   147a2:	2300      	movs	r3, #0
   147a4:	2700      	movs	r7, #0
   147a6:	4466      	add	r6, ip
   147a8:	9302      	str	r3, [sp, #8]
   147aa:	4643      	mov	r3, r8
   147ac:	031c      	lsls	r4, r3, #12
   147ae:	005a      	lsls	r2, r3, #1
   147b0:	0fdb      	lsrs	r3, r3, #31
   147b2:	4650      	mov	r0, sl
   147b4:	0b24      	lsrs	r4, r4, #12
   147b6:	0d52      	lsrs	r2, r2, #21
   147b8:	4698      	mov	r8, r3
   147ba:	d100      	bne.n	147be <__aeabi_dmul+0x5e>
   147bc:	e076      	b.n	148ac <__aeabi_dmul+0x14c>
   147be:	4b5f      	ldr	r3, [pc, #380]	; (1493c <__aeabi_dmul+0x1dc>)
   147c0:	429a      	cmp	r2, r3
   147c2:	d06d      	beq.n	148a0 <__aeabi_dmul+0x140>
   147c4:	2380      	movs	r3, #128	; 0x80
   147c6:	0f41      	lsrs	r1, r0, #29
   147c8:	041b      	lsls	r3, r3, #16
   147ca:	430b      	orrs	r3, r1
   147cc:	495c      	ldr	r1, [pc, #368]	; (14940 <__aeabi_dmul+0x1e0>)
   147ce:	00e4      	lsls	r4, r4, #3
   147d0:	468c      	mov	ip, r1
   147d2:	431c      	orrs	r4, r3
   147d4:	00c3      	lsls	r3, r0, #3
   147d6:	2000      	movs	r0, #0
   147d8:	4462      	add	r2, ip
   147da:	4641      	mov	r1, r8
   147dc:	18b6      	adds	r6, r6, r2
   147de:	4069      	eors	r1, r5
   147e0:	1c72      	adds	r2, r6, #1
   147e2:	9101      	str	r1, [sp, #4]
   147e4:	4694      	mov	ip, r2
   147e6:	4307      	orrs	r7, r0
   147e8:	2f0f      	cmp	r7, #15
   147ea:	d900      	bls.n	147ee <__aeabi_dmul+0x8e>
   147ec:	e0b0      	b.n	14950 <__aeabi_dmul+0x1f0>
   147ee:	4a55      	ldr	r2, [pc, #340]	; (14944 <__aeabi_dmul+0x1e4>)
   147f0:	00bf      	lsls	r7, r7, #2
   147f2:	59d2      	ldr	r2, [r2, r7]
   147f4:	4697      	mov	pc, r2
   147f6:	465b      	mov	r3, fp
   147f8:	4303      	orrs	r3, r0
   147fa:	4699      	mov	r9, r3
   147fc:	d000      	beq.n	14800 <__aeabi_dmul+0xa0>
   147fe:	e087      	b.n	14910 <__aeabi_dmul+0x1b0>
   14800:	2300      	movs	r3, #0
   14802:	469b      	mov	fp, r3
   14804:	3302      	adds	r3, #2
   14806:	2708      	movs	r7, #8
   14808:	9302      	str	r3, [sp, #8]
   1480a:	e7ce      	b.n	147aa <__aeabi_dmul+0x4a>
   1480c:	4642      	mov	r2, r8
   1480e:	9201      	str	r2, [sp, #4]
   14810:	2802      	cmp	r0, #2
   14812:	d067      	beq.n	148e4 <__aeabi_dmul+0x184>
   14814:	2803      	cmp	r0, #3
   14816:	d100      	bne.n	1481a <__aeabi_dmul+0xba>
   14818:	e20e      	b.n	14c38 <__aeabi_dmul+0x4d8>
   1481a:	2801      	cmp	r0, #1
   1481c:	d000      	beq.n	14820 <__aeabi_dmul+0xc0>
   1481e:	e162      	b.n	14ae6 <__aeabi_dmul+0x386>
   14820:	2300      	movs	r3, #0
   14822:	2400      	movs	r4, #0
   14824:	2200      	movs	r2, #0
   14826:	4699      	mov	r9, r3
   14828:	9901      	ldr	r1, [sp, #4]
   1482a:	4001      	ands	r1, r0
   1482c:	b2cd      	uxtb	r5, r1
   1482e:	2100      	movs	r1, #0
   14830:	0312      	lsls	r2, r2, #12
   14832:	0d0b      	lsrs	r3, r1, #20
   14834:	0b12      	lsrs	r2, r2, #12
   14836:	051b      	lsls	r3, r3, #20
   14838:	4313      	orrs	r3, r2
   1483a:	4a43      	ldr	r2, [pc, #268]	; (14948 <__aeabi_dmul+0x1e8>)
   1483c:	0524      	lsls	r4, r4, #20
   1483e:	4013      	ands	r3, r2
   14840:	431c      	orrs	r4, r3
   14842:	0064      	lsls	r4, r4, #1
   14844:	07ed      	lsls	r5, r5, #31
   14846:	0864      	lsrs	r4, r4, #1
   14848:	432c      	orrs	r4, r5
   1484a:	4648      	mov	r0, r9
   1484c:	0021      	movs	r1, r4
   1484e:	b007      	add	sp, #28
   14850:	bc3c      	pop	{r2, r3, r4, r5}
   14852:	4690      	mov	r8, r2
   14854:	4699      	mov	r9, r3
   14856:	46a2      	mov	sl, r4
   14858:	46ab      	mov	fp, r5
   1485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1485c:	4303      	orrs	r3, r0
   1485e:	4699      	mov	r9, r3
   14860:	d04f      	beq.n	14902 <__aeabi_dmul+0x1a2>
   14862:	465b      	mov	r3, fp
   14864:	2b00      	cmp	r3, #0
   14866:	d100      	bne.n	1486a <__aeabi_dmul+0x10a>
   14868:	e189      	b.n	14b7e <__aeabi_dmul+0x41e>
   1486a:	4658      	mov	r0, fp
   1486c:	f000 fe56 	bl	1551c <__clzsi2>
   14870:	0003      	movs	r3, r0
   14872:	3b0b      	subs	r3, #11
   14874:	2b1c      	cmp	r3, #28
   14876:	dd00      	ble.n	1487a <__aeabi_dmul+0x11a>
   14878:	e17a      	b.n	14b70 <__aeabi_dmul+0x410>
   1487a:	221d      	movs	r2, #29
   1487c:	1ad3      	subs	r3, r2, r3
   1487e:	003a      	movs	r2, r7
   14880:	0001      	movs	r1, r0
   14882:	465c      	mov	r4, fp
   14884:	40da      	lsrs	r2, r3
   14886:	3908      	subs	r1, #8
   14888:	408c      	lsls	r4, r1
   1488a:	0013      	movs	r3, r2
   1488c:	408f      	lsls	r7, r1
   1488e:	4323      	orrs	r3, r4
   14890:	469b      	mov	fp, r3
   14892:	46b9      	mov	r9, r7
   14894:	2300      	movs	r3, #0
   14896:	4e2d      	ldr	r6, [pc, #180]	; (1494c <__aeabi_dmul+0x1ec>)
   14898:	2700      	movs	r7, #0
   1489a:	1a36      	subs	r6, r6, r0
   1489c:	9302      	str	r3, [sp, #8]
   1489e:	e784      	b.n	147aa <__aeabi_dmul+0x4a>
   148a0:	4653      	mov	r3, sl
   148a2:	4323      	orrs	r3, r4
   148a4:	d12a      	bne.n	148fc <__aeabi_dmul+0x19c>
   148a6:	2400      	movs	r4, #0
   148a8:	2002      	movs	r0, #2
   148aa:	e796      	b.n	147da <__aeabi_dmul+0x7a>
   148ac:	4653      	mov	r3, sl
   148ae:	4323      	orrs	r3, r4
   148b0:	d020      	beq.n	148f4 <__aeabi_dmul+0x194>
   148b2:	2c00      	cmp	r4, #0
   148b4:	d100      	bne.n	148b8 <__aeabi_dmul+0x158>
   148b6:	e157      	b.n	14b68 <__aeabi_dmul+0x408>
   148b8:	0020      	movs	r0, r4
   148ba:	f000 fe2f 	bl	1551c <__clzsi2>
   148be:	0003      	movs	r3, r0
   148c0:	3b0b      	subs	r3, #11
   148c2:	2b1c      	cmp	r3, #28
   148c4:	dd00      	ble.n	148c8 <__aeabi_dmul+0x168>
   148c6:	e149      	b.n	14b5c <__aeabi_dmul+0x3fc>
   148c8:	211d      	movs	r1, #29
   148ca:	1acb      	subs	r3, r1, r3
   148cc:	4651      	mov	r1, sl
   148ce:	0002      	movs	r2, r0
   148d0:	40d9      	lsrs	r1, r3
   148d2:	4653      	mov	r3, sl
   148d4:	3a08      	subs	r2, #8
   148d6:	4094      	lsls	r4, r2
   148d8:	4093      	lsls	r3, r2
   148da:	430c      	orrs	r4, r1
   148dc:	4a1b      	ldr	r2, [pc, #108]	; (1494c <__aeabi_dmul+0x1ec>)
   148de:	1a12      	subs	r2, r2, r0
   148e0:	2000      	movs	r0, #0
   148e2:	e77a      	b.n	147da <__aeabi_dmul+0x7a>
   148e4:	2501      	movs	r5, #1
   148e6:	9b01      	ldr	r3, [sp, #4]
   148e8:	4c14      	ldr	r4, [pc, #80]	; (1493c <__aeabi_dmul+0x1dc>)
   148ea:	401d      	ands	r5, r3
   148ec:	2300      	movs	r3, #0
   148ee:	2200      	movs	r2, #0
   148f0:	4699      	mov	r9, r3
   148f2:	e79c      	b.n	1482e <__aeabi_dmul+0xce>
   148f4:	2400      	movs	r4, #0
   148f6:	2200      	movs	r2, #0
   148f8:	2001      	movs	r0, #1
   148fa:	e76e      	b.n	147da <__aeabi_dmul+0x7a>
   148fc:	4653      	mov	r3, sl
   148fe:	2003      	movs	r0, #3
   14900:	e76b      	b.n	147da <__aeabi_dmul+0x7a>
   14902:	2300      	movs	r3, #0
   14904:	469b      	mov	fp, r3
   14906:	3301      	adds	r3, #1
   14908:	2704      	movs	r7, #4
   1490a:	2600      	movs	r6, #0
   1490c:	9302      	str	r3, [sp, #8]
   1490e:	e74c      	b.n	147aa <__aeabi_dmul+0x4a>
   14910:	2303      	movs	r3, #3
   14912:	4681      	mov	r9, r0
   14914:	270c      	movs	r7, #12
   14916:	9302      	str	r3, [sp, #8]
   14918:	e747      	b.n	147aa <__aeabi_dmul+0x4a>
   1491a:	2280      	movs	r2, #128	; 0x80
   1491c:	2300      	movs	r3, #0
   1491e:	2500      	movs	r5, #0
   14920:	0312      	lsls	r2, r2, #12
   14922:	4699      	mov	r9, r3
   14924:	4c05      	ldr	r4, [pc, #20]	; (1493c <__aeabi_dmul+0x1dc>)
   14926:	e782      	b.n	1482e <__aeabi_dmul+0xce>
   14928:	465c      	mov	r4, fp
   1492a:	464b      	mov	r3, r9
   1492c:	9802      	ldr	r0, [sp, #8]
   1492e:	e76f      	b.n	14810 <__aeabi_dmul+0xb0>
   14930:	465c      	mov	r4, fp
   14932:	464b      	mov	r3, r9
   14934:	9501      	str	r5, [sp, #4]
   14936:	9802      	ldr	r0, [sp, #8]
   14938:	e76a      	b.n	14810 <__aeabi_dmul+0xb0>
   1493a:	46c0      	nop			; (mov r8, r8)
   1493c:	000007ff 	.word	0x000007ff
   14940:	fffffc01 	.word	0xfffffc01
   14944:	0001def8 	.word	0x0001def8
   14948:	800fffff 	.word	0x800fffff
   1494c:	fffffc0d 	.word	0xfffffc0d
   14950:	464a      	mov	r2, r9
   14952:	4649      	mov	r1, r9
   14954:	0c17      	lsrs	r7, r2, #16
   14956:	0c1a      	lsrs	r2, r3, #16
   14958:	041b      	lsls	r3, r3, #16
   1495a:	0c1b      	lsrs	r3, r3, #16
   1495c:	0408      	lsls	r0, r1, #16
   1495e:	0019      	movs	r1, r3
   14960:	0c00      	lsrs	r0, r0, #16
   14962:	4341      	muls	r1, r0
   14964:	0015      	movs	r5, r2
   14966:	4688      	mov	r8, r1
   14968:	0019      	movs	r1, r3
   1496a:	437d      	muls	r5, r7
   1496c:	4379      	muls	r1, r7
   1496e:	9503      	str	r5, [sp, #12]
   14970:	4689      	mov	r9, r1
   14972:	0029      	movs	r1, r5
   14974:	0015      	movs	r5, r2
   14976:	4345      	muls	r5, r0
   14978:	444d      	add	r5, r9
   1497a:	9502      	str	r5, [sp, #8]
   1497c:	4645      	mov	r5, r8
   1497e:	0c2d      	lsrs	r5, r5, #16
   14980:	46aa      	mov	sl, r5
   14982:	9d02      	ldr	r5, [sp, #8]
   14984:	4455      	add	r5, sl
   14986:	45a9      	cmp	r9, r5
   14988:	d906      	bls.n	14998 <__aeabi_dmul+0x238>
   1498a:	468a      	mov	sl, r1
   1498c:	2180      	movs	r1, #128	; 0x80
   1498e:	0249      	lsls	r1, r1, #9
   14990:	4689      	mov	r9, r1
   14992:	44ca      	add	sl, r9
   14994:	4651      	mov	r1, sl
   14996:	9103      	str	r1, [sp, #12]
   14998:	0c29      	lsrs	r1, r5, #16
   1499a:	9104      	str	r1, [sp, #16]
   1499c:	4641      	mov	r1, r8
   1499e:	0409      	lsls	r1, r1, #16
   149a0:	042d      	lsls	r5, r5, #16
   149a2:	0c09      	lsrs	r1, r1, #16
   149a4:	4688      	mov	r8, r1
   149a6:	0029      	movs	r1, r5
   149a8:	0c25      	lsrs	r5, r4, #16
   149aa:	0424      	lsls	r4, r4, #16
   149ac:	4441      	add	r1, r8
   149ae:	0c24      	lsrs	r4, r4, #16
   149b0:	9105      	str	r1, [sp, #20]
   149b2:	0021      	movs	r1, r4
   149b4:	4341      	muls	r1, r0
   149b6:	4688      	mov	r8, r1
   149b8:	0021      	movs	r1, r4
   149ba:	4379      	muls	r1, r7
   149bc:	468a      	mov	sl, r1
   149be:	4368      	muls	r0, r5
   149c0:	4641      	mov	r1, r8
   149c2:	4450      	add	r0, sl
   149c4:	4681      	mov	r9, r0
   149c6:	0c08      	lsrs	r0, r1, #16
   149c8:	4448      	add	r0, r9
   149ca:	436f      	muls	r7, r5
   149cc:	4582      	cmp	sl, r0
   149ce:	d903      	bls.n	149d8 <__aeabi_dmul+0x278>
   149d0:	2180      	movs	r1, #128	; 0x80
   149d2:	0249      	lsls	r1, r1, #9
   149d4:	4689      	mov	r9, r1
   149d6:	444f      	add	r7, r9
   149d8:	0c01      	lsrs	r1, r0, #16
   149da:	4689      	mov	r9, r1
   149dc:	0039      	movs	r1, r7
   149de:	4449      	add	r1, r9
   149e0:	9102      	str	r1, [sp, #8]
   149e2:	4641      	mov	r1, r8
   149e4:	040f      	lsls	r7, r1, #16
   149e6:	9904      	ldr	r1, [sp, #16]
   149e8:	0c3f      	lsrs	r7, r7, #16
   149ea:	4688      	mov	r8, r1
   149ec:	0400      	lsls	r0, r0, #16
   149ee:	19c0      	adds	r0, r0, r7
   149f0:	4480      	add	r8, r0
   149f2:	4641      	mov	r1, r8
   149f4:	9104      	str	r1, [sp, #16]
   149f6:	4659      	mov	r1, fp
   149f8:	0c0f      	lsrs	r7, r1, #16
   149fa:	0409      	lsls	r1, r1, #16
   149fc:	0c09      	lsrs	r1, r1, #16
   149fe:	4688      	mov	r8, r1
   14a00:	4359      	muls	r1, r3
   14a02:	468a      	mov	sl, r1
   14a04:	0039      	movs	r1, r7
   14a06:	4351      	muls	r1, r2
   14a08:	4689      	mov	r9, r1
   14a0a:	4641      	mov	r1, r8
   14a0c:	434a      	muls	r2, r1
   14a0e:	4651      	mov	r1, sl
   14a10:	0c09      	lsrs	r1, r1, #16
   14a12:	468b      	mov	fp, r1
   14a14:	437b      	muls	r3, r7
   14a16:	18d2      	adds	r2, r2, r3
   14a18:	445a      	add	r2, fp
   14a1a:	4293      	cmp	r3, r2
   14a1c:	d903      	bls.n	14a26 <__aeabi_dmul+0x2c6>
   14a1e:	2380      	movs	r3, #128	; 0x80
   14a20:	025b      	lsls	r3, r3, #9
   14a22:	469b      	mov	fp, r3
   14a24:	44d9      	add	r9, fp
   14a26:	4651      	mov	r1, sl
   14a28:	0409      	lsls	r1, r1, #16
   14a2a:	0c09      	lsrs	r1, r1, #16
   14a2c:	468a      	mov	sl, r1
   14a2e:	4641      	mov	r1, r8
   14a30:	4361      	muls	r1, r4
   14a32:	437c      	muls	r4, r7
   14a34:	0c13      	lsrs	r3, r2, #16
   14a36:	0412      	lsls	r2, r2, #16
   14a38:	444b      	add	r3, r9
   14a3a:	4452      	add	r2, sl
   14a3c:	46a1      	mov	r9, r4
   14a3e:	468a      	mov	sl, r1
   14a40:	003c      	movs	r4, r7
   14a42:	4641      	mov	r1, r8
   14a44:	436c      	muls	r4, r5
   14a46:	434d      	muls	r5, r1
   14a48:	4651      	mov	r1, sl
   14a4a:	444d      	add	r5, r9
   14a4c:	0c0f      	lsrs	r7, r1, #16
   14a4e:	197d      	adds	r5, r7, r5
   14a50:	45a9      	cmp	r9, r5
   14a52:	d903      	bls.n	14a5c <__aeabi_dmul+0x2fc>
   14a54:	2180      	movs	r1, #128	; 0x80
   14a56:	0249      	lsls	r1, r1, #9
   14a58:	4688      	mov	r8, r1
   14a5a:	4444      	add	r4, r8
   14a5c:	9f04      	ldr	r7, [sp, #16]
   14a5e:	9903      	ldr	r1, [sp, #12]
   14a60:	46b8      	mov	r8, r7
   14a62:	4441      	add	r1, r8
   14a64:	468b      	mov	fp, r1
   14a66:	4583      	cmp	fp, r0
   14a68:	4180      	sbcs	r0, r0
   14a6a:	4241      	negs	r1, r0
   14a6c:	4688      	mov	r8, r1
   14a6e:	4651      	mov	r1, sl
   14a70:	0408      	lsls	r0, r1, #16
   14a72:	042f      	lsls	r7, r5, #16
   14a74:	0c00      	lsrs	r0, r0, #16
   14a76:	183f      	adds	r7, r7, r0
   14a78:	4658      	mov	r0, fp
   14a7a:	9902      	ldr	r1, [sp, #8]
   14a7c:	1810      	adds	r0, r2, r0
   14a7e:	4689      	mov	r9, r1
   14a80:	4290      	cmp	r0, r2
   14a82:	4192      	sbcs	r2, r2
   14a84:	444f      	add	r7, r9
   14a86:	46ba      	mov	sl, r7
   14a88:	4252      	negs	r2, r2
   14a8a:	4699      	mov	r9, r3
   14a8c:	4693      	mov	fp, r2
   14a8e:	44c2      	add	sl, r8
   14a90:	44d1      	add	r9, sl
   14a92:	44cb      	add	fp, r9
   14a94:	428f      	cmp	r7, r1
   14a96:	41bf      	sbcs	r7, r7
   14a98:	45c2      	cmp	sl, r8
   14a9a:	4189      	sbcs	r1, r1
   14a9c:	4599      	cmp	r9, r3
   14a9e:	419b      	sbcs	r3, r3
   14aa0:	4593      	cmp	fp, r2
   14aa2:	4192      	sbcs	r2, r2
   14aa4:	427f      	negs	r7, r7
   14aa6:	4249      	negs	r1, r1
   14aa8:	0c2d      	lsrs	r5, r5, #16
   14aaa:	4252      	negs	r2, r2
   14aac:	430f      	orrs	r7, r1
   14aae:	425b      	negs	r3, r3
   14ab0:	4313      	orrs	r3, r2
   14ab2:	197f      	adds	r7, r7, r5
   14ab4:	18ff      	adds	r7, r7, r3
   14ab6:	465b      	mov	r3, fp
   14ab8:	193c      	adds	r4, r7, r4
   14aba:	0ddb      	lsrs	r3, r3, #23
   14abc:	9a05      	ldr	r2, [sp, #20]
   14abe:	0264      	lsls	r4, r4, #9
   14ac0:	431c      	orrs	r4, r3
   14ac2:	0243      	lsls	r3, r0, #9
   14ac4:	4313      	orrs	r3, r2
   14ac6:	1e5d      	subs	r5, r3, #1
   14ac8:	41ab      	sbcs	r3, r5
   14aca:	465a      	mov	r2, fp
   14acc:	0dc0      	lsrs	r0, r0, #23
   14ace:	4303      	orrs	r3, r0
   14ad0:	0252      	lsls	r2, r2, #9
   14ad2:	4313      	orrs	r3, r2
   14ad4:	01e2      	lsls	r2, r4, #7
   14ad6:	d556      	bpl.n	14b86 <__aeabi_dmul+0x426>
   14ad8:	2001      	movs	r0, #1
   14ada:	085a      	lsrs	r2, r3, #1
   14adc:	4003      	ands	r3, r0
   14ade:	4313      	orrs	r3, r2
   14ae0:	07e2      	lsls	r2, r4, #31
   14ae2:	4313      	orrs	r3, r2
   14ae4:	0864      	lsrs	r4, r4, #1
   14ae6:	485a      	ldr	r0, [pc, #360]	; (14c50 <__aeabi_dmul+0x4f0>)
   14ae8:	4460      	add	r0, ip
   14aea:	2800      	cmp	r0, #0
   14aec:	dd4d      	ble.n	14b8a <__aeabi_dmul+0x42a>
   14aee:	075a      	lsls	r2, r3, #29
   14af0:	d009      	beq.n	14b06 <__aeabi_dmul+0x3a6>
   14af2:	220f      	movs	r2, #15
   14af4:	401a      	ands	r2, r3
   14af6:	2a04      	cmp	r2, #4
   14af8:	d005      	beq.n	14b06 <__aeabi_dmul+0x3a6>
   14afa:	1d1a      	adds	r2, r3, #4
   14afc:	429a      	cmp	r2, r3
   14afe:	419b      	sbcs	r3, r3
   14b00:	425b      	negs	r3, r3
   14b02:	18e4      	adds	r4, r4, r3
   14b04:	0013      	movs	r3, r2
   14b06:	01e2      	lsls	r2, r4, #7
   14b08:	d504      	bpl.n	14b14 <__aeabi_dmul+0x3b4>
   14b0a:	2080      	movs	r0, #128	; 0x80
   14b0c:	4a51      	ldr	r2, [pc, #324]	; (14c54 <__aeabi_dmul+0x4f4>)
   14b0e:	00c0      	lsls	r0, r0, #3
   14b10:	4014      	ands	r4, r2
   14b12:	4460      	add	r0, ip
   14b14:	4a50      	ldr	r2, [pc, #320]	; (14c58 <__aeabi_dmul+0x4f8>)
   14b16:	4290      	cmp	r0, r2
   14b18:	dd00      	ble.n	14b1c <__aeabi_dmul+0x3bc>
   14b1a:	e6e3      	b.n	148e4 <__aeabi_dmul+0x184>
   14b1c:	2501      	movs	r5, #1
   14b1e:	08db      	lsrs	r3, r3, #3
   14b20:	0762      	lsls	r2, r4, #29
   14b22:	431a      	orrs	r2, r3
   14b24:	0264      	lsls	r4, r4, #9
   14b26:	9b01      	ldr	r3, [sp, #4]
   14b28:	4691      	mov	r9, r2
   14b2a:	0b22      	lsrs	r2, r4, #12
   14b2c:	0544      	lsls	r4, r0, #21
   14b2e:	0d64      	lsrs	r4, r4, #21
   14b30:	401d      	ands	r5, r3
   14b32:	e67c      	b.n	1482e <__aeabi_dmul+0xce>
   14b34:	2280      	movs	r2, #128	; 0x80
   14b36:	4659      	mov	r1, fp
   14b38:	0312      	lsls	r2, r2, #12
   14b3a:	4211      	tst	r1, r2
   14b3c:	d008      	beq.n	14b50 <__aeabi_dmul+0x3f0>
   14b3e:	4214      	tst	r4, r2
   14b40:	d106      	bne.n	14b50 <__aeabi_dmul+0x3f0>
   14b42:	4322      	orrs	r2, r4
   14b44:	0312      	lsls	r2, r2, #12
   14b46:	0b12      	lsrs	r2, r2, #12
   14b48:	4645      	mov	r5, r8
   14b4a:	4699      	mov	r9, r3
   14b4c:	4c43      	ldr	r4, [pc, #268]	; (14c5c <__aeabi_dmul+0x4fc>)
   14b4e:	e66e      	b.n	1482e <__aeabi_dmul+0xce>
   14b50:	465b      	mov	r3, fp
   14b52:	431a      	orrs	r2, r3
   14b54:	0312      	lsls	r2, r2, #12
   14b56:	0b12      	lsrs	r2, r2, #12
   14b58:	4c40      	ldr	r4, [pc, #256]	; (14c5c <__aeabi_dmul+0x4fc>)
   14b5a:	e668      	b.n	1482e <__aeabi_dmul+0xce>
   14b5c:	0003      	movs	r3, r0
   14b5e:	4654      	mov	r4, sl
   14b60:	3b28      	subs	r3, #40	; 0x28
   14b62:	409c      	lsls	r4, r3
   14b64:	2300      	movs	r3, #0
   14b66:	e6b9      	b.n	148dc <__aeabi_dmul+0x17c>
   14b68:	f000 fcd8 	bl	1551c <__clzsi2>
   14b6c:	3020      	adds	r0, #32
   14b6e:	e6a6      	b.n	148be <__aeabi_dmul+0x15e>
   14b70:	0003      	movs	r3, r0
   14b72:	3b28      	subs	r3, #40	; 0x28
   14b74:	409f      	lsls	r7, r3
   14b76:	2300      	movs	r3, #0
   14b78:	46bb      	mov	fp, r7
   14b7a:	4699      	mov	r9, r3
   14b7c:	e68a      	b.n	14894 <__aeabi_dmul+0x134>
   14b7e:	f000 fccd 	bl	1551c <__clzsi2>
   14b82:	3020      	adds	r0, #32
   14b84:	e674      	b.n	14870 <__aeabi_dmul+0x110>
   14b86:	46b4      	mov	ip, r6
   14b88:	e7ad      	b.n	14ae6 <__aeabi_dmul+0x386>
   14b8a:	2501      	movs	r5, #1
   14b8c:	1a2a      	subs	r2, r5, r0
   14b8e:	2a38      	cmp	r2, #56	; 0x38
   14b90:	dd06      	ble.n	14ba0 <__aeabi_dmul+0x440>
   14b92:	9b01      	ldr	r3, [sp, #4]
   14b94:	2400      	movs	r4, #0
   14b96:	401d      	ands	r5, r3
   14b98:	2300      	movs	r3, #0
   14b9a:	2200      	movs	r2, #0
   14b9c:	4699      	mov	r9, r3
   14b9e:	e646      	b.n	1482e <__aeabi_dmul+0xce>
   14ba0:	2a1f      	cmp	r2, #31
   14ba2:	dc21      	bgt.n	14be8 <__aeabi_dmul+0x488>
   14ba4:	2520      	movs	r5, #32
   14ba6:	0020      	movs	r0, r4
   14ba8:	1aad      	subs	r5, r5, r2
   14baa:	001e      	movs	r6, r3
   14bac:	40ab      	lsls	r3, r5
   14bae:	40a8      	lsls	r0, r5
   14bb0:	40d6      	lsrs	r6, r2
   14bb2:	1e5d      	subs	r5, r3, #1
   14bb4:	41ab      	sbcs	r3, r5
   14bb6:	4330      	orrs	r0, r6
   14bb8:	4318      	orrs	r0, r3
   14bba:	40d4      	lsrs	r4, r2
   14bbc:	0743      	lsls	r3, r0, #29
   14bbe:	d009      	beq.n	14bd4 <__aeabi_dmul+0x474>
   14bc0:	230f      	movs	r3, #15
   14bc2:	4003      	ands	r3, r0
   14bc4:	2b04      	cmp	r3, #4
   14bc6:	d005      	beq.n	14bd4 <__aeabi_dmul+0x474>
   14bc8:	0003      	movs	r3, r0
   14bca:	1d18      	adds	r0, r3, #4
   14bcc:	4298      	cmp	r0, r3
   14bce:	419b      	sbcs	r3, r3
   14bd0:	425b      	negs	r3, r3
   14bd2:	18e4      	adds	r4, r4, r3
   14bd4:	0223      	lsls	r3, r4, #8
   14bd6:	d521      	bpl.n	14c1c <__aeabi_dmul+0x4bc>
   14bd8:	2501      	movs	r5, #1
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	2401      	movs	r4, #1
   14bde:	401d      	ands	r5, r3
   14be0:	2300      	movs	r3, #0
   14be2:	2200      	movs	r2, #0
   14be4:	4699      	mov	r9, r3
   14be6:	e622      	b.n	1482e <__aeabi_dmul+0xce>
   14be8:	251f      	movs	r5, #31
   14bea:	0021      	movs	r1, r4
   14bec:	426d      	negs	r5, r5
   14bee:	1a28      	subs	r0, r5, r0
   14bf0:	40c1      	lsrs	r1, r0
   14bf2:	0008      	movs	r0, r1
   14bf4:	2a20      	cmp	r2, #32
   14bf6:	d01d      	beq.n	14c34 <__aeabi_dmul+0x4d4>
   14bf8:	355f      	adds	r5, #95	; 0x5f
   14bfa:	1aaa      	subs	r2, r5, r2
   14bfc:	4094      	lsls	r4, r2
   14bfe:	4323      	orrs	r3, r4
   14c00:	1e5c      	subs	r4, r3, #1
   14c02:	41a3      	sbcs	r3, r4
   14c04:	2507      	movs	r5, #7
   14c06:	4303      	orrs	r3, r0
   14c08:	401d      	ands	r5, r3
   14c0a:	2200      	movs	r2, #0
   14c0c:	2d00      	cmp	r5, #0
   14c0e:	d009      	beq.n	14c24 <__aeabi_dmul+0x4c4>
   14c10:	220f      	movs	r2, #15
   14c12:	2400      	movs	r4, #0
   14c14:	401a      	ands	r2, r3
   14c16:	0018      	movs	r0, r3
   14c18:	2a04      	cmp	r2, #4
   14c1a:	d1d6      	bne.n	14bca <__aeabi_dmul+0x46a>
   14c1c:	0003      	movs	r3, r0
   14c1e:	0765      	lsls	r5, r4, #29
   14c20:	0264      	lsls	r4, r4, #9
   14c22:	0b22      	lsrs	r2, r4, #12
   14c24:	08db      	lsrs	r3, r3, #3
   14c26:	432b      	orrs	r3, r5
   14c28:	2501      	movs	r5, #1
   14c2a:	4699      	mov	r9, r3
   14c2c:	9b01      	ldr	r3, [sp, #4]
   14c2e:	2400      	movs	r4, #0
   14c30:	401d      	ands	r5, r3
   14c32:	e5fc      	b.n	1482e <__aeabi_dmul+0xce>
   14c34:	2400      	movs	r4, #0
   14c36:	e7e2      	b.n	14bfe <__aeabi_dmul+0x49e>
   14c38:	2280      	movs	r2, #128	; 0x80
   14c3a:	2501      	movs	r5, #1
   14c3c:	0312      	lsls	r2, r2, #12
   14c3e:	4322      	orrs	r2, r4
   14c40:	9901      	ldr	r1, [sp, #4]
   14c42:	0312      	lsls	r2, r2, #12
   14c44:	0b12      	lsrs	r2, r2, #12
   14c46:	400d      	ands	r5, r1
   14c48:	4699      	mov	r9, r3
   14c4a:	4c04      	ldr	r4, [pc, #16]	; (14c5c <__aeabi_dmul+0x4fc>)
   14c4c:	e5ef      	b.n	1482e <__aeabi_dmul+0xce>
   14c4e:	46c0      	nop			; (mov r8, r8)
   14c50:	000003ff 	.word	0x000003ff
   14c54:	feffffff 	.word	0xfeffffff
   14c58:	000007fe 	.word	0x000007fe
   14c5c:	000007ff 	.word	0x000007ff

00014c60 <__aeabi_dsub>:
   14c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c62:	4646      	mov	r6, r8
   14c64:	46d6      	mov	lr, sl
   14c66:	464f      	mov	r7, r9
   14c68:	030c      	lsls	r4, r1, #12
   14c6a:	b5c0      	push	{r6, r7, lr}
   14c6c:	0fcd      	lsrs	r5, r1, #31
   14c6e:	004e      	lsls	r6, r1, #1
   14c70:	0a61      	lsrs	r1, r4, #9
   14c72:	0f44      	lsrs	r4, r0, #29
   14c74:	430c      	orrs	r4, r1
   14c76:	00c1      	lsls	r1, r0, #3
   14c78:	0058      	lsls	r0, r3, #1
   14c7a:	0d40      	lsrs	r0, r0, #21
   14c7c:	4684      	mov	ip, r0
   14c7e:	468a      	mov	sl, r1
   14c80:	000f      	movs	r7, r1
   14c82:	0319      	lsls	r1, r3, #12
   14c84:	0f50      	lsrs	r0, r2, #29
   14c86:	0a49      	lsrs	r1, r1, #9
   14c88:	4301      	orrs	r1, r0
   14c8a:	48c6      	ldr	r0, [pc, #792]	; (14fa4 <__aeabi_dsub+0x344>)
   14c8c:	0d76      	lsrs	r6, r6, #21
   14c8e:	46a8      	mov	r8, r5
   14c90:	0fdb      	lsrs	r3, r3, #31
   14c92:	00d2      	lsls	r2, r2, #3
   14c94:	4584      	cmp	ip, r0
   14c96:	d100      	bne.n	14c9a <__aeabi_dsub+0x3a>
   14c98:	e0d8      	b.n	14e4c <__aeabi_dsub+0x1ec>
   14c9a:	2001      	movs	r0, #1
   14c9c:	4043      	eors	r3, r0
   14c9e:	42ab      	cmp	r3, r5
   14ca0:	d100      	bne.n	14ca4 <__aeabi_dsub+0x44>
   14ca2:	e0a6      	b.n	14df2 <__aeabi_dsub+0x192>
   14ca4:	4660      	mov	r0, ip
   14ca6:	1a35      	subs	r5, r6, r0
   14ca8:	2d00      	cmp	r5, #0
   14caa:	dc00      	bgt.n	14cae <__aeabi_dsub+0x4e>
   14cac:	e105      	b.n	14eba <__aeabi_dsub+0x25a>
   14cae:	2800      	cmp	r0, #0
   14cb0:	d110      	bne.n	14cd4 <__aeabi_dsub+0x74>
   14cb2:	000b      	movs	r3, r1
   14cb4:	4313      	orrs	r3, r2
   14cb6:	d100      	bne.n	14cba <__aeabi_dsub+0x5a>
   14cb8:	e0d7      	b.n	14e6a <__aeabi_dsub+0x20a>
   14cba:	1e6b      	subs	r3, r5, #1
   14cbc:	2b00      	cmp	r3, #0
   14cbe:	d000      	beq.n	14cc2 <__aeabi_dsub+0x62>
   14cc0:	e14b      	b.n	14f5a <__aeabi_dsub+0x2fa>
   14cc2:	4653      	mov	r3, sl
   14cc4:	1a9f      	subs	r7, r3, r2
   14cc6:	45ba      	cmp	sl, r7
   14cc8:	4180      	sbcs	r0, r0
   14cca:	1a64      	subs	r4, r4, r1
   14ccc:	4240      	negs	r0, r0
   14cce:	1a24      	subs	r4, r4, r0
   14cd0:	2601      	movs	r6, #1
   14cd2:	e01e      	b.n	14d12 <__aeabi_dsub+0xb2>
   14cd4:	4bb3      	ldr	r3, [pc, #716]	; (14fa4 <__aeabi_dsub+0x344>)
   14cd6:	429e      	cmp	r6, r3
   14cd8:	d048      	beq.n	14d6c <__aeabi_dsub+0x10c>
   14cda:	2380      	movs	r3, #128	; 0x80
   14cdc:	041b      	lsls	r3, r3, #16
   14cde:	4319      	orrs	r1, r3
   14ce0:	2d38      	cmp	r5, #56	; 0x38
   14ce2:	dd00      	ble.n	14ce6 <__aeabi_dsub+0x86>
   14ce4:	e119      	b.n	14f1a <__aeabi_dsub+0x2ba>
   14ce6:	2d1f      	cmp	r5, #31
   14ce8:	dd00      	ble.n	14cec <__aeabi_dsub+0x8c>
   14cea:	e14c      	b.n	14f86 <__aeabi_dsub+0x326>
   14cec:	2320      	movs	r3, #32
   14cee:	000f      	movs	r7, r1
   14cf0:	1b5b      	subs	r3, r3, r5
   14cf2:	0010      	movs	r0, r2
   14cf4:	409a      	lsls	r2, r3
   14cf6:	409f      	lsls	r7, r3
   14cf8:	40e8      	lsrs	r0, r5
   14cfa:	1e53      	subs	r3, r2, #1
   14cfc:	419a      	sbcs	r2, r3
   14cfe:	40e9      	lsrs	r1, r5
   14d00:	4307      	orrs	r7, r0
   14d02:	4317      	orrs	r7, r2
   14d04:	4653      	mov	r3, sl
   14d06:	1bdf      	subs	r7, r3, r7
   14d08:	1a61      	subs	r1, r4, r1
   14d0a:	45ba      	cmp	sl, r7
   14d0c:	41a4      	sbcs	r4, r4
   14d0e:	4264      	negs	r4, r4
   14d10:	1b0c      	subs	r4, r1, r4
   14d12:	0223      	lsls	r3, r4, #8
   14d14:	d400      	bmi.n	14d18 <__aeabi_dsub+0xb8>
   14d16:	e0c5      	b.n	14ea4 <__aeabi_dsub+0x244>
   14d18:	0264      	lsls	r4, r4, #9
   14d1a:	0a65      	lsrs	r5, r4, #9
   14d1c:	2d00      	cmp	r5, #0
   14d1e:	d100      	bne.n	14d22 <__aeabi_dsub+0xc2>
   14d20:	e0f6      	b.n	14f10 <__aeabi_dsub+0x2b0>
   14d22:	0028      	movs	r0, r5
   14d24:	f000 fbfa 	bl	1551c <__clzsi2>
   14d28:	0003      	movs	r3, r0
   14d2a:	3b08      	subs	r3, #8
   14d2c:	2b1f      	cmp	r3, #31
   14d2e:	dd00      	ble.n	14d32 <__aeabi_dsub+0xd2>
   14d30:	e0e9      	b.n	14f06 <__aeabi_dsub+0x2a6>
   14d32:	2220      	movs	r2, #32
   14d34:	003c      	movs	r4, r7
   14d36:	1ad2      	subs	r2, r2, r3
   14d38:	409d      	lsls	r5, r3
   14d3a:	40d4      	lsrs	r4, r2
   14d3c:	409f      	lsls	r7, r3
   14d3e:	4325      	orrs	r5, r4
   14d40:	429e      	cmp	r6, r3
   14d42:	dd00      	ble.n	14d46 <__aeabi_dsub+0xe6>
   14d44:	e0db      	b.n	14efe <__aeabi_dsub+0x29e>
   14d46:	1b9e      	subs	r6, r3, r6
   14d48:	1c73      	adds	r3, r6, #1
   14d4a:	2b1f      	cmp	r3, #31
   14d4c:	dd00      	ble.n	14d50 <__aeabi_dsub+0xf0>
   14d4e:	e10a      	b.n	14f66 <__aeabi_dsub+0x306>
   14d50:	2220      	movs	r2, #32
   14d52:	0038      	movs	r0, r7
   14d54:	1ad2      	subs	r2, r2, r3
   14d56:	0029      	movs	r1, r5
   14d58:	4097      	lsls	r7, r2
   14d5a:	002c      	movs	r4, r5
   14d5c:	4091      	lsls	r1, r2
   14d5e:	40d8      	lsrs	r0, r3
   14d60:	1e7a      	subs	r2, r7, #1
   14d62:	4197      	sbcs	r7, r2
   14d64:	40dc      	lsrs	r4, r3
   14d66:	2600      	movs	r6, #0
   14d68:	4301      	orrs	r1, r0
   14d6a:	430f      	orrs	r7, r1
   14d6c:	077b      	lsls	r3, r7, #29
   14d6e:	d009      	beq.n	14d84 <__aeabi_dsub+0x124>
   14d70:	230f      	movs	r3, #15
   14d72:	403b      	ands	r3, r7
   14d74:	2b04      	cmp	r3, #4
   14d76:	d005      	beq.n	14d84 <__aeabi_dsub+0x124>
   14d78:	1d3b      	adds	r3, r7, #4
   14d7a:	42bb      	cmp	r3, r7
   14d7c:	41bf      	sbcs	r7, r7
   14d7e:	427f      	negs	r7, r7
   14d80:	19e4      	adds	r4, r4, r7
   14d82:	001f      	movs	r7, r3
   14d84:	0223      	lsls	r3, r4, #8
   14d86:	d525      	bpl.n	14dd4 <__aeabi_dsub+0x174>
   14d88:	4b86      	ldr	r3, [pc, #536]	; (14fa4 <__aeabi_dsub+0x344>)
   14d8a:	3601      	adds	r6, #1
   14d8c:	429e      	cmp	r6, r3
   14d8e:	d100      	bne.n	14d92 <__aeabi_dsub+0x132>
   14d90:	e0af      	b.n	14ef2 <__aeabi_dsub+0x292>
   14d92:	4b85      	ldr	r3, [pc, #532]	; (14fa8 <__aeabi_dsub+0x348>)
   14d94:	2501      	movs	r5, #1
   14d96:	401c      	ands	r4, r3
   14d98:	4643      	mov	r3, r8
   14d9a:	0762      	lsls	r2, r4, #29
   14d9c:	08ff      	lsrs	r7, r7, #3
   14d9e:	0264      	lsls	r4, r4, #9
   14da0:	0576      	lsls	r6, r6, #21
   14da2:	4317      	orrs	r7, r2
   14da4:	0b24      	lsrs	r4, r4, #12
   14da6:	0d76      	lsrs	r6, r6, #21
   14da8:	401d      	ands	r5, r3
   14daa:	2100      	movs	r1, #0
   14dac:	0324      	lsls	r4, r4, #12
   14dae:	0b23      	lsrs	r3, r4, #12
   14db0:	0d0c      	lsrs	r4, r1, #20
   14db2:	4a7e      	ldr	r2, [pc, #504]	; (14fac <__aeabi_dsub+0x34c>)
   14db4:	0524      	lsls	r4, r4, #20
   14db6:	431c      	orrs	r4, r3
   14db8:	4014      	ands	r4, r2
   14dba:	0533      	lsls	r3, r6, #20
   14dbc:	4323      	orrs	r3, r4
   14dbe:	005b      	lsls	r3, r3, #1
   14dc0:	07ed      	lsls	r5, r5, #31
   14dc2:	085b      	lsrs	r3, r3, #1
   14dc4:	432b      	orrs	r3, r5
   14dc6:	0038      	movs	r0, r7
   14dc8:	0019      	movs	r1, r3
   14dca:	bc1c      	pop	{r2, r3, r4}
   14dcc:	4690      	mov	r8, r2
   14dce:	4699      	mov	r9, r3
   14dd0:	46a2      	mov	sl, r4
   14dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dd4:	2501      	movs	r5, #1
   14dd6:	4643      	mov	r3, r8
   14dd8:	0762      	lsls	r2, r4, #29
   14dda:	08ff      	lsrs	r7, r7, #3
   14ddc:	4317      	orrs	r7, r2
   14dde:	08e4      	lsrs	r4, r4, #3
   14de0:	401d      	ands	r5, r3
   14de2:	4b70      	ldr	r3, [pc, #448]	; (14fa4 <__aeabi_dsub+0x344>)
   14de4:	429e      	cmp	r6, r3
   14de6:	d036      	beq.n	14e56 <__aeabi_dsub+0x1f6>
   14de8:	0324      	lsls	r4, r4, #12
   14dea:	0576      	lsls	r6, r6, #21
   14dec:	0b24      	lsrs	r4, r4, #12
   14dee:	0d76      	lsrs	r6, r6, #21
   14df0:	e7db      	b.n	14daa <__aeabi_dsub+0x14a>
   14df2:	4663      	mov	r3, ip
   14df4:	1af3      	subs	r3, r6, r3
   14df6:	2b00      	cmp	r3, #0
   14df8:	dc00      	bgt.n	14dfc <__aeabi_dsub+0x19c>
   14dfa:	e094      	b.n	14f26 <__aeabi_dsub+0x2c6>
   14dfc:	4660      	mov	r0, ip
   14dfe:	2800      	cmp	r0, #0
   14e00:	d035      	beq.n	14e6e <__aeabi_dsub+0x20e>
   14e02:	4868      	ldr	r0, [pc, #416]	; (14fa4 <__aeabi_dsub+0x344>)
   14e04:	4286      	cmp	r6, r0
   14e06:	d0b1      	beq.n	14d6c <__aeabi_dsub+0x10c>
   14e08:	2780      	movs	r7, #128	; 0x80
   14e0a:	043f      	lsls	r7, r7, #16
   14e0c:	4339      	orrs	r1, r7
   14e0e:	2b38      	cmp	r3, #56	; 0x38
   14e10:	dc00      	bgt.n	14e14 <__aeabi_dsub+0x1b4>
   14e12:	e0fd      	b.n	15010 <__aeabi_dsub+0x3b0>
   14e14:	430a      	orrs	r2, r1
   14e16:	0017      	movs	r7, r2
   14e18:	2100      	movs	r1, #0
   14e1a:	1e7a      	subs	r2, r7, #1
   14e1c:	4197      	sbcs	r7, r2
   14e1e:	4457      	add	r7, sl
   14e20:	4557      	cmp	r7, sl
   14e22:	4180      	sbcs	r0, r0
   14e24:	1909      	adds	r1, r1, r4
   14e26:	4244      	negs	r4, r0
   14e28:	190c      	adds	r4, r1, r4
   14e2a:	0223      	lsls	r3, r4, #8
   14e2c:	d53a      	bpl.n	14ea4 <__aeabi_dsub+0x244>
   14e2e:	4b5d      	ldr	r3, [pc, #372]	; (14fa4 <__aeabi_dsub+0x344>)
   14e30:	3601      	adds	r6, #1
   14e32:	429e      	cmp	r6, r3
   14e34:	d100      	bne.n	14e38 <__aeabi_dsub+0x1d8>
   14e36:	e14b      	b.n	150d0 <__aeabi_dsub+0x470>
   14e38:	2201      	movs	r2, #1
   14e3a:	4b5b      	ldr	r3, [pc, #364]	; (14fa8 <__aeabi_dsub+0x348>)
   14e3c:	401c      	ands	r4, r3
   14e3e:	087b      	lsrs	r3, r7, #1
   14e40:	4017      	ands	r7, r2
   14e42:	431f      	orrs	r7, r3
   14e44:	07e2      	lsls	r2, r4, #31
   14e46:	4317      	orrs	r7, r2
   14e48:	0864      	lsrs	r4, r4, #1
   14e4a:	e78f      	b.n	14d6c <__aeabi_dsub+0x10c>
   14e4c:	0008      	movs	r0, r1
   14e4e:	4310      	orrs	r0, r2
   14e50:	d000      	beq.n	14e54 <__aeabi_dsub+0x1f4>
   14e52:	e724      	b.n	14c9e <__aeabi_dsub+0x3e>
   14e54:	e721      	b.n	14c9a <__aeabi_dsub+0x3a>
   14e56:	0023      	movs	r3, r4
   14e58:	433b      	orrs	r3, r7
   14e5a:	d100      	bne.n	14e5e <__aeabi_dsub+0x1fe>
   14e5c:	e1b9      	b.n	151d2 <__aeabi_dsub+0x572>
   14e5e:	2280      	movs	r2, #128	; 0x80
   14e60:	0312      	lsls	r2, r2, #12
   14e62:	4314      	orrs	r4, r2
   14e64:	0324      	lsls	r4, r4, #12
   14e66:	0b24      	lsrs	r4, r4, #12
   14e68:	e79f      	b.n	14daa <__aeabi_dsub+0x14a>
   14e6a:	002e      	movs	r6, r5
   14e6c:	e77e      	b.n	14d6c <__aeabi_dsub+0x10c>
   14e6e:	0008      	movs	r0, r1
   14e70:	4310      	orrs	r0, r2
   14e72:	d100      	bne.n	14e76 <__aeabi_dsub+0x216>
   14e74:	e0ca      	b.n	1500c <__aeabi_dsub+0x3ac>
   14e76:	1e58      	subs	r0, r3, #1
   14e78:	4684      	mov	ip, r0
   14e7a:	2800      	cmp	r0, #0
   14e7c:	d000      	beq.n	14e80 <__aeabi_dsub+0x220>
   14e7e:	e0e7      	b.n	15050 <__aeabi_dsub+0x3f0>
   14e80:	4452      	add	r2, sl
   14e82:	4552      	cmp	r2, sl
   14e84:	4180      	sbcs	r0, r0
   14e86:	1864      	adds	r4, r4, r1
   14e88:	4240      	negs	r0, r0
   14e8a:	1824      	adds	r4, r4, r0
   14e8c:	0017      	movs	r7, r2
   14e8e:	2601      	movs	r6, #1
   14e90:	0223      	lsls	r3, r4, #8
   14e92:	d507      	bpl.n	14ea4 <__aeabi_dsub+0x244>
   14e94:	2602      	movs	r6, #2
   14e96:	e7cf      	b.n	14e38 <__aeabi_dsub+0x1d8>
   14e98:	4664      	mov	r4, ip
   14e9a:	432c      	orrs	r4, r5
   14e9c:	d100      	bne.n	14ea0 <__aeabi_dsub+0x240>
   14e9e:	e1b3      	b.n	15208 <__aeabi_dsub+0x5a8>
   14ea0:	002c      	movs	r4, r5
   14ea2:	4667      	mov	r7, ip
   14ea4:	077b      	lsls	r3, r7, #29
   14ea6:	d000      	beq.n	14eaa <__aeabi_dsub+0x24a>
   14ea8:	e762      	b.n	14d70 <__aeabi_dsub+0x110>
   14eaa:	0763      	lsls	r3, r4, #29
   14eac:	08ff      	lsrs	r7, r7, #3
   14eae:	431f      	orrs	r7, r3
   14eb0:	2501      	movs	r5, #1
   14eb2:	4643      	mov	r3, r8
   14eb4:	08e4      	lsrs	r4, r4, #3
   14eb6:	401d      	ands	r5, r3
   14eb8:	e793      	b.n	14de2 <__aeabi_dsub+0x182>
   14eba:	2d00      	cmp	r5, #0
   14ebc:	d178      	bne.n	14fb0 <__aeabi_dsub+0x350>
   14ebe:	1c75      	adds	r5, r6, #1
   14ec0:	056d      	lsls	r5, r5, #21
   14ec2:	0d6d      	lsrs	r5, r5, #21
   14ec4:	2d01      	cmp	r5, #1
   14ec6:	dc00      	bgt.n	14eca <__aeabi_dsub+0x26a>
   14ec8:	e0f2      	b.n	150b0 <__aeabi_dsub+0x450>
   14eca:	4650      	mov	r0, sl
   14ecc:	1a80      	subs	r0, r0, r2
   14ece:	4582      	cmp	sl, r0
   14ed0:	41bf      	sbcs	r7, r7
   14ed2:	1a65      	subs	r5, r4, r1
   14ed4:	427f      	negs	r7, r7
   14ed6:	1bed      	subs	r5, r5, r7
   14ed8:	4684      	mov	ip, r0
   14eda:	0228      	lsls	r0, r5, #8
   14edc:	d400      	bmi.n	14ee0 <__aeabi_dsub+0x280>
   14ede:	e08c      	b.n	14ffa <__aeabi_dsub+0x39a>
   14ee0:	4650      	mov	r0, sl
   14ee2:	1a17      	subs	r7, r2, r0
   14ee4:	42ba      	cmp	r2, r7
   14ee6:	4192      	sbcs	r2, r2
   14ee8:	1b0c      	subs	r4, r1, r4
   14eea:	4255      	negs	r5, r2
   14eec:	1b65      	subs	r5, r4, r5
   14eee:	4698      	mov	r8, r3
   14ef0:	e714      	b.n	14d1c <__aeabi_dsub+0xbc>
   14ef2:	2501      	movs	r5, #1
   14ef4:	4643      	mov	r3, r8
   14ef6:	2400      	movs	r4, #0
   14ef8:	401d      	ands	r5, r3
   14efa:	2700      	movs	r7, #0
   14efc:	e755      	b.n	14daa <__aeabi_dsub+0x14a>
   14efe:	4c2a      	ldr	r4, [pc, #168]	; (14fa8 <__aeabi_dsub+0x348>)
   14f00:	1af6      	subs	r6, r6, r3
   14f02:	402c      	ands	r4, r5
   14f04:	e732      	b.n	14d6c <__aeabi_dsub+0x10c>
   14f06:	003d      	movs	r5, r7
   14f08:	3828      	subs	r0, #40	; 0x28
   14f0a:	4085      	lsls	r5, r0
   14f0c:	2700      	movs	r7, #0
   14f0e:	e717      	b.n	14d40 <__aeabi_dsub+0xe0>
   14f10:	0038      	movs	r0, r7
   14f12:	f000 fb03 	bl	1551c <__clzsi2>
   14f16:	3020      	adds	r0, #32
   14f18:	e706      	b.n	14d28 <__aeabi_dsub+0xc8>
   14f1a:	430a      	orrs	r2, r1
   14f1c:	0017      	movs	r7, r2
   14f1e:	2100      	movs	r1, #0
   14f20:	1e7a      	subs	r2, r7, #1
   14f22:	4197      	sbcs	r7, r2
   14f24:	e6ee      	b.n	14d04 <__aeabi_dsub+0xa4>
   14f26:	2b00      	cmp	r3, #0
   14f28:	d000      	beq.n	14f2c <__aeabi_dsub+0x2cc>
   14f2a:	e0e5      	b.n	150f8 <__aeabi_dsub+0x498>
   14f2c:	1c73      	adds	r3, r6, #1
   14f2e:	469c      	mov	ip, r3
   14f30:	055b      	lsls	r3, r3, #21
   14f32:	0d5b      	lsrs	r3, r3, #21
   14f34:	2b01      	cmp	r3, #1
   14f36:	dc00      	bgt.n	14f3a <__aeabi_dsub+0x2da>
   14f38:	e09f      	b.n	1507a <__aeabi_dsub+0x41a>
   14f3a:	4b1a      	ldr	r3, [pc, #104]	; (14fa4 <__aeabi_dsub+0x344>)
   14f3c:	459c      	cmp	ip, r3
   14f3e:	d100      	bne.n	14f42 <__aeabi_dsub+0x2e2>
   14f40:	e0c5      	b.n	150ce <__aeabi_dsub+0x46e>
   14f42:	4452      	add	r2, sl
   14f44:	4552      	cmp	r2, sl
   14f46:	4180      	sbcs	r0, r0
   14f48:	1864      	adds	r4, r4, r1
   14f4a:	4240      	negs	r0, r0
   14f4c:	1824      	adds	r4, r4, r0
   14f4e:	07e7      	lsls	r7, r4, #31
   14f50:	0852      	lsrs	r2, r2, #1
   14f52:	4317      	orrs	r7, r2
   14f54:	0864      	lsrs	r4, r4, #1
   14f56:	4666      	mov	r6, ip
   14f58:	e708      	b.n	14d6c <__aeabi_dsub+0x10c>
   14f5a:	4812      	ldr	r0, [pc, #72]	; (14fa4 <__aeabi_dsub+0x344>)
   14f5c:	4285      	cmp	r5, r0
   14f5e:	d100      	bne.n	14f62 <__aeabi_dsub+0x302>
   14f60:	e085      	b.n	1506e <__aeabi_dsub+0x40e>
   14f62:	001d      	movs	r5, r3
   14f64:	e6bc      	b.n	14ce0 <__aeabi_dsub+0x80>
   14f66:	0029      	movs	r1, r5
   14f68:	3e1f      	subs	r6, #31
   14f6a:	40f1      	lsrs	r1, r6
   14f6c:	2b20      	cmp	r3, #32
   14f6e:	d100      	bne.n	14f72 <__aeabi_dsub+0x312>
   14f70:	e07f      	b.n	15072 <__aeabi_dsub+0x412>
   14f72:	2240      	movs	r2, #64	; 0x40
   14f74:	1ad3      	subs	r3, r2, r3
   14f76:	409d      	lsls	r5, r3
   14f78:	432f      	orrs	r7, r5
   14f7a:	1e7d      	subs	r5, r7, #1
   14f7c:	41af      	sbcs	r7, r5
   14f7e:	2400      	movs	r4, #0
   14f80:	430f      	orrs	r7, r1
   14f82:	2600      	movs	r6, #0
   14f84:	e78e      	b.n	14ea4 <__aeabi_dsub+0x244>
   14f86:	002b      	movs	r3, r5
   14f88:	000f      	movs	r7, r1
   14f8a:	3b20      	subs	r3, #32
   14f8c:	40df      	lsrs	r7, r3
   14f8e:	2d20      	cmp	r5, #32
   14f90:	d071      	beq.n	15076 <__aeabi_dsub+0x416>
   14f92:	2340      	movs	r3, #64	; 0x40
   14f94:	1b5d      	subs	r5, r3, r5
   14f96:	40a9      	lsls	r1, r5
   14f98:	430a      	orrs	r2, r1
   14f9a:	1e51      	subs	r1, r2, #1
   14f9c:	418a      	sbcs	r2, r1
   14f9e:	2100      	movs	r1, #0
   14fa0:	4317      	orrs	r7, r2
   14fa2:	e6af      	b.n	14d04 <__aeabi_dsub+0xa4>
   14fa4:	000007ff 	.word	0x000007ff
   14fa8:	ff7fffff 	.word	0xff7fffff
   14fac:	800fffff 	.word	0x800fffff
   14fb0:	2e00      	cmp	r6, #0
   14fb2:	d03e      	beq.n	15032 <__aeabi_dsub+0x3d2>
   14fb4:	4eb3      	ldr	r6, [pc, #716]	; (15284 <__aeabi_dsub+0x624>)
   14fb6:	45b4      	cmp	ip, r6
   14fb8:	d045      	beq.n	15046 <__aeabi_dsub+0x3e6>
   14fba:	2680      	movs	r6, #128	; 0x80
   14fbc:	0436      	lsls	r6, r6, #16
   14fbe:	426d      	negs	r5, r5
   14fc0:	4334      	orrs	r4, r6
   14fc2:	2d38      	cmp	r5, #56	; 0x38
   14fc4:	dd00      	ble.n	14fc8 <__aeabi_dsub+0x368>
   14fc6:	e0a8      	b.n	1511a <__aeabi_dsub+0x4ba>
   14fc8:	2d1f      	cmp	r5, #31
   14fca:	dd00      	ble.n	14fce <__aeabi_dsub+0x36e>
   14fcc:	e11f      	b.n	1520e <__aeabi_dsub+0x5ae>
   14fce:	2620      	movs	r6, #32
   14fd0:	0027      	movs	r7, r4
   14fd2:	4650      	mov	r0, sl
   14fd4:	1b76      	subs	r6, r6, r5
   14fd6:	40b7      	lsls	r7, r6
   14fd8:	40e8      	lsrs	r0, r5
   14fda:	4307      	orrs	r7, r0
   14fdc:	4650      	mov	r0, sl
   14fde:	40b0      	lsls	r0, r6
   14fe0:	1e46      	subs	r6, r0, #1
   14fe2:	41b0      	sbcs	r0, r6
   14fe4:	40ec      	lsrs	r4, r5
   14fe6:	4338      	orrs	r0, r7
   14fe8:	1a17      	subs	r7, r2, r0
   14fea:	42ba      	cmp	r2, r7
   14fec:	4192      	sbcs	r2, r2
   14fee:	1b0c      	subs	r4, r1, r4
   14ff0:	4252      	negs	r2, r2
   14ff2:	1aa4      	subs	r4, r4, r2
   14ff4:	4666      	mov	r6, ip
   14ff6:	4698      	mov	r8, r3
   14ff8:	e68b      	b.n	14d12 <__aeabi_dsub+0xb2>
   14ffa:	4664      	mov	r4, ip
   14ffc:	4667      	mov	r7, ip
   14ffe:	432c      	orrs	r4, r5
   15000:	d000      	beq.n	15004 <__aeabi_dsub+0x3a4>
   15002:	e68b      	b.n	14d1c <__aeabi_dsub+0xbc>
   15004:	2500      	movs	r5, #0
   15006:	2600      	movs	r6, #0
   15008:	2700      	movs	r7, #0
   1500a:	e6ea      	b.n	14de2 <__aeabi_dsub+0x182>
   1500c:	001e      	movs	r6, r3
   1500e:	e6ad      	b.n	14d6c <__aeabi_dsub+0x10c>
   15010:	2b1f      	cmp	r3, #31
   15012:	dc60      	bgt.n	150d6 <__aeabi_dsub+0x476>
   15014:	2720      	movs	r7, #32
   15016:	1af8      	subs	r0, r7, r3
   15018:	000f      	movs	r7, r1
   1501a:	4684      	mov	ip, r0
   1501c:	4087      	lsls	r7, r0
   1501e:	0010      	movs	r0, r2
   15020:	40d8      	lsrs	r0, r3
   15022:	4307      	orrs	r7, r0
   15024:	4660      	mov	r0, ip
   15026:	4082      	lsls	r2, r0
   15028:	1e50      	subs	r0, r2, #1
   1502a:	4182      	sbcs	r2, r0
   1502c:	40d9      	lsrs	r1, r3
   1502e:	4317      	orrs	r7, r2
   15030:	e6f5      	b.n	14e1e <__aeabi_dsub+0x1be>
   15032:	0026      	movs	r6, r4
   15034:	4650      	mov	r0, sl
   15036:	4306      	orrs	r6, r0
   15038:	d005      	beq.n	15046 <__aeabi_dsub+0x3e6>
   1503a:	43ed      	mvns	r5, r5
   1503c:	2d00      	cmp	r5, #0
   1503e:	d0d3      	beq.n	14fe8 <__aeabi_dsub+0x388>
   15040:	4e90      	ldr	r6, [pc, #576]	; (15284 <__aeabi_dsub+0x624>)
   15042:	45b4      	cmp	ip, r6
   15044:	d1bd      	bne.n	14fc2 <__aeabi_dsub+0x362>
   15046:	000c      	movs	r4, r1
   15048:	0017      	movs	r7, r2
   1504a:	4666      	mov	r6, ip
   1504c:	4698      	mov	r8, r3
   1504e:	e68d      	b.n	14d6c <__aeabi_dsub+0x10c>
   15050:	488c      	ldr	r0, [pc, #560]	; (15284 <__aeabi_dsub+0x624>)
   15052:	4283      	cmp	r3, r0
   15054:	d00b      	beq.n	1506e <__aeabi_dsub+0x40e>
   15056:	4663      	mov	r3, ip
   15058:	e6d9      	b.n	14e0e <__aeabi_dsub+0x1ae>
   1505a:	2d00      	cmp	r5, #0
   1505c:	d000      	beq.n	15060 <__aeabi_dsub+0x400>
   1505e:	e096      	b.n	1518e <__aeabi_dsub+0x52e>
   15060:	0008      	movs	r0, r1
   15062:	4310      	orrs	r0, r2
   15064:	d100      	bne.n	15068 <__aeabi_dsub+0x408>
   15066:	e0e2      	b.n	1522e <__aeabi_dsub+0x5ce>
   15068:	000c      	movs	r4, r1
   1506a:	0017      	movs	r7, r2
   1506c:	4698      	mov	r8, r3
   1506e:	4e85      	ldr	r6, [pc, #532]	; (15284 <__aeabi_dsub+0x624>)
   15070:	e67c      	b.n	14d6c <__aeabi_dsub+0x10c>
   15072:	2500      	movs	r5, #0
   15074:	e780      	b.n	14f78 <__aeabi_dsub+0x318>
   15076:	2100      	movs	r1, #0
   15078:	e78e      	b.n	14f98 <__aeabi_dsub+0x338>
   1507a:	0023      	movs	r3, r4
   1507c:	4650      	mov	r0, sl
   1507e:	4303      	orrs	r3, r0
   15080:	2e00      	cmp	r6, #0
   15082:	d000      	beq.n	15086 <__aeabi_dsub+0x426>
   15084:	e0a8      	b.n	151d8 <__aeabi_dsub+0x578>
   15086:	2b00      	cmp	r3, #0
   15088:	d100      	bne.n	1508c <__aeabi_dsub+0x42c>
   1508a:	e0de      	b.n	1524a <__aeabi_dsub+0x5ea>
   1508c:	000b      	movs	r3, r1
   1508e:	4313      	orrs	r3, r2
   15090:	d100      	bne.n	15094 <__aeabi_dsub+0x434>
   15092:	e66b      	b.n	14d6c <__aeabi_dsub+0x10c>
   15094:	4452      	add	r2, sl
   15096:	4552      	cmp	r2, sl
   15098:	4180      	sbcs	r0, r0
   1509a:	1864      	adds	r4, r4, r1
   1509c:	4240      	negs	r0, r0
   1509e:	1824      	adds	r4, r4, r0
   150a0:	0017      	movs	r7, r2
   150a2:	0223      	lsls	r3, r4, #8
   150a4:	d400      	bmi.n	150a8 <__aeabi_dsub+0x448>
   150a6:	e6fd      	b.n	14ea4 <__aeabi_dsub+0x244>
   150a8:	4b77      	ldr	r3, [pc, #476]	; (15288 <__aeabi_dsub+0x628>)
   150aa:	4666      	mov	r6, ip
   150ac:	401c      	ands	r4, r3
   150ae:	e65d      	b.n	14d6c <__aeabi_dsub+0x10c>
   150b0:	0025      	movs	r5, r4
   150b2:	4650      	mov	r0, sl
   150b4:	4305      	orrs	r5, r0
   150b6:	2e00      	cmp	r6, #0
   150b8:	d1cf      	bne.n	1505a <__aeabi_dsub+0x3fa>
   150ba:	2d00      	cmp	r5, #0
   150bc:	d14f      	bne.n	1515e <__aeabi_dsub+0x4fe>
   150be:	000c      	movs	r4, r1
   150c0:	4314      	orrs	r4, r2
   150c2:	d100      	bne.n	150c6 <__aeabi_dsub+0x466>
   150c4:	e0a0      	b.n	15208 <__aeabi_dsub+0x5a8>
   150c6:	000c      	movs	r4, r1
   150c8:	0017      	movs	r7, r2
   150ca:	4698      	mov	r8, r3
   150cc:	e64e      	b.n	14d6c <__aeabi_dsub+0x10c>
   150ce:	4666      	mov	r6, ip
   150d0:	2400      	movs	r4, #0
   150d2:	2700      	movs	r7, #0
   150d4:	e685      	b.n	14de2 <__aeabi_dsub+0x182>
   150d6:	001f      	movs	r7, r3
   150d8:	0008      	movs	r0, r1
   150da:	3f20      	subs	r7, #32
   150dc:	40f8      	lsrs	r0, r7
   150de:	0007      	movs	r7, r0
   150e0:	2b20      	cmp	r3, #32
   150e2:	d100      	bne.n	150e6 <__aeabi_dsub+0x486>
   150e4:	e08e      	b.n	15204 <__aeabi_dsub+0x5a4>
   150e6:	2040      	movs	r0, #64	; 0x40
   150e8:	1ac3      	subs	r3, r0, r3
   150ea:	4099      	lsls	r1, r3
   150ec:	430a      	orrs	r2, r1
   150ee:	1e51      	subs	r1, r2, #1
   150f0:	418a      	sbcs	r2, r1
   150f2:	2100      	movs	r1, #0
   150f4:	4317      	orrs	r7, r2
   150f6:	e692      	b.n	14e1e <__aeabi_dsub+0x1be>
   150f8:	2e00      	cmp	r6, #0
   150fa:	d114      	bne.n	15126 <__aeabi_dsub+0x4c6>
   150fc:	0026      	movs	r6, r4
   150fe:	4650      	mov	r0, sl
   15100:	4306      	orrs	r6, r0
   15102:	d062      	beq.n	151ca <__aeabi_dsub+0x56a>
   15104:	43db      	mvns	r3, r3
   15106:	2b00      	cmp	r3, #0
   15108:	d15c      	bne.n	151c4 <__aeabi_dsub+0x564>
   1510a:	1887      	adds	r7, r0, r2
   1510c:	4297      	cmp	r7, r2
   1510e:	4192      	sbcs	r2, r2
   15110:	1864      	adds	r4, r4, r1
   15112:	4252      	negs	r2, r2
   15114:	18a4      	adds	r4, r4, r2
   15116:	4666      	mov	r6, ip
   15118:	e687      	b.n	14e2a <__aeabi_dsub+0x1ca>
   1511a:	4650      	mov	r0, sl
   1511c:	4320      	orrs	r0, r4
   1511e:	1e44      	subs	r4, r0, #1
   15120:	41a0      	sbcs	r0, r4
   15122:	2400      	movs	r4, #0
   15124:	e760      	b.n	14fe8 <__aeabi_dsub+0x388>
   15126:	4e57      	ldr	r6, [pc, #348]	; (15284 <__aeabi_dsub+0x624>)
   15128:	45b4      	cmp	ip, r6
   1512a:	d04e      	beq.n	151ca <__aeabi_dsub+0x56a>
   1512c:	2680      	movs	r6, #128	; 0x80
   1512e:	0436      	lsls	r6, r6, #16
   15130:	425b      	negs	r3, r3
   15132:	4334      	orrs	r4, r6
   15134:	2b38      	cmp	r3, #56	; 0x38
   15136:	dd00      	ble.n	1513a <__aeabi_dsub+0x4da>
   15138:	e07f      	b.n	1523a <__aeabi_dsub+0x5da>
   1513a:	2b1f      	cmp	r3, #31
   1513c:	dd00      	ble.n	15140 <__aeabi_dsub+0x4e0>
   1513e:	e08b      	b.n	15258 <__aeabi_dsub+0x5f8>
   15140:	2620      	movs	r6, #32
   15142:	0027      	movs	r7, r4
   15144:	4650      	mov	r0, sl
   15146:	1af6      	subs	r6, r6, r3
   15148:	40b7      	lsls	r7, r6
   1514a:	40d8      	lsrs	r0, r3
   1514c:	4307      	orrs	r7, r0
   1514e:	4650      	mov	r0, sl
   15150:	40b0      	lsls	r0, r6
   15152:	1e46      	subs	r6, r0, #1
   15154:	41b0      	sbcs	r0, r6
   15156:	4307      	orrs	r7, r0
   15158:	40dc      	lsrs	r4, r3
   1515a:	18bf      	adds	r7, r7, r2
   1515c:	e7d6      	b.n	1510c <__aeabi_dsub+0x4ac>
   1515e:	000d      	movs	r5, r1
   15160:	4315      	orrs	r5, r2
   15162:	d100      	bne.n	15166 <__aeabi_dsub+0x506>
   15164:	e602      	b.n	14d6c <__aeabi_dsub+0x10c>
   15166:	4650      	mov	r0, sl
   15168:	1a80      	subs	r0, r0, r2
   1516a:	4582      	cmp	sl, r0
   1516c:	41bf      	sbcs	r7, r7
   1516e:	1a65      	subs	r5, r4, r1
   15170:	427f      	negs	r7, r7
   15172:	1bed      	subs	r5, r5, r7
   15174:	4684      	mov	ip, r0
   15176:	0228      	lsls	r0, r5, #8
   15178:	d400      	bmi.n	1517c <__aeabi_dsub+0x51c>
   1517a:	e68d      	b.n	14e98 <__aeabi_dsub+0x238>
   1517c:	4650      	mov	r0, sl
   1517e:	1a17      	subs	r7, r2, r0
   15180:	42ba      	cmp	r2, r7
   15182:	4192      	sbcs	r2, r2
   15184:	1b0c      	subs	r4, r1, r4
   15186:	4252      	negs	r2, r2
   15188:	1aa4      	subs	r4, r4, r2
   1518a:	4698      	mov	r8, r3
   1518c:	e5ee      	b.n	14d6c <__aeabi_dsub+0x10c>
   1518e:	000d      	movs	r5, r1
   15190:	4315      	orrs	r5, r2
   15192:	d100      	bne.n	15196 <__aeabi_dsub+0x536>
   15194:	e76b      	b.n	1506e <__aeabi_dsub+0x40e>
   15196:	4650      	mov	r0, sl
   15198:	0767      	lsls	r7, r4, #29
   1519a:	08c0      	lsrs	r0, r0, #3
   1519c:	4307      	orrs	r7, r0
   1519e:	2080      	movs	r0, #128	; 0x80
   151a0:	08e4      	lsrs	r4, r4, #3
   151a2:	0300      	lsls	r0, r0, #12
   151a4:	4204      	tst	r4, r0
   151a6:	d007      	beq.n	151b8 <__aeabi_dsub+0x558>
   151a8:	08cd      	lsrs	r5, r1, #3
   151aa:	4205      	tst	r5, r0
   151ac:	d104      	bne.n	151b8 <__aeabi_dsub+0x558>
   151ae:	002c      	movs	r4, r5
   151b0:	4698      	mov	r8, r3
   151b2:	08d7      	lsrs	r7, r2, #3
   151b4:	0749      	lsls	r1, r1, #29
   151b6:	430f      	orrs	r7, r1
   151b8:	0f7b      	lsrs	r3, r7, #29
   151ba:	00e4      	lsls	r4, r4, #3
   151bc:	431c      	orrs	r4, r3
   151be:	00ff      	lsls	r7, r7, #3
   151c0:	4e30      	ldr	r6, [pc, #192]	; (15284 <__aeabi_dsub+0x624>)
   151c2:	e5d3      	b.n	14d6c <__aeabi_dsub+0x10c>
   151c4:	4e2f      	ldr	r6, [pc, #188]	; (15284 <__aeabi_dsub+0x624>)
   151c6:	45b4      	cmp	ip, r6
   151c8:	d1b4      	bne.n	15134 <__aeabi_dsub+0x4d4>
   151ca:	000c      	movs	r4, r1
   151cc:	0017      	movs	r7, r2
   151ce:	4666      	mov	r6, ip
   151d0:	e5cc      	b.n	14d6c <__aeabi_dsub+0x10c>
   151d2:	2700      	movs	r7, #0
   151d4:	2400      	movs	r4, #0
   151d6:	e5e8      	b.n	14daa <__aeabi_dsub+0x14a>
   151d8:	2b00      	cmp	r3, #0
   151da:	d039      	beq.n	15250 <__aeabi_dsub+0x5f0>
   151dc:	000b      	movs	r3, r1
   151de:	4313      	orrs	r3, r2
   151e0:	d100      	bne.n	151e4 <__aeabi_dsub+0x584>
   151e2:	e744      	b.n	1506e <__aeabi_dsub+0x40e>
   151e4:	08c0      	lsrs	r0, r0, #3
   151e6:	0767      	lsls	r7, r4, #29
   151e8:	4307      	orrs	r7, r0
   151ea:	2080      	movs	r0, #128	; 0x80
   151ec:	08e4      	lsrs	r4, r4, #3
   151ee:	0300      	lsls	r0, r0, #12
   151f0:	4204      	tst	r4, r0
   151f2:	d0e1      	beq.n	151b8 <__aeabi_dsub+0x558>
   151f4:	08cb      	lsrs	r3, r1, #3
   151f6:	4203      	tst	r3, r0
   151f8:	d1de      	bne.n	151b8 <__aeabi_dsub+0x558>
   151fa:	08d7      	lsrs	r7, r2, #3
   151fc:	0749      	lsls	r1, r1, #29
   151fe:	430f      	orrs	r7, r1
   15200:	001c      	movs	r4, r3
   15202:	e7d9      	b.n	151b8 <__aeabi_dsub+0x558>
   15204:	2100      	movs	r1, #0
   15206:	e771      	b.n	150ec <__aeabi_dsub+0x48c>
   15208:	2500      	movs	r5, #0
   1520a:	2700      	movs	r7, #0
   1520c:	e5e9      	b.n	14de2 <__aeabi_dsub+0x182>
   1520e:	002e      	movs	r6, r5
   15210:	0027      	movs	r7, r4
   15212:	3e20      	subs	r6, #32
   15214:	40f7      	lsrs	r7, r6
   15216:	2d20      	cmp	r5, #32
   15218:	d02f      	beq.n	1527a <__aeabi_dsub+0x61a>
   1521a:	2640      	movs	r6, #64	; 0x40
   1521c:	1b75      	subs	r5, r6, r5
   1521e:	40ac      	lsls	r4, r5
   15220:	4650      	mov	r0, sl
   15222:	4320      	orrs	r0, r4
   15224:	1e44      	subs	r4, r0, #1
   15226:	41a0      	sbcs	r0, r4
   15228:	2400      	movs	r4, #0
   1522a:	4338      	orrs	r0, r7
   1522c:	e6dc      	b.n	14fe8 <__aeabi_dsub+0x388>
   1522e:	2480      	movs	r4, #128	; 0x80
   15230:	2500      	movs	r5, #0
   15232:	0324      	lsls	r4, r4, #12
   15234:	4e13      	ldr	r6, [pc, #76]	; (15284 <__aeabi_dsub+0x624>)
   15236:	2700      	movs	r7, #0
   15238:	e5d3      	b.n	14de2 <__aeabi_dsub+0x182>
   1523a:	4650      	mov	r0, sl
   1523c:	4320      	orrs	r0, r4
   1523e:	0007      	movs	r7, r0
   15240:	1e78      	subs	r0, r7, #1
   15242:	4187      	sbcs	r7, r0
   15244:	2400      	movs	r4, #0
   15246:	18bf      	adds	r7, r7, r2
   15248:	e760      	b.n	1510c <__aeabi_dsub+0x4ac>
   1524a:	000c      	movs	r4, r1
   1524c:	0017      	movs	r7, r2
   1524e:	e58d      	b.n	14d6c <__aeabi_dsub+0x10c>
   15250:	000c      	movs	r4, r1
   15252:	0017      	movs	r7, r2
   15254:	4e0b      	ldr	r6, [pc, #44]	; (15284 <__aeabi_dsub+0x624>)
   15256:	e589      	b.n	14d6c <__aeabi_dsub+0x10c>
   15258:	001e      	movs	r6, r3
   1525a:	0027      	movs	r7, r4
   1525c:	3e20      	subs	r6, #32
   1525e:	40f7      	lsrs	r7, r6
   15260:	2b20      	cmp	r3, #32
   15262:	d00c      	beq.n	1527e <__aeabi_dsub+0x61e>
   15264:	2640      	movs	r6, #64	; 0x40
   15266:	1af3      	subs	r3, r6, r3
   15268:	409c      	lsls	r4, r3
   1526a:	4650      	mov	r0, sl
   1526c:	4320      	orrs	r0, r4
   1526e:	1e44      	subs	r4, r0, #1
   15270:	41a0      	sbcs	r0, r4
   15272:	4307      	orrs	r7, r0
   15274:	2400      	movs	r4, #0
   15276:	18bf      	adds	r7, r7, r2
   15278:	e748      	b.n	1510c <__aeabi_dsub+0x4ac>
   1527a:	2400      	movs	r4, #0
   1527c:	e7d0      	b.n	15220 <__aeabi_dsub+0x5c0>
   1527e:	2400      	movs	r4, #0
   15280:	e7f3      	b.n	1526a <__aeabi_dsub+0x60a>
   15282:	46c0      	nop			; (mov r8, r8)
   15284:	000007ff 	.word	0x000007ff
   15288:	ff7fffff 	.word	0xff7fffff

0001528c <__aeabi_d2iz>:
   1528c:	b530      	push	{r4, r5, lr}
   1528e:	4d13      	ldr	r5, [pc, #76]	; (152dc <__aeabi_d2iz+0x50>)
   15290:	030a      	lsls	r2, r1, #12
   15292:	004b      	lsls	r3, r1, #1
   15294:	0b12      	lsrs	r2, r2, #12
   15296:	0d5b      	lsrs	r3, r3, #21
   15298:	0fc9      	lsrs	r1, r1, #31
   1529a:	2400      	movs	r4, #0
   1529c:	42ab      	cmp	r3, r5
   1529e:	dd10      	ble.n	152c2 <__aeabi_d2iz+0x36>
   152a0:	4c0f      	ldr	r4, [pc, #60]	; (152e0 <__aeabi_d2iz+0x54>)
   152a2:	42a3      	cmp	r3, r4
   152a4:	dc0f      	bgt.n	152c6 <__aeabi_d2iz+0x3a>
   152a6:	2480      	movs	r4, #128	; 0x80
   152a8:	4d0e      	ldr	r5, [pc, #56]	; (152e4 <__aeabi_d2iz+0x58>)
   152aa:	0364      	lsls	r4, r4, #13
   152ac:	4322      	orrs	r2, r4
   152ae:	1aed      	subs	r5, r5, r3
   152b0:	2d1f      	cmp	r5, #31
   152b2:	dd0b      	ble.n	152cc <__aeabi_d2iz+0x40>
   152b4:	480c      	ldr	r0, [pc, #48]	; (152e8 <__aeabi_d2iz+0x5c>)
   152b6:	1ac3      	subs	r3, r0, r3
   152b8:	40da      	lsrs	r2, r3
   152ba:	4254      	negs	r4, r2
   152bc:	2900      	cmp	r1, #0
   152be:	d100      	bne.n	152c2 <__aeabi_d2iz+0x36>
   152c0:	0014      	movs	r4, r2
   152c2:	0020      	movs	r0, r4
   152c4:	bd30      	pop	{r4, r5, pc}
   152c6:	4b09      	ldr	r3, [pc, #36]	; (152ec <__aeabi_d2iz+0x60>)
   152c8:	18cc      	adds	r4, r1, r3
   152ca:	e7fa      	b.n	152c2 <__aeabi_d2iz+0x36>
   152cc:	4c08      	ldr	r4, [pc, #32]	; (152f0 <__aeabi_d2iz+0x64>)
   152ce:	40e8      	lsrs	r0, r5
   152d0:	46a4      	mov	ip, r4
   152d2:	4463      	add	r3, ip
   152d4:	409a      	lsls	r2, r3
   152d6:	4302      	orrs	r2, r0
   152d8:	e7ef      	b.n	152ba <__aeabi_d2iz+0x2e>
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	000003fe 	.word	0x000003fe
   152e0:	0000041d 	.word	0x0000041d
   152e4:	00000433 	.word	0x00000433
   152e8:	00000413 	.word	0x00000413
   152ec:	7fffffff 	.word	0x7fffffff
   152f0:	fffffbed 	.word	0xfffffbed

000152f4 <__aeabi_ui2d>:
   152f4:	b510      	push	{r4, lr}
   152f6:	1e04      	subs	r4, r0, #0
   152f8:	d028      	beq.n	1534c <__aeabi_ui2d+0x58>
   152fa:	f000 f90f 	bl	1551c <__clzsi2>
   152fe:	4b15      	ldr	r3, [pc, #84]	; (15354 <__aeabi_ui2d+0x60>)
   15300:	4a15      	ldr	r2, [pc, #84]	; (15358 <__aeabi_ui2d+0x64>)
   15302:	1a1b      	subs	r3, r3, r0
   15304:	1ad2      	subs	r2, r2, r3
   15306:	2a1f      	cmp	r2, #31
   15308:	dd15      	ble.n	15336 <__aeabi_ui2d+0x42>
   1530a:	4a14      	ldr	r2, [pc, #80]	; (1535c <__aeabi_ui2d+0x68>)
   1530c:	1ad2      	subs	r2, r2, r3
   1530e:	4094      	lsls	r4, r2
   15310:	2200      	movs	r2, #0
   15312:	0324      	lsls	r4, r4, #12
   15314:	055b      	lsls	r3, r3, #21
   15316:	0b24      	lsrs	r4, r4, #12
   15318:	0d5b      	lsrs	r3, r3, #21
   1531a:	2100      	movs	r1, #0
   1531c:	0010      	movs	r0, r2
   1531e:	0324      	lsls	r4, r4, #12
   15320:	0d0a      	lsrs	r2, r1, #20
   15322:	0b24      	lsrs	r4, r4, #12
   15324:	0512      	lsls	r2, r2, #20
   15326:	4322      	orrs	r2, r4
   15328:	4c0d      	ldr	r4, [pc, #52]	; (15360 <__aeabi_ui2d+0x6c>)
   1532a:	051b      	lsls	r3, r3, #20
   1532c:	4022      	ands	r2, r4
   1532e:	4313      	orrs	r3, r2
   15330:	005b      	lsls	r3, r3, #1
   15332:	0859      	lsrs	r1, r3, #1
   15334:	bd10      	pop	{r4, pc}
   15336:	0021      	movs	r1, r4
   15338:	4091      	lsls	r1, r2
   1533a:	000a      	movs	r2, r1
   1533c:	210b      	movs	r1, #11
   1533e:	1a08      	subs	r0, r1, r0
   15340:	40c4      	lsrs	r4, r0
   15342:	055b      	lsls	r3, r3, #21
   15344:	0324      	lsls	r4, r4, #12
   15346:	0b24      	lsrs	r4, r4, #12
   15348:	0d5b      	lsrs	r3, r3, #21
   1534a:	e7e6      	b.n	1531a <__aeabi_ui2d+0x26>
   1534c:	2300      	movs	r3, #0
   1534e:	2400      	movs	r4, #0
   15350:	2200      	movs	r2, #0
   15352:	e7e2      	b.n	1531a <__aeabi_ui2d+0x26>
   15354:	0000041e 	.word	0x0000041e
   15358:	00000433 	.word	0x00000433
   1535c:	00000413 	.word	0x00000413
   15360:	800fffff 	.word	0x800fffff

00015364 <__aeabi_f2d>:
   15364:	0041      	lsls	r1, r0, #1
   15366:	0e09      	lsrs	r1, r1, #24
   15368:	1c4b      	adds	r3, r1, #1
   1536a:	b570      	push	{r4, r5, r6, lr}
   1536c:	b2db      	uxtb	r3, r3
   1536e:	0246      	lsls	r6, r0, #9
   15370:	0a75      	lsrs	r5, r6, #9
   15372:	0fc4      	lsrs	r4, r0, #31
   15374:	2b01      	cmp	r3, #1
   15376:	dd14      	ble.n	153a2 <__aeabi_f2d+0x3e>
   15378:	23e0      	movs	r3, #224	; 0xe0
   1537a:	009b      	lsls	r3, r3, #2
   1537c:	076d      	lsls	r5, r5, #29
   1537e:	0b36      	lsrs	r6, r6, #12
   15380:	18cb      	adds	r3, r1, r3
   15382:	2100      	movs	r1, #0
   15384:	0d0a      	lsrs	r2, r1, #20
   15386:	0028      	movs	r0, r5
   15388:	0512      	lsls	r2, r2, #20
   1538a:	4d1c      	ldr	r5, [pc, #112]	; (153fc <__aeabi_f2d+0x98>)
   1538c:	4332      	orrs	r2, r6
   1538e:	055b      	lsls	r3, r3, #21
   15390:	402a      	ands	r2, r5
   15392:	085b      	lsrs	r3, r3, #1
   15394:	4313      	orrs	r3, r2
   15396:	005b      	lsls	r3, r3, #1
   15398:	07e4      	lsls	r4, r4, #31
   1539a:	085b      	lsrs	r3, r3, #1
   1539c:	4323      	orrs	r3, r4
   1539e:	0019      	movs	r1, r3
   153a0:	bd70      	pop	{r4, r5, r6, pc}
   153a2:	2900      	cmp	r1, #0
   153a4:	d114      	bne.n	153d0 <__aeabi_f2d+0x6c>
   153a6:	2d00      	cmp	r5, #0
   153a8:	d01e      	beq.n	153e8 <__aeabi_f2d+0x84>
   153aa:	0028      	movs	r0, r5
   153ac:	f000 f8b6 	bl	1551c <__clzsi2>
   153b0:	280a      	cmp	r0, #10
   153b2:	dc1c      	bgt.n	153ee <__aeabi_f2d+0x8a>
   153b4:	230b      	movs	r3, #11
   153b6:	002a      	movs	r2, r5
   153b8:	1a1b      	subs	r3, r3, r0
   153ba:	40da      	lsrs	r2, r3
   153bc:	0003      	movs	r3, r0
   153be:	3315      	adds	r3, #21
   153c0:	409d      	lsls	r5, r3
   153c2:	4b0f      	ldr	r3, [pc, #60]	; (15400 <__aeabi_f2d+0x9c>)
   153c4:	0312      	lsls	r2, r2, #12
   153c6:	1a1b      	subs	r3, r3, r0
   153c8:	055b      	lsls	r3, r3, #21
   153ca:	0b16      	lsrs	r6, r2, #12
   153cc:	0d5b      	lsrs	r3, r3, #21
   153ce:	e7d8      	b.n	15382 <__aeabi_f2d+0x1e>
   153d0:	2d00      	cmp	r5, #0
   153d2:	d006      	beq.n	153e2 <__aeabi_f2d+0x7e>
   153d4:	0b32      	lsrs	r2, r6, #12
   153d6:	2680      	movs	r6, #128	; 0x80
   153d8:	0336      	lsls	r6, r6, #12
   153da:	076d      	lsls	r5, r5, #29
   153dc:	4316      	orrs	r6, r2
   153de:	4b09      	ldr	r3, [pc, #36]	; (15404 <__aeabi_f2d+0xa0>)
   153e0:	e7cf      	b.n	15382 <__aeabi_f2d+0x1e>
   153e2:	4b08      	ldr	r3, [pc, #32]	; (15404 <__aeabi_f2d+0xa0>)
   153e4:	2600      	movs	r6, #0
   153e6:	e7cc      	b.n	15382 <__aeabi_f2d+0x1e>
   153e8:	2300      	movs	r3, #0
   153ea:	2600      	movs	r6, #0
   153ec:	e7c9      	b.n	15382 <__aeabi_f2d+0x1e>
   153ee:	0003      	movs	r3, r0
   153f0:	002a      	movs	r2, r5
   153f2:	3b0b      	subs	r3, #11
   153f4:	409a      	lsls	r2, r3
   153f6:	2500      	movs	r5, #0
   153f8:	e7e3      	b.n	153c2 <__aeabi_f2d+0x5e>
   153fa:	46c0      	nop			; (mov r8, r8)
   153fc:	800fffff 	.word	0x800fffff
   15400:	00000389 	.word	0x00000389
   15404:	000007ff 	.word	0x000007ff

00015408 <__aeabi_d2f>:
   15408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1540a:	004c      	lsls	r4, r1, #1
   1540c:	0d64      	lsrs	r4, r4, #21
   1540e:	030b      	lsls	r3, r1, #12
   15410:	1c62      	adds	r2, r4, #1
   15412:	0f45      	lsrs	r5, r0, #29
   15414:	0a5b      	lsrs	r3, r3, #9
   15416:	0552      	lsls	r2, r2, #21
   15418:	432b      	orrs	r3, r5
   1541a:	0fc9      	lsrs	r1, r1, #31
   1541c:	00c5      	lsls	r5, r0, #3
   1541e:	0d52      	lsrs	r2, r2, #21
   15420:	2a01      	cmp	r2, #1
   15422:	dd28      	ble.n	15476 <__aeabi_d2f+0x6e>
   15424:	4a3a      	ldr	r2, [pc, #232]	; (15510 <__aeabi_d2f+0x108>)
   15426:	18a6      	adds	r6, r4, r2
   15428:	2efe      	cmp	r6, #254	; 0xfe
   1542a:	dc1b      	bgt.n	15464 <__aeabi_d2f+0x5c>
   1542c:	2e00      	cmp	r6, #0
   1542e:	dd3e      	ble.n	154ae <__aeabi_d2f+0xa6>
   15430:	0180      	lsls	r0, r0, #6
   15432:	0002      	movs	r2, r0
   15434:	1e50      	subs	r0, r2, #1
   15436:	4182      	sbcs	r2, r0
   15438:	0f6d      	lsrs	r5, r5, #29
   1543a:	432a      	orrs	r2, r5
   1543c:	00db      	lsls	r3, r3, #3
   1543e:	4313      	orrs	r3, r2
   15440:	075a      	lsls	r2, r3, #29
   15442:	d004      	beq.n	1544e <__aeabi_d2f+0x46>
   15444:	220f      	movs	r2, #15
   15446:	401a      	ands	r2, r3
   15448:	2a04      	cmp	r2, #4
   1544a:	d000      	beq.n	1544e <__aeabi_d2f+0x46>
   1544c:	3304      	adds	r3, #4
   1544e:	2280      	movs	r2, #128	; 0x80
   15450:	04d2      	lsls	r2, r2, #19
   15452:	401a      	ands	r2, r3
   15454:	d05a      	beq.n	1550c <__aeabi_d2f+0x104>
   15456:	3601      	adds	r6, #1
   15458:	2eff      	cmp	r6, #255	; 0xff
   1545a:	d003      	beq.n	15464 <__aeabi_d2f+0x5c>
   1545c:	019b      	lsls	r3, r3, #6
   1545e:	0a5b      	lsrs	r3, r3, #9
   15460:	b2f4      	uxtb	r4, r6
   15462:	e001      	b.n	15468 <__aeabi_d2f+0x60>
   15464:	24ff      	movs	r4, #255	; 0xff
   15466:	2300      	movs	r3, #0
   15468:	0258      	lsls	r0, r3, #9
   1546a:	05e4      	lsls	r4, r4, #23
   1546c:	0a40      	lsrs	r0, r0, #9
   1546e:	07c9      	lsls	r1, r1, #31
   15470:	4320      	orrs	r0, r4
   15472:	4308      	orrs	r0, r1
   15474:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15476:	2c00      	cmp	r4, #0
   15478:	d007      	beq.n	1548a <__aeabi_d2f+0x82>
   1547a:	431d      	orrs	r5, r3
   1547c:	d0f2      	beq.n	15464 <__aeabi_d2f+0x5c>
   1547e:	2080      	movs	r0, #128	; 0x80
   15480:	00db      	lsls	r3, r3, #3
   15482:	0480      	lsls	r0, r0, #18
   15484:	4303      	orrs	r3, r0
   15486:	26ff      	movs	r6, #255	; 0xff
   15488:	e7da      	b.n	15440 <__aeabi_d2f+0x38>
   1548a:	432b      	orrs	r3, r5
   1548c:	d003      	beq.n	15496 <__aeabi_d2f+0x8e>
   1548e:	2305      	movs	r3, #5
   15490:	08db      	lsrs	r3, r3, #3
   15492:	2cff      	cmp	r4, #255	; 0xff
   15494:	d003      	beq.n	1549e <__aeabi_d2f+0x96>
   15496:	025b      	lsls	r3, r3, #9
   15498:	0a5b      	lsrs	r3, r3, #9
   1549a:	b2e4      	uxtb	r4, r4
   1549c:	e7e4      	b.n	15468 <__aeabi_d2f+0x60>
   1549e:	2b00      	cmp	r3, #0
   154a0:	d032      	beq.n	15508 <__aeabi_d2f+0x100>
   154a2:	2080      	movs	r0, #128	; 0x80
   154a4:	03c0      	lsls	r0, r0, #15
   154a6:	4303      	orrs	r3, r0
   154a8:	025b      	lsls	r3, r3, #9
   154aa:	0a5b      	lsrs	r3, r3, #9
   154ac:	e7dc      	b.n	15468 <__aeabi_d2f+0x60>
   154ae:	0032      	movs	r2, r6
   154b0:	3217      	adds	r2, #23
   154b2:	db14      	blt.n	154de <__aeabi_d2f+0xd6>
   154b4:	2280      	movs	r2, #128	; 0x80
   154b6:	271e      	movs	r7, #30
   154b8:	0412      	lsls	r2, r2, #16
   154ba:	4313      	orrs	r3, r2
   154bc:	1bbf      	subs	r7, r7, r6
   154be:	2f1f      	cmp	r7, #31
   154c0:	dc0f      	bgt.n	154e2 <__aeabi_d2f+0xda>
   154c2:	4a14      	ldr	r2, [pc, #80]	; (15514 <__aeabi_d2f+0x10c>)
   154c4:	4694      	mov	ip, r2
   154c6:	4464      	add	r4, ip
   154c8:	002a      	movs	r2, r5
   154ca:	40a5      	lsls	r5, r4
   154cc:	002e      	movs	r6, r5
   154ce:	40a3      	lsls	r3, r4
   154d0:	1e75      	subs	r5, r6, #1
   154d2:	41ae      	sbcs	r6, r5
   154d4:	40fa      	lsrs	r2, r7
   154d6:	4333      	orrs	r3, r6
   154d8:	4313      	orrs	r3, r2
   154da:	2600      	movs	r6, #0
   154dc:	e7b0      	b.n	15440 <__aeabi_d2f+0x38>
   154de:	2400      	movs	r4, #0
   154e0:	e7d5      	b.n	1548e <__aeabi_d2f+0x86>
   154e2:	2202      	movs	r2, #2
   154e4:	4252      	negs	r2, r2
   154e6:	1b96      	subs	r6, r2, r6
   154e8:	001a      	movs	r2, r3
   154ea:	40f2      	lsrs	r2, r6
   154ec:	2f20      	cmp	r7, #32
   154ee:	d009      	beq.n	15504 <__aeabi_d2f+0xfc>
   154f0:	4809      	ldr	r0, [pc, #36]	; (15518 <__aeabi_d2f+0x110>)
   154f2:	4684      	mov	ip, r0
   154f4:	4464      	add	r4, ip
   154f6:	40a3      	lsls	r3, r4
   154f8:	432b      	orrs	r3, r5
   154fa:	1e5d      	subs	r5, r3, #1
   154fc:	41ab      	sbcs	r3, r5
   154fe:	2600      	movs	r6, #0
   15500:	4313      	orrs	r3, r2
   15502:	e79d      	b.n	15440 <__aeabi_d2f+0x38>
   15504:	2300      	movs	r3, #0
   15506:	e7f7      	b.n	154f8 <__aeabi_d2f+0xf0>
   15508:	2300      	movs	r3, #0
   1550a:	e7ad      	b.n	15468 <__aeabi_d2f+0x60>
   1550c:	0034      	movs	r4, r6
   1550e:	e7bf      	b.n	15490 <__aeabi_d2f+0x88>
   15510:	fffffc80 	.word	0xfffffc80
   15514:	fffffc82 	.word	0xfffffc82
   15518:	fffffca2 	.word	0xfffffca2

0001551c <__clzsi2>:
   1551c:	211c      	movs	r1, #28
   1551e:	2301      	movs	r3, #1
   15520:	041b      	lsls	r3, r3, #16
   15522:	4298      	cmp	r0, r3
   15524:	d301      	bcc.n	1552a <__clzsi2+0xe>
   15526:	0c00      	lsrs	r0, r0, #16
   15528:	3910      	subs	r1, #16
   1552a:	0a1b      	lsrs	r3, r3, #8
   1552c:	4298      	cmp	r0, r3
   1552e:	d301      	bcc.n	15534 <__clzsi2+0x18>
   15530:	0a00      	lsrs	r0, r0, #8
   15532:	3908      	subs	r1, #8
   15534:	091b      	lsrs	r3, r3, #4
   15536:	4298      	cmp	r0, r3
   15538:	d301      	bcc.n	1553e <__clzsi2+0x22>
   1553a:	0900      	lsrs	r0, r0, #4
   1553c:	3904      	subs	r1, #4
   1553e:	a202      	add	r2, pc, #8	; (adr r2, 15548 <__clzsi2+0x2c>)
   15540:	5c10      	ldrb	r0, [r2, r0]
   15542:	1840      	adds	r0, r0, r1
   15544:	4770      	bx	lr
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	02020304 	.word	0x02020304
   1554c:	01010101 	.word	0x01010101
	...

00015558 <__clzdi2>:
   15558:	b510      	push	{r4, lr}
   1555a:	2900      	cmp	r1, #0
   1555c:	d103      	bne.n	15566 <__clzdi2+0xe>
   1555e:	f7ff ffdd 	bl	1551c <__clzsi2>
   15562:	3020      	adds	r0, #32
   15564:	e002      	b.n	1556c <__clzdi2+0x14>
   15566:	1c08      	adds	r0, r1, #0
   15568:	f7ff ffd8 	bl	1551c <__clzsi2>
   1556c:	bd10      	pop	{r4, pc}
   1556e:	46c0      	nop			; (mov r8, r8)

00015570 <__aeabi_d2uiz>:
   15570:	b570      	push	{r4, r5, r6, lr}
   15572:	2200      	movs	r2, #0
   15574:	4b0c      	ldr	r3, [pc, #48]	; (155a8 <__aeabi_d2uiz+0x38>)
   15576:	0004      	movs	r4, r0
   15578:	000d      	movs	r5, r1
   1557a:	f000 f84b 	bl	15614 <__aeabi_dcmpge>
   1557e:	2800      	cmp	r0, #0
   15580:	d104      	bne.n	1558c <__aeabi_d2uiz+0x1c>
   15582:	0020      	movs	r0, r4
   15584:	0029      	movs	r1, r5
   15586:	f7ff fe81 	bl	1528c <__aeabi_d2iz>
   1558a:	bd70      	pop	{r4, r5, r6, pc}
   1558c:	4b06      	ldr	r3, [pc, #24]	; (155a8 <__aeabi_d2uiz+0x38>)
   1558e:	2200      	movs	r2, #0
   15590:	0020      	movs	r0, r4
   15592:	0029      	movs	r1, r5
   15594:	f7ff fb64 	bl	14c60 <__aeabi_dsub>
   15598:	f7ff fe78 	bl	1528c <__aeabi_d2iz>
   1559c:	2380      	movs	r3, #128	; 0x80
   1559e:	061b      	lsls	r3, r3, #24
   155a0:	469c      	mov	ip, r3
   155a2:	4460      	add	r0, ip
   155a4:	e7f1      	b.n	1558a <__aeabi_d2uiz+0x1a>
   155a6:	46c0      	nop			; (mov r8, r8)
   155a8:	41e00000 	.word	0x41e00000

000155ac <__aeabi_cdrcmple>:
   155ac:	4684      	mov	ip, r0
   155ae:	1c10      	adds	r0, r2, #0
   155b0:	4662      	mov	r2, ip
   155b2:	468c      	mov	ip, r1
   155b4:	1c19      	adds	r1, r3, #0
   155b6:	4663      	mov	r3, ip
   155b8:	e000      	b.n	155bc <__aeabi_cdcmpeq>
   155ba:	46c0      	nop			; (mov r8, r8)

000155bc <__aeabi_cdcmpeq>:
   155bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   155be:	f000 f8d1 	bl	15764 <__ledf2>
   155c2:	2800      	cmp	r0, #0
   155c4:	d401      	bmi.n	155ca <__aeabi_cdcmpeq+0xe>
   155c6:	2100      	movs	r1, #0
   155c8:	42c8      	cmn	r0, r1
   155ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000155cc <__aeabi_dcmpeq>:
   155cc:	b510      	push	{r4, lr}
   155ce:	f000 f82b 	bl	15628 <__eqdf2>
   155d2:	4240      	negs	r0, r0
   155d4:	3001      	adds	r0, #1
   155d6:	bd10      	pop	{r4, pc}

000155d8 <__aeabi_dcmplt>:
   155d8:	b510      	push	{r4, lr}
   155da:	f000 f8c3 	bl	15764 <__ledf2>
   155de:	2800      	cmp	r0, #0
   155e0:	db01      	blt.n	155e6 <__aeabi_dcmplt+0xe>
   155e2:	2000      	movs	r0, #0
   155e4:	bd10      	pop	{r4, pc}
   155e6:	2001      	movs	r0, #1
   155e8:	bd10      	pop	{r4, pc}
   155ea:	46c0      	nop			; (mov r8, r8)

000155ec <__aeabi_dcmple>:
   155ec:	b510      	push	{r4, lr}
   155ee:	f000 f8b9 	bl	15764 <__ledf2>
   155f2:	2800      	cmp	r0, #0
   155f4:	dd01      	ble.n	155fa <__aeabi_dcmple+0xe>
   155f6:	2000      	movs	r0, #0
   155f8:	bd10      	pop	{r4, pc}
   155fa:	2001      	movs	r0, #1
   155fc:	bd10      	pop	{r4, pc}
   155fe:	46c0      	nop			; (mov r8, r8)

00015600 <__aeabi_dcmpgt>:
   15600:	b510      	push	{r4, lr}
   15602:	f000 f84b 	bl	1569c <__gedf2>
   15606:	2800      	cmp	r0, #0
   15608:	dc01      	bgt.n	1560e <__aeabi_dcmpgt+0xe>
   1560a:	2000      	movs	r0, #0
   1560c:	bd10      	pop	{r4, pc}
   1560e:	2001      	movs	r0, #1
   15610:	bd10      	pop	{r4, pc}
   15612:	46c0      	nop			; (mov r8, r8)

00015614 <__aeabi_dcmpge>:
   15614:	b510      	push	{r4, lr}
   15616:	f000 f841 	bl	1569c <__gedf2>
   1561a:	2800      	cmp	r0, #0
   1561c:	da01      	bge.n	15622 <__aeabi_dcmpge+0xe>
   1561e:	2000      	movs	r0, #0
   15620:	bd10      	pop	{r4, pc}
   15622:	2001      	movs	r0, #1
   15624:	bd10      	pop	{r4, pc}
   15626:	46c0      	nop			; (mov r8, r8)

00015628 <__eqdf2>:
   15628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1562a:	464f      	mov	r7, r9
   1562c:	4646      	mov	r6, r8
   1562e:	46d6      	mov	lr, sl
   15630:	005c      	lsls	r4, r3, #1
   15632:	b5c0      	push	{r6, r7, lr}
   15634:	031f      	lsls	r7, r3, #12
   15636:	0fdb      	lsrs	r3, r3, #31
   15638:	469a      	mov	sl, r3
   1563a:	4b17      	ldr	r3, [pc, #92]	; (15698 <__eqdf2+0x70>)
   1563c:	030e      	lsls	r6, r1, #12
   1563e:	004d      	lsls	r5, r1, #1
   15640:	4684      	mov	ip, r0
   15642:	4680      	mov	r8, r0
   15644:	0b36      	lsrs	r6, r6, #12
   15646:	0d6d      	lsrs	r5, r5, #21
   15648:	0fc9      	lsrs	r1, r1, #31
   1564a:	4691      	mov	r9, r2
   1564c:	0b3f      	lsrs	r7, r7, #12
   1564e:	0d64      	lsrs	r4, r4, #21
   15650:	2001      	movs	r0, #1
   15652:	429d      	cmp	r5, r3
   15654:	d008      	beq.n	15668 <__eqdf2+0x40>
   15656:	429c      	cmp	r4, r3
   15658:	d001      	beq.n	1565e <__eqdf2+0x36>
   1565a:	42a5      	cmp	r5, r4
   1565c:	d00b      	beq.n	15676 <__eqdf2+0x4e>
   1565e:	bc1c      	pop	{r2, r3, r4}
   15660:	4690      	mov	r8, r2
   15662:	4699      	mov	r9, r3
   15664:	46a2      	mov	sl, r4
   15666:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15668:	4663      	mov	r3, ip
   1566a:	4333      	orrs	r3, r6
   1566c:	d1f7      	bne.n	1565e <__eqdf2+0x36>
   1566e:	42ac      	cmp	r4, r5
   15670:	d1f5      	bne.n	1565e <__eqdf2+0x36>
   15672:	433a      	orrs	r2, r7
   15674:	d1f3      	bne.n	1565e <__eqdf2+0x36>
   15676:	2001      	movs	r0, #1
   15678:	42be      	cmp	r6, r7
   1567a:	d1f0      	bne.n	1565e <__eqdf2+0x36>
   1567c:	45c8      	cmp	r8, r9
   1567e:	d1ee      	bne.n	1565e <__eqdf2+0x36>
   15680:	4551      	cmp	r1, sl
   15682:	d007      	beq.n	15694 <__eqdf2+0x6c>
   15684:	2d00      	cmp	r5, #0
   15686:	d1ea      	bne.n	1565e <__eqdf2+0x36>
   15688:	4663      	mov	r3, ip
   1568a:	431e      	orrs	r6, r3
   1568c:	0030      	movs	r0, r6
   1568e:	1e46      	subs	r6, r0, #1
   15690:	41b0      	sbcs	r0, r6
   15692:	e7e4      	b.n	1565e <__eqdf2+0x36>
   15694:	2000      	movs	r0, #0
   15696:	e7e2      	b.n	1565e <__eqdf2+0x36>
   15698:	000007ff 	.word	0x000007ff

0001569c <__gedf2>:
   1569c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1569e:	4645      	mov	r5, r8
   156a0:	46de      	mov	lr, fp
   156a2:	4657      	mov	r7, sl
   156a4:	464e      	mov	r6, r9
   156a6:	b5e0      	push	{r5, r6, r7, lr}
   156a8:	031f      	lsls	r7, r3, #12
   156aa:	0b3d      	lsrs	r5, r7, #12
   156ac:	4f2c      	ldr	r7, [pc, #176]	; (15760 <__gedf2+0xc4>)
   156ae:	030e      	lsls	r6, r1, #12
   156b0:	004c      	lsls	r4, r1, #1
   156b2:	46ab      	mov	fp, r5
   156b4:	005d      	lsls	r5, r3, #1
   156b6:	4684      	mov	ip, r0
   156b8:	0b36      	lsrs	r6, r6, #12
   156ba:	0d64      	lsrs	r4, r4, #21
   156bc:	0fc9      	lsrs	r1, r1, #31
   156be:	4690      	mov	r8, r2
   156c0:	0d6d      	lsrs	r5, r5, #21
   156c2:	0fdb      	lsrs	r3, r3, #31
   156c4:	42bc      	cmp	r4, r7
   156c6:	d02a      	beq.n	1571e <__gedf2+0x82>
   156c8:	4f25      	ldr	r7, [pc, #148]	; (15760 <__gedf2+0xc4>)
   156ca:	42bd      	cmp	r5, r7
   156cc:	d02d      	beq.n	1572a <__gedf2+0x8e>
   156ce:	2c00      	cmp	r4, #0
   156d0:	d10f      	bne.n	156f2 <__gedf2+0x56>
   156d2:	4330      	orrs	r0, r6
   156d4:	0007      	movs	r7, r0
   156d6:	4681      	mov	r9, r0
   156d8:	4278      	negs	r0, r7
   156da:	4178      	adcs	r0, r7
   156dc:	b2c0      	uxtb	r0, r0
   156de:	2d00      	cmp	r5, #0
   156e0:	d117      	bne.n	15712 <__gedf2+0x76>
   156e2:	465f      	mov	r7, fp
   156e4:	433a      	orrs	r2, r7
   156e6:	d114      	bne.n	15712 <__gedf2+0x76>
   156e8:	464b      	mov	r3, r9
   156ea:	2000      	movs	r0, #0
   156ec:	2b00      	cmp	r3, #0
   156ee:	d00a      	beq.n	15706 <__gedf2+0x6a>
   156f0:	e006      	b.n	15700 <__gedf2+0x64>
   156f2:	2d00      	cmp	r5, #0
   156f4:	d102      	bne.n	156fc <__gedf2+0x60>
   156f6:	4658      	mov	r0, fp
   156f8:	4302      	orrs	r2, r0
   156fa:	d001      	beq.n	15700 <__gedf2+0x64>
   156fc:	4299      	cmp	r1, r3
   156fe:	d018      	beq.n	15732 <__gedf2+0x96>
   15700:	4248      	negs	r0, r1
   15702:	2101      	movs	r1, #1
   15704:	4308      	orrs	r0, r1
   15706:	bc3c      	pop	{r2, r3, r4, r5}
   15708:	4690      	mov	r8, r2
   1570a:	4699      	mov	r9, r3
   1570c:	46a2      	mov	sl, r4
   1570e:	46ab      	mov	fp, r5
   15710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15712:	2800      	cmp	r0, #0
   15714:	d0f2      	beq.n	156fc <__gedf2+0x60>
   15716:	2001      	movs	r0, #1
   15718:	3b01      	subs	r3, #1
   1571a:	4318      	orrs	r0, r3
   1571c:	e7f3      	b.n	15706 <__gedf2+0x6a>
   1571e:	0037      	movs	r7, r6
   15720:	4307      	orrs	r7, r0
   15722:	d0d1      	beq.n	156c8 <__gedf2+0x2c>
   15724:	2002      	movs	r0, #2
   15726:	4240      	negs	r0, r0
   15728:	e7ed      	b.n	15706 <__gedf2+0x6a>
   1572a:	465f      	mov	r7, fp
   1572c:	4317      	orrs	r7, r2
   1572e:	d0ce      	beq.n	156ce <__gedf2+0x32>
   15730:	e7f8      	b.n	15724 <__gedf2+0x88>
   15732:	42ac      	cmp	r4, r5
   15734:	dce4      	bgt.n	15700 <__gedf2+0x64>
   15736:	da03      	bge.n	15740 <__gedf2+0xa4>
   15738:	1e48      	subs	r0, r1, #1
   1573a:	2101      	movs	r1, #1
   1573c:	4308      	orrs	r0, r1
   1573e:	e7e2      	b.n	15706 <__gedf2+0x6a>
   15740:	455e      	cmp	r6, fp
   15742:	d8dd      	bhi.n	15700 <__gedf2+0x64>
   15744:	d006      	beq.n	15754 <__gedf2+0xb8>
   15746:	2000      	movs	r0, #0
   15748:	455e      	cmp	r6, fp
   1574a:	d2dc      	bcs.n	15706 <__gedf2+0x6a>
   1574c:	2301      	movs	r3, #1
   1574e:	1e48      	subs	r0, r1, #1
   15750:	4318      	orrs	r0, r3
   15752:	e7d8      	b.n	15706 <__gedf2+0x6a>
   15754:	45c4      	cmp	ip, r8
   15756:	d8d3      	bhi.n	15700 <__gedf2+0x64>
   15758:	2000      	movs	r0, #0
   1575a:	45c4      	cmp	ip, r8
   1575c:	d3f6      	bcc.n	1574c <__gedf2+0xb0>
   1575e:	e7d2      	b.n	15706 <__gedf2+0x6a>
   15760:	000007ff 	.word	0x000007ff

00015764 <__ledf2>:
   15764:	b5f0      	push	{r4, r5, r6, r7, lr}
   15766:	464e      	mov	r6, r9
   15768:	4645      	mov	r5, r8
   1576a:	46de      	mov	lr, fp
   1576c:	4657      	mov	r7, sl
   1576e:	005c      	lsls	r4, r3, #1
   15770:	b5e0      	push	{r5, r6, r7, lr}
   15772:	031f      	lsls	r7, r3, #12
   15774:	0fdb      	lsrs	r3, r3, #31
   15776:	4699      	mov	r9, r3
   15778:	4b2a      	ldr	r3, [pc, #168]	; (15824 <__ledf2+0xc0>)
   1577a:	030e      	lsls	r6, r1, #12
   1577c:	004d      	lsls	r5, r1, #1
   1577e:	0fc9      	lsrs	r1, r1, #31
   15780:	4684      	mov	ip, r0
   15782:	0b36      	lsrs	r6, r6, #12
   15784:	0d6d      	lsrs	r5, r5, #21
   15786:	468b      	mov	fp, r1
   15788:	4690      	mov	r8, r2
   1578a:	0b3f      	lsrs	r7, r7, #12
   1578c:	0d64      	lsrs	r4, r4, #21
   1578e:	429d      	cmp	r5, r3
   15790:	d020      	beq.n	157d4 <__ledf2+0x70>
   15792:	4b24      	ldr	r3, [pc, #144]	; (15824 <__ledf2+0xc0>)
   15794:	429c      	cmp	r4, r3
   15796:	d022      	beq.n	157de <__ledf2+0x7a>
   15798:	2d00      	cmp	r5, #0
   1579a:	d112      	bne.n	157c2 <__ledf2+0x5e>
   1579c:	4330      	orrs	r0, r6
   1579e:	4243      	negs	r3, r0
   157a0:	4143      	adcs	r3, r0
   157a2:	b2db      	uxtb	r3, r3
   157a4:	2c00      	cmp	r4, #0
   157a6:	d01f      	beq.n	157e8 <__ledf2+0x84>
   157a8:	2b00      	cmp	r3, #0
   157aa:	d00c      	beq.n	157c6 <__ledf2+0x62>
   157ac:	464b      	mov	r3, r9
   157ae:	2001      	movs	r0, #1
   157b0:	3b01      	subs	r3, #1
   157b2:	4303      	orrs	r3, r0
   157b4:	0018      	movs	r0, r3
   157b6:	bc3c      	pop	{r2, r3, r4, r5}
   157b8:	4690      	mov	r8, r2
   157ba:	4699      	mov	r9, r3
   157bc:	46a2      	mov	sl, r4
   157be:	46ab      	mov	fp, r5
   157c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157c2:	2c00      	cmp	r4, #0
   157c4:	d016      	beq.n	157f4 <__ledf2+0x90>
   157c6:	45cb      	cmp	fp, r9
   157c8:	d017      	beq.n	157fa <__ledf2+0x96>
   157ca:	465b      	mov	r3, fp
   157cc:	4259      	negs	r1, r3
   157ce:	2301      	movs	r3, #1
   157d0:	430b      	orrs	r3, r1
   157d2:	e7ef      	b.n	157b4 <__ledf2+0x50>
   157d4:	0031      	movs	r1, r6
   157d6:	2302      	movs	r3, #2
   157d8:	4301      	orrs	r1, r0
   157da:	d1eb      	bne.n	157b4 <__ledf2+0x50>
   157dc:	e7d9      	b.n	15792 <__ledf2+0x2e>
   157de:	0039      	movs	r1, r7
   157e0:	2302      	movs	r3, #2
   157e2:	4311      	orrs	r1, r2
   157e4:	d1e6      	bne.n	157b4 <__ledf2+0x50>
   157e6:	e7d7      	b.n	15798 <__ledf2+0x34>
   157e8:	433a      	orrs	r2, r7
   157ea:	d1dd      	bne.n	157a8 <__ledf2+0x44>
   157ec:	2300      	movs	r3, #0
   157ee:	2800      	cmp	r0, #0
   157f0:	d0e0      	beq.n	157b4 <__ledf2+0x50>
   157f2:	e7ea      	b.n	157ca <__ledf2+0x66>
   157f4:	433a      	orrs	r2, r7
   157f6:	d1e6      	bne.n	157c6 <__ledf2+0x62>
   157f8:	e7e7      	b.n	157ca <__ledf2+0x66>
   157fa:	42a5      	cmp	r5, r4
   157fc:	dce5      	bgt.n	157ca <__ledf2+0x66>
   157fe:	db05      	blt.n	1580c <__ledf2+0xa8>
   15800:	42be      	cmp	r6, r7
   15802:	d8e2      	bhi.n	157ca <__ledf2+0x66>
   15804:	d007      	beq.n	15816 <__ledf2+0xb2>
   15806:	2300      	movs	r3, #0
   15808:	42be      	cmp	r6, r7
   1580a:	d2d3      	bcs.n	157b4 <__ledf2+0x50>
   1580c:	4659      	mov	r1, fp
   1580e:	2301      	movs	r3, #1
   15810:	3901      	subs	r1, #1
   15812:	430b      	orrs	r3, r1
   15814:	e7ce      	b.n	157b4 <__ledf2+0x50>
   15816:	45c4      	cmp	ip, r8
   15818:	d8d7      	bhi.n	157ca <__ledf2+0x66>
   1581a:	2300      	movs	r3, #0
   1581c:	45c4      	cmp	ip, r8
   1581e:	d3f5      	bcc.n	1580c <__ledf2+0xa8>
   15820:	e7c8      	b.n	157b4 <__ledf2+0x50>
   15822:	46c0      	nop			; (mov r8, r8)
   15824:	000007ff 	.word	0x000007ff

00015828 <atoi>:
   15828:	b510      	push	{r4, lr}
   1582a:	220a      	movs	r2, #10
   1582c:	2100      	movs	r1, #0
   1582e:	f000 fb4d 	bl	15ecc <strtol>
   15832:	bd10      	pop	{r4, pc}

00015834 <__libc_init_array>:
   15834:	b570      	push	{r4, r5, r6, lr}
   15836:	4e0d      	ldr	r6, [pc, #52]	; (1586c <__libc_init_array+0x38>)
   15838:	4d0d      	ldr	r5, [pc, #52]	; (15870 <__libc_init_array+0x3c>)
   1583a:	2400      	movs	r4, #0
   1583c:	1bad      	subs	r5, r5, r6
   1583e:	10ad      	asrs	r5, r5, #2
   15840:	d005      	beq.n	1584e <__libc_init_array+0x1a>
   15842:	00a3      	lsls	r3, r4, #2
   15844:	58f3      	ldr	r3, [r6, r3]
   15846:	3401      	adds	r4, #1
   15848:	4798      	blx	r3
   1584a:	42a5      	cmp	r5, r4
   1584c:	d1f9      	bne.n	15842 <__libc_init_array+0xe>
   1584e:	f008 fe2b 	bl	1e4a8 <_init>
   15852:	4e08      	ldr	r6, [pc, #32]	; (15874 <__libc_init_array+0x40>)
   15854:	4d08      	ldr	r5, [pc, #32]	; (15878 <__libc_init_array+0x44>)
   15856:	2400      	movs	r4, #0
   15858:	1bad      	subs	r5, r5, r6
   1585a:	10ad      	asrs	r5, r5, #2
   1585c:	d005      	beq.n	1586a <__libc_init_array+0x36>
   1585e:	00a3      	lsls	r3, r4, #2
   15860:	58f3      	ldr	r3, [r6, r3]
   15862:	3401      	adds	r4, #1
   15864:	4798      	blx	r3
   15866:	42a5      	cmp	r5, r4
   15868:	d1f9      	bne.n	1585e <__libc_init_array+0x2a>
   1586a:	bd70      	pop	{r4, r5, r6, pc}
   1586c:	0001e4b4 	.word	0x0001e4b4
   15870:	0001e4b4 	.word	0x0001e4b4
   15874:	0001e4b4 	.word	0x0001e4b4
   15878:	0001e4bc 	.word	0x0001e4bc

0001587c <memcmp>:
   1587c:	b510      	push	{r4, lr}
   1587e:	2a03      	cmp	r2, #3
   15880:	d91c      	bls.n	158bc <memcmp+0x40>
   15882:	0003      	movs	r3, r0
   15884:	430b      	orrs	r3, r1
   15886:	079b      	lsls	r3, r3, #30
   15888:	d00f      	beq.n	158aa <memcmp+0x2e>
   1588a:	7803      	ldrb	r3, [r0, #0]
   1588c:	780c      	ldrb	r4, [r1, #0]
   1588e:	1882      	adds	r2, r0, r2
   15890:	42a3      	cmp	r3, r4
   15892:	d004      	beq.n	1589e <memcmp+0x22>
   15894:	e015      	b.n	158c2 <memcmp+0x46>
   15896:	7803      	ldrb	r3, [r0, #0]
   15898:	780c      	ldrb	r4, [r1, #0]
   1589a:	42a3      	cmp	r3, r4
   1589c:	d111      	bne.n	158c2 <memcmp+0x46>
   1589e:	3001      	adds	r0, #1
   158a0:	3101      	adds	r1, #1
   158a2:	4282      	cmp	r2, r0
   158a4:	d1f7      	bne.n	15896 <memcmp+0x1a>
   158a6:	2000      	movs	r0, #0
   158a8:	bd10      	pop	{r4, pc}
   158aa:	6803      	ldr	r3, [r0, #0]
   158ac:	680c      	ldr	r4, [r1, #0]
   158ae:	42a3      	cmp	r3, r4
   158b0:	d1eb      	bne.n	1588a <memcmp+0xe>
   158b2:	3a04      	subs	r2, #4
   158b4:	3004      	adds	r0, #4
   158b6:	3104      	adds	r1, #4
   158b8:	2a03      	cmp	r2, #3
   158ba:	d8f6      	bhi.n	158aa <memcmp+0x2e>
   158bc:	2a00      	cmp	r2, #0
   158be:	d1e4      	bne.n	1588a <memcmp+0xe>
   158c0:	e7f1      	b.n	158a6 <memcmp+0x2a>
   158c2:	1b18      	subs	r0, r3, r4
   158c4:	e7f0      	b.n	158a8 <memcmp+0x2c>
   158c6:	46c0      	nop			; (mov r8, r8)

000158c8 <memcpy>:
   158c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   158ca:	0005      	movs	r5, r0
   158cc:	2a0f      	cmp	r2, #15
   158ce:	d92f      	bls.n	15930 <memcpy+0x68>
   158d0:	000b      	movs	r3, r1
   158d2:	4303      	orrs	r3, r0
   158d4:	079b      	lsls	r3, r3, #30
   158d6:	d134      	bne.n	15942 <memcpy+0x7a>
   158d8:	0016      	movs	r6, r2
   158da:	000c      	movs	r4, r1
   158dc:	0003      	movs	r3, r0
   158de:	3e10      	subs	r6, #16
   158e0:	0935      	lsrs	r5, r6, #4
   158e2:	3501      	adds	r5, #1
   158e4:	012d      	lsls	r5, r5, #4
   158e6:	1945      	adds	r5, r0, r5
   158e8:	6827      	ldr	r7, [r4, #0]
   158ea:	601f      	str	r7, [r3, #0]
   158ec:	6867      	ldr	r7, [r4, #4]
   158ee:	605f      	str	r7, [r3, #4]
   158f0:	68a7      	ldr	r7, [r4, #8]
   158f2:	609f      	str	r7, [r3, #8]
   158f4:	68e7      	ldr	r7, [r4, #12]
   158f6:	3410      	adds	r4, #16
   158f8:	60df      	str	r7, [r3, #12]
   158fa:	3310      	adds	r3, #16
   158fc:	429d      	cmp	r5, r3
   158fe:	d1f3      	bne.n	158e8 <memcpy+0x20>
   15900:	230f      	movs	r3, #15
   15902:	439e      	bics	r6, r3
   15904:	3610      	adds	r6, #16
   15906:	1985      	adds	r5, r0, r6
   15908:	1989      	adds	r1, r1, r6
   1590a:	4013      	ands	r3, r2
   1590c:	2b03      	cmp	r3, #3
   1590e:	d91a      	bls.n	15946 <memcpy+0x7e>
   15910:	1f1e      	subs	r6, r3, #4
   15912:	2300      	movs	r3, #0
   15914:	08b4      	lsrs	r4, r6, #2
   15916:	3401      	adds	r4, #1
   15918:	00a4      	lsls	r4, r4, #2
   1591a:	58cf      	ldr	r7, [r1, r3]
   1591c:	50ef      	str	r7, [r5, r3]
   1591e:	3304      	adds	r3, #4
   15920:	42a3      	cmp	r3, r4
   15922:	d1fa      	bne.n	1591a <memcpy+0x52>
   15924:	2403      	movs	r4, #3
   15926:	43a6      	bics	r6, r4
   15928:	1d33      	adds	r3, r6, #4
   1592a:	4022      	ands	r2, r4
   1592c:	18c9      	adds	r1, r1, r3
   1592e:	18ed      	adds	r5, r5, r3
   15930:	2a00      	cmp	r2, #0
   15932:	d005      	beq.n	15940 <memcpy+0x78>
   15934:	2300      	movs	r3, #0
   15936:	5ccc      	ldrb	r4, [r1, r3]
   15938:	54ec      	strb	r4, [r5, r3]
   1593a:	3301      	adds	r3, #1
   1593c:	4293      	cmp	r3, r2
   1593e:	d1fa      	bne.n	15936 <memcpy+0x6e>
   15940:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15942:	0005      	movs	r5, r0
   15944:	e7f6      	b.n	15934 <memcpy+0x6c>
   15946:	001a      	movs	r2, r3
   15948:	e7f2      	b.n	15930 <memcpy+0x68>
   1594a:	46c0      	nop			; (mov r8, r8)

0001594c <memset>:
   1594c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1594e:	0783      	lsls	r3, r0, #30
   15950:	d043      	beq.n	159da <memset+0x8e>
   15952:	1e54      	subs	r4, r2, #1
   15954:	2a00      	cmp	r2, #0
   15956:	d03f      	beq.n	159d8 <memset+0x8c>
   15958:	b2ce      	uxtb	r6, r1
   1595a:	0002      	movs	r2, r0
   1595c:	2503      	movs	r5, #3
   1595e:	e002      	b.n	15966 <memset+0x1a>
   15960:	001a      	movs	r2, r3
   15962:	3c01      	subs	r4, #1
   15964:	d338      	bcc.n	159d8 <memset+0x8c>
   15966:	1c53      	adds	r3, r2, #1
   15968:	7016      	strb	r6, [r2, #0]
   1596a:	422b      	tst	r3, r5
   1596c:	d1f8      	bne.n	15960 <memset+0x14>
   1596e:	2c03      	cmp	r4, #3
   15970:	d92a      	bls.n	159c8 <memset+0x7c>
   15972:	22ff      	movs	r2, #255	; 0xff
   15974:	400a      	ands	r2, r1
   15976:	0215      	lsls	r5, r2, #8
   15978:	4315      	orrs	r5, r2
   1597a:	042a      	lsls	r2, r5, #16
   1597c:	4315      	orrs	r5, r2
   1597e:	2c0f      	cmp	r4, #15
   15980:	d914      	bls.n	159ac <memset+0x60>
   15982:	0027      	movs	r7, r4
   15984:	001a      	movs	r2, r3
   15986:	3f10      	subs	r7, #16
   15988:	093e      	lsrs	r6, r7, #4
   1598a:	3601      	adds	r6, #1
   1598c:	0136      	lsls	r6, r6, #4
   1598e:	199e      	adds	r6, r3, r6
   15990:	6015      	str	r5, [r2, #0]
   15992:	6055      	str	r5, [r2, #4]
   15994:	6095      	str	r5, [r2, #8]
   15996:	60d5      	str	r5, [r2, #12]
   15998:	3210      	adds	r2, #16
   1599a:	4296      	cmp	r6, r2
   1599c:	d1f8      	bne.n	15990 <memset+0x44>
   1599e:	220f      	movs	r2, #15
   159a0:	4397      	bics	r7, r2
   159a2:	3710      	adds	r7, #16
   159a4:	19db      	adds	r3, r3, r7
   159a6:	4014      	ands	r4, r2
   159a8:	2c03      	cmp	r4, #3
   159aa:	d90d      	bls.n	159c8 <memset+0x7c>
   159ac:	001a      	movs	r2, r3
   159ae:	1f27      	subs	r7, r4, #4
   159b0:	08be      	lsrs	r6, r7, #2
   159b2:	3601      	adds	r6, #1
   159b4:	00b6      	lsls	r6, r6, #2
   159b6:	199e      	adds	r6, r3, r6
   159b8:	c220      	stmia	r2!, {r5}
   159ba:	42b2      	cmp	r2, r6
   159bc:	d1fc      	bne.n	159b8 <memset+0x6c>
   159be:	2203      	movs	r2, #3
   159c0:	4397      	bics	r7, r2
   159c2:	3704      	adds	r7, #4
   159c4:	19db      	adds	r3, r3, r7
   159c6:	4014      	ands	r4, r2
   159c8:	2c00      	cmp	r4, #0
   159ca:	d005      	beq.n	159d8 <memset+0x8c>
   159cc:	b2c9      	uxtb	r1, r1
   159ce:	191c      	adds	r4, r3, r4
   159d0:	7019      	strb	r1, [r3, #0]
   159d2:	3301      	adds	r3, #1
   159d4:	429c      	cmp	r4, r3
   159d6:	d1fb      	bne.n	159d0 <memset+0x84>
   159d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159da:	0014      	movs	r4, r2
   159dc:	0003      	movs	r3, r0
   159de:	e7c6      	b.n	1596e <memset+0x22>

000159e0 <printf>:
   159e0:	b40f      	push	{r0, r1, r2, r3}
   159e2:	b500      	push	{lr}
   159e4:	4906      	ldr	r1, [pc, #24]	; (15a00 <printf+0x20>)
   159e6:	b083      	sub	sp, #12
   159e8:	ab04      	add	r3, sp, #16
   159ea:	6808      	ldr	r0, [r1, #0]
   159ec:	cb04      	ldmia	r3!, {r2}
   159ee:	6881      	ldr	r1, [r0, #8]
   159f0:	9301      	str	r3, [sp, #4]
   159f2:	f001 fd85 	bl	17500 <_vfprintf_r>
   159f6:	b003      	add	sp, #12
   159f8:	bc08      	pop	{r3}
   159fa:	b004      	add	sp, #16
   159fc:	4718      	bx	r3
   159fe:	46c0      	nop			; (mov r8, r8)
   15a00:	200000d4 	.word	0x200000d4

00015a04 <_puts_r>:
   15a04:	b530      	push	{r4, r5, lr}
   15a06:	0004      	movs	r4, r0
   15a08:	b089      	sub	sp, #36	; 0x24
   15a0a:	0008      	movs	r0, r1
   15a0c:	000d      	movs	r5, r1
   15a0e:	f000 f993 	bl	15d38 <strlen>
   15a12:	ab04      	add	r3, sp, #16
   15a14:	4a21      	ldr	r2, [pc, #132]	; (15a9c <_puts_r+0x98>)
   15a16:	9301      	str	r3, [sp, #4]
   15a18:	2302      	movs	r3, #2
   15a1a:	9206      	str	r2, [sp, #24]
   15a1c:	2201      	movs	r2, #1
   15a1e:	9302      	str	r3, [sp, #8]
   15a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15a22:	9005      	str	r0, [sp, #20]
   15a24:	3001      	adds	r0, #1
   15a26:	9504      	str	r5, [sp, #16]
   15a28:	9207      	str	r2, [sp, #28]
   15a2a:	9003      	str	r0, [sp, #12]
   15a2c:	68a5      	ldr	r5, [r4, #8]
   15a2e:	2b00      	cmp	r3, #0
   15a30:	d02f      	beq.n	15a92 <_puts_r+0x8e>
   15a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15a34:	07db      	lsls	r3, r3, #31
   15a36:	d424      	bmi.n	15a82 <_puts_r+0x7e>
   15a38:	230c      	movs	r3, #12
   15a3a:	5eea      	ldrsh	r2, [r5, r3]
   15a3c:	b291      	uxth	r1, r2
   15a3e:	058b      	lsls	r3, r1, #22
   15a40:	d51c      	bpl.n	15a7c <_puts_r+0x78>
   15a42:	2380      	movs	r3, #128	; 0x80
   15a44:	019b      	lsls	r3, r3, #6
   15a46:	4219      	tst	r1, r3
   15a48:	d105      	bne.n	15a56 <_puts_r+0x52>
   15a4a:	4313      	orrs	r3, r2
   15a4c:	81ab      	strh	r3, [r5, #12]
   15a4e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   15a50:	4b13      	ldr	r3, [pc, #76]	; (15aa0 <_puts_r+0x9c>)
   15a52:	4013      	ands	r3, r2
   15a54:	666b      	str	r3, [r5, #100]	; 0x64
   15a56:	0020      	movs	r0, r4
   15a58:	aa01      	add	r2, sp, #4
   15a5a:	0029      	movs	r1, r5
   15a5c:	f004 fc76 	bl	1a34c <__sfvwrite_r>
   15a60:	1e44      	subs	r4, r0, #1
   15a62:	41a0      	sbcs	r0, r4
   15a64:	4244      	negs	r4, r0
   15a66:	200a      	movs	r0, #10
   15a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   15a6a:	4304      	orrs	r4, r0
   15a6c:	07db      	lsls	r3, r3, #31
   15a6e:	d402      	bmi.n	15a76 <_puts_r+0x72>
   15a70:	89ab      	ldrh	r3, [r5, #12]
   15a72:	059b      	lsls	r3, r3, #22
   15a74:	d509      	bpl.n	15a8a <_puts_r+0x86>
   15a76:	0020      	movs	r0, r4
   15a78:	b009      	add	sp, #36	; 0x24
   15a7a:	bd30      	pop	{r4, r5, pc}
   15a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15a7e:	f004 fe33 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   15a82:	230c      	movs	r3, #12
   15a84:	5eea      	ldrsh	r2, [r5, r3]
   15a86:	b291      	uxth	r1, r2
   15a88:	e7db      	b.n	15a42 <_puts_r+0x3e>
   15a8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   15a8c:	f004 fe2e 	bl	1a6ec <__retarget_lock_release_recursive>
   15a90:	e7f1      	b.n	15a76 <_puts_r+0x72>
   15a92:	0020      	movs	r0, r4
   15a94:	f004 fad2 	bl	1a03c <__sinit>
   15a98:	e7cb      	b.n	15a32 <_puts_r+0x2e>
   15a9a:	46c0      	nop			; (mov r8, r8)
   15a9c:	0001d914 	.word	0x0001d914
   15aa0:	ffffdfff 	.word	0xffffdfff

00015aa4 <puts>:
   15aa4:	b510      	push	{r4, lr}
   15aa6:	4b03      	ldr	r3, [pc, #12]	; (15ab4 <puts+0x10>)
   15aa8:	0001      	movs	r1, r0
   15aaa:	6818      	ldr	r0, [r3, #0]
   15aac:	f7ff ffaa 	bl	15a04 <_puts_r>
   15ab0:	bd10      	pop	{r4, pc}
   15ab2:	46c0      	nop			; (mov r8, r8)
   15ab4:	200000d4 	.word	0x200000d4

00015ab8 <srand>:
   15ab8:	2200      	movs	r2, #0
   15aba:	4b03      	ldr	r3, [pc, #12]	; (15ac8 <srand+0x10>)
   15abc:	681b      	ldr	r3, [r3, #0]
   15abe:	33a8      	adds	r3, #168	; 0xa8
   15ac0:	6018      	str	r0, [r3, #0]
   15ac2:	605a      	str	r2, [r3, #4]
   15ac4:	4770      	bx	lr
   15ac6:	46c0      	nop			; (mov r8, r8)
   15ac8:	200000d4 	.word	0x200000d4

00015acc <rand>:
   15acc:	b510      	push	{r4, lr}
   15ace:	4b09      	ldr	r3, [pc, #36]	; (15af4 <rand+0x28>)
   15ad0:	4a09      	ldr	r2, [pc, #36]	; (15af8 <rand+0x2c>)
   15ad2:	681c      	ldr	r4, [r3, #0]
   15ad4:	4b09      	ldr	r3, [pc, #36]	; (15afc <rand+0x30>)
   15ad6:	34a8      	adds	r4, #168	; 0xa8
   15ad8:	6820      	ldr	r0, [r4, #0]
   15ada:	6861      	ldr	r1, [r4, #4]
   15adc:	f7fc ffe6 	bl	12aac <__aeabi_lmul>
   15ae0:	2201      	movs	r2, #1
   15ae2:	2300      	movs	r3, #0
   15ae4:	1880      	adds	r0, r0, r2
   15ae6:	4159      	adcs	r1, r3
   15ae8:	6020      	str	r0, [r4, #0]
   15aea:	6061      	str	r1, [r4, #4]
   15aec:	0048      	lsls	r0, r1, #1
   15aee:	0840      	lsrs	r0, r0, #1
   15af0:	bd10      	pop	{r4, pc}
   15af2:	46c0      	nop			; (mov r8, r8)
   15af4:	200000d4 	.word	0x200000d4
   15af8:	4c957f2d 	.word	0x4c957f2d
   15afc:	5851f42d 	.word	0x5851f42d

00015b00 <setbuf>:
   15b00:	424a      	negs	r2, r1
   15b02:	414a      	adcs	r2, r1
   15b04:	2380      	movs	r3, #128	; 0x80
   15b06:	b510      	push	{r4, lr}
   15b08:	0052      	lsls	r2, r2, #1
   15b0a:	00db      	lsls	r3, r3, #3
   15b0c:	f000 f802 	bl	15b14 <setvbuf>
   15b10:	bd10      	pop	{r4, pc}
   15b12:	46c0      	nop			; (mov r8, r8)

00015b14 <setvbuf>:
   15b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b16:	4647      	mov	r7, r8
   15b18:	46ce      	mov	lr, r9
   15b1a:	b580      	push	{r7, lr}
   15b1c:	001f      	movs	r7, r3
   15b1e:	4b63      	ldr	r3, [pc, #396]	; (15cac <setvbuf+0x198>)
   15b20:	b083      	sub	sp, #12
   15b22:	681d      	ldr	r5, [r3, #0]
   15b24:	0004      	movs	r4, r0
   15b26:	4688      	mov	r8, r1
   15b28:	0016      	movs	r6, r2
   15b2a:	2d00      	cmp	r5, #0
   15b2c:	d002      	beq.n	15b34 <setvbuf+0x20>
   15b2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   15b30:	2b00      	cmp	r3, #0
   15b32:	d066      	beq.n	15c02 <setvbuf+0xee>
   15b34:	2e02      	cmp	r6, #2
   15b36:	d005      	beq.n	15b44 <setvbuf+0x30>
   15b38:	2e01      	cmp	r6, #1
   15b3a:	d900      	bls.n	15b3e <setvbuf+0x2a>
   15b3c:	e0a1      	b.n	15c82 <setvbuf+0x16e>
   15b3e:	2f00      	cmp	r7, #0
   15b40:	da00      	bge.n	15b44 <setvbuf+0x30>
   15b42:	e09e      	b.n	15c82 <setvbuf+0x16e>
   15b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15b46:	07db      	lsls	r3, r3, #31
   15b48:	d533      	bpl.n	15bb2 <setvbuf+0x9e>
   15b4a:	0021      	movs	r1, r4
   15b4c:	0028      	movs	r0, r5
   15b4e:	f004 fa1b 	bl	19f88 <_fflush_r>
   15b52:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15b54:	2900      	cmp	r1, #0
   15b56:	d008      	beq.n	15b6a <setvbuf+0x56>
   15b58:	0023      	movs	r3, r4
   15b5a:	3340      	adds	r3, #64	; 0x40
   15b5c:	4299      	cmp	r1, r3
   15b5e:	d002      	beq.n	15b66 <setvbuf+0x52>
   15b60:	0028      	movs	r0, r5
   15b62:	f004 fb15 	bl	1a190 <_free_r>
   15b66:	2300      	movs	r3, #0
   15b68:	6323      	str	r3, [r4, #48]	; 0x30
   15b6a:	2300      	movs	r3, #0
   15b6c:	61a3      	str	r3, [r4, #24]
   15b6e:	6063      	str	r3, [r4, #4]
   15b70:	220c      	movs	r2, #12
   15b72:	5ea3      	ldrsh	r3, [r4, r2]
   15b74:	061a      	lsls	r2, r3, #24
   15b76:	d43d      	bmi.n	15bf4 <setvbuf+0xe0>
   15b78:	4a4d      	ldr	r2, [pc, #308]	; (15cb0 <setvbuf+0x19c>)
   15b7a:	4013      	ands	r3, r2
   15b7c:	81a3      	strh	r3, [r4, #12]
   15b7e:	2e02      	cmp	r6, #2
   15b80:	d01e      	beq.n	15bc0 <setvbuf+0xac>
   15b82:	ab01      	add	r3, sp, #4
   15b84:	466a      	mov	r2, sp
   15b86:	0021      	movs	r1, r4
   15b88:	0028      	movs	r0, r5
   15b8a:	f004 fdb1 	bl	1a6f0 <__swhatbuf_r>
   15b8e:	89a3      	ldrh	r3, [r4, #12]
   15b90:	4318      	orrs	r0, r3
   15b92:	81a0      	strh	r0, [r4, #12]
   15b94:	2f00      	cmp	r7, #0
   15b96:	d138      	bne.n	15c0a <setvbuf+0xf6>
   15b98:	9f00      	ldr	r7, [sp, #0]
   15b9a:	0038      	movs	r0, r7
   15b9c:	f004 fe20 	bl	1a7e0 <malloc>
   15ba0:	4680      	mov	r8, r0
   15ba2:	2800      	cmp	r0, #0
   15ba4:	d100      	bne.n	15ba8 <setvbuf+0x94>
   15ba6:	e06f      	b.n	15c88 <setvbuf+0x174>
   15ba8:	2280      	movs	r2, #128	; 0x80
   15baa:	89a3      	ldrh	r3, [r4, #12]
   15bac:	4313      	orrs	r3, r2
   15bae:	81a3      	strh	r3, [r4, #12]
   15bb0:	e02e      	b.n	15c10 <setvbuf+0xfc>
   15bb2:	89a3      	ldrh	r3, [r4, #12]
   15bb4:	059b      	lsls	r3, r3, #22
   15bb6:	d4c8      	bmi.n	15b4a <setvbuf+0x36>
   15bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15bba:	f004 fd95 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   15bbe:	e7c4      	b.n	15b4a <setvbuf+0x36>
   15bc0:	2500      	movs	r5, #0
   15bc2:	2202      	movs	r2, #2
   15bc4:	4313      	orrs	r3, r2
   15bc6:	2200      	movs	r2, #0
   15bc8:	60a2      	str	r2, [r4, #8]
   15bca:	0022      	movs	r2, r4
   15bcc:	3243      	adds	r2, #67	; 0x43
   15bce:	6022      	str	r2, [r4, #0]
   15bd0:	6122      	str	r2, [r4, #16]
   15bd2:	2201      	movs	r2, #1
   15bd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   15bd6:	81a3      	strh	r3, [r4, #12]
   15bd8:	6162      	str	r2, [r4, #20]
   15bda:	4211      	tst	r1, r2
   15bdc:	d104      	bne.n	15be8 <setvbuf+0xd4>
   15bde:	059b      	lsls	r3, r3, #22
   15be0:	d402      	bmi.n	15be8 <setvbuf+0xd4>
   15be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15be4:	f004 fd82 	bl	1a6ec <__retarget_lock_release_recursive>
   15be8:	0028      	movs	r0, r5
   15bea:	b003      	add	sp, #12
   15bec:	bc0c      	pop	{r2, r3}
   15bee:	4690      	mov	r8, r2
   15bf0:	4699      	mov	r9, r3
   15bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15bf4:	6921      	ldr	r1, [r4, #16]
   15bf6:	0028      	movs	r0, r5
   15bf8:	f004 faca 	bl	1a190 <_free_r>
   15bfc:	220c      	movs	r2, #12
   15bfe:	5ea3      	ldrsh	r3, [r4, r2]
   15c00:	e7ba      	b.n	15b78 <setvbuf+0x64>
   15c02:	0028      	movs	r0, r5
   15c04:	f004 fa1a 	bl	1a03c <__sinit>
   15c08:	e794      	b.n	15b34 <setvbuf+0x20>
   15c0a:	4643      	mov	r3, r8
   15c0c:	2b00      	cmp	r3, #0
   15c0e:	d0c4      	beq.n	15b9a <setvbuf+0x86>
   15c10:	6bab      	ldr	r3, [r5, #56]	; 0x38
   15c12:	2b00      	cmp	r3, #0
   15c14:	d027      	beq.n	15c66 <setvbuf+0x152>
   15c16:	9b00      	ldr	r3, [sp, #0]
   15c18:	429f      	cmp	r7, r3
   15c1a:	d02a      	beq.n	15c72 <setvbuf+0x15e>
   15c1c:	2380      	movs	r3, #128	; 0x80
   15c1e:	89a2      	ldrh	r2, [r4, #12]
   15c20:	011b      	lsls	r3, r3, #4
   15c22:	4313      	orrs	r3, r2
   15c24:	b21b      	sxth	r3, r3
   15c26:	81a3      	strh	r3, [r4, #12]
   15c28:	2e01      	cmp	r6, #1
   15c2a:	d026      	beq.n	15c7a <setvbuf+0x166>
   15c2c:	4642      	mov	r2, r8
   15c2e:	6022      	str	r2, [r4, #0]
   15c30:	6122      	str	r2, [r4, #16]
   15c32:	2208      	movs	r2, #8
   15c34:	b29b      	uxth	r3, r3
   15c36:	6167      	str	r7, [r4, #20]
   15c38:	401a      	ands	r2, r3
   15c3a:	d00b      	beq.n	15c54 <setvbuf+0x140>
   15c3c:	07da      	lsls	r2, r3, #31
   15c3e:	d510      	bpl.n	15c62 <setvbuf+0x14e>
   15c40:	2200      	movs	r2, #0
   15c42:	2501      	movs	r5, #1
   15c44:	60a2      	str	r2, [r4, #8]
   15c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15c48:	427f      	negs	r7, r7
   15c4a:	61a7      	str	r7, [r4, #24]
   15c4c:	4015      	ands	r5, r2
   15c4e:	d0c6      	beq.n	15bde <setvbuf+0xca>
   15c50:	2500      	movs	r5, #0
   15c52:	e7c9      	b.n	15be8 <setvbuf+0xd4>
   15c54:	60a2      	str	r2, [r4, #8]
   15c56:	2501      	movs	r5, #1
   15c58:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15c5a:	4015      	ands	r5, r2
   15c5c:	d0bf      	beq.n	15bde <setvbuf+0xca>
   15c5e:	2500      	movs	r5, #0
   15c60:	e7c2      	b.n	15be8 <setvbuf+0xd4>
   15c62:	60a7      	str	r7, [r4, #8]
   15c64:	e7f7      	b.n	15c56 <setvbuf+0x142>
   15c66:	0028      	movs	r0, r5
   15c68:	f004 f9e8 	bl	1a03c <__sinit>
   15c6c:	9b00      	ldr	r3, [sp, #0]
   15c6e:	429f      	cmp	r7, r3
   15c70:	d1d4      	bne.n	15c1c <setvbuf+0x108>
   15c72:	220c      	movs	r2, #12
   15c74:	5ea3      	ldrsh	r3, [r4, r2]
   15c76:	2e01      	cmp	r6, #1
   15c78:	d1d8      	bne.n	15c2c <setvbuf+0x118>
   15c7a:	2201      	movs	r2, #1
   15c7c:	4313      	orrs	r3, r2
   15c7e:	81a3      	strh	r3, [r4, #12]
   15c80:	e7d4      	b.n	15c2c <setvbuf+0x118>
   15c82:	2501      	movs	r5, #1
   15c84:	426d      	negs	r5, r5
   15c86:	e7af      	b.n	15be8 <setvbuf+0xd4>
   15c88:	9b00      	ldr	r3, [sp, #0]
   15c8a:	4699      	mov	r9, r3
   15c8c:	42bb      	cmp	r3, r7
   15c8e:	d005      	beq.n	15c9c <setvbuf+0x188>
   15c90:	0018      	movs	r0, r3
   15c92:	f004 fda5 	bl	1a7e0 <malloc>
   15c96:	4680      	mov	r8, r0
   15c98:	2800      	cmp	r0, #0
   15c9a:	d104      	bne.n	15ca6 <setvbuf+0x192>
   15c9c:	2501      	movs	r5, #1
   15c9e:	220c      	movs	r2, #12
   15ca0:	5ea3      	ldrsh	r3, [r4, r2]
   15ca2:	426d      	negs	r5, r5
   15ca4:	e78d      	b.n	15bc2 <setvbuf+0xae>
   15ca6:	464f      	mov	r7, r9
   15ca8:	e77e      	b.n	15ba8 <setvbuf+0x94>
   15caa:	46c0      	nop			; (mov r8, r8)
   15cac:	200000d4 	.word	0x200000d4
   15cb0:	fffff35c 	.word	0xfffff35c

00015cb4 <snprintf>:
   15cb4:	b40c      	push	{r2, r3}
   15cb6:	b530      	push	{r4, r5, lr}
   15cb8:	4b1e      	ldr	r3, [pc, #120]	; (15d34 <snprintf+0x80>)
   15cba:	b09d      	sub	sp, #116	; 0x74
   15cbc:	681d      	ldr	r5, [r3, #0]
   15cbe:	2900      	cmp	r1, #0
   15cc0:	db33      	blt.n	15d2a <snprintf+0x76>
   15cc2:	2382      	movs	r3, #130	; 0x82
   15cc4:	ac02      	add	r4, sp, #8
   15cc6:	009b      	lsls	r3, r3, #2
   15cc8:	81a3      	strh	r3, [r4, #12]
   15cca:	9002      	str	r0, [sp, #8]
   15ccc:	6120      	str	r0, [r4, #16]
   15cce:	2900      	cmp	r1, #0
   15cd0:	d012      	beq.n	15cf8 <snprintf+0x44>
   15cd2:	2301      	movs	r3, #1
   15cd4:	3901      	subs	r1, #1
   15cd6:	425b      	negs	r3, r3
   15cd8:	60a1      	str	r1, [r4, #8]
   15cda:	6161      	str	r1, [r4, #20]
   15cdc:	81e3      	strh	r3, [r4, #14]
   15cde:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15ce0:	ab21      	add	r3, sp, #132	; 0x84
   15ce2:	0021      	movs	r1, r4
   15ce4:	0028      	movs	r0, r5
   15ce6:	9301      	str	r3, [sp, #4]
   15ce8:	f000 f906 	bl	15ef8 <_svfprintf_r>
   15cec:	1c43      	adds	r3, r0, #1
   15cee:	db16      	blt.n	15d1e <snprintf+0x6a>
   15cf0:	2300      	movs	r3, #0
   15cf2:	9a02      	ldr	r2, [sp, #8]
   15cf4:	7013      	strb	r3, [r2, #0]
   15cf6:	e00d      	b.n	15d14 <snprintf+0x60>
   15cf8:	2301      	movs	r3, #1
   15cfa:	425b      	negs	r3, r3
   15cfc:	60a1      	str	r1, [r4, #8]
   15cfe:	6161      	str	r1, [r4, #20]
   15d00:	81e3      	strh	r3, [r4, #14]
   15d02:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15d04:	ab21      	add	r3, sp, #132	; 0x84
   15d06:	0021      	movs	r1, r4
   15d08:	0028      	movs	r0, r5
   15d0a:	9301      	str	r3, [sp, #4]
   15d0c:	f000 f8f4 	bl	15ef8 <_svfprintf_r>
   15d10:	1c43      	adds	r3, r0, #1
   15d12:	db07      	blt.n	15d24 <snprintf+0x70>
   15d14:	b01d      	add	sp, #116	; 0x74
   15d16:	bc30      	pop	{r4, r5}
   15d18:	bc08      	pop	{r3}
   15d1a:	b002      	add	sp, #8
   15d1c:	4718      	bx	r3
   15d1e:	238b      	movs	r3, #139	; 0x8b
   15d20:	602b      	str	r3, [r5, #0]
   15d22:	e7e5      	b.n	15cf0 <snprintf+0x3c>
   15d24:	238b      	movs	r3, #139	; 0x8b
   15d26:	602b      	str	r3, [r5, #0]
   15d28:	e7f4      	b.n	15d14 <snprintf+0x60>
   15d2a:	238b      	movs	r3, #139	; 0x8b
   15d2c:	2001      	movs	r0, #1
   15d2e:	602b      	str	r3, [r5, #0]
   15d30:	4240      	negs	r0, r0
   15d32:	e7ef      	b.n	15d14 <snprintf+0x60>
   15d34:	200000d4 	.word	0x200000d4

00015d38 <strlen>:
   15d38:	b510      	push	{r4, lr}
   15d3a:	0783      	lsls	r3, r0, #30
   15d3c:	d025      	beq.n	15d8a <strlen+0x52>
   15d3e:	7803      	ldrb	r3, [r0, #0]
   15d40:	2b00      	cmp	r3, #0
   15d42:	d024      	beq.n	15d8e <strlen+0x56>
   15d44:	0003      	movs	r3, r0
   15d46:	2103      	movs	r1, #3
   15d48:	e002      	b.n	15d50 <strlen+0x18>
   15d4a:	781a      	ldrb	r2, [r3, #0]
   15d4c:	2a00      	cmp	r2, #0
   15d4e:	d01a      	beq.n	15d86 <strlen+0x4e>
   15d50:	3301      	adds	r3, #1
   15d52:	420b      	tst	r3, r1
   15d54:	d1f9      	bne.n	15d4a <strlen+0x12>
   15d56:	6819      	ldr	r1, [r3, #0]
   15d58:	4a0e      	ldr	r2, [pc, #56]	; (15d94 <strlen+0x5c>)
   15d5a:	4c0f      	ldr	r4, [pc, #60]	; (15d98 <strlen+0x60>)
   15d5c:	188a      	adds	r2, r1, r2
   15d5e:	438a      	bics	r2, r1
   15d60:	4222      	tst	r2, r4
   15d62:	d106      	bne.n	15d72 <strlen+0x3a>
   15d64:	3304      	adds	r3, #4
   15d66:	6819      	ldr	r1, [r3, #0]
   15d68:	4a0a      	ldr	r2, [pc, #40]	; (15d94 <strlen+0x5c>)
   15d6a:	188a      	adds	r2, r1, r2
   15d6c:	438a      	bics	r2, r1
   15d6e:	4222      	tst	r2, r4
   15d70:	d0f8      	beq.n	15d64 <strlen+0x2c>
   15d72:	001a      	movs	r2, r3
   15d74:	781b      	ldrb	r3, [r3, #0]
   15d76:	2b00      	cmp	r3, #0
   15d78:	d003      	beq.n	15d82 <strlen+0x4a>
   15d7a:	3201      	adds	r2, #1
   15d7c:	7811      	ldrb	r1, [r2, #0]
   15d7e:	2900      	cmp	r1, #0
   15d80:	d1fb      	bne.n	15d7a <strlen+0x42>
   15d82:	1a10      	subs	r0, r2, r0
   15d84:	bd10      	pop	{r4, pc}
   15d86:	1a18      	subs	r0, r3, r0
   15d88:	e7fc      	b.n	15d84 <strlen+0x4c>
   15d8a:	0003      	movs	r3, r0
   15d8c:	e7e3      	b.n	15d56 <strlen+0x1e>
   15d8e:	2000      	movs	r0, #0
   15d90:	e7f8      	b.n	15d84 <strlen+0x4c>
   15d92:	46c0      	nop			; (mov r8, r8)
   15d94:	fefefeff 	.word	0xfefefeff
   15d98:	80808080 	.word	0x80808080

00015d9c <_strtol_l.isra.0>:
   15d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d9e:	4657      	mov	r7, sl
   15da0:	464e      	mov	r6, r9
   15da2:	46de      	mov	lr, fp
   15da4:	4645      	mov	r5, r8
   15da6:	b5e0      	push	{r5, r6, r7, lr}
   15da8:	001e      	movs	r6, r3
   15daa:	2308      	movs	r3, #8
   15dac:	b083      	sub	sp, #12
   15dae:	9001      	str	r0, [sp, #4]
   15db0:	9100      	str	r1, [sp, #0]
   15db2:	4692      	mov	sl, r2
   15db4:	000f      	movs	r7, r1
   15db6:	4699      	mov	r9, r3
   15db8:	e000      	b.n	15dbc <_strtol_l.isra.0+0x20>
   15dba:	002f      	movs	r7, r5
   15dbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   15dbe:	783c      	ldrb	r4, [r7, #0]
   15dc0:	f004 fc7c 	bl	1a6bc <__locale_ctype_ptr_l>
   15dc4:	464a      	mov	r2, r9
   15dc6:	1900      	adds	r0, r0, r4
   15dc8:	7843      	ldrb	r3, [r0, #1]
   15dca:	1c7d      	adds	r5, r7, #1
   15dcc:	421a      	tst	r2, r3
   15dce:	d1f4      	bne.n	15dba <_strtol_l.isra.0+0x1e>
   15dd0:	2c2d      	cmp	r4, #45	; 0x2d
   15dd2:	d04f      	beq.n	15e74 <_strtol_l.isra.0+0xd8>
   15dd4:	2300      	movs	r3, #0
   15dd6:	4698      	mov	r8, r3
   15dd8:	2c2b      	cmp	r4, #43	; 0x2b
   15dda:	d05c      	beq.n	15e96 <_strtol_l.isra.0+0xfa>
   15ddc:	2e00      	cmp	r6, #0
   15dde:	d003      	beq.n	15de8 <_strtol_l.isra.0+0x4c>
   15de0:	2e10      	cmp	r6, #16
   15de2:	d05b      	beq.n	15e9c <_strtol_l.isra.0+0x100>
   15de4:	0037      	movs	r7, r6
   15de6:	e003      	b.n	15df0 <_strtol_l.isra.0+0x54>
   15de8:	2c30      	cmp	r4, #48	; 0x30
   15dea:	d063      	beq.n	15eb4 <_strtol_l.isra.0+0x118>
   15dec:	270a      	movs	r7, #10
   15dee:	260a      	movs	r6, #10
   15df0:	4b35      	ldr	r3, [pc, #212]	; (15ec8 <_strtol_l.isra.0+0x12c>)
   15df2:	0039      	movs	r1, r7
   15df4:	4443      	add	r3, r8
   15df6:	0018      	movs	r0, r3
   15df8:	4699      	mov	r9, r3
   15dfa:	f7fc fd0d 	bl	12818 <__aeabi_uidivmod>
   15dfe:	4648      	mov	r0, r9
   15e00:	468b      	mov	fp, r1
   15e02:	0039      	movs	r1, r7
   15e04:	f7fc fc82 	bl	1270c <__udivsi3>
   15e08:	2200      	movs	r2, #0
   15e0a:	0001      	movs	r1, r0
   15e0c:	2000      	movs	r0, #0
   15e0e:	0023      	movs	r3, r4
   15e10:	3b30      	subs	r3, #48	; 0x30
   15e12:	2b09      	cmp	r3, #9
   15e14:	d907      	bls.n	15e26 <_strtol_l.isra.0+0x8a>
   15e16:	3b11      	subs	r3, #17
   15e18:	2b19      	cmp	r3, #25
   15e1a:	d903      	bls.n	15e24 <_strtol_l.isra.0+0x88>
   15e1c:	0023      	movs	r3, r4
   15e1e:	3b61      	subs	r3, #97	; 0x61
   15e20:	2b19      	cmp	r3, #25
   15e22:	d80d      	bhi.n	15e40 <_strtol_l.isra.0+0xa4>
   15e24:	330a      	adds	r3, #10
   15e26:	429e      	cmp	r6, r3
   15e28:	dd0a      	ble.n	15e40 <_strtol_l.isra.0+0xa4>
   15e2a:	1c54      	adds	r4, r2, #1
   15e2c:	d005      	beq.n	15e3a <_strtol_l.isra.0+0x9e>
   15e2e:	4281      	cmp	r1, r0
   15e30:	d31d      	bcc.n	15e6e <_strtol_l.isra.0+0xd2>
   15e32:	d01a      	beq.n	15e6a <_strtol_l.isra.0+0xce>
   15e34:	2201      	movs	r2, #1
   15e36:	4378      	muls	r0, r7
   15e38:	1818      	adds	r0, r3, r0
   15e3a:	782c      	ldrb	r4, [r5, #0]
   15e3c:	3501      	adds	r5, #1
   15e3e:	e7e6      	b.n	15e0e <_strtol_l.isra.0+0x72>
   15e40:	1c53      	adds	r3, r2, #1
   15e42:	d01c      	beq.n	15e7e <_strtol_l.isra.0+0xe2>
   15e44:	4643      	mov	r3, r8
   15e46:	2b00      	cmp	r3, #0
   15e48:	d000      	beq.n	15e4c <_strtol_l.isra.0+0xb0>
   15e4a:	4240      	negs	r0, r0
   15e4c:	4653      	mov	r3, sl
   15e4e:	2b00      	cmp	r3, #0
   15e50:	d004      	beq.n	15e5c <_strtol_l.isra.0+0xc0>
   15e52:	9b00      	ldr	r3, [sp, #0]
   15e54:	2a00      	cmp	r2, #0
   15e56:	d11c      	bne.n	15e92 <_strtol_l.isra.0+0xf6>
   15e58:	4652      	mov	r2, sl
   15e5a:	6013      	str	r3, [r2, #0]
   15e5c:	b003      	add	sp, #12
   15e5e:	bc3c      	pop	{r2, r3, r4, r5}
   15e60:	4690      	mov	r8, r2
   15e62:	4699      	mov	r9, r3
   15e64:	46a2      	mov	sl, r4
   15e66:	46ab      	mov	fp, r5
   15e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e6a:	459b      	cmp	fp, r3
   15e6c:	dae2      	bge.n	15e34 <_strtol_l.isra.0+0x98>
   15e6e:	2201      	movs	r2, #1
   15e70:	4252      	negs	r2, r2
   15e72:	e7e2      	b.n	15e3a <_strtol_l.isra.0+0x9e>
   15e74:	2301      	movs	r3, #1
   15e76:	782c      	ldrb	r4, [r5, #0]
   15e78:	4698      	mov	r8, r3
   15e7a:	1cbd      	adds	r5, r7, #2
   15e7c:	e7ae      	b.n	15ddc <_strtol_l.isra.0+0x40>
   15e7e:	2322      	movs	r3, #34	; 0x22
   15e80:	9a01      	ldr	r2, [sp, #4]
   15e82:	4648      	mov	r0, r9
   15e84:	6013      	str	r3, [r2, #0]
   15e86:	4653      	mov	r3, sl
   15e88:	2b00      	cmp	r3, #0
   15e8a:	d0e7      	beq.n	15e5c <_strtol_l.isra.0+0xc0>
   15e8c:	1e6b      	subs	r3, r5, #1
   15e8e:	4648      	mov	r0, r9
   15e90:	e7e2      	b.n	15e58 <_strtol_l.isra.0+0xbc>
   15e92:	4681      	mov	r9, r0
   15e94:	e7fa      	b.n	15e8c <_strtol_l.isra.0+0xf0>
   15e96:	782c      	ldrb	r4, [r5, #0]
   15e98:	1cbd      	adds	r5, r7, #2
   15e9a:	e79f      	b.n	15ddc <_strtol_l.isra.0+0x40>
   15e9c:	2c30      	cmp	r4, #48	; 0x30
   15e9e:	d111      	bne.n	15ec4 <_strtol_l.isra.0+0x128>
   15ea0:	2220      	movs	r2, #32
   15ea2:	782b      	ldrb	r3, [r5, #0]
   15ea4:	4393      	bics	r3, r2
   15ea6:	2b58      	cmp	r3, #88	; 0x58
   15ea8:	d10c      	bne.n	15ec4 <_strtol_l.isra.0+0x128>
   15eaa:	786c      	ldrb	r4, [r5, #1]
   15eac:	2710      	movs	r7, #16
   15eae:	3502      	adds	r5, #2
   15eb0:	2610      	movs	r6, #16
   15eb2:	e79d      	b.n	15df0 <_strtol_l.isra.0+0x54>
   15eb4:	2220      	movs	r2, #32
   15eb6:	782b      	ldrb	r3, [r5, #0]
   15eb8:	4393      	bics	r3, r2
   15eba:	2b58      	cmp	r3, #88	; 0x58
   15ebc:	d0f5      	beq.n	15eaa <_strtol_l.isra.0+0x10e>
   15ebe:	2708      	movs	r7, #8
   15ec0:	2608      	movs	r6, #8
   15ec2:	e795      	b.n	15df0 <_strtol_l.isra.0+0x54>
   15ec4:	2710      	movs	r7, #16
   15ec6:	e793      	b.n	15df0 <_strtol_l.isra.0+0x54>
   15ec8:	7fffffff 	.word	0x7fffffff

00015ecc <strtol>:
   15ecc:	0013      	movs	r3, r2
   15ece:	4a08      	ldr	r2, [pc, #32]	; (15ef0 <strtol+0x24>)
   15ed0:	b530      	push	{r4, r5, lr}
   15ed2:	0005      	movs	r5, r0
   15ed4:	6810      	ldr	r0, [r2, #0]
   15ed6:	b083      	sub	sp, #12
   15ed8:	6b44      	ldr	r4, [r0, #52]	; 0x34
   15eda:	2c00      	cmp	r4, #0
   15edc:	d006      	beq.n	15eec <strtol+0x20>
   15ede:	000a      	movs	r2, r1
   15ee0:	9400      	str	r4, [sp, #0]
   15ee2:	0029      	movs	r1, r5
   15ee4:	f7ff ff5a 	bl	15d9c <_strtol_l.isra.0>
   15ee8:	b003      	add	sp, #12
   15eea:	bd30      	pop	{r4, r5, pc}
   15eec:	4c01      	ldr	r4, [pc, #4]	; (15ef4 <strtol+0x28>)
   15eee:	e7f6      	b.n	15ede <strtol+0x12>
   15ef0:	200000d4 	.word	0x200000d4
   15ef4:	20000504 	.word	0x20000504

00015ef8 <_svfprintf_r>:
   15ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15efa:	46de      	mov	lr, fp
   15efc:	4645      	mov	r5, r8
   15efe:	4657      	mov	r7, sl
   15f00:	464e      	mov	r6, r9
   15f02:	b5e0      	push	{r5, r6, r7, lr}
   15f04:	b0c3      	sub	sp, #268	; 0x10c
   15f06:	000d      	movs	r5, r1
   15f08:	9106      	str	r1, [sp, #24]
   15f0a:	0014      	movs	r4, r2
   15f0c:	930f      	str	r3, [sp, #60]	; 0x3c
   15f0e:	9009      	str	r0, [sp, #36]	; 0x24
   15f10:	f004 fbd8 	bl	1a6c4 <_localeconv_r>
   15f14:	6803      	ldr	r3, [r0, #0]
   15f16:	0018      	movs	r0, r3
   15f18:	9319      	str	r3, [sp, #100]	; 0x64
   15f1a:	f7ff ff0d 	bl	15d38 <strlen>
   15f1e:	9018      	str	r0, [sp, #96]	; 0x60
   15f20:	89ab      	ldrh	r3, [r5, #12]
   15f22:	061b      	lsls	r3, r3, #24
   15f24:	d505      	bpl.n	15f32 <_svfprintf_r+0x3a>
   15f26:	692b      	ldr	r3, [r5, #16]
   15f28:	9307      	str	r3, [sp, #28]
   15f2a:	2b00      	cmp	r3, #0
   15f2c:	d101      	bne.n	15f32 <_svfprintf_r+0x3a>
   15f2e:	f001 f863 	bl	16ff8 <_svfprintf_r+0x1100>
   15f32:	ab32      	add	r3, sp, #200	; 0xc8
   15f34:	9325      	str	r3, [sp, #148]	; 0x94
   15f36:	2300      	movs	r3, #0
   15f38:	46a3      	mov	fp, r4
   15f3a:	af25      	add	r7, sp, #148	; 0x94
   15f3c:	60bb      	str	r3, [r7, #8]
   15f3e:	607b      	str	r3, [r7, #4]
   15f40:	9314      	str	r3, [sp, #80]	; 0x50
   15f42:	9316      	str	r3, [sp, #88]	; 0x58
   15f44:	9315      	str	r3, [sp, #84]	; 0x54
   15f46:	ae32      	add	r6, sp, #200	; 0xc8
   15f48:	9317      	str	r3, [sp, #92]	; 0x5c
   15f4a:	931a      	str	r3, [sp, #104]	; 0x68
   15f4c:	930a      	str	r3, [sp, #40]	; 0x28
   15f4e:	465b      	mov	r3, fp
   15f50:	781b      	ldrb	r3, [r3, #0]
   15f52:	465c      	mov	r4, fp
   15f54:	2b00      	cmp	r3, #0
   15f56:	d01c      	beq.n	15f92 <_svfprintf_r+0x9a>
   15f58:	2b25      	cmp	r3, #37	; 0x25
   15f5a:	d102      	bne.n	15f62 <_svfprintf_r+0x6a>
   15f5c:	e019      	b.n	15f92 <_svfprintf_r+0x9a>
   15f5e:	2b25      	cmp	r3, #37	; 0x25
   15f60:	d003      	beq.n	15f6a <_svfprintf_r+0x72>
   15f62:	3401      	adds	r4, #1
   15f64:	7823      	ldrb	r3, [r4, #0]
   15f66:	2b00      	cmp	r3, #0
   15f68:	d1f9      	bne.n	15f5e <_svfprintf_r+0x66>
   15f6a:	465b      	mov	r3, fp
   15f6c:	1ae5      	subs	r5, r4, r3
   15f6e:	d010      	beq.n	15f92 <_svfprintf_r+0x9a>
   15f70:	465b      	mov	r3, fp
   15f72:	6033      	str	r3, [r6, #0]
   15f74:	68bb      	ldr	r3, [r7, #8]
   15f76:	6075      	str	r5, [r6, #4]
   15f78:	195b      	adds	r3, r3, r5
   15f7a:	60bb      	str	r3, [r7, #8]
   15f7c:	687b      	ldr	r3, [r7, #4]
   15f7e:	3301      	adds	r3, #1
   15f80:	607b      	str	r3, [r7, #4]
   15f82:	2b07      	cmp	r3, #7
   15f84:	dc2e      	bgt.n	15fe4 <_svfprintf_r+0xec>
   15f86:	3608      	adds	r6, #8
   15f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15f8a:	469c      	mov	ip, r3
   15f8c:	44ac      	add	ip, r5
   15f8e:	4663      	mov	r3, ip
   15f90:	930a      	str	r3, [sp, #40]	; 0x28
   15f92:	7823      	ldrb	r3, [r4, #0]
   15f94:	2b00      	cmp	r3, #0
   15f96:	d02e      	beq.n	15ff6 <_svfprintf_r+0xfe>
   15f98:	1c63      	adds	r3, r4, #1
   15f9a:	469b      	mov	fp, r3
   15f9c:	2300      	movs	r3, #0
   15f9e:	aa16      	add	r2, sp, #88	; 0x58
   15fa0:	77d3      	strb	r3, [r2, #31]
   15fa2:	2201      	movs	r2, #1
   15fa4:	4252      	negs	r2, r2
   15fa6:	4692      	mov	sl, r2
   15fa8:	2200      	movs	r2, #0
   15faa:	2100      	movs	r1, #0
   15fac:	920b      	str	r2, [sp, #44]	; 0x2c
   15fae:	3220      	adds	r2, #32
   15fb0:	4691      	mov	r9, r2
   15fb2:	3220      	adds	r2, #32
   15fb4:	7863      	ldrb	r3, [r4, #1]
   15fb6:	4688      	mov	r8, r1
   15fb8:	2000      	movs	r0, #0
   15fba:	2400      	movs	r4, #0
   15fbc:	4694      	mov	ip, r2
   15fbe:	4659      	mov	r1, fp
   15fc0:	3101      	adds	r1, #1
   15fc2:	001a      	movs	r2, r3
   15fc4:	3a20      	subs	r2, #32
   15fc6:	2a58      	cmp	r2, #88	; 0x58
   15fc8:	d900      	bls.n	15fcc <_svfprintf_r+0xd4>
   15fca:	e2fd      	b.n	165c8 <_svfprintf_r+0x6d0>
   15fcc:	4dd7      	ldr	r5, [pc, #860]	; (1632c <_svfprintf_r+0x434>)
   15fce:	0092      	lsls	r2, r2, #2
   15fd0:	58aa      	ldr	r2, [r5, r2]
   15fd2:	4697      	mov	pc, r2
   15fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15fd6:	920f      	str	r2, [sp, #60]	; 0x3c
   15fd8:	425b      	negs	r3, r3
   15fda:	930b      	str	r3, [sp, #44]	; 0x2c
   15fdc:	2304      	movs	r3, #4
   15fde:	431c      	orrs	r4, r3
   15fe0:	780b      	ldrb	r3, [r1, #0]
   15fe2:	e7ed      	b.n	15fc0 <_svfprintf_r+0xc8>
   15fe4:	003a      	movs	r2, r7
   15fe6:	9906      	ldr	r1, [sp, #24]
   15fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
   15fea:	f005 fcd3 	bl	1b994 <__ssprint_r>
   15fee:	2800      	cmp	r0, #0
   15ff0:	d109      	bne.n	16006 <_svfprintf_r+0x10e>
   15ff2:	ae32      	add	r6, sp, #200	; 0xc8
   15ff4:	e7c8      	b.n	15f88 <_svfprintf_r+0x90>
   15ff6:	68bb      	ldr	r3, [r7, #8]
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	d004      	beq.n	16006 <_svfprintf_r+0x10e>
   15ffc:	003a      	movs	r2, r7
   15ffe:	9906      	ldr	r1, [sp, #24]
   16000:	9809      	ldr	r0, [sp, #36]	; 0x24
   16002:	f005 fcc7 	bl	1b994 <__ssprint_r>
   16006:	9b06      	ldr	r3, [sp, #24]
   16008:	899b      	ldrh	r3, [r3, #12]
   1600a:	065b      	lsls	r3, r3, #25
   1600c:	d501      	bpl.n	16012 <_svfprintf_r+0x11a>
   1600e:	f001 f8ce 	bl	171ae <_svfprintf_r+0x12b6>
   16012:	980a      	ldr	r0, [sp, #40]	; 0x28
   16014:	b043      	add	sp, #268	; 0x10c
   16016:	bc3c      	pop	{r2, r3, r4, r5}
   16018:	4690      	mov	r8, r2
   1601a:	4699      	mov	r9, r3
   1601c:	46a2      	mov	sl, r4
   1601e:	46ab      	mov	fp, r5
   16020:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16022:	2201      	movs	r2, #1
   16024:	780b      	ldrb	r3, [r1, #0]
   16026:	4690      	mov	r8, r2
   16028:	202b      	movs	r0, #43	; 0x2b
   1602a:	e7c9      	b.n	15fc0 <_svfprintf_r+0xc8>
   1602c:	1c4b      	adds	r3, r1, #1
   1602e:	469b      	mov	fp, r3
   16030:	780b      	ldrb	r3, [r1, #0]
   16032:	2b2a      	cmp	r3, #42	; 0x2a
   16034:	d101      	bne.n	1603a <_svfprintf_r+0x142>
   16036:	f001 fa1b 	bl	17470 <_svfprintf_r+0x1578>
   1603a:	001a      	movs	r2, r3
   1603c:	2100      	movs	r1, #0
   1603e:	3a30      	subs	r2, #48	; 0x30
   16040:	468a      	mov	sl, r1
   16042:	4659      	mov	r1, fp
   16044:	2a09      	cmp	r2, #9
   16046:	d8bc      	bhi.n	15fc2 <_svfprintf_r+0xca>
   16048:	0003      	movs	r3, r0
   1604a:	0011      	movs	r1, r2
   1604c:	4650      	mov	r0, sl
   1604e:	465a      	mov	r2, fp
   16050:	469a      	mov	sl, r3
   16052:	46a3      	mov	fp, r4
   16054:	0083      	lsls	r3, r0, #2
   16056:	181b      	adds	r3, r3, r0
   16058:	7814      	ldrb	r4, [r2, #0]
   1605a:	005b      	lsls	r3, r3, #1
   1605c:	1858      	adds	r0, r3, r1
   1605e:	0021      	movs	r1, r4
   16060:	1c53      	adds	r3, r2, #1
   16062:	3930      	subs	r1, #48	; 0x30
   16064:	001a      	movs	r2, r3
   16066:	2909      	cmp	r1, #9
   16068:	d9f4      	bls.n	16054 <_svfprintf_r+0x15c>
   1606a:	4652      	mov	r2, sl
   1606c:	0019      	movs	r1, r3
   1606e:	4682      	mov	sl, r0
   16070:	0023      	movs	r3, r4
   16072:	0010      	movs	r0, r2
   16074:	465c      	mov	r4, fp
   16076:	e7a4      	b.n	15fc2 <_svfprintf_r+0xca>
   16078:	2380      	movs	r3, #128	; 0x80
   1607a:	431c      	orrs	r4, r3
   1607c:	780b      	ldrb	r3, [r1, #0]
   1607e:	e79f      	b.n	15fc0 <_svfprintf_r+0xc8>
   16080:	468b      	mov	fp, r1
   16082:	4641      	mov	r1, r8
   16084:	9312      	str	r3, [sp, #72]	; 0x48
   16086:	2900      	cmp	r1, #0
   16088:	d001      	beq.n	1608e <_svfprintf_r+0x196>
   1608a:	f001 fa1f 	bl	174cc <_svfprintf_r+0x15d4>
   1608e:	2310      	movs	r3, #16
   16090:	431c      	orrs	r4, r3
   16092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16094:	06a3      	lsls	r3, r4, #26
   16096:	d501      	bpl.n	1609c <_svfprintf_r+0x1a4>
   16098:	f000 fe88 	bl	16dac <_svfprintf_r+0xeb4>
   1609c:	06e3      	lsls	r3, r4, #27
   1609e:	d501      	bpl.n	160a4 <_svfprintf_r+0x1ac>
   160a0:	f000 fd80 	bl	16ba4 <_svfprintf_r+0xcac>
   160a4:	0663      	lsls	r3, r4, #25
   160a6:	d401      	bmi.n	160ac <_svfprintf_r+0x1b4>
   160a8:	f000 fd7c 	bl	16ba4 <_svfprintf_r+0xcac>
   160ac:	2100      	movs	r1, #0
   160ae:	5e53      	ldrsh	r3, [r2, r1]
   160b0:	930c      	str	r3, [sp, #48]	; 0x30
   160b2:	3204      	adds	r2, #4
   160b4:	17db      	asrs	r3, r3, #31
   160b6:	930d      	str	r3, [sp, #52]	; 0x34
   160b8:	920f      	str	r2, [sp, #60]	; 0x3c
   160ba:	d501      	bpl.n	160c0 <_svfprintf_r+0x1c8>
   160bc:	f000 fe86 	bl	16dcc <_svfprintf_r+0xed4>
   160c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   160c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   160c4:	0008      	movs	r0, r1
   160c6:	ab16      	add	r3, sp, #88	; 0x58
   160c8:	7fdb      	ldrb	r3, [r3, #31]
   160ca:	4310      	orrs	r0, r2
   160cc:	4698      	mov	r8, r3
   160ce:	0002      	movs	r2, r0
   160d0:	2301      	movs	r3, #1
   160d2:	4651      	mov	r1, sl
   160d4:	3101      	adds	r1, #1
   160d6:	d100      	bne.n	160da <_svfprintf_r+0x1e2>
   160d8:	e0ff      	b.n	162da <_svfprintf_r+0x3e2>
   160da:	2180      	movs	r1, #128	; 0x80
   160dc:	0020      	movs	r0, r4
   160de:	4388      	bics	r0, r1
   160e0:	9008      	str	r0, [sp, #32]
   160e2:	2a00      	cmp	r2, #0
   160e4:	d000      	beq.n	160e8 <_svfprintf_r+0x1f0>
   160e6:	e0fc      	b.n	162e2 <_svfprintf_r+0x3ea>
   160e8:	4652      	mov	r2, sl
   160ea:	2a00      	cmp	r2, #0
   160ec:	d001      	beq.n	160f2 <_svfprintf_r+0x1fa>
   160ee:	f000 fc2c 	bl	1694a <_svfprintf_r+0xa52>
   160f2:	2b00      	cmp	r3, #0
   160f4:	d001      	beq.n	160fa <_svfprintf_r+0x202>
   160f6:	f000 fd04 	bl	16b02 <_svfprintf_r+0xc0a>
   160fa:	2001      	movs	r0, #1
   160fc:	ab32      	add	r3, sp, #200	; 0xc8
   160fe:	4020      	ands	r0, r4
   16100:	900e      	str	r0, [sp, #56]	; 0x38
   16102:	9311      	str	r3, [sp, #68]	; 0x44
   16104:	d008      	beq.n	16118 <_svfprintf_r+0x220>
   16106:	2327      	movs	r3, #39	; 0x27
   16108:	2130      	movs	r1, #48	; 0x30
   1610a:	aa28      	add	r2, sp, #160	; 0xa0
   1610c:	54d1      	strb	r1, [r2, r3]
   1610e:	aa16      	add	r2, sp, #88	; 0x58
   16110:	4694      	mov	ip, r2
   16112:	3348      	adds	r3, #72	; 0x48
   16114:	4463      	add	r3, ip
   16116:	9311      	str	r3, [sp, #68]	; 0x44
   16118:	4653      	mov	r3, sl
   1611a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1611c:	9307      	str	r3, [sp, #28]
   1611e:	4592      	cmp	sl, r2
   16120:	da00      	bge.n	16124 <_svfprintf_r+0x22c>
   16122:	9207      	str	r2, [sp, #28]
   16124:	2300      	movs	r3, #0
   16126:	9313      	str	r3, [sp, #76]	; 0x4c
   16128:	4643      	mov	r3, r8
   1612a:	2b00      	cmp	r3, #0
   1612c:	d002      	beq.n	16134 <_svfprintf_r+0x23c>
   1612e:	9b07      	ldr	r3, [sp, #28]
   16130:	3301      	adds	r3, #1
   16132:	9307      	str	r3, [sp, #28]
   16134:	2302      	movs	r3, #2
   16136:	9a08      	ldr	r2, [sp, #32]
   16138:	401a      	ands	r2, r3
   1613a:	4691      	mov	r9, r2
   1613c:	d002      	beq.n	16144 <_svfprintf_r+0x24c>
   1613e:	9b07      	ldr	r3, [sp, #28]
   16140:	3302      	adds	r3, #2
   16142:	9307      	str	r3, [sp, #28]
   16144:	2384      	movs	r3, #132	; 0x84
   16146:	9a08      	ldr	r2, [sp, #32]
   16148:	401a      	ands	r2, r3
   1614a:	9210      	str	r2, [sp, #64]	; 0x40
   1614c:	d000      	beq.n	16150 <_svfprintf_r+0x258>
   1614e:	e24d      	b.n	165ec <_svfprintf_r+0x6f4>
   16150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16152:	9a07      	ldr	r2, [sp, #28]
   16154:	1a9c      	subs	r4, r3, r2
   16156:	2c00      	cmp	r4, #0
   16158:	dc00      	bgt.n	1615c <_svfprintf_r+0x264>
   1615a:	e247      	b.n	165ec <_svfprintf_r+0x6f4>
   1615c:	4974      	ldr	r1, [pc, #464]	; (16330 <_svfprintf_r+0x438>)
   1615e:	68ba      	ldr	r2, [r7, #8]
   16160:	687b      	ldr	r3, [r7, #4]
   16162:	4688      	mov	r8, r1
   16164:	2c10      	cmp	r4, #16
   16166:	dd1f      	ble.n	161a8 <_svfprintf_r+0x2b0>
   16168:	0031      	movs	r1, r6
   1616a:	2510      	movs	r5, #16
   1616c:	4646      	mov	r6, r8
   1616e:	e003      	b.n	16178 <_svfprintf_r+0x280>
   16170:	3c10      	subs	r4, #16
   16172:	3108      	adds	r1, #8
   16174:	2c10      	cmp	r4, #16
   16176:	dd15      	ble.n	161a4 <_svfprintf_r+0x2ac>
   16178:	3210      	adds	r2, #16
   1617a:	3301      	adds	r3, #1
   1617c:	600e      	str	r6, [r1, #0]
   1617e:	604d      	str	r5, [r1, #4]
   16180:	60ba      	str	r2, [r7, #8]
   16182:	607b      	str	r3, [r7, #4]
   16184:	2b07      	cmp	r3, #7
   16186:	ddf3      	ble.n	16170 <_svfprintf_r+0x278>
   16188:	003a      	movs	r2, r7
   1618a:	9906      	ldr	r1, [sp, #24]
   1618c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1618e:	f005 fc01 	bl	1b994 <__ssprint_r>
   16192:	2800      	cmp	r0, #0
   16194:	d000      	beq.n	16198 <_svfprintf_r+0x2a0>
   16196:	e736      	b.n	16006 <_svfprintf_r+0x10e>
   16198:	3c10      	subs	r4, #16
   1619a:	68ba      	ldr	r2, [r7, #8]
   1619c:	687b      	ldr	r3, [r7, #4]
   1619e:	a932      	add	r1, sp, #200	; 0xc8
   161a0:	2c10      	cmp	r4, #16
   161a2:	dce9      	bgt.n	16178 <_svfprintf_r+0x280>
   161a4:	46b0      	mov	r8, r6
   161a6:	000e      	movs	r6, r1
   161a8:	4641      	mov	r1, r8
   161aa:	6074      	str	r4, [r6, #4]
   161ac:	3301      	adds	r3, #1
   161ae:	18a4      	adds	r4, r4, r2
   161b0:	6031      	str	r1, [r6, #0]
   161b2:	60bc      	str	r4, [r7, #8]
   161b4:	607b      	str	r3, [r7, #4]
   161b6:	2b07      	cmp	r3, #7
   161b8:	dd01      	ble.n	161be <_svfprintf_r+0x2c6>
   161ba:	f000 fca8 	bl	16b0e <_svfprintf_r+0xc16>
   161be:	ab16      	add	r3, sp, #88	; 0x58
   161c0:	7fdb      	ldrb	r3, [r3, #31]
   161c2:	3608      	adds	r6, #8
   161c4:	4698      	mov	r8, r3
   161c6:	e212      	b.n	165ee <_svfprintf_r+0x6f6>
   161c8:	468b      	mov	fp, r1
   161ca:	4641      	mov	r1, r8
   161cc:	9312      	str	r3, [sp, #72]	; 0x48
   161ce:	2900      	cmp	r1, #0
   161d0:	d001      	beq.n	161d6 <_svfprintf_r+0x2de>
   161d2:	f001 f977 	bl	174c4 <_svfprintf_r+0x15cc>
   161d6:	2207      	movs	r2, #7
   161d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   161da:	3307      	adds	r3, #7
   161dc:	4393      	bics	r3, r2
   161de:	3201      	adds	r2, #1
   161e0:	4694      	mov	ip, r2
   161e2:	449c      	add	ip, r3
   161e4:	4662      	mov	r2, ip
   161e6:	920f      	str	r2, [sp, #60]	; 0x3c
   161e8:	681a      	ldr	r2, [r3, #0]
   161ea:	9216      	str	r2, [sp, #88]	; 0x58
   161ec:	685b      	ldr	r3, [r3, #4]
   161ee:	2201      	movs	r2, #1
   161f0:	9315      	str	r3, [sp, #84]	; 0x54
   161f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   161f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
   161f6:	005b      	lsls	r3, r3, #1
   161f8:	085b      	lsrs	r3, r3, #1
   161fa:	4698      	mov	r8, r3
   161fc:	4252      	negs	r2, r2
   161fe:	4b4d      	ldr	r3, [pc, #308]	; (16334 <_svfprintf_r+0x43c>)
   16200:	0028      	movs	r0, r5
   16202:	4641      	mov	r1, r8
   16204:	f005 ff32 	bl	1c06c <__aeabi_dcmpun>
   16208:	2800      	cmp	r0, #0
   1620a:	d001      	beq.n	16210 <_svfprintf_r+0x318>
   1620c:	f000 fdfd 	bl	16e0a <_svfprintf_r+0xf12>
   16210:	2201      	movs	r2, #1
   16212:	4b48      	ldr	r3, [pc, #288]	; (16334 <_svfprintf_r+0x43c>)
   16214:	4252      	negs	r2, r2
   16216:	0028      	movs	r0, r5
   16218:	4641      	mov	r1, r8
   1621a:	f7ff f9e7 	bl	155ec <__aeabi_dcmple>
   1621e:	2800      	cmp	r0, #0
   16220:	d001      	beq.n	16226 <_svfprintf_r+0x32e>
   16222:	f000 fdf2 	bl	16e0a <_svfprintf_r+0xf12>
   16226:	2200      	movs	r2, #0
   16228:	2300      	movs	r3, #0
   1622a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1622c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1622e:	f7ff f9d3 	bl	155d8 <__aeabi_dcmplt>
   16232:	2800      	cmp	r0, #0
   16234:	d001      	beq.n	1623a <_svfprintf_r+0x342>
   16236:	f001 f822 	bl	1727e <_svfprintf_r+0x1386>
   1623a:	ab16      	add	r3, sp, #88	; 0x58
   1623c:	7fdb      	ldrb	r3, [r3, #31]
   1623e:	4698      	mov	r8, r3
   16240:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16242:	2b47      	cmp	r3, #71	; 0x47
   16244:	dd01      	ble.n	1624a <_svfprintf_r+0x352>
   16246:	f000 fec7 	bl	16fd8 <_svfprintf_r+0x10e0>
   1624a:	4b3b      	ldr	r3, [pc, #236]	; (16338 <_svfprintf_r+0x440>)
   1624c:	9311      	str	r3, [sp, #68]	; 0x44
   1624e:	2380      	movs	r3, #128	; 0x80
   16250:	439c      	bics	r4, r3
   16252:	3b7d      	subs	r3, #125	; 0x7d
   16254:	9307      	str	r3, [sp, #28]
   16256:	930e      	str	r3, [sp, #56]	; 0x38
   16258:	2300      	movs	r3, #0
   1625a:	9408      	str	r4, [sp, #32]
   1625c:	469a      	mov	sl, r3
   1625e:	9313      	str	r3, [sp, #76]	; 0x4c
   16260:	e762      	b.n	16128 <_svfprintf_r+0x230>
   16262:	2200      	movs	r2, #0
   16264:	3b30      	subs	r3, #48	; 0x30
   16266:	0015      	movs	r5, r2
   16268:	001a      	movs	r2, r3
   1626a:	0003      	movs	r3, r0
   1626c:	9407      	str	r4, [sp, #28]
   1626e:	0008      	movs	r0, r1
   16270:	002c      	movs	r4, r5
   16272:	469b      	mov	fp, r3
   16274:	00a3      	lsls	r3, r4, #2
   16276:	191c      	adds	r4, r3, r4
   16278:	7803      	ldrb	r3, [r0, #0]
   1627a:	0064      	lsls	r4, r4, #1
   1627c:	1914      	adds	r4, r2, r4
   1627e:	001a      	movs	r2, r3
   16280:	3101      	adds	r1, #1
   16282:	3a30      	subs	r2, #48	; 0x30
   16284:	0008      	movs	r0, r1
   16286:	2a09      	cmp	r2, #9
   16288:	d9f4      	bls.n	16274 <_svfprintf_r+0x37c>
   1628a:	940b      	str	r4, [sp, #44]	; 0x2c
   1628c:	4658      	mov	r0, fp
   1628e:	9c07      	ldr	r4, [sp, #28]
   16290:	e697      	b.n	15fc2 <_svfprintf_r+0xca>
   16292:	2308      	movs	r3, #8
   16294:	431c      	orrs	r4, r3
   16296:	780b      	ldrb	r3, [r1, #0]
   16298:	e692      	b.n	15fc0 <_svfprintf_r+0xc8>
   1629a:	9312      	str	r3, [sp, #72]	; 0x48
   1629c:	2310      	movs	r3, #16
   1629e:	431c      	orrs	r4, r3
   162a0:	468b      	mov	fp, r1
   162a2:	06a3      	lsls	r3, r4, #26
   162a4:	d500      	bpl.n	162a8 <_svfprintf_r+0x3b0>
   162a6:	e17b      	b.n	165a0 <_svfprintf_r+0x6a8>
   162a8:	06e3      	lsls	r3, r4, #27
   162aa:	d501      	bpl.n	162b0 <_svfprintf_r+0x3b8>
   162ac:	f000 fc7e 	bl	16bac <_svfprintf_r+0xcb4>
   162b0:	0663      	lsls	r3, r4, #25
   162b2:	d401      	bmi.n	162b8 <_svfprintf_r+0x3c0>
   162b4:	f000 fc7a 	bl	16bac <_svfprintf_r+0xcb4>
   162b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   162ba:	881a      	ldrh	r2, [r3, #0]
   162bc:	920c      	str	r2, [sp, #48]	; 0x30
   162be:	2200      	movs	r2, #0
   162c0:	3304      	adds	r3, #4
   162c2:	930f      	str	r3, [sp, #60]	; 0x3c
   162c4:	2300      	movs	r3, #0
   162c6:	920d      	str	r2, [sp, #52]	; 0x34
   162c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   162ca:	2100      	movs	r1, #0
   162cc:	a816      	add	r0, sp, #88	; 0x58
   162ce:	77c1      	strb	r1, [r0, #31]
   162d0:	4688      	mov	r8, r1
   162d2:	4651      	mov	r1, sl
   162d4:	3101      	adds	r1, #1
   162d6:	d000      	beq.n	162da <_svfprintf_r+0x3e2>
   162d8:	e6ff      	b.n	160da <_svfprintf_r+0x1e2>
   162da:	2a00      	cmp	r2, #0
   162dc:	d100      	bne.n	162e0 <_svfprintf_r+0x3e8>
   162de:	e335      	b.n	1694c <_svfprintf_r+0xa54>
   162e0:	9408      	str	r4, [sp, #32]
   162e2:	2b01      	cmp	r3, #1
   162e4:	d100      	bne.n	162e8 <_svfprintf_r+0x3f0>
   162e6:	e3e5      	b.n	16ab4 <_svfprintf_r+0xbbc>
   162e8:	2b02      	cmp	r3, #2
   162ea:	d000      	beq.n	162ee <_svfprintf_r+0x3f6>
   162ec:	e362      	b.n	169b4 <_svfprintf_r+0xabc>
   162ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   162f0:	200f      	movs	r0, #15
   162f2:	46a1      	mov	r9, r4
   162f4:	46b4      	mov	ip, r6
   162f6:	ab32      	add	r3, sp, #200	; 0xc8
   162f8:	0019      	movs	r1, r3
   162fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   162fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   162fe:	0004      	movs	r4, r0
   16300:	464d      	mov	r5, r9
   16302:	4014      	ands	r4, r2
   16304:	5d2c      	ldrb	r4, [r5, r4]
   16306:	071e      	lsls	r6, r3, #28
   16308:	0915      	lsrs	r5, r2, #4
   1630a:	3901      	subs	r1, #1
   1630c:	432e      	orrs	r6, r5
   1630e:	700c      	strb	r4, [r1, #0]
   16310:	091c      	lsrs	r4, r3, #4
   16312:	0023      	movs	r3, r4
   16314:	0034      	movs	r4, r6
   16316:	0032      	movs	r2, r6
   16318:	431c      	orrs	r4, r3
   1631a:	d1f0      	bne.n	162fe <_svfprintf_r+0x406>
   1631c:	920c      	str	r2, [sp, #48]	; 0x30
   1631e:	930d      	str	r3, [sp, #52]	; 0x34
   16320:	ab32      	add	r3, sp, #200	; 0xc8
   16322:	1a5b      	subs	r3, r3, r1
   16324:	9111      	str	r1, [sp, #68]	; 0x44
   16326:	4666      	mov	r6, ip
   16328:	930e      	str	r3, [sp, #56]	; 0x38
   1632a:	e6f5      	b.n	16118 <_svfprintf_r+0x220>
   1632c:	0001df3c 	.word	0x0001df3c
   16330:	0001e0e0 	.word	0x0001e0e0
   16334:	7fefffff 	.word	0x7fefffff
   16338:	0001e0a0 	.word	0x0001e0a0
   1633c:	9312      	str	r3, [sp, #72]	; 0x48
   1633e:	2310      	movs	r3, #16
   16340:	431c      	orrs	r4, r3
   16342:	468b      	mov	fp, r1
   16344:	06a3      	lsls	r3, r4, #26
   16346:	d500      	bpl.n	1634a <_svfprintf_r+0x452>
   16348:	e111      	b.n	1656e <_svfprintf_r+0x676>
   1634a:	06e3      	lsls	r3, r4, #27
   1634c:	d501      	bpl.n	16352 <_svfprintf_r+0x45a>
   1634e:	f000 fc31 	bl	16bb4 <_svfprintf_r+0xcbc>
   16352:	0663      	lsls	r3, r4, #25
   16354:	d401      	bmi.n	1635a <_svfprintf_r+0x462>
   16356:	f000 fc2d 	bl	16bb4 <_svfprintf_r+0xcbc>
   1635a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1635c:	881a      	ldrh	r2, [r3, #0]
   1635e:	920c      	str	r2, [sp, #48]	; 0x30
   16360:	2200      	movs	r2, #0
   16362:	3304      	adds	r3, #4
   16364:	920d      	str	r2, [sp, #52]	; 0x34
   16366:	930f      	str	r3, [sp, #60]	; 0x3c
   16368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1636a:	2301      	movs	r3, #1
   1636c:	e7ad      	b.n	162ca <_svfprintf_r+0x3d2>
   1636e:	468b      	mov	fp, r1
   16370:	4641      	mov	r1, r8
   16372:	9312      	str	r3, [sp, #72]	; 0x48
   16374:	2900      	cmp	r1, #0
   16376:	d001      	beq.n	1637c <_svfprintf_r+0x484>
   16378:	f001 f890 	bl	1749c <_svfprintf_r+0x15a4>
   1637c:	4bb8      	ldr	r3, [pc, #736]	; (16660 <_svfprintf_r+0x768>)
   1637e:	9317      	str	r3, [sp, #92]	; 0x5c
   16380:	06a3      	lsls	r3, r4, #26
   16382:	d500      	bpl.n	16386 <_svfprintf_r+0x48e>
   16384:	e0ab      	b.n	164de <_svfprintf_r+0x5e6>
   16386:	06e3      	lsls	r3, r4, #27
   16388:	d501      	bpl.n	1638e <_svfprintf_r+0x496>
   1638a:	f000 fc07 	bl	16b9c <_svfprintf_r+0xca4>
   1638e:	0663      	lsls	r3, r4, #25
   16390:	d401      	bmi.n	16396 <_svfprintf_r+0x49e>
   16392:	f000 fc03 	bl	16b9c <_svfprintf_r+0xca4>
   16396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16398:	881a      	ldrh	r2, [r3, #0]
   1639a:	920c      	str	r2, [sp, #48]	; 0x30
   1639c:	2200      	movs	r2, #0
   1639e:	3304      	adds	r3, #4
   163a0:	920d      	str	r2, [sp, #52]	; 0x34
   163a2:	930f      	str	r3, [sp, #60]	; 0x3c
   163a4:	07e3      	lsls	r3, r4, #31
   163a6:	d400      	bmi.n	163aa <_svfprintf_r+0x4b2>
   163a8:	e0a9      	b.n	164fe <_svfprintf_r+0x606>
   163aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   163ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   163ae:	000b      	movs	r3, r1
   163b0:	4313      	orrs	r3, r2
   163b2:	001a      	movs	r2, r3
   163b4:	2302      	movs	r3, #2
   163b6:	2a00      	cmp	r2, #0
   163b8:	d100      	bne.n	163bc <_svfprintf_r+0x4c4>
   163ba:	e786      	b.n	162ca <_svfprintf_r+0x3d2>
   163bc:	2030      	movs	r0, #48	; 0x30
   163be:	a91e      	add	r1, sp, #120	; 0x78
   163c0:	7008      	strb	r0, [r1, #0]
   163c2:	2548      	movs	r5, #72	; 0x48
   163c4:	4668      	mov	r0, sp
   163c6:	1940      	adds	r0, r0, r5
   163c8:	7800      	ldrb	r0, [r0, #0]
   163ca:	431c      	orrs	r4, r3
   163cc:	7048      	strb	r0, [r1, #1]
   163ce:	e77c      	b.n	162ca <_svfprintf_r+0x3d2>
   163d0:	468b      	mov	fp, r1
   163d2:	4641      	mov	r1, r8
   163d4:	2900      	cmp	r1, #0
   163d6:	d001      	beq.n	163dc <_svfprintf_r+0x4e4>
   163d8:	f001 f883 	bl	174e2 <_svfprintf_r+0x15ea>
   163dc:	06a3      	lsls	r3, r4, #26
   163de:	d501      	bpl.n	163e4 <_svfprintf_r+0x4ec>
   163e0:	f000 fde9 	bl	16fb6 <_svfprintf_r+0x10be>
   163e4:	06e3      	lsls	r3, r4, #27
   163e6:	d501      	bpl.n	163ec <_svfprintf_r+0x4f4>
   163e8:	f000 fd9b 	bl	16f22 <_svfprintf_r+0x102a>
   163ec:	0663      	lsls	r3, r4, #25
   163ee:	d401      	bmi.n	163f4 <_svfprintf_r+0x4fc>
   163f0:	f000 fd97 	bl	16f22 <_svfprintf_r+0x102a>
   163f4:	4669      	mov	r1, sp
   163f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   163f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   163fa:	681a      	ldr	r2, [r3, #0]
   163fc:	3304      	adds	r3, #4
   163fe:	9207      	str	r2, [sp, #28]
   16400:	8011      	strh	r1, [r2, #0]
   16402:	930f      	str	r3, [sp, #60]	; 0x3c
   16404:	e5a3      	b.n	15f4e <_svfprintf_r+0x56>
   16406:	464b      	mov	r3, r9
   16408:	431c      	orrs	r4, r3
   1640a:	780b      	ldrb	r3, [r1, #0]
   1640c:	e5d8      	b.n	15fc0 <_svfprintf_r+0xc8>
   1640e:	9312      	str	r3, [sp, #72]	; 0x48
   16410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16412:	468b      	mov	fp, r1
   16414:	1d1d      	adds	r5, r3, #4
   16416:	681b      	ldr	r3, [r3, #0]
   16418:	a916      	add	r1, sp, #88	; 0x58
   1641a:	001a      	movs	r2, r3
   1641c:	9311      	str	r3, [sp, #68]	; 0x44
   1641e:	2300      	movs	r3, #0
   16420:	77cb      	strb	r3, [r1, #31]
   16422:	2a00      	cmp	r2, #0
   16424:	d101      	bne.n	1642a <_svfprintf_r+0x532>
   16426:	f000 fefb 	bl	17220 <_svfprintf_r+0x1328>
   1642a:	4653      	mov	r3, sl
   1642c:	3301      	adds	r3, #1
   1642e:	d101      	bne.n	16434 <_svfprintf_r+0x53c>
   16430:	f000 fe38 	bl	170a4 <_svfprintf_r+0x11ac>
   16434:	4652      	mov	r2, sl
   16436:	2100      	movs	r1, #0
   16438:	9811      	ldr	r0, [sp, #68]	; 0x44
   1643a:	f004 fca5 	bl	1ad88 <memchr>
   1643e:	2800      	cmp	r0, #0
   16440:	d101      	bne.n	16446 <_svfprintf_r+0x54e>
   16442:	f000 ff54 	bl	172ee <_svfprintf_r+0x13f6>
   16446:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16448:	1ac3      	subs	r3, r0, r3
   1644a:	001a      	movs	r2, r3
   1644c:	930e      	str	r3, [sp, #56]	; 0x38
   1644e:	43db      	mvns	r3, r3
   16450:	17db      	asrs	r3, r3, #31
   16452:	401a      	ands	r2, r3
   16454:	ab16      	add	r3, sp, #88	; 0x58
   16456:	7fdb      	ldrb	r3, [r3, #31]
   16458:	9207      	str	r2, [sp, #28]
   1645a:	4698      	mov	r8, r3
   1645c:	2300      	movs	r3, #0
   1645e:	950f      	str	r5, [sp, #60]	; 0x3c
   16460:	9408      	str	r4, [sp, #32]
   16462:	469a      	mov	sl, r3
   16464:	9313      	str	r3, [sp, #76]	; 0x4c
   16466:	e65f      	b.n	16128 <_svfprintf_r+0x230>
   16468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1646a:	9312      	str	r3, [sp, #72]	; 0x48
   1646c:	6813      	ldr	r3, [r2, #0]
   1646e:	ad28      	add	r5, sp, #160	; 0xa0
   16470:	9307      	str	r3, [sp, #28]
   16472:	466b      	mov	r3, sp
   16474:	7f1b      	ldrb	r3, [r3, #28]
   16476:	468b      	mov	fp, r1
   16478:	702b      	strb	r3, [r5, #0]
   1647a:	2300      	movs	r3, #0
   1647c:	a916      	add	r1, sp, #88	; 0x58
   1647e:	77cb      	strb	r3, [r1, #31]
   16480:	0013      	movs	r3, r2
   16482:	3304      	adds	r3, #4
   16484:	930f      	str	r3, [sp, #60]	; 0x3c
   16486:	2300      	movs	r3, #0
   16488:	9408      	str	r4, [sp, #32]
   1648a:	4698      	mov	r8, r3
   1648c:	3301      	adds	r3, #1
   1648e:	9307      	str	r3, [sp, #28]
   16490:	930e      	str	r3, [sp, #56]	; 0x38
   16492:	2300      	movs	r3, #0
   16494:	9511      	str	r5, [sp, #68]	; 0x44
   16496:	469a      	mov	sl, r3
   16498:	9313      	str	r3, [sp, #76]	; 0x4c
   1649a:	e64b      	b.n	16134 <_svfprintf_r+0x23c>
   1649c:	468b      	mov	fp, r1
   1649e:	4641      	mov	r1, r8
   164a0:	9312      	str	r3, [sp, #72]	; 0x48
   164a2:	2900      	cmp	r1, #0
   164a4:	d100      	bne.n	164a8 <_svfprintf_r+0x5b0>
   164a6:	e5f4      	b.n	16092 <_svfprintf_r+0x19a>
   164a8:	ab16      	add	r3, sp, #88	; 0x58
   164aa:	77d8      	strb	r0, [r3, #31]
   164ac:	e5f1      	b.n	16092 <_svfprintf_r+0x19a>
   164ae:	4663      	mov	r3, ip
   164b0:	431c      	orrs	r4, r3
   164b2:	780b      	ldrb	r3, [r1, #0]
   164b4:	e584      	b.n	15fc0 <_svfprintf_r+0xc8>
   164b6:	780b      	ldrb	r3, [r1, #0]
   164b8:	2b6c      	cmp	r3, #108	; 0x6c
   164ba:	d101      	bne.n	164c0 <_svfprintf_r+0x5c8>
   164bc:	f000 fd86 	bl	16fcc <_svfprintf_r+0x10d4>
   164c0:	2210      	movs	r2, #16
   164c2:	4314      	orrs	r4, r2
   164c4:	e57c      	b.n	15fc0 <_svfprintf_r+0xc8>
   164c6:	468b      	mov	fp, r1
   164c8:	4641      	mov	r1, r8
   164ca:	9312      	str	r3, [sp, #72]	; 0x48
   164cc:	2900      	cmp	r1, #0
   164ce:	d001      	beq.n	164d4 <_svfprintf_r+0x5dc>
   164d0:	f000 ffe8 	bl	174a4 <_svfprintf_r+0x15ac>
   164d4:	4b63      	ldr	r3, [pc, #396]	; (16664 <_svfprintf_r+0x76c>)
   164d6:	9317      	str	r3, [sp, #92]	; 0x5c
   164d8:	06a3      	lsls	r3, r4, #26
   164da:	d400      	bmi.n	164de <_svfprintf_r+0x5e6>
   164dc:	e753      	b.n	16386 <_svfprintf_r+0x48e>
   164de:	2207      	movs	r2, #7
   164e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   164e2:	3307      	adds	r3, #7
   164e4:	4393      	bics	r3, r2
   164e6:	3201      	adds	r2, #1
   164e8:	4694      	mov	ip, r2
   164ea:	449c      	add	ip, r3
   164ec:	4662      	mov	r2, ip
   164ee:	920f      	str	r2, [sp, #60]	; 0x3c
   164f0:	681a      	ldr	r2, [r3, #0]
   164f2:	685b      	ldr	r3, [r3, #4]
   164f4:	920c      	str	r2, [sp, #48]	; 0x30
   164f6:	930d      	str	r3, [sp, #52]	; 0x34
   164f8:	07e3      	lsls	r3, r4, #31
   164fa:	d500      	bpl.n	164fe <_svfprintf_r+0x606>
   164fc:	e755      	b.n	163aa <_svfprintf_r+0x4b2>
   164fe:	990c      	ldr	r1, [sp, #48]	; 0x30
   16500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16502:	0008      	movs	r0, r1
   16504:	4310      	orrs	r0, r2
   16506:	2302      	movs	r3, #2
   16508:	0002      	movs	r2, r0
   1650a:	e6de      	b.n	162ca <_svfprintf_r+0x3d2>
   1650c:	468b      	mov	fp, r1
   1650e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16510:	2230      	movs	r2, #48	; 0x30
   16512:	680b      	ldr	r3, [r1, #0]
   16514:	930c      	str	r3, [sp, #48]	; 0x30
   16516:	2300      	movs	r3, #0
   16518:	930d      	str	r3, [sp, #52]	; 0x34
   1651a:	3302      	adds	r3, #2
   1651c:	431c      	orrs	r4, r3
   1651e:	ab1e      	add	r3, sp, #120	; 0x78
   16520:	701a      	strb	r2, [r3, #0]
   16522:	3248      	adds	r2, #72	; 0x48
   16524:	705a      	strb	r2, [r3, #1]
   16526:	000b      	movs	r3, r1
   16528:	3304      	adds	r3, #4
   1652a:	930f      	str	r3, [sp, #60]	; 0x3c
   1652c:	4b4d      	ldr	r3, [pc, #308]	; (16664 <_svfprintf_r+0x76c>)
   1652e:	9212      	str	r2, [sp, #72]	; 0x48
   16530:	9317      	str	r3, [sp, #92]	; 0x5c
   16532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16534:	2302      	movs	r3, #2
   16536:	e6c8      	b.n	162ca <_svfprintf_r+0x3d2>
   16538:	2301      	movs	r3, #1
   1653a:	431c      	orrs	r4, r3
   1653c:	780b      	ldrb	r3, [r1, #0]
   1653e:	e53f      	b.n	15fc0 <_svfprintf_r+0xc8>
   16540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16542:	1d1a      	adds	r2, r3, #4
   16544:	681b      	ldr	r3, [r3, #0]
   16546:	930b      	str	r3, [sp, #44]	; 0x2c
   16548:	2b00      	cmp	r3, #0
   1654a:	da00      	bge.n	1654e <_svfprintf_r+0x656>
   1654c:	e542      	b.n	15fd4 <_svfprintf_r+0xdc>
   1654e:	780b      	ldrb	r3, [r1, #0]
   16550:	920f      	str	r2, [sp, #60]	; 0x3c
   16552:	e535      	b.n	15fc0 <_svfprintf_r+0xc8>
   16554:	780b      	ldrb	r3, [r1, #0]
   16556:	2800      	cmp	r0, #0
   16558:	d000      	beq.n	1655c <_svfprintf_r+0x664>
   1655a:	e531      	b.n	15fc0 <_svfprintf_r+0xc8>
   1655c:	2201      	movs	r2, #1
   1655e:	3020      	adds	r0, #32
   16560:	4690      	mov	r8, r2
   16562:	e52d      	b.n	15fc0 <_svfprintf_r+0xc8>
   16564:	468b      	mov	fp, r1
   16566:	9312      	str	r3, [sp, #72]	; 0x48
   16568:	06a3      	lsls	r3, r4, #26
   1656a:	d400      	bmi.n	1656e <_svfprintf_r+0x676>
   1656c:	e6ed      	b.n	1634a <_svfprintf_r+0x452>
   1656e:	2207      	movs	r2, #7
   16570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16572:	3307      	adds	r3, #7
   16574:	4393      	bics	r3, r2
   16576:	3201      	adds	r2, #1
   16578:	4694      	mov	ip, r2
   1657a:	449c      	add	ip, r3
   1657c:	4662      	mov	r2, ip
   1657e:	920f      	str	r2, [sp, #60]	; 0x3c
   16580:	681a      	ldr	r2, [r3, #0]
   16582:	685b      	ldr	r3, [r3, #4]
   16584:	0011      	movs	r1, r2
   16586:	001a      	movs	r2, r3
   16588:	0008      	movs	r0, r1
   1658a:	4310      	orrs	r0, r2
   1658c:	910c      	str	r1, [sp, #48]	; 0x30
   1658e:	920d      	str	r2, [sp, #52]	; 0x34
   16590:	2301      	movs	r3, #1
   16592:	0002      	movs	r2, r0
   16594:	e699      	b.n	162ca <_svfprintf_r+0x3d2>
   16596:	468b      	mov	fp, r1
   16598:	9312      	str	r3, [sp, #72]	; 0x48
   1659a:	06a3      	lsls	r3, r4, #26
   1659c:	d400      	bmi.n	165a0 <_svfprintf_r+0x6a8>
   1659e:	e683      	b.n	162a8 <_svfprintf_r+0x3b0>
   165a0:	2207      	movs	r2, #7
   165a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   165a4:	3307      	adds	r3, #7
   165a6:	4393      	bics	r3, r2
   165a8:	3201      	adds	r2, #1
   165aa:	4694      	mov	ip, r2
   165ac:	449c      	add	ip, r3
   165ae:	4662      	mov	r2, ip
   165b0:	920f      	str	r2, [sp, #60]	; 0x3c
   165b2:	681a      	ldr	r2, [r3, #0]
   165b4:	685b      	ldr	r3, [r3, #4]
   165b6:	0011      	movs	r1, r2
   165b8:	001a      	movs	r2, r3
   165ba:	0008      	movs	r0, r1
   165bc:	4310      	orrs	r0, r2
   165be:	910c      	str	r1, [sp, #48]	; 0x30
   165c0:	920d      	str	r2, [sp, #52]	; 0x34
   165c2:	2300      	movs	r3, #0
   165c4:	0002      	movs	r2, r0
   165c6:	e680      	b.n	162ca <_svfprintf_r+0x3d2>
   165c8:	468b      	mov	fp, r1
   165ca:	4641      	mov	r1, r8
   165cc:	9312      	str	r3, [sp, #72]	; 0x48
   165ce:	2900      	cmp	r1, #0
   165d0:	d001      	beq.n	165d6 <_svfprintf_r+0x6de>
   165d2:	f000 ff7f 	bl	174d4 <_svfprintf_r+0x15dc>
   165d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   165d8:	2b00      	cmp	r3, #0
   165da:	d100      	bne.n	165de <_svfprintf_r+0x6e6>
   165dc:	e50b      	b.n	15ff6 <_svfprintf_r+0xfe>
   165de:	ad28      	add	r5, sp, #160	; 0xa0
   165e0:	702b      	strb	r3, [r5, #0]
   165e2:	2300      	movs	r3, #0
   165e4:	aa16      	add	r2, sp, #88	; 0x58
   165e6:	77d3      	strb	r3, [r2, #31]
   165e8:	9408      	str	r4, [sp, #32]
   165ea:	e74e      	b.n	1648a <_svfprintf_r+0x592>
   165ec:	68bc      	ldr	r4, [r7, #8]
   165ee:	4643      	mov	r3, r8
   165f0:	2b00      	cmp	r3, #0
   165f2:	d00f      	beq.n	16614 <_svfprintf_r+0x71c>
   165f4:	aa16      	add	r2, sp, #88	; 0x58
   165f6:	231f      	movs	r3, #31
   165f8:	4694      	mov	ip, r2
   165fa:	4463      	add	r3, ip
   165fc:	6033      	str	r3, [r6, #0]
   165fe:	2301      	movs	r3, #1
   16600:	6073      	str	r3, [r6, #4]
   16602:	687b      	ldr	r3, [r7, #4]
   16604:	3401      	adds	r4, #1
   16606:	3301      	adds	r3, #1
   16608:	60bc      	str	r4, [r7, #8]
   1660a:	607b      	str	r3, [r7, #4]
   1660c:	2b07      	cmp	r3, #7
   1660e:	dd00      	ble.n	16612 <_svfprintf_r+0x71a>
   16610:	e1b3      	b.n	1697a <_svfprintf_r+0xa82>
   16612:	3608      	adds	r6, #8
   16614:	464b      	mov	r3, r9
   16616:	2b00      	cmp	r3, #0
   16618:	d00c      	beq.n	16634 <_svfprintf_r+0x73c>
   1661a:	ab1e      	add	r3, sp, #120	; 0x78
   1661c:	6033      	str	r3, [r6, #0]
   1661e:	2302      	movs	r3, #2
   16620:	6073      	str	r3, [r6, #4]
   16622:	687b      	ldr	r3, [r7, #4]
   16624:	3402      	adds	r4, #2
   16626:	3301      	adds	r3, #1
   16628:	60bc      	str	r4, [r7, #8]
   1662a:	607b      	str	r3, [r7, #4]
   1662c:	2b07      	cmp	r3, #7
   1662e:	dd00      	ble.n	16632 <_svfprintf_r+0x73a>
   16630:	e1af      	b.n	16992 <_svfprintf_r+0xa9a>
   16632:	3608      	adds	r6, #8
   16634:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16636:	2b80      	cmp	r3, #128	; 0x80
   16638:	d100      	bne.n	1663c <_svfprintf_r+0x744>
   1663a:	e120      	b.n	1687e <_svfprintf_r+0x986>
   1663c:	4653      	mov	r3, sl
   1663e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16640:	1a9d      	subs	r5, r3, r2
   16642:	2d00      	cmp	r5, #0
   16644:	dd3c      	ble.n	166c0 <_svfprintf_r+0x7c8>
   16646:	4a08      	ldr	r2, [pc, #32]	; (16668 <_svfprintf_r+0x770>)
   16648:	687b      	ldr	r3, [r7, #4]
   1664a:	4691      	mov	r9, r2
   1664c:	2d10      	cmp	r5, #16
   1664e:	dd2c      	ble.n	166aa <_svfprintf_r+0x7b2>
   16650:	2210      	movs	r2, #16
   16652:	0021      	movs	r1, r4
   16654:	4692      	mov	sl, r2
   16656:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16658:	0032      	movs	r2, r6
   1665a:	002e      	movs	r6, r5
   1665c:	464d      	mov	r5, r9
   1665e:	e009      	b.n	16674 <_svfprintf_r+0x77c>
   16660:	0001e0b0 	.word	0x0001e0b0
   16664:	0001e0c4 	.word	0x0001e0c4
   16668:	0001e0f0 	.word	0x0001e0f0
   1666c:	3e10      	subs	r6, #16
   1666e:	3208      	adds	r2, #8
   16670:	2e10      	cmp	r6, #16
   16672:	dd16      	ble.n	166a2 <_svfprintf_r+0x7aa>
   16674:	4650      	mov	r0, sl
   16676:	3110      	adds	r1, #16
   16678:	3301      	adds	r3, #1
   1667a:	6015      	str	r5, [r2, #0]
   1667c:	6050      	str	r0, [r2, #4]
   1667e:	60b9      	str	r1, [r7, #8]
   16680:	607b      	str	r3, [r7, #4]
   16682:	2b07      	cmp	r3, #7
   16684:	ddf2      	ble.n	1666c <_svfprintf_r+0x774>
   16686:	003a      	movs	r2, r7
   16688:	9906      	ldr	r1, [sp, #24]
   1668a:	0020      	movs	r0, r4
   1668c:	f005 f982 	bl	1b994 <__ssprint_r>
   16690:	2800      	cmp	r0, #0
   16692:	d000      	beq.n	16696 <_svfprintf_r+0x79e>
   16694:	e4b7      	b.n	16006 <_svfprintf_r+0x10e>
   16696:	3e10      	subs	r6, #16
   16698:	68b9      	ldr	r1, [r7, #8]
   1669a:	687b      	ldr	r3, [r7, #4]
   1669c:	aa32      	add	r2, sp, #200	; 0xc8
   1669e:	2e10      	cmp	r6, #16
   166a0:	dce8      	bgt.n	16674 <_svfprintf_r+0x77c>
   166a2:	46a9      	mov	r9, r5
   166a4:	000c      	movs	r4, r1
   166a6:	0035      	movs	r5, r6
   166a8:	0016      	movs	r6, r2
   166aa:	464a      	mov	r2, r9
   166ac:	1964      	adds	r4, r4, r5
   166ae:	3301      	adds	r3, #1
   166b0:	6032      	str	r2, [r6, #0]
   166b2:	6075      	str	r5, [r6, #4]
   166b4:	60bc      	str	r4, [r7, #8]
   166b6:	607b      	str	r3, [r7, #4]
   166b8:	2b07      	cmp	r3, #7
   166ba:	dd00      	ble.n	166be <_svfprintf_r+0x7c6>
   166bc:	e151      	b.n	16962 <_svfprintf_r+0xa6a>
   166be:	3608      	adds	r6, #8
   166c0:	9b08      	ldr	r3, [sp, #32]
   166c2:	05db      	lsls	r3, r3, #23
   166c4:	d500      	bpl.n	166c8 <_svfprintf_r+0x7d0>
   166c6:	e0b6      	b.n	16836 <_svfprintf_r+0x93e>
   166c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   166ca:	6033      	str	r3, [r6, #0]
   166cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   166ce:	469c      	mov	ip, r3
   166d0:	6073      	str	r3, [r6, #4]
   166d2:	687b      	ldr	r3, [r7, #4]
   166d4:	4464      	add	r4, ip
   166d6:	3301      	adds	r3, #1
   166d8:	60bc      	str	r4, [r7, #8]
   166da:	607b      	str	r3, [r7, #4]
   166dc:	2b07      	cmp	r3, #7
   166de:	dd00      	ble.n	166e2 <_svfprintf_r+0x7ea>
   166e0:	e09d      	b.n	1681e <_svfprintf_r+0x926>
   166e2:	3608      	adds	r6, #8
   166e4:	9b08      	ldr	r3, [sp, #32]
   166e6:	075b      	lsls	r3, r3, #29
   166e8:	d541      	bpl.n	1676e <_svfprintf_r+0x876>
   166ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   166ec:	9a07      	ldr	r2, [sp, #28]
   166ee:	1a9d      	subs	r5, r3, r2
   166f0:	2d00      	cmp	r5, #0
   166f2:	dd3c      	ble.n	1676e <_svfprintf_r+0x876>
   166f4:	4ac4      	ldr	r2, [pc, #784]	; (16a08 <_svfprintf_r+0xb10>)
   166f6:	687b      	ldr	r3, [r7, #4]
   166f8:	4690      	mov	r8, r2
   166fa:	2d10      	cmp	r5, #16
   166fc:	dd26      	ble.n	1674c <_svfprintf_r+0x854>
   166fe:	2210      	movs	r2, #16
   16700:	0021      	movs	r1, r4
   16702:	4691      	mov	r9, r2
   16704:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16706:	0032      	movs	r2, r6
   16708:	002e      	movs	r6, r5
   1670a:	9d06      	ldr	r5, [sp, #24]
   1670c:	e003      	b.n	16716 <_svfprintf_r+0x81e>
   1670e:	3e10      	subs	r6, #16
   16710:	3208      	adds	r2, #8
   16712:	2e10      	cmp	r6, #16
   16714:	dd17      	ble.n	16746 <_svfprintf_r+0x84e>
   16716:	48bc      	ldr	r0, [pc, #752]	; (16a08 <_svfprintf_r+0xb10>)
   16718:	3110      	adds	r1, #16
   1671a:	6010      	str	r0, [r2, #0]
   1671c:	4648      	mov	r0, r9
   1671e:	3301      	adds	r3, #1
   16720:	6050      	str	r0, [r2, #4]
   16722:	60b9      	str	r1, [r7, #8]
   16724:	607b      	str	r3, [r7, #4]
   16726:	2b07      	cmp	r3, #7
   16728:	ddf1      	ble.n	1670e <_svfprintf_r+0x816>
   1672a:	003a      	movs	r2, r7
   1672c:	0029      	movs	r1, r5
   1672e:	0020      	movs	r0, r4
   16730:	f005 f930 	bl	1b994 <__ssprint_r>
   16734:	2800      	cmp	r0, #0
   16736:	d000      	beq.n	1673a <_svfprintf_r+0x842>
   16738:	e465      	b.n	16006 <_svfprintf_r+0x10e>
   1673a:	3e10      	subs	r6, #16
   1673c:	68b9      	ldr	r1, [r7, #8]
   1673e:	687b      	ldr	r3, [r7, #4]
   16740:	aa32      	add	r2, sp, #200	; 0xc8
   16742:	2e10      	cmp	r6, #16
   16744:	dce7      	bgt.n	16716 <_svfprintf_r+0x81e>
   16746:	0035      	movs	r5, r6
   16748:	000c      	movs	r4, r1
   1674a:	0016      	movs	r6, r2
   1674c:	4642      	mov	r2, r8
   1674e:	1964      	adds	r4, r4, r5
   16750:	3301      	adds	r3, #1
   16752:	c624      	stmia	r6!, {r2, r5}
   16754:	60bc      	str	r4, [r7, #8]
   16756:	607b      	str	r3, [r7, #4]
   16758:	2b07      	cmp	r3, #7
   1675a:	dd08      	ble.n	1676e <_svfprintf_r+0x876>
   1675c:	003a      	movs	r2, r7
   1675e:	9906      	ldr	r1, [sp, #24]
   16760:	9809      	ldr	r0, [sp, #36]	; 0x24
   16762:	f005 f917 	bl	1b994 <__ssprint_r>
   16766:	2800      	cmp	r0, #0
   16768:	d000      	beq.n	1676c <_svfprintf_r+0x874>
   1676a:	e44c      	b.n	16006 <_svfprintf_r+0x10e>
   1676c:	68bc      	ldr	r4, [r7, #8]
   1676e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16770:	9907      	ldr	r1, [sp, #28]
   16772:	428b      	cmp	r3, r1
   16774:	da00      	bge.n	16778 <_svfprintf_r+0x880>
   16776:	000b      	movs	r3, r1
   16778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1677a:	4694      	mov	ip, r2
   1677c:	449c      	add	ip, r3
   1677e:	4663      	mov	r3, ip
   16780:	930a      	str	r3, [sp, #40]	; 0x28
   16782:	2c00      	cmp	r4, #0
   16784:	d000      	beq.n	16788 <_svfprintf_r+0x890>
   16786:	e0d6      	b.n	16936 <_svfprintf_r+0xa3e>
   16788:	2300      	movs	r3, #0
   1678a:	ae32      	add	r6, sp, #200	; 0xc8
   1678c:	607b      	str	r3, [r7, #4]
   1678e:	f7ff fbde 	bl	15f4e <_svfprintf_r+0x56>
   16792:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16794:	2b01      	cmp	r3, #1
   16796:	dc00      	bgt.n	1679a <_svfprintf_r+0x8a2>
   16798:	e0ae      	b.n	168f8 <_svfprintf_r+0xa00>
   1679a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1679c:	3401      	adds	r4, #1
   1679e:	6033      	str	r3, [r6, #0]
   167a0:	2301      	movs	r3, #1
   167a2:	6073      	str	r3, [r6, #4]
   167a4:	687b      	ldr	r3, [r7, #4]
   167a6:	60bc      	str	r4, [r7, #8]
   167a8:	3301      	adds	r3, #1
   167aa:	607b      	str	r3, [r7, #4]
   167ac:	2b07      	cmp	r3, #7
   167ae:	dd00      	ble.n	167b2 <_svfprintf_r+0x8ba>
   167b0:	e2df      	b.n	16d72 <_svfprintf_r+0xe7a>
   167b2:	3608      	adds	r6, #8
   167b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   167b6:	3301      	adds	r3, #1
   167b8:	6032      	str	r2, [r6, #0]
   167ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   167bc:	4698      	mov	r8, r3
   167be:	4694      	mov	ip, r2
   167c0:	4464      	add	r4, ip
   167c2:	6072      	str	r2, [r6, #4]
   167c4:	60bc      	str	r4, [r7, #8]
   167c6:	607b      	str	r3, [r7, #4]
   167c8:	2b07      	cmp	r3, #7
   167ca:	dd00      	ble.n	167ce <_svfprintf_r+0x8d6>
   167cc:	e2de      	b.n	16d8c <_svfprintf_r+0xe94>
   167ce:	3608      	adds	r6, #8
   167d0:	2200      	movs	r2, #0
   167d2:	2300      	movs	r3, #0
   167d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   167d6:	9915      	ldr	r1, [sp, #84]	; 0x54
   167d8:	f7fe fef8 	bl	155cc <__aeabi_dcmpeq>
   167dc:	2800      	cmp	r0, #0
   167de:	d000      	beq.n	167e2 <_svfprintf_r+0x8ea>
   167e0:	e1a4      	b.n	16b2c <_svfprintf_r+0xc34>
   167e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   167e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   167e6:	3501      	adds	r5, #1
   167e8:	3b01      	subs	r3, #1
   167ea:	6035      	str	r5, [r6, #0]
   167ec:	6073      	str	r3, [r6, #4]
   167ee:	18e4      	adds	r4, r4, r3
   167f0:	2301      	movs	r3, #1
   167f2:	469c      	mov	ip, r3
   167f4:	44e0      	add	r8, ip
   167f6:	4643      	mov	r3, r8
   167f8:	60bc      	str	r4, [r7, #8]
   167fa:	607b      	str	r3, [r7, #4]
   167fc:	2b07      	cmp	r3, #7
   167fe:	dd00      	ble.n	16802 <_svfprintf_r+0x90a>
   16800:	e08b      	b.n	1691a <_svfprintf_r+0xa22>
   16802:	3608      	adds	r6, #8
   16804:	ab21      	add	r3, sp, #132	; 0x84
   16806:	6033      	str	r3, [r6, #0]
   16808:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1680a:	469c      	mov	ip, r3
   1680c:	6073      	str	r3, [r6, #4]
   1680e:	4643      	mov	r3, r8
   16810:	4464      	add	r4, ip
   16812:	3301      	adds	r3, #1
   16814:	60bc      	str	r4, [r7, #8]
   16816:	607b      	str	r3, [r7, #4]
   16818:	2b07      	cmp	r3, #7
   1681a:	dc00      	bgt.n	1681e <_svfprintf_r+0x926>
   1681c:	e761      	b.n	166e2 <_svfprintf_r+0x7ea>
   1681e:	003a      	movs	r2, r7
   16820:	9906      	ldr	r1, [sp, #24]
   16822:	9809      	ldr	r0, [sp, #36]	; 0x24
   16824:	f005 f8b6 	bl	1b994 <__ssprint_r>
   16828:	2800      	cmp	r0, #0
   1682a:	d001      	beq.n	16830 <_svfprintf_r+0x938>
   1682c:	f7ff fbeb 	bl	16006 <_svfprintf_r+0x10e>
   16830:	68bc      	ldr	r4, [r7, #8]
   16832:	ae32      	add	r6, sp, #200	; 0xc8
   16834:	e756      	b.n	166e4 <_svfprintf_r+0x7ec>
   16836:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16838:	2b65      	cmp	r3, #101	; 0x65
   1683a:	ddaa      	ble.n	16792 <_svfprintf_r+0x89a>
   1683c:	2200      	movs	r2, #0
   1683e:	2300      	movs	r3, #0
   16840:	9816      	ldr	r0, [sp, #88]	; 0x58
   16842:	9915      	ldr	r1, [sp, #84]	; 0x54
   16844:	f7fe fec2 	bl	155cc <__aeabi_dcmpeq>
   16848:	2800      	cmp	r0, #0
   1684a:	d100      	bne.n	1684e <_svfprintf_r+0x956>
   1684c:	e0e2      	b.n	16a14 <_svfprintf_r+0xb1c>
   1684e:	4b6f      	ldr	r3, [pc, #444]	; (16a0c <_svfprintf_r+0xb14>)
   16850:	3401      	adds	r4, #1
   16852:	6033      	str	r3, [r6, #0]
   16854:	2301      	movs	r3, #1
   16856:	6073      	str	r3, [r6, #4]
   16858:	687b      	ldr	r3, [r7, #4]
   1685a:	60bc      	str	r4, [r7, #8]
   1685c:	3301      	adds	r3, #1
   1685e:	607b      	str	r3, [r7, #4]
   16860:	2b07      	cmp	r3, #7
   16862:	dd00      	ble.n	16866 <_svfprintf_r+0x96e>
   16864:	e366      	b.n	16f34 <_svfprintf_r+0x103c>
   16866:	3608      	adds	r6, #8
   16868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1686a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1686c:	4293      	cmp	r3, r2
   1686e:	da00      	bge.n	16872 <_svfprintf_r+0x97a>
   16870:	e1a4      	b.n	16bbc <_svfprintf_r+0xcc4>
   16872:	9b08      	ldr	r3, [sp, #32]
   16874:	07db      	lsls	r3, r3, #31
   16876:	d500      	bpl.n	1687a <_svfprintf_r+0x982>
   16878:	e1a0      	b.n	16bbc <_svfprintf_r+0xcc4>
   1687a:	68bc      	ldr	r4, [r7, #8]
   1687c:	e732      	b.n	166e4 <_svfprintf_r+0x7ec>
   1687e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16880:	9a07      	ldr	r2, [sp, #28]
   16882:	1a9d      	subs	r5, r3, r2
   16884:	2d00      	cmp	r5, #0
   16886:	dc00      	bgt.n	1688a <_svfprintf_r+0x992>
   16888:	e6d8      	b.n	1663c <_svfprintf_r+0x744>
   1688a:	4a61      	ldr	r2, [pc, #388]	; (16a10 <_svfprintf_r+0xb18>)
   1688c:	687b      	ldr	r3, [r7, #4]
   1688e:	4691      	mov	r9, r2
   16890:	2d10      	cmp	r5, #16
   16892:	dd25      	ble.n	168e0 <_svfprintf_r+0x9e8>
   16894:	2210      	movs	r2, #16
   16896:	0021      	movs	r1, r4
   16898:	4690      	mov	r8, r2
   1689a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1689c:	0032      	movs	r2, r6
   1689e:	464e      	mov	r6, r9
   168a0:	e003      	b.n	168aa <_svfprintf_r+0x9b2>
   168a2:	3d10      	subs	r5, #16
   168a4:	3208      	adds	r2, #8
   168a6:	2d10      	cmp	r5, #16
   168a8:	dd17      	ble.n	168da <_svfprintf_r+0x9e2>
   168aa:	4640      	mov	r0, r8
   168ac:	3110      	adds	r1, #16
   168ae:	3301      	adds	r3, #1
   168b0:	6016      	str	r6, [r2, #0]
   168b2:	6050      	str	r0, [r2, #4]
   168b4:	60b9      	str	r1, [r7, #8]
   168b6:	607b      	str	r3, [r7, #4]
   168b8:	2b07      	cmp	r3, #7
   168ba:	ddf2      	ble.n	168a2 <_svfprintf_r+0x9aa>
   168bc:	003a      	movs	r2, r7
   168be:	9906      	ldr	r1, [sp, #24]
   168c0:	0020      	movs	r0, r4
   168c2:	f005 f867 	bl	1b994 <__ssprint_r>
   168c6:	2800      	cmp	r0, #0
   168c8:	d001      	beq.n	168ce <_svfprintf_r+0x9d6>
   168ca:	f7ff fb9c 	bl	16006 <_svfprintf_r+0x10e>
   168ce:	3d10      	subs	r5, #16
   168d0:	68b9      	ldr	r1, [r7, #8]
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	aa32      	add	r2, sp, #200	; 0xc8
   168d6:	2d10      	cmp	r5, #16
   168d8:	dce7      	bgt.n	168aa <_svfprintf_r+0x9b2>
   168da:	46b1      	mov	r9, r6
   168dc:	000c      	movs	r4, r1
   168de:	0016      	movs	r6, r2
   168e0:	464a      	mov	r2, r9
   168e2:	1964      	adds	r4, r4, r5
   168e4:	3301      	adds	r3, #1
   168e6:	6032      	str	r2, [r6, #0]
   168e8:	6075      	str	r5, [r6, #4]
   168ea:	60bc      	str	r4, [r7, #8]
   168ec:	607b      	str	r3, [r7, #4]
   168ee:	2b07      	cmp	r3, #7
   168f0:	dd00      	ble.n	168f4 <_svfprintf_r+0x9fc>
   168f2:	e27e      	b.n	16df2 <_svfprintf_r+0xefa>
   168f4:	3608      	adds	r6, #8
   168f6:	e6a1      	b.n	1663c <_svfprintf_r+0x744>
   168f8:	2301      	movs	r3, #1
   168fa:	9a08      	ldr	r2, [sp, #32]
   168fc:	4213      	tst	r3, r2
   168fe:	d000      	beq.n	16902 <_svfprintf_r+0xa0a>
   16900:	e74b      	b.n	1679a <_svfprintf_r+0x8a2>
   16902:	6073      	str	r3, [r6, #4]
   16904:	687b      	ldr	r3, [r7, #4]
   16906:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16908:	3301      	adds	r3, #1
   1690a:	3401      	adds	r4, #1
   1690c:	6032      	str	r2, [r6, #0]
   1690e:	60bc      	str	r4, [r7, #8]
   16910:	4698      	mov	r8, r3
   16912:	607b      	str	r3, [r7, #4]
   16914:	2b07      	cmp	r3, #7
   16916:	dc00      	bgt.n	1691a <_svfprintf_r+0xa22>
   16918:	e773      	b.n	16802 <_svfprintf_r+0x90a>
   1691a:	003a      	movs	r2, r7
   1691c:	9906      	ldr	r1, [sp, #24]
   1691e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16920:	f005 f838 	bl	1b994 <__ssprint_r>
   16924:	2800      	cmp	r0, #0
   16926:	d001      	beq.n	1692c <_svfprintf_r+0xa34>
   16928:	f7ff fb6d 	bl	16006 <_svfprintf_r+0x10e>
   1692c:	687b      	ldr	r3, [r7, #4]
   1692e:	68bc      	ldr	r4, [r7, #8]
   16930:	4698      	mov	r8, r3
   16932:	ae32      	add	r6, sp, #200	; 0xc8
   16934:	e766      	b.n	16804 <_svfprintf_r+0x90c>
   16936:	003a      	movs	r2, r7
   16938:	9906      	ldr	r1, [sp, #24]
   1693a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1693c:	f005 f82a 	bl	1b994 <__ssprint_r>
   16940:	2800      	cmp	r0, #0
   16942:	d100      	bne.n	16946 <_svfprintf_r+0xa4e>
   16944:	e720      	b.n	16788 <_svfprintf_r+0x890>
   16946:	f7ff fb5e 	bl	16006 <_svfprintf_r+0x10e>
   1694a:	9c08      	ldr	r4, [sp, #32]
   1694c:	2b01      	cmp	r3, #1
   1694e:	d100      	bne.n	16952 <_svfprintf_r+0xa5a>
   16950:	e184      	b.n	16c5c <_svfprintf_r+0xd64>
   16952:	2b02      	cmp	r3, #2
   16954:	d129      	bne.n	169aa <_svfprintf_r+0xab2>
   16956:	9408      	str	r4, [sp, #32]
   16958:	2300      	movs	r3, #0
   1695a:	2400      	movs	r4, #0
   1695c:	930c      	str	r3, [sp, #48]	; 0x30
   1695e:	940d      	str	r4, [sp, #52]	; 0x34
   16960:	e4c5      	b.n	162ee <_svfprintf_r+0x3f6>
   16962:	003a      	movs	r2, r7
   16964:	9906      	ldr	r1, [sp, #24]
   16966:	9809      	ldr	r0, [sp, #36]	; 0x24
   16968:	f005 f814 	bl	1b994 <__ssprint_r>
   1696c:	2800      	cmp	r0, #0
   1696e:	d001      	beq.n	16974 <_svfprintf_r+0xa7c>
   16970:	f7ff fb49 	bl	16006 <_svfprintf_r+0x10e>
   16974:	68bc      	ldr	r4, [r7, #8]
   16976:	ae32      	add	r6, sp, #200	; 0xc8
   16978:	e6a2      	b.n	166c0 <_svfprintf_r+0x7c8>
   1697a:	003a      	movs	r2, r7
   1697c:	9906      	ldr	r1, [sp, #24]
   1697e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16980:	f005 f808 	bl	1b994 <__ssprint_r>
   16984:	2800      	cmp	r0, #0
   16986:	d001      	beq.n	1698c <_svfprintf_r+0xa94>
   16988:	f7ff fb3d 	bl	16006 <_svfprintf_r+0x10e>
   1698c:	68bc      	ldr	r4, [r7, #8]
   1698e:	ae32      	add	r6, sp, #200	; 0xc8
   16990:	e640      	b.n	16614 <_svfprintf_r+0x71c>
   16992:	003a      	movs	r2, r7
   16994:	9906      	ldr	r1, [sp, #24]
   16996:	9809      	ldr	r0, [sp, #36]	; 0x24
   16998:	f004 fffc 	bl	1b994 <__ssprint_r>
   1699c:	2800      	cmp	r0, #0
   1699e:	d001      	beq.n	169a4 <_svfprintf_r+0xaac>
   169a0:	f7ff fb31 	bl	16006 <_svfprintf_r+0x10e>
   169a4:	68bc      	ldr	r4, [r7, #8]
   169a6:	ae32      	add	r6, sp, #200	; 0xc8
   169a8:	e644      	b.n	16634 <_svfprintf_r+0x73c>
   169aa:	9408      	str	r4, [sp, #32]
   169ac:	2300      	movs	r3, #0
   169ae:	2400      	movs	r4, #0
   169b0:	930c      	str	r3, [sp, #48]	; 0x30
   169b2:	940d      	str	r4, [sp, #52]	; 0x34
   169b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   169b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   169b8:	465b      	mov	r3, fp
   169ba:	aa32      	add	r2, sp, #200	; 0xc8
   169bc:	9307      	str	r3, [sp, #28]
   169be:	4691      	mov	r9, r2
   169c0:	46b3      	mov	fp, r6
   169c2:	e000      	b.n	169c6 <_svfprintf_r+0xace>
   169c4:	46a1      	mov	r9, r4
   169c6:	074a      	lsls	r2, r1, #29
   169c8:	4694      	mov	ip, r2
   169ca:	464b      	mov	r3, r9
   169cc:	4665      	mov	r5, ip
   169ce:	1e5c      	subs	r4, r3, #1
   169d0:	08c6      	lsrs	r6, r0, #3
   169d2:	2307      	movs	r3, #7
   169d4:	08ca      	lsrs	r2, r1, #3
   169d6:	4335      	orrs	r5, r6
   169d8:	0011      	movs	r1, r2
   169da:	002a      	movs	r2, r5
   169dc:	4003      	ands	r3, r0
   169de:	3330      	adds	r3, #48	; 0x30
   169e0:	7023      	strb	r3, [r4, #0]
   169e2:	0028      	movs	r0, r5
   169e4:	430a      	orrs	r2, r1
   169e6:	d1ed      	bne.n	169c4 <_svfprintf_r+0xacc>
   169e8:	900c      	str	r0, [sp, #48]	; 0x30
   169ea:	910d      	str	r1, [sp, #52]	; 0x34
   169ec:	9907      	ldr	r1, [sp, #28]
   169ee:	465e      	mov	r6, fp
   169f0:	468b      	mov	fp, r1
   169f2:	9908      	ldr	r1, [sp, #32]
   169f4:	464a      	mov	r2, r9
   169f6:	9411      	str	r4, [sp, #68]	; 0x44
   169f8:	07c9      	lsls	r1, r1, #31
   169fa:	d500      	bpl.n	169fe <_svfprintf_r+0xb06>
   169fc:	e13d      	b.n	16c7a <_svfprintf_r+0xd82>
   169fe:	ab32      	add	r3, sp, #200	; 0xc8
   16a00:	1b1b      	subs	r3, r3, r4
   16a02:	930e      	str	r3, [sp, #56]	; 0x38
   16a04:	f7ff fb88 	bl	16118 <_svfprintf_r+0x220>
   16a08:	0001e0e0 	.word	0x0001e0e0
   16a0c:	0001dbd8 	.word	0x0001dbd8
   16a10:	0001e0f0 	.word	0x0001e0f0
   16a14:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16a16:	2800      	cmp	r0, #0
   16a18:	dc00      	bgt.n	16a1c <_svfprintf_r+0xb24>
   16a1a:	e296      	b.n	16f4a <_svfprintf_r+0x1052>
   16a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16a1e:	9914      	ldr	r1, [sp, #80]	; 0x50
   16a20:	0013      	movs	r3, r2
   16a22:	4690      	mov	r8, r2
   16a24:	428b      	cmp	r3, r1
   16a26:	dd00      	ble.n	16a2a <_svfprintf_r+0xb32>
   16a28:	4688      	mov	r8, r1
   16a2a:	4643      	mov	r3, r8
   16a2c:	2b00      	cmp	r3, #0
   16a2e:	dd0c      	ble.n	16a4a <_svfprintf_r+0xb52>
   16a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a32:	4444      	add	r4, r8
   16a34:	6033      	str	r3, [r6, #0]
   16a36:	4643      	mov	r3, r8
   16a38:	6073      	str	r3, [r6, #4]
   16a3a:	687b      	ldr	r3, [r7, #4]
   16a3c:	60bc      	str	r4, [r7, #8]
   16a3e:	3301      	adds	r3, #1
   16a40:	607b      	str	r3, [r7, #4]
   16a42:	2b07      	cmp	r3, #7
   16a44:	dd00      	ble.n	16a48 <_svfprintf_r+0xb50>
   16a46:	e3b7      	b.n	171b8 <_svfprintf_r+0x12c0>
   16a48:	3608      	adds	r6, #8
   16a4a:	4643      	mov	r3, r8
   16a4c:	43db      	mvns	r3, r3
   16a4e:	4642      	mov	r2, r8
   16a50:	17db      	asrs	r3, r3, #31
   16a52:	4013      	ands	r3, r2
   16a54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16a56:	1ad3      	subs	r3, r2, r3
   16a58:	4698      	mov	r8, r3
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	dc00      	bgt.n	16a60 <_svfprintf_r+0xb68>
   16a5e:	e128      	b.n	16cb2 <_svfprintf_r+0xdba>
   16a60:	2b10      	cmp	r3, #16
   16a62:	dc01      	bgt.n	16a68 <_svfprintf_r+0xb70>
   16a64:	f000 fce7 	bl	17436 <_svfprintf_r+0x153e>
   16a68:	4acf      	ldr	r2, [pc, #828]	; (16da8 <_svfprintf_r+0xeb0>)
   16a6a:	0021      	movs	r1, r4
   16a6c:	4691      	mov	r9, r2
   16a6e:	2210      	movs	r2, #16
   16a70:	687b      	ldr	r3, [r7, #4]
   16a72:	4692      	mov	sl, r2
   16a74:	9d09      	ldr	r5, [sp, #36]	; 0x24
   16a76:	0032      	movs	r2, r6
   16a78:	464c      	mov	r4, r9
   16a7a:	4646      	mov	r6, r8
   16a7c:	e004      	b.n	16a88 <_svfprintf_r+0xb90>
   16a7e:	3208      	adds	r2, #8
   16a80:	3e10      	subs	r6, #16
   16a82:	2e10      	cmp	r6, #16
   16a84:	dc00      	bgt.n	16a88 <_svfprintf_r+0xb90>
   16a86:	e104      	b.n	16c92 <_svfprintf_r+0xd9a>
   16a88:	4650      	mov	r0, sl
   16a8a:	3110      	adds	r1, #16
   16a8c:	3301      	adds	r3, #1
   16a8e:	6014      	str	r4, [r2, #0]
   16a90:	6050      	str	r0, [r2, #4]
   16a92:	60b9      	str	r1, [r7, #8]
   16a94:	607b      	str	r3, [r7, #4]
   16a96:	2b07      	cmp	r3, #7
   16a98:	ddf1      	ble.n	16a7e <_svfprintf_r+0xb86>
   16a9a:	003a      	movs	r2, r7
   16a9c:	9906      	ldr	r1, [sp, #24]
   16a9e:	0028      	movs	r0, r5
   16aa0:	f004 ff78 	bl	1b994 <__ssprint_r>
   16aa4:	2800      	cmp	r0, #0
   16aa6:	d001      	beq.n	16aac <_svfprintf_r+0xbb4>
   16aa8:	f7ff faad 	bl	16006 <_svfprintf_r+0x10e>
   16aac:	68b9      	ldr	r1, [r7, #8]
   16aae:	687b      	ldr	r3, [r7, #4]
   16ab0:	aa32      	add	r2, sp, #200	; 0xc8
   16ab2:	e7e5      	b.n	16a80 <_svfprintf_r+0xb88>
   16ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16ab6:	2b00      	cmp	r3, #0
   16ab8:	d100      	bne.n	16abc <_svfprintf_r+0xbc4>
   16aba:	e0ca      	b.n	16c52 <_svfprintf_r+0xd5a>
   16abc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16abe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16ac0:	ab32      	add	r3, sp, #200	; 0xc8
   16ac2:	46b1      	mov	r9, r6
   16ac4:	001e      	movs	r6, r3
   16ac6:	0020      	movs	r0, r4
   16ac8:	0029      	movs	r1, r5
   16aca:	220a      	movs	r2, #10
   16acc:	2300      	movs	r3, #0
   16ace:	f7fb ffcd 	bl	12a6c <__aeabi_uldivmod>
   16ad2:	3e01      	subs	r6, #1
   16ad4:	3230      	adds	r2, #48	; 0x30
   16ad6:	7032      	strb	r2, [r6, #0]
   16ad8:	2300      	movs	r3, #0
   16ada:	0020      	movs	r0, r4
   16adc:	0029      	movs	r1, r5
   16ade:	220a      	movs	r2, #10
   16ae0:	f7fb ffc4 	bl	12a6c <__aeabi_uldivmod>
   16ae4:	0003      	movs	r3, r0
   16ae6:	0004      	movs	r4, r0
   16ae8:	000d      	movs	r5, r1
   16aea:	430b      	orrs	r3, r1
   16aec:	d1eb      	bne.n	16ac6 <_svfprintf_r+0xbce>
   16aee:	0032      	movs	r2, r6
   16af0:	ab32      	add	r3, sp, #200	; 0xc8
   16af2:	1a9b      	subs	r3, r3, r2
   16af4:	9611      	str	r6, [sp, #68]	; 0x44
   16af6:	940c      	str	r4, [sp, #48]	; 0x30
   16af8:	950d      	str	r5, [sp, #52]	; 0x34
   16afa:	464e      	mov	r6, r9
   16afc:	930e      	str	r3, [sp, #56]	; 0x38
   16afe:	f7ff fb0b 	bl	16118 <_svfprintf_r+0x220>
   16b02:	2300      	movs	r3, #0
   16b04:	930e      	str	r3, [sp, #56]	; 0x38
   16b06:	ab32      	add	r3, sp, #200	; 0xc8
   16b08:	9311      	str	r3, [sp, #68]	; 0x44
   16b0a:	f7ff fb05 	bl	16118 <_svfprintf_r+0x220>
   16b0e:	003a      	movs	r2, r7
   16b10:	9906      	ldr	r1, [sp, #24]
   16b12:	9809      	ldr	r0, [sp, #36]	; 0x24
   16b14:	f004 ff3e 	bl	1b994 <__ssprint_r>
   16b18:	2800      	cmp	r0, #0
   16b1a:	d001      	beq.n	16b20 <_svfprintf_r+0xc28>
   16b1c:	f7ff fa73 	bl	16006 <_svfprintf_r+0x10e>
   16b20:	ab16      	add	r3, sp, #88	; 0x58
   16b22:	7fdb      	ldrb	r3, [r3, #31]
   16b24:	68bc      	ldr	r4, [r7, #8]
   16b26:	4698      	mov	r8, r3
   16b28:	ae32      	add	r6, sp, #200	; 0xc8
   16b2a:	e560      	b.n	165ee <_svfprintf_r+0x6f6>
   16b2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16b2e:	1e5d      	subs	r5, r3, #1
   16b30:	2d00      	cmp	r5, #0
   16b32:	dc00      	bgt.n	16b36 <_svfprintf_r+0xc3e>
   16b34:	e666      	b.n	16804 <_svfprintf_r+0x90c>
   16b36:	4b9c      	ldr	r3, [pc, #624]	; (16da8 <_svfprintf_r+0xeb0>)
   16b38:	4699      	mov	r9, r3
   16b3a:	2d10      	cmp	r5, #16
   16b3c:	dd29      	ble.n	16b92 <_svfprintf_r+0xc9a>
   16b3e:	2310      	movs	r3, #16
   16b40:	0032      	movs	r2, r6
   16b42:	469a      	mov	sl, r3
   16b44:	002e      	movs	r6, r5
   16b46:	0021      	movs	r1, r4
   16b48:	4643      	mov	r3, r8
   16b4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16b4c:	464d      	mov	r5, r9
   16b4e:	e003      	b.n	16b58 <_svfprintf_r+0xc60>
   16b50:	3e10      	subs	r6, #16
   16b52:	3208      	adds	r2, #8
   16b54:	2e10      	cmp	r6, #16
   16b56:	dd17      	ble.n	16b88 <_svfprintf_r+0xc90>
   16b58:	4650      	mov	r0, sl
   16b5a:	3110      	adds	r1, #16
   16b5c:	3301      	adds	r3, #1
   16b5e:	6015      	str	r5, [r2, #0]
   16b60:	6050      	str	r0, [r2, #4]
   16b62:	60b9      	str	r1, [r7, #8]
   16b64:	607b      	str	r3, [r7, #4]
   16b66:	2b07      	cmp	r3, #7
   16b68:	ddf2      	ble.n	16b50 <_svfprintf_r+0xc58>
   16b6a:	003a      	movs	r2, r7
   16b6c:	9906      	ldr	r1, [sp, #24]
   16b6e:	0020      	movs	r0, r4
   16b70:	f004 ff10 	bl	1b994 <__ssprint_r>
   16b74:	2800      	cmp	r0, #0
   16b76:	d001      	beq.n	16b7c <_svfprintf_r+0xc84>
   16b78:	f7ff fa45 	bl	16006 <_svfprintf_r+0x10e>
   16b7c:	3e10      	subs	r6, #16
   16b7e:	68b9      	ldr	r1, [r7, #8]
   16b80:	687b      	ldr	r3, [r7, #4]
   16b82:	aa32      	add	r2, sp, #200	; 0xc8
   16b84:	2e10      	cmp	r6, #16
   16b86:	dce7      	bgt.n	16b58 <_svfprintf_r+0xc60>
   16b88:	46a9      	mov	r9, r5
   16b8a:	000c      	movs	r4, r1
   16b8c:	0035      	movs	r5, r6
   16b8e:	4698      	mov	r8, r3
   16b90:	0016      	movs	r6, r2
   16b92:	464b      	mov	r3, r9
   16b94:	6075      	str	r5, [r6, #4]
   16b96:	6033      	str	r3, [r6, #0]
   16b98:	1964      	adds	r4, r4, r5
   16b9a:	e629      	b.n	167f0 <_svfprintf_r+0x8f8>
   16b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16b9e:	681a      	ldr	r2, [r3, #0]
   16ba0:	f7ff fbfb 	bl	1639a <_svfprintf_r+0x4a2>
   16ba4:	6813      	ldr	r3, [r2, #0]
   16ba6:	9307      	str	r3, [sp, #28]
   16ba8:	f7ff fa82 	bl	160b0 <_svfprintf_r+0x1b8>
   16bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16bae:	681a      	ldr	r2, [r3, #0]
   16bb0:	f7ff fb84 	bl	162bc <_svfprintf_r+0x3c4>
   16bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16bb6:	681a      	ldr	r2, [r3, #0]
   16bb8:	f7ff fbd1 	bl	1635e <_svfprintf_r+0x466>
   16bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16bbe:	68ba      	ldr	r2, [r7, #8]
   16bc0:	6033      	str	r3, [r6, #0]
   16bc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16bc4:	469c      	mov	ip, r3
   16bc6:	6073      	str	r3, [r6, #4]
   16bc8:	687b      	ldr	r3, [r7, #4]
   16bca:	4462      	add	r2, ip
   16bcc:	3301      	adds	r3, #1
   16bce:	0014      	movs	r4, r2
   16bd0:	60ba      	str	r2, [r7, #8]
   16bd2:	607b      	str	r3, [r7, #4]
   16bd4:	2b07      	cmp	r3, #7
   16bd6:	dd00      	ble.n	16bda <_svfprintf_r+0xce2>
   16bd8:	e202      	b.n	16fe0 <_svfprintf_r+0x10e8>
   16bda:	3608      	adds	r6, #8
   16bdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16bde:	1e5d      	subs	r5, r3, #1
   16be0:	2d00      	cmp	r5, #0
   16be2:	dc00      	bgt.n	16be6 <_svfprintf_r+0xcee>
   16be4:	e57e      	b.n	166e4 <_svfprintf_r+0x7ec>
   16be6:	4a70      	ldr	r2, [pc, #448]	; (16da8 <_svfprintf_r+0xeb0>)
   16be8:	687b      	ldr	r3, [r7, #4]
   16bea:	4691      	mov	r9, r2
   16bec:	2d10      	cmp	r5, #16
   16bee:	dd25      	ble.n	16c3c <_svfprintf_r+0xd44>
   16bf0:	2210      	movs	r2, #16
   16bf2:	0021      	movs	r1, r4
   16bf4:	4690      	mov	r8, r2
   16bf6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16bf8:	0032      	movs	r2, r6
   16bfa:	002e      	movs	r6, r5
   16bfc:	464d      	mov	r5, r9
   16bfe:	e003      	b.n	16c08 <_svfprintf_r+0xd10>
   16c00:	3208      	adds	r2, #8
   16c02:	3e10      	subs	r6, #16
   16c04:	2e10      	cmp	r6, #16
   16c06:	dd15      	ble.n	16c34 <_svfprintf_r+0xd3c>
   16c08:	4640      	mov	r0, r8
   16c0a:	3110      	adds	r1, #16
   16c0c:	3301      	adds	r3, #1
   16c0e:	6015      	str	r5, [r2, #0]
   16c10:	6050      	str	r0, [r2, #4]
   16c12:	60b9      	str	r1, [r7, #8]
   16c14:	607b      	str	r3, [r7, #4]
   16c16:	2b07      	cmp	r3, #7
   16c18:	ddf2      	ble.n	16c00 <_svfprintf_r+0xd08>
   16c1a:	003a      	movs	r2, r7
   16c1c:	9906      	ldr	r1, [sp, #24]
   16c1e:	0020      	movs	r0, r4
   16c20:	f004 feb8 	bl	1b994 <__ssprint_r>
   16c24:	2800      	cmp	r0, #0
   16c26:	d001      	beq.n	16c2c <_svfprintf_r+0xd34>
   16c28:	f7ff f9ed 	bl	16006 <_svfprintf_r+0x10e>
   16c2c:	68b9      	ldr	r1, [r7, #8]
   16c2e:	687b      	ldr	r3, [r7, #4]
   16c30:	aa32      	add	r2, sp, #200	; 0xc8
   16c32:	e7e6      	b.n	16c02 <_svfprintf_r+0xd0a>
   16c34:	46a9      	mov	r9, r5
   16c36:	000c      	movs	r4, r1
   16c38:	0035      	movs	r5, r6
   16c3a:	0016      	movs	r6, r2
   16c3c:	464a      	mov	r2, r9
   16c3e:	1964      	adds	r4, r4, r5
   16c40:	3301      	adds	r3, #1
   16c42:	6032      	str	r2, [r6, #0]
   16c44:	6075      	str	r5, [r6, #4]
   16c46:	60bc      	str	r4, [r7, #8]
   16c48:	607b      	str	r3, [r7, #4]
   16c4a:	2b07      	cmp	r3, #7
   16c4c:	dc00      	bgt.n	16c50 <_svfprintf_r+0xd58>
   16c4e:	e548      	b.n	166e2 <_svfprintf_r+0x7ea>
   16c50:	e5e5      	b.n	1681e <_svfprintf_r+0x926>
   16c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16c54:	2b09      	cmp	r3, #9
   16c56:	d900      	bls.n	16c5a <_svfprintf_r+0xd62>
   16c58:	e730      	b.n	16abc <_svfprintf_r+0xbc4>
   16c5a:	9c08      	ldr	r4, [sp, #32]
   16c5c:	2227      	movs	r2, #39	; 0x27
   16c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16c60:	a928      	add	r1, sp, #160	; 0xa0
   16c62:	3330      	adds	r3, #48	; 0x30
   16c64:	548b      	strb	r3, [r1, r2]
   16c66:	2301      	movs	r3, #1
   16c68:	aa16      	add	r2, sp, #88	; 0x58
   16c6a:	4694      	mov	ip, r2
   16c6c:	930e      	str	r3, [sp, #56]	; 0x38
   16c6e:	336e      	adds	r3, #110	; 0x6e
   16c70:	4463      	add	r3, ip
   16c72:	9408      	str	r4, [sp, #32]
   16c74:	9311      	str	r3, [sp, #68]	; 0x44
   16c76:	f7ff fa4f 	bl	16118 <_svfprintf_r+0x220>
   16c7a:	2b30      	cmp	r3, #48	; 0x30
   16c7c:	d100      	bne.n	16c80 <_svfprintf_r+0xd88>
   16c7e:	e20b      	b.n	17098 <_svfprintf_r+0x11a0>
   16c80:	2330      	movs	r3, #48	; 0x30
   16c82:	3a02      	subs	r2, #2
   16c84:	7013      	strb	r3, [r2, #0]
   16c86:	ab32      	add	r3, sp, #200	; 0xc8
   16c88:	1a9b      	subs	r3, r3, r2
   16c8a:	930e      	str	r3, [sp, #56]	; 0x38
   16c8c:	9211      	str	r2, [sp, #68]	; 0x44
   16c8e:	f7ff fa43 	bl	16118 <_svfprintf_r+0x220>
   16c92:	46b0      	mov	r8, r6
   16c94:	46a1      	mov	r9, r4
   16c96:	0016      	movs	r6, r2
   16c98:	000c      	movs	r4, r1
   16c9a:	464a      	mov	r2, r9
   16c9c:	6032      	str	r2, [r6, #0]
   16c9e:	4642      	mov	r2, r8
   16ca0:	4444      	add	r4, r8
   16ca2:	3301      	adds	r3, #1
   16ca4:	6072      	str	r2, [r6, #4]
   16ca6:	60bc      	str	r4, [r7, #8]
   16ca8:	607b      	str	r3, [r7, #4]
   16caa:	2b07      	cmp	r3, #7
   16cac:	dd00      	ble.n	16cb0 <_svfprintf_r+0xdb8>
   16cae:	e29c      	b.n	171ea <_svfprintf_r+0x12f2>
   16cb0:	3608      	adds	r6, #8
   16cb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16cb6:	4293      	cmp	r3, r2
   16cb8:	db4c      	blt.n	16d54 <_svfprintf_r+0xe5c>
   16cba:	9a08      	ldr	r2, [sp, #32]
   16cbc:	07d2      	lsls	r2, r2, #31
   16cbe:	d449      	bmi.n	16d54 <_svfprintf_r+0xe5c>
   16cc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16cc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16cc4:	1ad3      	subs	r3, r2, r3
   16cc6:	1a52      	subs	r2, r2, r1
   16cc8:	4690      	mov	r8, r2
   16cca:	429a      	cmp	r2, r3
   16ccc:	dd00      	ble.n	16cd0 <_svfprintf_r+0xdd8>
   16cce:	4698      	mov	r8, r3
   16cd0:	4642      	mov	r2, r8
   16cd2:	2a00      	cmp	r2, #0
   16cd4:	dd0f      	ble.n	16cf6 <_svfprintf_r+0xdfe>
   16cd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16cda:	468c      	mov	ip, r1
   16cdc:	4462      	add	r2, ip
   16cde:	6032      	str	r2, [r6, #0]
   16ce0:	4642      	mov	r2, r8
   16ce2:	6072      	str	r2, [r6, #4]
   16ce4:	687a      	ldr	r2, [r7, #4]
   16ce6:	4444      	add	r4, r8
   16ce8:	3201      	adds	r2, #1
   16cea:	60bc      	str	r4, [r7, #8]
   16cec:	607a      	str	r2, [r7, #4]
   16cee:	2a07      	cmp	r2, #7
   16cf0:	dd00      	ble.n	16cf4 <_svfprintf_r+0xdfc>
   16cf2:	e286      	b.n	17202 <_svfprintf_r+0x130a>
   16cf4:	3608      	adds	r6, #8
   16cf6:	4642      	mov	r2, r8
   16cf8:	43d5      	mvns	r5, r2
   16cfa:	17ed      	asrs	r5, r5, #31
   16cfc:	4015      	ands	r5, r2
   16cfe:	1b5d      	subs	r5, r3, r5
   16d00:	2d00      	cmp	r5, #0
   16d02:	dc00      	bgt.n	16d06 <_svfprintf_r+0xe0e>
   16d04:	e4ee      	b.n	166e4 <_svfprintf_r+0x7ec>
   16d06:	4a28      	ldr	r2, [pc, #160]	; (16da8 <_svfprintf_r+0xeb0>)
   16d08:	687b      	ldr	r3, [r7, #4]
   16d0a:	4691      	mov	r9, r2
   16d0c:	2d10      	cmp	r5, #16
   16d0e:	dd95      	ble.n	16c3c <_svfprintf_r+0xd44>
   16d10:	2210      	movs	r2, #16
   16d12:	0021      	movs	r1, r4
   16d14:	4690      	mov	r8, r2
   16d16:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16d18:	0032      	movs	r2, r6
   16d1a:	002e      	movs	r6, r5
   16d1c:	464d      	mov	r5, r9
   16d1e:	e003      	b.n	16d28 <_svfprintf_r+0xe30>
   16d20:	3208      	adds	r2, #8
   16d22:	3e10      	subs	r6, #16
   16d24:	2e10      	cmp	r6, #16
   16d26:	dd85      	ble.n	16c34 <_svfprintf_r+0xd3c>
   16d28:	4640      	mov	r0, r8
   16d2a:	3110      	adds	r1, #16
   16d2c:	3301      	adds	r3, #1
   16d2e:	6015      	str	r5, [r2, #0]
   16d30:	6050      	str	r0, [r2, #4]
   16d32:	60b9      	str	r1, [r7, #8]
   16d34:	607b      	str	r3, [r7, #4]
   16d36:	2b07      	cmp	r3, #7
   16d38:	ddf2      	ble.n	16d20 <_svfprintf_r+0xe28>
   16d3a:	003a      	movs	r2, r7
   16d3c:	9906      	ldr	r1, [sp, #24]
   16d3e:	0020      	movs	r0, r4
   16d40:	f004 fe28 	bl	1b994 <__ssprint_r>
   16d44:	2800      	cmp	r0, #0
   16d46:	d001      	beq.n	16d4c <_svfprintf_r+0xe54>
   16d48:	f7ff f95d 	bl	16006 <_svfprintf_r+0x10e>
   16d4c:	68b9      	ldr	r1, [r7, #8]
   16d4e:	687b      	ldr	r3, [r7, #4]
   16d50:	aa32      	add	r2, sp, #200	; 0xc8
   16d52:	e7e6      	b.n	16d22 <_svfprintf_r+0xe2a>
   16d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
   16d56:	6032      	str	r2, [r6, #0]
   16d58:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16d5a:	4694      	mov	ip, r2
   16d5c:	6072      	str	r2, [r6, #4]
   16d5e:	687a      	ldr	r2, [r7, #4]
   16d60:	4464      	add	r4, ip
   16d62:	3201      	adds	r2, #1
   16d64:	60bc      	str	r4, [r7, #8]
   16d66:	607a      	str	r2, [r7, #4]
   16d68:	2a07      	cmp	r2, #7
   16d6a:	dd00      	ble.n	16d6e <_svfprintf_r+0xe76>
   16d6c:	e230      	b.n	171d0 <_svfprintf_r+0x12d8>
   16d6e:	3608      	adds	r6, #8
   16d70:	e7a6      	b.n	16cc0 <_svfprintf_r+0xdc8>
   16d72:	003a      	movs	r2, r7
   16d74:	9906      	ldr	r1, [sp, #24]
   16d76:	9809      	ldr	r0, [sp, #36]	; 0x24
   16d78:	f004 fe0c 	bl	1b994 <__ssprint_r>
   16d7c:	2800      	cmp	r0, #0
   16d7e:	d001      	beq.n	16d84 <_svfprintf_r+0xe8c>
   16d80:	f7ff f941 	bl	16006 <_svfprintf_r+0x10e>
   16d84:	68bc      	ldr	r4, [r7, #8]
   16d86:	687b      	ldr	r3, [r7, #4]
   16d88:	ae32      	add	r6, sp, #200	; 0xc8
   16d8a:	e513      	b.n	167b4 <_svfprintf_r+0x8bc>
   16d8c:	003a      	movs	r2, r7
   16d8e:	9906      	ldr	r1, [sp, #24]
   16d90:	9809      	ldr	r0, [sp, #36]	; 0x24
   16d92:	f004 fdff 	bl	1b994 <__ssprint_r>
   16d96:	2800      	cmp	r0, #0
   16d98:	d001      	beq.n	16d9e <_svfprintf_r+0xea6>
   16d9a:	f7ff f934 	bl	16006 <_svfprintf_r+0x10e>
   16d9e:	687b      	ldr	r3, [r7, #4]
   16da0:	68bc      	ldr	r4, [r7, #8]
   16da2:	4698      	mov	r8, r3
   16da4:	ae32      	add	r6, sp, #200	; 0xc8
   16da6:	e513      	b.n	167d0 <_svfprintf_r+0x8d8>
   16da8:	0001e0f0 	.word	0x0001e0f0
   16dac:	2307      	movs	r3, #7
   16dae:	3207      	adds	r2, #7
   16db0:	439a      	bics	r2, r3
   16db2:	3301      	adds	r3, #1
   16db4:	469c      	mov	ip, r3
   16db6:	4494      	add	ip, r2
   16db8:	4663      	mov	r3, ip
   16dba:	930f      	str	r3, [sp, #60]	; 0x3c
   16dbc:	6853      	ldr	r3, [r2, #4]
   16dbe:	6812      	ldr	r2, [r2, #0]
   16dc0:	930d      	str	r3, [sp, #52]	; 0x34
   16dc2:	920c      	str	r2, [sp, #48]	; 0x30
   16dc4:	2b00      	cmp	r3, #0
   16dc6:	db01      	blt.n	16dcc <_svfprintf_r+0xed4>
   16dc8:	f7ff f97a 	bl	160c0 <_svfprintf_r+0x1c8>
   16dcc:	980c      	ldr	r0, [sp, #48]	; 0x30
   16dce:	990d      	ldr	r1, [sp, #52]	; 0x34
   16dd0:	2300      	movs	r3, #0
   16dd2:	4242      	negs	r2, r0
   16dd4:	418b      	sbcs	r3, r1
   16dd6:	0011      	movs	r1, r2
   16dd8:	001a      	movs	r2, r3
   16dda:	232d      	movs	r3, #45	; 0x2d
   16ddc:	a816      	add	r0, sp, #88	; 0x58
   16dde:	77c3      	strb	r3, [r0, #31]
   16de0:	0008      	movs	r0, r1
   16de2:	4310      	orrs	r0, r2
   16de4:	910c      	str	r1, [sp, #48]	; 0x30
   16de6:	920d      	str	r2, [sp, #52]	; 0x34
   16de8:	4698      	mov	r8, r3
   16dea:	0002      	movs	r2, r0
   16dec:	3b2c      	subs	r3, #44	; 0x2c
   16dee:	f7ff f970 	bl	160d2 <_svfprintf_r+0x1da>
   16df2:	003a      	movs	r2, r7
   16df4:	9906      	ldr	r1, [sp, #24]
   16df6:	9809      	ldr	r0, [sp, #36]	; 0x24
   16df8:	f004 fdcc 	bl	1b994 <__ssprint_r>
   16dfc:	2800      	cmp	r0, #0
   16dfe:	d001      	beq.n	16e04 <_svfprintf_r+0xf0c>
   16e00:	f7ff f901 	bl	16006 <_svfprintf_r+0x10e>
   16e04:	68bc      	ldr	r4, [r7, #8]
   16e06:	ae32      	add	r6, sp, #200	; 0xc8
   16e08:	e418      	b.n	1663c <_svfprintf_r+0x744>
   16e0a:	9916      	ldr	r1, [sp, #88]	; 0x58
   16e0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   16e0e:	000a      	movs	r2, r1
   16e10:	0008      	movs	r0, r1
   16e12:	002b      	movs	r3, r5
   16e14:	0029      	movs	r1, r5
   16e16:	f005 f929 	bl	1c06c <__aeabi_dcmpun>
   16e1a:	2800      	cmp	r0, #0
   16e1c:	d000      	beq.n	16e20 <_svfprintf_r+0xf28>
   16e1e:	e2e6      	b.n	173ee <_svfprintf_r+0x14f6>
   16e20:	4653      	mov	r3, sl
   16e22:	3301      	adds	r3, #1
   16e24:	d100      	bne.n	16e28 <_svfprintf_r+0xf30>
   16e26:	e20d      	b.n	17244 <_svfprintf_r+0x134c>
   16e28:	2320      	movs	r3, #32
   16e2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16e2c:	439a      	bics	r2, r3
   16e2e:	920e      	str	r2, [sp, #56]	; 0x38
   16e30:	2a47      	cmp	r2, #71	; 0x47
   16e32:	d100      	bne.n	16e36 <_svfprintf_r+0xf3e>
   16e34:	e11c      	b.n	17070 <_svfprintf_r+0x1178>
   16e36:	2380      	movs	r3, #128	; 0x80
   16e38:	005b      	lsls	r3, r3, #1
   16e3a:	4323      	orrs	r3, r4
   16e3c:	9308      	str	r3, [sp, #32]
   16e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16e40:	2b00      	cmp	r3, #0
   16e42:	da00      	bge.n	16e46 <_svfprintf_r+0xf4e>
   16e44:	e221      	b.n	1728a <_svfprintf_r+0x1392>
   16e46:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16e48:	9307      	str	r3, [sp, #28]
   16e4a:	2300      	movs	r3, #0
   16e4c:	4691      	mov	r9, r2
   16e4e:	9310      	str	r3, [sp, #64]	; 0x40
   16e50:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16e52:	2b66      	cmp	r3, #102	; 0x66
   16e54:	d100      	bne.n	16e58 <_svfprintf_r+0xf60>
   16e56:	e1fc      	b.n	17252 <_svfprintf_r+0x135a>
   16e58:	2b46      	cmp	r3, #70	; 0x46
   16e5a:	d100      	bne.n	16e5e <_svfprintf_r+0xf66>
   16e5c:	e0db      	b.n	17016 <_svfprintf_r+0x111e>
   16e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16e60:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e62:	3a45      	subs	r2, #69	; 0x45
   16e64:	0013      	movs	r3, r2
   16e66:	4259      	negs	r1, r3
   16e68:	4159      	adcs	r1, r3
   16e6a:	ab20      	add	r3, sp, #128	; 0x80
   16e6c:	000d      	movs	r5, r1
   16e6e:	9303      	str	r3, [sp, #12]
   16e70:	ab1f      	add	r3, sp, #124	; 0x7c
   16e72:	9302      	str	r3, [sp, #8]
   16e74:	2302      	movs	r3, #2
   16e76:	aa23      	add	r2, sp, #140	; 0x8c
   16e78:	4455      	add	r5, sl
   16e7a:	921b      	str	r2, [sp, #108]	; 0x6c
   16e7c:	9204      	str	r2, [sp, #16]
   16e7e:	9300      	str	r3, [sp, #0]
   16e80:	9501      	str	r5, [sp, #4]
   16e82:	9b07      	ldr	r3, [sp, #28]
   16e84:	464a      	mov	r2, r9
   16e86:	f002 f813 	bl	18eb0 <_dtoa_r>
   16e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16e8c:	9011      	str	r0, [sp, #68]	; 0x44
   16e8e:	2b67      	cmp	r3, #103	; 0x67
   16e90:	d000      	beq.n	16e94 <_svfprintf_r+0xf9c>
   16e92:	e239      	b.n	17308 <_svfprintf_r+0x1410>
   16e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16e96:	4698      	mov	r8, r3
   16e98:	44a8      	add	r8, r5
   16e9a:	07e3      	lsls	r3, r4, #31
   16e9c:	d400      	bmi.n	16ea0 <_svfprintf_r+0xfa8>
   16e9e:	e28b      	b.n	173b8 <_svfprintf_r+0x14c0>
   16ea0:	2300      	movs	r3, #0
   16ea2:	2200      	movs	r2, #0
   16ea4:	4648      	mov	r0, r9
   16ea6:	9907      	ldr	r1, [sp, #28]
   16ea8:	f7fe fb90 	bl	155cc <__aeabi_dcmpeq>
   16eac:	4643      	mov	r3, r8
   16eae:	2800      	cmp	r0, #0
   16eb0:	d10a      	bne.n	16ec8 <_svfprintf_r+0xfd0>
   16eb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16eb4:	4543      	cmp	r3, r8
   16eb6:	d207      	bcs.n	16ec8 <_svfprintf_r+0xfd0>
   16eb8:	2130      	movs	r1, #48	; 0x30
   16eba:	4640      	mov	r0, r8
   16ebc:	1c5a      	adds	r2, r3, #1
   16ebe:	9223      	str	r2, [sp, #140]	; 0x8c
   16ec0:	7019      	strb	r1, [r3, #0]
   16ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16ec4:	4298      	cmp	r0, r3
   16ec6:	d8f9      	bhi.n	16ebc <_svfprintf_r+0xfc4>
   16ec8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16eca:	1a9b      	subs	r3, r3, r2
   16ecc:	9314      	str	r3, [sp, #80]	; 0x50
   16ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16ed0:	2b47      	cmp	r3, #71	; 0x47
   16ed2:	d100      	bne.n	16ed6 <_svfprintf_r+0xfde>
   16ed4:	e0f6      	b.n	170c4 <_svfprintf_r+0x11cc>
   16ed6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16ed8:	2b65      	cmp	r3, #101	; 0x65
   16eda:	dc00      	bgt.n	16ede <_svfprintf_r+0xfe6>
   16edc:	e226      	b.n	1732c <_svfprintf_r+0x1434>
   16ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16ee0:	2b66      	cmp	r3, #102	; 0x66
   16ee2:	d100      	bne.n	16ee6 <_svfprintf_r+0xfee>
   16ee4:	e1f4      	b.n	172d0 <_svfprintf_r+0x13d8>
   16ee6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16ee8:	9313      	str	r3, [sp, #76]	; 0x4c
   16eea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16eec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16eee:	0019      	movs	r1, r3
   16ef0:	4291      	cmp	r1, r2
   16ef2:	dd00      	ble.n	16ef6 <_svfprintf_r+0xffe>
   16ef4:	e1d4      	b.n	172a0 <_svfprintf_r+0x13a8>
   16ef6:	07e3      	lsls	r3, r4, #31
   16ef8:	d500      	bpl.n	16efc <_svfprintf_r+0x1004>
   16efa:	e249      	b.n	17390 <_svfprintf_r+0x1498>
   16efc:	43d3      	mvns	r3, r2
   16efe:	17db      	asrs	r3, r3, #31
   16f00:	0011      	movs	r1, r2
   16f02:	401a      	ands	r2, r3
   16f04:	2367      	movs	r3, #103	; 0x67
   16f06:	9207      	str	r2, [sp, #28]
   16f08:	910e      	str	r1, [sp, #56]	; 0x38
   16f0a:	9312      	str	r3, [sp, #72]	; 0x48
   16f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d000      	beq.n	16f14 <_svfprintf_r+0x101c>
   16f12:	e0cf      	b.n	170b4 <_svfprintf_r+0x11bc>
   16f14:	ab16      	add	r3, sp, #88	; 0x58
   16f16:	7fdb      	ldrb	r3, [r3, #31]
   16f18:	4698      	mov	r8, r3
   16f1a:	2300      	movs	r3, #0
   16f1c:	469a      	mov	sl, r3
   16f1e:	f7ff f903 	bl	16128 <_svfprintf_r+0x230>
   16f22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16f24:	990a      	ldr	r1, [sp, #40]	; 0x28
   16f26:	6813      	ldr	r3, [r2, #0]
   16f28:	6019      	str	r1, [r3, #0]
   16f2a:	0013      	movs	r3, r2
   16f2c:	3304      	adds	r3, #4
   16f2e:	930f      	str	r3, [sp, #60]	; 0x3c
   16f30:	f7ff f80d 	bl	15f4e <_svfprintf_r+0x56>
   16f34:	003a      	movs	r2, r7
   16f36:	9906      	ldr	r1, [sp, #24]
   16f38:	9809      	ldr	r0, [sp, #36]	; 0x24
   16f3a:	f004 fd2b 	bl	1b994 <__ssprint_r>
   16f3e:	2800      	cmp	r0, #0
   16f40:	d001      	beq.n	16f46 <_svfprintf_r+0x104e>
   16f42:	f7ff f860 	bl	16006 <_svfprintf_r+0x10e>
   16f46:	ae32      	add	r6, sp, #200	; 0xc8
   16f48:	e48e      	b.n	16868 <_svfprintf_r+0x970>
   16f4a:	4bde      	ldr	r3, [pc, #888]	; (172c4 <_svfprintf_r+0x13cc>)
   16f4c:	3401      	adds	r4, #1
   16f4e:	6033      	str	r3, [r6, #0]
   16f50:	2301      	movs	r3, #1
   16f52:	6073      	str	r3, [r6, #4]
   16f54:	687b      	ldr	r3, [r7, #4]
   16f56:	60bc      	str	r4, [r7, #8]
   16f58:	3301      	adds	r3, #1
   16f5a:	607b      	str	r3, [r7, #4]
   16f5c:	2b07      	cmp	r3, #7
   16f5e:	dc7a      	bgt.n	17056 <_svfprintf_r+0x115e>
   16f60:	3608      	adds	r6, #8
   16f62:	2800      	cmp	r0, #0
   16f64:	d107      	bne.n	16f76 <_svfprintf_r+0x107e>
   16f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16f68:	2b00      	cmp	r3, #0
   16f6a:	d104      	bne.n	16f76 <_svfprintf_r+0x107e>
   16f6c:	9b08      	ldr	r3, [sp, #32]
   16f6e:	07db      	lsls	r3, r3, #31
   16f70:	d401      	bmi.n	16f76 <_svfprintf_r+0x107e>
   16f72:	f7ff fbb7 	bl	166e4 <_svfprintf_r+0x7ec>
   16f76:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16f78:	6033      	str	r3, [r6, #0]
   16f7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   16f7c:	1919      	adds	r1, r3, r4
   16f7e:	6073      	str	r3, [r6, #4]
   16f80:	687b      	ldr	r3, [r7, #4]
   16f82:	60b9      	str	r1, [r7, #8]
   16f84:	3301      	adds	r3, #1
   16f86:	607b      	str	r3, [r7, #4]
   16f88:	2b07      	cmp	r3, #7
   16f8a:	dd00      	ble.n	16f8e <_svfprintf_r+0x1096>
   16f8c:	e1f2      	b.n	17374 <_svfprintf_r+0x147c>
   16f8e:	0032      	movs	r2, r6
   16f90:	3208      	adds	r2, #8
   16f92:	2800      	cmp	r0, #0
   16f94:	da00      	bge.n	16f98 <_svfprintf_r+0x10a0>
   16f96:	e1cc      	b.n	17332 <_svfprintf_r+0x143a>
   16f98:	9811      	ldr	r0, [sp, #68]	; 0x44
   16f9a:	3301      	adds	r3, #1
   16f9c:	6010      	str	r0, [r2, #0]
   16f9e:	9814      	ldr	r0, [sp, #80]	; 0x50
   16fa0:	607b      	str	r3, [r7, #4]
   16fa2:	1844      	adds	r4, r0, r1
   16fa4:	6050      	str	r0, [r2, #4]
   16fa6:	60bc      	str	r4, [r7, #8]
   16fa8:	2b07      	cmp	r3, #7
   16faa:	dd00      	ble.n	16fae <_svfprintf_r+0x10b6>
   16fac:	e437      	b.n	1681e <_svfprintf_r+0x926>
   16fae:	3208      	adds	r2, #8
   16fb0:	0016      	movs	r6, r2
   16fb2:	f7ff fb97 	bl	166e4 <_svfprintf_r+0x7ec>
   16fb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16fba:	680b      	ldr	r3, [r1, #0]
   16fbc:	601a      	str	r2, [r3, #0]
   16fbe:	17d2      	asrs	r2, r2, #31
   16fc0:	605a      	str	r2, [r3, #4]
   16fc2:	000b      	movs	r3, r1
   16fc4:	3304      	adds	r3, #4
   16fc6:	930f      	str	r3, [sp, #60]	; 0x3c
   16fc8:	f7fe ffc1 	bl	15f4e <_svfprintf_r+0x56>
   16fcc:	464b      	mov	r3, r9
   16fce:	3101      	adds	r1, #1
   16fd0:	431c      	orrs	r4, r3
   16fd2:	780b      	ldrb	r3, [r1, #0]
   16fd4:	f7fe fff4 	bl	15fc0 <_svfprintf_r+0xc8>
   16fd8:	4bbb      	ldr	r3, [pc, #748]	; (172c8 <_svfprintf_r+0x13d0>)
   16fda:	9311      	str	r3, [sp, #68]	; 0x44
   16fdc:	f7ff f937 	bl	1624e <_svfprintf_r+0x356>
   16fe0:	003a      	movs	r2, r7
   16fe2:	9906      	ldr	r1, [sp, #24]
   16fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
   16fe6:	f004 fcd5 	bl	1b994 <__ssprint_r>
   16fea:	2800      	cmp	r0, #0
   16fec:	d001      	beq.n	16ff2 <_svfprintf_r+0x10fa>
   16fee:	f7ff f80a 	bl	16006 <_svfprintf_r+0x10e>
   16ff2:	68bc      	ldr	r4, [r7, #8]
   16ff4:	ae32      	add	r6, sp, #200	; 0xc8
   16ff6:	e5f1      	b.n	16bdc <_svfprintf_r+0xce4>
   16ff8:	2140      	movs	r1, #64	; 0x40
   16ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
   16ffc:	f003 fbfa 	bl	1a7f4 <_malloc_r>
   17000:	9b06      	ldr	r3, [sp, #24]
   17002:	6018      	str	r0, [r3, #0]
   17004:	6118      	str	r0, [r3, #16]
   17006:	2800      	cmp	r0, #0
   17008:	d100      	bne.n	1700c <_svfprintf_r+0x1114>
   1700a:	e24f      	b.n	174ac <_svfprintf_r+0x15b4>
   1700c:	2340      	movs	r3, #64	; 0x40
   1700e:	9a06      	ldr	r2, [sp, #24]
   17010:	6153      	str	r3, [r2, #20]
   17012:	f7fe ff8e 	bl	15f32 <_svfprintf_r+0x3a>
   17016:	ab23      	add	r3, sp, #140	; 0x8c
   17018:	931b      	str	r3, [sp, #108]	; 0x6c
   1701a:	9304      	str	r3, [sp, #16]
   1701c:	ab20      	add	r3, sp, #128	; 0x80
   1701e:	9303      	str	r3, [sp, #12]
   17020:	ab1f      	add	r3, sp, #124	; 0x7c
   17022:	9302      	str	r3, [sp, #8]
   17024:	4653      	mov	r3, sl
   17026:	9301      	str	r3, [sp, #4]
   17028:	2303      	movs	r3, #3
   1702a:	464a      	mov	r2, r9
   1702c:	9300      	str	r3, [sp, #0]
   1702e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17030:	9b07      	ldr	r3, [sp, #28]
   17032:	f001 ff3d 	bl	18eb0 <_dtoa_r>
   17036:	4655      	mov	r5, sl
   17038:	9011      	str	r0, [sp, #68]	; 0x44
   1703a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1703c:	4698      	mov	r8, r3
   1703e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17040:	44a8      	add	r8, r5
   17042:	2b46      	cmp	r3, #70	; 0x46
   17044:	d000      	beq.n	17048 <_svfprintf_r+0x1150>
   17046:	e72b      	b.n	16ea0 <_svfprintf_r+0xfa8>
   17048:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1704a:	781b      	ldrb	r3, [r3, #0]
   1704c:	2b30      	cmp	r3, #48	; 0x30
   1704e:	d016      	beq.n	1707e <_svfprintf_r+0x1186>
   17050:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17052:	4498      	add	r8, r3
   17054:	e724      	b.n	16ea0 <_svfprintf_r+0xfa8>
   17056:	003a      	movs	r2, r7
   17058:	9906      	ldr	r1, [sp, #24]
   1705a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1705c:	f004 fc9a 	bl	1b994 <__ssprint_r>
   17060:	2800      	cmp	r0, #0
   17062:	d001      	beq.n	17068 <_svfprintf_r+0x1170>
   17064:	f7fe ffcf 	bl	16006 <_svfprintf_r+0x10e>
   17068:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1706a:	68bc      	ldr	r4, [r7, #8]
   1706c:	ae32      	add	r6, sp, #200	; 0xc8
   1706e:	e778      	b.n	16f62 <_svfprintf_r+0x106a>
   17070:	4653      	mov	r3, sl
   17072:	2b00      	cmp	r3, #0
   17074:	d000      	beq.n	17078 <_svfprintf_r+0x1180>
   17076:	e6de      	b.n	16e36 <_svfprintf_r+0xf3e>
   17078:	3301      	adds	r3, #1
   1707a:	469a      	mov	sl, r3
   1707c:	e6db      	b.n	16e36 <_svfprintf_r+0xf3e>
   1707e:	2200      	movs	r2, #0
   17080:	2300      	movs	r3, #0
   17082:	4648      	mov	r0, r9
   17084:	9907      	ldr	r1, [sp, #28]
   17086:	f7fe faa1 	bl	155cc <__aeabi_dcmpeq>
   1708a:	2800      	cmp	r0, #0
   1708c:	d1e0      	bne.n	17050 <_svfprintf_r+0x1158>
   1708e:	2301      	movs	r3, #1
   17090:	1b5b      	subs	r3, r3, r5
   17092:	931f      	str	r3, [sp, #124]	; 0x7c
   17094:	4498      	add	r8, r3
   17096:	e703      	b.n	16ea0 <_svfprintf_r+0xfa8>
   17098:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1709a:	ab32      	add	r3, sp, #200	; 0xc8
   1709c:	1a9b      	subs	r3, r3, r2
   1709e:	930e      	str	r3, [sp, #56]	; 0x38
   170a0:	f7ff f83a 	bl	16118 <_svfprintf_r+0x220>
   170a4:	9811      	ldr	r0, [sp, #68]	; 0x44
   170a6:	f7fe fe47 	bl	15d38 <strlen>
   170aa:	0002      	movs	r2, r0
   170ac:	900e      	str	r0, [sp, #56]	; 0x38
   170ae:	0003      	movs	r3, r0
   170b0:	f7ff f9cd 	bl	1644e <_svfprintf_r+0x556>
   170b4:	232d      	movs	r3, #45	; 0x2d
   170b6:	aa16      	add	r2, sp, #88	; 0x58
   170b8:	77d3      	strb	r3, [r2, #31]
   170ba:	4698      	mov	r8, r3
   170bc:	2300      	movs	r3, #0
   170be:	469a      	mov	sl, r3
   170c0:	f7ff f835 	bl	1612e <_svfprintf_r+0x236>
   170c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   170c6:	9313      	str	r3, [sp, #76]	; 0x4c
   170c8:	1cda      	adds	r2, r3, #3
   170ca:	db02      	blt.n	170d2 <_svfprintf_r+0x11da>
   170cc:	459a      	cmp	sl, r3
   170ce:	db00      	blt.n	170d2 <_svfprintf_r+0x11da>
   170d0:	e70b      	b.n	16eea <_svfprintf_r+0xff2>
   170d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   170d4:	3b02      	subs	r3, #2
   170d6:	9312      	str	r3, [sp, #72]	; 0x48
   170d8:	222c      	movs	r2, #44	; 0x2c
   170da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   170dc:	2148      	movs	r1, #72	; 0x48
   170de:	1e5d      	subs	r5, r3, #1
   170e0:	ab16      	add	r3, sp, #88	; 0x58
   170e2:	189b      	adds	r3, r3, r2
   170e4:	466a      	mov	r2, sp
   170e6:	1852      	adds	r2, r2, r1
   170e8:	7812      	ldrb	r2, [r2, #0]
   170ea:	951f      	str	r5, [sp, #124]	; 0x7c
   170ec:	701a      	strb	r2, [r3, #0]
   170ee:	2d00      	cmp	r5, #0
   170f0:	da00      	bge.n	170f4 <_svfprintf_r+0x11fc>
   170f2:	e1a4      	b.n	1743e <_svfprintf_r+0x1546>
   170f4:	212d      	movs	r1, #45	; 0x2d
   170f6:	232b      	movs	r3, #43	; 0x2b
   170f8:	aa16      	add	r2, sp, #88	; 0x58
   170fa:	1852      	adds	r2, r2, r1
   170fc:	7013      	strb	r3, [r2, #0]
   170fe:	2d09      	cmp	r5, #9
   17100:	dc00      	bgt.n	17104 <_svfprintf_r+0x120c>
   17102:	e14c      	b.n	1739e <_svfprintf_r+0x14a6>
   17104:	aa16      	add	r2, sp, #88	; 0x58
   17106:	233b      	movs	r3, #59	; 0x3b
   17108:	4694      	mov	ip, r2
   1710a:	4463      	add	r3, ip
   1710c:	469a      	mov	sl, r3
   1710e:	46b1      	mov	r9, r6
   17110:	46a0      	mov	r8, r4
   17112:	4656      	mov	r6, sl
   17114:	e000      	b.n	17118 <_svfprintf_r+0x1220>
   17116:	0026      	movs	r6, r4
   17118:	0028      	movs	r0, r5
   1711a:	210a      	movs	r1, #10
   1711c:	f7fb fc66 	bl	129ec <__aeabi_idivmod>
   17120:	1e74      	subs	r4, r6, #1
   17122:	3130      	adds	r1, #48	; 0x30
   17124:	7021      	strb	r1, [r4, #0]
   17126:	0028      	movs	r0, r5
   17128:	210a      	movs	r1, #10
   1712a:	f7fb fb79 	bl	12820 <__divsi3>
   1712e:	0005      	movs	r5, r0
   17130:	2809      	cmp	r0, #9
   17132:	dcf0      	bgt.n	17116 <_svfprintf_r+0x121e>
   17134:	0023      	movs	r3, r4
   17136:	4644      	mov	r4, r8
   17138:	46b0      	mov	r8, r6
   1713a:	464e      	mov	r6, r9
   1713c:	4699      	mov	r9, r3
   1713e:	0003      	movs	r3, r0
   17140:	3330      	adds	r3, #48	; 0x30
   17142:	b2d8      	uxtb	r0, r3
   17144:	4643      	mov	r3, r8
   17146:	3b02      	subs	r3, #2
   17148:	7018      	strb	r0, [r3, #0]
   1714a:	459a      	cmp	sl, r3
   1714c:	d800      	bhi.n	17150 <_svfprintf_r+0x1258>
   1714e:	e1b4      	b.n	174ba <_svfprintf_r+0x15c2>
   17150:	4642      	mov	r2, r8
   17152:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17154:	4645      	mov	r5, r8
   17156:	1a99      	subs	r1, r3, r2
   17158:	2301      	movs	r3, #1
   1715a:	3107      	adds	r1, #7
   1715c:	425b      	negs	r3, r3
   1715e:	e001      	b.n	17164 <_svfprintf_r+0x126c>
   17160:	5ce8      	ldrb	r0, [r5, r3]
   17162:	3301      	adds	r3, #1
   17164:	aa21      	add	r2, sp, #132	; 0x84
   17166:	18d2      	adds	r2, r2, r3
   17168:	70d0      	strb	r0, [r2, #3]
   1716a:	428b      	cmp	r3, r1
   1716c:	d1f8      	bne.n	17160 <_svfprintf_r+0x1268>
   1716e:	a916      	add	r1, sp, #88	; 0x58
   17170:	468c      	mov	ip, r1
   17172:	222e      	movs	r2, #46	; 0x2e
   17174:	464b      	mov	r3, r9
   17176:	4462      	add	r2, ip
   17178:	4694      	mov	ip, r2
   1717a:	1afb      	subs	r3, r7, r3
   1717c:	4463      	add	r3, ip
   1717e:	aa21      	add	r2, sp, #132	; 0x84
   17180:	9914      	ldr	r1, [sp, #80]	; 0x50
   17182:	1a9b      	subs	r3, r3, r2
   17184:	469c      	mov	ip, r3
   17186:	000a      	movs	r2, r1
   17188:	4462      	add	r2, ip
   1718a:	931a      	str	r3, [sp, #104]	; 0x68
   1718c:	920e      	str	r2, [sp, #56]	; 0x38
   1718e:	2901      	cmp	r1, #1
   17190:	dc00      	bgt.n	17194 <_svfprintf_r+0x129c>
   17192:	e145      	b.n	17420 <_svfprintf_r+0x1528>
   17194:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17198:	4694      	mov	ip, r2
   1719a:	4463      	add	r3, ip
   1719c:	001a      	movs	r2, r3
   1719e:	930e      	str	r3, [sp, #56]	; 0x38
   171a0:	43db      	mvns	r3, r3
   171a2:	17db      	asrs	r3, r3, #31
   171a4:	401a      	ands	r2, r3
   171a6:	2300      	movs	r3, #0
   171a8:	9207      	str	r2, [sp, #28]
   171aa:	9313      	str	r3, [sp, #76]	; 0x4c
   171ac:	e6ae      	b.n	16f0c <_svfprintf_r+0x1014>
   171ae:	2301      	movs	r3, #1
   171b0:	425b      	negs	r3, r3
   171b2:	930a      	str	r3, [sp, #40]	; 0x28
   171b4:	f7fe ff2d 	bl	16012 <_svfprintf_r+0x11a>
   171b8:	003a      	movs	r2, r7
   171ba:	9906      	ldr	r1, [sp, #24]
   171bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   171be:	f004 fbe9 	bl	1b994 <__ssprint_r>
   171c2:	2800      	cmp	r0, #0
   171c4:	d001      	beq.n	171ca <_svfprintf_r+0x12d2>
   171c6:	f7fe ff1e 	bl	16006 <_svfprintf_r+0x10e>
   171ca:	68bc      	ldr	r4, [r7, #8]
   171cc:	ae32      	add	r6, sp, #200	; 0xc8
   171ce:	e43c      	b.n	16a4a <_svfprintf_r+0xb52>
   171d0:	003a      	movs	r2, r7
   171d2:	9906      	ldr	r1, [sp, #24]
   171d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   171d6:	f004 fbdd 	bl	1b994 <__ssprint_r>
   171da:	2800      	cmp	r0, #0
   171dc:	d001      	beq.n	171e2 <_svfprintf_r+0x12ea>
   171de:	f7fe ff12 	bl	16006 <_svfprintf_r+0x10e>
   171e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   171e4:	68bc      	ldr	r4, [r7, #8]
   171e6:	ae32      	add	r6, sp, #200	; 0xc8
   171e8:	e56a      	b.n	16cc0 <_svfprintf_r+0xdc8>
   171ea:	003a      	movs	r2, r7
   171ec:	9906      	ldr	r1, [sp, #24]
   171ee:	9809      	ldr	r0, [sp, #36]	; 0x24
   171f0:	f004 fbd0 	bl	1b994 <__ssprint_r>
   171f4:	2800      	cmp	r0, #0
   171f6:	d001      	beq.n	171fc <_svfprintf_r+0x1304>
   171f8:	f7fe ff05 	bl	16006 <_svfprintf_r+0x10e>
   171fc:	68bc      	ldr	r4, [r7, #8]
   171fe:	ae32      	add	r6, sp, #200	; 0xc8
   17200:	e557      	b.n	16cb2 <_svfprintf_r+0xdba>
   17202:	003a      	movs	r2, r7
   17204:	9906      	ldr	r1, [sp, #24]
   17206:	9809      	ldr	r0, [sp, #36]	; 0x24
   17208:	f004 fbc4 	bl	1b994 <__ssprint_r>
   1720c:	2800      	cmp	r0, #0
   1720e:	d001      	beq.n	17214 <_svfprintf_r+0x131c>
   17210:	f7fe fef9 	bl	16006 <_svfprintf_r+0x10e>
   17214:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17216:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17218:	68bc      	ldr	r4, [r7, #8]
   1721a:	1a9b      	subs	r3, r3, r2
   1721c:	ae32      	add	r6, sp, #200	; 0xc8
   1721e:	e56a      	b.n	16cf6 <_svfprintf_r+0xdfe>
   17220:	4653      	mov	r3, sl
   17222:	9307      	str	r3, [sp, #28]
   17224:	2b06      	cmp	r3, #6
   17226:	d901      	bls.n	1722c <_svfprintf_r+0x1334>
   17228:	2306      	movs	r3, #6
   1722a:	9307      	str	r3, [sp, #28]
   1722c:	9b07      	ldr	r3, [sp, #28]
   1722e:	950f      	str	r5, [sp, #60]	; 0x3c
   17230:	930e      	str	r3, [sp, #56]	; 0x38
   17232:	2300      	movs	r3, #0
   17234:	4698      	mov	r8, r3
   17236:	469a      	mov	sl, r3
   17238:	9313      	str	r3, [sp, #76]	; 0x4c
   1723a:	4b24      	ldr	r3, [pc, #144]	; (172cc <_svfprintf_r+0x13d4>)
   1723c:	9408      	str	r4, [sp, #32]
   1723e:	9311      	str	r3, [sp, #68]	; 0x44
   17240:	f7fe ff78 	bl	16134 <_svfprintf_r+0x23c>
   17244:	2320      	movs	r3, #32
   17246:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17248:	439a      	bics	r2, r3
   1724a:	3b1a      	subs	r3, #26
   1724c:	920e      	str	r2, [sp, #56]	; 0x38
   1724e:	469a      	mov	sl, r3
   17250:	e5f1      	b.n	16e36 <_svfprintf_r+0xf3e>
   17252:	ab23      	add	r3, sp, #140	; 0x8c
   17254:	931b      	str	r3, [sp, #108]	; 0x6c
   17256:	9304      	str	r3, [sp, #16]
   17258:	ab20      	add	r3, sp, #128	; 0x80
   1725a:	9303      	str	r3, [sp, #12]
   1725c:	ab1f      	add	r3, sp, #124	; 0x7c
   1725e:	9302      	str	r3, [sp, #8]
   17260:	4653      	mov	r3, sl
   17262:	9301      	str	r3, [sp, #4]
   17264:	2303      	movs	r3, #3
   17266:	464a      	mov	r2, r9
   17268:	9300      	str	r3, [sp, #0]
   1726a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1726c:	9b07      	ldr	r3, [sp, #28]
   1726e:	f001 fe1f 	bl	18eb0 <_dtoa_r>
   17272:	0003      	movs	r3, r0
   17274:	4453      	add	r3, sl
   17276:	9011      	str	r0, [sp, #68]	; 0x44
   17278:	4698      	mov	r8, r3
   1727a:	4655      	mov	r5, sl
   1727c:	e6e4      	b.n	17048 <_svfprintf_r+0x1150>
   1727e:	232d      	movs	r3, #45	; 0x2d
   17280:	aa16      	add	r2, sp, #88	; 0x58
   17282:	77d3      	strb	r3, [r2, #31]
   17284:	4698      	mov	r8, r3
   17286:	f7fe ffdb 	bl	16240 <_svfprintf_r+0x348>
   1728a:	2280      	movs	r2, #128	; 0x80
   1728c:	0612      	lsls	r2, r2, #24
   1728e:	4694      	mov	ip, r2
   17290:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17292:	4699      	mov	r9, r3
   17294:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17296:	4463      	add	r3, ip
   17298:	9307      	str	r3, [sp, #28]
   1729a:	232d      	movs	r3, #45	; 0x2d
   1729c:	9310      	str	r3, [sp, #64]	; 0x40
   1729e:	e5d7      	b.n	16e50 <_svfprintf_r+0xf58>
   172a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   172a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   172a4:	4694      	mov	ip, r2
   172a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   172a8:	4463      	add	r3, ip
   172aa:	930e      	str	r3, [sp, #56]	; 0x38
   172ac:	2a00      	cmp	r2, #0
   172ae:	dc00      	bgt.n	172b2 <_svfprintf_r+0x13ba>
   172b0:	e0ce      	b.n	17450 <_svfprintf_r+0x1558>
   172b2:	001a      	movs	r2, r3
   172b4:	43db      	mvns	r3, r3
   172b6:	17db      	asrs	r3, r3, #31
   172b8:	401a      	ands	r2, r3
   172ba:	2367      	movs	r3, #103	; 0x67
   172bc:	9207      	str	r2, [sp, #28]
   172be:	9312      	str	r3, [sp, #72]	; 0x48
   172c0:	e624      	b.n	16f0c <_svfprintf_r+0x1014>
   172c2:	46c0      	nop			; (mov r8, r8)
   172c4:	0001dbd8 	.word	0x0001dbd8
   172c8:	0001e0a4 	.word	0x0001e0a4
   172cc:	0001e0d8 	.word	0x0001e0d8
   172d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   172d2:	9313      	str	r3, [sp, #76]	; 0x4c
   172d4:	2b00      	cmp	r3, #0
   172d6:	dc00      	bgt.n	172da <_svfprintf_r+0x13e2>
   172d8:	e0d5      	b.n	17486 <_svfprintf_r+0x158e>
   172da:	4652      	mov	r2, sl
   172dc:	2a00      	cmp	r2, #0
   172de:	d000      	beq.n	172e2 <_svfprintf_r+0x13ea>
   172e0:	e092      	b.n	17408 <_svfprintf_r+0x1510>
   172e2:	07e2      	lsls	r2, r4, #31
   172e4:	d500      	bpl.n	172e8 <_svfprintf_r+0x13f0>
   172e6:	e08f      	b.n	17408 <_svfprintf_r+0x1510>
   172e8:	9307      	str	r3, [sp, #28]
   172ea:	930e      	str	r3, [sp, #56]	; 0x38
   172ec:	e60e      	b.n	16f0c <_svfprintf_r+0x1014>
   172ee:	ab16      	add	r3, sp, #88	; 0x58
   172f0:	7fdb      	ldrb	r3, [r3, #31]
   172f2:	950f      	str	r5, [sp, #60]	; 0x3c
   172f4:	4698      	mov	r8, r3
   172f6:	4653      	mov	r3, sl
   172f8:	9307      	str	r3, [sp, #28]
   172fa:	930e      	str	r3, [sp, #56]	; 0x38
   172fc:	2300      	movs	r3, #0
   172fe:	9408      	str	r4, [sp, #32]
   17300:	469a      	mov	sl, r3
   17302:	9313      	str	r3, [sp, #76]	; 0x4c
   17304:	f7fe ff10 	bl	16128 <_svfprintf_r+0x230>
   17308:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1730a:	4698      	mov	r8, r3
   1730c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1730e:	44a8      	add	r8, r5
   17310:	2b47      	cmp	r3, #71	; 0x47
   17312:	d000      	beq.n	17316 <_svfprintf_r+0x141e>
   17314:	e5c4      	b.n	16ea0 <_svfprintf_r+0xfa8>
   17316:	07e3      	lsls	r3, r4, #31
   17318:	d500      	bpl.n	1731c <_svfprintf_r+0x1424>
   1731a:	e68e      	b.n	1703a <_svfprintf_r+0x1142>
   1731c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1731e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17320:	1a9b      	subs	r3, r3, r2
   17322:	9314      	str	r3, [sp, #80]	; 0x50
   17324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17326:	2b47      	cmp	r3, #71	; 0x47
   17328:	d100      	bne.n	1732c <_svfprintf_r+0x1434>
   1732a:	e6cb      	b.n	170c4 <_svfprintf_r+0x11cc>
   1732c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1732e:	9313      	str	r3, [sp, #76]	; 0x4c
   17330:	e6d2      	b.n	170d8 <_svfprintf_r+0x11e0>
   17332:	4244      	negs	r4, r0
   17334:	3010      	adds	r0, #16
   17336:	db00      	blt.n	1733a <_svfprintf_r+0x1442>
   17338:	e0d0      	b.n	174dc <_svfprintf_r+0x15e4>
   1733a:	486e      	ldr	r0, [pc, #440]	; (174f4 <_svfprintf_r+0x15fc>)
   1733c:	2610      	movs	r6, #16
   1733e:	0005      	movs	r5, r0
   17340:	e003      	b.n	1734a <_svfprintf_r+0x1452>
   17342:	3208      	adds	r2, #8
   17344:	3c10      	subs	r4, #16
   17346:	2c10      	cmp	r4, #16
   17348:	dd38      	ble.n	173bc <_svfprintf_r+0x14c4>
   1734a:	3110      	adds	r1, #16
   1734c:	3301      	adds	r3, #1
   1734e:	6015      	str	r5, [r2, #0]
   17350:	6056      	str	r6, [r2, #4]
   17352:	60b9      	str	r1, [r7, #8]
   17354:	607b      	str	r3, [r7, #4]
   17356:	2b07      	cmp	r3, #7
   17358:	ddf3      	ble.n	17342 <_svfprintf_r+0x144a>
   1735a:	003a      	movs	r2, r7
   1735c:	9906      	ldr	r1, [sp, #24]
   1735e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17360:	f004 fb18 	bl	1b994 <__ssprint_r>
   17364:	2800      	cmp	r0, #0
   17366:	d001      	beq.n	1736c <_svfprintf_r+0x1474>
   17368:	f7fe fe4d 	bl	16006 <_svfprintf_r+0x10e>
   1736c:	68b9      	ldr	r1, [r7, #8]
   1736e:	687b      	ldr	r3, [r7, #4]
   17370:	aa32      	add	r2, sp, #200	; 0xc8
   17372:	e7e7      	b.n	17344 <_svfprintf_r+0x144c>
   17374:	003a      	movs	r2, r7
   17376:	9906      	ldr	r1, [sp, #24]
   17378:	9809      	ldr	r0, [sp, #36]	; 0x24
   1737a:	f004 fb0b 	bl	1b994 <__ssprint_r>
   1737e:	2800      	cmp	r0, #0
   17380:	d001      	beq.n	17386 <_svfprintf_r+0x148e>
   17382:	f7fe fe40 	bl	16006 <_svfprintf_r+0x10e>
   17386:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17388:	68b9      	ldr	r1, [r7, #8]
   1738a:	687b      	ldr	r3, [r7, #4]
   1738c:	aa32      	add	r2, sp, #200	; 0xc8
   1738e:	e600      	b.n	16f92 <_svfprintf_r+0x109a>
   17390:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17394:	4694      	mov	ip, r2
   17396:	4463      	add	r3, ip
   17398:	001a      	movs	r2, r3
   1739a:	930e      	str	r3, [sp, #56]	; 0x38
   1739c:	e78a      	b.n	172b4 <_svfprintf_r+0x13bc>
   1739e:	212e      	movs	r1, #46	; 0x2e
   173a0:	2330      	movs	r3, #48	; 0x30
   173a2:	aa16      	add	r2, sp, #88	; 0x58
   173a4:	1852      	adds	r2, r2, r1
   173a6:	7013      	strb	r3, [r2, #0]
   173a8:	002b      	movs	r3, r5
   173aa:	aa16      	add	r2, sp, #88	; 0x58
   173ac:	3101      	adds	r1, #1
   173ae:	3330      	adds	r3, #48	; 0x30
   173b0:	1852      	adds	r2, r2, r1
   173b2:	7013      	strb	r3, [r2, #0]
   173b4:	ab22      	add	r3, sp, #136	; 0x88
   173b6:	e6e2      	b.n	1717e <_svfprintf_r+0x1286>
   173b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   173ba:	e585      	b.n	16ec8 <_svfprintf_r+0xfd0>
   173bc:	46a9      	mov	r9, r5
   173be:	4648      	mov	r0, r9
   173c0:	1909      	adds	r1, r1, r4
   173c2:	3301      	adds	r3, #1
   173c4:	6010      	str	r0, [r2, #0]
   173c6:	6054      	str	r4, [r2, #4]
   173c8:	60b9      	str	r1, [r7, #8]
   173ca:	3208      	adds	r2, #8
   173cc:	607b      	str	r3, [r7, #4]
   173ce:	2b07      	cmp	r3, #7
   173d0:	dc00      	bgt.n	173d4 <_svfprintf_r+0x14dc>
   173d2:	e5e1      	b.n	16f98 <_svfprintf_r+0x10a0>
   173d4:	003a      	movs	r2, r7
   173d6:	9906      	ldr	r1, [sp, #24]
   173d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   173da:	f004 fadb 	bl	1b994 <__ssprint_r>
   173de:	2800      	cmp	r0, #0
   173e0:	d001      	beq.n	173e6 <_svfprintf_r+0x14ee>
   173e2:	f7fe fe10 	bl	16006 <_svfprintf_r+0x10e>
   173e6:	68b9      	ldr	r1, [r7, #8]
   173e8:	687b      	ldr	r3, [r7, #4]
   173ea:	aa32      	add	r2, sp, #200	; 0xc8
   173ec:	e5d4      	b.n	16f98 <_svfprintf_r+0x10a0>
   173ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   173f0:	2b00      	cmp	r3, #0
   173f2:	db38      	blt.n	17466 <_svfprintf_r+0x156e>
   173f4:	ab16      	add	r3, sp, #88	; 0x58
   173f6:	7fdb      	ldrb	r3, [r3, #31]
   173f8:	4698      	mov	r8, r3
   173fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   173fc:	2b47      	cmp	r3, #71	; 0x47
   173fe:	dc2e      	bgt.n	1745e <_svfprintf_r+0x1566>
   17400:	4b3d      	ldr	r3, [pc, #244]	; (174f8 <_svfprintf_r+0x1600>)
   17402:	9311      	str	r3, [sp, #68]	; 0x44
   17404:	f7fe ff23 	bl	1624e <_svfprintf_r+0x356>
   17408:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1740a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1740c:	4694      	mov	ip, r2
   1740e:	4463      	add	r3, ip
   17410:	4453      	add	r3, sl
   17412:	001a      	movs	r2, r3
   17414:	930e      	str	r3, [sp, #56]	; 0x38
   17416:	43db      	mvns	r3, r3
   17418:	17db      	asrs	r3, r3, #31
   1741a:	401a      	ands	r2, r3
   1741c:	9207      	str	r2, [sp, #28]
   1741e:	e575      	b.n	16f0c <_svfprintf_r+0x1014>
   17420:	2301      	movs	r3, #1
   17422:	4023      	ands	r3, r4
   17424:	9313      	str	r3, [sp, #76]	; 0x4c
   17426:	d000      	beq.n	1742a <_svfprintf_r+0x1532>
   17428:	e6b4      	b.n	17194 <_svfprintf_r+0x129c>
   1742a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1742c:	43d3      	mvns	r3, r2
   1742e:	17db      	asrs	r3, r3, #31
   17430:	401a      	ands	r2, r3
   17432:	9207      	str	r2, [sp, #28]
   17434:	e56a      	b.n	16f0c <_svfprintf_r+0x1014>
   17436:	4a2f      	ldr	r2, [pc, #188]	; (174f4 <_svfprintf_r+0x15fc>)
   17438:	687b      	ldr	r3, [r7, #4]
   1743a:	4691      	mov	r9, r2
   1743c:	e42d      	b.n	16c9a <_svfprintf_r+0xda2>
   1743e:	2301      	movs	r3, #1
   17440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17442:	391b      	subs	r1, #27
   17444:	1a9d      	subs	r5, r3, r2
   17446:	aa16      	add	r2, sp, #88	; 0x58
   17448:	332c      	adds	r3, #44	; 0x2c
   1744a:	1852      	adds	r2, r2, r1
   1744c:	7013      	strb	r3, [r2, #0]
   1744e:	e656      	b.n	170fe <_svfprintf_r+0x1206>
   17450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17452:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17454:	1a98      	subs	r0, r3, r2
   17456:	1c43      	adds	r3, r0, #1
   17458:	001a      	movs	r2, r3
   1745a:	930e      	str	r3, [sp, #56]	; 0x38
   1745c:	e72a      	b.n	172b4 <_svfprintf_r+0x13bc>
   1745e:	4b27      	ldr	r3, [pc, #156]	; (174fc <_svfprintf_r+0x1604>)
   17460:	9311      	str	r3, [sp, #68]	; 0x44
   17462:	f7fe fef4 	bl	1624e <_svfprintf_r+0x356>
   17466:	232d      	movs	r3, #45	; 0x2d
   17468:	aa16      	add	r2, sp, #88	; 0x58
   1746a:	77d3      	strb	r3, [r2, #31]
   1746c:	4698      	mov	r8, r3
   1746e:	e7c4      	b.n	173fa <_svfprintf_r+0x1502>
   17470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17472:	1d1a      	adds	r2, r3, #4
   17474:	681b      	ldr	r3, [r3, #0]
   17476:	469a      	mov	sl, r3
   17478:	2b00      	cmp	r3, #0
   1747a:	db36      	blt.n	174ea <_svfprintf_r+0x15f2>
   1747c:	784b      	ldrb	r3, [r1, #1]
   1747e:	920f      	str	r2, [sp, #60]	; 0x3c
   17480:	4659      	mov	r1, fp
   17482:	f7fe fd9d 	bl	15fc0 <_svfprintf_r+0xc8>
   17486:	4653      	mov	r3, sl
   17488:	2b00      	cmp	r3, #0
   1748a:	d101      	bne.n	17490 <_svfprintf_r+0x1598>
   1748c:	07e3      	lsls	r3, r4, #31
   1748e:	d503      	bpl.n	17498 <_svfprintf_r+0x15a0>
   17490:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17492:	1c58      	adds	r0, r3, #1
   17494:	0003      	movs	r3, r0
   17496:	e7bb      	b.n	17410 <_svfprintf_r+0x1518>
   17498:	2301      	movs	r3, #1
   1749a:	e725      	b.n	172e8 <_svfprintf_r+0x13f0>
   1749c:	ab16      	add	r3, sp, #88	; 0x58
   1749e:	77d8      	strb	r0, [r3, #31]
   174a0:	f7fe ff6c 	bl	1637c <_svfprintf_r+0x484>
   174a4:	ab16      	add	r3, sp, #88	; 0x58
   174a6:	77d8      	strb	r0, [r3, #31]
   174a8:	f7ff f814 	bl	164d4 <_svfprintf_r+0x5dc>
   174ac:	230c      	movs	r3, #12
   174ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   174b0:	6013      	str	r3, [r2, #0]
   174b2:	3b0d      	subs	r3, #13
   174b4:	930a      	str	r3, [sp, #40]	; 0x28
   174b6:	f7fe fdac 	bl	16012 <_svfprintf_r+0x11a>
   174ba:	aa16      	add	r2, sp, #88	; 0x58
   174bc:	232e      	movs	r3, #46	; 0x2e
   174be:	4694      	mov	ip, r2
   174c0:	4463      	add	r3, ip
   174c2:	e65c      	b.n	1717e <_svfprintf_r+0x1286>
   174c4:	ab16      	add	r3, sp, #88	; 0x58
   174c6:	77d8      	strb	r0, [r3, #31]
   174c8:	f7fe fe85 	bl	161d6 <_svfprintf_r+0x2de>
   174cc:	ab16      	add	r3, sp, #88	; 0x58
   174ce:	77d8      	strb	r0, [r3, #31]
   174d0:	f7fe fddd 	bl	1608e <_svfprintf_r+0x196>
   174d4:	ab16      	add	r3, sp, #88	; 0x58
   174d6:	77d8      	strb	r0, [r3, #31]
   174d8:	f7ff f87d 	bl	165d6 <_svfprintf_r+0x6de>
   174dc:	4805      	ldr	r0, [pc, #20]	; (174f4 <_svfprintf_r+0x15fc>)
   174de:	4681      	mov	r9, r0
   174e0:	e76d      	b.n	173be <_svfprintf_r+0x14c6>
   174e2:	ab16      	add	r3, sp, #88	; 0x58
   174e4:	77d8      	strb	r0, [r3, #31]
   174e6:	f7fe ff79 	bl	163dc <_svfprintf_r+0x4e4>
   174ea:	2301      	movs	r3, #1
   174ec:	425b      	negs	r3, r3
   174ee:	469a      	mov	sl, r3
   174f0:	e7c4      	b.n	1747c <_svfprintf_r+0x1584>
   174f2:	46c0      	nop			; (mov r8, r8)
   174f4:	0001e0f0 	.word	0x0001e0f0
   174f8:	0001e0a8 	.word	0x0001e0a8
   174fc:	0001e0ac 	.word	0x0001e0ac

00017500 <_vfprintf_r>:
   17500:	b5f0      	push	{r4, r5, r6, r7, lr}
   17502:	46de      	mov	lr, fp
   17504:	464e      	mov	r6, r9
   17506:	4645      	mov	r5, r8
   17508:	4657      	mov	r7, sl
   1750a:	b5e0      	push	{r5, r6, r7, lr}
   1750c:	b0c3      	sub	sp, #268	; 0x10c
   1750e:	4689      	mov	r9, r1
   17510:	0014      	movs	r4, r2
   17512:	001d      	movs	r5, r3
   17514:	930f      	str	r3, [sp, #60]	; 0x3c
   17516:	0006      	movs	r6, r0
   17518:	9006      	str	r0, [sp, #24]
   1751a:	f003 f8d3 	bl	1a6c4 <_localeconv_r>
   1751e:	6803      	ldr	r3, [r0, #0]
   17520:	0018      	movs	r0, r3
   17522:	9318      	str	r3, [sp, #96]	; 0x60
   17524:	f7fe fc08 	bl	15d38 <strlen>
   17528:	9017      	str	r0, [sp, #92]	; 0x5c
   1752a:	2e00      	cmp	r6, #0
   1752c:	d004      	beq.n	17538 <_vfprintf_r+0x38>
   1752e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   17530:	9307      	str	r3, [sp, #28]
   17532:	2b00      	cmp	r3, #0
   17534:	d100      	bne.n	17538 <_vfprintf_r+0x38>
   17536:	e0a7      	b.n	17688 <_vfprintf_r+0x188>
   17538:	464b      	mov	r3, r9
   1753a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1753c:	07db      	lsls	r3, r3, #31
   1753e:	d478      	bmi.n	17632 <_vfprintf_r+0x132>
   17540:	464b      	mov	r3, r9
   17542:	210c      	movs	r1, #12
   17544:	5e59      	ldrsh	r1, [r3, r1]
   17546:	b28b      	uxth	r3, r1
   17548:	059a      	lsls	r2, r3, #22
   1754a:	d56e      	bpl.n	1762a <_vfprintf_r+0x12a>
   1754c:	2280      	movs	r2, #128	; 0x80
   1754e:	0192      	lsls	r2, r2, #6
   17550:	4213      	tst	r3, r2
   17552:	d109      	bne.n	17568 <_vfprintf_r+0x68>
   17554:	430a      	orrs	r2, r1
   17556:	464b      	mov	r3, r9
   17558:	4649      	mov	r1, r9
   1755a:	819a      	strh	r2, [r3, #12]
   1755c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1755e:	4bcc      	ldr	r3, [pc, #816]	; (17890 <_vfprintf_r+0x390>)
   17560:	400b      	ands	r3, r1
   17562:	4649      	mov	r1, r9
   17564:	664b      	str	r3, [r1, #100]	; 0x64
   17566:	b293      	uxth	r3, r2
   17568:	071a      	lsls	r2, r3, #28
   1756a:	d567      	bpl.n	1763c <_vfprintf_r+0x13c>
   1756c:	464a      	mov	r2, r9
   1756e:	6912      	ldr	r2, [r2, #16]
   17570:	2a00      	cmp	r2, #0
   17572:	d063      	beq.n	1763c <_vfprintf_r+0x13c>
   17574:	221a      	movs	r2, #26
   17576:	401a      	ands	r2, r3
   17578:	2a0a      	cmp	r2, #10
   1757a:	d100      	bne.n	1757e <_vfprintf_r+0x7e>
   1757c:	e088      	b.n	17690 <_vfprintf_r+0x190>
   1757e:	ab32      	add	r3, sp, #200	; 0xc8
   17580:	9325      	str	r3, [sp, #148]	; 0x94
   17582:	2300      	movs	r3, #0
   17584:	46cb      	mov	fp, r9
   17586:	af25      	add	r7, sp, #148	; 0x94
   17588:	60bb      	str	r3, [r7, #8]
   1758a:	607b      	str	r3, [r7, #4]
   1758c:	9407      	str	r4, [sp, #28]
   1758e:	9314      	str	r3, [sp, #80]	; 0x50
   17590:	9316      	str	r3, [sp, #88]	; 0x58
   17592:	9315      	str	r3, [sp, #84]	; 0x54
   17594:	ae32      	add	r6, sp, #200	; 0xc8
   17596:	9319      	str	r3, [sp, #100]	; 0x64
   17598:	931a      	str	r3, [sp, #104]	; 0x68
   1759a:	930a      	str	r3, [sp, #40]	; 0x28
   1759c:	9c07      	ldr	r4, [sp, #28]
   1759e:	7823      	ldrb	r3, [r4, #0]
   175a0:	2b00      	cmp	r3, #0
   175a2:	d101      	bne.n	175a8 <_vfprintf_r+0xa8>
   175a4:	f000 fd9e 	bl	180e4 <_vfprintf_r+0xbe4>
   175a8:	2b25      	cmp	r3, #37	; 0x25
   175aa:	d103      	bne.n	175b4 <_vfprintf_r+0xb4>
   175ac:	f000 fd9a 	bl	180e4 <_vfprintf_r+0xbe4>
   175b0:	2b25      	cmp	r3, #37	; 0x25
   175b2:	d003      	beq.n	175bc <_vfprintf_r+0xbc>
   175b4:	3401      	adds	r4, #1
   175b6:	7823      	ldrb	r3, [r4, #0]
   175b8:	2b00      	cmp	r3, #0
   175ba:	d1f9      	bne.n	175b0 <_vfprintf_r+0xb0>
   175bc:	9b07      	ldr	r3, [sp, #28]
   175be:	1ae5      	subs	r5, r4, r3
   175c0:	d010      	beq.n	175e4 <_vfprintf_r+0xe4>
   175c2:	9b07      	ldr	r3, [sp, #28]
   175c4:	6075      	str	r5, [r6, #4]
   175c6:	6033      	str	r3, [r6, #0]
   175c8:	68bb      	ldr	r3, [r7, #8]
   175ca:	195b      	adds	r3, r3, r5
   175cc:	60bb      	str	r3, [r7, #8]
   175ce:	687b      	ldr	r3, [r7, #4]
   175d0:	3301      	adds	r3, #1
   175d2:	607b      	str	r3, [r7, #4]
   175d4:	2b07      	cmp	r3, #7
   175d6:	dc4c      	bgt.n	17672 <_vfprintf_r+0x172>
   175d8:	3608      	adds	r6, #8
   175da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   175dc:	469c      	mov	ip, r3
   175de:	44ac      	add	ip, r5
   175e0:	4663      	mov	r3, ip
   175e2:	930a      	str	r3, [sp, #40]	; 0x28
   175e4:	7823      	ldrb	r3, [r4, #0]
   175e6:	2b00      	cmp	r3, #0
   175e8:	d101      	bne.n	175ee <_vfprintf_r+0xee>
   175ea:	f000 fc99 	bl	17f20 <_vfprintf_r+0xa20>
   175ee:	1c63      	adds	r3, r4, #1
   175f0:	9307      	str	r3, [sp, #28]
   175f2:	2300      	movs	r3, #0
   175f4:	aa16      	add	r2, sp, #88	; 0x58
   175f6:	77d3      	strb	r3, [r2, #31]
   175f8:	2201      	movs	r2, #1
   175fa:	4252      	negs	r2, r2
   175fc:	4692      	mov	sl, r2
   175fe:	2200      	movs	r2, #0
   17600:	920b      	str	r2, [sp, #44]	; 0x2c
   17602:	3220      	adds	r2, #32
   17604:	4691      	mov	r9, r2
   17606:	3220      	adds	r2, #32
   17608:	7863      	ldrb	r3, [r4, #1]
   1760a:	2100      	movs	r1, #0
   1760c:	2000      	movs	r0, #0
   1760e:	2400      	movs	r4, #0
   17610:	4694      	mov	ip, r2
   17612:	9a07      	ldr	r2, [sp, #28]
   17614:	3201      	adds	r2, #1
   17616:	9207      	str	r2, [sp, #28]
   17618:	001a      	movs	r2, r3
   1761a:	3a20      	subs	r2, #32
   1761c:	2a58      	cmp	r2, #88	; 0x58
   1761e:	d900      	bls.n	17622 <_vfprintf_r+0x122>
   17620:	e2e7      	b.n	17bf2 <_vfprintf_r+0x6f2>
   17622:	4d9c      	ldr	r5, [pc, #624]	; (17894 <_vfprintf_r+0x394>)
   17624:	0092      	lsls	r2, r2, #2
   17626:	58aa      	ldr	r2, [r5, r2]
   17628:	4697      	mov	pc, r2
   1762a:	464b      	mov	r3, r9
   1762c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1762e:	f003 f85b 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   17632:	464b      	mov	r3, r9
   17634:	210c      	movs	r1, #12
   17636:	5e59      	ldrsh	r1, [r3, r1]
   17638:	b28b      	uxth	r3, r1
   1763a:	e787      	b.n	1754c <_vfprintf_r+0x4c>
   1763c:	4649      	mov	r1, r9
   1763e:	9806      	ldr	r0, [sp, #24]
   17640:	f001 fb0e 	bl	18c60 <__swsetup_r>
   17644:	464b      	mov	r3, r9
   17646:	2800      	cmp	r0, #0
   17648:	d03a      	beq.n	176c0 <_vfprintf_r+0x1c0>
   1764a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1764c:	07db      	lsls	r3, r3, #31
   1764e:	d405      	bmi.n	1765c <_vfprintf_r+0x15c>
   17650:	464b      	mov	r3, r9
   17652:	899b      	ldrh	r3, [r3, #12]
   17654:	059b      	lsls	r3, r3, #22
   17656:	d401      	bmi.n	1765c <_vfprintf_r+0x15c>
   17658:	f000 ffcf 	bl	185fa <_vfprintf_r+0x10fa>
   1765c:	2301      	movs	r3, #1
   1765e:	425b      	negs	r3, r3
   17660:	930a      	str	r3, [sp, #40]	; 0x28
   17662:	980a      	ldr	r0, [sp, #40]	; 0x28
   17664:	b043      	add	sp, #268	; 0x10c
   17666:	bc3c      	pop	{r2, r3, r4, r5}
   17668:	4690      	mov	r8, r2
   1766a:	4699      	mov	r9, r3
   1766c:	46a2      	mov	sl, r4
   1766e:	46ab      	mov	fp, r5
   17670:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17672:	003a      	movs	r2, r7
   17674:	4659      	mov	r1, fp
   17676:	9806      	ldr	r0, [sp, #24]
   17678:	f004 fa5e 	bl	1bb38 <__sprint_r>
   1767c:	2800      	cmp	r0, #0
   1767e:	d001      	beq.n	17684 <_vfprintf_r+0x184>
   17680:	f000 fcce 	bl	18020 <_vfprintf_r+0xb20>
   17684:	ae32      	add	r6, sp, #200	; 0xc8
   17686:	e7a8      	b.n	175da <_vfprintf_r+0xda>
   17688:	9806      	ldr	r0, [sp, #24]
   1768a:	f002 fcd7 	bl	1a03c <__sinit>
   1768e:	e753      	b.n	17538 <_vfprintf_r+0x38>
   17690:	464a      	mov	r2, r9
   17692:	210e      	movs	r1, #14
   17694:	5e52      	ldrsh	r2, [r2, r1]
   17696:	2a00      	cmp	r2, #0
   17698:	da00      	bge.n	1769c <_vfprintf_r+0x19c>
   1769a:	e770      	b.n	1757e <_vfprintf_r+0x7e>
   1769c:	464a      	mov	r2, r9
   1769e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   176a0:	07d2      	lsls	r2, r2, #31
   176a2:	d405      	bmi.n	176b0 <_vfprintf_r+0x1b0>
   176a4:	059b      	lsls	r3, r3, #22
   176a6:	d403      	bmi.n	176b0 <_vfprintf_r+0x1b0>
   176a8:	464b      	mov	r3, r9
   176aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   176ac:	f003 f81e 	bl	1a6ec <__retarget_lock_release_recursive>
   176b0:	002b      	movs	r3, r5
   176b2:	0022      	movs	r2, r4
   176b4:	4649      	mov	r1, r9
   176b6:	9806      	ldr	r0, [sp, #24]
   176b8:	f001 fa8e 	bl	18bd8 <__sbprintf>
   176bc:	900a      	str	r0, [sp, #40]	; 0x28
   176be:	e7d0      	b.n	17662 <_vfprintf_r+0x162>
   176c0:	899b      	ldrh	r3, [r3, #12]
   176c2:	e757      	b.n	17574 <_vfprintf_r+0x74>
   176c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   176c6:	920f      	str	r2, [sp, #60]	; 0x3c
   176c8:	425b      	negs	r3, r3
   176ca:	930b      	str	r3, [sp, #44]	; 0x2c
   176cc:	2304      	movs	r3, #4
   176ce:	431c      	orrs	r4, r3
   176d0:	9b07      	ldr	r3, [sp, #28]
   176d2:	781b      	ldrb	r3, [r3, #0]
   176d4:	e79d      	b.n	17612 <_vfprintf_r+0x112>
   176d6:	9b07      	ldr	r3, [sp, #28]
   176d8:	2101      	movs	r1, #1
   176da:	781b      	ldrb	r3, [r3, #0]
   176dc:	202b      	movs	r0, #43	; 0x2b
   176de:	e798      	b.n	17612 <_vfprintf_r+0x112>
   176e0:	9b07      	ldr	r3, [sp, #28]
   176e2:	1c5a      	adds	r2, r3, #1
   176e4:	781b      	ldrb	r3, [r3, #0]
   176e6:	4690      	mov	r8, r2
   176e8:	2b2a      	cmp	r3, #42	; 0x2a
   176ea:	d101      	bne.n	176f0 <_vfprintf_r+0x1f0>
   176ec:	f001 fa38 	bl	18b60 <_vfprintf_r+0x1660>
   176f0:	001a      	movs	r2, r3
   176f2:	2500      	movs	r5, #0
   176f4:	3a30      	subs	r2, #48	; 0x30
   176f6:	46aa      	mov	sl, r5
   176f8:	2a09      	cmp	r2, #9
   176fa:	d901      	bls.n	17700 <_vfprintf_r+0x200>
   176fc:	f001 f96d 	bl	189da <_vfprintf_r+0x14da>
   17700:	0025      	movs	r5, r4
   17702:	4643      	mov	r3, r8
   17704:	4654      	mov	r4, sl
   17706:	4688      	mov	r8, r1
   17708:	4682      	mov	sl, r0
   1770a:	00a1      	lsls	r1, r4, #2
   1770c:	190c      	adds	r4, r1, r4
   1770e:	7818      	ldrb	r0, [r3, #0]
   17710:	0064      	lsls	r4, r4, #1
   17712:	18a4      	adds	r4, r4, r2
   17714:	0002      	movs	r2, r0
   17716:	1c59      	adds	r1, r3, #1
   17718:	3a30      	subs	r2, #48	; 0x30
   1771a:	000b      	movs	r3, r1
   1771c:	2a09      	cmp	r2, #9
   1771e:	d9f4      	bls.n	1770a <_vfprintf_r+0x20a>
   17720:	9107      	str	r1, [sp, #28]
   17722:	0003      	movs	r3, r0
   17724:	4641      	mov	r1, r8
   17726:	4650      	mov	r0, sl
   17728:	46a2      	mov	sl, r4
   1772a:	002c      	movs	r4, r5
   1772c:	e774      	b.n	17618 <_vfprintf_r+0x118>
   1772e:	9312      	str	r3, [sp, #72]	; 0x48
   17730:	2900      	cmp	r1, #0
   17732:	d001      	beq.n	17738 <_vfprintf_r+0x238>
   17734:	f001 fa2e 	bl	18b94 <_vfprintf_r+0x1694>
   17738:	4b57      	ldr	r3, [pc, #348]	; (17898 <_vfprintf_r+0x398>)
   1773a:	9319      	str	r3, [sp, #100]	; 0x64
   1773c:	06a3      	lsls	r3, r4, #26
   1773e:	d501      	bpl.n	17744 <_vfprintf_r+0x244>
   17740:	f000 fe9a 	bl	18478 <_vfprintf_r+0xf78>
   17744:	06e3      	lsls	r3, r4, #27
   17746:	d501      	bpl.n	1774c <_vfprintf_r+0x24c>
   17748:	f000 fd9a 	bl	18280 <_vfprintf_r+0xd80>
   1774c:	0663      	lsls	r3, r4, #25
   1774e:	d401      	bmi.n	17754 <_vfprintf_r+0x254>
   17750:	f000 fd96 	bl	18280 <_vfprintf_r+0xd80>
   17754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17756:	881a      	ldrh	r2, [r3, #0]
   17758:	920c      	str	r2, [sp, #48]	; 0x30
   1775a:	2200      	movs	r2, #0
   1775c:	3304      	adds	r3, #4
   1775e:	920d      	str	r2, [sp, #52]	; 0x34
   17760:	930f      	str	r3, [sp, #60]	; 0x3c
   17762:	07e3      	lsls	r3, r4, #31
   17764:	d401      	bmi.n	1776a <_vfprintf_r+0x26a>
   17766:	f000 fd76 	bl	18256 <_vfprintf_r+0xd56>
   1776a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1776c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1776e:	000b      	movs	r3, r1
   17770:	4313      	orrs	r3, r2
   17772:	001a      	movs	r2, r3
   17774:	2302      	movs	r3, #2
   17776:	2a00      	cmp	r2, #0
   17778:	d008      	beq.n	1778c <_vfprintf_r+0x28c>
   1777a:	2030      	movs	r0, #48	; 0x30
   1777c:	a91e      	add	r1, sp, #120	; 0x78
   1777e:	7008      	strb	r0, [r1, #0]
   17780:	2548      	movs	r5, #72	; 0x48
   17782:	4668      	mov	r0, sp
   17784:	1940      	adds	r0, r0, r5
   17786:	7800      	ldrb	r0, [r0, #0]
   17788:	431c      	orrs	r4, r3
   1778a:	7048      	strb	r0, [r1, #1]
   1778c:	2100      	movs	r1, #0
   1778e:	4688      	mov	r8, r1
   17790:	a816      	add	r0, sp, #88	; 0x58
   17792:	77c1      	strb	r1, [r0, #31]
   17794:	4651      	mov	r1, sl
   17796:	3101      	adds	r1, #1
   17798:	d100      	bne.n	1779c <_vfprintf_r+0x29c>
   1779a:	e0e6      	b.n	1796a <_vfprintf_r+0x46a>
   1779c:	2180      	movs	r1, #128	; 0x80
   1779e:	0020      	movs	r0, r4
   177a0:	4388      	bics	r0, r1
   177a2:	9009      	str	r0, [sp, #36]	; 0x24
   177a4:	2a00      	cmp	r2, #0
   177a6:	d000      	beq.n	177aa <_vfprintf_r+0x2aa>
   177a8:	e0e3      	b.n	17972 <_vfprintf_r+0x472>
   177aa:	4652      	mov	r2, sl
   177ac:	2a00      	cmp	r2, #0
   177ae:	d001      	beq.n	177b4 <_vfprintf_r+0x2b4>
   177b0:	f000 fc38 	bl	18024 <_vfprintf_r+0xb24>
   177b4:	2b00      	cmp	r3, #0
   177b6:	d001      	beq.n	177bc <_vfprintf_r+0x2bc>
   177b8:	f000 fd0c 	bl	181d4 <_vfprintf_r+0xcd4>
   177bc:	2001      	movs	r0, #1
   177be:	ab32      	add	r3, sp, #200	; 0xc8
   177c0:	4020      	ands	r0, r4
   177c2:	900e      	str	r0, [sp, #56]	; 0x38
   177c4:	9311      	str	r3, [sp, #68]	; 0x44
   177c6:	d008      	beq.n	177da <_vfprintf_r+0x2da>
   177c8:	2327      	movs	r3, #39	; 0x27
   177ca:	2130      	movs	r1, #48	; 0x30
   177cc:	aa28      	add	r2, sp, #160	; 0xa0
   177ce:	54d1      	strb	r1, [r2, r3]
   177d0:	aa16      	add	r2, sp, #88	; 0x58
   177d2:	4694      	mov	ip, r2
   177d4:	3348      	adds	r3, #72	; 0x48
   177d6:	4463      	add	r3, ip
   177d8:	9311      	str	r3, [sp, #68]	; 0x44
   177da:	4653      	mov	r3, sl
   177dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   177de:	9308      	str	r3, [sp, #32]
   177e0:	4592      	cmp	sl, r2
   177e2:	da00      	bge.n	177e6 <_vfprintf_r+0x2e6>
   177e4:	9208      	str	r2, [sp, #32]
   177e6:	2300      	movs	r3, #0
   177e8:	9313      	str	r3, [sp, #76]	; 0x4c
   177ea:	4643      	mov	r3, r8
   177ec:	2b00      	cmp	r3, #0
   177ee:	d002      	beq.n	177f6 <_vfprintf_r+0x2f6>
   177f0:	9b08      	ldr	r3, [sp, #32]
   177f2:	3301      	adds	r3, #1
   177f4:	9308      	str	r3, [sp, #32]
   177f6:	2302      	movs	r3, #2
   177f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   177fa:	401a      	ands	r2, r3
   177fc:	4691      	mov	r9, r2
   177fe:	d002      	beq.n	17806 <_vfprintf_r+0x306>
   17800:	9b08      	ldr	r3, [sp, #32]
   17802:	3302      	adds	r3, #2
   17804:	9308      	str	r3, [sp, #32]
   17806:	2384      	movs	r3, #132	; 0x84
   17808:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1780a:	401a      	ands	r2, r3
   1780c:	9210      	str	r2, [sp, #64]	; 0x40
   1780e:	d000      	beq.n	17812 <_vfprintf_r+0x312>
   17810:	e207      	b.n	17c22 <_vfprintf_r+0x722>
   17812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17814:	9a08      	ldr	r2, [sp, #32]
   17816:	1a9c      	subs	r4, r3, r2
   17818:	2c00      	cmp	r4, #0
   1781a:	dc00      	bgt.n	1781e <_vfprintf_r+0x31e>
   1781c:	e201      	b.n	17c22 <_vfprintf_r+0x722>
   1781e:	491f      	ldr	r1, [pc, #124]	; (1789c <_vfprintf_r+0x39c>)
   17820:	68ba      	ldr	r2, [r7, #8]
   17822:	687b      	ldr	r3, [r7, #4]
   17824:	4688      	mov	r8, r1
   17826:	2c10      	cmp	r4, #16
   17828:	dd21      	ble.n	1786e <_vfprintf_r+0x36e>
   1782a:	0031      	movs	r1, r6
   1782c:	2510      	movs	r5, #16
   1782e:	465e      	mov	r6, fp
   17830:	e003      	b.n	1783a <_vfprintf_r+0x33a>
   17832:	3c10      	subs	r4, #16
   17834:	3108      	adds	r1, #8
   17836:	2c10      	cmp	r4, #16
   17838:	dd17      	ble.n	1786a <_vfprintf_r+0x36a>
   1783a:	4640      	mov	r0, r8
   1783c:	3210      	adds	r2, #16
   1783e:	3301      	adds	r3, #1
   17840:	6008      	str	r0, [r1, #0]
   17842:	604d      	str	r5, [r1, #4]
   17844:	60ba      	str	r2, [r7, #8]
   17846:	607b      	str	r3, [r7, #4]
   17848:	2b07      	cmp	r3, #7
   1784a:	ddf2      	ble.n	17832 <_vfprintf_r+0x332>
   1784c:	003a      	movs	r2, r7
   1784e:	0031      	movs	r1, r6
   17850:	9806      	ldr	r0, [sp, #24]
   17852:	f004 f971 	bl	1bb38 <__sprint_r>
   17856:	2800      	cmp	r0, #0
   17858:	d001      	beq.n	1785e <_vfprintf_r+0x35e>
   1785a:	f000 fccf 	bl	181fc <_vfprintf_r+0xcfc>
   1785e:	3c10      	subs	r4, #16
   17860:	68ba      	ldr	r2, [r7, #8]
   17862:	687b      	ldr	r3, [r7, #4]
   17864:	a932      	add	r1, sp, #200	; 0xc8
   17866:	2c10      	cmp	r4, #16
   17868:	dce7      	bgt.n	1783a <_vfprintf_r+0x33a>
   1786a:	46b3      	mov	fp, r6
   1786c:	000e      	movs	r6, r1
   1786e:	4641      	mov	r1, r8
   17870:	6074      	str	r4, [r6, #4]
   17872:	3301      	adds	r3, #1
   17874:	18a4      	adds	r4, r4, r2
   17876:	6031      	str	r1, [r6, #0]
   17878:	60bc      	str	r4, [r7, #8]
   1787a:	607b      	str	r3, [r7, #4]
   1787c:	2b07      	cmp	r3, #7
   1787e:	dd01      	ble.n	17884 <_vfprintf_r+0x384>
   17880:	f000 fcae 	bl	181e0 <_vfprintf_r+0xce0>
   17884:	ab16      	add	r3, sp, #88	; 0x58
   17886:	7fdb      	ldrb	r3, [r3, #31]
   17888:	3608      	adds	r6, #8
   1788a:	4698      	mov	r8, r3
   1788c:	e1ca      	b.n	17c24 <_vfprintf_r+0x724>
   1788e:	46c0      	nop			; (mov r8, r8)
   17890:	ffffdfff 	.word	0xffffdfff
   17894:	0001e100 	.word	0x0001e100
   17898:	0001e0c4 	.word	0x0001e0c4
   1789c:	0001e264 	.word	0x0001e264
   178a0:	2200      	movs	r2, #0
   178a2:	9d07      	ldr	r5, [sp, #28]
   178a4:	3b30      	subs	r3, #48	; 0x30
   178a6:	46a8      	mov	r8, r5
   178a8:	920b      	str	r2, [sp, #44]	; 0x2c
   178aa:	001a      	movs	r2, r3
   178ac:	9408      	str	r4, [sp, #32]
   178ae:	002c      	movs	r4, r5
   178b0:	4655      	mov	r5, sl
   178b2:	4682      	mov	sl, r0
   178b4:	4640      	mov	r0, r8
   178b6:	4688      	mov	r8, r1
   178b8:	0011      	movs	r1, r2
   178ba:	2200      	movs	r2, #0
   178bc:	0093      	lsls	r3, r2, #2
   178be:	189a      	adds	r2, r3, r2
   178c0:	7803      	ldrb	r3, [r0, #0]
   178c2:	0052      	lsls	r2, r2, #1
   178c4:	188a      	adds	r2, r1, r2
   178c6:	0019      	movs	r1, r3
   178c8:	3401      	adds	r4, #1
   178ca:	3930      	subs	r1, #48	; 0x30
   178cc:	0020      	movs	r0, r4
   178ce:	2909      	cmp	r1, #9
   178d0:	d9f4      	bls.n	178bc <_vfprintf_r+0x3bc>
   178d2:	9407      	str	r4, [sp, #28]
   178d4:	4650      	mov	r0, sl
   178d6:	9c08      	ldr	r4, [sp, #32]
   178d8:	920b      	str	r2, [sp, #44]	; 0x2c
   178da:	4641      	mov	r1, r8
   178dc:	46aa      	mov	sl, r5
   178de:	e69b      	b.n	17618 <_vfprintf_r+0x118>
   178e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   178e2:	9312      	str	r3, [sp, #72]	; 0x48
   178e4:	6813      	ldr	r3, [r2, #0]
   178e6:	2120      	movs	r1, #32
   178e8:	9308      	str	r3, [sp, #32]
   178ea:	466b      	mov	r3, sp
   178ec:	185b      	adds	r3, r3, r1
   178ee:	781b      	ldrb	r3, [r3, #0]
   178f0:	ad28      	add	r5, sp, #160	; 0xa0
   178f2:	702b      	strb	r3, [r5, #0]
   178f4:	2300      	movs	r3, #0
   178f6:	a916      	add	r1, sp, #88	; 0x58
   178f8:	77cb      	strb	r3, [r1, #31]
   178fa:	0013      	movs	r3, r2
   178fc:	3304      	adds	r3, #4
   178fe:	930f      	str	r3, [sp, #60]	; 0x3c
   17900:	2300      	movs	r3, #0
   17902:	9409      	str	r4, [sp, #36]	; 0x24
   17904:	4698      	mov	r8, r3
   17906:	3301      	adds	r3, #1
   17908:	9308      	str	r3, [sp, #32]
   1790a:	930e      	str	r3, [sp, #56]	; 0x38
   1790c:	2300      	movs	r3, #0
   1790e:	9511      	str	r5, [sp, #68]	; 0x44
   17910:	469a      	mov	sl, r3
   17912:	9313      	str	r3, [sp, #76]	; 0x4c
   17914:	e76f      	b.n	177f6 <_vfprintf_r+0x2f6>
   17916:	9312      	str	r3, [sp, #72]	; 0x48
   17918:	2900      	cmp	r1, #0
   1791a:	d001      	beq.n	17920 <_vfprintf_r+0x420>
   1791c:	f001 f94d 	bl	18bba <_vfprintf_r+0x16ba>
   17920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17922:	06a3      	lsls	r3, r4, #26
   17924:	d501      	bpl.n	1792a <_vfprintf_r+0x42a>
   17926:	f000 fd5a 	bl	183de <_vfprintf_r+0xede>
   1792a:	06e3      	lsls	r3, r4, #27
   1792c:	d501      	bpl.n	17932 <_vfprintf_r+0x432>
   1792e:	f000 fcab 	bl	18288 <_vfprintf_r+0xd88>
   17932:	0663      	lsls	r3, r4, #25
   17934:	d401      	bmi.n	1793a <_vfprintf_r+0x43a>
   17936:	f000 fca7 	bl	18288 <_vfprintf_r+0xd88>
   1793a:	2100      	movs	r1, #0
   1793c:	5e53      	ldrsh	r3, [r2, r1]
   1793e:	930c      	str	r3, [sp, #48]	; 0x30
   17940:	3204      	adds	r2, #4
   17942:	17db      	asrs	r3, r3, #31
   17944:	930d      	str	r3, [sp, #52]	; 0x34
   17946:	920f      	str	r2, [sp, #60]	; 0x3c
   17948:	2b00      	cmp	r3, #0
   1794a:	da01      	bge.n	17950 <_vfprintf_r+0x450>
   1794c:	f000 fdb2 	bl	184b4 <_vfprintf_r+0xfb4>
   17950:	990c      	ldr	r1, [sp, #48]	; 0x30
   17952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17954:	0008      	movs	r0, r1
   17956:	4651      	mov	r1, sl
   17958:	ab16      	add	r3, sp, #88	; 0x58
   1795a:	7fdb      	ldrb	r3, [r3, #31]
   1795c:	4310      	orrs	r0, r2
   1795e:	4698      	mov	r8, r3
   17960:	0002      	movs	r2, r0
   17962:	2301      	movs	r3, #1
   17964:	3101      	adds	r1, #1
   17966:	d000      	beq.n	1796a <_vfprintf_r+0x46a>
   17968:	e718      	b.n	1779c <_vfprintf_r+0x29c>
   1796a:	2a00      	cmp	r2, #0
   1796c:	d100      	bne.n	17970 <_vfprintf_r+0x470>
   1796e:	e35a      	b.n	18026 <_vfprintf_r+0xb26>
   17970:	9409      	str	r4, [sp, #36]	; 0x24
   17972:	2b01      	cmp	r3, #1
   17974:	d101      	bne.n	1797a <_vfprintf_r+0x47a>
   17976:	f000 fc06 	bl	18186 <_vfprintf_r+0xc86>
   1797a:	2b02      	cmp	r3, #2
   1797c:	d000      	beq.n	17980 <_vfprintf_r+0x480>
   1797e:	e380      	b.n	18082 <_vfprintf_r+0xb82>
   17980:	9c19      	ldr	r4, [sp, #100]	; 0x64
   17982:	200f      	movs	r0, #15
   17984:	46a1      	mov	r9, r4
   17986:	46b4      	mov	ip, r6
   17988:	ab32      	add	r3, sp, #200	; 0xc8
   1798a:	0019      	movs	r1, r3
   1798c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1798e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17990:	0004      	movs	r4, r0
   17992:	464d      	mov	r5, r9
   17994:	4014      	ands	r4, r2
   17996:	5d2c      	ldrb	r4, [r5, r4]
   17998:	071e      	lsls	r6, r3, #28
   1799a:	0915      	lsrs	r5, r2, #4
   1799c:	3901      	subs	r1, #1
   1799e:	432e      	orrs	r6, r5
   179a0:	700c      	strb	r4, [r1, #0]
   179a2:	091c      	lsrs	r4, r3, #4
   179a4:	0023      	movs	r3, r4
   179a6:	0034      	movs	r4, r6
   179a8:	0032      	movs	r2, r6
   179aa:	431c      	orrs	r4, r3
   179ac:	d1f0      	bne.n	17990 <_vfprintf_r+0x490>
   179ae:	920c      	str	r2, [sp, #48]	; 0x30
   179b0:	930d      	str	r3, [sp, #52]	; 0x34
   179b2:	ab32      	add	r3, sp, #200	; 0xc8
   179b4:	1a5b      	subs	r3, r3, r1
   179b6:	9111      	str	r1, [sp, #68]	; 0x44
   179b8:	4666      	mov	r6, ip
   179ba:	930e      	str	r3, [sp, #56]	; 0x38
   179bc:	e70d      	b.n	177da <_vfprintf_r+0x2da>
   179be:	4663      	mov	r3, ip
   179c0:	431c      	orrs	r4, r3
   179c2:	9b07      	ldr	r3, [sp, #28]
   179c4:	781b      	ldrb	r3, [r3, #0]
   179c6:	e624      	b.n	17612 <_vfprintf_r+0x112>
   179c8:	9b07      	ldr	r3, [sp, #28]
   179ca:	781b      	ldrb	r3, [r3, #0]
   179cc:	2b6c      	cmp	r3, #108	; 0x6c
   179ce:	d101      	bne.n	179d4 <_vfprintf_r+0x4d4>
   179d0:	f000 fe8c 	bl	186ec <_vfprintf_r+0x11ec>
   179d4:	2210      	movs	r2, #16
   179d6:	4314      	orrs	r4, r2
   179d8:	e61b      	b.n	17612 <_vfprintf_r+0x112>
   179da:	2900      	cmp	r1, #0
   179dc:	d001      	beq.n	179e2 <_vfprintf_r+0x4e2>
   179de:	f001 f8d5 	bl	18b8c <_vfprintf_r+0x168c>
   179e2:	06a3      	lsls	r3, r4, #26
   179e4:	d501      	bpl.n	179ea <_vfprintf_r+0x4ea>
   179e6:	f000 fe76 	bl	186d6 <_vfprintf_r+0x11d6>
   179ea:	06e3      	lsls	r3, r4, #27
   179ec:	d500      	bpl.n	179f0 <_vfprintf_r+0x4f0>
   179ee:	e110      	b.n	17c12 <_vfprintf_r+0x712>
   179f0:	0663      	lsls	r3, r4, #25
   179f2:	d400      	bmi.n	179f6 <_vfprintf_r+0x4f6>
   179f4:	e10d      	b.n	17c12 <_vfprintf_r+0x712>
   179f6:	4669      	mov	r1, sp
   179f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   179fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   179fc:	681a      	ldr	r2, [r3, #0]
   179fe:	3304      	adds	r3, #4
   17a00:	9208      	str	r2, [sp, #32]
   17a02:	8011      	strh	r1, [r2, #0]
   17a04:	930f      	str	r3, [sp, #60]	; 0x3c
   17a06:	e5c9      	b.n	1759c <_vfprintf_r+0x9c>
   17a08:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17a0a:	2230      	movs	r2, #48	; 0x30
   17a0c:	680b      	ldr	r3, [r1, #0]
   17a0e:	930c      	str	r3, [sp, #48]	; 0x30
   17a10:	2300      	movs	r3, #0
   17a12:	930d      	str	r3, [sp, #52]	; 0x34
   17a14:	3302      	adds	r3, #2
   17a16:	431c      	orrs	r4, r3
   17a18:	ab1e      	add	r3, sp, #120	; 0x78
   17a1a:	701a      	strb	r2, [r3, #0]
   17a1c:	3248      	adds	r2, #72	; 0x48
   17a1e:	705a      	strb	r2, [r3, #1]
   17a20:	000b      	movs	r3, r1
   17a22:	3304      	adds	r3, #4
   17a24:	930f      	str	r3, [sp, #60]	; 0x3c
   17a26:	4bc1      	ldr	r3, [pc, #772]	; (17d2c <_vfprintf_r+0x82c>)
   17a28:	9212      	str	r2, [sp, #72]	; 0x48
   17a2a:	9319      	str	r3, [sp, #100]	; 0x64
   17a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17a2e:	2302      	movs	r3, #2
   17a30:	e6ac      	b.n	1778c <_vfprintf_r+0x28c>
   17a32:	464b      	mov	r3, r9
   17a34:	431c      	orrs	r4, r3
   17a36:	9b07      	ldr	r3, [sp, #28]
   17a38:	781b      	ldrb	r3, [r3, #0]
   17a3a:	e5ea      	b.n	17612 <_vfprintf_r+0x112>
   17a3c:	9312      	str	r3, [sp, #72]	; 0x48
   17a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a40:	a916      	add	r1, sp, #88	; 0x58
   17a42:	1d1d      	adds	r5, r3, #4
   17a44:	681b      	ldr	r3, [r3, #0]
   17a46:	001a      	movs	r2, r3
   17a48:	9311      	str	r3, [sp, #68]	; 0x44
   17a4a:	2300      	movs	r3, #0
   17a4c:	77cb      	strb	r3, [r1, #31]
   17a4e:	2a00      	cmp	r2, #0
   17a50:	d101      	bne.n	17a56 <_vfprintf_r+0x556>
   17a52:	f000 ff01 	bl	18858 <_vfprintf_r+0x1358>
   17a56:	4653      	mov	r3, sl
   17a58:	3301      	adds	r3, #1
   17a5a:	d101      	bne.n	17a60 <_vfprintf_r+0x560>
   17a5c:	f000 fe64 	bl	18728 <_vfprintf_r+0x1228>
   17a60:	4652      	mov	r2, sl
   17a62:	2100      	movs	r1, #0
   17a64:	9811      	ldr	r0, [sp, #68]	; 0x44
   17a66:	f003 f98f 	bl	1ad88 <memchr>
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d101      	bne.n	17a72 <_vfprintf_r+0x572>
   17a6e:	f000 ff78 	bl	18962 <_vfprintf_r+0x1462>
   17a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17a74:	1ac3      	subs	r3, r0, r3
   17a76:	001a      	movs	r2, r3
   17a78:	930e      	str	r3, [sp, #56]	; 0x38
   17a7a:	43db      	mvns	r3, r3
   17a7c:	17db      	asrs	r3, r3, #31
   17a7e:	401a      	ands	r2, r3
   17a80:	ab16      	add	r3, sp, #88	; 0x58
   17a82:	7fdb      	ldrb	r3, [r3, #31]
   17a84:	9208      	str	r2, [sp, #32]
   17a86:	4698      	mov	r8, r3
   17a88:	2300      	movs	r3, #0
   17a8a:	950f      	str	r5, [sp, #60]	; 0x3c
   17a8c:	9409      	str	r4, [sp, #36]	; 0x24
   17a8e:	469a      	mov	sl, r3
   17a90:	9313      	str	r3, [sp, #76]	; 0x4c
   17a92:	e6aa      	b.n	177ea <_vfprintf_r+0x2ea>
   17a94:	2308      	movs	r3, #8
   17a96:	431c      	orrs	r4, r3
   17a98:	9b07      	ldr	r3, [sp, #28]
   17a9a:	781b      	ldrb	r3, [r3, #0]
   17a9c:	e5b9      	b.n	17612 <_vfprintf_r+0x112>
   17a9e:	9312      	str	r3, [sp, #72]	; 0x48
   17aa0:	2310      	movs	r3, #16
   17aa2:	431c      	orrs	r4, r3
   17aa4:	06a3      	lsls	r3, r4, #26
   17aa6:	d501      	bpl.n	17aac <_vfprintf_r+0x5ac>
   17aa8:	f000 fca7 	bl	183fa <_vfprintf_r+0xefa>
   17aac:	06e3      	lsls	r3, r4, #27
   17aae:	d500      	bpl.n	17ab2 <_vfprintf_r+0x5b2>
   17ab0:	e3ee      	b.n	18290 <_vfprintf_r+0xd90>
   17ab2:	0663      	lsls	r3, r4, #25
   17ab4:	d400      	bmi.n	17ab8 <_vfprintf_r+0x5b8>
   17ab6:	e3eb      	b.n	18290 <_vfprintf_r+0xd90>
   17ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17aba:	881a      	ldrh	r2, [r3, #0]
   17abc:	920c      	str	r2, [sp, #48]	; 0x30
   17abe:	2200      	movs	r2, #0
   17ac0:	3304      	adds	r3, #4
   17ac2:	920d      	str	r2, [sp, #52]	; 0x34
   17ac4:	930f      	str	r3, [sp, #60]	; 0x3c
   17ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17ac8:	2300      	movs	r3, #0
   17aca:	e65f      	b.n	1778c <_vfprintf_r+0x28c>
   17acc:	9312      	str	r3, [sp, #72]	; 0x48
   17ace:	2310      	movs	r3, #16
   17ad0:	431c      	orrs	r4, r3
   17ad2:	06a3      	lsls	r3, r4, #26
   17ad4:	d501      	bpl.n	17ada <_vfprintf_r+0x5da>
   17ad6:	f000 fcba 	bl	1844e <_vfprintf_r+0xf4e>
   17ada:	06e3      	lsls	r3, r4, #27
   17adc:	d500      	bpl.n	17ae0 <_vfprintf_r+0x5e0>
   17ade:	e3da      	b.n	18296 <_vfprintf_r+0xd96>
   17ae0:	0663      	lsls	r3, r4, #25
   17ae2:	d400      	bmi.n	17ae6 <_vfprintf_r+0x5e6>
   17ae4:	e3d7      	b.n	18296 <_vfprintf_r+0xd96>
   17ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17ae8:	881a      	ldrh	r2, [r3, #0]
   17aea:	920c      	str	r2, [sp, #48]	; 0x30
   17aec:	2200      	movs	r2, #0
   17aee:	3304      	adds	r3, #4
   17af0:	920d      	str	r2, [sp, #52]	; 0x34
   17af2:	930f      	str	r3, [sp, #60]	; 0x3c
   17af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17af6:	2301      	movs	r3, #1
   17af8:	e648      	b.n	1778c <_vfprintf_r+0x28c>
   17afa:	9312      	str	r3, [sp, #72]	; 0x48
   17afc:	2900      	cmp	r1, #0
   17afe:	d001      	beq.n	17b04 <_vfprintf_r+0x604>
   17b00:	f001 f857 	bl	18bb2 <_vfprintf_r+0x16b2>
   17b04:	4b8a      	ldr	r3, [pc, #552]	; (17d30 <_vfprintf_r+0x830>)
   17b06:	9319      	str	r3, [sp, #100]	; 0x64
   17b08:	e618      	b.n	1773c <_vfprintf_r+0x23c>
   17b0a:	2301      	movs	r3, #1
   17b0c:	431c      	orrs	r4, r3
   17b0e:	9b07      	ldr	r3, [sp, #28]
   17b10:	781b      	ldrb	r3, [r3, #0]
   17b12:	e57e      	b.n	17612 <_vfprintf_r+0x112>
   17b14:	2380      	movs	r3, #128	; 0x80
   17b16:	431c      	orrs	r4, r3
   17b18:	9b07      	ldr	r3, [sp, #28]
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	e579      	b.n	17612 <_vfprintf_r+0x112>
   17b1e:	9b07      	ldr	r3, [sp, #28]
   17b20:	781b      	ldrb	r3, [r3, #0]
   17b22:	2800      	cmp	r0, #0
   17b24:	d000      	beq.n	17b28 <_vfprintf_r+0x628>
   17b26:	e574      	b.n	17612 <_vfprintf_r+0x112>
   17b28:	2101      	movs	r1, #1
   17b2a:	3020      	adds	r0, #32
   17b2c:	e571      	b.n	17612 <_vfprintf_r+0x112>
   17b2e:	9312      	str	r3, [sp, #72]	; 0x48
   17b30:	2900      	cmp	r1, #0
   17b32:	d001      	beq.n	17b38 <_vfprintf_r+0x638>
   17b34:	f001 f839 	bl	18baa <_vfprintf_r+0x16aa>
   17b38:	2207      	movs	r2, #7
   17b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17b3c:	3307      	adds	r3, #7
   17b3e:	4393      	bics	r3, r2
   17b40:	3201      	adds	r2, #1
   17b42:	4694      	mov	ip, r2
   17b44:	449c      	add	ip, r3
   17b46:	4662      	mov	r2, ip
   17b48:	920f      	str	r2, [sp, #60]	; 0x3c
   17b4a:	681a      	ldr	r2, [r3, #0]
   17b4c:	9216      	str	r2, [sp, #88]	; 0x58
   17b4e:	685b      	ldr	r3, [r3, #4]
   17b50:	2201      	movs	r2, #1
   17b52:	9315      	str	r3, [sp, #84]	; 0x54
   17b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17b56:	9d16      	ldr	r5, [sp, #88]	; 0x58
   17b58:	005b      	lsls	r3, r3, #1
   17b5a:	085b      	lsrs	r3, r3, #1
   17b5c:	4698      	mov	r8, r3
   17b5e:	4252      	negs	r2, r2
   17b60:	4b74      	ldr	r3, [pc, #464]	; (17d34 <_vfprintf_r+0x834>)
   17b62:	0028      	movs	r0, r5
   17b64:	4641      	mov	r1, r8
   17b66:	f004 fa81 	bl	1c06c <__aeabi_dcmpun>
   17b6a:	2800      	cmp	r0, #0
   17b6c:	d001      	beq.n	17b72 <_vfprintf_r+0x672>
   17b6e:	f000 fcb4 	bl	184da <_vfprintf_r+0xfda>
   17b72:	2201      	movs	r2, #1
   17b74:	4b6f      	ldr	r3, [pc, #444]	; (17d34 <_vfprintf_r+0x834>)
   17b76:	4252      	negs	r2, r2
   17b78:	0028      	movs	r0, r5
   17b7a:	4641      	mov	r1, r8
   17b7c:	f7fd fd36 	bl	155ec <__aeabi_dcmple>
   17b80:	2800      	cmp	r0, #0
   17b82:	d001      	beq.n	17b88 <_vfprintf_r+0x688>
   17b84:	f000 fca9 	bl	184da <_vfprintf_r+0xfda>
   17b88:	2200      	movs	r2, #0
   17b8a:	2300      	movs	r3, #0
   17b8c:	9816      	ldr	r0, [sp, #88]	; 0x58
   17b8e:	9915      	ldr	r1, [sp, #84]	; 0x54
   17b90:	f7fd fd22 	bl	155d8 <__aeabi_dcmplt>
   17b94:	2800      	cmp	r0, #0
   17b96:	d001      	beq.n	17b9c <_vfprintf_r+0x69c>
   17b98:	f000 fd55 	bl	18646 <_vfprintf_r+0x1146>
   17b9c:	ab16      	add	r3, sp, #88	; 0x58
   17b9e:	7fdb      	ldrb	r3, [r3, #31]
   17ba0:	4698      	mov	r8, r3
   17ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17ba4:	2b47      	cmp	r3, #71	; 0x47
   17ba6:	dd01      	ble.n	17bac <_vfprintf_r+0x6ac>
   17ba8:	f000 fdb4 	bl	18714 <_vfprintf_r+0x1214>
   17bac:	4b62      	ldr	r3, [pc, #392]	; (17d38 <_vfprintf_r+0x838>)
   17bae:	9311      	str	r3, [sp, #68]	; 0x44
   17bb0:	2380      	movs	r3, #128	; 0x80
   17bb2:	439c      	bics	r4, r3
   17bb4:	3b7d      	subs	r3, #125	; 0x7d
   17bb6:	9308      	str	r3, [sp, #32]
   17bb8:	930e      	str	r3, [sp, #56]	; 0x38
   17bba:	2300      	movs	r3, #0
   17bbc:	9409      	str	r4, [sp, #36]	; 0x24
   17bbe:	469a      	mov	sl, r3
   17bc0:	9313      	str	r3, [sp, #76]	; 0x4c
   17bc2:	e612      	b.n	177ea <_vfprintf_r+0x2ea>
   17bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17bc6:	1d1a      	adds	r2, r3, #4
   17bc8:	681b      	ldr	r3, [r3, #0]
   17bca:	930b      	str	r3, [sp, #44]	; 0x2c
   17bcc:	2b00      	cmp	r3, #0
   17bce:	da00      	bge.n	17bd2 <_vfprintf_r+0x6d2>
   17bd0:	e578      	b.n	176c4 <_vfprintf_r+0x1c4>
   17bd2:	9b07      	ldr	r3, [sp, #28]
   17bd4:	920f      	str	r2, [sp, #60]	; 0x3c
   17bd6:	781b      	ldrb	r3, [r3, #0]
   17bd8:	e51b      	b.n	17612 <_vfprintf_r+0x112>
   17bda:	9312      	str	r3, [sp, #72]	; 0x48
   17bdc:	2900      	cmp	r1, #0
   17bde:	d001      	beq.n	17be4 <_vfprintf_r+0x6e4>
   17be0:	f000 ffcc 	bl	18b7c <_vfprintf_r+0x167c>
   17be4:	2310      	movs	r3, #16
   17be6:	431c      	orrs	r4, r3
   17be8:	e69a      	b.n	17920 <_vfprintf_r+0x420>
   17bea:	9312      	str	r3, [sp, #72]	; 0x48
   17bec:	e771      	b.n	17ad2 <_vfprintf_r+0x5d2>
   17bee:	9312      	str	r3, [sp, #72]	; 0x48
   17bf0:	e758      	b.n	17aa4 <_vfprintf_r+0x5a4>
   17bf2:	9312      	str	r3, [sp, #72]	; 0x48
   17bf4:	2900      	cmp	r1, #0
   17bf6:	d001      	beq.n	17bfc <_vfprintf_r+0x6fc>
   17bf8:	f000 ffd3 	bl	18ba2 <_vfprintf_r+0x16a2>
   17bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17bfe:	2b00      	cmp	r3, #0
   17c00:	d100      	bne.n	17c04 <_vfprintf_r+0x704>
   17c02:	e18d      	b.n	17f20 <_vfprintf_r+0xa20>
   17c04:	ad28      	add	r5, sp, #160	; 0xa0
   17c06:	702b      	strb	r3, [r5, #0]
   17c08:	2300      	movs	r3, #0
   17c0a:	aa16      	add	r2, sp, #88	; 0x58
   17c0c:	77d3      	strb	r3, [r2, #31]
   17c0e:	9409      	str	r4, [sp, #36]	; 0x24
   17c10:	e678      	b.n	17904 <_vfprintf_r+0x404>
   17c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17c14:	990a      	ldr	r1, [sp, #40]	; 0x28
   17c16:	6813      	ldr	r3, [r2, #0]
   17c18:	6019      	str	r1, [r3, #0]
   17c1a:	0013      	movs	r3, r2
   17c1c:	3304      	adds	r3, #4
   17c1e:	930f      	str	r3, [sp, #60]	; 0x3c
   17c20:	e4bc      	b.n	1759c <_vfprintf_r+0x9c>
   17c22:	68bc      	ldr	r4, [r7, #8]
   17c24:	4643      	mov	r3, r8
   17c26:	2b00      	cmp	r3, #0
   17c28:	d00f      	beq.n	17c4a <_vfprintf_r+0x74a>
   17c2a:	aa16      	add	r2, sp, #88	; 0x58
   17c2c:	231f      	movs	r3, #31
   17c2e:	4694      	mov	ip, r2
   17c30:	4463      	add	r3, ip
   17c32:	6033      	str	r3, [r6, #0]
   17c34:	2301      	movs	r3, #1
   17c36:	6073      	str	r3, [r6, #4]
   17c38:	687b      	ldr	r3, [r7, #4]
   17c3a:	3401      	adds	r4, #1
   17c3c:	3301      	adds	r3, #1
   17c3e:	60bc      	str	r4, [r7, #8]
   17c40:	607b      	str	r3, [r7, #4]
   17c42:	2b07      	cmp	r3, #7
   17c44:	dd00      	ble.n	17c48 <_vfprintf_r+0x748>
   17c46:	e203      	b.n	18050 <_vfprintf_r+0xb50>
   17c48:	3608      	adds	r6, #8
   17c4a:	464b      	mov	r3, r9
   17c4c:	2b00      	cmp	r3, #0
   17c4e:	d00c      	beq.n	17c6a <_vfprintf_r+0x76a>
   17c50:	ab1e      	add	r3, sp, #120	; 0x78
   17c52:	6033      	str	r3, [r6, #0]
   17c54:	2302      	movs	r3, #2
   17c56:	6073      	str	r3, [r6, #4]
   17c58:	687b      	ldr	r3, [r7, #4]
   17c5a:	3402      	adds	r4, #2
   17c5c:	3301      	adds	r3, #1
   17c5e:	60bc      	str	r4, [r7, #8]
   17c60:	607b      	str	r3, [r7, #4]
   17c62:	2b07      	cmp	r3, #7
   17c64:	dd00      	ble.n	17c68 <_vfprintf_r+0x768>
   17c66:	e1fd      	b.n	18064 <_vfprintf_r+0xb64>
   17c68:	3608      	adds	r6, #8
   17c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c6c:	2b80      	cmp	r3, #128	; 0x80
   17c6e:	d100      	bne.n	17c72 <_vfprintf_r+0x772>
   17c70:	e173      	b.n	17f5a <_vfprintf_r+0xa5a>
   17c72:	4653      	mov	r3, sl
   17c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17c76:	1a9d      	subs	r5, r3, r2
   17c78:	2d00      	cmp	r5, #0
   17c7a:	dd32      	ble.n	17ce2 <_vfprintf_r+0x7e2>
   17c7c:	4a2f      	ldr	r2, [pc, #188]	; (17d3c <_vfprintf_r+0x83c>)
   17c7e:	687b      	ldr	r3, [r7, #4]
   17c80:	4691      	mov	r9, r2
   17c82:	2d10      	cmp	r5, #16
   17c84:	dd22      	ble.n	17ccc <_vfprintf_r+0x7cc>
   17c86:	2210      	movs	r2, #16
   17c88:	4692      	mov	sl, r2
   17c8a:	0022      	movs	r2, r4
   17c8c:	465c      	mov	r4, fp
   17c8e:	e003      	b.n	17c98 <_vfprintf_r+0x798>
   17c90:	3d10      	subs	r5, #16
   17c92:	3608      	adds	r6, #8
   17c94:	2d10      	cmp	r5, #16
   17c96:	dd17      	ble.n	17cc8 <_vfprintf_r+0x7c8>
   17c98:	4649      	mov	r1, r9
   17c9a:	6031      	str	r1, [r6, #0]
   17c9c:	4651      	mov	r1, sl
   17c9e:	3210      	adds	r2, #16
   17ca0:	3301      	adds	r3, #1
   17ca2:	6071      	str	r1, [r6, #4]
   17ca4:	60ba      	str	r2, [r7, #8]
   17ca6:	607b      	str	r3, [r7, #4]
   17ca8:	2b07      	cmp	r3, #7
   17caa:	ddf1      	ble.n	17c90 <_vfprintf_r+0x790>
   17cac:	003a      	movs	r2, r7
   17cae:	0021      	movs	r1, r4
   17cb0:	9806      	ldr	r0, [sp, #24]
   17cb2:	f003 ff41 	bl	1bb38 <__sprint_r>
   17cb6:	2800      	cmp	r0, #0
   17cb8:	d000      	beq.n	17cbc <_vfprintf_r+0x7bc>
   17cba:	e18a      	b.n	17fd2 <_vfprintf_r+0xad2>
   17cbc:	3d10      	subs	r5, #16
   17cbe:	68ba      	ldr	r2, [r7, #8]
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	ae32      	add	r6, sp, #200	; 0xc8
   17cc4:	2d10      	cmp	r5, #16
   17cc6:	dce7      	bgt.n	17c98 <_vfprintf_r+0x798>
   17cc8:	46a3      	mov	fp, r4
   17cca:	0014      	movs	r4, r2
   17ccc:	464a      	mov	r2, r9
   17cce:	1964      	adds	r4, r4, r5
   17cd0:	3301      	adds	r3, #1
   17cd2:	6032      	str	r2, [r6, #0]
   17cd4:	6075      	str	r5, [r6, #4]
   17cd6:	60bc      	str	r4, [r7, #8]
   17cd8:	607b      	str	r3, [r7, #4]
   17cda:	2b07      	cmp	r3, #7
   17cdc:	dd00      	ble.n	17ce0 <_vfprintf_r+0x7e0>
   17cde:	e1ad      	b.n	1803c <_vfprintf_r+0xb3c>
   17ce0:	3608      	adds	r6, #8
   17ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ce4:	05db      	lsls	r3, r3, #23
   17ce6:	d500      	bpl.n	17cea <_vfprintf_r+0x7ea>
   17ce8:	e0be      	b.n	17e68 <_vfprintf_r+0x968>
   17cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17cec:	6033      	str	r3, [r6, #0]
   17cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17cf0:	469c      	mov	ip, r3
   17cf2:	6073      	str	r3, [r6, #4]
   17cf4:	687b      	ldr	r3, [r7, #4]
   17cf6:	4464      	add	r4, ip
   17cf8:	3301      	adds	r3, #1
   17cfa:	60bc      	str	r4, [r7, #8]
   17cfc:	607b      	str	r3, [r7, #4]
   17cfe:	2b07      	cmp	r3, #7
   17d00:	dd00      	ble.n	17d04 <_vfprintf_r+0x804>
   17d02:	e0a6      	b.n	17e52 <_vfprintf_r+0x952>
   17d04:	3608      	adds	r6, #8
   17d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d08:	075b      	lsls	r3, r3, #29
   17d0a:	d54a      	bpl.n	17da2 <_vfprintf_r+0x8a2>
   17d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17d0e:	9a08      	ldr	r2, [sp, #32]
   17d10:	1a9d      	subs	r5, r3, r2
   17d12:	2d00      	cmp	r5, #0
   17d14:	dd45      	ble.n	17da2 <_vfprintf_r+0x8a2>
   17d16:	4a0a      	ldr	r2, [pc, #40]	; (17d40 <_vfprintf_r+0x840>)
   17d18:	687b      	ldr	r3, [r7, #4]
   17d1a:	4690      	mov	r8, r2
   17d1c:	2d10      	cmp	r5, #16
   17d1e:	dd2f      	ble.n	17d80 <_vfprintf_r+0x880>
   17d20:	2210      	movs	r2, #16
   17d22:	4691      	mov	r9, r2
   17d24:	0022      	movs	r2, r4
   17d26:	465c      	mov	r4, fp
   17d28:	e010      	b.n	17d4c <_vfprintf_r+0x84c>
   17d2a:	46c0      	nop			; (mov r8, r8)
   17d2c:	0001e0c4 	.word	0x0001e0c4
   17d30:	0001e0b0 	.word	0x0001e0b0
   17d34:	7fefffff 	.word	0x7fefffff
   17d38:	0001e0a0 	.word	0x0001e0a0
   17d3c:	0001e274 	.word	0x0001e274
   17d40:	0001e264 	.word	0x0001e264
   17d44:	3d10      	subs	r5, #16
   17d46:	3608      	adds	r6, #8
   17d48:	2d10      	cmp	r5, #16
   17d4a:	dd17      	ble.n	17d7c <_vfprintf_r+0x87c>
   17d4c:	49d1      	ldr	r1, [pc, #836]	; (18094 <_vfprintf_r+0xb94>)
   17d4e:	3210      	adds	r2, #16
   17d50:	6031      	str	r1, [r6, #0]
   17d52:	4649      	mov	r1, r9
   17d54:	3301      	adds	r3, #1
   17d56:	6071      	str	r1, [r6, #4]
   17d58:	60ba      	str	r2, [r7, #8]
   17d5a:	607b      	str	r3, [r7, #4]
   17d5c:	2b07      	cmp	r3, #7
   17d5e:	ddf1      	ble.n	17d44 <_vfprintf_r+0x844>
   17d60:	003a      	movs	r2, r7
   17d62:	0021      	movs	r1, r4
   17d64:	9806      	ldr	r0, [sp, #24]
   17d66:	f003 fee7 	bl	1bb38 <__sprint_r>
   17d6a:	2800      	cmp	r0, #0
   17d6c:	d000      	beq.n	17d70 <_vfprintf_r+0x870>
   17d6e:	e130      	b.n	17fd2 <_vfprintf_r+0xad2>
   17d70:	3d10      	subs	r5, #16
   17d72:	68ba      	ldr	r2, [r7, #8]
   17d74:	687b      	ldr	r3, [r7, #4]
   17d76:	ae32      	add	r6, sp, #200	; 0xc8
   17d78:	2d10      	cmp	r5, #16
   17d7a:	dce7      	bgt.n	17d4c <_vfprintf_r+0x84c>
   17d7c:	46a3      	mov	fp, r4
   17d7e:	0014      	movs	r4, r2
   17d80:	4642      	mov	r2, r8
   17d82:	1964      	adds	r4, r4, r5
   17d84:	3301      	adds	r3, #1
   17d86:	c624      	stmia	r6!, {r2, r5}
   17d88:	60bc      	str	r4, [r7, #8]
   17d8a:	607b      	str	r3, [r7, #4]
   17d8c:	2b07      	cmp	r3, #7
   17d8e:	dd08      	ble.n	17da2 <_vfprintf_r+0x8a2>
   17d90:	003a      	movs	r2, r7
   17d92:	4659      	mov	r1, fp
   17d94:	9806      	ldr	r0, [sp, #24]
   17d96:	f003 fecf 	bl	1bb38 <__sprint_r>
   17d9a:	2800      	cmp	r0, #0
   17d9c:	d000      	beq.n	17da0 <_vfprintf_r+0x8a0>
   17d9e:	e13f      	b.n	18020 <_vfprintf_r+0xb20>
   17da0:	68bc      	ldr	r4, [r7, #8]
   17da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17da4:	9908      	ldr	r1, [sp, #32]
   17da6:	428b      	cmp	r3, r1
   17da8:	da00      	bge.n	17dac <_vfprintf_r+0x8ac>
   17daa:	000b      	movs	r3, r1
   17dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17dae:	4694      	mov	ip, r2
   17db0:	449c      	add	ip, r3
   17db2:	4663      	mov	r3, ip
   17db4:	930a      	str	r3, [sp, #40]	; 0x28
   17db6:	2c00      	cmp	r4, #0
   17db8:	d000      	beq.n	17dbc <_vfprintf_r+0x8bc>
   17dba:	e129      	b.n	18010 <_vfprintf_r+0xb10>
   17dbc:	2300      	movs	r3, #0
   17dbe:	ae32      	add	r6, sp, #200	; 0xc8
   17dc0:	607b      	str	r3, [r7, #4]
   17dc2:	f7ff fbeb 	bl	1759c <_vfprintf_r+0x9c>
   17dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17dc8:	2b01      	cmp	r3, #1
   17dca:	dc00      	bgt.n	17dce <_vfprintf_r+0x8ce>
   17dcc:	e103      	b.n	17fd6 <_vfprintf_r+0xad6>
   17dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17dd0:	3401      	adds	r4, #1
   17dd2:	6033      	str	r3, [r6, #0]
   17dd4:	2301      	movs	r3, #1
   17dd6:	6073      	str	r3, [r6, #4]
   17dd8:	687b      	ldr	r3, [r7, #4]
   17dda:	60bc      	str	r4, [r7, #8]
   17ddc:	3301      	adds	r3, #1
   17dde:	607b      	str	r3, [r7, #4]
   17de0:	2b07      	cmp	r3, #7
   17de2:	dd00      	ble.n	17de6 <_vfprintf_r+0x8e6>
   17de4:	e2ef      	b.n	183c6 <_vfprintf_r+0xec6>
   17de6:	3608      	adds	r6, #8
   17de8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17dea:	3301      	adds	r3, #1
   17dec:	6032      	str	r2, [r6, #0]
   17dee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   17df0:	4698      	mov	r8, r3
   17df2:	4694      	mov	ip, r2
   17df4:	4464      	add	r4, ip
   17df6:	6072      	str	r2, [r6, #4]
   17df8:	60bc      	str	r4, [r7, #8]
   17dfa:	607b      	str	r3, [r7, #4]
   17dfc:	2b07      	cmp	r3, #7
   17dfe:	dd00      	ble.n	17e02 <_vfprintf_r+0x902>
   17e00:	e318      	b.n	18434 <_vfprintf_r+0xf34>
   17e02:	3608      	adds	r6, #8
   17e04:	2200      	movs	r2, #0
   17e06:	2300      	movs	r3, #0
   17e08:	9816      	ldr	r0, [sp, #88]	; 0x58
   17e0a:	9915      	ldr	r1, [sp, #84]	; 0x54
   17e0c:	f7fd fbde 	bl	155cc <__aeabi_dcmpeq>
   17e10:	2800      	cmp	r0, #0
   17e12:	d000      	beq.n	17e16 <_vfprintf_r+0x916>
   17e14:	e1f4      	b.n	18200 <_vfprintf_r+0xd00>
   17e16:	9d11      	ldr	r5, [sp, #68]	; 0x44
   17e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17e1a:	3501      	adds	r5, #1
   17e1c:	3b01      	subs	r3, #1
   17e1e:	6035      	str	r5, [r6, #0]
   17e20:	6073      	str	r3, [r6, #4]
   17e22:	18e4      	adds	r4, r4, r3
   17e24:	2301      	movs	r3, #1
   17e26:	469c      	mov	ip, r3
   17e28:	44e0      	add	r8, ip
   17e2a:	4643      	mov	r3, r8
   17e2c:	60bc      	str	r4, [r7, #8]
   17e2e:	607b      	str	r3, [r7, #4]
   17e30:	2b07      	cmp	r3, #7
   17e32:	dd00      	ble.n	17e36 <_vfprintf_r+0x936>
   17e34:	e0e0      	b.n	17ff8 <_vfprintf_r+0xaf8>
   17e36:	3608      	adds	r6, #8
   17e38:	ab21      	add	r3, sp, #132	; 0x84
   17e3a:	6033      	str	r3, [r6, #0]
   17e3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e3e:	469c      	mov	ip, r3
   17e40:	6073      	str	r3, [r6, #4]
   17e42:	4643      	mov	r3, r8
   17e44:	4464      	add	r4, ip
   17e46:	3301      	adds	r3, #1
   17e48:	60bc      	str	r4, [r7, #8]
   17e4a:	607b      	str	r3, [r7, #4]
   17e4c:	2b07      	cmp	r3, #7
   17e4e:	dc00      	bgt.n	17e52 <_vfprintf_r+0x952>
   17e50:	e758      	b.n	17d04 <_vfprintf_r+0x804>
   17e52:	003a      	movs	r2, r7
   17e54:	4659      	mov	r1, fp
   17e56:	9806      	ldr	r0, [sp, #24]
   17e58:	f003 fe6e 	bl	1bb38 <__sprint_r>
   17e5c:	2800      	cmp	r0, #0
   17e5e:	d000      	beq.n	17e62 <_vfprintf_r+0x962>
   17e60:	e0de      	b.n	18020 <_vfprintf_r+0xb20>
   17e62:	68bc      	ldr	r4, [r7, #8]
   17e64:	ae32      	add	r6, sp, #200	; 0xc8
   17e66:	e74e      	b.n	17d06 <_vfprintf_r+0x806>
   17e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17e6a:	2b65      	cmp	r3, #101	; 0x65
   17e6c:	ddab      	ble.n	17dc6 <_vfprintf_r+0x8c6>
   17e6e:	2200      	movs	r2, #0
   17e70:	2300      	movs	r3, #0
   17e72:	9816      	ldr	r0, [sp, #88]	; 0x58
   17e74:	9915      	ldr	r1, [sp, #84]	; 0x54
   17e76:	f7fd fba9 	bl	155cc <__aeabi_dcmpeq>
   17e7a:	2800      	cmp	r0, #0
   17e7c:	d100      	bne.n	17e80 <_vfprintf_r+0x980>
   17e7e:	e134      	b.n	180ea <_vfprintf_r+0xbea>
   17e80:	4b85      	ldr	r3, [pc, #532]	; (18098 <_vfprintf_r+0xb98>)
   17e82:	3401      	adds	r4, #1
   17e84:	6033      	str	r3, [r6, #0]
   17e86:	2301      	movs	r3, #1
   17e88:	6073      	str	r3, [r6, #4]
   17e8a:	687b      	ldr	r3, [r7, #4]
   17e8c:	60bc      	str	r4, [r7, #8]
   17e8e:	3301      	adds	r3, #1
   17e90:	607b      	str	r3, [r7, #4]
   17e92:	2b07      	cmp	r3, #7
   17e94:	dd00      	ble.n	17e98 <_vfprintf_r+0x998>
   17e96:	e3dc      	b.n	18652 <_vfprintf_r+0x1152>
   17e98:	3608      	adds	r6, #8
   17e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17e9e:	4293      	cmp	r3, r2
   17ea0:	db03      	blt.n	17eaa <_vfprintf_r+0x9aa>
   17ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ea4:	07db      	lsls	r3, r3, #31
   17ea6:	d400      	bmi.n	17eaa <_vfprintf_r+0x9aa>
   17ea8:	e3b7      	b.n	1861a <_vfprintf_r+0x111a>
   17eaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17eac:	68ba      	ldr	r2, [r7, #8]
   17eae:	6033      	str	r3, [r6, #0]
   17eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17eb2:	469c      	mov	ip, r3
   17eb4:	6073      	str	r3, [r6, #4]
   17eb6:	687b      	ldr	r3, [r7, #4]
   17eb8:	4462      	add	r2, ip
   17eba:	3301      	adds	r3, #1
   17ebc:	0014      	movs	r4, r2
   17ebe:	60ba      	str	r2, [r7, #8]
   17ec0:	607b      	str	r3, [r7, #4]
   17ec2:	2b07      	cmp	r3, #7
   17ec4:	dd01      	ble.n	17eca <_vfprintf_r+0x9ca>
   17ec6:	f000 fc19 	bl	186fc <_vfprintf_r+0x11fc>
   17eca:	3608      	adds	r6, #8
   17ecc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17ece:	1e5d      	subs	r5, r3, #1
   17ed0:	2d00      	cmp	r5, #0
   17ed2:	dc00      	bgt.n	17ed6 <_vfprintf_r+0x9d6>
   17ed4:	e717      	b.n	17d06 <_vfprintf_r+0x806>
   17ed6:	4a71      	ldr	r2, [pc, #452]	; (1809c <_vfprintf_r+0xb9c>)
   17ed8:	687b      	ldr	r3, [r7, #4]
   17eda:	4691      	mov	r9, r2
   17edc:	2d10      	cmp	r5, #16
   17ede:	dc00      	bgt.n	17ee2 <_vfprintf_r+0x9e2>
   17ee0:	e1c3      	b.n	1826a <_vfprintf_r+0xd6a>
   17ee2:	2210      	movs	r2, #16
   17ee4:	4690      	mov	r8, r2
   17ee6:	0022      	movs	r2, r4
   17ee8:	464c      	mov	r4, r9
   17eea:	46d9      	mov	r9, fp
   17eec:	e004      	b.n	17ef8 <_vfprintf_r+0x9f8>
   17eee:	3608      	adds	r6, #8
   17ef0:	3d10      	subs	r5, #16
   17ef2:	2d10      	cmp	r5, #16
   17ef4:	dc00      	bgt.n	17ef8 <_vfprintf_r+0x9f8>
   17ef6:	e37c      	b.n	185f2 <_vfprintf_r+0x10f2>
   17ef8:	4641      	mov	r1, r8
   17efa:	3210      	adds	r2, #16
   17efc:	3301      	adds	r3, #1
   17efe:	6034      	str	r4, [r6, #0]
   17f00:	6071      	str	r1, [r6, #4]
   17f02:	60ba      	str	r2, [r7, #8]
   17f04:	607b      	str	r3, [r7, #4]
   17f06:	2b07      	cmp	r3, #7
   17f08:	ddf1      	ble.n	17eee <_vfprintf_r+0x9ee>
   17f0a:	003a      	movs	r2, r7
   17f0c:	4649      	mov	r1, r9
   17f0e:	9806      	ldr	r0, [sp, #24]
   17f10:	f003 fe12 	bl	1bb38 <__sprint_r>
   17f14:	2800      	cmp	r0, #0
   17f16:	d10b      	bne.n	17f30 <_vfprintf_r+0xa30>
   17f18:	68ba      	ldr	r2, [r7, #8]
   17f1a:	687b      	ldr	r3, [r7, #4]
   17f1c:	ae32      	add	r6, sp, #200	; 0xc8
   17f1e:	e7e7      	b.n	17ef0 <_vfprintf_r+0x9f0>
   17f20:	68bb      	ldr	r3, [r7, #8]
   17f22:	46d9      	mov	r9, fp
   17f24:	2b00      	cmp	r3, #0
   17f26:	d001      	beq.n	17f2c <_vfprintf_r+0xa2c>
   17f28:	f000 fd4c 	bl	189c4 <_vfprintf_r+0x14c4>
   17f2c:	2300      	movs	r3, #0
   17f2e:	607b      	str	r3, [r7, #4]
   17f30:	464b      	mov	r3, r9
   17f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17f34:	07db      	lsls	r3, r3, #31
   17f36:	d40d      	bmi.n	17f54 <_vfprintf_r+0xa54>
   17f38:	464b      	mov	r3, r9
   17f3a:	899b      	ldrh	r3, [r3, #12]
   17f3c:	059a      	lsls	r2, r3, #22
   17f3e:	d505      	bpl.n	17f4c <_vfprintf_r+0xa4c>
   17f40:	065b      	lsls	r3, r3, #25
   17f42:	d401      	bmi.n	17f48 <_vfprintf_r+0xa48>
   17f44:	f7ff fb8d 	bl	17662 <_vfprintf_r+0x162>
   17f48:	f7ff fb88 	bl	1765c <_vfprintf_r+0x15c>
   17f4c:	464b      	mov	r3, r9
   17f4e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   17f50:	f002 fbcc 	bl	1a6ec <__retarget_lock_release_recursive>
   17f54:	464b      	mov	r3, r9
   17f56:	899b      	ldrh	r3, [r3, #12]
   17f58:	e7f2      	b.n	17f40 <_vfprintf_r+0xa40>
   17f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17f5c:	9a08      	ldr	r2, [sp, #32]
   17f5e:	1a9d      	subs	r5, r3, r2
   17f60:	2d00      	cmp	r5, #0
   17f62:	dc00      	bgt.n	17f66 <_vfprintf_r+0xa66>
   17f64:	e685      	b.n	17c72 <_vfprintf_r+0x772>
   17f66:	4a4d      	ldr	r2, [pc, #308]	; (1809c <_vfprintf_r+0xb9c>)
   17f68:	687b      	ldr	r3, [r7, #4]
   17f6a:	4691      	mov	r9, r2
   17f6c:	2d10      	cmp	r5, #16
   17f6e:	dd24      	ble.n	17fba <_vfprintf_r+0xaba>
   17f70:	2210      	movs	r2, #16
   17f72:	0021      	movs	r1, r4
   17f74:	4690      	mov	r8, r2
   17f76:	465c      	mov	r4, fp
   17f78:	0032      	movs	r2, r6
   17f7a:	464e      	mov	r6, r9
   17f7c:	e003      	b.n	17f86 <_vfprintf_r+0xa86>
   17f7e:	3d10      	subs	r5, #16
   17f80:	3208      	adds	r2, #8
   17f82:	2d10      	cmp	r5, #16
   17f84:	dd15      	ble.n	17fb2 <_vfprintf_r+0xab2>
   17f86:	4640      	mov	r0, r8
   17f88:	3110      	adds	r1, #16
   17f8a:	3301      	adds	r3, #1
   17f8c:	6016      	str	r6, [r2, #0]
   17f8e:	6050      	str	r0, [r2, #4]
   17f90:	60b9      	str	r1, [r7, #8]
   17f92:	607b      	str	r3, [r7, #4]
   17f94:	2b07      	cmp	r3, #7
   17f96:	ddf2      	ble.n	17f7e <_vfprintf_r+0xa7e>
   17f98:	003a      	movs	r2, r7
   17f9a:	0021      	movs	r1, r4
   17f9c:	9806      	ldr	r0, [sp, #24]
   17f9e:	f003 fdcb 	bl	1bb38 <__sprint_r>
   17fa2:	2800      	cmp	r0, #0
   17fa4:	d115      	bne.n	17fd2 <_vfprintf_r+0xad2>
   17fa6:	3d10      	subs	r5, #16
   17fa8:	68b9      	ldr	r1, [r7, #8]
   17faa:	687b      	ldr	r3, [r7, #4]
   17fac:	aa32      	add	r2, sp, #200	; 0xc8
   17fae:	2d10      	cmp	r5, #16
   17fb0:	dce9      	bgt.n	17f86 <_vfprintf_r+0xa86>
   17fb2:	46a3      	mov	fp, r4
   17fb4:	46b1      	mov	r9, r6
   17fb6:	000c      	movs	r4, r1
   17fb8:	0016      	movs	r6, r2
   17fba:	464a      	mov	r2, r9
   17fbc:	1964      	adds	r4, r4, r5
   17fbe:	3301      	adds	r3, #1
   17fc0:	6032      	str	r2, [r6, #0]
   17fc2:	6075      	str	r5, [r6, #4]
   17fc4:	60bc      	str	r4, [r7, #8]
   17fc6:	607b      	str	r3, [r7, #4]
   17fc8:	2b07      	cmp	r3, #7
   17fca:	dd00      	ble.n	17fce <_vfprintf_r+0xace>
   17fcc:	e263      	b.n	18496 <_vfprintf_r+0xf96>
   17fce:	3608      	adds	r6, #8
   17fd0:	e64f      	b.n	17c72 <_vfprintf_r+0x772>
   17fd2:	46a1      	mov	r9, r4
   17fd4:	e7ac      	b.n	17f30 <_vfprintf_r+0xa30>
   17fd6:	2301      	movs	r3, #1
   17fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17fda:	4213      	tst	r3, r2
   17fdc:	d000      	beq.n	17fe0 <_vfprintf_r+0xae0>
   17fde:	e6f6      	b.n	17dce <_vfprintf_r+0x8ce>
   17fe0:	6073      	str	r3, [r6, #4]
   17fe2:	687b      	ldr	r3, [r7, #4]
   17fe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17fe6:	3301      	adds	r3, #1
   17fe8:	3401      	adds	r4, #1
   17fea:	6032      	str	r2, [r6, #0]
   17fec:	60bc      	str	r4, [r7, #8]
   17fee:	4698      	mov	r8, r3
   17ff0:	607b      	str	r3, [r7, #4]
   17ff2:	2b07      	cmp	r3, #7
   17ff4:	dc00      	bgt.n	17ff8 <_vfprintf_r+0xaf8>
   17ff6:	e71e      	b.n	17e36 <_vfprintf_r+0x936>
   17ff8:	003a      	movs	r2, r7
   17ffa:	4659      	mov	r1, fp
   17ffc:	9806      	ldr	r0, [sp, #24]
   17ffe:	f003 fd9b 	bl	1bb38 <__sprint_r>
   18002:	2800      	cmp	r0, #0
   18004:	d10c      	bne.n	18020 <_vfprintf_r+0xb20>
   18006:	687b      	ldr	r3, [r7, #4]
   18008:	68bc      	ldr	r4, [r7, #8]
   1800a:	4698      	mov	r8, r3
   1800c:	ae32      	add	r6, sp, #200	; 0xc8
   1800e:	e713      	b.n	17e38 <_vfprintf_r+0x938>
   18010:	003a      	movs	r2, r7
   18012:	4659      	mov	r1, fp
   18014:	9806      	ldr	r0, [sp, #24]
   18016:	f003 fd8f 	bl	1bb38 <__sprint_r>
   1801a:	2800      	cmp	r0, #0
   1801c:	d100      	bne.n	18020 <_vfprintf_r+0xb20>
   1801e:	e6cd      	b.n	17dbc <_vfprintf_r+0x8bc>
   18020:	46d9      	mov	r9, fp
   18022:	e785      	b.n	17f30 <_vfprintf_r+0xa30>
   18024:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18026:	2b01      	cmp	r3, #1
   18028:	d100      	bne.n	1802c <_vfprintf_r+0xb2c>
   1802a:	e148      	b.n	182be <_vfprintf_r+0xdbe>
   1802c:	2b02      	cmp	r3, #2
   1802e:	d123      	bne.n	18078 <_vfprintf_r+0xb78>
   18030:	9409      	str	r4, [sp, #36]	; 0x24
   18032:	2300      	movs	r3, #0
   18034:	2400      	movs	r4, #0
   18036:	930c      	str	r3, [sp, #48]	; 0x30
   18038:	940d      	str	r4, [sp, #52]	; 0x34
   1803a:	e4a1      	b.n	17980 <_vfprintf_r+0x480>
   1803c:	003a      	movs	r2, r7
   1803e:	4659      	mov	r1, fp
   18040:	9806      	ldr	r0, [sp, #24]
   18042:	f003 fd79 	bl	1bb38 <__sprint_r>
   18046:	2800      	cmp	r0, #0
   18048:	d1ea      	bne.n	18020 <_vfprintf_r+0xb20>
   1804a:	68bc      	ldr	r4, [r7, #8]
   1804c:	ae32      	add	r6, sp, #200	; 0xc8
   1804e:	e648      	b.n	17ce2 <_vfprintf_r+0x7e2>
   18050:	003a      	movs	r2, r7
   18052:	4659      	mov	r1, fp
   18054:	9806      	ldr	r0, [sp, #24]
   18056:	f003 fd6f 	bl	1bb38 <__sprint_r>
   1805a:	2800      	cmp	r0, #0
   1805c:	d1e0      	bne.n	18020 <_vfprintf_r+0xb20>
   1805e:	68bc      	ldr	r4, [r7, #8]
   18060:	ae32      	add	r6, sp, #200	; 0xc8
   18062:	e5f2      	b.n	17c4a <_vfprintf_r+0x74a>
   18064:	003a      	movs	r2, r7
   18066:	4659      	mov	r1, fp
   18068:	9806      	ldr	r0, [sp, #24]
   1806a:	f003 fd65 	bl	1bb38 <__sprint_r>
   1806e:	2800      	cmp	r0, #0
   18070:	d1d6      	bne.n	18020 <_vfprintf_r+0xb20>
   18072:	68bc      	ldr	r4, [r7, #8]
   18074:	ae32      	add	r6, sp, #200	; 0xc8
   18076:	e5f8      	b.n	17c6a <_vfprintf_r+0x76a>
   18078:	9409      	str	r4, [sp, #36]	; 0x24
   1807a:	2300      	movs	r3, #0
   1807c:	2400      	movs	r4, #0
   1807e:	930c      	str	r3, [sp, #48]	; 0x30
   18080:	940d      	str	r4, [sp, #52]	; 0x34
   18082:	980c      	ldr	r0, [sp, #48]	; 0x30
   18084:	990d      	ldr	r1, [sp, #52]	; 0x34
   18086:	4653      	mov	r3, sl
   18088:	aa32      	add	r2, sp, #200	; 0xc8
   1808a:	4691      	mov	r9, r2
   1808c:	9308      	str	r3, [sp, #32]
   1808e:	46b2      	mov	sl, r6
   18090:	e007      	b.n	180a2 <_vfprintf_r+0xba2>
   18092:	46c0      	nop			; (mov r8, r8)
   18094:	0001e264 	.word	0x0001e264
   18098:	0001dbd8 	.word	0x0001dbd8
   1809c:	0001e274 	.word	0x0001e274
   180a0:	46a1      	mov	r9, r4
   180a2:	074a      	lsls	r2, r1, #29
   180a4:	4694      	mov	ip, r2
   180a6:	464b      	mov	r3, r9
   180a8:	4665      	mov	r5, ip
   180aa:	1e5c      	subs	r4, r3, #1
   180ac:	08c6      	lsrs	r6, r0, #3
   180ae:	2307      	movs	r3, #7
   180b0:	08ca      	lsrs	r2, r1, #3
   180b2:	4335      	orrs	r5, r6
   180b4:	0011      	movs	r1, r2
   180b6:	002a      	movs	r2, r5
   180b8:	4003      	ands	r3, r0
   180ba:	3330      	adds	r3, #48	; 0x30
   180bc:	7023      	strb	r3, [r4, #0]
   180be:	0028      	movs	r0, r5
   180c0:	430a      	orrs	r2, r1
   180c2:	d1ed      	bne.n	180a0 <_vfprintf_r+0xba0>
   180c4:	900c      	str	r0, [sp, #48]	; 0x30
   180c6:	910d      	str	r1, [sp, #52]	; 0x34
   180c8:	9908      	ldr	r1, [sp, #32]
   180ca:	4656      	mov	r6, sl
   180cc:	468a      	mov	sl, r1
   180ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   180d0:	464a      	mov	r2, r9
   180d2:	9411      	str	r4, [sp, #68]	; 0x44
   180d4:	07c9      	lsls	r1, r1, #31
   180d6:	d500      	bpl.n	180da <_vfprintf_r+0xbda>
   180d8:	e0e0      	b.n	1829c <_vfprintf_r+0xd9c>
   180da:	ab32      	add	r3, sp, #200	; 0xc8
   180dc:	1b1b      	subs	r3, r3, r4
   180de:	930e      	str	r3, [sp, #56]	; 0x38
   180e0:	f7ff fb7b 	bl	177da <_vfprintf_r+0x2da>
   180e4:	9c07      	ldr	r4, [sp, #28]
   180e6:	f7ff fa7d 	bl	175e4 <_vfprintf_r+0xe4>
   180ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
   180ec:	2800      	cmp	r0, #0
   180ee:	dc00      	bgt.n	180f2 <_vfprintf_r+0xbf2>
   180f0:	e2b9      	b.n	18666 <_vfprintf_r+0x1166>
   180f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   180f4:	9914      	ldr	r1, [sp, #80]	; 0x50
   180f6:	0013      	movs	r3, r2
   180f8:	4690      	mov	r8, r2
   180fa:	428b      	cmp	r3, r1
   180fc:	dd00      	ble.n	18100 <_vfprintf_r+0xc00>
   180fe:	4688      	mov	r8, r1
   18100:	4643      	mov	r3, r8
   18102:	2b00      	cmp	r3, #0
   18104:	dd0c      	ble.n	18120 <_vfprintf_r+0xc20>
   18106:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18108:	4444      	add	r4, r8
   1810a:	6033      	str	r3, [r6, #0]
   1810c:	4643      	mov	r3, r8
   1810e:	6073      	str	r3, [r6, #4]
   18110:	687b      	ldr	r3, [r7, #4]
   18112:	60bc      	str	r4, [r7, #8]
   18114:	3301      	adds	r3, #1
   18116:	607b      	str	r3, [r7, #4]
   18118:	2b07      	cmp	r3, #7
   1811a:	dd00      	ble.n	1811e <_vfprintf_r+0xc1e>
   1811c:	e389      	b.n	18832 <_vfprintf_r+0x1332>
   1811e:	3608      	adds	r6, #8
   18120:	4643      	mov	r3, r8
   18122:	43db      	mvns	r3, r3
   18124:	4642      	mov	r2, r8
   18126:	17db      	asrs	r3, r3, #31
   18128:	4013      	ands	r3, r2
   1812a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1812c:	1ad3      	subs	r3, r2, r3
   1812e:	4698      	mov	r8, r3
   18130:	2b00      	cmp	r3, #0
   18132:	dc00      	bgt.n	18136 <_vfprintf_r+0xc36>
   18134:	e0eb      	b.n	1830e <_vfprintf_r+0xe0e>
   18136:	2b10      	cmp	r3, #16
   18138:	dc01      	bgt.n	1813e <_vfprintf_r+0xc3e>
   1813a:	f000 fcd9 	bl	18af0 <_vfprintf_r+0x15f0>
   1813e:	4adc      	ldr	r2, [pc, #880]	; (184b0 <_vfprintf_r+0xfb0>)
   18140:	687b      	ldr	r3, [r7, #4]
   18142:	4691      	mov	r9, r2
   18144:	2210      	movs	r2, #16
   18146:	464d      	mov	r5, r9
   18148:	4692      	mov	sl, r2
   1814a:	0022      	movs	r2, r4
   1814c:	4644      	mov	r4, r8
   1814e:	46d8      	mov	r8, fp
   18150:	e004      	b.n	1815c <_vfprintf_r+0xc5c>
   18152:	3608      	adds	r6, #8
   18154:	3c10      	subs	r4, #16
   18156:	2c10      	cmp	r4, #16
   18158:	dc00      	bgt.n	1815c <_vfprintf_r+0xc5c>
   1815a:	e0bf      	b.n	182dc <_vfprintf_r+0xddc>
   1815c:	4651      	mov	r1, sl
   1815e:	3210      	adds	r2, #16
   18160:	3301      	adds	r3, #1
   18162:	6035      	str	r5, [r6, #0]
   18164:	6071      	str	r1, [r6, #4]
   18166:	60ba      	str	r2, [r7, #8]
   18168:	607b      	str	r3, [r7, #4]
   1816a:	2b07      	cmp	r3, #7
   1816c:	ddf1      	ble.n	18152 <_vfprintf_r+0xc52>
   1816e:	003a      	movs	r2, r7
   18170:	4641      	mov	r1, r8
   18172:	9806      	ldr	r0, [sp, #24]
   18174:	f003 fce0 	bl	1bb38 <__sprint_r>
   18178:	2800      	cmp	r0, #0
   1817a:	d000      	beq.n	1817e <_vfprintf_r+0xc7e>
   1817c:	e3b6      	b.n	188ec <_vfprintf_r+0x13ec>
   1817e:	68ba      	ldr	r2, [r7, #8]
   18180:	687b      	ldr	r3, [r7, #4]
   18182:	ae32      	add	r6, sp, #200	; 0xc8
   18184:	e7e6      	b.n	18154 <_vfprintf_r+0xc54>
   18186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18188:	2b00      	cmp	r3, #0
   1818a:	d100      	bne.n	1818e <_vfprintf_r+0xc8e>
   1818c:	e092      	b.n	182b4 <_vfprintf_r+0xdb4>
   1818e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18190:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18192:	ab32      	add	r3, sp, #200	; 0xc8
   18194:	46b1      	mov	r9, r6
   18196:	001e      	movs	r6, r3
   18198:	0020      	movs	r0, r4
   1819a:	0029      	movs	r1, r5
   1819c:	220a      	movs	r2, #10
   1819e:	2300      	movs	r3, #0
   181a0:	f7fa fc64 	bl	12a6c <__aeabi_uldivmod>
   181a4:	3e01      	subs	r6, #1
   181a6:	3230      	adds	r2, #48	; 0x30
   181a8:	7032      	strb	r2, [r6, #0]
   181aa:	2300      	movs	r3, #0
   181ac:	0020      	movs	r0, r4
   181ae:	0029      	movs	r1, r5
   181b0:	220a      	movs	r2, #10
   181b2:	f7fa fc5b 	bl	12a6c <__aeabi_uldivmod>
   181b6:	0003      	movs	r3, r0
   181b8:	0004      	movs	r4, r0
   181ba:	000d      	movs	r5, r1
   181bc:	430b      	orrs	r3, r1
   181be:	d1eb      	bne.n	18198 <_vfprintf_r+0xc98>
   181c0:	0032      	movs	r2, r6
   181c2:	ab32      	add	r3, sp, #200	; 0xc8
   181c4:	1a9b      	subs	r3, r3, r2
   181c6:	9611      	str	r6, [sp, #68]	; 0x44
   181c8:	940c      	str	r4, [sp, #48]	; 0x30
   181ca:	950d      	str	r5, [sp, #52]	; 0x34
   181cc:	464e      	mov	r6, r9
   181ce:	930e      	str	r3, [sp, #56]	; 0x38
   181d0:	f7ff fb03 	bl	177da <_vfprintf_r+0x2da>
   181d4:	2300      	movs	r3, #0
   181d6:	930e      	str	r3, [sp, #56]	; 0x38
   181d8:	ab32      	add	r3, sp, #200	; 0xc8
   181da:	9311      	str	r3, [sp, #68]	; 0x44
   181dc:	f7ff fafd 	bl	177da <_vfprintf_r+0x2da>
   181e0:	003a      	movs	r2, r7
   181e2:	4659      	mov	r1, fp
   181e4:	9806      	ldr	r0, [sp, #24]
   181e6:	f003 fca7 	bl	1bb38 <__sprint_r>
   181ea:	2800      	cmp	r0, #0
   181ec:	d000      	beq.n	181f0 <_vfprintf_r+0xcf0>
   181ee:	e717      	b.n	18020 <_vfprintf_r+0xb20>
   181f0:	ab16      	add	r3, sp, #88	; 0x58
   181f2:	7fdb      	ldrb	r3, [r3, #31]
   181f4:	68bc      	ldr	r4, [r7, #8]
   181f6:	4698      	mov	r8, r3
   181f8:	ae32      	add	r6, sp, #200	; 0xc8
   181fa:	e513      	b.n	17c24 <_vfprintf_r+0x724>
   181fc:	46b1      	mov	r9, r6
   181fe:	e697      	b.n	17f30 <_vfprintf_r+0xa30>
   18200:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18202:	1e5d      	subs	r5, r3, #1
   18204:	2d00      	cmp	r5, #0
   18206:	dc00      	bgt.n	1820a <_vfprintf_r+0xd0a>
   18208:	e616      	b.n	17e38 <_vfprintf_r+0x938>
   1820a:	4ba9      	ldr	r3, [pc, #676]	; (184b0 <_vfprintf_r+0xfb0>)
   1820c:	4699      	mov	r9, r3
   1820e:	2d10      	cmp	r5, #16
   18210:	dc00      	bgt.n	18214 <_vfprintf_r+0xd14>
   18212:	e10a      	b.n	1842a <_vfprintf_r+0xf2a>
   18214:	2310      	movs	r3, #16
   18216:	0022      	movs	r2, r4
   18218:	469a      	mov	sl, r3
   1821a:	465c      	mov	r4, fp
   1821c:	4643      	mov	r3, r8
   1821e:	e004      	b.n	1822a <_vfprintf_r+0xd2a>
   18220:	3608      	adds	r6, #8
   18222:	3d10      	subs	r5, #16
   18224:	2d10      	cmp	r5, #16
   18226:	dc00      	bgt.n	1822a <_vfprintf_r+0xd2a>
   18228:	e0fc      	b.n	18424 <_vfprintf_r+0xf24>
   1822a:	4649      	mov	r1, r9
   1822c:	6031      	str	r1, [r6, #0]
   1822e:	4651      	mov	r1, sl
   18230:	3210      	adds	r2, #16
   18232:	3301      	adds	r3, #1
   18234:	6071      	str	r1, [r6, #4]
   18236:	60ba      	str	r2, [r7, #8]
   18238:	607b      	str	r3, [r7, #4]
   1823a:	2b07      	cmp	r3, #7
   1823c:	ddf0      	ble.n	18220 <_vfprintf_r+0xd20>
   1823e:	003a      	movs	r2, r7
   18240:	0021      	movs	r1, r4
   18242:	9806      	ldr	r0, [sp, #24]
   18244:	f003 fc78 	bl	1bb38 <__sprint_r>
   18248:	2800      	cmp	r0, #0
   1824a:	d000      	beq.n	1824e <_vfprintf_r+0xd4e>
   1824c:	e6c1      	b.n	17fd2 <_vfprintf_r+0xad2>
   1824e:	68ba      	ldr	r2, [r7, #8]
   18250:	687b      	ldr	r3, [r7, #4]
   18252:	ae32      	add	r6, sp, #200	; 0xc8
   18254:	e7e5      	b.n	18222 <_vfprintf_r+0xd22>
   18256:	990c      	ldr	r1, [sp, #48]	; 0x30
   18258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1825a:	0008      	movs	r0, r1
   1825c:	4310      	orrs	r0, r2
   1825e:	2302      	movs	r3, #2
   18260:	0002      	movs	r2, r0
   18262:	f7ff fa93 	bl	1778c <_vfprintf_r+0x28c>
   18266:	46a3      	mov	fp, r4
   18268:	0014      	movs	r4, r2
   1826a:	464a      	mov	r2, r9
   1826c:	1964      	adds	r4, r4, r5
   1826e:	3301      	adds	r3, #1
   18270:	6032      	str	r2, [r6, #0]
   18272:	6075      	str	r5, [r6, #4]
   18274:	60bc      	str	r4, [r7, #8]
   18276:	607b      	str	r3, [r7, #4]
   18278:	2b07      	cmp	r3, #7
   1827a:	dc00      	bgt.n	1827e <_vfprintf_r+0xd7e>
   1827c:	e542      	b.n	17d04 <_vfprintf_r+0x804>
   1827e:	e5e8      	b.n	17e52 <_vfprintf_r+0x952>
   18280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18282:	681a      	ldr	r2, [r3, #0]
   18284:	f7ff fa68 	bl	17758 <_vfprintf_r+0x258>
   18288:	6813      	ldr	r3, [r2, #0]
   1828a:	9308      	str	r3, [sp, #32]
   1828c:	f7ff fb57 	bl	1793e <_vfprintf_r+0x43e>
   18290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18292:	681a      	ldr	r2, [r3, #0]
   18294:	e412      	b.n	17abc <_vfprintf_r+0x5bc>
   18296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18298:	681a      	ldr	r2, [r3, #0]
   1829a:	e426      	b.n	17aea <_vfprintf_r+0x5ea>
   1829c:	2b30      	cmp	r3, #48	; 0x30
   1829e:	d100      	bne.n	182a2 <_vfprintf_r+0xda2>
   182a0:	e23c      	b.n	1871c <_vfprintf_r+0x121c>
   182a2:	2330      	movs	r3, #48	; 0x30
   182a4:	3a02      	subs	r2, #2
   182a6:	7013      	strb	r3, [r2, #0]
   182a8:	ab32      	add	r3, sp, #200	; 0xc8
   182aa:	1a9b      	subs	r3, r3, r2
   182ac:	930e      	str	r3, [sp, #56]	; 0x38
   182ae:	9211      	str	r2, [sp, #68]	; 0x44
   182b0:	f7ff fa93 	bl	177da <_vfprintf_r+0x2da>
   182b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   182b6:	2b09      	cmp	r3, #9
   182b8:	d900      	bls.n	182bc <_vfprintf_r+0xdbc>
   182ba:	e768      	b.n	1818e <_vfprintf_r+0xc8e>
   182bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   182be:	2227      	movs	r2, #39	; 0x27
   182c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   182c2:	a928      	add	r1, sp, #160	; 0xa0
   182c4:	3330      	adds	r3, #48	; 0x30
   182c6:	548b      	strb	r3, [r1, r2]
   182c8:	2301      	movs	r3, #1
   182ca:	aa16      	add	r2, sp, #88	; 0x58
   182cc:	4694      	mov	ip, r2
   182ce:	930e      	str	r3, [sp, #56]	; 0x38
   182d0:	336e      	adds	r3, #110	; 0x6e
   182d2:	4463      	add	r3, ip
   182d4:	9409      	str	r4, [sp, #36]	; 0x24
   182d6:	9311      	str	r3, [sp, #68]	; 0x44
   182d8:	f7ff fa7f 	bl	177da <_vfprintf_r+0x2da>
   182dc:	46c3      	mov	fp, r8
   182de:	46a9      	mov	r9, r5
   182e0:	46a0      	mov	r8, r4
   182e2:	0014      	movs	r4, r2
   182e4:	464a      	mov	r2, r9
   182e6:	6032      	str	r2, [r6, #0]
   182e8:	4642      	mov	r2, r8
   182ea:	4444      	add	r4, r8
   182ec:	3301      	adds	r3, #1
   182ee:	6072      	str	r2, [r6, #4]
   182f0:	60bc      	str	r4, [r7, #8]
   182f2:	607b      	str	r3, [r7, #4]
   182f4:	2b07      	cmp	r3, #7
   182f6:	dc00      	bgt.n	182fa <_vfprintf_r+0xdfa>
   182f8:	e18d      	b.n	18616 <_vfprintf_r+0x1116>
   182fa:	003a      	movs	r2, r7
   182fc:	4659      	mov	r1, fp
   182fe:	9806      	ldr	r0, [sp, #24]
   18300:	f003 fc1a 	bl	1bb38 <__sprint_r>
   18304:	2800      	cmp	r0, #0
   18306:	d000      	beq.n	1830a <_vfprintf_r+0xe0a>
   18308:	e68a      	b.n	18020 <_vfprintf_r+0xb20>
   1830a:	68bc      	ldr	r4, [r7, #8]
   1830c:	ae32      	add	r6, sp, #200	; 0xc8
   1830e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18310:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18312:	4293      	cmp	r3, r2
   18314:	db00      	blt.n	18318 <_vfprintf_r+0xe18>
   18316:	e179      	b.n	1860c <_vfprintf_r+0x110c>
   18318:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1831a:	6032      	str	r2, [r6, #0]
   1831c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1831e:	4694      	mov	ip, r2
   18320:	6072      	str	r2, [r6, #4]
   18322:	687a      	ldr	r2, [r7, #4]
   18324:	4464      	add	r4, ip
   18326:	3201      	adds	r2, #1
   18328:	60bc      	str	r4, [r7, #8]
   1832a:	607a      	str	r2, [r7, #4]
   1832c:	2a07      	cmp	r2, #7
   1832e:	dd00      	ble.n	18332 <_vfprintf_r+0xe32>
   18330:	e176      	b.n	18620 <_vfprintf_r+0x1120>
   18332:	3608      	adds	r6, #8
   18334:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18336:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18338:	1ad3      	subs	r3, r2, r3
   1833a:	1a52      	subs	r2, r2, r1
   1833c:	4690      	mov	r8, r2
   1833e:	429a      	cmp	r2, r3
   18340:	dd00      	ble.n	18344 <_vfprintf_r+0xe44>
   18342:	4698      	mov	r8, r3
   18344:	4642      	mov	r2, r8
   18346:	2a00      	cmp	r2, #0
   18348:	dd0f      	ble.n	1836a <_vfprintf_r+0xe6a>
   1834a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1834c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1834e:	468c      	mov	ip, r1
   18350:	4462      	add	r2, ip
   18352:	6032      	str	r2, [r6, #0]
   18354:	4642      	mov	r2, r8
   18356:	6072      	str	r2, [r6, #4]
   18358:	687a      	ldr	r2, [r7, #4]
   1835a:	4444      	add	r4, r8
   1835c:	3201      	adds	r2, #1
   1835e:	60bc      	str	r4, [r7, #8]
   18360:	607a      	str	r2, [r7, #4]
   18362:	2a07      	cmp	r2, #7
   18364:	dd00      	ble.n	18368 <_vfprintf_r+0xe68>
   18366:	e289      	b.n	1887c <_vfprintf_r+0x137c>
   18368:	3608      	adds	r6, #8
   1836a:	4642      	mov	r2, r8
   1836c:	43d5      	mvns	r5, r2
   1836e:	17ed      	asrs	r5, r5, #31
   18370:	4015      	ands	r5, r2
   18372:	1b5d      	subs	r5, r3, r5
   18374:	2d00      	cmp	r5, #0
   18376:	dc00      	bgt.n	1837a <_vfprintf_r+0xe7a>
   18378:	e4c5      	b.n	17d06 <_vfprintf_r+0x806>
   1837a:	4a4d      	ldr	r2, [pc, #308]	; (184b0 <_vfprintf_r+0xfb0>)
   1837c:	687b      	ldr	r3, [r7, #4]
   1837e:	4691      	mov	r9, r2
   18380:	2d10      	cmp	r5, #16
   18382:	dc00      	bgt.n	18386 <_vfprintf_r+0xe86>
   18384:	e771      	b.n	1826a <_vfprintf_r+0xd6a>
   18386:	2210      	movs	r2, #16
   18388:	4690      	mov	r8, r2
   1838a:	0022      	movs	r2, r4
   1838c:	465c      	mov	r4, fp
   1838e:	e004      	b.n	1839a <_vfprintf_r+0xe9a>
   18390:	3608      	adds	r6, #8
   18392:	3d10      	subs	r5, #16
   18394:	2d10      	cmp	r5, #16
   18396:	dc00      	bgt.n	1839a <_vfprintf_r+0xe9a>
   18398:	e765      	b.n	18266 <_vfprintf_r+0xd66>
   1839a:	4649      	mov	r1, r9
   1839c:	6031      	str	r1, [r6, #0]
   1839e:	4641      	mov	r1, r8
   183a0:	3210      	adds	r2, #16
   183a2:	3301      	adds	r3, #1
   183a4:	6071      	str	r1, [r6, #4]
   183a6:	60ba      	str	r2, [r7, #8]
   183a8:	607b      	str	r3, [r7, #4]
   183aa:	2b07      	cmp	r3, #7
   183ac:	ddf0      	ble.n	18390 <_vfprintf_r+0xe90>
   183ae:	003a      	movs	r2, r7
   183b0:	0021      	movs	r1, r4
   183b2:	9806      	ldr	r0, [sp, #24]
   183b4:	f003 fbc0 	bl	1bb38 <__sprint_r>
   183b8:	2800      	cmp	r0, #0
   183ba:	d000      	beq.n	183be <_vfprintf_r+0xebe>
   183bc:	e609      	b.n	17fd2 <_vfprintf_r+0xad2>
   183be:	68ba      	ldr	r2, [r7, #8]
   183c0:	687b      	ldr	r3, [r7, #4]
   183c2:	ae32      	add	r6, sp, #200	; 0xc8
   183c4:	e7e5      	b.n	18392 <_vfprintf_r+0xe92>
   183c6:	003a      	movs	r2, r7
   183c8:	4659      	mov	r1, fp
   183ca:	9806      	ldr	r0, [sp, #24]
   183cc:	f003 fbb4 	bl	1bb38 <__sprint_r>
   183d0:	2800      	cmp	r0, #0
   183d2:	d000      	beq.n	183d6 <_vfprintf_r+0xed6>
   183d4:	e624      	b.n	18020 <_vfprintf_r+0xb20>
   183d6:	68bc      	ldr	r4, [r7, #8]
   183d8:	687b      	ldr	r3, [r7, #4]
   183da:	ae32      	add	r6, sp, #200	; 0xc8
   183dc:	e504      	b.n	17de8 <_vfprintf_r+0x8e8>
   183de:	2307      	movs	r3, #7
   183e0:	3207      	adds	r2, #7
   183e2:	439a      	bics	r2, r3
   183e4:	3301      	adds	r3, #1
   183e6:	469c      	mov	ip, r3
   183e8:	4494      	add	ip, r2
   183ea:	4663      	mov	r3, ip
   183ec:	930f      	str	r3, [sp, #60]	; 0x3c
   183ee:	6853      	ldr	r3, [r2, #4]
   183f0:	6812      	ldr	r2, [r2, #0]
   183f2:	930d      	str	r3, [sp, #52]	; 0x34
   183f4:	920c      	str	r2, [sp, #48]	; 0x30
   183f6:	f7ff faa7 	bl	17948 <_vfprintf_r+0x448>
   183fa:	2207      	movs	r2, #7
   183fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   183fe:	3307      	adds	r3, #7
   18400:	4393      	bics	r3, r2
   18402:	3201      	adds	r2, #1
   18404:	4694      	mov	ip, r2
   18406:	449c      	add	ip, r3
   18408:	4662      	mov	r2, ip
   1840a:	920f      	str	r2, [sp, #60]	; 0x3c
   1840c:	681a      	ldr	r2, [r3, #0]
   1840e:	685b      	ldr	r3, [r3, #4]
   18410:	0011      	movs	r1, r2
   18412:	001a      	movs	r2, r3
   18414:	0008      	movs	r0, r1
   18416:	4310      	orrs	r0, r2
   18418:	910c      	str	r1, [sp, #48]	; 0x30
   1841a:	920d      	str	r2, [sp, #52]	; 0x34
   1841c:	2300      	movs	r3, #0
   1841e:	0002      	movs	r2, r0
   18420:	f7ff f9b4 	bl	1778c <_vfprintf_r+0x28c>
   18424:	46a3      	mov	fp, r4
   18426:	4698      	mov	r8, r3
   18428:	0014      	movs	r4, r2
   1842a:	464b      	mov	r3, r9
   1842c:	6075      	str	r5, [r6, #4]
   1842e:	6033      	str	r3, [r6, #0]
   18430:	1964      	adds	r4, r4, r5
   18432:	e4f7      	b.n	17e24 <_vfprintf_r+0x924>
   18434:	003a      	movs	r2, r7
   18436:	4659      	mov	r1, fp
   18438:	9806      	ldr	r0, [sp, #24]
   1843a:	f003 fb7d 	bl	1bb38 <__sprint_r>
   1843e:	2800      	cmp	r0, #0
   18440:	d000      	beq.n	18444 <_vfprintf_r+0xf44>
   18442:	e5ed      	b.n	18020 <_vfprintf_r+0xb20>
   18444:	687b      	ldr	r3, [r7, #4]
   18446:	68bc      	ldr	r4, [r7, #8]
   18448:	4698      	mov	r8, r3
   1844a:	ae32      	add	r6, sp, #200	; 0xc8
   1844c:	e4da      	b.n	17e04 <_vfprintf_r+0x904>
   1844e:	2207      	movs	r2, #7
   18450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18452:	3307      	adds	r3, #7
   18454:	4393      	bics	r3, r2
   18456:	3201      	adds	r2, #1
   18458:	4694      	mov	ip, r2
   1845a:	449c      	add	ip, r3
   1845c:	4662      	mov	r2, ip
   1845e:	920f      	str	r2, [sp, #60]	; 0x3c
   18460:	681a      	ldr	r2, [r3, #0]
   18462:	685b      	ldr	r3, [r3, #4]
   18464:	0011      	movs	r1, r2
   18466:	001a      	movs	r2, r3
   18468:	0008      	movs	r0, r1
   1846a:	4310      	orrs	r0, r2
   1846c:	910c      	str	r1, [sp, #48]	; 0x30
   1846e:	920d      	str	r2, [sp, #52]	; 0x34
   18470:	2301      	movs	r3, #1
   18472:	0002      	movs	r2, r0
   18474:	f7ff f98a 	bl	1778c <_vfprintf_r+0x28c>
   18478:	2207      	movs	r2, #7
   1847a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1847c:	3307      	adds	r3, #7
   1847e:	4393      	bics	r3, r2
   18480:	3201      	adds	r2, #1
   18482:	4694      	mov	ip, r2
   18484:	449c      	add	ip, r3
   18486:	4662      	mov	r2, ip
   18488:	920f      	str	r2, [sp, #60]	; 0x3c
   1848a:	681a      	ldr	r2, [r3, #0]
   1848c:	685b      	ldr	r3, [r3, #4]
   1848e:	920c      	str	r2, [sp, #48]	; 0x30
   18490:	930d      	str	r3, [sp, #52]	; 0x34
   18492:	f7ff f966 	bl	17762 <_vfprintf_r+0x262>
   18496:	003a      	movs	r2, r7
   18498:	4659      	mov	r1, fp
   1849a:	9806      	ldr	r0, [sp, #24]
   1849c:	f003 fb4c 	bl	1bb38 <__sprint_r>
   184a0:	2800      	cmp	r0, #0
   184a2:	d000      	beq.n	184a6 <_vfprintf_r+0xfa6>
   184a4:	e5bc      	b.n	18020 <_vfprintf_r+0xb20>
   184a6:	68bc      	ldr	r4, [r7, #8]
   184a8:	ae32      	add	r6, sp, #200	; 0xc8
   184aa:	f7ff fbe2 	bl	17c72 <_vfprintf_r+0x772>
   184ae:	46c0      	nop			; (mov r8, r8)
   184b0:	0001e274 	.word	0x0001e274
   184b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   184b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   184b8:	2300      	movs	r3, #0
   184ba:	4242      	negs	r2, r0
   184bc:	418b      	sbcs	r3, r1
   184be:	0011      	movs	r1, r2
   184c0:	001a      	movs	r2, r3
   184c2:	232d      	movs	r3, #45	; 0x2d
   184c4:	a816      	add	r0, sp, #88	; 0x58
   184c6:	77c3      	strb	r3, [r0, #31]
   184c8:	0008      	movs	r0, r1
   184ca:	4310      	orrs	r0, r2
   184cc:	910c      	str	r1, [sp, #48]	; 0x30
   184ce:	920d      	str	r2, [sp, #52]	; 0x34
   184d0:	4698      	mov	r8, r3
   184d2:	0002      	movs	r2, r0
   184d4:	3b2c      	subs	r3, #44	; 0x2c
   184d6:	f7ff f95d 	bl	17794 <_vfprintf_r+0x294>
   184da:	9916      	ldr	r1, [sp, #88]	; 0x58
   184dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   184de:	000a      	movs	r2, r1
   184e0:	0008      	movs	r0, r1
   184e2:	002b      	movs	r3, r5
   184e4:	0029      	movs	r1, r5
   184e6:	f003 fdc1 	bl	1c06c <__aeabi_dcmpun>
   184ea:	2800      	cmp	r0, #0
   184ec:	d000      	beq.n	184f0 <_vfprintf_r+0xff0>
   184ee:	e2c6      	b.n	18a7e <_vfprintf_r+0x157e>
   184f0:	4653      	mov	r3, sl
   184f2:	3301      	adds	r3, #1
   184f4:	d100      	bne.n	184f8 <_vfprintf_r+0xff8>
   184f6:	e09f      	b.n	18638 <_vfprintf_r+0x1138>
   184f8:	2320      	movs	r3, #32
   184fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   184fc:	439a      	bics	r2, r3
   184fe:	920e      	str	r2, [sp, #56]	; 0x38
   18500:	2a47      	cmp	r2, #71	; 0x47
   18502:	d100      	bne.n	18506 <_vfprintf_r+0x1006>
   18504:	e1a1      	b.n	1884a <_vfprintf_r+0x134a>
   18506:	2380      	movs	r3, #128	; 0x80
   18508:	005b      	lsls	r3, r3, #1
   1850a:	4323      	orrs	r3, r4
   1850c:	9309      	str	r3, [sp, #36]	; 0x24
   1850e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18510:	2b00      	cmp	r3, #0
   18512:	da00      	bge.n	18516 <_vfprintf_r+0x1016>
   18514:	e1ed      	b.n	188f2 <_vfprintf_r+0x13f2>
   18516:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18518:	9308      	str	r3, [sp, #32]
   1851a:	2300      	movs	r3, #0
   1851c:	4691      	mov	r9, r2
   1851e:	9310      	str	r3, [sp, #64]	; 0x40
   18520:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18522:	2b66      	cmp	r3, #102	; 0x66
   18524:	d100      	bne.n	18528 <_vfprintf_r+0x1028>
   18526:	e1b8      	b.n	1889a <_vfprintf_r+0x139a>
   18528:	2b46      	cmp	r3, #70	; 0x46
   1852a:	d100      	bne.n	1852e <_vfprintf_r+0x102e>
   1852c:	e237      	b.n	1899e <_vfprintf_r+0x149e>
   1852e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18530:	9806      	ldr	r0, [sp, #24]
   18532:	3a45      	subs	r2, #69	; 0x45
   18534:	0013      	movs	r3, r2
   18536:	4259      	negs	r1, r3
   18538:	4159      	adcs	r1, r3
   1853a:	ab20      	add	r3, sp, #128	; 0x80
   1853c:	000d      	movs	r5, r1
   1853e:	9303      	str	r3, [sp, #12]
   18540:	ab1f      	add	r3, sp, #124	; 0x7c
   18542:	9302      	str	r3, [sp, #8]
   18544:	2302      	movs	r3, #2
   18546:	aa23      	add	r2, sp, #140	; 0x8c
   18548:	4455      	add	r5, sl
   1854a:	921b      	str	r2, [sp, #108]	; 0x6c
   1854c:	9204      	str	r2, [sp, #16]
   1854e:	9300      	str	r3, [sp, #0]
   18550:	9501      	str	r5, [sp, #4]
   18552:	9b08      	ldr	r3, [sp, #32]
   18554:	464a      	mov	r2, r9
   18556:	f000 fcab 	bl	18eb0 <_dtoa_r>
   1855a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1855c:	9011      	str	r0, [sp, #68]	; 0x44
   1855e:	2b67      	cmp	r3, #103	; 0x67
   18560:	d000      	beq.n	18564 <_vfprintf_r+0x1064>
   18562:	e20b      	b.n	1897c <_vfprintf_r+0x147c>
   18564:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18566:	4698      	mov	r8, r3
   18568:	44a8      	add	r8, r5
   1856a:	07e3      	lsls	r3, r4, #31
   1856c:	d400      	bmi.n	18570 <_vfprintf_r+0x1070>
   1856e:	e277      	b.n	18a60 <_vfprintf_r+0x1560>
   18570:	2300      	movs	r3, #0
   18572:	2200      	movs	r2, #0
   18574:	4648      	mov	r0, r9
   18576:	9908      	ldr	r1, [sp, #32]
   18578:	f7fd f828 	bl	155cc <__aeabi_dcmpeq>
   1857c:	4643      	mov	r3, r8
   1857e:	2800      	cmp	r0, #0
   18580:	d10a      	bne.n	18598 <_vfprintf_r+0x1098>
   18582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18584:	4543      	cmp	r3, r8
   18586:	d207      	bcs.n	18598 <_vfprintf_r+0x1098>
   18588:	2130      	movs	r1, #48	; 0x30
   1858a:	4640      	mov	r0, r8
   1858c:	1c5a      	adds	r2, r3, #1
   1858e:	9223      	str	r2, [sp, #140]	; 0x8c
   18590:	7019      	strb	r1, [r3, #0]
   18592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18594:	4298      	cmp	r0, r3
   18596:	d8f9      	bhi.n	1858c <_vfprintf_r+0x108c>
   18598:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1859a:	1a9b      	subs	r3, r3, r2
   1859c:	9314      	str	r3, [sp, #80]	; 0x50
   1859e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   185a0:	2b47      	cmp	r3, #71	; 0x47
   185a2:	d100      	bne.n	185a6 <_vfprintf_r+0x10a6>
   185a4:	e0d0      	b.n	18748 <_vfprintf_r+0x1248>
   185a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   185a8:	2b65      	cmp	r3, #101	; 0x65
   185aa:	dc00      	bgt.n	185ae <_vfprintf_r+0x10ae>
   185ac:	e2d5      	b.n	18b5a <_vfprintf_r+0x165a>
   185ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   185b0:	2b66      	cmp	r3, #102	; 0x66
   185b2:	d100      	bne.n	185b6 <_vfprintf_r+0x10b6>
   185b4:	e1c6      	b.n	18944 <_vfprintf_r+0x1444>
   185b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   185b8:	9313      	str	r3, [sp, #76]	; 0x4c
   185ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
   185bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   185be:	0019      	movs	r1, r3
   185c0:	4291      	cmp	r1, r2
   185c2:	dd00      	ble.n	185c6 <_vfprintf_r+0x10c6>
   185c4:	e1a0      	b.n	18908 <_vfprintf_r+0x1408>
   185c6:	07e3      	lsls	r3, r4, #31
   185c8:	d500      	bpl.n	185cc <_vfprintf_r+0x10cc>
   185ca:	e242      	b.n	18a52 <_vfprintf_r+0x1552>
   185cc:	43d3      	mvns	r3, r2
   185ce:	17db      	asrs	r3, r3, #31
   185d0:	0011      	movs	r1, r2
   185d2:	401a      	ands	r2, r3
   185d4:	2367      	movs	r3, #103	; 0x67
   185d6:	9208      	str	r2, [sp, #32]
   185d8:	910e      	str	r1, [sp, #56]	; 0x38
   185da:	9312      	str	r3, [sp, #72]	; 0x48
   185dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   185de:	2b00      	cmp	r3, #0
   185e0:	d000      	beq.n	185e4 <_vfprintf_r+0x10e4>
   185e2:	e0a9      	b.n	18738 <_vfprintf_r+0x1238>
   185e4:	ab16      	add	r3, sp, #88	; 0x58
   185e6:	7fdb      	ldrb	r3, [r3, #31]
   185e8:	4698      	mov	r8, r3
   185ea:	2300      	movs	r3, #0
   185ec:	469a      	mov	sl, r3
   185ee:	f7ff f8fc 	bl	177ea <_vfprintf_r+0x2ea>
   185f2:	46cb      	mov	fp, r9
   185f4:	46a1      	mov	r9, r4
   185f6:	0014      	movs	r4, r2
   185f8:	e637      	b.n	1826a <_vfprintf_r+0xd6a>
   185fa:	464b      	mov	r3, r9
   185fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   185fe:	f002 f875 	bl	1a6ec <__retarget_lock_release_recursive>
   18602:	2301      	movs	r3, #1
   18604:	425b      	negs	r3, r3
   18606:	930a      	str	r3, [sp, #40]	; 0x28
   18608:	f7ff f82b 	bl	17662 <_vfprintf_r+0x162>
   1860c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1860e:	07d2      	lsls	r2, r2, #31
   18610:	d400      	bmi.n	18614 <_vfprintf_r+0x1114>
   18612:	e68f      	b.n	18334 <_vfprintf_r+0xe34>
   18614:	e680      	b.n	18318 <_vfprintf_r+0xe18>
   18616:	3608      	adds	r6, #8
   18618:	e679      	b.n	1830e <_vfprintf_r+0xe0e>
   1861a:	68bc      	ldr	r4, [r7, #8]
   1861c:	f7ff fb73 	bl	17d06 <_vfprintf_r+0x806>
   18620:	003a      	movs	r2, r7
   18622:	4659      	mov	r1, fp
   18624:	9806      	ldr	r0, [sp, #24]
   18626:	f003 fa87 	bl	1bb38 <__sprint_r>
   1862a:	2800      	cmp	r0, #0
   1862c:	d000      	beq.n	18630 <_vfprintf_r+0x1130>
   1862e:	e4f7      	b.n	18020 <_vfprintf_r+0xb20>
   18630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18632:	68bc      	ldr	r4, [r7, #8]
   18634:	ae32      	add	r6, sp, #200	; 0xc8
   18636:	e67d      	b.n	18334 <_vfprintf_r+0xe34>
   18638:	2320      	movs	r3, #32
   1863a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1863c:	439a      	bics	r2, r3
   1863e:	3b1a      	subs	r3, #26
   18640:	920e      	str	r2, [sp, #56]	; 0x38
   18642:	469a      	mov	sl, r3
   18644:	e75f      	b.n	18506 <_vfprintf_r+0x1006>
   18646:	232d      	movs	r3, #45	; 0x2d
   18648:	aa16      	add	r2, sp, #88	; 0x58
   1864a:	77d3      	strb	r3, [r2, #31]
   1864c:	4698      	mov	r8, r3
   1864e:	f7ff faa8 	bl	17ba2 <_vfprintf_r+0x6a2>
   18652:	003a      	movs	r2, r7
   18654:	4659      	mov	r1, fp
   18656:	9806      	ldr	r0, [sp, #24]
   18658:	f003 fa6e 	bl	1bb38 <__sprint_r>
   1865c:	2800      	cmp	r0, #0
   1865e:	d000      	beq.n	18662 <_vfprintf_r+0x1162>
   18660:	e4de      	b.n	18020 <_vfprintf_r+0xb20>
   18662:	ae32      	add	r6, sp, #200	; 0xc8
   18664:	e419      	b.n	17e9a <_vfprintf_r+0x99a>
   18666:	4be3      	ldr	r3, [pc, #908]	; (189f4 <_vfprintf_r+0x14f4>)
   18668:	3401      	adds	r4, #1
   1866a:	6033      	str	r3, [r6, #0]
   1866c:	2301      	movs	r3, #1
   1866e:	6073      	str	r3, [r6, #4]
   18670:	687b      	ldr	r3, [r7, #4]
   18672:	60bc      	str	r4, [r7, #8]
   18674:	3301      	adds	r3, #1
   18676:	607b      	str	r3, [r7, #4]
   18678:	2b07      	cmp	r3, #7
   1867a:	dd00      	ble.n	1867e <_vfprintf_r+0x117e>
   1867c:	e155      	b.n	1892a <_vfprintf_r+0x142a>
   1867e:	3608      	adds	r6, #8
   18680:	2800      	cmp	r0, #0
   18682:	d107      	bne.n	18694 <_vfprintf_r+0x1194>
   18684:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18686:	2b00      	cmp	r3, #0
   18688:	d104      	bne.n	18694 <_vfprintf_r+0x1194>
   1868a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1868c:	07db      	lsls	r3, r3, #31
   1868e:	d401      	bmi.n	18694 <_vfprintf_r+0x1194>
   18690:	f7ff fb39 	bl	17d06 <_vfprintf_r+0x806>
   18694:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18696:	6033      	str	r3, [r6, #0]
   18698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1869a:	1919      	adds	r1, r3, r4
   1869c:	6073      	str	r3, [r6, #4]
   1869e:	687b      	ldr	r3, [r7, #4]
   186a0:	60b9      	str	r1, [r7, #8]
   186a2:	3301      	adds	r3, #1
   186a4:	607b      	str	r3, [r7, #4]
   186a6:	2b07      	cmp	r3, #7
   186a8:	dd00      	ble.n	186ac <_vfprintf_r+0x11ac>
   186aa:	e1c4      	b.n	18a36 <_vfprintf_r+0x1536>
   186ac:	0032      	movs	r2, r6
   186ae:	3208      	adds	r2, #8
   186b0:	2800      	cmp	r0, #0
   186b2:	da00      	bge.n	186b6 <_vfprintf_r+0x11b6>
   186b4:	e195      	b.n	189e2 <_vfprintf_r+0x14e2>
   186b6:	9811      	ldr	r0, [sp, #68]	; 0x44
   186b8:	3301      	adds	r3, #1
   186ba:	6010      	str	r0, [r2, #0]
   186bc:	9814      	ldr	r0, [sp, #80]	; 0x50
   186be:	607b      	str	r3, [r7, #4]
   186c0:	1844      	adds	r4, r0, r1
   186c2:	6050      	str	r0, [r2, #4]
   186c4:	60bc      	str	r4, [r7, #8]
   186c6:	2b07      	cmp	r3, #7
   186c8:	dd01      	ble.n	186ce <_vfprintf_r+0x11ce>
   186ca:	f7ff fbc2 	bl	17e52 <_vfprintf_r+0x952>
   186ce:	3208      	adds	r2, #8
   186d0:	0016      	movs	r6, r2
   186d2:	f7ff fb18 	bl	17d06 <_vfprintf_r+0x806>
   186d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   186d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   186da:	680b      	ldr	r3, [r1, #0]
   186dc:	601a      	str	r2, [r3, #0]
   186de:	17d2      	asrs	r2, r2, #31
   186e0:	605a      	str	r2, [r3, #4]
   186e2:	000b      	movs	r3, r1
   186e4:	3304      	adds	r3, #4
   186e6:	930f      	str	r3, [sp, #60]	; 0x3c
   186e8:	f7fe ff58 	bl	1759c <_vfprintf_r+0x9c>
   186ec:	464b      	mov	r3, r9
   186ee:	9a07      	ldr	r2, [sp, #28]
   186f0:	431c      	orrs	r4, r3
   186f2:	3201      	adds	r2, #1
   186f4:	7813      	ldrb	r3, [r2, #0]
   186f6:	9207      	str	r2, [sp, #28]
   186f8:	f7fe ff8b 	bl	17612 <_vfprintf_r+0x112>
   186fc:	003a      	movs	r2, r7
   186fe:	4659      	mov	r1, fp
   18700:	9806      	ldr	r0, [sp, #24]
   18702:	f003 fa19 	bl	1bb38 <__sprint_r>
   18706:	2800      	cmp	r0, #0
   18708:	d000      	beq.n	1870c <_vfprintf_r+0x120c>
   1870a:	e489      	b.n	18020 <_vfprintf_r+0xb20>
   1870c:	68bc      	ldr	r4, [r7, #8]
   1870e:	ae32      	add	r6, sp, #200	; 0xc8
   18710:	f7ff fbdc 	bl	17ecc <_vfprintf_r+0x9cc>
   18714:	4bb8      	ldr	r3, [pc, #736]	; (189f8 <_vfprintf_r+0x14f8>)
   18716:	9311      	str	r3, [sp, #68]	; 0x44
   18718:	f7ff fa4a 	bl	17bb0 <_vfprintf_r+0x6b0>
   1871c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1871e:	ab32      	add	r3, sp, #200	; 0xc8
   18720:	1a9b      	subs	r3, r3, r2
   18722:	930e      	str	r3, [sp, #56]	; 0x38
   18724:	f7ff f859 	bl	177da <_vfprintf_r+0x2da>
   18728:	9811      	ldr	r0, [sp, #68]	; 0x44
   1872a:	f7fd fb05 	bl	15d38 <strlen>
   1872e:	0002      	movs	r2, r0
   18730:	900e      	str	r0, [sp, #56]	; 0x38
   18732:	0003      	movs	r3, r0
   18734:	f7ff f9a1 	bl	17a7a <_vfprintf_r+0x57a>
   18738:	232d      	movs	r3, #45	; 0x2d
   1873a:	aa16      	add	r2, sp, #88	; 0x58
   1873c:	77d3      	strb	r3, [r2, #31]
   1873e:	4698      	mov	r8, r3
   18740:	2300      	movs	r3, #0
   18742:	469a      	mov	sl, r3
   18744:	f7ff f854 	bl	177f0 <_vfprintf_r+0x2f0>
   18748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1874a:	9313      	str	r3, [sp, #76]	; 0x4c
   1874c:	1cda      	adds	r2, r3, #3
   1874e:	db02      	blt.n	18756 <_vfprintf_r+0x1256>
   18750:	459a      	cmp	sl, r3
   18752:	db00      	blt.n	18756 <_vfprintf_r+0x1256>
   18754:	e731      	b.n	185ba <_vfprintf_r+0x10ba>
   18756:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18758:	3b02      	subs	r3, #2
   1875a:	9312      	str	r3, [sp, #72]	; 0x48
   1875c:	222c      	movs	r2, #44	; 0x2c
   1875e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18760:	2148      	movs	r1, #72	; 0x48
   18762:	1e5d      	subs	r5, r3, #1
   18764:	ab16      	add	r3, sp, #88	; 0x58
   18766:	189b      	adds	r3, r3, r2
   18768:	466a      	mov	r2, sp
   1876a:	1852      	adds	r2, r2, r1
   1876c:	7812      	ldrb	r2, [r2, #0]
   1876e:	951f      	str	r5, [sp, #124]	; 0x7c
   18770:	701a      	strb	r2, [r3, #0]
   18772:	2d00      	cmp	r5, #0
   18774:	da00      	bge.n	18778 <_vfprintf_r+0x1278>
   18776:	e1cb      	b.n	18b10 <_vfprintf_r+0x1610>
   18778:	212d      	movs	r1, #45	; 0x2d
   1877a:	232b      	movs	r3, #43	; 0x2b
   1877c:	aa16      	add	r2, sp, #88	; 0x58
   1877e:	1852      	adds	r2, r2, r1
   18780:	7013      	strb	r3, [r2, #0]
   18782:	2d09      	cmp	r5, #9
   18784:	dc00      	bgt.n	18788 <_vfprintf_r+0x1288>
   18786:	e16d      	b.n	18a64 <_vfprintf_r+0x1564>
   18788:	aa16      	add	r2, sp, #88	; 0x58
   1878a:	233b      	movs	r3, #59	; 0x3b
   1878c:	4694      	mov	ip, r2
   1878e:	4463      	add	r3, ip
   18790:	469a      	mov	sl, r3
   18792:	46b1      	mov	r9, r6
   18794:	46a0      	mov	r8, r4
   18796:	4656      	mov	r6, sl
   18798:	e000      	b.n	1879c <_vfprintf_r+0x129c>
   1879a:	0026      	movs	r6, r4
   1879c:	0028      	movs	r0, r5
   1879e:	210a      	movs	r1, #10
   187a0:	f7fa f924 	bl	129ec <__aeabi_idivmod>
   187a4:	1e74      	subs	r4, r6, #1
   187a6:	3130      	adds	r1, #48	; 0x30
   187a8:	7021      	strb	r1, [r4, #0]
   187aa:	0028      	movs	r0, r5
   187ac:	210a      	movs	r1, #10
   187ae:	f7fa f837 	bl	12820 <__divsi3>
   187b2:	0005      	movs	r5, r0
   187b4:	2809      	cmp	r0, #9
   187b6:	dcf0      	bgt.n	1879a <_vfprintf_r+0x129a>
   187b8:	0023      	movs	r3, r4
   187ba:	4644      	mov	r4, r8
   187bc:	46b0      	mov	r8, r6
   187be:	464e      	mov	r6, r9
   187c0:	4699      	mov	r9, r3
   187c2:	0003      	movs	r3, r0
   187c4:	3330      	adds	r3, #48	; 0x30
   187c6:	b2d8      	uxtb	r0, r3
   187c8:	4643      	mov	r3, r8
   187ca:	3b02      	subs	r3, #2
   187cc:	7018      	strb	r0, [r3, #0]
   187ce:	459a      	cmp	sl, r3
   187d0:	d800      	bhi.n	187d4 <_vfprintf_r+0x12d4>
   187d2:	e1f6      	b.n	18bc2 <_vfprintf_r+0x16c2>
   187d4:	4642      	mov	r2, r8
   187d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   187d8:	4645      	mov	r5, r8
   187da:	1a99      	subs	r1, r3, r2
   187dc:	2301      	movs	r3, #1
   187de:	3107      	adds	r1, #7
   187e0:	425b      	negs	r3, r3
   187e2:	e001      	b.n	187e8 <_vfprintf_r+0x12e8>
   187e4:	5ce8      	ldrb	r0, [r5, r3]
   187e6:	3301      	adds	r3, #1
   187e8:	aa21      	add	r2, sp, #132	; 0x84
   187ea:	18d2      	adds	r2, r2, r3
   187ec:	70d0      	strb	r0, [r2, #3]
   187ee:	428b      	cmp	r3, r1
   187f0:	d1f8      	bne.n	187e4 <_vfprintf_r+0x12e4>
   187f2:	a916      	add	r1, sp, #88	; 0x58
   187f4:	468c      	mov	ip, r1
   187f6:	222e      	movs	r2, #46	; 0x2e
   187f8:	464b      	mov	r3, r9
   187fa:	4462      	add	r2, ip
   187fc:	4694      	mov	ip, r2
   187fe:	1afb      	subs	r3, r7, r3
   18800:	4463      	add	r3, ip
   18802:	aa21      	add	r2, sp, #132	; 0x84
   18804:	9914      	ldr	r1, [sp, #80]	; 0x50
   18806:	1a9b      	subs	r3, r3, r2
   18808:	469c      	mov	ip, r3
   1880a:	000a      	movs	r2, r1
   1880c:	4462      	add	r2, ip
   1880e:	931a      	str	r3, [sp, #104]	; 0x68
   18810:	920e      	str	r2, [sp, #56]	; 0x38
   18812:	2901      	cmp	r1, #1
   18814:	dc00      	bgt.n	18818 <_vfprintf_r+0x1318>
   18816:	e170      	b.n	18afa <_vfprintf_r+0x15fa>
   18818:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1881a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1881c:	4694      	mov	ip, r2
   1881e:	4463      	add	r3, ip
   18820:	001a      	movs	r2, r3
   18822:	930e      	str	r3, [sp, #56]	; 0x38
   18824:	43db      	mvns	r3, r3
   18826:	17db      	asrs	r3, r3, #31
   18828:	401a      	ands	r2, r3
   1882a:	2300      	movs	r3, #0
   1882c:	9208      	str	r2, [sp, #32]
   1882e:	9313      	str	r3, [sp, #76]	; 0x4c
   18830:	e6d4      	b.n	185dc <_vfprintf_r+0x10dc>
   18832:	003a      	movs	r2, r7
   18834:	4659      	mov	r1, fp
   18836:	9806      	ldr	r0, [sp, #24]
   18838:	f003 f97e 	bl	1bb38 <__sprint_r>
   1883c:	2800      	cmp	r0, #0
   1883e:	d001      	beq.n	18844 <_vfprintf_r+0x1344>
   18840:	f7ff fbee 	bl	18020 <_vfprintf_r+0xb20>
   18844:	68bc      	ldr	r4, [r7, #8]
   18846:	ae32      	add	r6, sp, #200	; 0xc8
   18848:	e46a      	b.n	18120 <_vfprintf_r+0xc20>
   1884a:	4653      	mov	r3, sl
   1884c:	2b00      	cmp	r3, #0
   1884e:	d000      	beq.n	18852 <_vfprintf_r+0x1352>
   18850:	e659      	b.n	18506 <_vfprintf_r+0x1006>
   18852:	3301      	adds	r3, #1
   18854:	469a      	mov	sl, r3
   18856:	e656      	b.n	18506 <_vfprintf_r+0x1006>
   18858:	4653      	mov	r3, sl
   1885a:	9308      	str	r3, [sp, #32]
   1885c:	2b06      	cmp	r3, #6
   1885e:	d901      	bls.n	18864 <_vfprintf_r+0x1364>
   18860:	2306      	movs	r3, #6
   18862:	9308      	str	r3, [sp, #32]
   18864:	9b08      	ldr	r3, [sp, #32]
   18866:	950f      	str	r5, [sp, #60]	; 0x3c
   18868:	930e      	str	r3, [sp, #56]	; 0x38
   1886a:	2300      	movs	r3, #0
   1886c:	4698      	mov	r8, r3
   1886e:	469a      	mov	sl, r3
   18870:	9313      	str	r3, [sp, #76]	; 0x4c
   18872:	4b62      	ldr	r3, [pc, #392]	; (189fc <_vfprintf_r+0x14fc>)
   18874:	9409      	str	r4, [sp, #36]	; 0x24
   18876:	9311      	str	r3, [sp, #68]	; 0x44
   18878:	f7fe ffbd 	bl	177f6 <_vfprintf_r+0x2f6>
   1887c:	003a      	movs	r2, r7
   1887e:	4659      	mov	r1, fp
   18880:	9806      	ldr	r0, [sp, #24]
   18882:	f003 f959 	bl	1bb38 <__sprint_r>
   18886:	2800      	cmp	r0, #0
   18888:	d001      	beq.n	1888e <_vfprintf_r+0x138e>
   1888a:	f7ff fbc9 	bl	18020 <_vfprintf_r+0xb20>
   1888e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18890:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   18892:	68bc      	ldr	r4, [r7, #8]
   18894:	1a9b      	subs	r3, r3, r2
   18896:	ae32      	add	r6, sp, #200	; 0xc8
   18898:	e567      	b.n	1836a <_vfprintf_r+0xe6a>
   1889a:	ab23      	add	r3, sp, #140	; 0x8c
   1889c:	931b      	str	r3, [sp, #108]	; 0x6c
   1889e:	9304      	str	r3, [sp, #16]
   188a0:	ab20      	add	r3, sp, #128	; 0x80
   188a2:	9303      	str	r3, [sp, #12]
   188a4:	ab1f      	add	r3, sp, #124	; 0x7c
   188a6:	9302      	str	r3, [sp, #8]
   188a8:	4653      	mov	r3, sl
   188aa:	9301      	str	r3, [sp, #4]
   188ac:	2303      	movs	r3, #3
   188ae:	464a      	mov	r2, r9
   188b0:	9300      	str	r3, [sp, #0]
   188b2:	9806      	ldr	r0, [sp, #24]
   188b4:	9b08      	ldr	r3, [sp, #32]
   188b6:	f000 fafb 	bl	18eb0 <_dtoa_r>
   188ba:	0003      	movs	r3, r0
   188bc:	4453      	add	r3, sl
   188be:	4698      	mov	r8, r3
   188c0:	4655      	mov	r5, sl
   188c2:	9011      	str	r0, [sp, #68]	; 0x44
   188c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   188c6:	781b      	ldrb	r3, [r3, #0]
   188c8:	2b30      	cmp	r3, #48	; 0x30
   188ca:	d002      	beq.n	188d2 <_vfprintf_r+0x13d2>
   188cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   188ce:	4498      	add	r8, r3
   188d0:	e64e      	b.n	18570 <_vfprintf_r+0x1070>
   188d2:	2200      	movs	r2, #0
   188d4:	2300      	movs	r3, #0
   188d6:	4648      	mov	r0, r9
   188d8:	9908      	ldr	r1, [sp, #32]
   188da:	f7fc fe77 	bl	155cc <__aeabi_dcmpeq>
   188de:	2800      	cmp	r0, #0
   188e0:	d1f4      	bne.n	188cc <_vfprintf_r+0x13cc>
   188e2:	2301      	movs	r3, #1
   188e4:	1b5b      	subs	r3, r3, r5
   188e6:	931f      	str	r3, [sp, #124]	; 0x7c
   188e8:	4498      	add	r8, r3
   188ea:	e641      	b.n	18570 <_vfprintf_r+0x1070>
   188ec:	46c1      	mov	r9, r8
   188ee:	f7ff fb1f 	bl	17f30 <_vfprintf_r+0xa30>
   188f2:	2280      	movs	r2, #128	; 0x80
   188f4:	0612      	lsls	r2, r2, #24
   188f6:	4694      	mov	ip, r2
   188f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   188fa:	4699      	mov	r9, r3
   188fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   188fe:	4463      	add	r3, ip
   18900:	9308      	str	r3, [sp, #32]
   18902:	232d      	movs	r3, #45	; 0x2d
   18904:	9310      	str	r3, [sp, #64]	; 0x40
   18906:	e60b      	b.n	18520 <_vfprintf_r+0x1020>
   18908:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1890a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1890c:	4694      	mov	ip, r2
   1890e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18910:	4463      	add	r3, ip
   18912:	930e      	str	r3, [sp, #56]	; 0x38
   18914:	2a00      	cmp	r2, #0
   18916:	dc00      	bgt.n	1891a <_vfprintf_r+0x141a>
   18918:	e0e3      	b.n	18ae2 <_vfprintf_r+0x15e2>
   1891a:	001a      	movs	r2, r3
   1891c:	43db      	mvns	r3, r3
   1891e:	17db      	asrs	r3, r3, #31
   18920:	401a      	ands	r2, r3
   18922:	2367      	movs	r3, #103	; 0x67
   18924:	9208      	str	r2, [sp, #32]
   18926:	9312      	str	r3, [sp, #72]	; 0x48
   18928:	e658      	b.n	185dc <_vfprintf_r+0x10dc>
   1892a:	003a      	movs	r2, r7
   1892c:	4659      	mov	r1, fp
   1892e:	9806      	ldr	r0, [sp, #24]
   18930:	f003 f902 	bl	1bb38 <__sprint_r>
   18934:	2800      	cmp	r0, #0
   18936:	d001      	beq.n	1893c <_vfprintf_r+0x143c>
   18938:	f7ff fb72 	bl	18020 <_vfprintf_r+0xb20>
   1893c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1893e:	68bc      	ldr	r4, [r7, #8]
   18940:	ae32      	add	r6, sp, #200	; 0xc8
   18942:	e69d      	b.n	18680 <_vfprintf_r+0x1180>
   18944:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18946:	9313      	str	r3, [sp, #76]	; 0x4c
   18948:	2b00      	cmp	r3, #0
   1894a:	dc00      	bgt.n	1894e <_vfprintf_r+0x144e>
   1894c:	e0f2      	b.n	18b34 <_vfprintf_r+0x1634>
   1894e:	4652      	mov	r2, sl
   18950:	2a00      	cmp	r2, #0
   18952:	d000      	beq.n	18956 <_vfprintf_r+0x1456>
   18954:	e0a0      	b.n	18a98 <_vfprintf_r+0x1598>
   18956:	07e2      	lsls	r2, r4, #31
   18958:	d500      	bpl.n	1895c <_vfprintf_r+0x145c>
   1895a:	e09d      	b.n	18a98 <_vfprintf_r+0x1598>
   1895c:	9308      	str	r3, [sp, #32]
   1895e:	930e      	str	r3, [sp, #56]	; 0x38
   18960:	e63c      	b.n	185dc <_vfprintf_r+0x10dc>
   18962:	ab16      	add	r3, sp, #88	; 0x58
   18964:	7fdb      	ldrb	r3, [r3, #31]
   18966:	950f      	str	r5, [sp, #60]	; 0x3c
   18968:	4698      	mov	r8, r3
   1896a:	4653      	mov	r3, sl
   1896c:	9308      	str	r3, [sp, #32]
   1896e:	930e      	str	r3, [sp, #56]	; 0x38
   18970:	2300      	movs	r3, #0
   18972:	9409      	str	r4, [sp, #36]	; 0x24
   18974:	469a      	mov	sl, r3
   18976:	9313      	str	r3, [sp, #76]	; 0x4c
   18978:	f7fe ff37 	bl	177ea <_vfprintf_r+0x2ea>
   1897c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1897e:	4698      	mov	r8, r3
   18980:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18982:	44a8      	add	r8, r5
   18984:	2b47      	cmp	r3, #71	; 0x47
   18986:	d000      	beq.n	1898a <_vfprintf_r+0x148a>
   18988:	e5f2      	b.n	18570 <_vfprintf_r+0x1070>
   1898a:	07e3      	lsls	r3, r4, #31
   1898c:	d400      	bmi.n	18990 <_vfprintf_r+0x1490>
   1898e:	e0dc      	b.n	18b4a <_vfprintf_r+0x164a>
   18990:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18992:	4698      	mov	r8, r3
   18994:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18996:	44a8      	add	r8, r5
   18998:	2b46      	cmp	r3, #70	; 0x46
   1899a:	d093      	beq.n	188c4 <_vfprintf_r+0x13c4>
   1899c:	e5e8      	b.n	18570 <_vfprintf_r+0x1070>
   1899e:	ab23      	add	r3, sp, #140	; 0x8c
   189a0:	931b      	str	r3, [sp, #108]	; 0x6c
   189a2:	9304      	str	r3, [sp, #16]
   189a4:	ab20      	add	r3, sp, #128	; 0x80
   189a6:	9303      	str	r3, [sp, #12]
   189a8:	ab1f      	add	r3, sp, #124	; 0x7c
   189aa:	9302      	str	r3, [sp, #8]
   189ac:	4653      	mov	r3, sl
   189ae:	9301      	str	r3, [sp, #4]
   189b0:	2303      	movs	r3, #3
   189b2:	464a      	mov	r2, r9
   189b4:	9300      	str	r3, [sp, #0]
   189b6:	9806      	ldr	r0, [sp, #24]
   189b8:	9b08      	ldr	r3, [sp, #32]
   189ba:	f000 fa79 	bl	18eb0 <_dtoa_r>
   189be:	4655      	mov	r5, sl
   189c0:	9011      	str	r0, [sp, #68]	; 0x44
   189c2:	e7e5      	b.n	18990 <_vfprintf_r+0x1490>
   189c4:	003a      	movs	r2, r7
   189c6:	4659      	mov	r1, fp
   189c8:	9806      	ldr	r0, [sp, #24]
   189ca:	f003 f8b5 	bl	1bb38 <__sprint_r>
   189ce:	2800      	cmp	r0, #0
   189d0:	d101      	bne.n	189d6 <_vfprintf_r+0x14d6>
   189d2:	f7ff faab 	bl	17f2c <_vfprintf_r+0xa2c>
   189d6:	f7ff faab 	bl	17f30 <_vfprintf_r+0xa30>
   189da:	4642      	mov	r2, r8
   189dc:	9207      	str	r2, [sp, #28]
   189de:	f7fe fe1b 	bl	17618 <_vfprintf_r+0x118>
   189e2:	4244      	negs	r4, r0
   189e4:	3010      	adds	r0, #16
   189e6:	db00      	blt.n	189ea <_vfprintf_r+0x14ea>
   189e8:	e0d8      	b.n	18b9c <_vfprintf_r+0x169c>
   189ea:	4805      	ldr	r0, [pc, #20]	; (18a00 <_vfprintf_r+0x1500>)
   189ec:	2610      	movs	r6, #16
   189ee:	0005      	movs	r5, r0
   189f0:	e00c      	b.n	18a0c <_vfprintf_r+0x150c>
   189f2:	46c0      	nop			; (mov r8, r8)
   189f4:	0001dbd8 	.word	0x0001dbd8
   189f8:	0001e0a4 	.word	0x0001e0a4
   189fc:	0001e0d8 	.word	0x0001e0d8
   18a00:	0001e274 	.word	0x0001e274
   18a04:	3208      	adds	r2, #8
   18a06:	3c10      	subs	r4, #16
   18a08:	2c10      	cmp	r4, #16
   18a0a:	dd51      	ble.n	18ab0 <_vfprintf_r+0x15b0>
   18a0c:	3110      	adds	r1, #16
   18a0e:	3301      	adds	r3, #1
   18a10:	6015      	str	r5, [r2, #0]
   18a12:	6056      	str	r6, [r2, #4]
   18a14:	60b9      	str	r1, [r7, #8]
   18a16:	607b      	str	r3, [r7, #4]
   18a18:	2b07      	cmp	r3, #7
   18a1a:	ddf3      	ble.n	18a04 <_vfprintf_r+0x1504>
   18a1c:	003a      	movs	r2, r7
   18a1e:	4659      	mov	r1, fp
   18a20:	9806      	ldr	r0, [sp, #24]
   18a22:	f003 f889 	bl	1bb38 <__sprint_r>
   18a26:	2800      	cmp	r0, #0
   18a28:	d001      	beq.n	18a2e <_vfprintf_r+0x152e>
   18a2a:	f7ff faf9 	bl	18020 <_vfprintf_r+0xb20>
   18a2e:	68b9      	ldr	r1, [r7, #8]
   18a30:	687b      	ldr	r3, [r7, #4]
   18a32:	aa32      	add	r2, sp, #200	; 0xc8
   18a34:	e7e7      	b.n	18a06 <_vfprintf_r+0x1506>
   18a36:	003a      	movs	r2, r7
   18a38:	4659      	mov	r1, fp
   18a3a:	9806      	ldr	r0, [sp, #24]
   18a3c:	f003 f87c 	bl	1bb38 <__sprint_r>
   18a40:	2800      	cmp	r0, #0
   18a42:	d001      	beq.n	18a48 <_vfprintf_r+0x1548>
   18a44:	f7ff faec 	bl	18020 <_vfprintf_r+0xb20>
   18a48:	981f      	ldr	r0, [sp, #124]	; 0x7c
   18a4a:	68b9      	ldr	r1, [r7, #8]
   18a4c:	687b      	ldr	r3, [r7, #4]
   18a4e:	aa32      	add	r2, sp, #200	; 0xc8
   18a50:	e62e      	b.n	186b0 <_vfprintf_r+0x11b0>
   18a52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18a56:	4694      	mov	ip, r2
   18a58:	4463      	add	r3, ip
   18a5a:	001a      	movs	r2, r3
   18a5c:	930e      	str	r3, [sp, #56]	; 0x38
   18a5e:	e75d      	b.n	1891c <_vfprintf_r+0x141c>
   18a60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18a62:	e599      	b.n	18598 <_vfprintf_r+0x1098>
   18a64:	212e      	movs	r1, #46	; 0x2e
   18a66:	2330      	movs	r3, #48	; 0x30
   18a68:	aa16      	add	r2, sp, #88	; 0x58
   18a6a:	1852      	adds	r2, r2, r1
   18a6c:	7013      	strb	r3, [r2, #0]
   18a6e:	002b      	movs	r3, r5
   18a70:	aa16      	add	r2, sp, #88	; 0x58
   18a72:	3101      	adds	r1, #1
   18a74:	3330      	adds	r3, #48	; 0x30
   18a76:	1852      	adds	r2, r2, r1
   18a78:	7013      	strb	r3, [r2, #0]
   18a7a:	ab22      	add	r3, sp, #136	; 0x88
   18a7c:	e6c1      	b.n	18802 <_vfprintf_r+0x1302>
   18a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18a80:	2b00      	cmp	r3, #0
   18a82:	db52      	blt.n	18b2a <_vfprintf_r+0x162a>
   18a84:	ab16      	add	r3, sp, #88	; 0x58
   18a86:	7fdb      	ldrb	r3, [r3, #31]
   18a88:	4698      	mov	r8, r3
   18a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18a8c:	2b47      	cmp	r3, #71	; 0x47
   18a8e:	dc48      	bgt.n	18b22 <_vfprintf_r+0x1622>
   18a90:	4b4e      	ldr	r3, [pc, #312]	; (18bcc <_vfprintf_r+0x16cc>)
   18a92:	9311      	str	r3, [sp, #68]	; 0x44
   18a94:	f7ff f88c 	bl	17bb0 <_vfprintf_r+0x6b0>
   18a98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18a9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18a9c:	4694      	mov	ip, r2
   18a9e:	4463      	add	r3, ip
   18aa0:	4453      	add	r3, sl
   18aa2:	001a      	movs	r2, r3
   18aa4:	930e      	str	r3, [sp, #56]	; 0x38
   18aa6:	43db      	mvns	r3, r3
   18aa8:	17db      	asrs	r3, r3, #31
   18aaa:	401a      	ands	r2, r3
   18aac:	9208      	str	r2, [sp, #32]
   18aae:	e595      	b.n	185dc <_vfprintf_r+0x10dc>
   18ab0:	46a9      	mov	r9, r5
   18ab2:	4648      	mov	r0, r9
   18ab4:	1909      	adds	r1, r1, r4
   18ab6:	3301      	adds	r3, #1
   18ab8:	6010      	str	r0, [r2, #0]
   18aba:	6054      	str	r4, [r2, #4]
   18abc:	60b9      	str	r1, [r7, #8]
   18abe:	3208      	adds	r2, #8
   18ac0:	607b      	str	r3, [r7, #4]
   18ac2:	2b07      	cmp	r3, #7
   18ac4:	dc00      	bgt.n	18ac8 <_vfprintf_r+0x15c8>
   18ac6:	e5f6      	b.n	186b6 <_vfprintf_r+0x11b6>
   18ac8:	003a      	movs	r2, r7
   18aca:	4659      	mov	r1, fp
   18acc:	9806      	ldr	r0, [sp, #24]
   18ace:	f003 f833 	bl	1bb38 <__sprint_r>
   18ad2:	2800      	cmp	r0, #0
   18ad4:	d001      	beq.n	18ada <_vfprintf_r+0x15da>
   18ad6:	f7ff faa3 	bl	18020 <_vfprintf_r+0xb20>
   18ada:	68b9      	ldr	r1, [r7, #8]
   18adc:	687b      	ldr	r3, [r7, #4]
   18ade:	aa32      	add	r2, sp, #200	; 0xc8
   18ae0:	e5e9      	b.n	186b6 <_vfprintf_r+0x11b6>
   18ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18ae4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18ae6:	1a98      	subs	r0, r3, r2
   18ae8:	1c43      	adds	r3, r0, #1
   18aea:	001a      	movs	r2, r3
   18aec:	930e      	str	r3, [sp, #56]	; 0x38
   18aee:	e715      	b.n	1891c <_vfprintf_r+0x141c>
   18af0:	4a37      	ldr	r2, [pc, #220]	; (18bd0 <_vfprintf_r+0x16d0>)
   18af2:	687b      	ldr	r3, [r7, #4]
   18af4:	4691      	mov	r9, r2
   18af6:	f7ff fbf5 	bl	182e4 <_vfprintf_r+0xde4>
   18afa:	2301      	movs	r3, #1
   18afc:	4023      	ands	r3, r4
   18afe:	9313      	str	r3, [sp, #76]	; 0x4c
   18b00:	d000      	beq.n	18b04 <_vfprintf_r+0x1604>
   18b02:	e689      	b.n	18818 <_vfprintf_r+0x1318>
   18b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18b06:	43d3      	mvns	r3, r2
   18b08:	17db      	asrs	r3, r3, #31
   18b0a:	401a      	ands	r2, r3
   18b0c:	9208      	str	r2, [sp, #32]
   18b0e:	e565      	b.n	185dc <_vfprintf_r+0x10dc>
   18b10:	2301      	movs	r3, #1
   18b12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18b14:	391b      	subs	r1, #27
   18b16:	1a9d      	subs	r5, r3, r2
   18b18:	aa16      	add	r2, sp, #88	; 0x58
   18b1a:	332c      	adds	r3, #44	; 0x2c
   18b1c:	1852      	adds	r2, r2, r1
   18b1e:	7013      	strb	r3, [r2, #0]
   18b20:	e62f      	b.n	18782 <_vfprintf_r+0x1282>
   18b22:	4b2c      	ldr	r3, [pc, #176]	; (18bd4 <_vfprintf_r+0x16d4>)
   18b24:	9311      	str	r3, [sp, #68]	; 0x44
   18b26:	f7ff f843 	bl	17bb0 <_vfprintf_r+0x6b0>
   18b2a:	232d      	movs	r3, #45	; 0x2d
   18b2c:	aa16      	add	r2, sp, #88	; 0x58
   18b2e:	77d3      	strb	r3, [r2, #31]
   18b30:	4698      	mov	r8, r3
   18b32:	e7aa      	b.n	18a8a <_vfprintf_r+0x158a>
   18b34:	4653      	mov	r3, sl
   18b36:	2b00      	cmp	r3, #0
   18b38:	d101      	bne.n	18b3e <_vfprintf_r+0x163e>
   18b3a:	07e3      	lsls	r3, r4, #31
   18b3c:	d503      	bpl.n	18b46 <_vfprintf_r+0x1646>
   18b3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18b40:	1c58      	adds	r0, r3, #1
   18b42:	0003      	movs	r3, r0
   18b44:	e7ac      	b.n	18aa0 <_vfprintf_r+0x15a0>
   18b46:	2301      	movs	r3, #1
   18b48:	e708      	b.n	1895c <_vfprintf_r+0x145c>
   18b4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18b4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18b4e:	1a9b      	subs	r3, r3, r2
   18b50:	9314      	str	r3, [sp, #80]	; 0x50
   18b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18b54:	2b47      	cmp	r3, #71	; 0x47
   18b56:	d100      	bne.n	18b5a <_vfprintf_r+0x165a>
   18b58:	e5f6      	b.n	18748 <_vfprintf_r+0x1248>
   18b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18b5c:	9313      	str	r3, [sp, #76]	; 0x4c
   18b5e:	e5fd      	b.n	1875c <_vfprintf_r+0x125c>
   18b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18b62:	1d1d      	adds	r5, r3, #4
   18b64:	681b      	ldr	r3, [r3, #0]
   18b66:	46a8      	mov	r8, r5
   18b68:	469a      	mov	sl, r3
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	db0a      	blt.n	18b84 <_vfprintf_r+0x1684>
   18b6e:	4645      	mov	r5, r8
   18b70:	9b07      	ldr	r3, [sp, #28]
   18b72:	950f      	str	r5, [sp, #60]	; 0x3c
   18b74:	785b      	ldrb	r3, [r3, #1]
   18b76:	9207      	str	r2, [sp, #28]
   18b78:	f7fe fd4b 	bl	17612 <_vfprintf_r+0x112>
   18b7c:	ab16      	add	r3, sp, #88	; 0x58
   18b7e:	77d8      	strb	r0, [r3, #31]
   18b80:	f7ff f830 	bl	17be4 <_vfprintf_r+0x6e4>
   18b84:	2301      	movs	r3, #1
   18b86:	425b      	negs	r3, r3
   18b88:	469a      	mov	sl, r3
   18b8a:	e7f0      	b.n	18b6e <_vfprintf_r+0x166e>
   18b8c:	ab16      	add	r3, sp, #88	; 0x58
   18b8e:	77d8      	strb	r0, [r3, #31]
   18b90:	f7fe ff27 	bl	179e2 <_vfprintf_r+0x4e2>
   18b94:	ab16      	add	r3, sp, #88	; 0x58
   18b96:	77d8      	strb	r0, [r3, #31]
   18b98:	f7fe fdce 	bl	17738 <_vfprintf_r+0x238>
   18b9c:	480c      	ldr	r0, [pc, #48]	; (18bd0 <_vfprintf_r+0x16d0>)
   18b9e:	4681      	mov	r9, r0
   18ba0:	e787      	b.n	18ab2 <_vfprintf_r+0x15b2>
   18ba2:	ab16      	add	r3, sp, #88	; 0x58
   18ba4:	77d8      	strb	r0, [r3, #31]
   18ba6:	f7ff f829 	bl	17bfc <_vfprintf_r+0x6fc>
   18baa:	ab16      	add	r3, sp, #88	; 0x58
   18bac:	77d8      	strb	r0, [r3, #31]
   18bae:	f7fe ffc3 	bl	17b38 <_vfprintf_r+0x638>
   18bb2:	ab16      	add	r3, sp, #88	; 0x58
   18bb4:	77d8      	strb	r0, [r3, #31]
   18bb6:	f7fe ffa5 	bl	17b04 <_vfprintf_r+0x604>
   18bba:	ab16      	add	r3, sp, #88	; 0x58
   18bbc:	77d8      	strb	r0, [r3, #31]
   18bbe:	f7fe feaf 	bl	17920 <_vfprintf_r+0x420>
   18bc2:	aa16      	add	r2, sp, #88	; 0x58
   18bc4:	232e      	movs	r3, #46	; 0x2e
   18bc6:	4694      	mov	ip, r2
   18bc8:	4463      	add	r3, ip
   18bca:	e61a      	b.n	18802 <_vfprintf_r+0x1302>
   18bcc:	0001e0a8 	.word	0x0001e0a8
   18bd0:	0001e274 	.word	0x0001e274
   18bd4:	0001e0ac 	.word	0x0001e0ac

00018bd8 <__sbprintf>:
   18bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18bda:	0015      	movs	r5, r2
   18bdc:	2202      	movs	r2, #2
   18bde:	4c1e      	ldr	r4, [pc, #120]	; (18c58 <__sbprintf+0x80>)
   18be0:	001f      	movs	r7, r3
   18be2:	898b      	ldrh	r3, [r1, #12]
   18be4:	44a5      	add	sp, r4
   18be6:	4393      	bics	r3, r2
   18be8:	466a      	mov	r2, sp
   18bea:	8193      	strh	r3, [r2, #12]
   18bec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   18bee:	0006      	movs	r6, r0
   18bf0:	9319      	str	r3, [sp, #100]	; 0x64
   18bf2:	89cb      	ldrh	r3, [r1, #14]
   18bf4:	a816      	add	r0, sp, #88	; 0x58
   18bf6:	81d3      	strh	r3, [r2, #14]
   18bf8:	69cb      	ldr	r3, [r1, #28]
   18bfa:	000c      	movs	r4, r1
   18bfc:	9307      	str	r3, [sp, #28]
   18bfe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   18c00:	9309      	str	r3, [sp, #36]	; 0x24
   18c02:	ab1a      	add	r3, sp, #104	; 0x68
   18c04:	9300      	str	r3, [sp, #0]
   18c06:	9304      	str	r3, [sp, #16]
   18c08:	2380      	movs	r3, #128	; 0x80
   18c0a:	00db      	lsls	r3, r3, #3
   18c0c:	9302      	str	r3, [sp, #8]
   18c0e:	9305      	str	r3, [sp, #20]
   18c10:	2300      	movs	r3, #0
   18c12:	9306      	str	r3, [sp, #24]
   18c14:	f001 fd64 	bl	1a6e0 <__retarget_lock_init_recursive>
   18c18:	002a      	movs	r2, r5
   18c1a:	003b      	movs	r3, r7
   18c1c:	4669      	mov	r1, sp
   18c1e:	0030      	movs	r0, r6
   18c20:	f7fe fc6e 	bl	17500 <_vfprintf_r>
   18c24:	1e05      	subs	r5, r0, #0
   18c26:	db05      	blt.n	18c34 <__sbprintf+0x5c>
   18c28:	4669      	mov	r1, sp
   18c2a:	0030      	movs	r0, r6
   18c2c:	f001 f9ac 	bl	19f88 <_fflush_r>
   18c30:	2800      	cmp	r0, #0
   18c32:	d10e      	bne.n	18c52 <__sbprintf+0x7a>
   18c34:	466b      	mov	r3, sp
   18c36:	899b      	ldrh	r3, [r3, #12]
   18c38:	065b      	lsls	r3, r3, #25
   18c3a:	d503      	bpl.n	18c44 <__sbprintf+0x6c>
   18c3c:	2240      	movs	r2, #64	; 0x40
   18c3e:	89a3      	ldrh	r3, [r4, #12]
   18c40:	4313      	orrs	r3, r2
   18c42:	81a3      	strh	r3, [r4, #12]
   18c44:	9816      	ldr	r0, [sp, #88]	; 0x58
   18c46:	f001 fd4d 	bl	1a6e4 <__retarget_lock_close_recursive>
   18c4a:	0028      	movs	r0, r5
   18c4c:	4b03      	ldr	r3, [pc, #12]	; (18c5c <__sbprintf+0x84>)
   18c4e:	449d      	add	sp, r3
   18c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c52:	2501      	movs	r5, #1
   18c54:	426d      	negs	r5, r5
   18c56:	e7ed      	b.n	18c34 <__sbprintf+0x5c>
   18c58:	fffffb94 	.word	0xfffffb94
   18c5c:	0000046c 	.word	0x0000046c

00018c60 <__swsetup_r>:
   18c60:	4b33      	ldr	r3, [pc, #204]	; (18d30 <__swsetup_r+0xd0>)
   18c62:	b570      	push	{r4, r5, r6, lr}
   18c64:	0005      	movs	r5, r0
   18c66:	6818      	ldr	r0, [r3, #0]
   18c68:	000c      	movs	r4, r1
   18c6a:	2800      	cmp	r0, #0
   18c6c:	d002      	beq.n	18c74 <__swsetup_r+0x14>
   18c6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18c70:	2b00      	cmp	r3, #0
   18c72:	d03c      	beq.n	18cee <__swsetup_r+0x8e>
   18c74:	230c      	movs	r3, #12
   18c76:	5ee2      	ldrsh	r2, [r4, r3]
   18c78:	b293      	uxth	r3, r2
   18c7a:	0719      	lsls	r1, r3, #28
   18c7c:	d50d      	bpl.n	18c9a <__swsetup_r+0x3a>
   18c7e:	6921      	ldr	r1, [r4, #16]
   18c80:	2900      	cmp	r1, #0
   18c82:	d015      	beq.n	18cb0 <__swsetup_r+0x50>
   18c84:	07da      	lsls	r2, r3, #31
   18c86:	d521      	bpl.n	18ccc <__swsetup_r+0x6c>
   18c88:	2300      	movs	r3, #0
   18c8a:	60a3      	str	r3, [r4, #8]
   18c8c:	6963      	ldr	r3, [r4, #20]
   18c8e:	2000      	movs	r0, #0
   18c90:	425b      	negs	r3, r3
   18c92:	61a3      	str	r3, [r4, #24]
   18c94:	2900      	cmp	r1, #0
   18c96:	d021      	beq.n	18cdc <__swsetup_r+0x7c>
   18c98:	bd70      	pop	{r4, r5, r6, pc}
   18c9a:	06d9      	lsls	r1, r3, #27
   18c9c:	d53f      	bpl.n	18d1e <__swsetup_r+0xbe>
   18c9e:	075b      	lsls	r3, r3, #29
   18ca0:	d428      	bmi.n	18cf4 <__swsetup_r+0x94>
   18ca2:	6921      	ldr	r1, [r4, #16]
   18ca4:	2308      	movs	r3, #8
   18ca6:	4313      	orrs	r3, r2
   18ca8:	81a3      	strh	r3, [r4, #12]
   18caa:	b29b      	uxth	r3, r3
   18cac:	2900      	cmp	r1, #0
   18cae:	d1e9      	bne.n	18c84 <__swsetup_r+0x24>
   18cb0:	22a0      	movs	r2, #160	; 0xa0
   18cb2:	2080      	movs	r0, #128	; 0x80
   18cb4:	0092      	lsls	r2, r2, #2
   18cb6:	0080      	lsls	r0, r0, #2
   18cb8:	401a      	ands	r2, r3
   18cba:	4282      	cmp	r2, r0
   18cbc:	d0e2      	beq.n	18c84 <__swsetup_r+0x24>
   18cbe:	0021      	movs	r1, r4
   18cc0:	0028      	movs	r0, r5
   18cc2:	f001 fd45 	bl	1a750 <__smakebuf_r>
   18cc6:	89a3      	ldrh	r3, [r4, #12]
   18cc8:	6921      	ldr	r1, [r4, #16]
   18cca:	e7db      	b.n	18c84 <__swsetup_r+0x24>
   18ccc:	2200      	movs	r2, #0
   18cce:	079b      	lsls	r3, r3, #30
   18cd0:	d400      	bmi.n	18cd4 <__swsetup_r+0x74>
   18cd2:	6962      	ldr	r2, [r4, #20]
   18cd4:	60a2      	str	r2, [r4, #8]
   18cd6:	2000      	movs	r0, #0
   18cd8:	2900      	cmp	r1, #0
   18cda:	d1dd      	bne.n	18c98 <__swsetup_r+0x38>
   18cdc:	220c      	movs	r2, #12
   18cde:	5ea3      	ldrsh	r3, [r4, r2]
   18ce0:	061a      	lsls	r2, r3, #24
   18ce2:	d5d9      	bpl.n	18c98 <__swsetup_r+0x38>
   18ce4:	2240      	movs	r2, #64	; 0x40
   18ce6:	4313      	orrs	r3, r2
   18ce8:	81a3      	strh	r3, [r4, #12]
   18cea:	3801      	subs	r0, #1
   18cec:	e7d4      	b.n	18c98 <__swsetup_r+0x38>
   18cee:	f001 f9a5 	bl	1a03c <__sinit>
   18cf2:	e7bf      	b.n	18c74 <__swsetup_r+0x14>
   18cf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   18cf6:	2900      	cmp	r1, #0
   18cf8:	d00a      	beq.n	18d10 <__swsetup_r+0xb0>
   18cfa:	0023      	movs	r3, r4
   18cfc:	3340      	adds	r3, #64	; 0x40
   18cfe:	4299      	cmp	r1, r3
   18d00:	d004      	beq.n	18d0c <__swsetup_r+0xac>
   18d02:	0028      	movs	r0, r5
   18d04:	f001 fa44 	bl	1a190 <_free_r>
   18d08:	230c      	movs	r3, #12
   18d0a:	5ee2      	ldrsh	r2, [r4, r3]
   18d0c:	2300      	movs	r3, #0
   18d0e:	6323      	str	r3, [r4, #48]	; 0x30
   18d10:	2324      	movs	r3, #36	; 0x24
   18d12:	439a      	bics	r2, r3
   18d14:	2300      	movs	r3, #0
   18d16:	6921      	ldr	r1, [r4, #16]
   18d18:	6063      	str	r3, [r4, #4]
   18d1a:	6021      	str	r1, [r4, #0]
   18d1c:	e7c2      	b.n	18ca4 <__swsetup_r+0x44>
   18d1e:	2309      	movs	r3, #9
   18d20:	602b      	str	r3, [r5, #0]
   18d22:	2340      	movs	r3, #64	; 0x40
   18d24:	2001      	movs	r0, #1
   18d26:	431a      	orrs	r2, r3
   18d28:	81a2      	strh	r2, [r4, #12]
   18d2a:	4240      	negs	r0, r0
   18d2c:	e7b4      	b.n	18c98 <__swsetup_r+0x38>
   18d2e:	46c0      	nop			; (mov r8, r8)
   18d30:	200000d4 	.word	0x200000d4

00018d34 <register_fini>:
   18d34:	4b03      	ldr	r3, [pc, #12]	; (18d44 <register_fini+0x10>)
   18d36:	b510      	push	{r4, lr}
   18d38:	2b00      	cmp	r3, #0
   18d3a:	d002      	beq.n	18d42 <register_fini+0xe>
   18d3c:	4802      	ldr	r0, [pc, #8]	; (18d48 <register_fini+0x14>)
   18d3e:	f000 f805 	bl	18d4c <atexit>
   18d42:	bd10      	pop	{r4, pc}
   18d44:	00000000 	.word	0x00000000
   18d48:	0001a0bd 	.word	0x0001a0bd

00018d4c <atexit>:
   18d4c:	b510      	push	{r4, lr}
   18d4e:	0001      	movs	r1, r0
   18d50:	2300      	movs	r3, #0
   18d52:	2200      	movs	r2, #0
   18d54:	2000      	movs	r0, #0
   18d56:	f002 ff1b 	bl	1bb90 <__register_exitproc>
   18d5a:	bd10      	pop	{r4, pc}

00018d5c <quorem>:
   18d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d5e:	4645      	mov	r5, r8
   18d60:	4680      	mov	r8, r0
   18d62:	46de      	mov	lr, fp
   18d64:	4657      	mov	r7, sl
   18d66:	464e      	mov	r6, r9
   18d68:	4642      	mov	r2, r8
   18d6a:	b5e0      	push	{r5, r6, r7, lr}
   18d6c:	690c      	ldr	r4, [r1, #16]
   18d6e:	6912      	ldr	r2, [r2, #16]
   18d70:	b085      	sub	sp, #20
   18d72:	000b      	movs	r3, r1
   18d74:	9102      	str	r1, [sp, #8]
   18d76:	2000      	movs	r0, #0
   18d78:	4294      	cmp	r4, r2
   18d7a:	dd00      	ble.n	18d7e <quorem+0x22>
   18d7c:	e090      	b.n	18ea0 <quorem+0x144>
   18d7e:	2214      	movs	r2, #20
   18d80:	4694      	mov	ip, r2
   18d82:	4463      	add	r3, ip
   18d84:	4699      	mov	r9, r3
   18d86:	464a      	mov	r2, r9
   18d88:	3c01      	subs	r4, #1
   18d8a:	00a3      	lsls	r3, r4, #2
   18d8c:	18d6      	adds	r6, r2, r3
   18d8e:	2214      	movs	r2, #20
   18d90:	4442      	add	r2, r8
   18d92:	4693      	mov	fp, r2
   18d94:	449b      	add	fp, r3
   18d96:	6833      	ldr	r3, [r6, #0]
   18d98:	0015      	movs	r5, r2
   18d9a:	1c59      	adds	r1, r3, #1
   18d9c:	465b      	mov	r3, fp
   18d9e:	6818      	ldr	r0, [r3, #0]
   18da0:	9201      	str	r2, [sp, #4]
   18da2:	f7f9 fcb3 	bl	1270c <__udivsi3>
   18da6:	1e03      	subs	r3, r0, #0
   18da8:	9000      	str	r0, [sp, #0]
   18daa:	d042      	beq.n	18e32 <quorem+0xd6>
   18dac:	0029      	movs	r1, r5
   18dae:	2700      	movs	r7, #0
   18db0:	464d      	mov	r5, r9
   18db2:	2000      	movs	r0, #0
   18db4:	46b1      	mov	r9, r6
   18db6:	46a2      	mov	sl, r4
   18db8:	003e      	movs	r6, r7
   18dba:	0004      	movs	r4, r0
   18dbc:	469c      	mov	ip, r3
   18dbe:	002f      	movs	r7, r5
   18dc0:	0008      	movs	r0, r1
   18dc2:	9503      	str	r5, [sp, #12]
   18dc4:	4663      	mov	r3, ip
   18dc6:	cf04      	ldmia	r7!, {r2}
   18dc8:	0415      	lsls	r5, r2, #16
   18dca:	0c2d      	lsrs	r5, r5, #16
   18dcc:	435d      	muls	r5, r3
   18dce:	0c12      	lsrs	r2, r2, #16
   18dd0:	435a      	muls	r2, r3
   18dd2:	19ad      	adds	r5, r5, r6
   18dd4:	0c2b      	lsrs	r3, r5, #16
   18dd6:	18d2      	adds	r2, r2, r3
   18dd8:	6803      	ldr	r3, [r0, #0]
   18dda:	042d      	lsls	r5, r5, #16
   18ddc:	0419      	lsls	r1, r3, #16
   18dde:	0c09      	lsrs	r1, r1, #16
   18de0:	1909      	adds	r1, r1, r4
   18de2:	0c16      	lsrs	r6, r2, #16
   18de4:	0c2d      	lsrs	r5, r5, #16
   18de6:	0412      	lsls	r2, r2, #16
   18de8:	1b49      	subs	r1, r1, r5
   18dea:	0c12      	lsrs	r2, r2, #16
   18dec:	0c1b      	lsrs	r3, r3, #16
   18dee:	1a9b      	subs	r3, r3, r2
   18df0:	140a      	asrs	r2, r1, #16
   18df2:	189b      	adds	r3, r3, r2
   18df4:	0409      	lsls	r1, r1, #16
   18df6:	141c      	asrs	r4, r3, #16
   18df8:	0c09      	lsrs	r1, r1, #16
   18dfa:	041b      	lsls	r3, r3, #16
   18dfc:	4319      	orrs	r1, r3
   18dfe:	c002      	stmia	r0!, {r1}
   18e00:	45b9      	cmp	r9, r7
   18e02:	d2df      	bcs.n	18dc4 <quorem+0x68>
   18e04:	9b03      	ldr	r3, [sp, #12]
   18e06:	464e      	mov	r6, r9
   18e08:	4699      	mov	r9, r3
   18e0a:	465b      	mov	r3, fp
   18e0c:	681b      	ldr	r3, [r3, #0]
   18e0e:	4654      	mov	r4, sl
   18e10:	2b00      	cmp	r3, #0
   18e12:	d10e      	bne.n	18e32 <quorem+0xd6>
   18e14:	465b      	mov	r3, fp
   18e16:	9a01      	ldr	r2, [sp, #4]
   18e18:	3b04      	subs	r3, #4
   18e1a:	429a      	cmp	r2, r3
   18e1c:	d304      	bcc.n	18e28 <quorem+0xcc>
   18e1e:	e006      	b.n	18e2e <quorem+0xd2>
   18e20:	3b04      	subs	r3, #4
   18e22:	3c01      	subs	r4, #1
   18e24:	429a      	cmp	r2, r3
   18e26:	d202      	bcs.n	18e2e <quorem+0xd2>
   18e28:	6819      	ldr	r1, [r3, #0]
   18e2a:	2900      	cmp	r1, #0
   18e2c:	d0f8      	beq.n	18e20 <quorem+0xc4>
   18e2e:	4643      	mov	r3, r8
   18e30:	611c      	str	r4, [r3, #16]
   18e32:	9902      	ldr	r1, [sp, #8]
   18e34:	4640      	mov	r0, r8
   18e36:	f002 fa7b 	bl	1b330 <__mcmp>
   18e3a:	2800      	cmp	r0, #0
   18e3c:	db2f      	blt.n	18e9e <quorem+0x142>
   18e3e:	464f      	mov	r7, r9
   18e40:	2000      	movs	r0, #0
   18e42:	9b00      	ldr	r3, [sp, #0]
   18e44:	9d01      	ldr	r5, [sp, #4]
   18e46:	3301      	adds	r3, #1
   18e48:	9300      	str	r3, [sp, #0]
   18e4a:	682b      	ldr	r3, [r5, #0]
   18e4c:	cf02      	ldmia	r7!, {r1}
   18e4e:	041a      	lsls	r2, r3, #16
   18e50:	0c12      	lsrs	r2, r2, #16
   18e52:	1810      	adds	r0, r2, r0
   18e54:	040a      	lsls	r2, r1, #16
   18e56:	0c12      	lsrs	r2, r2, #16
   18e58:	1a82      	subs	r2, r0, r2
   18e5a:	0c09      	lsrs	r1, r1, #16
   18e5c:	0c1b      	lsrs	r3, r3, #16
   18e5e:	1a5b      	subs	r3, r3, r1
   18e60:	1411      	asrs	r1, r2, #16
   18e62:	185b      	adds	r3, r3, r1
   18e64:	0412      	lsls	r2, r2, #16
   18e66:	1418      	asrs	r0, r3, #16
   18e68:	0c12      	lsrs	r2, r2, #16
   18e6a:	041b      	lsls	r3, r3, #16
   18e6c:	4313      	orrs	r3, r2
   18e6e:	c508      	stmia	r5!, {r3}
   18e70:	42be      	cmp	r6, r7
   18e72:	d2ea      	bcs.n	18e4a <quorem+0xee>
   18e74:	9901      	ldr	r1, [sp, #4]
   18e76:	00a3      	lsls	r3, r4, #2
   18e78:	468c      	mov	ip, r1
   18e7a:	4463      	add	r3, ip
   18e7c:	681a      	ldr	r2, [r3, #0]
   18e7e:	2a00      	cmp	r2, #0
   18e80:	d10d      	bne.n	18e9e <quorem+0x142>
   18e82:	3b04      	subs	r3, #4
   18e84:	000a      	movs	r2, r1
   18e86:	4299      	cmp	r1, r3
   18e88:	d304      	bcc.n	18e94 <quorem+0x138>
   18e8a:	e006      	b.n	18e9a <quorem+0x13e>
   18e8c:	3b04      	subs	r3, #4
   18e8e:	3c01      	subs	r4, #1
   18e90:	429a      	cmp	r2, r3
   18e92:	d202      	bcs.n	18e9a <quorem+0x13e>
   18e94:	6819      	ldr	r1, [r3, #0]
   18e96:	2900      	cmp	r1, #0
   18e98:	d0f8      	beq.n	18e8c <quorem+0x130>
   18e9a:	4643      	mov	r3, r8
   18e9c:	611c      	str	r4, [r3, #16]
   18e9e:	9800      	ldr	r0, [sp, #0]
   18ea0:	b005      	add	sp, #20
   18ea2:	bc3c      	pop	{r2, r3, r4, r5}
   18ea4:	4690      	mov	r8, r2
   18ea6:	4699      	mov	r9, r3
   18ea8:	46a2      	mov	sl, r4
   18eaa:	46ab      	mov	fp, r5
   18eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18eae:	46c0      	nop			; (mov r8, r8)

00018eb0 <_dtoa_r>:
   18eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eb2:	4657      	mov	r7, sl
   18eb4:	464e      	mov	r6, r9
   18eb6:	4645      	mov	r5, r8
   18eb8:	46de      	mov	lr, fp
   18eba:	b5e0      	push	{r5, r6, r7, lr}
   18ebc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   18ebe:	b099      	sub	sp, #100	; 0x64
   18ec0:	4682      	mov	sl, r0
   18ec2:	001d      	movs	r5, r3
   18ec4:	0016      	movs	r6, r2
   18ec6:	001f      	movs	r7, r3
   18ec8:	2900      	cmp	r1, #0
   18eca:	d009      	beq.n	18ee0 <_dtoa_r+0x30>
   18ecc:	2301      	movs	r3, #1
   18ece:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18ed0:	4093      	lsls	r3, r2
   18ed2:	604a      	str	r2, [r1, #4]
   18ed4:	608b      	str	r3, [r1, #8]
   18ed6:	f002 f81f 	bl	1af18 <_Bfree>
   18eda:	2300      	movs	r3, #0
   18edc:	4652      	mov	r2, sl
   18ede:	6413      	str	r3, [r2, #64]	; 0x40
   18ee0:	46b8      	mov	r8, r7
   18ee2:	2f00      	cmp	r7, #0
   18ee4:	db37      	blt.n	18f56 <_dtoa_r+0xa6>
   18ee6:	2300      	movs	r3, #0
   18ee8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18eea:	6013      	str	r3, [r2, #0]
   18eec:	4642      	mov	r2, r8
   18eee:	4bd6      	ldr	r3, [pc, #856]	; (19248 <_dtoa_r+0x398>)
   18ef0:	401a      	ands	r2, r3
   18ef2:	429a      	cmp	r2, r3
   18ef4:	d018      	beq.n	18f28 <_dtoa_r+0x78>
   18ef6:	2200      	movs	r2, #0
   18ef8:	2300      	movs	r3, #0
   18efa:	0030      	movs	r0, r6
   18efc:	0039      	movs	r1, r7
   18efe:	f7fc fb65 	bl	155cc <__aeabi_dcmpeq>
   18f02:	2800      	cmp	r0, #0
   18f04:	d02f      	beq.n	18f66 <_dtoa_r+0xb6>
   18f06:	2301      	movs	r3, #1
   18f08:	9a24      	ldr	r2, [sp, #144]	; 0x90
   18f0a:	6013      	str	r3, [r2, #0]
   18f0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   18f0e:	2b00      	cmp	r3, #0
   18f10:	d100      	bne.n	18f14 <_dtoa_r+0x64>
   18f12:	e22a      	b.n	1936a <_dtoa_r+0x4ba>
   18f14:	48cd      	ldr	r0, [pc, #820]	; (1924c <_dtoa_r+0x39c>)
   18f16:	6018      	str	r0, [r3, #0]
   18f18:	3801      	subs	r0, #1
   18f1a:	b019      	add	sp, #100	; 0x64
   18f1c:	bc3c      	pop	{r2, r3, r4, r5}
   18f1e:	4690      	mov	r8, r2
   18f20:	4699      	mov	r9, r3
   18f22:	46a2      	mov	sl, r4
   18f24:	46ab      	mov	fp, r5
   18f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f28:	4bc9      	ldr	r3, [pc, #804]	; (19250 <_dtoa_r+0x3a0>)
   18f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   18f2c:	6013      	str	r3, [r2, #0]
   18f2e:	2e00      	cmp	r6, #0
   18f30:	d10b      	bne.n	18f4a <_dtoa_r+0x9a>
   18f32:	4643      	mov	r3, r8
   18f34:	0318      	lsls	r0, r3, #12
   18f36:	d108      	bne.n	18f4a <_dtoa_r+0x9a>
   18f38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   18f3a:	48c6      	ldr	r0, [pc, #792]	; (19254 <_dtoa_r+0x3a4>)
   18f3c:	2b00      	cmp	r3, #0
   18f3e:	d0ec      	beq.n	18f1a <_dtoa_r+0x6a>
   18f40:	0003      	movs	r3, r0
   18f42:	3308      	adds	r3, #8
   18f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
   18f46:	6013      	str	r3, [r2, #0]
   18f48:	e7e7      	b.n	18f1a <_dtoa_r+0x6a>
   18f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   18f4c:	48c2      	ldr	r0, [pc, #776]	; (19258 <_dtoa_r+0x3a8>)
   18f4e:	2b00      	cmp	r3, #0
   18f50:	d0e3      	beq.n	18f1a <_dtoa_r+0x6a>
   18f52:	1cc3      	adds	r3, r0, #3
   18f54:	e7f6      	b.n	18f44 <_dtoa_r+0x94>
   18f56:	2301      	movs	r3, #1
   18f58:	9a25      	ldr	r2, [sp, #148]	; 0x94
   18f5a:	0068      	lsls	r0, r5, #1
   18f5c:	6013      	str	r3, [r2, #0]
   18f5e:	0843      	lsrs	r3, r0, #1
   18f60:	4698      	mov	r8, r3
   18f62:	001f      	movs	r7, r3
   18f64:	e7c2      	b.n	18eec <_dtoa_r+0x3c>
   18f66:	ab16      	add	r3, sp, #88	; 0x58
   18f68:	9301      	str	r3, [sp, #4]
   18f6a:	ab17      	add	r3, sp, #92	; 0x5c
   18f6c:	9300      	str	r3, [sp, #0]
   18f6e:	0032      	movs	r2, r6
   18f70:	003b      	movs	r3, r7
   18f72:	4650      	mov	r0, sl
   18f74:	f002 fa92 	bl	1b49c <__d2b>
   18f78:	4643      	mov	r3, r8
   18f7a:	4683      	mov	fp, r0
   18f7c:	0d1a      	lsrs	r2, r3, #20
   18f7e:	d100      	bne.n	18f82 <_dtoa_r+0xd2>
   18f80:	e1d6      	b.n	19330 <_dtoa_r+0x480>
   18f82:	033b      	lsls	r3, r7, #12
   18f84:	4cb5      	ldr	r4, [pc, #724]	; (1925c <_dtoa_r+0x3ac>)
   18f86:	0b1b      	lsrs	r3, r3, #12
   18f88:	431c      	orrs	r4, r3
   18f8a:	4bb5      	ldr	r3, [pc, #724]	; (19260 <_dtoa_r+0x3b0>)
   18f8c:	0030      	movs	r0, r6
   18f8e:	4698      	mov	r8, r3
   18f90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18f92:	0021      	movs	r1, r4
   18f94:	4699      	mov	r9, r3
   18f96:	2300      	movs	r3, #0
   18f98:	4490      	add	r8, r2
   18f9a:	930f      	str	r3, [sp, #60]	; 0x3c
   18f9c:	2200      	movs	r2, #0
   18f9e:	4bb1      	ldr	r3, [pc, #708]	; (19264 <_dtoa_r+0x3b4>)
   18fa0:	f7fb fe5e 	bl	14c60 <__aeabi_dsub>
   18fa4:	4ab0      	ldr	r2, [pc, #704]	; (19268 <_dtoa_r+0x3b8>)
   18fa6:	4bb1      	ldr	r3, [pc, #708]	; (1926c <_dtoa_r+0x3bc>)
   18fa8:	f7fb fbda 	bl	14760 <__aeabi_dmul>
   18fac:	4ab0      	ldr	r2, [pc, #704]	; (19270 <_dtoa_r+0x3c0>)
   18fae:	4bb1      	ldr	r3, [pc, #708]	; (19274 <_dtoa_r+0x3c4>)
   18fb0:	f7fa fd92 	bl	13ad8 <__aeabi_dadd>
   18fb4:	0004      	movs	r4, r0
   18fb6:	4640      	mov	r0, r8
   18fb8:	000d      	movs	r5, r1
   18fba:	f003 f877 	bl	1c0ac <__aeabi_i2d>
   18fbe:	4aae      	ldr	r2, [pc, #696]	; (19278 <_dtoa_r+0x3c8>)
   18fc0:	4bae      	ldr	r3, [pc, #696]	; (1927c <_dtoa_r+0x3cc>)
   18fc2:	f7fb fbcd 	bl	14760 <__aeabi_dmul>
   18fc6:	0002      	movs	r2, r0
   18fc8:	000b      	movs	r3, r1
   18fca:	0020      	movs	r0, r4
   18fcc:	0029      	movs	r1, r5
   18fce:	f7fa fd83 	bl	13ad8 <__aeabi_dadd>
   18fd2:	0004      	movs	r4, r0
   18fd4:	000d      	movs	r5, r1
   18fd6:	f7fc f959 	bl	1528c <__aeabi_d2iz>
   18fda:	2200      	movs	r2, #0
   18fdc:	9003      	str	r0, [sp, #12]
   18fde:	2300      	movs	r3, #0
   18fe0:	0020      	movs	r0, r4
   18fe2:	0029      	movs	r1, r5
   18fe4:	f7fc faf8 	bl	155d8 <__aeabi_dcmplt>
   18fe8:	2800      	cmp	r0, #0
   18fea:	d000      	beq.n	18fee <_dtoa_r+0x13e>
   18fec:	e2b1      	b.n	19552 <_dtoa_r+0x6a2>
   18fee:	2301      	movs	r3, #1
   18ff0:	9c03      	ldr	r4, [sp, #12]
   18ff2:	930c      	str	r3, [sp, #48]	; 0x30
   18ff4:	2c16      	cmp	r4, #22
   18ff6:	d810      	bhi.n	1901a <_dtoa_r+0x16a>
   18ff8:	49a1      	ldr	r1, [pc, #644]	; (19280 <_dtoa_r+0x3d0>)
   18ffa:	00e3      	lsls	r3, r4, #3
   18ffc:	18c9      	adds	r1, r1, r3
   18ffe:	0032      	movs	r2, r6
   19000:	6808      	ldr	r0, [r1, #0]
   19002:	6849      	ldr	r1, [r1, #4]
   19004:	003b      	movs	r3, r7
   19006:	f7fc fafb 	bl	15600 <__aeabi_dcmpgt>
   1900a:	2800      	cmp	r0, #0
   1900c:	d100      	bne.n	19010 <_dtoa_r+0x160>
   1900e:	e31d      	b.n	1964c <_dtoa_r+0x79c>
   19010:	0023      	movs	r3, r4
   19012:	3b01      	subs	r3, #1
   19014:	9303      	str	r3, [sp, #12]
   19016:	2300      	movs	r3, #0
   19018:	930c      	str	r3, [sp, #48]	; 0x30
   1901a:	464b      	mov	r3, r9
   1901c:	4642      	mov	r2, r8
   1901e:	1a9a      	subs	r2, r3, r2
   19020:	2300      	movs	r3, #0
   19022:	9306      	str	r3, [sp, #24]
   19024:	0013      	movs	r3, r2
   19026:	3b01      	subs	r3, #1
   19028:	9304      	str	r3, [sp, #16]
   1902a:	d500      	bpl.n	1902e <_dtoa_r+0x17e>
   1902c:	e2a1      	b.n	19572 <_dtoa_r+0x6c2>
   1902e:	9b03      	ldr	r3, [sp, #12]
   19030:	2b00      	cmp	r3, #0
   19032:	da00      	bge.n	19036 <_dtoa_r+0x186>
   19034:	e284      	b.n	19540 <_dtoa_r+0x690>
   19036:	469c      	mov	ip, r3
   19038:	930d      	str	r3, [sp, #52]	; 0x34
   1903a:	2300      	movs	r3, #0
   1903c:	9a04      	ldr	r2, [sp, #16]
   1903e:	4699      	mov	r9, r3
   19040:	0011      	movs	r1, r2
   19042:	4461      	add	r1, ip
   19044:	9104      	str	r1, [sp, #16]
   19046:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19048:	2b09      	cmp	r3, #9
   1904a:	d900      	bls.n	1904e <_dtoa_r+0x19e>
   1904c:	e18f      	b.n	1936e <_dtoa_r+0x4be>
   1904e:	2401      	movs	r4, #1
   19050:	2b05      	cmp	r3, #5
   19052:	dd02      	ble.n	1905a <_dtoa_r+0x1aa>
   19054:	2400      	movs	r4, #0
   19056:	3b04      	subs	r3, #4
   19058:	9322      	str	r3, [sp, #136]	; 0x88
   1905a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1905c:	2b03      	cmp	r3, #3
   1905e:	d101      	bne.n	19064 <_dtoa_r+0x1b4>
   19060:	f000 fcce 	bl	19a00 <_dtoa_r+0xb50>
   19064:	dc01      	bgt.n	1906a <_dtoa_r+0x1ba>
   19066:	f000 fc92 	bl	1998e <_dtoa_r+0xade>
   1906a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1906c:	2b04      	cmp	r3, #4
   1906e:	d101      	bne.n	19074 <_dtoa_r+0x1c4>
   19070:	f000 fc40 	bl	198f4 <_dtoa_r+0xa44>
   19074:	2301      	movs	r3, #1
   19076:	930b      	str	r3, [sp, #44]	; 0x2c
   19078:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1907a:	2b05      	cmp	r3, #5
   1907c:	d001      	beq.n	19082 <_dtoa_r+0x1d2>
   1907e:	f000 fc8b 	bl	19998 <_dtoa_r+0xae8>
   19082:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   19084:	9b03      	ldr	r3, [sp, #12]
   19086:	4694      	mov	ip, r2
   19088:	4463      	add	r3, ip
   1908a:	930e      	str	r3, [sp, #56]	; 0x38
   1908c:	3301      	adds	r3, #1
   1908e:	9307      	str	r3, [sp, #28]
   19090:	1e1d      	subs	r5, r3, #0
   19092:	dc01      	bgt.n	19098 <_dtoa_r+0x1e8>
   19094:	f000 fd49 	bl	19b2a <_dtoa_r+0xc7a>
   19098:	9b07      	ldr	r3, [sp, #28]
   1909a:	4698      	mov	r8, r3
   1909c:	2300      	movs	r3, #0
   1909e:	4652      	mov	r2, sl
   190a0:	2100      	movs	r1, #0
   190a2:	6453      	str	r3, [r2, #68]	; 0x44
   190a4:	2d17      	cmp	r5, #23
   190a6:	d90a      	bls.n	190be <_dtoa_r+0x20e>
   190a8:	2201      	movs	r2, #1
   190aa:	3304      	adds	r3, #4
   190ac:	005b      	lsls	r3, r3, #1
   190ae:	0018      	movs	r0, r3
   190b0:	3014      	adds	r0, #20
   190b2:	0011      	movs	r1, r2
   190b4:	3201      	adds	r2, #1
   190b6:	4285      	cmp	r5, r0
   190b8:	d2f8      	bcs.n	190ac <_dtoa_r+0x1fc>
   190ba:	4653      	mov	r3, sl
   190bc:	6459      	str	r1, [r3, #68]	; 0x44
   190be:	4650      	mov	r0, sl
   190c0:	f001 ff02 	bl	1aec8 <_Balloc>
   190c4:	4653      	mov	r3, sl
   190c6:	6418      	str	r0, [r3, #64]	; 0x40
   190c8:	4643      	mov	r3, r8
   190ca:	900a      	str	r0, [sp, #40]	; 0x28
   190cc:	2b0e      	cmp	r3, #14
   190ce:	d900      	bls.n	190d2 <_dtoa_r+0x222>
   190d0:	e161      	b.n	19396 <_dtoa_r+0x4e6>
   190d2:	2c00      	cmp	r4, #0
   190d4:	d100      	bne.n	190d8 <_dtoa_r+0x228>
   190d6:	e15e      	b.n	19396 <_dtoa_r+0x4e6>
   190d8:	9610      	str	r6, [sp, #64]	; 0x40
   190da:	9711      	str	r7, [sp, #68]	; 0x44
   190dc:	9e03      	ldr	r6, [sp, #12]
   190de:	2e00      	cmp	r6, #0
   190e0:	dc01      	bgt.n	190e6 <_dtoa_r+0x236>
   190e2:	f000 fd25 	bl	19b30 <_dtoa_r+0xc80>
   190e6:	0032      	movs	r2, r6
   190e8:	210f      	movs	r1, #15
   190ea:	4b65      	ldr	r3, [pc, #404]	; (19280 <_dtoa_r+0x3d0>)
   190ec:	400a      	ands	r2, r1
   190ee:	00d2      	lsls	r2, r2, #3
   190f0:	189b      	adds	r3, r3, r2
   190f2:	1136      	asrs	r6, r6, #4
   190f4:	681c      	ldr	r4, [r3, #0]
   190f6:	685d      	ldr	r5, [r3, #4]
   190f8:	06f3      	lsls	r3, r6, #27
   190fa:	d401      	bmi.n	19100 <_dtoa_r+0x250>
   190fc:	f000 fcca 	bl	19a94 <_dtoa_r+0xbe4>
   19100:	4b60      	ldr	r3, [pc, #384]	; (19284 <_dtoa_r+0x3d4>)
   19102:	400e      	ands	r6, r1
   19104:	6a1a      	ldr	r2, [r3, #32]
   19106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19108:	9810      	ldr	r0, [sp, #64]	; 0x40
   1910a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1910c:	f7fa fff4 	bl	140f8 <__aeabi_ddiv>
   19110:	2303      	movs	r3, #3
   19112:	4698      	mov	r8, r3
   19114:	9008      	str	r0, [sp, #32]
   19116:	9109      	str	r1, [sp, #36]	; 0x24
   19118:	2e00      	cmp	r6, #0
   1911a:	d011      	beq.n	19140 <_dtoa_r+0x290>
   1911c:	4f59      	ldr	r7, [pc, #356]	; (19284 <_dtoa_r+0x3d4>)
   1911e:	2301      	movs	r3, #1
   19120:	4233      	tst	r3, r6
   19122:	d009      	beq.n	19138 <_dtoa_r+0x288>
   19124:	469c      	mov	ip, r3
   19126:	683a      	ldr	r2, [r7, #0]
   19128:	687b      	ldr	r3, [r7, #4]
   1912a:	0020      	movs	r0, r4
   1912c:	0029      	movs	r1, r5
   1912e:	44e0      	add	r8, ip
   19130:	f7fb fb16 	bl	14760 <__aeabi_dmul>
   19134:	0004      	movs	r4, r0
   19136:	000d      	movs	r5, r1
   19138:	1076      	asrs	r6, r6, #1
   1913a:	3708      	adds	r7, #8
   1913c:	2e00      	cmp	r6, #0
   1913e:	d1ee      	bne.n	1911e <_dtoa_r+0x26e>
   19140:	0022      	movs	r2, r4
   19142:	9808      	ldr	r0, [sp, #32]
   19144:	9909      	ldr	r1, [sp, #36]	; 0x24
   19146:	002b      	movs	r3, r5
   19148:	f7fa ffd6 	bl	140f8 <__aeabi_ddiv>
   1914c:	0006      	movs	r6, r0
   1914e:	000f      	movs	r7, r1
   19150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19152:	2b00      	cmp	r3, #0
   19154:	d009      	beq.n	1916a <_dtoa_r+0x2ba>
   19156:	2200      	movs	r2, #0
   19158:	4b40      	ldr	r3, [pc, #256]	; (1925c <_dtoa_r+0x3ac>)
   1915a:	0030      	movs	r0, r6
   1915c:	0039      	movs	r1, r7
   1915e:	f7fc fa3b 	bl	155d8 <__aeabi_dcmplt>
   19162:	2800      	cmp	r0, #0
   19164:	d001      	beq.n	1916a <_dtoa_r+0x2ba>
   19166:	f000 fdc2 	bl	19cee <_dtoa_r+0xe3e>
   1916a:	4640      	mov	r0, r8
   1916c:	f002 ff9e 	bl	1c0ac <__aeabi_i2d>
   19170:	0032      	movs	r2, r6
   19172:	003b      	movs	r3, r7
   19174:	f7fb faf4 	bl	14760 <__aeabi_dmul>
   19178:	2200      	movs	r2, #0
   1917a:	4b43      	ldr	r3, [pc, #268]	; (19288 <_dtoa_r+0x3d8>)
   1917c:	f7fa fcac 	bl	13ad8 <__aeabi_dadd>
   19180:	4a42      	ldr	r2, [pc, #264]	; (1928c <_dtoa_r+0x3dc>)
   19182:	000b      	movs	r3, r1
   19184:	4694      	mov	ip, r2
   19186:	4463      	add	r3, ip
   19188:	9008      	str	r0, [sp, #32]
   1918a:	9109      	str	r1, [sp, #36]	; 0x24
   1918c:	9309      	str	r3, [sp, #36]	; 0x24
   1918e:	9b07      	ldr	r3, [sp, #28]
   19190:	2b00      	cmp	r3, #0
   19192:	d101      	bne.n	19198 <_dtoa_r+0x2e8>
   19194:	f000 fc50 	bl	19a38 <_dtoa_r+0xb88>
   19198:	9b03      	ldr	r3, [sp, #12]
   1919a:	9313      	str	r3, [sp, #76]	; 0x4c
   1919c:	9b07      	ldr	r3, [sp, #28]
   1919e:	9312      	str	r3, [sp, #72]	; 0x48
   191a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   191a2:	2b00      	cmp	r3, #0
   191a4:	d101      	bne.n	191aa <_dtoa_r+0x2fa>
   191a6:	f000 fd1d 	bl	19be4 <_dtoa_r+0xd34>
   191aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   191ac:	2000      	movs	r0, #0
   191ae:	1e5a      	subs	r2, r3, #1
   191b0:	4b33      	ldr	r3, [pc, #204]	; (19280 <_dtoa_r+0x3d0>)
   191b2:	00d2      	lsls	r2, r2, #3
   191b4:	189b      	adds	r3, r3, r2
   191b6:	681a      	ldr	r2, [r3, #0]
   191b8:	685b      	ldr	r3, [r3, #4]
   191ba:	4935      	ldr	r1, [pc, #212]	; (19290 <_dtoa_r+0x3e0>)
   191bc:	f7fa ff9c 	bl	140f8 <__aeabi_ddiv>
   191c0:	9a08      	ldr	r2, [sp, #32]
   191c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   191c4:	f7fb fd4c 	bl	14c60 <__aeabi_dsub>
   191c8:	9008      	str	r0, [sp, #32]
   191ca:	9109      	str	r1, [sp, #36]	; 0x24
   191cc:	0039      	movs	r1, r7
   191ce:	0030      	movs	r0, r6
   191d0:	f7fc f85c 	bl	1528c <__aeabi_d2iz>
   191d4:	0004      	movs	r4, r0
   191d6:	f002 ff69 	bl	1c0ac <__aeabi_i2d>
   191da:	0002      	movs	r2, r0
   191dc:	000b      	movs	r3, r1
   191de:	0030      	movs	r0, r6
   191e0:	0039      	movs	r1, r7
   191e2:	f7fb fd3d 	bl	14c60 <__aeabi_dsub>
   191e6:	0005      	movs	r5, r0
   191e8:	000e      	movs	r6, r1
   191ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   191ec:	3430      	adds	r4, #48	; 0x30
   191ee:	1c51      	adds	r1, r2, #1
   191f0:	b2e7      	uxtb	r7, r4
   191f2:	9114      	str	r1, [sp, #80]	; 0x50
   191f4:	7017      	strb	r7, [r2, #0]
   191f6:	0033      	movs	r3, r6
   191f8:	9808      	ldr	r0, [sp, #32]
   191fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   191fc:	002a      	movs	r2, r5
   191fe:	f7fc f9ff 	bl	15600 <__aeabi_dcmpgt>
   19202:	2800      	cmp	r0, #0
   19204:	d001      	beq.n	1920a <_dtoa_r+0x35a>
   19206:	f000 fdfe 	bl	19e06 <_dtoa_r+0xf56>
   1920a:	002a      	movs	r2, r5
   1920c:	0033      	movs	r3, r6
   1920e:	2000      	movs	r0, #0
   19210:	4912      	ldr	r1, [pc, #72]	; (1925c <_dtoa_r+0x3ac>)
   19212:	f7fb fd25 	bl	14c60 <__aeabi_dsub>
   19216:	0002      	movs	r2, r0
   19218:	000b      	movs	r3, r1
   1921a:	9808      	ldr	r0, [sp, #32]
   1921c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1921e:	f7fc f9ef 	bl	15600 <__aeabi_dcmpgt>
   19222:	2800      	cmp	r0, #0
   19224:	d001      	beq.n	1922a <_dtoa_r+0x37a>
   19226:	f000 fde7 	bl	19df8 <_dtoa_r+0xf48>
   1922a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1922c:	2b01      	cmp	r3, #1
   1922e:	d101      	bne.n	19234 <_dtoa_r+0x384>
   19230:	f000 fc78 	bl	19b24 <_dtoa_r+0xc74>
   19234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19236:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19238:	4694      	mov	ip, r2
   1923a:	4463      	add	r3, ip
   1923c:	4698      	mov	r8, r3
   1923e:	464b      	mov	r3, r9
   19240:	9312      	str	r3, [sp, #72]	; 0x48
   19242:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19244:	4699      	mov	r9, r3
   19246:	e038      	b.n	192ba <_dtoa_r+0x40a>
   19248:	7ff00000 	.word	0x7ff00000
   1924c:	0001dbd9 	.word	0x0001dbd9
   19250:	0000270f 	.word	0x0000270f
   19254:	0001e284 	.word	0x0001e284
   19258:	0001e290 	.word	0x0001e290
   1925c:	3ff00000 	.word	0x3ff00000
   19260:	fffffc01 	.word	0xfffffc01
   19264:	3ff80000 	.word	0x3ff80000
   19268:	636f4361 	.word	0x636f4361
   1926c:	3fd287a7 	.word	0x3fd287a7
   19270:	8b60c8b3 	.word	0x8b60c8b3
   19274:	3fc68a28 	.word	0x3fc68a28
   19278:	509f79fb 	.word	0x509f79fb
   1927c:	3fd34413 	.word	0x3fd34413
   19280:	0001e2d0 	.word	0x0001e2d0
   19284:	0001e2a8 	.word	0x0001e2a8
   19288:	401c0000 	.word	0x401c0000
   1928c:	fcc00000 	.word	0xfcc00000
   19290:	3fe00000 	.word	0x3fe00000
   19294:	002a      	movs	r2, r5
   19296:	0033      	movs	r3, r6
   19298:	2000      	movs	r0, #0
   1929a:	49b9      	ldr	r1, [pc, #740]	; (19580 <_dtoa_r+0x6d0>)
   1929c:	f7fb fce0 	bl	14c60 <__aeabi_dsub>
   192a0:	9a08      	ldr	r2, [sp, #32]
   192a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   192a4:	f7fc f998 	bl	155d8 <__aeabi_dcmplt>
   192a8:	2800      	cmp	r0, #0
   192aa:	d001      	beq.n	192b0 <_dtoa_r+0x400>
   192ac:	f000 fd74 	bl	19d98 <_dtoa_r+0xee8>
   192b0:	46a1      	mov	r9, r4
   192b2:	4544      	cmp	r4, r8
   192b4:	d101      	bne.n	192ba <_dtoa_r+0x40a>
   192b6:	f000 fc33 	bl	19b20 <_dtoa_r+0xc70>
   192ba:	9808      	ldr	r0, [sp, #32]
   192bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   192be:	2200      	movs	r2, #0
   192c0:	4bb0      	ldr	r3, [pc, #704]	; (19584 <_dtoa_r+0x6d4>)
   192c2:	f7fb fa4d 	bl	14760 <__aeabi_dmul>
   192c6:	2200      	movs	r2, #0
   192c8:	4bae      	ldr	r3, [pc, #696]	; (19584 <_dtoa_r+0x6d4>)
   192ca:	9008      	str	r0, [sp, #32]
   192cc:	9109      	str	r1, [sp, #36]	; 0x24
   192ce:	0028      	movs	r0, r5
   192d0:	0031      	movs	r1, r6
   192d2:	f7fb fa45 	bl	14760 <__aeabi_dmul>
   192d6:	000d      	movs	r5, r1
   192d8:	0004      	movs	r4, r0
   192da:	f7fb ffd7 	bl	1528c <__aeabi_d2iz>
   192de:	0007      	movs	r7, r0
   192e0:	f002 fee4 	bl	1c0ac <__aeabi_i2d>
   192e4:	0002      	movs	r2, r0
   192e6:	000b      	movs	r3, r1
   192e8:	0020      	movs	r0, r4
   192ea:	0029      	movs	r1, r5
   192ec:	f7fb fcb8 	bl	14c60 <__aeabi_dsub>
   192f0:	464b      	mov	r3, r9
   192f2:	3730      	adds	r7, #48	; 0x30
   192f4:	b2ff      	uxtb	r7, r7
   192f6:	1c5c      	adds	r4, r3, #1
   192f8:	701f      	strb	r7, [r3, #0]
   192fa:	9a08      	ldr	r2, [sp, #32]
   192fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   192fe:	0005      	movs	r5, r0
   19300:	000e      	movs	r6, r1
   19302:	f7fc f969 	bl	155d8 <__aeabi_dcmplt>
   19306:	2800      	cmp	r0, #0
   19308:	d0c4      	beq.n	19294 <_dtoa_r+0x3e4>
   1930a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1930c:	9303      	str	r3, [sp, #12]
   1930e:	4659      	mov	r1, fp
   19310:	4650      	mov	r0, sl
   19312:	f001 fe01 	bl	1af18 <_Bfree>
   19316:	2300      	movs	r3, #0
   19318:	7023      	strb	r3, [r4, #0]
   1931a:	9b03      	ldr	r3, [sp, #12]
   1931c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1931e:	3301      	adds	r3, #1
   19320:	6013      	str	r3, [r2, #0]
   19322:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19324:	2b00      	cmp	r3, #0
   19326:	d100      	bne.n	1932a <_dtoa_r+0x47a>
   19328:	e3a8      	b.n	19a7c <_dtoa_r+0xbcc>
   1932a:	601c      	str	r4, [r3, #0]
   1932c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1932e:	e5f4      	b.n	18f1a <_dtoa_r+0x6a>
   19330:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19332:	4699      	mov	r9, r3
   19334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19336:	444b      	add	r3, r9
   19338:	001c      	movs	r4, r3
   1933a:	4b93      	ldr	r3, [pc, #588]	; (19588 <_dtoa_r+0x6d8>)
   1933c:	18e3      	adds	r3, r4, r3
   1933e:	2b20      	cmp	r3, #32
   19340:	dc00      	bgt.n	19344 <_dtoa_r+0x494>
   19342:	e17e      	b.n	19642 <_dtoa_r+0x792>
   19344:	0031      	movs	r1, r6
   19346:	4a91      	ldr	r2, [pc, #580]	; (1958c <_dtoa_r+0x6dc>)
   19348:	4640      	mov	r0, r8
   1934a:	18a2      	adds	r2, r4, r2
   1934c:	40d1      	lsrs	r1, r2
   1934e:	000a      	movs	r2, r1
   19350:	2140      	movs	r1, #64	; 0x40
   19352:	1acb      	subs	r3, r1, r3
   19354:	4098      	lsls	r0, r3
   19356:	4310      	orrs	r0, r2
   19358:	f7fb ffcc 	bl	152f4 <__aeabi_ui2d>
   1935c:	1e63      	subs	r3, r4, #1
   1935e:	4698      	mov	r8, r3
   19360:	2301      	movs	r3, #1
   19362:	4d8b      	ldr	r5, [pc, #556]	; (19590 <_dtoa_r+0x6e0>)
   19364:	930f      	str	r3, [sp, #60]	; 0x3c
   19366:	1949      	adds	r1, r1, r5
   19368:	e618      	b.n	18f9c <_dtoa_r+0xec>
   1936a:	488a      	ldr	r0, [pc, #552]	; (19594 <_dtoa_r+0x6e4>)
   1936c:	e5d5      	b.n	18f1a <_dtoa_r+0x6a>
   1936e:	2300      	movs	r3, #0
   19370:	4652      	mov	r2, sl
   19372:	2100      	movs	r1, #0
   19374:	6453      	str	r3, [r2, #68]	; 0x44
   19376:	4650      	mov	r0, sl
   19378:	f001 fda6 	bl	1aec8 <_Balloc>
   1937c:	4653      	mov	r3, sl
   1937e:	6418      	str	r0, [r3, #64]	; 0x40
   19380:	2301      	movs	r3, #1
   19382:	425b      	negs	r3, r3
   19384:	9307      	str	r3, [sp, #28]
   19386:	930e      	str	r3, [sp, #56]	; 0x38
   19388:	3302      	adds	r3, #2
   1938a:	2200      	movs	r2, #0
   1938c:	930b      	str	r3, [sp, #44]	; 0x2c
   1938e:	2300      	movs	r3, #0
   19390:	900a      	str	r0, [sp, #40]	; 0x28
   19392:	9223      	str	r2, [sp, #140]	; 0x8c
   19394:	9322      	str	r3, [sp, #136]	; 0x88
   19396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19398:	2b00      	cmp	r3, #0
   1939a:	da00      	bge.n	1939e <_dtoa_r+0x4ee>
   1939c:	e0ab      	b.n	194f6 <_dtoa_r+0x646>
   1939e:	9a03      	ldr	r2, [sp, #12]
   193a0:	2a0e      	cmp	r2, #14
   193a2:	dd00      	ble.n	193a6 <_dtoa_r+0x4f6>
   193a4:	e0a7      	b.n	194f6 <_dtoa_r+0x646>
   193a6:	4b7c      	ldr	r3, [pc, #496]	; (19598 <_dtoa_r+0x6e8>)
   193a8:	00d2      	lsls	r2, r2, #3
   193aa:	189b      	adds	r3, r3, r2
   193ac:	685c      	ldr	r4, [r3, #4]
   193ae:	681b      	ldr	r3, [r3, #0]
   193b0:	9304      	str	r3, [sp, #16]
   193b2:	9405      	str	r4, [sp, #20]
   193b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   193b6:	2b00      	cmp	r3, #0
   193b8:	da00      	bge.n	193bc <_dtoa_r+0x50c>
   193ba:	e2a7      	b.n	1990c <_dtoa_r+0xa5c>
   193bc:	9c04      	ldr	r4, [sp, #16]
   193be:	9d05      	ldr	r5, [sp, #20]
   193c0:	0030      	movs	r0, r6
   193c2:	0022      	movs	r2, r4
   193c4:	002b      	movs	r3, r5
   193c6:	0039      	movs	r1, r7
   193c8:	f7fa fe96 	bl	140f8 <__aeabi_ddiv>
   193cc:	f7fb ff5e 	bl	1528c <__aeabi_d2iz>
   193d0:	4680      	mov	r8, r0
   193d2:	f002 fe6b 	bl	1c0ac <__aeabi_i2d>
   193d6:	0022      	movs	r2, r4
   193d8:	002b      	movs	r3, r5
   193da:	f7fb f9c1 	bl	14760 <__aeabi_dmul>
   193de:	0002      	movs	r2, r0
   193e0:	000b      	movs	r3, r1
   193e2:	0030      	movs	r0, r6
   193e4:	0039      	movs	r1, r7
   193e6:	f7fb fc3b 	bl	14c60 <__aeabi_dsub>
   193ea:	4643      	mov	r3, r8
   193ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   193ee:	3330      	adds	r3, #48	; 0x30
   193f0:	7013      	strb	r3, [r2, #0]
   193f2:	9b07      	ldr	r3, [sp, #28]
   193f4:	0006      	movs	r6, r0
   193f6:	000f      	movs	r7, r1
   193f8:	1c54      	adds	r4, r2, #1
   193fa:	2b01      	cmp	r3, #1
   193fc:	d04e      	beq.n	1949c <_dtoa_r+0x5ec>
   193fe:	2200      	movs	r2, #0
   19400:	4b60      	ldr	r3, [pc, #384]	; (19584 <_dtoa_r+0x6d4>)
   19402:	f7fb f9ad 	bl	14760 <__aeabi_dmul>
   19406:	2200      	movs	r2, #0
   19408:	2300      	movs	r3, #0
   1940a:	0006      	movs	r6, r0
   1940c:	000f      	movs	r7, r1
   1940e:	f7fc f8dd 	bl	155cc <__aeabi_dcmpeq>
   19412:	2800      	cmp	r0, #0
   19414:	d000      	beq.n	19418 <_dtoa_r+0x568>
   19416:	e77a      	b.n	1930e <_dtoa_r+0x45e>
   19418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1941a:	9a07      	ldr	r2, [sp, #28]
   1941c:	1c9d      	adds	r5, r3, #2
   1941e:	469c      	mov	ip, r3
   19420:	465b      	mov	r3, fp
   19422:	9306      	str	r3, [sp, #24]
   19424:	4653      	mov	r3, sl
   19426:	4462      	add	r2, ip
   19428:	46aa      	mov	sl, r5
   1942a:	9c04      	ldr	r4, [sp, #16]
   1942c:	9d05      	ldr	r5, [sp, #20]
   1942e:	4691      	mov	r9, r2
   19430:	9307      	str	r3, [sp, #28]
   19432:	e00f      	b.n	19454 <_dtoa_r+0x5a4>
   19434:	2200      	movs	r2, #0
   19436:	4b53      	ldr	r3, [pc, #332]	; (19584 <_dtoa_r+0x6d4>)
   19438:	f7fb f992 	bl	14760 <__aeabi_dmul>
   1943c:	2301      	movs	r3, #1
   1943e:	469c      	mov	ip, r3
   19440:	2200      	movs	r2, #0
   19442:	2300      	movs	r3, #0
   19444:	0006      	movs	r6, r0
   19446:	000f      	movs	r7, r1
   19448:	44e2      	add	sl, ip
   1944a:	f7fc f8bf 	bl	155cc <__aeabi_dcmpeq>
   1944e:	2800      	cmp	r0, #0
   19450:	d000      	beq.n	19454 <_dtoa_r+0x5a4>
   19452:	e2d9      	b.n	19a08 <_dtoa_r+0xb58>
   19454:	0022      	movs	r2, r4
   19456:	002b      	movs	r3, r5
   19458:	0030      	movs	r0, r6
   1945a:	0039      	movs	r1, r7
   1945c:	f7fa fe4c 	bl	140f8 <__aeabi_ddiv>
   19460:	f7fb ff14 	bl	1528c <__aeabi_d2iz>
   19464:	4680      	mov	r8, r0
   19466:	f002 fe21 	bl	1c0ac <__aeabi_i2d>
   1946a:	0022      	movs	r2, r4
   1946c:	002b      	movs	r3, r5
   1946e:	f7fb f977 	bl	14760 <__aeabi_dmul>
   19472:	0002      	movs	r2, r0
   19474:	000b      	movs	r3, r1
   19476:	0030      	movs	r0, r6
   19478:	0039      	movs	r1, r7
   1947a:	f7fb fbf1 	bl	14c60 <__aeabi_dsub>
   1947e:	4653      	mov	r3, sl
   19480:	4642      	mov	r2, r8
   19482:	3b01      	subs	r3, #1
   19484:	3230      	adds	r2, #48	; 0x30
   19486:	0006      	movs	r6, r0
   19488:	000f      	movs	r7, r1
   1948a:	46d3      	mov	fp, sl
   1948c:	701a      	strb	r2, [r3, #0]
   1948e:	45d1      	cmp	r9, sl
   19490:	d1d0      	bne.n	19434 <_dtoa_r+0x584>
   19492:	9b06      	ldr	r3, [sp, #24]
   19494:	4654      	mov	r4, sl
   19496:	469b      	mov	fp, r3
   19498:	9b07      	ldr	r3, [sp, #28]
   1949a:	469a      	mov	sl, r3
   1949c:	0032      	movs	r2, r6
   1949e:	003b      	movs	r3, r7
   194a0:	0030      	movs	r0, r6
   194a2:	0039      	movs	r1, r7
   194a4:	f7fa fb18 	bl	13ad8 <__aeabi_dadd>
   194a8:	0006      	movs	r6, r0
   194aa:	000f      	movs	r7, r1
   194ac:	0002      	movs	r2, r0
   194ae:	000b      	movs	r3, r1
   194b0:	9804      	ldr	r0, [sp, #16]
   194b2:	9905      	ldr	r1, [sp, #20]
   194b4:	f7fc f890 	bl	155d8 <__aeabi_dcmplt>
   194b8:	2800      	cmp	r0, #0
   194ba:	d10c      	bne.n	194d6 <_dtoa_r+0x626>
   194bc:	9804      	ldr	r0, [sp, #16]
   194be:	9905      	ldr	r1, [sp, #20]
   194c0:	0032      	movs	r2, r6
   194c2:	003b      	movs	r3, r7
   194c4:	f7fc f882 	bl	155cc <__aeabi_dcmpeq>
   194c8:	2800      	cmp	r0, #0
   194ca:	d100      	bne.n	194ce <_dtoa_r+0x61e>
   194cc:	e71f      	b.n	1930e <_dtoa_r+0x45e>
   194ce:	4643      	mov	r3, r8
   194d0:	07db      	lsls	r3, r3, #31
   194d2:	d400      	bmi.n	194d6 <_dtoa_r+0x626>
   194d4:	e71b      	b.n	1930e <_dtoa_r+0x45e>
   194d6:	1e65      	subs	r5, r4, #1
   194d8:	782f      	ldrb	r7, [r5, #0]
   194da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   194dc:	e006      	b.n	194ec <_dtoa_r+0x63c>
   194de:	429d      	cmp	r5, r3
   194e0:	d100      	bne.n	194e4 <_dtoa_r+0x634>
   194e2:	e351      	b.n	19b88 <_dtoa_r+0xcd8>
   194e4:	3c02      	subs	r4, #2
   194e6:	7827      	ldrb	r7, [r4, #0]
   194e8:	002c      	movs	r4, r5
   194ea:	3d01      	subs	r5, #1
   194ec:	2f39      	cmp	r7, #57	; 0x39
   194ee:	d0f6      	beq.n	194de <_dtoa_r+0x62e>
   194f0:	3701      	adds	r7, #1
   194f2:	702f      	strb	r7, [r5, #0]
   194f4:	e70b      	b.n	1930e <_dtoa_r+0x45e>
   194f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   194f8:	2a00      	cmp	r2, #0
   194fa:	d04f      	beq.n	1959c <_dtoa_r+0x6ec>
   194fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   194fe:	2a01      	cmp	r2, #1
   19500:	dc00      	bgt.n	19504 <_dtoa_r+0x654>
   19502:	e22c      	b.n	1995e <_dtoa_r+0xaae>
   19504:	9b07      	ldr	r3, [sp, #28]
   19506:	1e5c      	subs	r4, r3, #1
   19508:	464b      	mov	r3, r9
   1950a:	45a1      	cmp	r9, r4
   1950c:	da00      	bge.n	19510 <_dtoa_r+0x660>
   1950e:	e2b8      	b.n	19a82 <_dtoa_r+0xbd2>
   19510:	1b1c      	subs	r4, r3, r4
   19512:	9b07      	ldr	r3, [sp, #28]
   19514:	2b00      	cmp	r3, #0
   19516:	da00      	bge.n	1951a <_dtoa_r+0x66a>
   19518:	e3d4      	b.n	19cc4 <_dtoa_r+0xe14>
   1951a:	9b06      	ldr	r3, [sp, #24]
   1951c:	9308      	str	r3, [sp, #32]
   1951e:	9b07      	ldr	r3, [sp, #28]
   19520:	9a06      	ldr	r2, [sp, #24]
   19522:	2101      	movs	r1, #1
   19524:	4694      	mov	ip, r2
   19526:	449c      	add	ip, r3
   19528:	4662      	mov	r2, ip
   1952a:	9206      	str	r2, [sp, #24]
   1952c:	9a04      	ldr	r2, [sp, #16]
   1952e:	4650      	mov	r0, sl
   19530:	4694      	mov	ip, r2
   19532:	449c      	add	ip, r3
   19534:	4663      	mov	r3, ip
   19536:	9304      	str	r3, [sp, #16]
   19538:	f001 fd86 	bl	1b048 <__i2b>
   1953c:	4680      	mov	r8, r0
   1953e:	e032      	b.n	195a6 <_dtoa_r+0x6f6>
   19540:	9a06      	ldr	r2, [sp, #24]
   19542:	9b03      	ldr	r3, [sp, #12]
   19544:	1ad2      	subs	r2, r2, r3
   19546:	425b      	negs	r3, r3
   19548:	4699      	mov	r9, r3
   1954a:	2300      	movs	r3, #0
   1954c:	9206      	str	r2, [sp, #24]
   1954e:	930d      	str	r3, [sp, #52]	; 0x34
   19550:	e579      	b.n	19046 <_dtoa_r+0x196>
   19552:	9803      	ldr	r0, [sp, #12]
   19554:	f002 fdaa 	bl	1c0ac <__aeabi_i2d>
   19558:	000b      	movs	r3, r1
   1955a:	0002      	movs	r2, r0
   1955c:	0029      	movs	r1, r5
   1955e:	0020      	movs	r0, r4
   19560:	f7fc f834 	bl	155cc <__aeabi_dcmpeq>
   19564:	0002      	movs	r2, r0
   19566:	4250      	negs	r0, r2
   19568:	4150      	adcs	r0, r2
   1956a:	9b03      	ldr	r3, [sp, #12]
   1956c:	1a1b      	subs	r3, r3, r0
   1956e:	9303      	str	r3, [sp, #12]
   19570:	e53d      	b.n	18fee <_dtoa_r+0x13e>
   19572:	2301      	movs	r3, #1
   19574:	1a9b      	subs	r3, r3, r2
   19576:	9306      	str	r3, [sp, #24]
   19578:	2300      	movs	r3, #0
   1957a:	9304      	str	r3, [sp, #16]
   1957c:	e557      	b.n	1902e <_dtoa_r+0x17e>
   1957e:	46c0      	nop			; (mov r8, r8)
   19580:	3ff00000 	.word	0x3ff00000
   19584:	40240000 	.word	0x40240000
   19588:	00000432 	.word	0x00000432
   1958c:	00000412 	.word	0x00000412
   19590:	fe100000 	.word	0xfe100000
   19594:	0001dbd8 	.word	0x0001dbd8
   19598:	0001e2d0 	.word	0x0001e2d0
   1959c:	9b06      	ldr	r3, [sp, #24]
   1959e:	464c      	mov	r4, r9
   195a0:	9308      	str	r3, [sp, #32]
   195a2:	2300      	movs	r3, #0
   195a4:	4698      	mov	r8, r3
   195a6:	9908      	ldr	r1, [sp, #32]
   195a8:	1e0b      	subs	r3, r1, #0
   195aa:	dd0e      	ble.n	195ca <_dtoa_r+0x71a>
   195ac:	9a04      	ldr	r2, [sp, #16]
   195ae:	2a00      	cmp	r2, #0
   195b0:	dd0b      	ble.n	195ca <_dtoa_r+0x71a>
   195b2:	4293      	cmp	r3, r2
   195b4:	dd00      	ble.n	195b8 <_dtoa_r+0x708>
   195b6:	e187      	b.n	198c8 <_dtoa_r+0xa18>
   195b8:	9a06      	ldr	r2, [sp, #24]
   195ba:	1ad2      	subs	r2, r2, r3
   195bc:	9206      	str	r2, [sp, #24]
   195be:	9a08      	ldr	r2, [sp, #32]
   195c0:	1ad2      	subs	r2, r2, r3
   195c2:	9208      	str	r2, [sp, #32]
   195c4:	9a04      	ldr	r2, [sp, #16]
   195c6:	1ad3      	subs	r3, r2, r3
   195c8:	9304      	str	r3, [sp, #16]
   195ca:	464b      	mov	r3, r9
   195cc:	2b00      	cmp	r3, #0
   195ce:	d01a      	beq.n	19606 <_dtoa_r+0x756>
   195d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   195d2:	2b00      	cmp	r3, #0
   195d4:	d100      	bne.n	195d8 <_dtoa_r+0x728>
   195d6:	e1bb      	b.n	19950 <_dtoa_r+0xaa0>
   195d8:	2c00      	cmp	r4, #0
   195da:	dd10      	ble.n	195fe <_dtoa_r+0x74e>
   195dc:	4641      	mov	r1, r8
   195de:	0022      	movs	r2, r4
   195e0:	4650      	mov	r0, sl
   195e2:	f001 fde5 	bl	1b1b0 <__pow5mult>
   195e6:	465a      	mov	r2, fp
   195e8:	0001      	movs	r1, r0
   195ea:	4680      	mov	r8, r0
   195ec:	4650      	mov	r0, sl
   195ee:	f001 fd35 	bl	1b05c <__multiply>
   195f2:	0005      	movs	r5, r0
   195f4:	4659      	mov	r1, fp
   195f6:	4650      	mov	r0, sl
   195f8:	f001 fc8e 	bl	1af18 <_Bfree>
   195fc:	46ab      	mov	fp, r5
   195fe:	464b      	mov	r3, r9
   19600:	1b1a      	subs	r2, r3, r4
   19602:	d000      	beq.n	19606 <_dtoa_r+0x756>
   19604:	e1a5      	b.n	19952 <_dtoa_r+0xaa2>
   19606:	2101      	movs	r1, #1
   19608:	4650      	mov	r0, sl
   1960a:	f001 fd1d 	bl	1b048 <__i2b>
   1960e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19610:	4681      	mov	r9, r0
   19612:	2b00      	cmp	r3, #0
   19614:	dd1d      	ble.n	19652 <_dtoa_r+0x7a2>
   19616:	001a      	movs	r2, r3
   19618:	0001      	movs	r1, r0
   1961a:	4650      	mov	r0, sl
   1961c:	f001 fdc8 	bl	1b1b0 <__pow5mult>
   19620:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19622:	4681      	mov	r9, r0
   19624:	2b01      	cmp	r3, #1
   19626:	dc00      	bgt.n	1962a <_dtoa_r+0x77a>
   19628:	e150      	b.n	198cc <_dtoa_r+0xa1c>
   1962a:	2400      	movs	r4, #0
   1962c:	464b      	mov	r3, r9
   1962e:	691b      	ldr	r3, [r3, #16]
   19630:	3303      	adds	r3, #3
   19632:	009b      	lsls	r3, r3, #2
   19634:	444b      	add	r3, r9
   19636:	6858      	ldr	r0, [r3, #4]
   19638:	f001 fcbe 	bl	1afb8 <__hi0bits>
   1963c:	2320      	movs	r3, #32
   1963e:	1a1b      	subs	r3, r3, r0
   19640:	e010      	b.n	19664 <_dtoa_r+0x7b4>
   19642:	2220      	movs	r2, #32
   19644:	0030      	movs	r0, r6
   19646:	1ad3      	subs	r3, r2, r3
   19648:	4098      	lsls	r0, r3
   1964a:	e685      	b.n	19358 <_dtoa_r+0x4a8>
   1964c:	2300      	movs	r3, #0
   1964e:	930c      	str	r3, [sp, #48]	; 0x30
   19650:	e4e3      	b.n	1901a <_dtoa_r+0x16a>
   19652:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19654:	2400      	movs	r4, #0
   19656:	2b01      	cmp	r3, #1
   19658:	dc00      	bgt.n	1965c <_dtoa_r+0x7ac>
   1965a:	e18b      	b.n	19974 <_dtoa_r+0xac4>
   1965c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1965e:	2301      	movs	r3, #1
   19660:	2a00      	cmp	r2, #0
   19662:	d1e3      	bne.n	1962c <_dtoa_r+0x77c>
   19664:	9904      	ldr	r1, [sp, #16]
   19666:	201f      	movs	r0, #31
   19668:	468c      	mov	ip, r1
   1966a:	4463      	add	r3, ip
   1966c:	4018      	ands	r0, r3
   1966e:	d100      	bne.n	19672 <_dtoa_r+0x7c2>
   19670:	e0ae      	b.n	197d0 <_dtoa_r+0x920>
   19672:	2320      	movs	r3, #32
   19674:	1a1b      	subs	r3, r3, r0
   19676:	2b04      	cmp	r3, #4
   19678:	dc00      	bgt.n	1967c <_dtoa_r+0x7cc>
   1967a:	e3cc      	b.n	19e16 <_dtoa_r+0xf66>
   1967c:	231c      	movs	r3, #28
   1967e:	1a18      	subs	r0, r3, r0
   19680:	9b06      	ldr	r3, [sp, #24]
   19682:	469c      	mov	ip, r3
   19684:	4484      	add	ip, r0
   19686:	4663      	mov	r3, ip
   19688:	9306      	str	r3, [sp, #24]
   1968a:	9b08      	ldr	r3, [sp, #32]
   1968c:	469c      	mov	ip, r3
   1968e:	4484      	add	ip, r0
   19690:	4663      	mov	r3, ip
   19692:	468c      	mov	ip, r1
   19694:	4484      	add	ip, r0
   19696:	9308      	str	r3, [sp, #32]
   19698:	4663      	mov	r3, ip
   1969a:	9304      	str	r3, [sp, #16]
   1969c:	9b06      	ldr	r3, [sp, #24]
   1969e:	2b00      	cmp	r3, #0
   196a0:	dd05      	ble.n	196ae <_dtoa_r+0x7fe>
   196a2:	4659      	mov	r1, fp
   196a4:	001a      	movs	r2, r3
   196a6:	4650      	mov	r0, sl
   196a8:	f001 fde2 	bl	1b270 <__lshift>
   196ac:	4683      	mov	fp, r0
   196ae:	9b04      	ldr	r3, [sp, #16]
   196b0:	2b00      	cmp	r3, #0
   196b2:	dd05      	ble.n	196c0 <_dtoa_r+0x810>
   196b4:	4649      	mov	r1, r9
   196b6:	001a      	movs	r2, r3
   196b8:	4650      	mov	r0, sl
   196ba:	f001 fdd9 	bl	1b270 <__lshift>
   196be:	4681      	mov	r9, r0
   196c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   196c2:	2b00      	cmp	r3, #0
   196c4:	d000      	beq.n	196c8 <_dtoa_r+0x818>
   196c6:	e094      	b.n	197f2 <_dtoa_r+0x942>
   196c8:	9b07      	ldr	r3, [sp, #28]
   196ca:	2b00      	cmp	r3, #0
   196cc:	dc00      	bgt.n	196d0 <_dtoa_r+0x820>
   196ce:	e175      	b.n	199bc <_dtoa_r+0xb0c>
   196d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   196d2:	2b00      	cmp	r3, #0
   196d4:	d100      	bne.n	196d8 <_dtoa_r+0x828>
   196d6:	e0a6      	b.n	19826 <_dtoa_r+0x976>
   196d8:	9b08      	ldr	r3, [sp, #32]
   196da:	2b00      	cmp	r3, #0
   196dc:	dd05      	ble.n	196ea <_dtoa_r+0x83a>
   196de:	4641      	mov	r1, r8
   196e0:	001a      	movs	r2, r3
   196e2:	4650      	mov	r0, sl
   196e4:	f001 fdc4 	bl	1b270 <__lshift>
   196e8:	4680      	mov	r8, r0
   196ea:	4643      	mov	r3, r8
   196ec:	930c      	str	r3, [sp, #48]	; 0x30
   196ee:	2c00      	cmp	r4, #0
   196f0:	d000      	beq.n	196f4 <_dtoa_r+0x844>
   196f2:	e250      	b.n	19b96 <_dtoa_r+0xce6>
   196f4:	9c07      	ldr	r4, [sp, #28]
   196f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   196f8:	3c01      	subs	r4, #1
   196fa:	0023      	movs	r3, r4
   196fc:	4694      	mov	ip, r2
   196fe:	4463      	add	r3, ip
   19700:	9308      	str	r3, [sp, #32]
   19702:	2301      	movs	r3, #1
   19704:	4033      	ands	r3, r6
   19706:	9307      	str	r3, [sp, #28]
   19708:	464b      	mov	r3, r9
   1970a:	9306      	str	r3, [sp, #24]
   1970c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1970e:	4657      	mov	r7, sl
   19710:	4645      	mov	r5, r8
   19712:	465e      	mov	r6, fp
   19714:	4692      	mov	sl, r2
   19716:	4698      	mov	r8, r3
   19718:	9b06      	ldr	r3, [sp, #24]
   1971a:	0030      	movs	r0, r6
   1971c:	0019      	movs	r1, r3
   1971e:	4699      	mov	r9, r3
   19720:	f7ff fb1c 	bl	18d5c <quorem>
   19724:	0003      	movs	r3, r0
   19726:	900b      	str	r0, [sp, #44]	; 0x2c
   19728:	3330      	adds	r3, #48	; 0x30
   1972a:	0029      	movs	r1, r5
   1972c:	0030      	movs	r0, r6
   1972e:	9304      	str	r3, [sp, #16]
   19730:	f001 fdfe 	bl	1b330 <__mcmp>
   19734:	4649      	mov	r1, r9
   19736:	0004      	movs	r4, r0
   19738:	4642      	mov	r2, r8
   1973a:	0038      	movs	r0, r7
   1973c:	f001 fe12 	bl	1b364 <__mdiff>
   19740:	68c3      	ldr	r3, [r0, #12]
   19742:	4681      	mov	r9, r0
   19744:	2b00      	cmp	r3, #0
   19746:	d000      	beq.n	1974a <_dtoa_r+0x89a>
   19748:	e11e      	b.n	19988 <_dtoa_r+0xad8>
   1974a:	0001      	movs	r1, r0
   1974c:	0030      	movs	r0, r6
   1974e:	f001 fdef 	bl	1b330 <__mcmp>
   19752:	4683      	mov	fp, r0
   19754:	4649      	mov	r1, r9
   19756:	0038      	movs	r0, r7
   19758:	f001 fbde 	bl	1af18 <_Bfree>
   1975c:	465b      	mov	r3, fp
   1975e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19760:	4313      	orrs	r3, r2
   19762:	d103      	bne.n	1976c <_dtoa_r+0x8bc>
   19764:	9b07      	ldr	r3, [sp, #28]
   19766:	2b00      	cmp	r3, #0
   19768:	d100      	bne.n	1976c <_dtoa_r+0x8bc>
   1976a:	e306      	b.n	19d7a <_dtoa_r+0xeca>
   1976c:	2c00      	cmp	r4, #0
   1976e:	da00      	bge.n	19772 <_dtoa_r+0x8c2>
   19770:	e1a8      	b.n	19ac4 <_dtoa_r+0xc14>
   19772:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19774:	431c      	orrs	r4, r3
   19776:	d103      	bne.n	19780 <_dtoa_r+0x8d0>
   19778:	9b07      	ldr	r3, [sp, #28]
   1977a:	2b00      	cmp	r3, #0
   1977c:	d100      	bne.n	19780 <_dtoa_r+0x8d0>
   1977e:	e1a1      	b.n	19ac4 <_dtoa_r+0xc14>
   19780:	465b      	mov	r3, fp
   19782:	2b00      	cmp	r3, #0
   19784:	dd00      	ble.n	19788 <_dtoa_r+0x8d8>
   19786:	e282      	b.n	19c8e <_dtoa_r+0xdde>
   19788:	4669      	mov	r1, sp
   1978a:	4652      	mov	r2, sl
   1978c:	4653      	mov	r3, sl
   1978e:	7c09      	ldrb	r1, [r1, #16]
   19790:	1c5c      	adds	r4, r3, #1
   19792:	7011      	strb	r1, [r2, #0]
   19794:	9a08      	ldr	r2, [sp, #32]
   19796:	4552      	cmp	r2, sl
   19798:	d100      	bne.n	1979c <_dtoa_r+0x8ec>
   1979a:	e28a      	b.n	19cb2 <_dtoa_r+0xe02>
   1979c:	0031      	movs	r1, r6
   1979e:	2300      	movs	r3, #0
   197a0:	220a      	movs	r2, #10
   197a2:	0038      	movs	r0, r7
   197a4:	f001 fbc2 	bl	1af2c <__multadd>
   197a8:	2300      	movs	r3, #0
   197aa:	0006      	movs	r6, r0
   197ac:	220a      	movs	r2, #10
   197ae:	0029      	movs	r1, r5
   197b0:	0038      	movs	r0, r7
   197b2:	4545      	cmp	r5, r8
   197b4:	d100      	bne.n	197b8 <_dtoa_r+0x908>
   197b6:	e0e1      	b.n	1997c <_dtoa_r+0xacc>
   197b8:	f001 fbb8 	bl	1af2c <__multadd>
   197bc:	4641      	mov	r1, r8
   197be:	0005      	movs	r5, r0
   197c0:	2300      	movs	r3, #0
   197c2:	220a      	movs	r2, #10
   197c4:	0038      	movs	r0, r7
   197c6:	f001 fbb1 	bl	1af2c <__multadd>
   197ca:	46a2      	mov	sl, r4
   197cc:	4680      	mov	r8, r0
   197ce:	e7a3      	b.n	19718 <_dtoa_r+0x868>
   197d0:	201c      	movs	r0, #28
   197d2:	9b06      	ldr	r3, [sp, #24]
   197d4:	469c      	mov	ip, r3
   197d6:	4484      	add	ip, r0
   197d8:	4663      	mov	r3, ip
   197da:	9306      	str	r3, [sp, #24]
   197dc:	9b08      	ldr	r3, [sp, #32]
   197de:	469c      	mov	ip, r3
   197e0:	4484      	add	ip, r0
   197e2:	4663      	mov	r3, ip
   197e4:	9308      	str	r3, [sp, #32]
   197e6:	9b04      	ldr	r3, [sp, #16]
   197e8:	469c      	mov	ip, r3
   197ea:	4484      	add	ip, r0
   197ec:	4663      	mov	r3, ip
   197ee:	9304      	str	r3, [sp, #16]
   197f0:	e754      	b.n	1969c <_dtoa_r+0x7ec>
   197f2:	4649      	mov	r1, r9
   197f4:	4658      	mov	r0, fp
   197f6:	f001 fd9b 	bl	1b330 <__mcmp>
   197fa:	2800      	cmp	r0, #0
   197fc:	db00      	blt.n	19800 <_dtoa_r+0x950>
   197fe:	e763      	b.n	196c8 <_dtoa_r+0x818>
   19800:	9b03      	ldr	r3, [sp, #12]
   19802:	4659      	mov	r1, fp
   19804:	3b01      	subs	r3, #1
   19806:	9303      	str	r3, [sp, #12]
   19808:	220a      	movs	r2, #10
   1980a:	2300      	movs	r3, #0
   1980c:	4650      	mov	r0, sl
   1980e:	f001 fb8d 	bl	1af2c <__multadd>
   19812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19814:	4683      	mov	fp, r0
   19816:	2b00      	cmp	r3, #0
   19818:	d000      	beq.n	1981c <_dtoa_r+0x96c>
   1981a:	e2ca      	b.n	19db2 <_dtoa_r+0xf02>
   1981c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1981e:	2b00      	cmp	r3, #0
   19820:	dc00      	bgt.n	19824 <_dtoa_r+0x974>
   19822:	e2d8      	b.n	19dd6 <_dtoa_r+0xf26>
   19824:	9307      	str	r3, [sp, #28]
   19826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19828:	465d      	mov	r5, fp
   1982a:	2400      	movs	r4, #0
   1982c:	9f07      	ldr	r7, [sp, #28]
   1982e:	469b      	mov	fp, r3
   19830:	e006      	b.n	19840 <_dtoa_r+0x990>
   19832:	0029      	movs	r1, r5
   19834:	2300      	movs	r3, #0
   19836:	220a      	movs	r2, #10
   19838:	4650      	mov	r0, sl
   1983a:	f001 fb77 	bl	1af2c <__multadd>
   1983e:	0005      	movs	r5, r0
   19840:	4649      	mov	r1, r9
   19842:	0028      	movs	r0, r5
   19844:	f7ff fa8a 	bl	18d5c <quorem>
   19848:	465b      	mov	r3, fp
   1984a:	3030      	adds	r0, #48	; 0x30
   1984c:	5518      	strb	r0, [r3, r4]
   1984e:	3401      	adds	r4, #1
   19850:	42bc      	cmp	r4, r7
   19852:	dbee      	blt.n	19832 <_dtoa_r+0x982>
   19854:	46ab      	mov	fp, r5
   19856:	0006      	movs	r6, r0
   19858:	9c07      	ldr	r4, [sp, #28]
   1985a:	2c00      	cmp	r4, #0
   1985c:	dc00      	bgt.n	19860 <_dtoa_r+0x9b0>
   1985e:	e237      	b.n	19cd0 <_dtoa_r+0xe20>
   19860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19862:	2700      	movs	r7, #0
   19864:	469c      	mov	ip, r3
   19866:	4464      	add	r4, ip
   19868:	4659      	mov	r1, fp
   1986a:	2201      	movs	r2, #1
   1986c:	4650      	mov	r0, sl
   1986e:	f001 fcff 	bl	1b270 <__lshift>
   19872:	4649      	mov	r1, r9
   19874:	4683      	mov	fp, r0
   19876:	f001 fd5b 	bl	1b330 <__mcmp>
   1987a:	2800      	cmp	r0, #0
   1987c:	dc00      	bgt.n	19880 <_dtoa_r+0x9d0>
   1987e:	e144      	b.n	19b0a <_dtoa_r+0xc5a>
   19880:	1e65      	subs	r5, r4, #1
   19882:	782b      	ldrb	r3, [r5, #0]
   19884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19886:	e006      	b.n	19896 <_dtoa_r+0x9e6>
   19888:	4295      	cmp	r5, r2
   1988a:	d100      	bne.n	1988e <_dtoa_r+0x9de>
   1988c:	e0b1      	b.n	199f2 <_dtoa_r+0xb42>
   1988e:	3c02      	subs	r4, #2
   19890:	7823      	ldrb	r3, [r4, #0]
   19892:	002c      	movs	r4, r5
   19894:	3d01      	subs	r5, #1
   19896:	2b39      	cmp	r3, #57	; 0x39
   19898:	d0f6      	beq.n	19888 <_dtoa_r+0x9d8>
   1989a:	3301      	adds	r3, #1
   1989c:	702b      	strb	r3, [r5, #0]
   1989e:	4649      	mov	r1, r9
   198a0:	4650      	mov	r0, sl
   198a2:	f001 fb39 	bl	1af18 <_Bfree>
   198a6:	4643      	mov	r3, r8
   198a8:	2b00      	cmp	r3, #0
   198aa:	d100      	bne.n	198ae <_dtoa_r+0x9fe>
   198ac:	e52f      	b.n	1930e <_dtoa_r+0x45e>
   198ae:	2f00      	cmp	r7, #0
   198b0:	d005      	beq.n	198be <_dtoa_r+0xa0e>
   198b2:	4547      	cmp	r7, r8
   198b4:	d003      	beq.n	198be <_dtoa_r+0xa0e>
   198b6:	0039      	movs	r1, r7
   198b8:	4650      	mov	r0, sl
   198ba:	f001 fb2d 	bl	1af18 <_Bfree>
   198be:	4641      	mov	r1, r8
   198c0:	4650      	mov	r0, sl
   198c2:	f001 fb29 	bl	1af18 <_Bfree>
   198c6:	e522      	b.n	1930e <_dtoa_r+0x45e>
   198c8:	0013      	movs	r3, r2
   198ca:	e675      	b.n	195b8 <_dtoa_r+0x708>
   198cc:	2e00      	cmp	r6, #0
   198ce:	d000      	beq.n	198d2 <_dtoa_r+0xa22>
   198d0:	e6ab      	b.n	1962a <_dtoa_r+0x77a>
   198d2:	033b      	lsls	r3, r7, #12
   198d4:	2400      	movs	r4, #0
   198d6:	2b00      	cmp	r3, #0
   198d8:	d000      	beq.n	198dc <_dtoa_r+0xa2c>
   198da:	e6bf      	b.n	1965c <_dtoa_r+0x7ac>
   198dc:	4bba      	ldr	r3, [pc, #744]	; (19bc8 <_dtoa_r+0xd18>)
   198de:	423b      	tst	r3, r7
   198e0:	d100      	bne.n	198e4 <_dtoa_r+0xa34>
   198e2:	e6bb      	b.n	1965c <_dtoa_r+0x7ac>
   198e4:	9b06      	ldr	r3, [sp, #24]
   198e6:	3401      	adds	r4, #1
   198e8:	3301      	adds	r3, #1
   198ea:	9306      	str	r3, [sp, #24]
   198ec:	9b04      	ldr	r3, [sp, #16]
   198ee:	3301      	adds	r3, #1
   198f0:	9304      	str	r3, [sp, #16]
   198f2:	e6b3      	b.n	1965c <_dtoa_r+0x7ac>
   198f4:	2301      	movs	r3, #1
   198f6:	930b      	str	r3, [sp, #44]	; 0x2c
   198f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   198fa:	2b00      	cmp	r3, #0
   198fc:	dc00      	bgt.n	19900 <_dtoa_r+0xa50>
   198fe:	e0d1      	b.n	19aa4 <_dtoa_r+0xbf4>
   19900:	001d      	movs	r5, r3
   19902:	4698      	mov	r8, r3
   19904:	930e      	str	r3, [sp, #56]	; 0x38
   19906:	9307      	str	r3, [sp, #28]
   19908:	f7ff fbc8 	bl	1909c <_dtoa_r+0x1ec>
   1990c:	9b07      	ldr	r3, [sp, #28]
   1990e:	2b00      	cmp	r3, #0
   19910:	dd00      	ble.n	19914 <_dtoa_r+0xa64>
   19912:	e553      	b.n	193bc <_dtoa_r+0x50c>
   19914:	d000      	beq.n	19918 <_dtoa_r+0xa68>
   19916:	e0ad      	b.n	19a74 <_dtoa_r+0xbc4>
   19918:	9804      	ldr	r0, [sp, #16]
   1991a:	9905      	ldr	r1, [sp, #20]
   1991c:	2200      	movs	r2, #0
   1991e:	4bab      	ldr	r3, [pc, #684]	; (19bcc <_dtoa_r+0xd1c>)
   19920:	f7fa ff1e 	bl	14760 <__aeabi_dmul>
   19924:	003b      	movs	r3, r7
   19926:	0032      	movs	r2, r6
   19928:	f7fb fe74 	bl	15614 <__aeabi_dcmpge>
   1992c:	2300      	movs	r3, #0
   1992e:	4699      	mov	r9, r3
   19930:	4698      	mov	r8, r3
   19932:	2800      	cmp	r0, #0
   19934:	d055      	beq.n	199e2 <_dtoa_r+0xb32>
   19936:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19938:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1993a:	43db      	mvns	r3, r3
   1993c:	9303      	str	r3, [sp, #12]
   1993e:	4649      	mov	r1, r9
   19940:	4650      	mov	r0, sl
   19942:	f001 fae9 	bl	1af18 <_Bfree>
   19946:	4643      	mov	r3, r8
   19948:	2b00      	cmp	r3, #0
   1994a:	d100      	bne.n	1994e <_dtoa_r+0xa9e>
   1994c:	e4df      	b.n	1930e <_dtoa_r+0x45e>
   1994e:	e7b6      	b.n	198be <_dtoa_r+0xa0e>
   19950:	464a      	mov	r2, r9
   19952:	4659      	mov	r1, fp
   19954:	4650      	mov	r0, sl
   19956:	f001 fc2b 	bl	1b1b0 <__pow5mult>
   1995a:	4683      	mov	fp, r0
   1995c:	e653      	b.n	19606 <_dtoa_r+0x756>
   1995e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19960:	2a00      	cmp	r2, #0
   19962:	d100      	bne.n	19966 <_dtoa_r+0xab6>
   19964:	e1b6      	b.n	19cd4 <_dtoa_r+0xe24>
   19966:	4a9a      	ldr	r2, [pc, #616]	; (19bd0 <_dtoa_r+0xd20>)
   19968:	464c      	mov	r4, r9
   1996a:	4694      	mov	ip, r2
   1996c:	9a06      	ldr	r2, [sp, #24]
   1996e:	4463      	add	r3, ip
   19970:	9208      	str	r2, [sp, #32]
   19972:	e5d5      	b.n	19520 <_dtoa_r+0x670>
   19974:	2e00      	cmp	r6, #0
   19976:	d000      	beq.n	1997a <_dtoa_r+0xaca>
   19978:	e670      	b.n	1965c <_dtoa_r+0x7ac>
   1997a:	e7aa      	b.n	198d2 <_dtoa_r+0xa22>
   1997c:	f001 fad6 	bl	1af2c <__multadd>
   19980:	46a2      	mov	sl, r4
   19982:	0005      	movs	r5, r0
   19984:	4680      	mov	r8, r0
   19986:	e6c7      	b.n	19718 <_dtoa_r+0x868>
   19988:	2301      	movs	r3, #1
   1998a:	469b      	mov	fp, r3
   1998c:	e6e2      	b.n	19754 <_dtoa_r+0x8a4>
   1998e:	2300      	movs	r3, #0
   19990:	930b      	str	r3, [sp, #44]	; 0x2c
   19992:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19994:	2b02      	cmp	r3, #2
   19996:	d0af      	beq.n	198f8 <_dtoa_r+0xa48>
   19998:	2400      	movs	r4, #0
   1999a:	4653      	mov	r3, sl
   1999c:	0021      	movs	r1, r4
   1999e:	645c      	str	r4, [r3, #68]	; 0x44
   199a0:	4650      	mov	r0, sl
   199a2:	f001 fa91 	bl	1aec8 <_Balloc>
   199a6:	4653      	mov	r3, sl
   199a8:	6418      	str	r0, [r3, #64]	; 0x40
   199aa:	2301      	movs	r3, #1
   199ac:	425b      	negs	r3, r3
   199ae:	9307      	str	r3, [sp, #28]
   199b0:	930e      	str	r3, [sp, #56]	; 0x38
   199b2:	3302      	adds	r3, #2
   199b4:	900a      	str	r0, [sp, #40]	; 0x28
   199b6:	9423      	str	r4, [sp, #140]	; 0x8c
   199b8:	930b      	str	r3, [sp, #44]	; 0x2c
   199ba:	e4ec      	b.n	19396 <_dtoa_r+0x4e6>
   199bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   199be:	2b02      	cmp	r3, #2
   199c0:	dc00      	bgt.n	199c4 <_dtoa_r+0xb14>
   199c2:	e685      	b.n	196d0 <_dtoa_r+0x820>
   199c4:	9b07      	ldr	r3, [sp, #28]
   199c6:	2b00      	cmp	r3, #0
   199c8:	d1b5      	bne.n	19936 <_dtoa_r+0xa86>
   199ca:	4649      	mov	r1, r9
   199cc:	2205      	movs	r2, #5
   199ce:	4650      	mov	r0, sl
   199d0:	f001 faac 	bl	1af2c <__multadd>
   199d4:	4681      	mov	r9, r0
   199d6:	0001      	movs	r1, r0
   199d8:	4658      	mov	r0, fp
   199da:	f001 fca9 	bl	1b330 <__mcmp>
   199de:	2800      	cmp	r0, #0
   199e0:	dda9      	ble.n	19936 <_dtoa_r+0xa86>
   199e2:	2331      	movs	r3, #49	; 0x31
   199e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   199e6:	7013      	strb	r3, [r2, #0]
   199e8:	9b03      	ldr	r3, [sp, #12]
   199ea:	1c54      	adds	r4, r2, #1
   199ec:	3301      	adds	r3, #1
   199ee:	9303      	str	r3, [sp, #12]
   199f0:	e7a5      	b.n	1993e <_dtoa_r+0xa8e>
   199f2:	9b03      	ldr	r3, [sp, #12]
   199f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   199f6:	3301      	adds	r3, #1
   199f8:	9303      	str	r3, [sp, #12]
   199fa:	2331      	movs	r3, #49	; 0x31
   199fc:	7013      	strb	r3, [r2, #0]
   199fe:	e74e      	b.n	1989e <_dtoa_r+0x9ee>
   19a00:	2300      	movs	r3, #0
   19a02:	930b      	str	r3, [sp, #44]	; 0x2c
   19a04:	f7ff fb3d 	bl	19082 <_dtoa_r+0x1d2>
   19a08:	9b06      	ldr	r3, [sp, #24]
   19a0a:	465c      	mov	r4, fp
   19a0c:	469b      	mov	fp, r3
   19a0e:	9b07      	ldr	r3, [sp, #28]
   19a10:	469a      	mov	sl, r3
   19a12:	e47c      	b.n	1930e <_dtoa_r+0x45e>
   19a14:	4640      	mov	r0, r8
   19a16:	f002 fb49 	bl	1c0ac <__aeabi_i2d>
   19a1a:	0032      	movs	r2, r6
   19a1c:	003b      	movs	r3, r7
   19a1e:	f7fa fe9f 	bl	14760 <__aeabi_dmul>
   19a22:	2200      	movs	r2, #0
   19a24:	4b6b      	ldr	r3, [pc, #428]	; (19bd4 <_dtoa_r+0xd24>)
   19a26:	f7fa f857 	bl	13ad8 <__aeabi_dadd>
   19a2a:	4a6b      	ldr	r2, [pc, #428]	; (19bd8 <_dtoa_r+0xd28>)
   19a2c:	000b      	movs	r3, r1
   19a2e:	4694      	mov	ip, r2
   19a30:	4463      	add	r3, ip
   19a32:	9008      	str	r0, [sp, #32]
   19a34:	9109      	str	r1, [sp, #36]	; 0x24
   19a36:	9309      	str	r3, [sp, #36]	; 0x24
   19a38:	2200      	movs	r2, #0
   19a3a:	4b64      	ldr	r3, [pc, #400]	; (19bcc <_dtoa_r+0xd1c>)
   19a3c:	0030      	movs	r0, r6
   19a3e:	0039      	movs	r1, r7
   19a40:	f7fb f90e 	bl	14c60 <__aeabi_dsub>
   19a44:	9e08      	ldr	r6, [sp, #32]
   19a46:	9f09      	ldr	r7, [sp, #36]	; 0x24
   19a48:	0032      	movs	r2, r6
   19a4a:	003b      	movs	r3, r7
   19a4c:	0004      	movs	r4, r0
   19a4e:	000d      	movs	r5, r1
   19a50:	f7fb fdd6 	bl	15600 <__aeabi_dcmpgt>
   19a54:	2800      	cmp	r0, #0
   19a56:	d000      	beq.n	19a5a <_dtoa_r+0xbaa>
   19a58:	e0b2      	b.n	19bc0 <_dtoa_r+0xd10>
   19a5a:	2080      	movs	r0, #128	; 0x80
   19a5c:	0600      	lsls	r0, r0, #24
   19a5e:	4684      	mov	ip, r0
   19a60:	0039      	movs	r1, r7
   19a62:	4461      	add	r1, ip
   19a64:	000b      	movs	r3, r1
   19a66:	0032      	movs	r2, r6
   19a68:	0020      	movs	r0, r4
   19a6a:	0029      	movs	r1, r5
   19a6c:	f7fb fdb4 	bl	155d8 <__aeabi_dcmplt>
   19a70:	2800      	cmp	r0, #0
   19a72:	d057      	beq.n	19b24 <_dtoa_r+0xc74>
   19a74:	2300      	movs	r3, #0
   19a76:	4699      	mov	r9, r3
   19a78:	4698      	mov	r8, r3
   19a7a:	e75c      	b.n	19936 <_dtoa_r+0xa86>
   19a7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   19a7e:	f7ff fa4c 	bl	18f1a <_dtoa_r+0x6a>
   19a82:	1ae2      	subs	r2, r4, r3
   19a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a86:	46a1      	mov	r9, r4
   19a88:	469c      	mov	ip, r3
   19a8a:	4494      	add	ip, r2
   19a8c:	4663      	mov	r3, ip
   19a8e:	2400      	movs	r4, #0
   19a90:	930d      	str	r3, [sp, #52]	; 0x34
   19a92:	e53e      	b.n	19512 <_dtoa_r+0x662>
   19a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19a98:	9208      	str	r2, [sp, #32]
   19a9a:	9309      	str	r3, [sp, #36]	; 0x24
   19a9c:	2302      	movs	r3, #2
   19a9e:	4698      	mov	r8, r3
   19aa0:	f7ff fb3a 	bl	19118 <_dtoa_r+0x268>
   19aa4:	2300      	movs	r3, #0
   19aa6:	4652      	mov	r2, sl
   19aa8:	2100      	movs	r1, #0
   19aaa:	6453      	str	r3, [r2, #68]	; 0x44
   19aac:	4650      	mov	r0, sl
   19aae:	f001 fa0b 	bl	1aec8 <_Balloc>
   19ab2:	4653      	mov	r3, sl
   19ab4:	6418      	str	r0, [r3, #64]	; 0x40
   19ab6:	2301      	movs	r3, #1
   19ab8:	900a      	str	r0, [sp, #40]	; 0x28
   19aba:	9307      	str	r3, [sp, #28]
   19abc:	9323      	str	r3, [sp, #140]	; 0x8c
   19abe:	930e      	str	r3, [sp, #56]	; 0x38
   19ac0:	f7ff fb07 	bl	190d2 <_dtoa_r+0x222>
   19ac4:	4643      	mov	r3, r8
   19ac6:	930c      	str	r3, [sp, #48]	; 0x30
   19ac8:	465b      	mov	r3, fp
   19aca:	9a06      	ldr	r2, [sp, #24]
   19acc:	46a8      	mov	r8, r5
   19ace:	46b3      	mov	fp, r6
   19ad0:	4655      	mov	r5, sl
   19ad2:	9e04      	ldr	r6, [sp, #16]
   19ad4:	4691      	mov	r9, r2
   19ad6:	46ba      	mov	sl, r7
   19ad8:	2b00      	cmp	r3, #0
   19ada:	dd10      	ble.n	19afe <_dtoa_r+0xc4e>
   19adc:	4659      	mov	r1, fp
   19ade:	2201      	movs	r2, #1
   19ae0:	0038      	movs	r0, r7
   19ae2:	f001 fbc5 	bl	1b270 <__lshift>
   19ae6:	4649      	mov	r1, r9
   19ae8:	4683      	mov	fp, r0
   19aea:	f001 fc21 	bl	1b330 <__mcmp>
   19aee:	2800      	cmp	r0, #0
   19af0:	dc00      	bgt.n	19af4 <_dtoa_r+0xc44>
   19af2:	e157      	b.n	19da4 <_dtoa_r+0xef4>
   19af4:	2e39      	cmp	r6, #57	; 0x39
   19af6:	d100      	bne.n	19afa <_dtoa_r+0xc4a>
   19af8:	e122      	b.n	19d40 <_dtoa_r+0xe90>
   19afa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   19afc:	3631      	adds	r6, #49	; 0x31
   19afe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19b00:	4647      	mov	r7, r8
   19b02:	1c6c      	adds	r4, r5, #1
   19b04:	702e      	strb	r6, [r5, #0]
   19b06:	4698      	mov	r8, r3
   19b08:	e6c9      	b.n	1989e <_dtoa_r+0x9ee>
   19b0a:	2800      	cmp	r0, #0
   19b0c:	d103      	bne.n	19b16 <_dtoa_r+0xc66>
   19b0e:	07f3      	lsls	r3, r6, #31
   19b10:	d501      	bpl.n	19b16 <_dtoa_r+0xc66>
   19b12:	e6b5      	b.n	19880 <_dtoa_r+0x9d0>
   19b14:	001c      	movs	r4, r3
   19b16:	1e63      	subs	r3, r4, #1
   19b18:	781a      	ldrb	r2, [r3, #0]
   19b1a:	2a30      	cmp	r2, #48	; 0x30
   19b1c:	d0fa      	beq.n	19b14 <_dtoa_r+0xc64>
   19b1e:	e6be      	b.n	1989e <_dtoa_r+0x9ee>
   19b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19b22:	4699      	mov	r9, r3
   19b24:	9e10      	ldr	r6, [sp, #64]	; 0x40
   19b26:	9f11      	ldr	r7, [sp, #68]	; 0x44
   19b28:	e435      	b.n	19396 <_dtoa_r+0x4e6>
   19b2a:	2501      	movs	r5, #1
   19b2c:	f7ff fab4 	bl	19098 <_dtoa_r+0x1e8>
   19b30:	9b03      	ldr	r3, [sp, #12]
   19b32:	2b00      	cmp	r3, #0
   19b34:	d100      	bne.n	19b38 <_dtoa_r+0xc88>
   19b36:	e0d4      	b.n	19ce2 <_dtoa_r+0xe32>
   19b38:	9810      	ldr	r0, [sp, #64]	; 0x40
   19b3a:	9911      	ldr	r1, [sp, #68]	; 0x44
   19b3c:	425c      	negs	r4, r3
   19b3e:	230f      	movs	r3, #15
   19b40:	4a26      	ldr	r2, [pc, #152]	; (19bdc <_dtoa_r+0xd2c>)
   19b42:	4023      	ands	r3, r4
   19b44:	00db      	lsls	r3, r3, #3
   19b46:	18d3      	adds	r3, r2, r3
   19b48:	681a      	ldr	r2, [r3, #0]
   19b4a:	685b      	ldr	r3, [r3, #4]
   19b4c:	f7fa fe08 	bl	14760 <__aeabi_dmul>
   19b50:	1124      	asrs	r4, r4, #4
   19b52:	0006      	movs	r6, r0
   19b54:	000f      	movs	r7, r1
   19b56:	2c00      	cmp	r4, #0
   19b58:	d100      	bne.n	19b5c <_dtoa_r+0xcac>
   19b5a:	e149      	b.n	19df0 <_dtoa_r+0xf40>
   19b5c:	2302      	movs	r3, #2
   19b5e:	4698      	mov	r8, r3
   19b60:	4d1f      	ldr	r5, [pc, #124]	; (19be0 <_dtoa_r+0xd30>)
   19b62:	2301      	movs	r3, #1
   19b64:	4223      	tst	r3, r4
   19b66:	d009      	beq.n	19b7c <_dtoa_r+0xccc>
   19b68:	469c      	mov	ip, r3
   19b6a:	682a      	ldr	r2, [r5, #0]
   19b6c:	686b      	ldr	r3, [r5, #4]
   19b6e:	0030      	movs	r0, r6
   19b70:	0039      	movs	r1, r7
   19b72:	44e0      	add	r8, ip
   19b74:	f7fa fdf4 	bl	14760 <__aeabi_dmul>
   19b78:	0006      	movs	r6, r0
   19b7a:	000f      	movs	r7, r1
   19b7c:	1064      	asrs	r4, r4, #1
   19b7e:	3508      	adds	r5, #8
   19b80:	2c00      	cmp	r4, #0
   19b82:	d1ee      	bne.n	19b62 <_dtoa_r+0xcb2>
   19b84:	f7ff fae4 	bl	19150 <_dtoa_r+0x2a0>
   19b88:	9b03      	ldr	r3, [sp, #12]
   19b8a:	2730      	movs	r7, #48	; 0x30
   19b8c:	3301      	adds	r3, #1
   19b8e:	9303      	str	r3, [sp, #12]
   19b90:	2330      	movs	r3, #48	; 0x30
   19b92:	702b      	strb	r3, [r5, #0]
   19b94:	e4ac      	b.n	194f0 <_dtoa_r+0x640>
   19b96:	6859      	ldr	r1, [r3, #4]
   19b98:	4650      	mov	r0, sl
   19b9a:	f001 f995 	bl	1aec8 <_Balloc>
   19b9e:	4643      	mov	r3, r8
   19ba0:	4641      	mov	r1, r8
   19ba2:	0004      	movs	r4, r0
   19ba4:	691b      	ldr	r3, [r3, #16]
   19ba6:	310c      	adds	r1, #12
   19ba8:	1c9a      	adds	r2, r3, #2
   19baa:	0092      	lsls	r2, r2, #2
   19bac:	300c      	adds	r0, #12
   19bae:	f7fb fe8b 	bl	158c8 <memcpy>
   19bb2:	2201      	movs	r2, #1
   19bb4:	0021      	movs	r1, r4
   19bb6:	4650      	mov	r0, sl
   19bb8:	f001 fb5a 	bl	1b270 <__lshift>
   19bbc:	900c      	str	r0, [sp, #48]	; 0x30
   19bbe:	e599      	b.n	196f4 <_dtoa_r+0x844>
   19bc0:	2300      	movs	r3, #0
   19bc2:	4699      	mov	r9, r3
   19bc4:	4698      	mov	r8, r3
   19bc6:	e70c      	b.n	199e2 <_dtoa_r+0xb32>
   19bc8:	7ff00000 	.word	0x7ff00000
   19bcc:	40140000 	.word	0x40140000
   19bd0:	00000433 	.word	0x00000433
   19bd4:	401c0000 	.word	0x401c0000
   19bd8:	fcc00000 	.word	0xfcc00000
   19bdc:	0001e2d0 	.word	0x0001e2d0
   19be0:	0001e2a8 	.word	0x0001e2a8
   19be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19be6:	498f      	ldr	r1, [pc, #572]	; (19e24 <_dtoa_r+0xf74>)
   19be8:	3b01      	subs	r3, #1
   19bea:	00db      	lsls	r3, r3, #3
   19bec:	18c9      	adds	r1, r1, r3
   19bee:	6808      	ldr	r0, [r1, #0]
   19bf0:	6849      	ldr	r1, [r1, #4]
   19bf2:	9a08      	ldr	r2, [sp, #32]
   19bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19bf6:	f7fa fdb3 	bl	14760 <__aeabi_dmul>
   19bfa:	9014      	str	r0, [sp, #80]	; 0x50
   19bfc:	9115      	str	r1, [sp, #84]	; 0x54
   19bfe:	0039      	movs	r1, r7
   19c00:	0030      	movs	r0, r6
   19c02:	f7fb fb43 	bl	1528c <__aeabi_d2iz>
   19c06:	0005      	movs	r5, r0
   19c08:	f002 fa50 	bl	1c0ac <__aeabi_i2d>
   19c0c:	0002      	movs	r2, r0
   19c0e:	000b      	movs	r3, r1
   19c10:	0030      	movs	r0, r6
   19c12:	0039      	movs	r1, r7
   19c14:	f7fb f824 	bl	14c60 <__aeabi_dsub>
   19c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19c1a:	9008      	str	r0, [sp, #32]
   19c1c:	9109      	str	r1, [sp, #36]	; 0x24
   19c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   19c20:	001a      	movs	r2, r3
   19c22:	468c      	mov	ip, r1
   19c24:	3530      	adds	r5, #48	; 0x30
   19c26:	4462      	add	r2, ip
   19c28:	1c4c      	adds	r4, r1, #1
   19c2a:	700d      	strb	r5, [r1, #0]
   19c2c:	4690      	mov	r8, r2
   19c2e:	2b01      	cmp	r3, #1
   19c30:	d01b      	beq.n	19c6a <_dtoa_r+0xdba>
   19c32:	9808      	ldr	r0, [sp, #32]
   19c34:	9909      	ldr	r1, [sp, #36]	; 0x24
   19c36:	0025      	movs	r5, r4
   19c38:	2200      	movs	r2, #0
   19c3a:	4b7b      	ldr	r3, [pc, #492]	; (19e28 <_dtoa_r+0xf78>)
   19c3c:	f7fa fd90 	bl	14760 <__aeabi_dmul>
   19c40:	000f      	movs	r7, r1
   19c42:	0006      	movs	r6, r0
   19c44:	f7fb fb22 	bl	1528c <__aeabi_d2iz>
   19c48:	0004      	movs	r4, r0
   19c4a:	f002 fa2f 	bl	1c0ac <__aeabi_i2d>
   19c4e:	3430      	adds	r4, #48	; 0x30
   19c50:	0002      	movs	r2, r0
   19c52:	000b      	movs	r3, r1
   19c54:	0030      	movs	r0, r6
   19c56:	0039      	movs	r1, r7
   19c58:	f7fb f802 	bl	14c60 <__aeabi_dsub>
   19c5c:	702c      	strb	r4, [r5, #0]
   19c5e:	3501      	adds	r5, #1
   19c60:	45a8      	cmp	r8, r5
   19c62:	d1e9      	bne.n	19c38 <_dtoa_r+0xd88>
   19c64:	4644      	mov	r4, r8
   19c66:	9008      	str	r0, [sp, #32]
   19c68:	9109      	str	r1, [sp, #36]	; 0x24
   19c6a:	9814      	ldr	r0, [sp, #80]	; 0x50
   19c6c:	9915      	ldr	r1, [sp, #84]	; 0x54
   19c6e:	2200      	movs	r2, #0
   19c70:	4b6e      	ldr	r3, [pc, #440]	; (19e2c <_dtoa_r+0xf7c>)
   19c72:	f7f9 ff31 	bl	13ad8 <__aeabi_dadd>
   19c76:	9a08      	ldr	r2, [sp, #32]
   19c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19c7a:	f7fb fcad 	bl	155d8 <__aeabi_dcmplt>
   19c7e:	2800      	cmp	r0, #0
   19c80:	d067      	beq.n	19d52 <_dtoa_r+0xea2>
   19c82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19c84:	1e65      	subs	r5, r4, #1
   19c86:	9303      	str	r3, [sp, #12]
   19c88:	782f      	ldrb	r7, [r5, #0]
   19c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19c8c:	e42e      	b.n	194ec <_dtoa_r+0x63c>
   19c8e:	4643      	mov	r3, r8
   19c90:	46b3      	mov	fp, r6
   19c92:	930c      	str	r3, [sp, #48]	; 0x30
   19c94:	9e04      	ldr	r6, [sp, #16]
   19c96:	9b06      	ldr	r3, [sp, #24]
   19c98:	46a8      	mov	r8, r5
   19c9a:	4699      	mov	r9, r3
   19c9c:	4655      	mov	r5, sl
   19c9e:	46ba      	mov	sl, r7
   19ca0:	2e39      	cmp	r6, #57	; 0x39
   19ca2:	d04d      	beq.n	19d40 <_dtoa_r+0xe90>
   19ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19ca6:	3601      	adds	r6, #1
   19ca8:	4647      	mov	r7, r8
   19caa:	1c6c      	adds	r4, r5, #1
   19cac:	702e      	strb	r6, [r5, #0]
   19cae:	4698      	mov	r8, r3
   19cb0:	e5f5      	b.n	1989e <_dtoa_r+0x9ee>
   19cb2:	4642      	mov	r2, r8
   19cb4:	9b06      	ldr	r3, [sp, #24]
   19cb6:	46b3      	mov	fp, r6
   19cb8:	46ba      	mov	sl, r7
   19cba:	9e04      	ldr	r6, [sp, #16]
   19cbc:	4699      	mov	r9, r3
   19cbe:	002f      	movs	r7, r5
   19cc0:	4690      	mov	r8, r2
   19cc2:	e5d1      	b.n	19868 <_dtoa_r+0x9b8>
   19cc4:	9b06      	ldr	r3, [sp, #24]
   19cc6:	9a07      	ldr	r2, [sp, #28]
   19cc8:	1a9b      	subs	r3, r3, r2
   19cca:	9308      	str	r3, [sp, #32]
   19ccc:	2300      	movs	r3, #0
   19cce:	e427      	b.n	19520 <_dtoa_r+0x670>
   19cd0:	2401      	movs	r4, #1
   19cd2:	e5c5      	b.n	19860 <_dtoa_r+0x9b0>
   19cd4:	2336      	movs	r3, #54	; 0x36
   19cd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19cd8:	464c      	mov	r4, r9
   19cda:	1a9b      	subs	r3, r3, r2
   19cdc:	9a06      	ldr	r2, [sp, #24]
   19cde:	9208      	str	r2, [sp, #32]
   19ce0:	e41e      	b.n	19520 <_dtoa_r+0x670>
   19ce2:	2302      	movs	r3, #2
   19ce4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   19ce6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   19ce8:	4698      	mov	r8, r3
   19cea:	f7ff fa31 	bl	19150 <_dtoa_r+0x2a0>
   19cee:	9b07      	ldr	r3, [sp, #28]
   19cf0:	2b00      	cmp	r3, #0
   19cf2:	d100      	bne.n	19cf6 <_dtoa_r+0xe46>
   19cf4:	e68e      	b.n	19a14 <_dtoa_r+0xb64>
   19cf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19cf8:	2c00      	cmp	r4, #0
   19cfa:	dc00      	bgt.n	19cfe <_dtoa_r+0xe4e>
   19cfc:	e712      	b.n	19b24 <_dtoa_r+0xc74>
   19cfe:	9b03      	ldr	r3, [sp, #12]
   19d00:	2200      	movs	r2, #0
   19d02:	3b01      	subs	r3, #1
   19d04:	9313      	str	r3, [sp, #76]	; 0x4c
   19d06:	0030      	movs	r0, r6
   19d08:	4b47      	ldr	r3, [pc, #284]	; (19e28 <_dtoa_r+0xf78>)
   19d0a:	0039      	movs	r1, r7
   19d0c:	f7fa fd28 	bl	14760 <__aeabi_dmul>
   19d10:	0006      	movs	r6, r0
   19d12:	4640      	mov	r0, r8
   19d14:	000f      	movs	r7, r1
   19d16:	3001      	adds	r0, #1
   19d18:	f002 f9c8 	bl	1c0ac <__aeabi_i2d>
   19d1c:	0032      	movs	r2, r6
   19d1e:	003b      	movs	r3, r7
   19d20:	f7fa fd1e 	bl	14760 <__aeabi_dmul>
   19d24:	2200      	movs	r2, #0
   19d26:	4b42      	ldr	r3, [pc, #264]	; (19e30 <_dtoa_r+0xf80>)
   19d28:	f7f9 fed6 	bl	13ad8 <__aeabi_dadd>
   19d2c:	4a41      	ldr	r2, [pc, #260]	; (19e34 <_dtoa_r+0xf84>)
   19d2e:	000b      	movs	r3, r1
   19d30:	4694      	mov	ip, r2
   19d32:	4463      	add	r3, ip
   19d34:	9008      	str	r0, [sp, #32]
   19d36:	9109      	str	r1, [sp, #36]	; 0x24
   19d38:	9412      	str	r4, [sp, #72]	; 0x48
   19d3a:	9309      	str	r3, [sp, #36]	; 0x24
   19d3c:	f7ff fa30 	bl	191a0 <_dtoa_r+0x2f0>
   19d40:	2339      	movs	r3, #57	; 0x39
   19d42:	702b      	strb	r3, [r5, #0]
   19d44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19d46:	4647      	mov	r7, r8
   19d48:	1c6c      	adds	r4, r5, #1
   19d4a:	4698      	mov	r8, r3
   19d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19d4e:	2339      	movs	r3, #57	; 0x39
   19d50:	e5a1      	b.n	19896 <_dtoa_r+0x9e6>
   19d52:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19d56:	2000      	movs	r0, #0
   19d58:	4934      	ldr	r1, [pc, #208]	; (19e2c <_dtoa_r+0xf7c>)
   19d5a:	f7fa ff81 	bl	14c60 <__aeabi_dsub>
   19d5e:	9a08      	ldr	r2, [sp, #32]
   19d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19d62:	f7fb fc4d 	bl	15600 <__aeabi_dcmpgt>
   19d66:	2800      	cmp	r0, #0
   19d68:	d101      	bne.n	19d6e <_dtoa_r+0xebe>
   19d6a:	e6db      	b.n	19b24 <_dtoa_r+0xc74>
   19d6c:	001c      	movs	r4, r3
   19d6e:	1e63      	subs	r3, r4, #1
   19d70:	781a      	ldrb	r2, [r3, #0]
   19d72:	2a30      	cmp	r2, #48	; 0x30
   19d74:	d0fa      	beq.n	19d6c <_dtoa_r+0xebc>
   19d76:	f7ff fac8 	bl	1930a <_dtoa_r+0x45a>
   19d7a:	4643      	mov	r3, r8
   19d7c:	46b3      	mov	fp, r6
   19d7e:	930c      	str	r3, [sp, #48]	; 0x30
   19d80:	9e04      	ldr	r6, [sp, #16]
   19d82:	9b06      	ldr	r3, [sp, #24]
   19d84:	46a8      	mov	r8, r5
   19d86:	4699      	mov	r9, r3
   19d88:	4655      	mov	r5, sl
   19d8a:	46ba      	mov	sl, r7
   19d8c:	2e39      	cmp	r6, #57	; 0x39
   19d8e:	d0d7      	beq.n	19d40 <_dtoa_r+0xe90>
   19d90:	2c00      	cmp	r4, #0
   19d92:	dd00      	ble.n	19d96 <_dtoa_r+0xee6>
   19d94:	e6b1      	b.n	19afa <_dtoa_r+0xc4a>
   19d96:	e6b2      	b.n	19afe <_dtoa_r+0xc4e>
   19d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19d9a:	464d      	mov	r5, r9
   19d9c:	9203      	str	r2, [sp, #12]
   19d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19da0:	f7ff fba4 	bl	194ec <_dtoa_r+0x63c>
   19da4:	2800      	cmp	r0, #0
   19da6:	d000      	beq.n	19daa <_dtoa_r+0xefa>
   19da8:	e6a9      	b.n	19afe <_dtoa_r+0xc4e>
   19daa:	07f3      	lsls	r3, r6, #31
   19dac:	d400      	bmi.n	19db0 <_dtoa_r+0xf00>
   19dae:	e6a6      	b.n	19afe <_dtoa_r+0xc4e>
   19db0:	e6a0      	b.n	19af4 <_dtoa_r+0xc44>
   19db2:	2300      	movs	r3, #0
   19db4:	4641      	mov	r1, r8
   19db6:	220a      	movs	r2, #10
   19db8:	4650      	mov	r0, sl
   19dba:	f001 f8b7 	bl	1af2c <__multadd>
   19dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19dc0:	4680      	mov	r8, r0
   19dc2:	2b00      	cmp	r3, #0
   19dc4:	dd01      	ble.n	19dca <_dtoa_r+0xf1a>
   19dc6:	9307      	str	r3, [sp, #28]
   19dc8:	e486      	b.n	196d8 <_dtoa_r+0x828>
   19dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19dcc:	2b02      	cmp	r3, #2
   19dce:	dc1f      	bgt.n	19e10 <_dtoa_r+0xf60>
   19dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19dd2:	9307      	str	r3, [sp, #28]
   19dd4:	e480      	b.n	196d8 <_dtoa_r+0x828>
   19dd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19dd8:	2b02      	cmp	r3, #2
   19dda:	dc19      	bgt.n	19e10 <_dtoa_r+0xf60>
   19ddc:	4649      	mov	r1, r9
   19dde:	f7fe ffbd 	bl	18d5c <quorem>
   19de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19de4:	3030      	adds	r0, #48	; 0x30
   19de6:	7018      	strb	r0, [r3, #0]
   19de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19dea:	0006      	movs	r6, r0
   19dec:	9307      	str	r3, [sp, #28]
   19dee:	e533      	b.n	19858 <_dtoa_r+0x9a8>
   19df0:	2302      	movs	r3, #2
   19df2:	4698      	mov	r8, r3
   19df4:	f7ff f9ac 	bl	19150 <_dtoa_r+0x2a0>
   19df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19dfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   19dfc:	9303      	str	r3, [sp, #12]
   19dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e00:	001d      	movs	r5, r3
   19e02:	f7ff fb73 	bl	194ec <_dtoa_r+0x63c>
   19e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19e08:	9c14      	ldr	r4, [sp, #80]	; 0x50
   19e0a:	9303      	str	r3, [sp, #12]
   19e0c:	f7ff fa7f 	bl	1930e <_dtoa_r+0x45e>
   19e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19e12:	9307      	str	r3, [sp, #28]
   19e14:	e5d6      	b.n	199c4 <_dtoa_r+0xb14>
   19e16:	2b04      	cmp	r3, #4
   19e18:	d100      	bne.n	19e1c <_dtoa_r+0xf6c>
   19e1a:	e43f      	b.n	1969c <_dtoa_r+0x7ec>
   19e1c:	233c      	movs	r3, #60	; 0x3c
   19e1e:	1a18      	subs	r0, r3, r0
   19e20:	e4d7      	b.n	197d2 <_dtoa_r+0x922>
   19e22:	46c0      	nop			; (mov r8, r8)
   19e24:	0001e2d0 	.word	0x0001e2d0
   19e28:	40240000 	.word	0x40240000
   19e2c:	3fe00000 	.word	0x3fe00000
   19e30:	401c0000 	.word	0x401c0000
   19e34:	fcc00000 	.word	0xfcc00000

00019e38 <__sflush_r>:
   19e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e3a:	46c6      	mov	lr, r8
   19e3c:	b500      	push	{lr}
   19e3e:	230c      	movs	r3, #12
   19e40:	5eca      	ldrsh	r2, [r1, r3]
   19e42:	4680      	mov	r8, r0
   19e44:	b293      	uxth	r3, r2
   19e46:	000c      	movs	r4, r1
   19e48:	0719      	lsls	r1, r3, #28
   19e4a:	d440      	bmi.n	19ece <__sflush_r+0x96>
   19e4c:	2380      	movs	r3, #128	; 0x80
   19e4e:	011b      	lsls	r3, r3, #4
   19e50:	4313      	orrs	r3, r2
   19e52:	6862      	ldr	r2, [r4, #4]
   19e54:	81a3      	strh	r3, [r4, #12]
   19e56:	2a00      	cmp	r2, #0
   19e58:	dc00      	bgt.n	19e5c <__sflush_r+0x24>
   19e5a:	e070      	b.n	19f3e <__sflush_r+0x106>
   19e5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   19e5e:	2e00      	cmp	r6, #0
   19e60:	d031      	beq.n	19ec6 <__sflush_r+0x8e>
   19e62:	4642      	mov	r2, r8
   19e64:	4641      	mov	r1, r8
   19e66:	6815      	ldr	r5, [r2, #0]
   19e68:	2200      	movs	r2, #0
   19e6a:	b29b      	uxth	r3, r3
   19e6c:	600a      	str	r2, [r1, #0]
   19e6e:	04da      	lsls	r2, r3, #19
   19e70:	d400      	bmi.n	19e74 <__sflush_r+0x3c>
   19e72:	e069      	b.n	19f48 <__sflush_r+0x110>
   19e74:	6d22      	ldr	r2, [r4, #80]	; 0x50
   19e76:	075b      	lsls	r3, r3, #29
   19e78:	d506      	bpl.n	19e88 <__sflush_r+0x50>
   19e7a:	6863      	ldr	r3, [r4, #4]
   19e7c:	1ad2      	subs	r2, r2, r3
   19e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19e80:	2b00      	cmp	r3, #0
   19e82:	d001      	beq.n	19e88 <__sflush_r+0x50>
   19e84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   19e86:	1ad2      	subs	r2, r2, r3
   19e88:	2300      	movs	r3, #0
   19e8a:	69e1      	ldr	r1, [r4, #28]
   19e8c:	4640      	mov	r0, r8
   19e8e:	47b0      	blx	r6
   19e90:	1c43      	adds	r3, r0, #1
   19e92:	d03d      	beq.n	19f10 <__sflush_r+0xd8>
   19e94:	89a3      	ldrh	r3, [r4, #12]
   19e96:	4a3a      	ldr	r2, [pc, #232]	; (19f80 <__sflush_r+0x148>)
   19e98:	4013      	ands	r3, r2
   19e9a:	2200      	movs	r2, #0
   19e9c:	6062      	str	r2, [r4, #4]
   19e9e:	6922      	ldr	r2, [r4, #16]
   19ea0:	b21b      	sxth	r3, r3
   19ea2:	81a3      	strh	r3, [r4, #12]
   19ea4:	6022      	str	r2, [r4, #0]
   19ea6:	04db      	lsls	r3, r3, #19
   19ea8:	d447      	bmi.n	19f3a <__sflush_r+0x102>
   19eaa:	4643      	mov	r3, r8
   19eac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19eae:	601d      	str	r5, [r3, #0]
   19eb0:	2900      	cmp	r1, #0
   19eb2:	d008      	beq.n	19ec6 <__sflush_r+0x8e>
   19eb4:	0023      	movs	r3, r4
   19eb6:	3340      	adds	r3, #64	; 0x40
   19eb8:	4299      	cmp	r1, r3
   19eba:	d002      	beq.n	19ec2 <__sflush_r+0x8a>
   19ebc:	4640      	mov	r0, r8
   19ebe:	f000 f967 	bl	1a190 <_free_r>
   19ec2:	2300      	movs	r3, #0
   19ec4:	6323      	str	r3, [r4, #48]	; 0x30
   19ec6:	2000      	movs	r0, #0
   19ec8:	bc04      	pop	{r2}
   19eca:	4690      	mov	r8, r2
   19ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ece:	6926      	ldr	r6, [r4, #16]
   19ed0:	2e00      	cmp	r6, #0
   19ed2:	d0f8      	beq.n	19ec6 <__sflush_r+0x8e>
   19ed4:	6822      	ldr	r2, [r4, #0]
   19ed6:	6026      	str	r6, [r4, #0]
   19ed8:	1b95      	subs	r5, r2, r6
   19eda:	2200      	movs	r2, #0
   19edc:	079b      	lsls	r3, r3, #30
   19ede:	d100      	bne.n	19ee2 <__sflush_r+0xaa>
   19ee0:	6962      	ldr	r2, [r4, #20]
   19ee2:	60a2      	str	r2, [r4, #8]
   19ee4:	2d00      	cmp	r5, #0
   19ee6:	dc04      	bgt.n	19ef2 <__sflush_r+0xba>
   19ee8:	e7ed      	b.n	19ec6 <__sflush_r+0x8e>
   19eea:	1836      	adds	r6, r6, r0
   19eec:	1a2d      	subs	r5, r5, r0
   19eee:	2d00      	cmp	r5, #0
   19ef0:	dde9      	ble.n	19ec6 <__sflush_r+0x8e>
   19ef2:	002b      	movs	r3, r5
   19ef4:	0032      	movs	r2, r6
   19ef6:	69e1      	ldr	r1, [r4, #28]
   19ef8:	4640      	mov	r0, r8
   19efa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   19efc:	47b8      	blx	r7
   19efe:	2800      	cmp	r0, #0
   19f00:	dcf3      	bgt.n	19eea <__sflush_r+0xb2>
   19f02:	2240      	movs	r2, #64	; 0x40
   19f04:	2001      	movs	r0, #1
   19f06:	89a3      	ldrh	r3, [r4, #12]
   19f08:	4240      	negs	r0, r0
   19f0a:	4313      	orrs	r3, r2
   19f0c:	81a3      	strh	r3, [r4, #12]
   19f0e:	e7db      	b.n	19ec8 <__sflush_r+0x90>
   19f10:	4643      	mov	r3, r8
   19f12:	6819      	ldr	r1, [r3, #0]
   19f14:	291d      	cmp	r1, #29
   19f16:	d8f4      	bhi.n	19f02 <__sflush_r+0xca>
   19f18:	4b1a      	ldr	r3, [pc, #104]	; (19f84 <__sflush_r+0x14c>)
   19f1a:	2201      	movs	r2, #1
   19f1c:	40cb      	lsrs	r3, r1
   19f1e:	439a      	bics	r2, r3
   19f20:	d1ef      	bne.n	19f02 <__sflush_r+0xca>
   19f22:	89a3      	ldrh	r3, [r4, #12]
   19f24:	4e16      	ldr	r6, [pc, #88]	; (19f80 <__sflush_r+0x148>)
   19f26:	6062      	str	r2, [r4, #4]
   19f28:	4033      	ands	r3, r6
   19f2a:	6922      	ldr	r2, [r4, #16]
   19f2c:	b21b      	sxth	r3, r3
   19f2e:	81a3      	strh	r3, [r4, #12]
   19f30:	6022      	str	r2, [r4, #0]
   19f32:	04db      	lsls	r3, r3, #19
   19f34:	d5b9      	bpl.n	19eaa <__sflush_r+0x72>
   19f36:	2900      	cmp	r1, #0
   19f38:	d1b7      	bne.n	19eaa <__sflush_r+0x72>
   19f3a:	6520      	str	r0, [r4, #80]	; 0x50
   19f3c:	e7b5      	b.n	19eaa <__sflush_r+0x72>
   19f3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   19f40:	2a00      	cmp	r2, #0
   19f42:	dd00      	ble.n	19f46 <__sflush_r+0x10e>
   19f44:	e78a      	b.n	19e5c <__sflush_r+0x24>
   19f46:	e7be      	b.n	19ec6 <__sflush_r+0x8e>
   19f48:	2200      	movs	r2, #0
   19f4a:	2301      	movs	r3, #1
   19f4c:	69e1      	ldr	r1, [r4, #28]
   19f4e:	4640      	mov	r0, r8
   19f50:	47b0      	blx	r6
   19f52:	0002      	movs	r2, r0
   19f54:	1c43      	adds	r3, r0, #1
   19f56:	d002      	beq.n	19f5e <__sflush_r+0x126>
   19f58:	89a3      	ldrh	r3, [r4, #12]
   19f5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   19f5c:	e78b      	b.n	19e76 <__sflush_r+0x3e>
   19f5e:	4643      	mov	r3, r8
   19f60:	681b      	ldr	r3, [r3, #0]
   19f62:	2b00      	cmp	r3, #0
   19f64:	d0f8      	beq.n	19f58 <__sflush_r+0x120>
   19f66:	2b1d      	cmp	r3, #29
   19f68:	d001      	beq.n	19f6e <__sflush_r+0x136>
   19f6a:	2b16      	cmp	r3, #22
   19f6c:	d103      	bne.n	19f76 <__sflush_r+0x13e>
   19f6e:	4643      	mov	r3, r8
   19f70:	2000      	movs	r0, #0
   19f72:	601d      	str	r5, [r3, #0]
   19f74:	e7a8      	b.n	19ec8 <__sflush_r+0x90>
   19f76:	2140      	movs	r1, #64	; 0x40
   19f78:	89a3      	ldrh	r3, [r4, #12]
   19f7a:	430b      	orrs	r3, r1
   19f7c:	81a3      	strh	r3, [r4, #12]
   19f7e:	e7a3      	b.n	19ec8 <__sflush_r+0x90>
   19f80:	fffff7ff 	.word	0xfffff7ff
   19f84:	20400001 	.word	0x20400001

00019f88 <_fflush_r>:
   19f88:	b570      	push	{r4, r5, r6, lr}
   19f8a:	0005      	movs	r5, r0
   19f8c:	000c      	movs	r4, r1
   19f8e:	2800      	cmp	r0, #0
   19f90:	d002      	beq.n	19f98 <_fflush_r+0x10>
   19f92:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19f94:	2b00      	cmp	r3, #0
   19f96:	d016      	beq.n	19fc6 <_fflush_r+0x3e>
   19f98:	220c      	movs	r2, #12
   19f9a:	5ea3      	ldrsh	r3, [r4, r2]
   19f9c:	2600      	movs	r6, #0
   19f9e:	2b00      	cmp	r3, #0
   19fa0:	d00f      	beq.n	19fc2 <_fflush_r+0x3a>
   19fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   19fa4:	07d2      	lsls	r2, r2, #31
   19fa6:	d401      	bmi.n	19fac <_fflush_r+0x24>
   19fa8:	059b      	lsls	r3, r3, #22
   19faa:	d513      	bpl.n	19fd4 <_fflush_r+0x4c>
   19fac:	0021      	movs	r1, r4
   19fae:	0028      	movs	r0, r5
   19fb0:	f7ff ff42 	bl	19e38 <__sflush_r>
   19fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19fb6:	0006      	movs	r6, r0
   19fb8:	07db      	lsls	r3, r3, #31
   19fba:	d402      	bmi.n	19fc2 <_fflush_r+0x3a>
   19fbc:	89a3      	ldrh	r3, [r4, #12]
   19fbe:	059b      	lsls	r3, r3, #22
   19fc0:	d504      	bpl.n	19fcc <_fflush_r+0x44>
   19fc2:	0030      	movs	r0, r6
   19fc4:	bd70      	pop	{r4, r5, r6, pc}
   19fc6:	f000 f839 	bl	1a03c <__sinit>
   19fca:	e7e5      	b.n	19f98 <_fflush_r+0x10>
   19fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19fce:	f000 fb8d 	bl	1a6ec <__retarget_lock_release_recursive>
   19fd2:	e7f6      	b.n	19fc2 <_fflush_r+0x3a>
   19fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19fd6:	f000 fb87 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   19fda:	e7e7      	b.n	19fac <_fflush_r+0x24>

00019fdc <_cleanup_r>:
   19fdc:	b510      	push	{r4, lr}
   19fde:	4902      	ldr	r1, [pc, #8]	; (19fe8 <_cleanup_r+0xc>)
   19fe0:	f000 fb36 	bl	1a650 <_fwalk_reent>
   19fe4:	bd10      	pop	{r4, pc}
   19fe6:	46c0      	nop			; (mov r8, r8)
   19fe8:	0001bd01 	.word	0x0001bd01

00019fec <std.isra.0>:
   19fec:	2300      	movs	r3, #0
   19fee:	b510      	push	{r4, lr}
   19ff0:	0004      	movs	r4, r0
   19ff2:	6003      	str	r3, [r0, #0]
   19ff4:	6043      	str	r3, [r0, #4]
   19ff6:	6083      	str	r3, [r0, #8]
   19ff8:	8181      	strh	r1, [r0, #12]
   19ffa:	6643      	str	r3, [r0, #100]	; 0x64
   19ffc:	81c2      	strh	r2, [r0, #14]
   19ffe:	6103      	str	r3, [r0, #16]
   1a000:	6143      	str	r3, [r0, #20]
   1a002:	6183      	str	r3, [r0, #24]
   1a004:	2208      	movs	r2, #8
   1a006:	2100      	movs	r1, #0
   1a008:	305c      	adds	r0, #92	; 0x5c
   1a00a:	f7fb fc9f 	bl	1594c <memset>
   1a00e:	0020      	movs	r0, r4
   1a010:	4b06      	ldr	r3, [pc, #24]	; (1a02c <std.isra.0+0x40>)
   1a012:	61e4      	str	r4, [r4, #28]
   1a014:	6223      	str	r3, [r4, #32]
   1a016:	4b06      	ldr	r3, [pc, #24]	; (1a030 <std.isra.0+0x44>)
   1a018:	3058      	adds	r0, #88	; 0x58
   1a01a:	6263      	str	r3, [r4, #36]	; 0x24
   1a01c:	4b05      	ldr	r3, [pc, #20]	; (1a034 <std.isra.0+0x48>)
   1a01e:	62a3      	str	r3, [r4, #40]	; 0x28
   1a020:	4b05      	ldr	r3, [pc, #20]	; (1a038 <std.isra.0+0x4c>)
   1a022:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a024:	f000 fb5c 	bl	1a6e0 <__retarget_lock_init_recursive>
   1a028:	bd10      	pop	{r4, pc}
   1a02a:	46c0      	nop			; (mov r8, r8)
   1a02c:	0001b8f9 	.word	0x0001b8f9
   1a030:	0001b921 	.word	0x0001b921
   1a034:	0001b95d 	.word	0x0001b95d
   1a038:	0001b989 	.word	0x0001b989

0001a03c <__sinit>:
   1a03c:	b570      	push	{r4, r5, r6, lr}
   1a03e:	0004      	movs	r4, r0
   1a040:	4d14      	ldr	r5, [pc, #80]	; (1a094 <__sinit+0x58>)
   1a042:	0028      	movs	r0, r5
   1a044:	f000 fb50 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1a048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a04a:	2b00      	cmp	r3, #0
   1a04c:	d11d      	bne.n	1a08a <__sinit+0x4e>
   1a04e:	4a12      	ldr	r2, [pc, #72]	; (1a098 <__sinit+0x5c>)
   1a050:	2104      	movs	r1, #4
   1a052:	63e2      	str	r2, [r4, #60]	; 0x3c
   1a054:	22b8      	movs	r2, #184	; 0xb8
   1a056:	0092      	lsls	r2, r2, #2
   1a058:	50a3      	str	r3, [r4, r2]
   1a05a:	23b9      	movs	r3, #185	; 0xb9
   1a05c:	2203      	movs	r2, #3
   1a05e:	009b      	lsls	r3, r3, #2
   1a060:	50e2      	str	r2, [r4, r3]
   1a062:	3308      	adds	r3, #8
   1a064:	18e2      	adds	r2, r4, r3
   1a066:	3b04      	subs	r3, #4
   1a068:	50e2      	str	r2, [r4, r3]
   1a06a:	6860      	ldr	r0, [r4, #4]
   1a06c:	2200      	movs	r2, #0
   1a06e:	f7ff ffbd 	bl	19fec <std.isra.0>
   1a072:	2201      	movs	r2, #1
   1a074:	2109      	movs	r1, #9
   1a076:	68a0      	ldr	r0, [r4, #8]
   1a078:	f7ff ffb8 	bl	19fec <std.isra.0>
   1a07c:	2202      	movs	r2, #2
   1a07e:	2112      	movs	r1, #18
   1a080:	68e0      	ldr	r0, [r4, #12]
   1a082:	f7ff ffb3 	bl	19fec <std.isra.0>
   1a086:	2301      	movs	r3, #1
   1a088:	63a3      	str	r3, [r4, #56]	; 0x38
   1a08a:	0028      	movs	r0, r5
   1a08c:	f000 fb2e 	bl	1a6ec <__retarget_lock_release_recursive>
   1a090:	bd70      	pop	{r4, r5, r6, pc}
   1a092:	46c0      	nop			; (mov r8, r8)
   1a094:	2000204c 	.word	0x2000204c
   1a098:	00019fdd 	.word	0x00019fdd

0001a09c <__sfp_lock_acquire>:
   1a09c:	b510      	push	{r4, lr}
   1a09e:	4802      	ldr	r0, [pc, #8]	; (1a0a8 <__sfp_lock_acquire+0xc>)
   1a0a0:	f000 fb22 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1a0a4:	bd10      	pop	{r4, pc}
   1a0a6:	46c0      	nop			; (mov r8, r8)
   1a0a8:	20002060 	.word	0x20002060

0001a0ac <__sfp_lock_release>:
   1a0ac:	b510      	push	{r4, lr}
   1a0ae:	4802      	ldr	r0, [pc, #8]	; (1a0b8 <__sfp_lock_release+0xc>)
   1a0b0:	f000 fb1c 	bl	1a6ec <__retarget_lock_release_recursive>
   1a0b4:	bd10      	pop	{r4, pc}
   1a0b6:	46c0      	nop			; (mov r8, r8)
   1a0b8:	20002060 	.word	0x20002060

0001a0bc <__libc_fini_array>:
   1a0bc:	b570      	push	{r4, r5, r6, lr}
   1a0be:	4b09      	ldr	r3, [pc, #36]	; (1a0e4 <__libc_fini_array+0x28>)
   1a0c0:	4c09      	ldr	r4, [pc, #36]	; (1a0e8 <__libc_fini_array+0x2c>)
   1a0c2:	1ae4      	subs	r4, r4, r3
   1a0c4:	10a4      	asrs	r4, r4, #2
   1a0c6:	d009      	beq.n	1a0dc <__libc_fini_array+0x20>
   1a0c8:	4a08      	ldr	r2, [pc, #32]	; (1a0ec <__libc_fini_array+0x30>)
   1a0ca:	18a5      	adds	r5, r4, r2
   1a0cc:	00ad      	lsls	r5, r5, #2
   1a0ce:	18ed      	adds	r5, r5, r3
   1a0d0:	682b      	ldr	r3, [r5, #0]
   1a0d2:	3c01      	subs	r4, #1
   1a0d4:	4798      	blx	r3
   1a0d6:	3d04      	subs	r5, #4
   1a0d8:	2c00      	cmp	r4, #0
   1a0da:	d1f9      	bne.n	1a0d0 <__libc_fini_array+0x14>
   1a0dc:	f004 f9ee 	bl	1e4bc <_fini>
   1a0e0:	bd70      	pop	{r4, r5, r6, pc}
   1a0e2:	46c0      	nop			; (mov r8, r8)
   1a0e4:	0001e4c8 	.word	0x0001e4c8
   1a0e8:	0001e4cc 	.word	0x0001e4cc
   1a0ec:	3fffffff 	.word	0x3fffffff

0001a0f0 <_malloc_trim_r>:
   1a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0f2:	000c      	movs	r4, r1
   1a0f4:	0006      	movs	r6, r0
   1a0f6:	f000 fed7 	bl	1aea8 <__malloc_lock>
   1a0fa:	4f20      	ldr	r7, [pc, #128]	; (1a17c <_malloc_trim_r+0x8c>)
   1a0fc:	68bb      	ldr	r3, [r7, #8]
   1a0fe:	685d      	ldr	r5, [r3, #4]
   1a100:	2303      	movs	r3, #3
   1a102:	439d      	bics	r5, r3
   1a104:	4b1e      	ldr	r3, [pc, #120]	; (1a180 <_malloc_trim_r+0x90>)
   1a106:	1b2c      	subs	r4, r5, r4
   1a108:	469c      	mov	ip, r3
   1a10a:	4464      	add	r4, ip
   1a10c:	0b24      	lsrs	r4, r4, #12
   1a10e:	4b1d      	ldr	r3, [pc, #116]	; (1a184 <_malloc_trim_r+0x94>)
   1a110:	3c01      	subs	r4, #1
   1a112:	0324      	lsls	r4, r4, #12
   1a114:	429c      	cmp	r4, r3
   1a116:	dd07      	ble.n	1a128 <_malloc_trim_r+0x38>
   1a118:	2100      	movs	r1, #0
   1a11a:	0030      	movs	r0, r6
   1a11c:	f001 fbda 	bl	1b8d4 <_sbrk_r>
   1a120:	68bb      	ldr	r3, [r7, #8]
   1a122:	195b      	adds	r3, r3, r5
   1a124:	4298      	cmp	r0, r3
   1a126:	d004      	beq.n	1a132 <_malloc_trim_r+0x42>
   1a128:	0030      	movs	r0, r6
   1a12a:	f000 fec5 	bl	1aeb8 <__malloc_unlock>
   1a12e:	2000      	movs	r0, #0
   1a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a132:	4261      	negs	r1, r4
   1a134:	0030      	movs	r0, r6
   1a136:	f001 fbcd 	bl	1b8d4 <_sbrk_r>
   1a13a:	1c43      	adds	r3, r0, #1
   1a13c:	d00d      	beq.n	1a15a <_malloc_trim_r+0x6a>
   1a13e:	2201      	movs	r2, #1
   1a140:	68bb      	ldr	r3, [r7, #8]
   1a142:	1b2d      	subs	r5, r5, r4
   1a144:	4315      	orrs	r5, r2
   1a146:	605d      	str	r5, [r3, #4]
   1a148:	4b0f      	ldr	r3, [pc, #60]	; (1a188 <_malloc_trim_r+0x98>)
   1a14a:	0030      	movs	r0, r6
   1a14c:	681a      	ldr	r2, [r3, #0]
   1a14e:	1b14      	subs	r4, r2, r4
   1a150:	601c      	str	r4, [r3, #0]
   1a152:	f000 feb1 	bl	1aeb8 <__malloc_unlock>
   1a156:	2001      	movs	r0, #1
   1a158:	e7ea      	b.n	1a130 <_malloc_trim_r+0x40>
   1a15a:	2100      	movs	r1, #0
   1a15c:	0030      	movs	r0, r6
   1a15e:	f001 fbb9 	bl	1b8d4 <_sbrk_r>
   1a162:	68ba      	ldr	r2, [r7, #8]
   1a164:	1a83      	subs	r3, r0, r2
   1a166:	2b0f      	cmp	r3, #15
   1a168:	ddde      	ble.n	1a128 <_malloc_trim_r+0x38>
   1a16a:	4908      	ldr	r1, [pc, #32]	; (1a18c <_malloc_trim_r+0x9c>)
   1a16c:	6809      	ldr	r1, [r1, #0]
   1a16e:	1a40      	subs	r0, r0, r1
   1a170:	4905      	ldr	r1, [pc, #20]	; (1a188 <_malloc_trim_r+0x98>)
   1a172:	6008      	str	r0, [r1, #0]
   1a174:	2101      	movs	r1, #1
   1a176:	430b      	orrs	r3, r1
   1a178:	6053      	str	r3, [r2, #4]
   1a17a:	e7d5      	b.n	1a128 <_malloc_trim_r+0x38>
   1a17c:	20000670 	.word	0x20000670
   1a180:	00000fef 	.word	0x00000fef
   1a184:	00000fff 	.word	0x00000fff
   1a188:	200010c8 	.word	0x200010c8
   1a18c:	20000a78 	.word	0x20000a78

0001a190 <_free_r>:
   1a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a192:	0004      	movs	r4, r0
   1a194:	1e0d      	subs	r5, r1, #0
   1a196:	d03c      	beq.n	1a212 <_free_r+0x82>
   1a198:	f000 fe86 	bl	1aea8 <__malloc_lock>
   1a19c:	0029      	movs	r1, r5
   1a19e:	3908      	subs	r1, #8
   1a1a0:	6848      	ldr	r0, [r1, #4]
   1a1a2:	2301      	movs	r3, #1
   1a1a4:	0005      	movs	r5, r0
   1a1a6:	2603      	movs	r6, #3
   1a1a8:	439d      	bics	r5, r3
   1a1aa:	194a      	adds	r2, r1, r5
   1a1ac:	469c      	mov	ip, r3
   1a1ae:	4f61      	ldr	r7, [pc, #388]	; (1a334 <_free_r+0x1a4>)
   1a1b0:	6853      	ldr	r3, [r2, #4]
   1a1b2:	43b3      	bics	r3, r6
   1a1b4:	68be      	ldr	r6, [r7, #8]
   1a1b6:	42b2      	cmp	r2, r6
   1a1b8:	d056      	beq.n	1a268 <_free_r+0xd8>
   1a1ba:	4666      	mov	r6, ip
   1a1bc:	6053      	str	r3, [r2, #4]
   1a1be:	4206      	tst	r6, r0
   1a1c0:	d10a      	bne.n	1a1d8 <_free_r+0x48>
   1a1c2:	003e      	movs	r6, r7
   1a1c4:	6808      	ldr	r0, [r1, #0]
   1a1c6:	3608      	adds	r6, #8
   1a1c8:	1a09      	subs	r1, r1, r0
   1a1ca:	182d      	adds	r5, r5, r0
   1a1cc:	6888      	ldr	r0, [r1, #8]
   1a1ce:	42b0      	cmp	r0, r6
   1a1d0:	d065      	beq.n	1a29e <_free_r+0x10e>
   1a1d2:	68ce      	ldr	r6, [r1, #12]
   1a1d4:	60c6      	str	r6, [r0, #12]
   1a1d6:	60b0      	str	r0, [r6, #8]
   1a1d8:	2001      	movs	r0, #1
   1a1da:	18d6      	adds	r6, r2, r3
   1a1dc:	6876      	ldr	r6, [r6, #4]
   1a1de:	4206      	tst	r6, r0
   1a1e0:	d033      	beq.n	1a24a <_free_r+0xba>
   1a1e2:	4b55      	ldr	r3, [pc, #340]	; (1a338 <_free_r+0x1a8>)
   1a1e4:	4328      	orrs	r0, r5
   1a1e6:	6048      	str	r0, [r1, #4]
   1a1e8:	514d      	str	r5, [r1, r5]
   1a1ea:	429d      	cmp	r5, r3
   1a1ec:	d812      	bhi.n	1a214 <_free_r+0x84>
   1a1ee:	08ed      	lsrs	r5, r5, #3
   1a1f0:	3bff      	subs	r3, #255	; 0xff
   1a1f2:	10aa      	asrs	r2, r5, #2
   1a1f4:	3bff      	subs	r3, #255	; 0xff
   1a1f6:	4093      	lsls	r3, r2
   1a1f8:	687a      	ldr	r2, [r7, #4]
   1a1fa:	00ed      	lsls	r5, r5, #3
   1a1fc:	4313      	orrs	r3, r2
   1a1fe:	607b      	str	r3, [r7, #4]
   1a200:	19ef      	adds	r7, r5, r7
   1a202:	68bb      	ldr	r3, [r7, #8]
   1a204:	60cf      	str	r7, [r1, #12]
   1a206:	608b      	str	r3, [r1, #8]
   1a208:	60b9      	str	r1, [r7, #8]
   1a20a:	60d9      	str	r1, [r3, #12]
   1a20c:	0020      	movs	r0, r4
   1a20e:	f000 fe53 	bl	1aeb8 <__malloc_unlock>
   1a212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a214:	0a68      	lsrs	r0, r5, #9
   1a216:	2804      	cmp	r0, #4
   1a218:	d850      	bhi.n	1a2bc <_free_r+0x12c>
   1a21a:	09a8      	lsrs	r0, r5, #6
   1a21c:	0002      	movs	r2, r0
   1a21e:	3039      	adds	r0, #57	; 0x39
   1a220:	3238      	adds	r2, #56	; 0x38
   1a222:	00c0      	lsls	r0, r0, #3
   1a224:	1838      	adds	r0, r7, r0
   1a226:	3808      	subs	r0, #8
   1a228:	6883      	ldr	r3, [r0, #8]
   1a22a:	2603      	movs	r6, #3
   1a22c:	4298      	cmp	r0, r3
   1a22e:	d04c      	beq.n	1a2ca <_free_r+0x13a>
   1a230:	685a      	ldr	r2, [r3, #4]
   1a232:	43b2      	bics	r2, r6
   1a234:	4295      	cmp	r5, r2
   1a236:	d230      	bcs.n	1a29a <_free_r+0x10a>
   1a238:	689b      	ldr	r3, [r3, #8]
   1a23a:	4298      	cmp	r0, r3
   1a23c:	d1f8      	bne.n	1a230 <_free_r+0xa0>
   1a23e:	68c3      	ldr	r3, [r0, #12]
   1a240:	60cb      	str	r3, [r1, #12]
   1a242:	6088      	str	r0, [r1, #8]
   1a244:	6099      	str	r1, [r3, #8]
   1a246:	60c1      	str	r1, [r0, #12]
   1a248:	e7e0      	b.n	1a20c <_free_r+0x7c>
   1a24a:	18ed      	adds	r5, r5, r3
   1a24c:	4e3b      	ldr	r6, [pc, #236]	; (1a33c <_free_r+0x1ac>)
   1a24e:	6893      	ldr	r3, [r2, #8]
   1a250:	42b3      	cmp	r3, r6
   1a252:	d042      	beq.n	1a2da <_free_r+0x14a>
   1a254:	68d2      	ldr	r2, [r2, #12]
   1a256:	4328      	orrs	r0, r5
   1a258:	60da      	str	r2, [r3, #12]
   1a25a:	6093      	str	r3, [r2, #8]
   1a25c:	4b36      	ldr	r3, [pc, #216]	; (1a338 <_free_r+0x1a8>)
   1a25e:	6048      	str	r0, [r1, #4]
   1a260:	514d      	str	r5, [r1, r5]
   1a262:	429d      	cmp	r5, r3
   1a264:	d8d6      	bhi.n	1a214 <_free_r+0x84>
   1a266:	e7c2      	b.n	1a1ee <_free_r+0x5e>
   1a268:	4662      	mov	r2, ip
   1a26a:	18eb      	adds	r3, r5, r3
   1a26c:	4202      	tst	r2, r0
   1a26e:	d106      	bne.n	1a27e <_free_r+0xee>
   1a270:	680a      	ldr	r2, [r1, #0]
   1a272:	1a89      	subs	r1, r1, r2
   1a274:	6888      	ldr	r0, [r1, #8]
   1a276:	189b      	adds	r3, r3, r2
   1a278:	68ca      	ldr	r2, [r1, #12]
   1a27a:	60c2      	str	r2, [r0, #12]
   1a27c:	6090      	str	r0, [r2, #8]
   1a27e:	2201      	movs	r2, #1
   1a280:	431a      	orrs	r2, r3
   1a282:	604a      	str	r2, [r1, #4]
   1a284:	4a2e      	ldr	r2, [pc, #184]	; (1a340 <_free_r+0x1b0>)
   1a286:	60b9      	str	r1, [r7, #8]
   1a288:	6812      	ldr	r2, [r2, #0]
   1a28a:	4293      	cmp	r3, r2
   1a28c:	d3be      	bcc.n	1a20c <_free_r+0x7c>
   1a28e:	4b2d      	ldr	r3, [pc, #180]	; (1a344 <_free_r+0x1b4>)
   1a290:	0020      	movs	r0, r4
   1a292:	6819      	ldr	r1, [r3, #0]
   1a294:	f7ff ff2c 	bl	1a0f0 <_malloc_trim_r>
   1a298:	e7b8      	b.n	1a20c <_free_r+0x7c>
   1a29a:	0018      	movs	r0, r3
   1a29c:	e7cf      	b.n	1a23e <_free_r+0xae>
   1a29e:	4666      	mov	r6, ip
   1a2a0:	18d0      	adds	r0, r2, r3
   1a2a2:	6840      	ldr	r0, [r0, #4]
   1a2a4:	4230      	tst	r0, r6
   1a2a6:	d13f      	bne.n	1a328 <_free_r+0x198>
   1a2a8:	6890      	ldr	r0, [r2, #8]
   1a2aa:	195d      	adds	r5, r3, r5
   1a2ac:	68d3      	ldr	r3, [r2, #12]
   1a2ae:	60c3      	str	r3, [r0, #12]
   1a2b0:	6098      	str	r0, [r3, #8]
   1a2b2:	4663      	mov	r3, ip
   1a2b4:	432b      	orrs	r3, r5
   1a2b6:	604b      	str	r3, [r1, #4]
   1a2b8:	514d      	str	r5, [r1, r5]
   1a2ba:	e7a7      	b.n	1a20c <_free_r+0x7c>
   1a2bc:	2814      	cmp	r0, #20
   1a2be:	d814      	bhi.n	1a2ea <_free_r+0x15a>
   1a2c0:	0002      	movs	r2, r0
   1a2c2:	305c      	adds	r0, #92	; 0x5c
   1a2c4:	325b      	adds	r2, #91	; 0x5b
   1a2c6:	00c0      	lsls	r0, r0, #3
   1a2c8:	e7ac      	b.n	1a224 <_free_r+0x94>
   1a2ca:	2301      	movs	r3, #1
   1a2cc:	1092      	asrs	r2, r2, #2
   1a2ce:	4093      	lsls	r3, r2
   1a2d0:	687a      	ldr	r2, [r7, #4]
   1a2d2:	4313      	orrs	r3, r2
   1a2d4:	607b      	str	r3, [r7, #4]
   1a2d6:	0003      	movs	r3, r0
   1a2d8:	e7b2      	b.n	1a240 <_free_r+0xb0>
   1a2da:	4328      	orrs	r0, r5
   1a2dc:	60d9      	str	r1, [r3, #12]
   1a2de:	6099      	str	r1, [r3, #8]
   1a2e0:	60cb      	str	r3, [r1, #12]
   1a2e2:	608b      	str	r3, [r1, #8]
   1a2e4:	6048      	str	r0, [r1, #4]
   1a2e6:	514d      	str	r5, [r1, r5]
   1a2e8:	e790      	b.n	1a20c <_free_r+0x7c>
   1a2ea:	2854      	cmp	r0, #84	; 0x54
   1a2ec:	d805      	bhi.n	1a2fa <_free_r+0x16a>
   1a2ee:	0b28      	lsrs	r0, r5, #12
   1a2f0:	0002      	movs	r2, r0
   1a2f2:	306f      	adds	r0, #111	; 0x6f
   1a2f4:	326e      	adds	r2, #110	; 0x6e
   1a2f6:	00c0      	lsls	r0, r0, #3
   1a2f8:	e794      	b.n	1a224 <_free_r+0x94>
   1a2fa:	22aa      	movs	r2, #170	; 0xaa
   1a2fc:	0052      	lsls	r2, r2, #1
   1a2fe:	4290      	cmp	r0, r2
   1a300:	d805      	bhi.n	1a30e <_free_r+0x17e>
   1a302:	0be8      	lsrs	r0, r5, #15
   1a304:	0002      	movs	r2, r0
   1a306:	3078      	adds	r0, #120	; 0x78
   1a308:	3277      	adds	r2, #119	; 0x77
   1a30a:	00c0      	lsls	r0, r0, #3
   1a30c:	e78a      	b.n	1a224 <_free_r+0x94>
   1a30e:	4a0e      	ldr	r2, [pc, #56]	; (1a348 <_free_r+0x1b8>)
   1a310:	4290      	cmp	r0, r2
   1a312:	d805      	bhi.n	1a320 <_free_r+0x190>
   1a314:	0ca8      	lsrs	r0, r5, #18
   1a316:	0002      	movs	r2, r0
   1a318:	307d      	adds	r0, #125	; 0x7d
   1a31a:	327c      	adds	r2, #124	; 0x7c
   1a31c:	00c0      	lsls	r0, r0, #3
   1a31e:	e781      	b.n	1a224 <_free_r+0x94>
   1a320:	20fe      	movs	r0, #254	; 0xfe
   1a322:	227e      	movs	r2, #126	; 0x7e
   1a324:	0080      	lsls	r0, r0, #2
   1a326:	e77d      	b.n	1a224 <_free_r+0x94>
   1a328:	4663      	mov	r3, ip
   1a32a:	432b      	orrs	r3, r5
   1a32c:	604b      	str	r3, [r1, #4]
   1a32e:	6015      	str	r5, [r2, #0]
   1a330:	e76c      	b.n	1a20c <_free_r+0x7c>
   1a332:	46c0      	nop			; (mov r8, r8)
   1a334:	20000670 	.word	0x20000670
   1a338:	000001ff 	.word	0x000001ff
   1a33c:	20000678 	.word	0x20000678
   1a340:	20000a7c 	.word	0x20000a7c
   1a344:	200010f8 	.word	0x200010f8
   1a348:	00000554 	.word	0x00000554

0001a34c <__sfvwrite_r>:
   1a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a34e:	464e      	mov	r6, r9
   1a350:	46de      	mov	lr, fp
   1a352:	4657      	mov	r7, sl
   1a354:	4645      	mov	r5, r8
   1a356:	b5e0      	push	{r5, r6, r7, lr}
   1a358:	6893      	ldr	r3, [r2, #8]
   1a35a:	b083      	sub	sp, #12
   1a35c:	9000      	str	r0, [sp, #0]
   1a35e:	000c      	movs	r4, r1
   1a360:	0016      	movs	r6, r2
   1a362:	2b00      	cmp	r3, #0
   1a364:	d025      	beq.n	1a3b2 <__sfvwrite_r+0x66>
   1a366:	898b      	ldrh	r3, [r1, #12]
   1a368:	071a      	lsls	r2, r3, #28
   1a36a:	d52a      	bpl.n	1a3c2 <__sfvwrite_r+0x76>
   1a36c:	690a      	ldr	r2, [r1, #16]
   1a36e:	2a00      	cmp	r2, #0
   1a370:	d027      	beq.n	1a3c2 <__sfvwrite_r+0x76>
   1a372:	6832      	ldr	r2, [r6, #0]
   1a374:	4693      	mov	fp, r2
   1a376:	079a      	lsls	r2, r3, #30
   1a378:	d52f      	bpl.n	1a3da <__sfvwrite_r+0x8e>
   1a37a:	4bb2      	ldr	r3, [pc, #712]	; (1a644 <__sfvwrite_r+0x2f8>)
   1a37c:	2700      	movs	r7, #0
   1a37e:	2500      	movs	r5, #0
   1a380:	4698      	mov	r8, r3
   1a382:	46b1      	mov	r9, r6
   1a384:	2d00      	cmp	r5, #0
   1a386:	d100      	bne.n	1a38a <__sfvwrite_r+0x3e>
   1a388:	e072      	b.n	1a470 <__sfvwrite_r+0x124>
   1a38a:	002b      	movs	r3, r5
   1a38c:	4545      	cmp	r5, r8
   1a38e:	d900      	bls.n	1a392 <__sfvwrite_r+0x46>
   1a390:	4bac      	ldr	r3, [pc, #688]	; (1a644 <__sfvwrite_r+0x2f8>)
   1a392:	003a      	movs	r2, r7
   1a394:	69e1      	ldr	r1, [r4, #28]
   1a396:	9800      	ldr	r0, [sp, #0]
   1a398:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1a39a:	47b0      	blx	r6
   1a39c:	2800      	cmp	r0, #0
   1a39e:	dc00      	bgt.n	1a3a2 <__sfvwrite_r+0x56>
   1a3a0:	e073      	b.n	1a48a <__sfvwrite_r+0x13e>
   1a3a2:	464b      	mov	r3, r9
   1a3a4:	689b      	ldr	r3, [r3, #8]
   1a3a6:	183f      	adds	r7, r7, r0
   1a3a8:	1a2d      	subs	r5, r5, r0
   1a3aa:	1a18      	subs	r0, r3, r0
   1a3ac:	464b      	mov	r3, r9
   1a3ae:	6098      	str	r0, [r3, #8]
   1a3b0:	d1e8      	bne.n	1a384 <__sfvwrite_r+0x38>
   1a3b2:	2000      	movs	r0, #0
   1a3b4:	b003      	add	sp, #12
   1a3b6:	bc3c      	pop	{r2, r3, r4, r5}
   1a3b8:	4690      	mov	r8, r2
   1a3ba:	4699      	mov	r9, r3
   1a3bc:	46a2      	mov	sl, r4
   1a3be:	46ab      	mov	fp, r5
   1a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3c2:	0021      	movs	r1, r4
   1a3c4:	9800      	ldr	r0, [sp, #0]
   1a3c6:	f7fe fc4b 	bl	18c60 <__swsetup_r>
   1a3ca:	2800      	cmp	r0, #0
   1a3cc:	d000      	beq.n	1a3d0 <__sfvwrite_r+0x84>
   1a3ce:	e130      	b.n	1a632 <__sfvwrite_r+0x2e6>
   1a3d0:	6832      	ldr	r2, [r6, #0]
   1a3d2:	89a3      	ldrh	r3, [r4, #12]
   1a3d4:	4693      	mov	fp, r2
   1a3d6:	079a      	lsls	r2, r3, #30
   1a3d8:	d4cf      	bmi.n	1a37a <__sfvwrite_r+0x2e>
   1a3da:	07da      	lsls	r2, r3, #31
   1a3dc:	d55d      	bpl.n	1a49a <__sfvwrite_r+0x14e>
   1a3de:	2300      	movs	r3, #0
   1a3e0:	2000      	movs	r0, #0
   1a3e2:	469a      	mov	sl, r3
   1a3e4:	2700      	movs	r7, #0
   1a3e6:	001d      	movs	r5, r3
   1a3e8:	46b1      	mov	r9, r6
   1a3ea:	e029      	b.n	1a440 <__sfvwrite_r+0xf4>
   1a3ec:	2800      	cmp	r0, #0
   1a3ee:	d033      	beq.n	1a458 <__sfvwrite_r+0x10c>
   1a3f0:	46a8      	mov	r8, r5
   1a3f2:	42bd      	cmp	r5, r7
   1a3f4:	d900      	bls.n	1a3f8 <__sfvwrite_r+0xac>
   1a3f6:	46b8      	mov	r8, r7
   1a3f8:	6820      	ldr	r0, [r4, #0]
   1a3fa:	6922      	ldr	r2, [r4, #16]
   1a3fc:	4646      	mov	r6, r8
   1a3fe:	6963      	ldr	r3, [r4, #20]
   1a400:	4290      	cmp	r0, r2
   1a402:	d907      	bls.n	1a414 <__sfvwrite_r+0xc8>
   1a404:	68a2      	ldr	r2, [r4, #8]
   1a406:	4694      	mov	ip, r2
   1a408:	449c      	add	ip, r3
   1a40a:	4662      	mov	r2, ip
   1a40c:	9201      	str	r2, [sp, #4]
   1a40e:	45e0      	cmp	r8, ip
   1a410:	dd00      	ble.n	1a414 <__sfvwrite_r+0xc8>
   1a412:	e0e9      	b.n	1a5e8 <__sfvwrite_r+0x29c>
   1a414:	4598      	cmp	r8, r3
   1a416:	da00      	bge.n	1a41a <__sfvwrite_r+0xce>
   1a418:	e08f      	b.n	1a53a <__sfvwrite_r+0x1ee>
   1a41a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1a41c:	4652      	mov	r2, sl
   1a41e:	69e1      	ldr	r1, [r4, #28]
   1a420:	9800      	ldr	r0, [sp, #0]
   1a422:	47b0      	blx	r6
   1a424:	1e06      	subs	r6, r0, #0
   1a426:	dd30      	ble.n	1a48a <__sfvwrite_r+0x13e>
   1a428:	1bad      	subs	r5, r5, r6
   1a42a:	2001      	movs	r0, #1
   1a42c:	2d00      	cmp	r5, #0
   1a42e:	d026      	beq.n	1a47e <__sfvwrite_r+0x132>
   1a430:	464b      	mov	r3, r9
   1a432:	689b      	ldr	r3, [r3, #8]
   1a434:	44b2      	add	sl, r6
   1a436:	1bbf      	subs	r7, r7, r6
   1a438:	1b9e      	subs	r6, r3, r6
   1a43a:	464b      	mov	r3, r9
   1a43c:	609e      	str	r6, [r3, #8]
   1a43e:	d0b8      	beq.n	1a3b2 <__sfvwrite_r+0x66>
   1a440:	2f00      	cmp	r7, #0
   1a442:	d1d3      	bne.n	1a3ec <__sfvwrite_r+0xa0>
   1a444:	465b      	mov	r3, fp
   1a446:	681b      	ldr	r3, [r3, #0]
   1a448:	469a      	mov	sl, r3
   1a44a:	465b      	mov	r3, fp
   1a44c:	685f      	ldr	r7, [r3, #4]
   1a44e:	2308      	movs	r3, #8
   1a450:	469c      	mov	ip, r3
   1a452:	44e3      	add	fp, ip
   1a454:	2f00      	cmp	r7, #0
   1a456:	d0f5      	beq.n	1a444 <__sfvwrite_r+0xf8>
   1a458:	003a      	movs	r2, r7
   1a45a:	210a      	movs	r1, #10
   1a45c:	4650      	mov	r0, sl
   1a45e:	f000 fc93 	bl	1ad88 <memchr>
   1a462:	2800      	cmp	r0, #0
   1a464:	d100      	bne.n	1a468 <__sfvwrite_r+0x11c>
   1a466:	e0e2      	b.n	1a62e <__sfvwrite_r+0x2e2>
   1a468:	4653      	mov	r3, sl
   1a46a:	3001      	adds	r0, #1
   1a46c:	1ac5      	subs	r5, r0, r3
   1a46e:	e7bf      	b.n	1a3f0 <__sfvwrite_r+0xa4>
   1a470:	465b      	mov	r3, fp
   1a472:	681f      	ldr	r7, [r3, #0]
   1a474:	685d      	ldr	r5, [r3, #4]
   1a476:	2308      	movs	r3, #8
   1a478:	469c      	mov	ip, r3
   1a47a:	44e3      	add	fp, ip
   1a47c:	e782      	b.n	1a384 <__sfvwrite_r+0x38>
   1a47e:	0021      	movs	r1, r4
   1a480:	9800      	ldr	r0, [sp, #0]
   1a482:	f7ff fd81 	bl	19f88 <_fflush_r>
   1a486:	2800      	cmp	r0, #0
   1a488:	d0d2      	beq.n	1a430 <__sfvwrite_r+0xe4>
   1a48a:	220c      	movs	r2, #12
   1a48c:	5ea3      	ldrsh	r3, [r4, r2]
   1a48e:	2240      	movs	r2, #64	; 0x40
   1a490:	2001      	movs	r0, #1
   1a492:	4313      	orrs	r3, r2
   1a494:	81a3      	strh	r3, [r4, #12]
   1a496:	4240      	negs	r0, r0
   1a498:	e78c      	b.n	1a3b4 <__sfvwrite_r+0x68>
   1a49a:	2200      	movs	r2, #0
   1a49c:	4691      	mov	r9, r2
   1a49e:	464d      	mov	r5, r9
   1a4a0:	2d00      	cmp	r5, #0
   1a4a2:	d023      	beq.n	1a4ec <__sfvwrite_r+0x1a0>
   1a4a4:	68a2      	ldr	r2, [r4, #8]
   1a4a6:	4690      	mov	r8, r2
   1a4a8:	2280      	movs	r2, #128	; 0x80
   1a4aa:	0092      	lsls	r2, r2, #2
   1a4ac:	4213      	tst	r3, r2
   1a4ae:	d026      	beq.n	1a4fe <__sfvwrite_r+0x1b2>
   1a4b0:	46c2      	mov	sl, r8
   1a4b2:	4545      	cmp	r5, r8
   1a4b4:	d34d      	bcc.n	1a552 <__sfvwrite_r+0x206>
   1a4b6:	2290      	movs	r2, #144	; 0x90
   1a4b8:	00d2      	lsls	r2, r2, #3
   1a4ba:	4213      	tst	r3, r2
   1a4bc:	d14e      	bne.n	1a55c <__sfvwrite_r+0x210>
   1a4be:	002f      	movs	r7, r5
   1a4c0:	6820      	ldr	r0, [r4, #0]
   1a4c2:	4652      	mov	r2, sl
   1a4c4:	4649      	mov	r1, r9
   1a4c6:	f000 fc9f 	bl	1ae08 <memmove>
   1a4ca:	4642      	mov	r2, r8
   1a4cc:	68a3      	ldr	r3, [r4, #8]
   1a4ce:	1a98      	subs	r0, r3, r2
   1a4d0:	6823      	ldr	r3, [r4, #0]
   1a4d2:	60a0      	str	r0, [r4, #8]
   1a4d4:	4453      	add	r3, sl
   1a4d6:	6023      	str	r3, [r4, #0]
   1a4d8:	68b3      	ldr	r3, [r6, #8]
   1a4da:	44b9      	add	r9, r7
   1a4dc:	1bed      	subs	r5, r5, r7
   1a4de:	1bdf      	subs	r7, r3, r7
   1a4e0:	60b7      	str	r7, [r6, #8]
   1a4e2:	d100      	bne.n	1a4e6 <__sfvwrite_r+0x19a>
   1a4e4:	e765      	b.n	1a3b2 <__sfvwrite_r+0x66>
   1a4e6:	89a3      	ldrh	r3, [r4, #12]
   1a4e8:	2d00      	cmp	r5, #0
   1a4ea:	d1db      	bne.n	1a4a4 <__sfvwrite_r+0x158>
   1a4ec:	465a      	mov	r2, fp
   1a4ee:	6812      	ldr	r2, [r2, #0]
   1a4f0:	4691      	mov	r9, r2
   1a4f2:	465a      	mov	r2, fp
   1a4f4:	6855      	ldr	r5, [r2, #4]
   1a4f6:	2208      	movs	r2, #8
   1a4f8:	4694      	mov	ip, r2
   1a4fa:	44e3      	add	fp, ip
   1a4fc:	e7d0      	b.n	1a4a0 <__sfvwrite_r+0x154>
   1a4fe:	6820      	ldr	r0, [r4, #0]
   1a500:	6923      	ldr	r3, [r4, #16]
   1a502:	4298      	cmp	r0, r3
   1a504:	d802      	bhi.n	1a50c <__sfvwrite_r+0x1c0>
   1a506:	6967      	ldr	r7, [r4, #20]
   1a508:	42bd      	cmp	r5, r7
   1a50a:	d259      	bcs.n	1a5c0 <__sfvwrite_r+0x274>
   1a50c:	4647      	mov	r7, r8
   1a50e:	42af      	cmp	r7, r5
   1a510:	d900      	bls.n	1a514 <__sfvwrite_r+0x1c8>
   1a512:	002f      	movs	r7, r5
   1a514:	003a      	movs	r2, r7
   1a516:	4649      	mov	r1, r9
   1a518:	f000 fc76 	bl	1ae08 <memmove>
   1a51c:	68a3      	ldr	r3, [r4, #8]
   1a51e:	6822      	ldr	r2, [r4, #0]
   1a520:	1bdb      	subs	r3, r3, r7
   1a522:	19d2      	adds	r2, r2, r7
   1a524:	60a3      	str	r3, [r4, #8]
   1a526:	6022      	str	r2, [r4, #0]
   1a528:	2b00      	cmp	r3, #0
   1a52a:	d1d5      	bne.n	1a4d8 <__sfvwrite_r+0x18c>
   1a52c:	0021      	movs	r1, r4
   1a52e:	9800      	ldr	r0, [sp, #0]
   1a530:	f7ff fd2a 	bl	19f88 <_fflush_r>
   1a534:	2800      	cmp	r0, #0
   1a536:	d0cf      	beq.n	1a4d8 <__sfvwrite_r+0x18c>
   1a538:	e7a7      	b.n	1a48a <__sfvwrite_r+0x13e>
   1a53a:	4642      	mov	r2, r8
   1a53c:	4651      	mov	r1, sl
   1a53e:	f000 fc63 	bl	1ae08 <memmove>
   1a542:	4642      	mov	r2, r8
   1a544:	68a3      	ldr	r3, [r4, #8]
   1a546:	1a9b      	subs	r3, r3, r2
   1a548:	60a3      	str	r3, [r4, #8]
   1a54a:	6823      	ldr	r3, [r4, #0]
   1a54c:	4443      	add	r3, r8
   1a54e:	6023      	str	r3, [r4, #0]
   1a550:	e76a      	b.n	1a428 <__sfvwrite_r+0xdc>
   1a552:	46a8      	mov	r8, r5
   1a554:	6820      	ldr	r0, [r4, #0]
   1a556:	002f      	movs	r7, r5
   1a558:	46aa      	mov	sl, r5
   1a55a:	e7b2      	b.n	1a4c2 <__sfvwrite_r+0x176>
   1a55c:	6921      	ldr	r1, [r4, #16]
   1a55e:	6822      	ldr	r2, [r4, #0]
   1a560:	1a52      	subs	r2, r2, r1
   1a562:	4692      	mov	sl, r2
   1a564:	6962      	ldr	r2, [r4, #20]
   1a566:	0057      	lsls	r7, r2, #1
   1a568:	18bf      	adds	r7, r7, r2
   1a56a:	0ffa      	lsrs	r2, r7, #31
   1a56c:	19d7      	adds	r7, r2, r7
   1a56e:	4652      	mov	r2, sl
   1a570:	1c50      	adds	r0, r2, #1
   1a572:	107f      	asrs	r7, r7, #1
   1a574:	1940      	adds	r0, r0, r5
   1a576:	003a      	movs	r2, r7
   1a578:	42b8      	cmp	r0, r7
   1a57a:	d901      	bls.n	1a580 <__sfvwrite_r+0x234>
   1a57c:	0007      	movs	r7, r0
   1a57e:	0002      	movs	r2, r0
   1a580:	055b      	lsls	r3, r3, #21
   1a582:	d542      	bpl.n	1a60a <__sfvwrite_r+0x2be>
   1a584:	0011      	movs	r1, r2
   1a586:	9800      	ldr	r0, [sp, #0]
   1a588:	f000 f934 	bl	1a7f4 <_malloc_r>
   1a58c:	4680      	mov	r8, r0
   1a58e:	1e03      	subs	r3, r0, #0
   1a590:	d052      	beq.n	1a638 <__sfvwrite_r+0x2ec>
   1a592:	4652      	mov	r2, sl
   1a594:	6921      	ldr	r1, [r4, #16]
   1a596:	f7fb f997 	bl	158c8 <memcpy>
   1a59a:	89a3      	ldrh	r3, [r4, #12]
   1a59c:	4a2a      	ldr	r2, [pc, #168]	; (1a648 <__sfvwrite_r+0x2fc>)
   1a59e:	4013      	ands	r3, r2
   1a5a0:	2280      	movs	r2, #128	; 0x80
   1a5a2:	4313      	orrs	r3, r2
   1a5a4:	81a3      	strh	r3, [r4, #12]
   1a5a6:	4643      	mov	r3, r8
   1a5a8:	4640      	mov	r0, r8
   1a5aa:	6123      	str	r3, [r4, #16]
   1a5ac:	4653      	mov	r3, sl
   1a5ae:	4450      	add	r0, sl
   1a5b0:	6167      	str	r7, [r4, #20]
   1a5b2:	1aff      	subs	r7, r7, r3
   1a5b4:	60a7      	str	r7, [r4, #8]
   1a5b6:	6020      	str	r0, [r4, #0]
   1a5b8:	46a8      	mov	r8, r5
   1a5ba:	002f      	movs	r7, r5
   1a5bc:	46aa      	mov	sl, r5
   1a5be:	e780      	b.n	1a4c2 <__sfvwrite_r+0x176>
   1a5c0:	4b22      	ldr	r3, [pc, #136]	; (1a64c <__sfvwrite_r+0x300>)
   1a5c2:	0028      	movs	r0, r5
   1a5c4:	429d      	cmp	r5, r3
   1a5c6:	d900      	bls.n	1a5ca <__sfvwrite_r+0x27e>
   1a5c8:	0018      	movs	r0, r3
   1a5ca:	0039      	movs	r1, r7
   1a5cc:	f7f8 f928 	bl	12820 <__divsi3>
   1a5d0:	003b      	movs	r3, r7
   1a5d2:	464a      	mov	r2, r9
   1a5d4:	4343      	muls	r3, r0
   1a5d6:	69e1      	ldr	r1, [r4, #28]
   1a5d8:	9800      	ldr	r0, [sp, #0]
   1a5da:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a5dc:	47b8      	blx	r7
   1a5de:	2800      	cmp	r0, #0
   1a5e0:	dc00      	bgt.n	1a5e4 <__sfvwrite_r+0x298>
   1a5e2:	e752      	b.n	1a48a <__sfvwrite_r+0x13e>
   1a5e4:	0007      	movs	r7, r0
   1a5e6:	e777      	b.n	1a4d8 <__sfvwrite_r+0x18c>
   1a5e8:	4666      	mov	r6, ip
   1a5ea:	4651      	mov	r1, sl
   1a5ec:	f000 fc0c 	bl	1ae08 <memmove>
   1a5f0:	46b4      	mov	ip, r6
   1a5f2:	6823      	ldr	r3, [r4, #0]
   1a5f4:	0021      	movs	r1, r4
   1a5f6:	4463      	add	r3, ip
   1a5f8:	6023      	str	r3, [r4, #0]
   1a5fa:	9800      	ldr	r0, [sp, #0]
   1a5fc:	f7ff fcc4 	bl	19f88 <_fflush_r>
   1a600:	2800      	cmp	r0, #0
   1a602:	d000      	beq.n	1a606 <__sfvwrite_r+0x2ba>
   1a604:	e741      	b.n	1a48a <__sfvwrite_r+0x13e>
   1a606:	9e01      	ldr	r6, [sp, #4]
   1a608:	e70e      	b.n	1a428 <__sfvwrite_r+0xdc>
   1a60a:	9800      	ldr	r0, [sp, #0]
   1a60c:	f000 ffa4 	bl	1b558 <_realloc_r>
   1a610:	4680      	mov	r8, r0
   1a612:	2800      	cmp	r0, #0
   1a614:	d1c7      	bne.n	1a5a6 <__sfvwrite_r+0x25a>
   1a616:	9d00      	ldr	r5, [sp, #0]
   1a618:	6921      	ldr	r1, [r4, #16]
   1a61a:	0028      	movs	r0, r5
   1a61c:	f7ff fdb8 	bl	1a190 <_free_r>
   1a620:	2280      	movs	r2, #128	; 0x80
   1a622:	89a3      	ldrh	r3, [r4, #12]
   1a624:	4393      	bics	r3, r2
   1a626:	3a74      	subs	r2, #116	; 0x74
   1a628:	b21b      	sxth	r3, r3
   1a62a:	602a      	str	r2, [r5, #0]
   1a62c:	e72f      	b.n	1a48e <__sfvwrite_r+0x142>
   1a62e:	1c7d      	adds	r5, r7, #1
   1a630:	e6de      	b.n	1a3f0 <__sfvwrite_r+0xa4>
   1a632:	2001      	movs	r0, #1
   1a634:	4240      	negs	r0, r0
   1a636:	e6bd      	b.n	1a3b4 <__sfvwrite_r+0x68>
   1a638:	9a00      	ldr	r2, [sp, #0]
   1a63a:	330c      	adds	r3, #12
   1a63c:	6013      	str	r3, [r2, #0]
   1a63e:	220c      	movs	r2, #12
   1a640:	5ea3      	ldrsh	r3, [r4, r2]
   1a642:	e724      	b.n	1a48e <__sfvwrite_r+0x142>
   1a644:	7ffffc00 	.word	0x7ffffc00
   1a648:	fffffb7f 	.word	0xfffffb7f
   1a64c:	7fffffff 	.word	0x7fffffff

0001a650 <_fwalk_reent>:
   1a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a652:	4647      	mov	r7, r8
   1a654:	46ce      	mov	lr, r9
   1a656:	b580      	push	{r7, lr}
   1a658:	27b8      	movs	r7, #184	; 0xb8
   1a65a:	4680      	mov	r8, r0
   1a65c:	00bf      	lsls	r7, r7, #2
   1a65e:	4447      	add	r7, r8
   1a660:	4689      	mov	r9, r1
   1a662:	2600      	movs	r6, #0
   1a664:	2f00      	cmp	r7, #0
   1a666:	d014      	beq.n	1a692 <_fwalk_reent+0x42>
   1a668:	687b      	ldr	r3, [r7, #4]
   1a66a:	68bc      	ldr	r4, [r7, #8]
   1a66c:	1e5d      	subs	r5, r3, #1
   1a66e:	d40d      	bmi.n	1a68c <_fwalk_reent+0x3c>
   1a670:	89a3      	ldrh	r3, [r4, #12]
   1a672:	2b01      	cmp	r3, #1
   1a674:	d907      	bls.n	1a686 <_fwalk_reent+0x36>
   1a676:	220e      	movs	r2, #14
   1a678:	5ea3      	ldrsh	r3, [r4, r2]
   1a67a:	3301      	adds	r3, #1
   1a67c:	d003      	beq.n	1a686 <_fwalk_reent+0x36>
   1a67e:	0021      	movs	r1, r4
   1a680:	4640      	mov	r0, r8
   1a682:	47c8      	blx	r9
   1a684:	4306      	orrs	r6, r0
   1a686:	3468      	adds	r4, #104	; 0x68
   1a688:	3d01      	subs	r5, #1
   1a68a:	d2f1      	bcs.n	1a670 <_fwalk_reent+0x20>
   1a68c:	683f      	ldr	r7, [r7, #0]
   1a68e:	2f00      	cmp	r7, #0
   1a690:	d1ea      	bne.n	1a668 <_fwalk_reent+0x18>
   1a692:	0030      	movs	r0, r6
   1a694:	bc0c      	pop	{r2, r3}
   1a696:	4690      	mov	r8, r2
   1a698:	4699      	mov	r9, r3
   1a69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a69c <__locale_mb_cur_max>:
   1a69c:	4b05      	ldr	r3, [pc, #20]	; (1a6b4 <__locale_mb_cur_max+0x18>)
   1a69e:	681b      	ldr	r3, [r3, #0]
   1a6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a6a2:	2b00      	cmp	r3, #0
   1a6a4:	d003      	beq.n	1a6ae <__locale_mb_cur_max+0x12>
   1a6a6:	2294      	movs	r2, #148	; 0x94
   1a6a8:	0052      	lsls	r2, r2, #1
   1a6aa:	5c98      	ldrb	r0, [r3, r2]
   1a6ac:	4770      	bx	lr
   1a6ae:	4b02      	ldr	r3, [pc, #8]	; (1a6b8 <__locale_mb_cur_max+0x1c>)
   1a6b0:	e7f9      	b.n	1a6a6 <__locale_mb_cur_max+0xa>
   1a6b2:	46c0      	nop			; (mov r8, r8)
   1a6b4:	200000d4 	.word	0x200000d4
   1a6b8:	20000504 	.word	0x20000504

0001a6bc <__locale_ctype_ptr_l>:
   1a6bc:	23ec      	movs	r3, #236	; 0xec
   1a6be:	58c0      	ldr	r0, [r0, r3]
   1a6c0:	4770      	bx	lr
   1a6c2:	46c0      	nop			; (mov r8, r8)

0001a6c4 <_localeconv_r>:
   1a6c4:	4b04      	ldr	r3, [pc, #16]	; (1a6d8 <_localeconv_r+0x14>)
   1a6c6:	681b      	ldr	r3, [r3, #0]
   1a6c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a6ca:	2800      	cmp	r0, #0
   1a6cc:	d001      	beq.n	1a6d2 <_localeconv_r+0xe>
   1a6ce:	30f0      	adds	r0, #240	; 0xf0
   1a6d0:	4770      	bx	lr
   1a6d2:	4802      	ldr	r0, [pc, #8]	; (1a6dc <_localeconv_r+0x18>)
   1a6d4:	e7fb      	b.n	1a6ce <_localeconv_r+0xa>
   1a6d6:	46c0      	nop			; (mov r8, r8)
   1a6d8:	200000d4 	.word	0x200000d4
   1a6dc:	20000504 	.word	0x20000504

0001a6e0 <__retarget_lock_init_recursive>:
   1a6e0:	4770      	bx	lr
   1a6e2:	46c0      	nop			; (mov r8, r8)

0001a6e4 <__retarget_lock_close_recursive>:
   1a6e4:	4770      	bx	lr
   1a6e6:	46c0      	nop			; (mov r8, r8)

0001a6e8 <__retarget_lock_acquire_recursive>:
   1a6e8:	4770      	bx	lr
   1a6ea:	46c0      	nop			; (mov r8, r8)

0001a6ec <__retarget_lock_release_recursive>:
   1a6ec:	4770      	bx	lr
   1a6ee:	46c0      	nop			; (mov r8, r8)

0001a6f0 <__swhatbuf_r>:
   1a6f0:	b570      	push	{r4, r5, r6, lr}
   1a6f2:	000c      	movs	r4, r1
   1a6f4:	001e      	movs	r6, r3
   1a6f6:	230e      	movs	r3, #14
   1a6f8:	5ec9      	ldrsh	r1, [r1, r3]
   1a6fa:	b090      	sub	sp, #64	; 0x40
   1a6fc:	0015      	movs	r5, r2
   1a6fe:	2900      	cmp	r1, #0
   1a700:	db15      	blt.n	1a72e <__swhatbuf_r+0x3e>
   1a702:	aa01      	add	r2, sp, #4
   1a704:	f001 fbdc 	bl	1bec0 <_fstat_r>
   1a708:	2800      	cmp	r0, #0
   1a70a:	db10      	blt.n	1a72e <__swhatbuf_r+0x3e>
   1a70c:	22f0      	movs	r2, #240	; 0xf0
   1a70e:	9b02      	ldr	r3, [sp, #8]
   1a710:	0212      	lsls	r2, r2, #8
   1a712:	4013      	ands	r3, r2
   1a714:	4a0d      	ldr	r2, [pc, #52]	; (1a74c <__swhatbuf_r+0x5c>)
   1a716:	2080      	movs	r0, #128	; 0x80
   1a718:	4694      	mov	ip, r2
   1a71a:	4463      	add	r3, ip
   1a71c:	425a      	negs	r2, r3
   1a71e:	4153      	adcs	r3, r2
   1a720:	6033      	str	r3, [r6, #0]
   1a722:	2380      	movs	r3, #128	; 0x80
   1a724:	00db      	lsls	r3, r3, #3
   1a726:	602b      	str	r3, [r5, #0]
   1a728:	0100      	lsls	r0, r0, #4
   1a72a:	b010      	add	sp, #64	; 0x40
   1a72c:	bd70      	pop	{r4, r5, r6, pc}
   1a72e:	2300      	movs	r3, #0
   1a730:	6033      	str	r3, [r6, #0]
   1a732:	89a3      	ldrh	r3, [r4, #12]
   1a734:	061b      	lsls	r3, r3, #24
   1a736:	d503      	bpl.n	1a740 <__swhatbuf_r+0x50>
   1a738:	2340      	movs	r3, #64	; 0x40
   1a73a:	2000      	movs	r0, #0
   1a73c:	602b      	str	r3, [r5, #0]
   1a73e:	e7f4      	b.n	1a72a <__swhatbuf_r+0x3a>
   1a740:	2380      	movs	r3, #128	; 0x80
   1a742:	00db      	lsls	r3, r3, #3
   1a744:	602b      	str	r3, [r5, #0]
   1a746:	2000      	movs	r0, #0
   1a748:	e7ef      	b.n	1a72a <__swhatbuf_r+0x3a>
   1a74a:	46c0      	nop			; (mov r8, r8)
   1a74c:	ffffe000 	.word	0xffffe000

0001a750 <__smakebuf_r>:
   1a750:	b570      	push	{r4, r5, r6, lr}
   1a752:	898b      	ldrh	r3, [r1, #12]
   1a754:	b082      	sub	sp, #8
   1a756:	0006      	movs	r6, r0
   1a758:	000c      	movs	r4, r1
   1a75a:	079b      	lsls	r3, r3, #30
   1a75c:	d507      	bpl.n	1a76e <__smakebuf_r+0x1e>
   1a75e:	0023      	movs	r3, r4
   1a760:	3343      	adds	r3, #67	; 0x43
   1a762:	6023      	str	r3, [r4, #0]
   1a764:	6123      	str	r3, [r4, #16]
   1a766:	2301      	movs	r3, #1
   1a768:	6163      	str	r3, [r4, #20]
   1a76a:	b002      	add	sp, #8
   1a76c:	bd70      	pop	{r4, r5, r6, pc}
   1a76e:	ab01      	add	r3, sp, #4
   1a770:	466a      	mov	r2, sp
   1a772:	f7ff ffbd 	bl	1a6f0 <__swhatbuf_r>
   1a776:	9900      	ldr	r1, [sp, #0]
   1a778:	0005      	movs	r5, r0
   1a77a:	0030      	movs	r0, r6
   1a77c:	f000 f83a 	bl	1a7f4 <_malloc_r>
   1a780:	2800      	cmp	r0, #0
   1a782:	d01e      	beq.n	1a7c2 <__smakebuf_r+0x72>
   1a784:	2280      	movs	r2, #128	; 0x80
   1a786:	4b15      	ldr	r3, [pc, #84]	; (1a7dc <__smakebuf_r+0x8c>)
   1a788:	63f3      	str	r3, [r6, #60]	; 0x3c
   1a78a:	89a3      	ldrh	r3, [r4, #12]
   1a78c:	6020      	str	r0, [r4, #0]
   1a78e:	4313      	orrs	r3, r2
   1a790:	9a00      	ldr	r2, [sp, #0]
   1a792:	b21b      	sxth	r3, r3
   1a794:	6162      	str	r2, [r4, #20]
   1a796:	9a01      	ldr	r2, [sp, #4]
   1a798:	81a3      	strh	r3, [r4, #12]
   1a79a:	6120      	str	r0, [r4, #16]
   1a79c:	2a00      	cmp	r2, #0
   1a79e:	d102      	bne.n	1a7a6 <__smakebuf_r+0x56>
   1a7a0:	432b      	orrs	r3, r5
   1a7a2:	81a3      	strh	r3, [r4, #12]
   1a7a4:	e7e1      	b.n	1a76a <__smakebuf_r+0x1a>
   1a7a6:	230e      	movs	r3, #14
   1a7a8:	5ee1      	ldrsh	r1, [r4, r3]
   1a7aa:	0030      	movs	r0, r6
   1a7ac:	f001 fb9c 	bl	1bee8 <_isatty_r>
   1a7b0:	2800      	cmp	r0, #0
   1a7b2:	d010      	beq.n	1a7d6 <__smakebuf_r+0x86>
   1a7b4:	2203      	movs	r2, #3
   1a7b6:	89a3      	ldrh	r3, [r4, #12]
   1a7b8:	4393      	bics	r3, r2
   1a7ba:	2201      	movs	r2, #1
   1a7bc:	4313      	orrs	r3, r2
   1a7be:	b21b      	sxth	r3, r3
   1a7c0:	e7ee      	b.n	1a7a0 <__smakebuf_r+0x50>
   1a7c2:	220c      	movs	r2, #12
   1a7c4:	5ea3      	ldrsh	r3, [r4, r2]
   1a7c6:	059a      	lsls	r2, r3, #22
   1a7c8:	d4cf      	bmi.n	1a76a <__smakebuf_r+0x1a>
   1a7ca:	2203      	movs	r2, #3
   1a7cc:	4393      	bics	r3, r2
   1a7ce:	2202      	movs	r2, #2
   1a7d0:	4313      	orrs	r3, r2
   1a7d2:	81a3      	strh	r3, [r4, #12]
   1a7d4:	e7c3      	b.n	1a75e <__smakebuf_r+0xe>
   1a7d6:	220c      	movs	r2, #12
   1a7d8:	5ea3      	ldrsh	r3, [r4, r2]
   1a7da:	e7e1      	b.n	1a7a0 <__smakebuf_r+0x50>
   1a7dc:	00019fdd 	.word	0x00019fdd

0001a7e0 <malloc>:
   1a7e0:	b510      	push	{r4, lr}
   1a7e2:	4b03      	ldr	r3, [pc, #12]	; (1a7f0 <malloc+0x10>)
   1a7e4:	0001      	movs	r1, r0
   1a7e6:	6818      	ldr	r0, [r3, #0]
   1a7e8:	f000 f804 	bl	1a7f4 <_malloc_r>
   1a7ec:	bd10      	pop	{r4, pc}
   1a7ee:	46c0      	nop			; (mov r8, r8)
   1a7f0:	200000d4 	.word	0x200000d4

0001a7f4 <_malloc_r>:
   1a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7f6:	4657      	mov	r7, sl
   1a7f8:	4645      	mov	r5, r8
   1a7fa:	46de      	mov	lr, fp
   1a7fc:	464e      	mov	r6, r9
   1a7fe:	b5e0      	push	{r5, r6, r7, lr}
   1a800:	000d      	movs	r5, r1
   1a802:	350b      	adds	r5, #11
   1a804:	b083      	sub	sp, #12
   1a806:	0007      	movs	r7, r0
   1a808:	2d16      	cmp	r5, #22
   1a80a:	d800      	bhi.n	1a80e <_malloc_r+0x1a>
   1a80c:	e09f      	b.n	1a94e <_malloc_r+0x15a>
   1a80e:	2307      	movs	r3, #7
   1a810:	439d      	bics	r5, r3
   1a812:	d500      	bpl.n	1a816 <_malloc_r+0x22>
   1a814:	e0c4      	b.n	1a9a0 <_malloc_r+0x1ac>
   1a816:	42a9      	cmp	r1, r5
   1a818:	d900      	bls.n	1a81c <_malloc_r+0x28>
   1a81a:	e0c1      	b.n	1a9a0 <_malloc_r+0x1ac>
   1a81c:	f000 fb44 	bl	1aea8 <__malloc_lock>
   1a820:	23f8      	movs	r3, #248	; 0xf8
   1a822:	33ff      	adds	r3, #255	; 0xff
   1a824:	429d      	cmp	r5, r3
   1a826:	d800      	bhi.n	1a82a <_malloc_r+0x36>
   1a828:	e28f      	b.n	1ad4a <_malloc_r+0x556>
   1a82a:	0a68      	lsrs	r0, r5, #9
   1a82c:	d100      	bne.n	1a830 <_malloc_r+0x3c>
   1a82e:	e0bb      	b.n	1a9a8 <_malloc_r+0x1b4>
   1a830:	2804      	cmp	r0, #4
   1a832:	d900      	bls.n	1a836 <_malloc_r+0x42>
   1a834:	e162      	b.n	1aafc <_malloc_r+0x308>
   1a836:	2338      	movs	r3, #56	; 0x38
   1a838:	4698      	mov	r8, r3
   1a83a:	09a8      	lsrs	r0, r5, #6
   1a83c:	4480      	add	r8, r0
   1a83e:	3039      	adds	r0, #57	; 0x39
   1a840:	00c1      	lsls	r1, r0, #3
   1a842:	4ed2      	ldr	r6, [pc, #840]	; (1ab8c <_malloc_r+0x398>)
   1a844:	1871      	adds	r1, r6, r1
   1a846:	3908      	subs	r1, #8
   1a848:	68cc      	ldr	r4, [r1, #12]
   1a84a:	42a1      	cmp	r1, r4
   1a84c:	d019      	beq.n	1a882 <_malloc_r+0x8e>
   1a84e:	2303      	movs	r3, #3
   1a850:	6862      	ldr	r2, [r4, #4]
   1a852:	439a      	bics	r2, r3
   1a854:	0013      	movs	r3, r2
   1a856:	1b52      	subs	r2, r2, r5
   1a858:	2a0f      	cmp	r2, #15
   1a85a:	dd00      	ble.n	1a85e <_malloc_r+0x6a>
   1a85c:	e0aa      	b.n	1a9b4 <_malloc_r+0x1c0>
   1a85e:	2a00      	cmp	r2, #0
   1a860:	db00      	blt.n	1a864 <_malloc_r+0x70>
   1a862:	e088      	b.n	1a976 <_malloc_r+0x182>
   1a864:	2303      	movs	r3, #3
   1a866:	469c      	mov	ip, r3
   1a868:	e008      	b.n	1a87c <_malloc_r+0x88>
   1a86a:	4662      	mov	r2, ip
   1a86c:	6863      	ldr	r3, [r4, #4]
   1a86e:	4393      	bics	r3, r2
   1a870:	1b5a      	subs	r2, r3, r5
   1a872:	2a0f      	cmp	r2, #15
   1a874:	dd00      	ble.n	1a878 <_malloc_r+0x84>
   1a876:	e09d      	b.n	1a9b4 <_malloc_r+0x1c0>
   1a878:	2a00      	cmp	r2, #0
   1a87a:	da7c      	bge.n	1a976 <_malloc_r+0x182>
   1a87c:	68e4      	ldr	r4, [r4, #12]
   1a87e:	42a1      	cmp	r1, r4
   1a880:	d1f3      	bne.n	1a86a <_malloc_r+0x76>
   1a882:	0032      	movs	r2, r6
   1a884:	6934      	ldr	r4, [r6, #16]
   1a886:	3208      	adds	r2, #8
   1a888:	4294      	cmp	r4, r2
   1a88a:	d100      	bne.n	1a88e <_malloc_r+0x9a>
   1a88c:	e190      	b.n	1abb0 <_malloc_r+0x3bc>
   1a88e:	2303      	movs	r3, #3
   1a890:	6861      	ldr	r1, [r4, #4]
   1a892:	4399      	bics	r1, r3
   1a894:	4689      	mov	r9, r1
   1a896:	1b49      	subs	r1, r1, r5
   1a898:	290f      	cmp	r1, #15
   1a89a:	dd00      	ble.n	1a89e <_malloc_r+0xaa>
   1a89c:	e162      	b.n	1ab64 <_malloc_r+0x370>
   1a89e:	6172      	str	r2, [r6, #20]
   1a8a0:	6132      	str	r2, [r6, #16]
   1a8a2:	2900      	cmp	r1, #0
   1a8a4:	db00      	blt.n	1a8a8 <_malloc_r+0xb4>
   1a8a6:	e087      	b.n	1a9b8 <_malloc_r+0x1c4>
   1a8a8:	4ab9      	ldr	r2, [pc, #740]	; (1ab90 <_malloc_r+0x39c>)
   1a8aa:	464b      	mov	r3, r9
   1a8ac:	4591      	cmp	r9, r2
   1a8ae:	d900      	bls.n	1a8b2 <_malloc_r+0xbe>
   1a8b0:	e130      	b.n	1ab14 <_malloc_r+0x320>
   1a8b2:	08db      	lsrs	r3, r3, #3
   1a8b4:	3aff      	subs	r2, #255	; 0xff
   1a8b6:	1099      	asrs	r1, r3, #2
   1a8b8:	3aff      	subs	r2, #255	; 0xff
   1a8ba:	408a      	lsls	r2, r1
   1a8bc:	00db      	lsls	r3, r3, #3
   1a8be:	6871      	ldr	r1, [r6, #4]
   1a8c0:	199b      	adds	r3, r3, r6
   1a8c2:	430a      	orrs	r2, r1
   1a8c4:	6899      	ldr	r1, [r3, #8]
   1a8c6:	6072      	str	r2, [r6, #4]
   1a8c8:	60e3      	str	r3, [r4, #12]
   1a8ca:	60a1      	str	r1, [r4, #8]
   1a8cc:	609c      	str	r4, [r3, #8]
   1a8ce:	0013      	movs	r3, r2
   1a8d0:	60cc      	str	r4, [r1, #12]
   1a8d2:	2101      	movs	r1, #1
   1a8d4:	1082      	asrs	r2, r0, #2
   1a8d6:	4091      	lsls	r1, r2
   1a8d8:	4299      	cmp	r1, r3
   1a8da:	d86f      	bhi.n	1a9bc <_malloc_r+0x1c8>
   1a8dc:	420b      	tst	r3, r1
   1a8de:	d105      	bne.n	1a8ec <_malloc_r+0xf8>
   1a8e0:	2203      	movs	r2, #3
   1a8e2:	4390      	bics	r0, r2
   1a8e4:	0049      	lsls	r1, r1, #1
   1a8e6:	3004      	adds	r0, #4
   1a8e8:	420b      	tst	r3, r1
   1a8ea:	d0fb      	beq.n	1a8e4 <_malloc_r+0xf0>
   1a8ec:	2303      	movs	r3, #3
   1a8ee:	4698      	mov	r8, r3
   1a8f0:	00c3      	lsls	r3, r0, #3
   1a8f2:	4699      	mov	r9, r3
   1a8f4:	44b1      	add	r9, r6
   1a8f6:	46cc      	mov	ip, r9
   1a8f8:	4682      	mov	sl, r0
   1a8fa:	4663      	mov	r3, ip
   1a8fc:	68dc      	ldr	r4, [r3, #12]
   1a8fe:	45a4      	cmp	ip, r4
   1a900:	d107      	bne.n	1a912 <_malloc_r+0x11e>
   1a902:	e157      	b.n	1abb4 <_malloc_r+0x3c0>
   1a904:	2a00      	cmp	r2, #0
   1a906:	db00      	blt.n	1a90a <_malloc_r+0x116>
   1a908:	e166      	b.n	1abd8 <_malloc_r+0x3e4>
   1a90a:	68e4      	ldr	r4, [r4, #12]
   1a90c:	45a4      	cmp	ip, r4
   1a90e:	d100      	bne.n	1a912 <_malloc_r+0x11e>
   1a910:	e150      	b.n	1abb4 <_malloc_r+0x3c0>
   1a912:	4642      	mov	r2, r8
   1a914:	6863      	ldr	r3, [r4, #4]
   1a916:	4393      	bics	r3, r2
   1a918:	1b5a      	subs	r2, r3, r5
   1a91a:	2a0f      	cmp	r2, #15
   1a91c:	ddf2      	ble.n	1a904 <_malloc_r+0x110>
   1a91e:	2001      	movs	r0, #1
   1a920:	4680      	mov	r8, r0
   1a922:	1961      	adds	r1, r4, r5
   1a924:	4305      	orrs	r5, r0
   1a926:	6065      	str	r5, [r4, #4]
   1a928:	68a0      	ldr	r0, [r4, #8]
   1a92a:	68e5      	ldr	r5, [r4, #12]
   1a92c:	3608      	adds	r6, #8
   1a92e:	60c5      	str	r5, [r0, #12]
   1a930:	60a8      	str	r0, [r5, #8]
   1a932:	4640      	mov	r0, r8
   1a934:	60f1      	str	r1, [r6, #12]
   1a936:	60b1      	str	r1, [r6, #8]
   1a938:	4310      	orrs	r0, r2
   1a93a:	6048      	str	r0, [r1, #4]
   1a93c:	60ce      	str	r6, [r1, #12]
   1a93e:	608e      	str	r6, [r1, #8]
   1a940:	0038      	movs	r0, r7
   1a942:	50e2      	str	r2, [r4, r3]
   1a944:	f000 fab8 	bl	1aeb8 <__malloc_unlock>
   1a948:	0020      	movs	r0, r4
   1a94a:	3008      	adds	r0, #8
   1a94c:	e021      	b.n	1a992 <_malloc_r+0x19e>
   1a94e:	2910      	cmp	r1, #16
   1a950:	d826      	bhi.n	1a9a0 <_malloc_r+0x1ac>
   1a952:	0038      	movs	r0, r7
   1a954:	f000 faa8 	bl	1aea8 <__malloc_lock>
   1a958:	2510      	movs	r5, #16
   1a95a:	2318      	movs	r3, #24
   1a95c:	2002      	movs	r0, #2
   1a95e:	4e8b      	ldr	r6, [pc, #556]	; (1ab8c <_malloc_r+0x398>)
   1a960:	18f3      	adds	r3, r6, r3
   1a962:	001a      	movs	r2, r3
   1a964:	685c      	ldr	r4, [r3, #4]
   1a966:	3a08      	subs	r2, #8
   1a968:	4294      	cmp	r4, r2
   1a96a:	d100      	bne.n	1a96e <_malloc_r+0x17a>
   1a96c:	e12e      	b.n	1abcc <_malloc_r+0x3d8>
   1a96e:	2303      	movs	r3, #3
   1a970:	6862      	ldr	r2, [r4, #4]
   1a972:	439a      	bics	r2, r3
   1a974:	0013      	movs	r3, r2
   1a976:	68e2      	ldr	r2, [r4, #12]
   1a978:	68a1      	ldr	r1, [r4, #8]
   1a97a:	60ca      	str	r2, [r1, #12]
   1a97c:	6091      	str	r1, [r2, #8]
   1a97e:	2201      	movs	r2, #1
   1a980:	18e3      	adds	r3, r4, r3
   1a982:	6859      	ldr	r1, [r3, #4]
   1a984:	0038      	movs	r0, r7
   1a986:	430a      	orrs	r2, r1
   1a988:	605a      	str	r2, [r3, #4]
   1a98a:	f000 fa95 	bl	1aeb8 <__malloc_unlock>
   1a98e:	0020      	movs	r0, r4
   1a990:	3008      	adds	r0, #8
   1a992:	b003      	add	sp, #12
   1a994:	bc3c      	pop	{r2, r3, r4, r5}
   1a996:	4690      	mov	r8, r2
   1a998:	4699      	mov	r9, r3
   1a99a:	46a2      	mov	sl, r4
   1a99c:	46ab      	mov	fp, r5
   1a99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9a0:	230c      	movs	r3, #12
   1a9a2:	2000      	movs	r0, #0
   1a9a4:	603b      	str	r3, [r7, #0]
   1a9a6:	e7f4      	b.n	1a992 <_malloc_r+0x19e>
   1a9a8:	2180      	movs	r1, #128	; 0x80
   1a9aa:	233f      	movs	r3, #63	; 0x3f
   1a9ac:	2040      	movs	r0, #64	; 0x40
   1a9ae:	0089      	lsls	r1, r1, #2
   1a9b0:	4698      	mov	r8, r3
   1a9b2:	e746      	b.n	1a842 <_malloc_r+0x4e>
   1a9b4:	4640      	mov	r0, r8
   1a9b6:	e764      	b.n	1a882 <_malloc_r+0x8e>
   1a9b8:	464b      	mov	r3, r9
   1a9ba:	e7e0      	b.n	1a97e <_malloc_r+0x18a>
   1a9bc:	2303      	movs	r3, #3
   1a9be:	68b4      	ldr	r4, [r6, #8]
   1a9c0:	6862      	ldr	r2, [r4, #4]
   1a9c2:	439a      	bics	r2, r3
   1a9c4:	4690      	mov	r8, r2
   1a9c6:	42aa      	cmp	r2, r5
   1a9c8:	d303      	bcc.n	1a9d2 <_malloc_r+0x1de>
   1a9ca:	1b53      	subs	r3, r2, r5
   1a9cc:	2b0f      	cmp	r3, #15
   1a9ce:	dd00      	ble.n	1a9d2 <_malloc_r+0x1de>
   1a9d0:	e086      	b.n	1aae0 <_malloc_r+0x2ec>
   1a9d2:	0023      	movs	r3, r4
   1a9d4:	4443      	add	r3, r8
   1a9d6:	4a6f      	ldr	r2, [pc, #444]	; (1ab94 <_malloc_r+0x3a0>)
   1a9d8:	9301      	str	r3, [sp, #4]
   1a9da:	4b6f      	ldr	r3, [pc, #444]	; (1ab98 <_malloc_r+0x3a4>)
   1a9dc:	4693      	mov	fp, r2
   1a9de:	681b      	ldr	r3, [r3, #0]
   1a9e0:	6812      	ldr	r2, [r2, #0]
   1a9e2:	18eb      	adds	r3, r5, r3
   1a9e4:	3201      	adds	r2, #1
   1a9e6:	d100      	bne.n	1a9ea <_malloc_r+0x1f6>
   1a9e8:	e168      	b.n	1acbc <_malloc_r+0x4c8>
   1a9ea:	4a6c      	ldr	r2, [pc, #432]	; (1ab9c <_malloc_r+0x3a8>)
   1a9ec:	4694      	mov	ip, r2
   1a9ee:	4463      	add	r3, ip
   1a9f0:	0b1b      	lsrs	r3, r3, #12
   1a9f2:	031b      	lsls	r3, r3, #12
   1a9f4:	9300      	str	r3, [sp, #0]
   1a9f6:	9900      	ldr	r1, [sp, #0]
   1a9f8:	0038      	movs	r0, r7
   1a9fa:	f000 ff6b 	bl	1b8d4 <_sbrk_r>
   1a9fe:	0003      	movs	r3, r0
   1aa00:	4681      	mov	r9, r0
   1aa02:	3301      	adds	r3, #1
   1aa04:	d061      	beq.n	1aaca <_malloc_r+0x2d6>
   1aa06:	9b01      	ldr	r3, [sp, #4]
   1aa08:	4283      	cmp	r3, r0
   1aa0a:	d900      	bls.n	1aa0e <_malloc_r+0x21a>
   1aa0c:	e0ff      	b.n	1ac0e <_malloc_r+0x41a>
   1aa0e:	4b64      	ldr	r3, [pc, #400]	; (1aba0 <_malloc_r+0x3ac>)
   1aa10:	9a00      	ldr	r2, [sp, #0]
   1aa12:	469a      	mov	sl, r3
   1aa14:	681b      	ldr	r3, [r3, #0]
   1aa16:	469c      	mov	ip, r3
   1aa18:	4653      	mov	r3, sl
   1aa1a:	4462      	add	r2, ip
   1aa1c:	601a      	str	r2, [r3, #0]
   1aa1e:	9b01      	ldr	r3, [sp, #4]
   1aa20:	0011      	movs	r1, r2
   1aa22:	4283      	cmp	r3, r0
   1aa24:	d100      	bne.n	1aa28 <_malloc_r+0x234>
   1aa26:	e155      	b.n	1acd4 <_malloc_r+0x4e0>
   1aa28:	465b      	mov	r3, fp
   1aa2a:	681b      	ldr	r3, [r3, #0]
   1aa2c:	3301      	adds	r3, #1
   1aa2e:	d100      	bne.n	1aa32 <_malloc_r+0x23e>
   1aa30:	e16c      	b.n	1ad0c <_malloc_r+0x518>
   1aa32:	464b      	mov	r3, r9
   1aa34:	9a01      	ldr	r2, [sp, #4]
   1aa36:	1a9b      	subs	r3, r3, r2
   1aa38:	1859      	adds	r1, r3, r1
   1aa3a:	4653      	mov	r3, sl
   1aa3c:	6019      	str	r1, [r3, #0]
   1aa3e:	2307      	movs	r3, #7
   1aa40:	464a      	mov	r2, r9
   1aa42:	4013      	ands	r3, r2
   1aa44:	d100      	bne.n	1aa48 <_malloc_r+0x254>
   1aa46:	e124      	b.n	1ac92 <_malloc_r+0x49e>
   1aa48:	2108      	movs	r1, #8
   1aa4a:	4689      	mov	r9, r1
   1aa4c:	4955      	ldr	r1, [pc, #340]	; (1aba4 <_malloc_r+0x3b0>)
   1aa4e:	1ad2      	subs	r2, r2, r3
   1aa50:	4491      	add	r9, r2
   1aa52:	1acb      	subs	r3, r1, r3
   1aa54:	9a00      	ldr	r2, [sp, #0]
   1aa56:	0038      	movs	r0, r7
   1aa58:	444a      	add	r2, r9
   1aa5a:	0511      	lsls	r1, r2, #20
   1aa5c:	0d09      	lsrs	r1, r1, #20
   1aa5e:	1a5b      	subs	r3, r3, r1
   1aa60:	0019      	movs	r1, r3
   1aa62:	469b      	mov	fp, r3
   1aa64:	f000 ff36 	bl	1b8d4 <_sbrk_r>
   1aa68:	1c43      	adds	r3, r0, #1
   1aa6a:	d100      	bne.n	1aa6e <_malloc_r+0x27a>
   1aa6c:	e142      	b.n	1acf4 <_malloc_r+0x500>
   1aa6e:	464b      	mov	r3, r9
   1aa70:	1ac0      	subs	r0, r0, r3
   1aa72:	2301      	movs	r3, #1
   1aa74:	4458      	add	r0, fp
   1aa76:	4318      	orrs	r0, r3
   1aa78:	4653      	mov	r3, sl
   1aa7a:	681b      	ldr	r3, [r3, #0]
   1aa7c:	445b      	add	r3, fp
   1aa7e:	0019      	movs	r1, r3
   1aa80:	4653      	mov	r3, sl
   1aa82:	6019      	str	r1, [r3, #0]
   1aa84:	464b      	mov	r3, r9
   1aa86:	60b3      	str	r3, [r6, #8]
   1aa88:	6058      	str	r0, [r3, #4]
   1aa8a:	42b4      	cmp	r4, r6
   1aa8c:	d013      	beq.n	1aab6 <_malloc_r+0x2c2>
   1aa8e:	4643      	mov	r3, r8
   1aa90:	2b0f      	cmp	r3, #15
   1aa92:	d800      	bhi.n	1aa96 <_malloc_r+0x2a2>
   1aa94:	e0e8      	b.n	1ac68 <_malloc_r+0x474>
   1aa96:	4643      	mov	r3, r8
   1aa98:	2207      	movs	r2, #7
   1aa9a:	6860      	ldr	r0, [r4, #4]
   1aa9c:	3b0c      	subs	r3, #12
   1aa9e:	4393      	bics	r3, r2
   1aaa0:	3a06      	subs	r2, #6
   1aaa2:	4002      	ands	r2, r0
   1aaa4:	2005      	movs	r0, #5
   1aaa6:	431a      	orrs	r2, r3
   1aaa8:	6062      	str	r2, [r4, #4]
   1aaaa:	18e2      	adds	r2, r4, r3
   1aaac:	6050      	str	r0, [r2, #4]
   1aaae:	6090      	str	r0, [r2, #8]
   1aab0:	2b0f      	cmp	r3, #15
   1aab2:	d900      	bls.n	1aab6 <_malloc_r+0x2c2>
   1aab4:	e122      	b.n	1acfc <_malloc_r+0x508>
   1aab6:	4b3c      	ldr	r3, [pc, #240]	; (1aba8 <_malloc_r+0x3b4>)
   1aab8:	681a      	ldr	r2, [r3, #0]
   1aaba:	4291      	cmp	r1, r2
   1aabc:	d900      	bls.n	1aac0 <_malloc_r+0x2cc>
   1aabe:	6019      	str	r1, [r3, #0]
   1aac0:	4b3a      	ldr	r3, [pc, #232]	; (1abac <_malloc_r+0x3b8>)
   1aac2:	681a      	ldr	r2, [r3, #0]
   1aac4:	4291      	cmp	r1, r2
   1aac6:	d900      	bls.n	1aaca <_malloc_r+0x2d6>
   1aac8:	6019      	str	r1, [r3, #0]
   1aaca:	2303      	movs	r3, #3
   1aacc:	68b4      	ldr	r4, [r6, #8]
   1aace:	6862      	ldr	r2, [r4, #4]
   1aad0:	439a      	bics	r2, r3
   1aad2:	1b53      	subs	r3, r2, r5
   1aad4:	4295      	cmp	r5, r2
   1aad6:	d900      	bls.n	1aada <_malloc_r+0x2e6>
   1aad8:	e0c9      	b.n	1ac6e <_malloc_r+0x47a>
   1aada:	2b0f      	cmp	r3, #15
   1aadc:	dc00      	bgt.n	1aae0 <_malloc_r+0x2ec>
   1aade:	e0c6      	b.n	1ac6e <_malloc_r+0x47a>
   1aae0:	2201      	movs	r2, #1
   1aae2:	0029      	movs	r1, r5
   1aae4:	4313      	orrs	r3, r2
   1aae6:	4311      	orrs	r1, r2
   1aae8:	1965      	adds	r5, r4, r5
   1aaea:	6061      	str	r1, [r4, #4]
   1aaec:	0038      	movs	r0, r7
   1aaee:	60b5      	str	r5, [r6, #8]
   1aaf0:	606b      	str	r3, [r5, #4]
   1aaf2:	f000 f9e1 	bl	1aeb8 <__malloc_unlock>
   1aaf6:	0020      	movs	r0, r4
   1aaf8:	3008      	adds	r0, #8
   1aafa:	e74a      	b.n	1a992 <_malloc_r+0x19e>
   1aafc:	2814      	cmp	r0, #20
   1aafe:	d97a      	bls.n	1abf6 <_malloc_r+0x402>
   1ab00:	2854      	cmp	r0, #84	; 0x54
   1ab02:	d900      	bls.n	1ab06 <_malloc_r+0x312>
   1ab04:	e0ba      	b.n	1ac7c <_malloc_r+0x488>
   1ab06:	236e      	movs	r3, #110	; 0x6e
   1ab08:	4698      	mov	r8, r3
   1ab0a:	0b28      	lsrs	r0, r5, #12
   1ab0c:	4480      	add	r8, r0
   1ab0e:	306f      	adds	r0, #111	; 0x6f
   1ab10:	00c1      	lsls	r1, r0, #3
   1ab12:	e696      	b.n	1a842 <_malloc_r+0x4e>
   1ab14:	0a5a      	lsrs	r2, r3, #9
   1ab16:	2a04      	cmp	r2, #4
   1ab18:	d973      	bls.n	1ac02 <_malloc_r+0x40e>
   1ab1a:	2a14      	cmp	r2, #20
   1ab1c:	d900      	bls.n	1ab20 <_malloc_r+0x32c>
   1ab1e:	e0d0      	b.n	1acc2 <_malloc_r+0x4ce>
   1ab20:	0011      	movs	r1, r2
   1ab22:	325c      	adds	r2, #92	; 0x5c
   1ab24:	315b      	adds	r1, #91	; 0x5b
   1ab26:	00d2      	lsls	r2, r2, #3
   1ab28:	2308      	movs	r3, #8
   1ab2a:	425b      	negs	r3, r3
   1ab2c:	469c      	mov	ip, r3
   1ab2e:	18b2      	adds	r2, r6, r2
   1ab30:	4494      	add	ip, r2
   1ab32:	4663      	mov	r3, ip
   1ab34:	689a      	ldr	r2, [r3, #8]
   1ab36:	2303      	movs	r3, #3
   1ab38:	4698      	mov	r8, r3
   1ab3a:	4594      	cmp	ip, r2
   1ab3c:	d100      	bne.n	1ab40 <_malloc_r+0x34c>
   1ab3e:	e0ab      	b.n	1ac98 <_malloc_r+0x4a4>
   1ab40:	4643      	mov	r3, r8
   1ab42:	6851      	ldr	r1, [r2, #4]
   1ab44:	4399      	bics	r1, r3
   1ab46:	4589      	cmp	r9, r1
   1ab48:	d300      	bcc.n	1ab4c <_malloc_r+0x358>
   1ab4a:	e095      	b.n	1ac78 <_malloc_r+0x484>
   1ab4c:	6892      	ldr	r2, [r2, #8]
   1ab4e:	4594      	cmp	ip, r2
   1ab50:	d1f6      	bne.n	1ab40 <_malloc_r+0x34c>
   1ab52:	4663      	mov	r3, ip
   1ab54:	68da      	ldr	r2, [r3, #12]
   1ab56:	6873      	ldr	r3, [r6, #4]
   1ab58:	4661      	mov	r1, ip
   1ab5a:	60e2      	str	r2, [r4, #12]
   1ab5c:	60a1      	str	r1, [r4, #8]
   1ab5e:	6094      	str	r4, [r2, #8]
   1ab60:	60cc      	str	r4, [r1, #12]
   1ab62:	e6b6      	b.n	1a8d2 <_malloc_r+0xde>
   1ab64:	2301      	movs	r3, #1
   1ab66:	1960      	adds	r0, r4, r5
   1ab68:	431d      	orrs	r5, r3
   1ab6a:	6065      	str	r5, [r4, #4]
   1ab6c:	6170      	str	r0, [r6, #20]
   1ab6e:	6130      	str	r0, [r6, #16]
   1ab70:	60c2      	str	r2, [r0, #12]
   1ab72:	6082      	str	r2, [r0, #8]
   1ab74:	001a      	movs	r2, r3
   1ab76:	464b      	mov	r3, r9
   1ab78:	430a      	orrs	r2, r1
   1ab7a:	6042      	str	r2, [r0, #4]
   1ab7c:	0038      	movs	r0, r7
   1ab7e:	50e1      	str	r1, [r4, r3]
   1ab80:	f000 f99a 	bl	1aeb8 <__malloc_unlock>
   1ab84:	0020      	movs	r0, r4
   1ab86:	3008      	adds	r0, #8
   1ab88:	e703      	b.n	1a992 <_malloc_r+0x19e>
   1ab8a:	46c0      	nop			; (mov r8, r8)
   1ab8c:	20000670 	.word	0x20000670
   1ab90:	000001ff 	.word	0x000001ff
   1ab94:	20000a78 	.word	0x20000a78
   1ab98:	200010f8 	.word	0x200010f8
   1ab9c:	0000100f 	.word	0x0000100f
   1aba0:	200010c8 	.word	0x200010c8
   1aba4:	00001008 	.word	0x00001008
   1aba8:	200010f0 	.word	0x200010f0
   1abac:	200010f4 	.word	0x200010f4
   1abb0:	6873      	ldr	r3, [r6, #4]
   1abb2:	e68e      	b.n	1a8d2 <_malloc_r+0xde>
   1abb4:	2308      	movs	r3, #8
   1abb6:	469b      	mov	fp, r3
   1abb8:	3b07      	subs	r3, #7
   1abba:	44dc      	add	ip, fp
   1abbc:	469b      	mov	fp, r3
   1abbe:	44da      	add	sl, fp
   1abc0:	4643      	mov	r3, r8
   1abc2:	4652      	mov	r2, sl
   1abc4:	4213      	tst	r3, r2
   1abc6:	d000      	beq.n	1abca <_malloc_r+0x3d6>
   1abc8:	e697      	b.n	1a8fa <_malloc_r+0x106>
   1abca:	e037      	b.n	1ac3c <_malloc_r+0x448>
   1abcc:	68dc      	ldr	r4, [r3, #12]
   1abce:	3002      	adds	r0, #2
   1abd0:	42a3      	cmp	r3, r4
   1abd2:	d100      	bne.n	1abd6 <_malloc_r+0x3e2>
   1abd4:	e655      	b.n	1a882 <_malloc_r+0x8e>
   1abd6:	e6ca      	b.n	1a96e <_malloc_r+0x17a>
   1abd8:	2201      	movs	r2, #1
   1abda:	18e3      	adds	r3, r4, r3
   1abdc:	6859      	ldr	r1, [r3, #4]
   1abde:	0038      	movs	r0, r7
   1abe0:	430a      	orrs	r2, r1
   1abe2:	605a      	str	r2, [r3, #4]
   1abe4:	68e3      	ldr	r3, [r4, #12]
   1abe6:	68a2      	ldr	r2, [r4, #8]
   1abe8:	60d3      	str	r3, [r2, #12]
   1abea:	609a      	str	r2, [r3, #8]
   1abec:	f000 f964 	bl	1aeb8 <__malloc_unlock>
   1abf0:	0020      	movs	r0, r4
   1abf2:	3008      	adds	r0, #8
   1abf4:	e6cd      	b.n	1a992 <_malloc_r+0x19e>
   1abf6:	235b      	movs	r3, #91	; 0x5b
   1abf8:	4698      	mov	r8, r3
   1abfa:	4480      	add	r8, r0
   1abfc:	305c      	adds	r0, #92	; 0x5c
   1abfe:	00c1      	lsls	r1, r0, #3
   1ac00:	e61f      	b.n	1a842 <_malloc_r+0x4e>
   1ac02:	099a      	lsrs	r2, r3, #6
   1ac04:	0011      	movs	r1, r2
   1ac06:	3239      	adds	r2, #57	; 0x39
   1ac08:	3138      	adds	r1, #56	; 0x38
   1ac0a:	00d2      	lsls	r2, r2, #3
   1ac0c:	e78c      	b.n	1ab28 <_malloc_r+0x334>
   1ac0e:	42b4      	cmp	r4, r6
   1ac10:	d000      	beq.n	1ac14 <_malloc_r+0x420>
   1ac12:	e75a      	b.n	1aaca <_malloc_r+0x2d6>
   1ac14:	4b4f      	ldr	r3, [pc, #316]	; (1ad54 <_malloc_r+0x560>)
   1ac16:	9a00      	ldr	r2, [sp, #0]
   1ac18:	469a      	mov	sl, r3
   1ac1a:	681b      	ldr	r3, [r3, #0]
   1ac1c:	469c      	mov	ip, r3
   1ac1e:	4653      	mov	r3, sl
   1ac20:	4462      	add	r2, ip
   1ac22:	0011      	movs	r1, r2
   1ac24:	601a      	str	r2, [r3, #0]
   1ac26:	e6ff      	b.n	1aa28 <_malloc_r+0x234>
   1ac28:	2308      	movs	r3, #8
   1ac2a:	425b      	negs	r3, r3
   1ac2c:	469c      	mov	ip, r3
   1ac2e:	44e1      	add	r9, ip
   1ac30:	464b      	mov	r3, r9
   1ac32:	689b      	ldr	r3, [r3, #8]
   1ac34:	3801      	subs	r0, #1
   1ac36:	4599      	cmp	r9, r3
   1ac38:	d000      	beq.n	1ac3c <_malloc_r+0x448>
   1ac3a:	e084      	b.n	1ad46 <_malloc_r+0x552>
   1ac3c:	4643      	mov	r3, r8
   1ac3e:	4203      	tst	r3, r0
   1ac40:	d1f2      	bne.n	1ac28 <_malloc_r+0x434>
   1ac42:	6873      	ldr	r3, [r6, #4]
   1ac44:	438b      	bics	r3, r1
   1ac46:	6073      	str	r3, [r6, #4]
   1ac48:	0049      	lsls	r1, r1, #1
   1ac4a:	4299      	cmp	r1, r3
   1ac4c:	d900      	bls.n	1ac50 <_malloc_r+0x45c>
   1ac4e:	e6b5      	b.n	1a9bc <_malloc_r+0x1c8>
   1ac50:	2900      	cmp	r1, #0
   1ac52:	d100      	bne.n	1ac56 <_malloc_r+0x462>
   1ac54:	e6b2      	b.n	1a9bc <_malloc_r+0x1c8>
   1ac56:	4650      	mov	r0, sl
   1ac58:	420b      	tst	r3, r1
   1ac5a:	d000      	beq.n	1ac5e <_malloc_r+0x46a>
   1ac5c:	e648      	b.n	1a8f0 <_malloc_r+0xfc>
   1ac5e:	0049      	lsls	r1, r1, #1
   1ac60:	3004      	adds	r0, #4
   1ac62:	420b      	tst	r3, r1
   1ac64:	d0fb      	beq.n	1ac5e <_malloc_r+0x46a>
   1ac66:	e643      	b.n	1a8f0 <_malloc_r+0xfc>
   1ac68:	2301      	movs	r3, #1
   1ac6a:	464a      	mov	r2, r9
   1ac6c:	6053      	str	r3, [r2, #4]
   1ac6e:	0038      	movs	r0, r7
   1ac70:	f000 f922 	bl	1aeb8 <__malloc_unlock>
   1ac74:	2000      	movs	r0, #0
   1ac76:	e68c      	b.n	1a992 <_malloc_r+0x19e>
   1ac78:	4694      	mov	ip, r2
   1ac7a:	e76a      	b.n	1ab52 <_malloc_r+0x35e>
   1ac7c:	23aa      	movs	r3, #170	; 0xaa
   1ac7e:	005b      	lsls	r3, r3, #1
   1ac80:	4298      	cmp	r0, r3
   1ac82:	d811      	bhi.n	1aca8 <_malloc_r+0x4b4>
   1ac84:	3bdd      	subs	r3, #221	; 0xdd
   1ac86:	4698      	mov	r8, r3
   1ac88:	0be8      	lsrs	r0, r5, #15
   1ac8a:	4480      	add	r8, r0
   1ac8c:	3078      	adds	r0, #120	; 0x78
   1ac8e:	00c1      	lsls	r1, r0, #3
   1ac90:	e5d7      	b.n	1a842 <_malloc_r+0x4e>
   1ac92:	2380      	movs	r3, #128	; 0x80
   1ac94:	015b      	lsls	r3, r3, #5
   1ac96:	e6dd      	b.n	1aa54 <_malloc_r+0x260>
   1ac98:	1089      	asrs	r1, r1, #2
   1ac9a:	3b02      	subs	r3, #2
   1ac9c:	408b      	lsls	r3, r1
   1ac9e:	6872      	ldr	r2, [r6, #4]
   1aca0:	4313      	orrs	r3, r2
   1aca2:	6073      	str	r3, [r6, #4]
   1aca4:	4662      	mov	r2, ip
   1aca6:	e757      	b.n	1ab58 <_malloc_r+0x364>
   1aca8:	4b2b      	ldr	r3, [pc, #172]	; (1ad58 <_malloc_r+0x564>)
   1acaa:	4298      	cmp	r0, r3
   1acac:	d81c      	bhi.n	1ace8 <_malloc_r+0x4f4>
   1acae:	237c      	movs	r3, #124	; 0x7c
   1acb0:	4698      	mov	r8, r3
   1acb2:	0ca8      	lsrs	r0, r5, #18
   1acb4:	4480      	add	r8, r0
   1acb6:	307d      	adds	r0, #125	; 0x7d
   1acb8:	00c1      	lsls	r1, r0, #3
   1acba:	e5c2      	b.n	1a842 <_malloc_r+0x4e>
   1acbc:	3310      	adds	r3, #16
   1acbe:	9300      	str	r3, [sp, #0]
   1acc0:	e699      	b.n	1a9f6 <_malloc_r+0x202>
   1acc2:	2a54      	cmp	r2, #84	; 0x54
   1acc4:	d826      	bhi.n	1ad14 <_malloc_r+0x520>
   1acc6:	464b      	mov	r3, r9
   1acc8:	0b1a      	lsrs	r2, r3, #12
   1acca:	0011      	movs	r1, r2
   1accc:	326f      	adds	r2, #111	; 0x6f
   1acce:	316e      	adds	r1, #110	; 0x6e
   1acd0:	00d2      	lsls	r2, r2, #3
   1acd2:	e729      	b.n	1ab28 <_malloc_r+0x334>
   1acd4:	051b      	lsls	r3, r3, #20
   1acd6:	d000      	beq.n	1acda <_malloc_r+0x4e6>
   1acd8:	e6a6      	b.n	1aa28 <_malloc_r+0x234>
   1acda:	2001      	movs	r0, #1
   1acdc:	9b00      	ldr	r3, [sp, #0]
   1acde:	68b2      	ldr	r2, [r6, #8]
   1ace0:	4443      	add	r3, r8
   1ace2:	4303      	orrs	r3, r0
   1ace4:	6053      	str	r3, [r2, #4]
   1ace6:	e6e6      	b.n	1aab6 <_malloc_r+0x2c2>
   1ace8:	21fe      	movs	r1, #254	; 0xfe
   1acea:	237e      	movs	r3, #126	; 0x7e
   1acec:	207f      	movs	r0, #127	; 0x7f
   1acee:	0089      	lsls	r1, r1, #2
   1acf0:	4698      	mov	r8, r3
   1acf2:	e5a6      	b.n	1a842 <_malloc_r+0x4e>
   1acf4:	2300      	movs	r3, #0
   1acf6:	2001      	movs	r0, #1
   1acf8:	469b      	mov	fp, r3
   1acfa:	e6bd      	b.n	1aa78 <_malloc_r+0x284>
   1acfc:	0021      	movs	r1, r4
   1acfe:	0038      	movs	r0, r7
   1ad00:	3108      	adds	r1, #8
   1ad02:	f7ff fa45 	bl	1a190 <_free_r>
   1ad06:	4653      	mov	r3, sl
   1ad08:	6819      	ldr	r1, [r3, #0]
   1ad0a:	e6d4      	b.n	1aab6 <_malloc_r+0x2c2>
   1ad0c:	465b      	mov	r3, fp
   1ad0e:	464a      	mov	r2, r9
   1ad10:	601a      	str	r2, [r3, #0]
   1ad12:	e694      	b.n	1aa3e <_malloc_r+0x24a>
   1ad14:	21aa      	movs	r1, #170	; 0xaa
   1ad16:	0049      	lsls	r1, r1, #1
   1ad18:	428a      	cmp	r2, r1
   1ad1a:	d806      	bhi.n	1ad2a <_malloc_r+0x536>
   1ad1c:	464b      	mov	r3, r9
   1ad1e:	0bda      	lsrs	r2, r3, #15
   1ad20:	0011      	movs	r1, r2
   1ad22:	3278      	adds	r2, #120	; 0x78
   1ad24:	3177      	adds	r1, #119	; 0x77
   1ad26:	00d2      	lsls	r2, r2, #3
   1ad28:	e6fe      	b.n	1ab28 <_malloc_r+0x334>
   1ad2a:	490b      	ldr	r1, [pc, #44]	; (1ad58 <_malloc_r+0x564>)
   1ad2c:	428a      	cmp	r2, r1
   1ad2e:	d806      	bhi.n	1ad3e <_malloc_r+0x54a>
   1ad30:	464b      	mov	r3, r9
   1ad32:	0c9a      	lsrs	r2, r3, #18
   1ad34:	0011      	movs	r1, r2
   1ad36:	327d      	adds	r2, #125	; 0x7d
   1ad38:	317c      	adds	r1, #124	; 0x7c
   1ad3a:	00d2      	lsls	r2, r2, #3
   1ad3c:	e6f4      	b.n	1ab28 <_malloc_r+0x334>
   1ad3e:	22fe      	movs	r2, #254	; 0xfe
   1ad40:	217e      	movs	r1, #126	; 0x7e
   1ad42:	0092      	lsls	r2, r2, #2
   1ad44:	e6f0      	b.n	1ab28 <_malloc_r+0x334>
   1ad46:	6873      	ldr	r3, [r6, #4]
   1ad48:	e77e      	b.n	1ac48 <_malloc_r+0x454>
   1ad4a:	002b      	movs	r3, r5
   1ad4c:	08e8      	lsrs	r0, r5, #3
   1ad4e:	3308      	adds	r3, #8
   1ad50:	e605      	b.n	1a95e <_malloc_r+0x16a>
   1ad52:	46c0      	nop			; (mov r8, r8)
   1ad54:	200010c8 	.word	0x200010c8
   1ad58:	00000554 	.word	0x00000554

0001ad5c <__ascii_mbtowc>:
   1ad5c:	b082      	sub	sp, #8
   1ad5e:	2900      	cmp	r1, #0
   1ad60:	d00a      	beq.n	1ad78 <__ascii_mbtowc+0x1c>
   1ad62:	2a00      	cmp	r2, #0
   1ad64:	d00b      	beq.n	1ad7e <__ascii_mbtowc+0x22>
   1ad66:	2b00      	cmp	r3, #0
   1ad68:	d00b      	beq.n	1ad82 <__ascii_mbtowc+0x26>
   1ad6a:	7813      	ldrb	r3, [r2, #0]
   1ad6c:	600b      	str	r3, [r1, #0]
   1ad6e:	7810      	ldrb	r0, [r2, #0]
   1ad70:	1e43      	subs	r3, r0, #1
   1ad72:	4198      	sbcs	r0, r3
   1ad74:	b002      	add	sp, #8
   1ad76:	4770      	bx	lr
   1ad78:	a901      	add	r1, sp, #4
   1ad7a:	2a00      	cmp	r2, #0
   1ad7c:	d1f3      	bne.n	1ad66 <__ascii_mbtowc+0xa>
   1ad7e:	2000      	movs	r0, #0
   1ad80:	e7f8      	b.n	1ad74 <__ascii_mbtowc+0x18>
   1ad82:	2002      	movs	r0, #2
   1ad84:	4240      	negs	r0, r0
   1ad86:	e7f5      	b.n	1ad74 <__ascii_mbtowc+0x18>

0001ad88 <memchr>:
   1ad88:	b570      	push	{r4, r5, r6, lr}
   1ad8a:	b2cd      	uxtb	r5, r1
   1ad8c:	0783      	lsls	r3, r0, #30
   1ad8e:	d034      	beq.n	1adfa <memchr+0x72>
   1ad90:	1e54      	subs	r4, r2, #1
   1ad92:	2a00      	cmp	r2, #0
   1ad94:	d01b      	beq.n	1adce <memchr+0x46>
   1ad96:	7803      	ldrb	r3, [r0, #0]
   1ad98:	42ab      	cmp	r3, r5
   1ad9a:	d019      	beq.n	1add0 <memchr+0x48>
   1ad9c:	2203      	movs	r2, #3
   1ad9e:	e004      	b.n	1adaa <memchr+0x22>
   1ada0:	3c01      	subs	r4, #1
   1ada2:	d314      	bcc.n	1adce <memchr+0x46>
   1ada4:	7803      	ldrb	r3, [r0, #0]
   1ada6:	42ab      	cmp	r3, r5
   1ada8:	d012      	beq.n	1add0 <memchr+0x48>
   1adaa:	3001      	adds	r0, #1
   1adac:	4210      	tst	r0, r2
   1adae:	d1f7      	bne.n	1ada0 <memchr+0x18>
   1adb0:	2c03      	cmp	r4, #3
   1adb2:	d80e      	bhi.n	1add2 <memchr+0x4a>
   1adb4:	2c00      	cmp	r4, #0
   1adb6:	d00a      	beq.n	1adce <memchr+0x46>
   1adb8:	7803      	ldrb	r3, [r0, #0]
   1adba:	42ab      	cmp	r3, r5
   1adbc:	d008      	beq.n	1add0 <memchr+0x48>
   1adbe:	1904      	adds	r4, r0, r4
   1adc0:	e002      	b.n	1adc8 <memchr+0x40>
   1adc2:	7803      	ldrb	r3, [r0, #0]
   1adc4:	42ab      	cmp	r3, r5
   1adc6:	d003      	beq.n	1add0 <memchr+0x48>
   1adc8:	3001      	adds	r0, #1
   1adca:	4284      	cmp	r4, r0
   1adcc:	d1f9      	bne.n	1adc2 <memchr+0x3a>
   1adce:	2000      	movs	r0, #0
   1add0:	bd70      	pop	{r4, r5, r6, pc}
   1add2:	22ff      	movs	r2, #255	; 0xff
   1add4:	060b      	lsls	r3, r1, #24
   1add6:	0c1b      	lsrs	r3, r3, #16
   1add8:	4011      	ands	r1, r2
   1adda:	4319      	orrs	r1, r3
   1addc:	040b      	lsls	r3, r1, #16
   1adde:	4e08      	ldr	r6, [pc, #32]	; (1ae00 <memchr+0x78>)
   1ade0:	4319      	orrs	r1, r3
   1ade2:	6803      	ldr	r3, [r0, #0]
   1ade4:	4a07      	ldr	r2, [pc, #28]	; (1ae04 <memchr+0x7c>)
   1ade6:	404b      	eors	r3, r1
   1ade8:	189a      	adds	r2, r3, r2
   1adea:	439a      	bics	r2, r3
   1adec:	4232      	tst	r2, r6
   1adee:	d1e3      	bne.n	1adb8 <memchr+0x30>
   1adf0:	3c04      	subs	r4, #4
   1adf2:	3004      	adds	r0, #4
   1adf4:	2c03      	cmp	r4, #3
   1adf6:	d8f4      	bhi.n	1ade2 <memchr+0x5a>
   1adf8:	e7dc      	b.n	1adb4 <memchr+0x2c>
   1adfa:	0014      	movs	r4, r2
   1adfc:	e7d8      	b.n	1adb0 <memchr+0x28>
   1adfe:	46c0      	nop			; (mov r8, r8)
   1ae00:	80808080 	.word	0x80808080
   1ae04:	fefefeff 	.word	0xfefefeff

0001ae08 <memmove>:
   1ae08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae0a:	4288      	cmp	r0, r1
   1ae0c:	d90a      	bls.n	1ae24 <memmove+0x1c>
   1ae0e:	188b      	adds	r3, r1, r2
   1ae10:	4298      	cmp	r0, r3
   1ae12:	d207      	bcs.n	1ae24 <memmove+0x1c>
   1ae14:	1e53      	subs	r3, r2, #1
   1ae16:	2a00      	cmp	r2, #0
   1ae18:	d003      	beq.n	1ae22 <memmove+0x1a>
   1ae1a:	5cca      	ldrb	r2, [r1, r3]
   1ae1c:	54c2      	strb	r2, [r0, r3]
   1ae1e:	3b01      	subs	r3, #1
   1ae20:	d2fb      	bcs.n	1ae1a <memmove+0x12>
   1ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae24:	0005      	movs	r5, r0
   1ae26:	2a0f      	cmp	r2, #15
   1ae28:	d808      	bhi.n	1ae3c <memmove+0x34>
   1ae2a:	2a00      	cmp	r2, #0
   1ae2c:	d0f9      	beq.n	1ae22 <memmove+0x1a>
   1ae2e:	2300      	movs	r3, #0
   1ae30:	5ccc      	ldrb	r4, [r1, r3]
   1ae32:	54ec      	strb	r4, [r5, r3]
   1ae34:	3301      	adds	r3, #1
   1ae36:	4293      	cmp	r3, r2
   1ae38:	d1fa      	bne.n	1ae30 <memmove+0x28>
   1ae3a:	e7f2      	b.n	1ae22 <memmove+0x1a>
   1ae3c:	000b      	movs	r3, r1
   1ae3e:	4303      	orrs	r3, r0
   1ae40:	079b      	lsls	r3, r3, #30
   1ae42:	d12d      	bne.n	1aea0 <memmove+0x98>
   1ae44:	0015      	movs	r5, r2
   1ae46:	000c      	movs	r4, r1
   1ae48:	0003      	movs	r3, r0
   1ae4a:	3d10      	subs	r5, #16
   1ae4c:	092f      	lsrs	r7, r5, #4
   1ae4e:	3701      	adds	r7, #1
   1ae50:	013f      	lsls	r7, r7, #4
   1ae52:	19c7      	adds	r7, r0, r7
   1ae54:	6826      	ldr	r6, [r4, #0]
   1ae56:	601e      	str	r6, [r3, #0]
   1ae58:	6866      	ldr	r6, [r4, #4]
   1ae5a:	605e      	str	r6, [r3, #4]
   1ae5c:	68a6      	ldr	r6, [r4, #8]
   1ae5e:	609e      	str	r6, [r3, #8]
   1ae60:	68e6      	ldr	r6, [r4, #12]
   1ae62:	3410      	adds	r4, #16
   1ae64:	60de      	str	r6, [r3, #12]
   1ae66:	3310      	adds	r3, #16
   1ae68:	429f      	cmp	r7, r3
   1ae6a:	d1f3      	bne.n	1ae54 <memmove+0x4c>
   1ae6c:	240f      	movs	r4, #15
   1ae6e:	43a5      	bics	r5, r4
   1ae70:	3510      	adds	r5, #16
   1ae72:	1949      	adds	r1, r1, r5
   1ae74:	4014      	ands	r4, r2
   1ae76:	1945      	adds	r5, r0, r5
   1ae78:	2c03      	cmp	r4, #3
   1ae7a:	d913      	bls.n	1aea4 <memmove+0x9c>
   1ae7c:	2300      	movs	r3, #0
   1ae7e:	1f27      	subs	r7, r4, #4
   1ae80:	08be      	lsrs	r6, r7, #2
   1ae82:	3601      	adds	r6, #1
   1ae84:	00b6      	lsls	r6, r6, #2
   1ae86:	58cc      	ldr	r4, [r1, r3]
   1ae88:	50ec      	str	r4, [r5, r3]
   1ae8a:	3304      	adds	r3, #4
   1ae8c:	42b3      	cmp	r3, r6
   1ae8e:	d1fa      	bne.n	1ae86 <memmove+0x7e>
   1ae90:	2603      	movs	r6, #3
   1ae92:	43b7      	bics	r7, r6
   1ae94:	1d3c      	adds	r4, r7, #4
   1ae96:	1909      	adds	r1, r1, r4
   1ae98:	192d      	adds	r5, r5, r4
   1ae9a:	4032      	ands	r2, r6
   1ae9c:	d1c7      	bne.n	1ae2e <memmove+0x26>
   1ae9e:	e7c0      	b.n	1ae22 <memmove+0x1a>
   1aea0:	0005      	movs	r5, r0
   1aea2:	e7c4      	b.n	1ae2e <memmove+0x26>
   1aea4:	0022      	movs	r2, r4
   1aea6:	e7c0      	b.n	1ae2a <memmove+0x22>

0001aea8 <__malloc_lock>:
   1aea8:	b510      	push	{r4, lr}
   1aeaa:	4802      	ldr	r0, [pc, #8]	; (1aeb4 <__malloc_lock+0xc>)
   1aeac:	f7ff fc1c 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1aeb0:	bd10      	pop	{r4, pc}
   1aeb2:	46c0      	nop			; (mov r8, r8)
   1aeb4:	20002050 	.word	0x20002050

0001aeb8 <__malloc_unlock>:
   1aeb8:	b510      	push	{r4, lr}
   1aeba:	4802      	ldr	r0, [pc, #8]	; (1aec4 <__malloc_unlock+0xc>)
   1aebc:	f7ff fc16 	bl	1a6ec <__retarget_lock_release_recursive>
   1aec0:	bd10      	pop	{r4, pc}
   1aec2:	46c0      	nop			; (mov r8, r8)
   1aec4:	20002050 	.word	0x20002050

0001aec8 <_Balloc>:
   1aec8:	b570      	push	{r4, r5, r6, lr}
   1aeca:	0004      	movs	r4, r0
   1aecc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1aece:	000d      	movs	r5, r1
   1aed0:	2800      	cmp	r0, #0
   1aed2:	d00a      	beq.n	1aeea <_Balloc+0x22>
   1aed4:	00ab      	lsls	r3, r5, #2
   1aed6:	18c3      	adds	r3, r0, r3
   1aed8:	6818      	ldr	r0, [r3, #0]
   1aeda:	2800      	cmp	r0, #0
   1aedc:	d00f      	beq.n	1aefe <_Balloc+0x36>
   1aede:	6802      	ldr	r2, [r0, #0]
   1aee0:	601a      	str	r2, [r3, #0]
   1aee2:	2300      	movs	r3, #0
   1aee4:	6103      	str	r3, [r0, #16]
   1aee6:	60c3      	str	r3, [r0, #12]
   1aee8:	bd70      	pop	{r4, r5, r6, pc}
   1aeea:	2221      	movs	r2, #33	; 0x21
   1aeec:	2104      	movs	r1, #4
   1aeee:	0020      	movs	r0, r4
   1aef0:	f000 fec8 	bl	1bc84 <_calloc_r>
   1aef4:	64e0      	str	r0, [r4, #76]	; 0x4c
   1aef6:	2800      	cmp	r0, #0
   1aef8:	d1ec      	bne.n	1aed4 <_Balloc+0xc>
   1aefa:	2000      	movs	r0, #0
   1aefc:	e7f4      	b.n	1aee8 <_Balloc+0x20>
   1aefe:	2601      	movs	r6, #1
   1af00:	40ae      	lsls	r6, r5
   1af02:	1d72      	adds	r2, r6, #5
   1af04:	0092      	lsls	r2, r2, #2
   1af06:	2101      	movs	r1, #1
   1af08:	0020      	movs	r0, r4
   1af0a:	f000 febb 	bl	1bc84 <_calloc_r>
   1af0e:	2800      	cmp	r0, #0
   1af10:	d0f3      	beq.n	1aefa <_Balloc+0x32>
   1af12:	6045      	str	r5, [r0, #4]
   1af14:	6086      	str	r6, [r0, #8]
   1af16:	e7e4      	b.n	1aee2 <_Balloc+0x1a>

0001af18 <_Bfree>:
   1af18:	2900      	cmp	r1, #0
   1af1a:	d006      	beq.n	1af2a <_Bfree+0x12>
   1af1c:	684b      	ldr	r3, [r1, #4]
   1af1e:	009a      	lsls	r2, r3, #2
   1af20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1af22:	189b      	adds	r3, r3, r2
   1af24:	681a      	ldr	r2, [r3, #0]
   1af26:	600a      	str	r2, [r1, #0]
   1af28:	6019      	str	r1, [r3, #0]
   1af2a:	4770      	bx	lr

0001af2c <__multadd>:
   1af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af2e:	46ce      	mov	lr, r9
   1af30:	4647      	mov	r7, r8
   1af32:	4681      	mov	r9, r0
   1af34:	0008      	movs	r0, r1
   1af36:	b580      	push	{r7, lr}
   1af38:	000d      	movs	r5, r1
   1af3a:	690c      	ldr	r4, [r1, #16]
   1af3c:	001f      	movs	r7, r3
   1af3e:	2100      	movs	r1, #0
   1af40:	3014      	adds	r0, #20
   1af42:	6803      	ldr	r3, [r0, #0]
   1af44:	3101      	adds	r1, #1
   1af46:	041e      	lsls	r6, r3, #16
   1af48:	0c36      	lsrs	r6, r6, #16
   1af4a:	4356      	muls	r6, r2
   1af4c:	0c1b      	lsrs	r3, r3, #16
   1af4e:	4353      	muls	r3, r2
   1af50:	19f6      	adds	r6, r6, r7
   1af52:	0c37      	lsrs	r7, r6, #16
   1af54:	19db      	adds	r3, r3, r7
   1af56:	0436      	lsls	r6, r6, #16
   1af58:	0c1f      	lsrs	r7, r3, #16
   1af5a:	0c36      	lsrs	r6, r6, #16
   1af5c:	041b      	lsls	r3, r3, #16
   1af5e:	199b      	adds	r3, r3, r6
   1af60:	c008      	stmia	r0!, {r3}
   1af62:	428c      	cmp	r4, r1
   1af64:	dced      	bgt.n	1af42 <__multadd+0x16>
   1af66:	2f00      	cmp	r7, #0
   1af68:	d008      	beq.n	1af7c <__multadd+0x50>
   1af6a:	68ab      	ldr	r3, [r5, #8]
   1af6c:	429c      	cmp	r4, r3
   1af6e:	da0a      	bge.n	1af86 <__multadd+0x5a>
   1af70:	1d23      	adds	r3, r4, #4
   1af72:	009b      	lsls	r3, r3, #2
   1af74:	18eb      	adds	r3, r5, r3
   1af76:	3401      	adds	r4, #1
   1af78:	605f      	str	r7, [r3, #4]
   1af7a:	612c      	str	r4, [r5, #16]
   1af7c:	0028      	movs	r0, r5
   1af7e:	bc0c      	pop	{r2, r3}
   1af80:	4690      	mov	r8, r2
   1af82:	4699      	mov	r9, r3
   1af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af86:	686b      	ldr	r3, [r5, #4]
   1af88:	4648      	mov	r0, r9
   1af8a:	1c59      	adds	r1, r3, #1
   1af8c:	f7ff ff9c 	bl	1aec8 <_Balloc>
   1af90:	0029      	movs	r1, r5
   1af92:	692b      	ldr	r3, [r5, #16]
   1af94:	4680      	mov	r8, r0
   1af96:	1c9a      	adds	r2, r3, #2
   1af98:	0092      	lsls	r2, r2, #2
   1af9a:	310c      	adds	r1, #12
   1af9c:	300c      	adds	r0, #12
   1af9e:	f7fa fc93 	bl	158c8 <memcpy>
   1afa2:	686b      	ldr	r3, [r5, #4]
   1afa4:	009a      	lsls	r2, r3, #2
   1afa6:	464b      	mov	r3, r9
   1afa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1afaa:	189b      	adds	r3, r3, r2
   1afac:	681a      	ldr	r2, [r3, #0]
   1afae:	602a      	str	r2, [r5, #0]
   1afb0:	601d      	str	r5, [r3, #0]
   1afb2:	4645      	mov	r5, r8
   1afb4:	e7dc      	b.n	1af70 <__multadd+0x44>
   1afb6:	46c0      	nop			; (mov r8, r8)

0001afb8 <__hi0bits>:
   1afb8:	0003      	movs	r3, r0
   1afba:	0c02      	lsrs	r2, r0, #16
   1afbc:	2000      	movs	r0, #0
   1afbe:	2a00      	cmp	r2, #0
   1afc0:	d101      	bne.n	1afc6 <__hi0bits+0xe>
   1afc2:	041b      	lsls	r3, r3, #16
   1afc4:	3010      	adds	r0, #16
   1afc6:	0e1a      	lsrs	r2, r3, #24
   1afc8:	d101      	bne.n	1afce <__hi0bits+0x16>
   1afca:	3008      	adds	r0, #8
   1afcc:	021b      	lsls	r3, r3, #8
   1afce:	0f1a      	lsrs	r2, r3, #28
   1afd0:	d101      	bne.n	1afd6 <__hi0bits+0x1e>
   1afd2:	3004      	adds	r0, #4
   1afd4:	011b      	lsls	r3, r3, #4
   1afd6:	0f9a      	lsrs	r2, r3, #30
   1afd8:	d101      	bne.n	1afde <__hi0bits+0x26>
   1afda:	3002      	adds	r0, #2
   1afdc:	009b      	lsls	r3, r3, #2
   1afde:	2b00      	cmp	r3, #0
   1afe0:	db03      	blt.n	1afea <__hi0bits+0x32>
   1afe2:	3001      	adds	r0, #1
   1afe4:	005b      	lsls	r3, r3, #1
   1afe6:	d400      	bmi.n	1afea <__hi0bits+0x32>
   1afe8:	2020      	movs	r0, #32
   1afea:	4770      	bx	lr

0001afec <__lo0bits>:
   1afec:	6803      	ldr	r3, [r0, #0]
   1afee:	075a      	lsls	r2, r3, #29
   1aff0:	d009      	beq.n	1b006 <__lo0bits+0x1a>
   1aff2:	2200      	movs	r2, #0
   1aff4:	07d9      	lsls	r1, r3, #31
   1aff6:	d404      	bmi.n	1b002 <__lo0bits+0x16>
   1aff8:	079a      	lsls	r2, r3, #30
   1affa:	d420      	bmi.n	1b03e <__lo0bits+0x52>
   1affc:	2202      	movs	r2, #2
   1affe:	089b      	lsrs	r3, r3, #2
   1b000:	6003      	str	r3, [r0, #0]
   1b002:	0010      	movs	r0, r2
   1b004:	4770      	bx	lr
   1b006:	0419      	lsls	r1, r3, #16
   1b008:	2200      	movs	r2, #0
   1b00a:	2900      	cmp	r1, #0
   1b00c:	d101      	bne.n	1b012 <__lo0bits+0x26>
   1b00e:	0c1b      	lsrs	r3, r3, #16
   1b010:	3210      	adds	r2, #16
   1b012:	21ff      	movs	r1, #255	; 0xff
   1b014:	4219      	tst	r1, r3
   1b016:	d101      	bne.n	1b01c <__lo0bits+0x30>
   1b018:	3208      	adds	r2, #8
   1b01a:	0a1b      	lsrs	r3, r3, #8
   1b01c:	0719      	lsls	r1, r3, #28
   1b01e:	d101      	bne.n	1b024 <__lo0bits+0x38>
   1b020:	3204      	adds	r2, #4
   1b022:	091b      	lsrs	r3, r3, #4
   1b024:	0799      	lsls	r1, r3, #30
   1b026:	d101      	bne.n	1b02c <__lo0bits+0x40>
   1b028:	3202      	adds	r2, #2
   1b02a:	089b      	lsrs	r3, r3, #2
   1b02c:	07d9      	lsls	r1, r3, #31
   1b02e:	d404      	bmi.n	1b03a <__lo0bits+0x4e>
   1b030:	085b      	lsrs	r3, r3, #1
   1b032:	d101      	bne.n	1b038 <__lo0bits+0x4c>
   1b034:	2220      	movs	r2, #32
   1b036:	e7e4      	b.n	1b002 <__lo0bits+0x16>
   1b038:	3201      	adds	r2, #1
   1b03a:	6003      	str	r3, [r0, #0]
   1b03c:	e7e1      	b.n	1b002 <__lo0bits+0x16>
   1b03e:	085b      	lsrs	r3, r3, #1
   1b040:	6003      	str	r3, [r0, #0]
   1b042:	2201      	movs	r2, #1
   1b044:	e7dd      	b.n	1b002 <__lo0bits+0x16>
   1b046:	46c0      	nop			; (mov r8, r8)

0001b048 <__i2b>:
   1b048:	b510      	push	{r4, lr}
   1b04a:	000c      	movs	r4, r1
   1b04c:	2101      	movs	r1, #1
   1b04e:	f7ff ff3b 	bl	1aec8 <_Balloc>
   1b052:	2301      	movs	r3, #1
   1b054:	6144      	str	r4, [r0, #20]
   1b056:	6103      	str	r3, [r0, #16]
   1b058:	bd10      	pop	{r4, pc}
   1b05a:	46c0      	nop			; (mov r8, r8)

0001b05c <__multiply>:
   1b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b05e:	4657      	mov	r7, sl
   1b060:	464e      	mov	r6, r9
   1b062:	4645      	mov	r5, r8
   1b064:	46de      	mov	lr, fp
   1b066:	b5e0      	push	{r5, r6, r7, lr}
   1b068:	6914      	ldr	r4, [r2, #16]
   1b06a:	690e      	ldr	r6, [r1, #16]
   1b06c:	b085      	sub	sp, #20
   1b06e:	000f      	movs	r7, r1
   1b070:	0015      	movs	r5, r2
   1b072:	42a6      	cmp	r6, r4
   1b074:	da04      	bge.n	1b080 <__multiply+0x24>
   1b076:	0033      	movs	r3, r6
   1b078:	0017      	movs	r7, r2
   1b07a:	0026      	movs	r6, r4
   1b07c:	000d      	movs	r5, r1
   1b07e:	001c      	movs	r4, r3
   1b080:	1933      	adds	r3, r6, r4
   1b082:	4698      	mov	r8, r3
   1b084:	68bb      	ldr	r3, [r7, #8]
   1b086:	6879      	ldr	r1, [r7, #4]
   1b088:	4598      	cmp	r8, r3
   1b08a:	dd00      	ble.n	1b08e <__multiply+0x32>
   1b08c:	3101      	adds	r1, #1
   1b08e:	f7ff ff1b 	bl	1aec8 <_Balloc>
   1b092:	2214      	movs	r2, #20
   1b094:	0003      	movs	r3, r0
   1b096:	4694      	mov	ip, r2
   1b098:	4463      	add	r3, ip
   1b09a:	469b      	mov	fp, r3
   1b09c:	4643      	mov	r3, r8
   1b09e:	009b      	lsls	r3, r3, #2
   1b0a0:	445b      	add	r3, fp
   1b0a2:	0019      	movs	r1, r3
   1b0a4:	9302      	str	r3, [sp, #8]
   1b0a6:	9003      	str	r0, [sp, #12]
   1b0a8:	465b      	mov	r3, fp
   1b0aa:	2200      	movs	r2, #0
   1b0ac:	458b      	cmp	fp, r1
   1b0ae:	d203      	bcs.n	1b0b8 <__multiply+0x5c>
   1b0b0:	9902      	ldr	r1, [sp, #8]
   1b0b2:	c304      	stmia	r3!, {r2}
   1b0b4:	4299      	cmp	r1, r3
   1b0b6:	d8fc      	bhi.n	1b0b2 <__multiply+0x56>
   1b0b8:	2314      	movs	r3, #20
   1b0ba:	00a4      	lsls	r4, r4, #2
   1b0bc:	469a      	mov	sl, r3
   1b0be:	3714      	adds	r7, #20
   1b0c0:	0023      	movs	r3, r4
   1b0c2:	46bc      	mov	ip, r7
   1b0c4:	44aa      	add	sl, r5
   1b0c6:	00b6      	lsls	r6, r6, #2
   1b0c8:	4453      	add	r3, sl
   1b0ca:	9700      	str	r7, [sp, #0]
   1b0cc:	44b4      	add	ip, r6
   1b0ce:	9301      	str	r3, [sp, #4]
   1b0d0:	459a      	cmp	sl, r3
   1b0d2:	d24f      	bcs.n	1b174 <__multiply+0x118>
   1b0d4:	4653      	mov	r3, sl
   1b0d6:	681b      	ldr	r3, [r3, #0]
   1b0d8:	041e      	lsls	r6, r3, #16
   1b0da:	0c36      	lsrs	r6, r6, #16
   1b0dc:	d020      	beq.n	1b120 <__multiply+0xc4>
   1b0de:	465c      	mov	r4, fp
   1b0e0:	2700      	movs	r7, #0
   1b0e2:	9d00      	ldr	r5, [sp, #0]
   1b0e4:	0021      	movs	r1, r4
   1b0e6:	cc08      	ldmia	r4!, {r3}
   1b0e8:	cd04      	ldmia	r5!, {r2}
   1b0ea:	4699      	mov	r9, r3
   1b0ec:	4648      	mov	r0, r9
   1b0ee:	0413      	lsls	r3, r2, #16
   1b0f0:	0c1b      	lsrs	r3, r3, #16
   1b0f2:	4373      	muls	r3, r6
   1b0f4:	0400      	lsls	r0, r0, #16
   1b0f6:	0c00      	lsrs	r0, r0, #16
   1b0f8:	181b      	adds	r3, r3, r0
   1b0fa:	19d8      	adds	r0, r3, r7
   1b0fc:	0c13      	lsrs	r3, r2, #16
   1b0fe:	464a      	mov	r2, r9
   1b100:	4373      	muls	r3, r6
   1b102:	0c12      	lsrs	r2, r2, #16
   1b104:	189b      	adds	r3, r3, r2
   1b106:	0c02      	lsrs	r2, r0, #16
   1b108:	189b      	adds	r3, r3, r2
   1b10a:	0402      	lsls	r2, r0, #16
   1b10c:	0c1f      	lsrs	r7, r3, #16
   1b10e:	0c12      	lsrs	r2, r2, #16
   1b110:	041b      	lsls	r3, r3, #16
   1b112:	4313      	orrs	r3, r2
   1b114:	600b      	str	r3, [r1, #0]
   1b116:	45ac      	cmp	ip, r5
   1b118:	d8e4      	bhi.n	1b0e4 <__multiply+0x88>
   1b11a:	4653      	mov	r3, sl
   1b11c:	6027      	str	r7, [r4, #0]
   1b11e:	681b      	ldr	r3, [r3, #0]
   1b120:	0c1e      	lsrs	r6, r3, #16
   1b122:	d020      	beq.n	1b166 <__multiply+0x10a>
   1b124:	465b      	mov	r3, fp
   1b126:	2100      	movs	r1, #0
   1b128:	681b      	ldr	r3, [r3, #0]
   1b12a:	465c      	mov	r4, fp
   1b12c:	0018      	movs	r0, r3
   1b12e:	000f      	movs	r7, r1
   1b130:	4662      	mov	r2, ip
   1b132:	9d00      	ldr	r5, [sp, #0]
   1b134:	8829      	ldrh	r1, [r5, #0]
   1b136:	0c00      	lsrs	r0, r0, #16
   1b138:	4371      	muls	r1, r6
   1b13a:	1809      	adds	r1, r1, r0
   1b13c:	19c9      	adds	r1, r1, r7
   1b13e:	041b      	lsls	r3, r3, #16
   1b140:	0408      	lsls	r0, r1, #16
   1b142:	0c1b      	lsrs	r3, r3, #16
   1b144:	4303      	orrs	r3, r0
   1b146:	6023      	str	r3, [r4, #0]
   1b148:	cd08      	ldmia	r5!, {r3}
   1b14a:	6860      	ldr	r0, [r4, #4]
   1b14c:	0c1b      	lsrs	r3, r3, #16
   1b14e:	4373      	muls	r3, r6
   1b150:	0407      	lsls	r7, r0, #16
   1b152:	0c3f      	lsrs	r7, r7, #16
   1b154:	19db      	adds	r3, r3, r7
   1b156:	0c09      	lsrs	r1, r1, #16
   1b158:	185b      	adds	r3, r3, r1
   1b15a:	0c1f      	lsrs	r7, r3, #16
   1b15c:	3404      	adds	r4, #4
   1b15e:	42aa      	cmp	r2, r5
   1b160:	d8e8      	bhi.n	1b134 <__multiply+0xd8>
   1b162:	4694      	mov	ip, r2
   1b164:	6023      	str	r3, [r4, #0]
   1b166:	2304      	movs	r3, #4
   1b168:	4699      	mov	r9, r3
   1b16a:	9b01      	ldr	r3, [sp, #4]
   1b16c:	44ca      	add	sl, r9
   1b16e:	44cb      	add	fp, r9
   1b170:	4553      	cmp	r3, sl
   1b172:	d8af      	bhi.n	1b0d4 <__multiply+0x78>
   1b174:	4643      	mov	r3, r8
   1b176:	2b00      	cmp	r3, #0
   1b178:	dd0e      	ble.n	1b198 <__multiply+0x13c>
   1b17a:	9b02      	ldr	r3, [sp, #8]
   1b17c:	3b04      	subs	r3, #4
   1b17e:	681a      	ldr	r2, [r3, #0]
   1b180:	2a00      	cmp	r2, #0
   1b182:	d109      	bne.n	1b198 <__multiply+0x13c>
   1b184:	4642      	mov	r2, r8
   1b186:	e003      	b.n	1b190 <__multiply+0x134>
   1b188:	3b04      	subs	r3, #4
   1b18a:	6819      	ldr	r1, [r3, #0]
   1b18c:	2900      	cmp	r1, #0
   1b18e:	d102      	bne.n	1b196 <__multiply+0x13a>
   1b190:	3a01      	subs	r2, #1
   1b192:	2a00      	cmp	r2, #0
   1b194:	d1f8      	bne.n	1b188 <__multiply+0x12c>
   1b196:	4690      	mov	r8, r2
   1b198:	9b03      	ldr	r3, [sp, #12]
   1b19a:	4642      	mov	r2, r8
   1b19c:	0018      	movs	r0, r3
   1b19e:	611a      	str	r2, [r3, #16]
   1b1a0:	b005      	add	sp, #20
   1b1a2:	bc3c      	pop	{r2, r3, r4, r5}
   1b1a4:	4690      	mov	r8, r2
   1b1a6:	4699      	mov	r9, r3
   1b1a8:	46a2      	mov	sl, r4
   1b1aa:	46ab      	mov	fp, r5
   1b1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1ae:	46c0      	nop			; (mov r8, r8)

0001b1b0 <__pow5mult>:
   1b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1b2:	4647      	mov	r7, r8
   1b1b4:	46ce      	mov	lr, r9
   1b1b6:	2303      	movs	r3, #3
   1b1b8:	b580      	push	{r7, lr}
   1b1ba:	4680      	mov	r8, r0
   1b1bc:	000f      	movs	r7, r1
   1b1be:	0014      	movs	r4, r2
   1b1c0:	4013      	ands	r3, r2
   1b1c2:	d13a      	bne.n	1b23a <__pow5mult+0x8a>
   1b1c4:	10a4      	asrs	r4, r4, #2
   1b1c6:	003e      	movs	r6, r7
   1b1c8:	2c00      	cmp	r4, #0
   1b1ca:	d025      	beq.n	1b218 <__pow5mult+0x68>
   1b1cc:	4643      	mov	r3, r8
   1b1ce:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b1d0:	2d00      	cmp	r5, #0
   1b1d2:	d03b      	beq.n	1b24c <__pow5mult+0x9c>
   1b1d4:	003e      	movs	r6, r7
   1b1d6:	2300      	movs	r3, #0
   1b1d8:	2701      	movs	r7, #1
   1b1da:	4699      	mov	r9, r3
   1b1dc:	4227      	tst	r7, r4
   1b1de:	d107      	bne.n	1b1f0 <__pow5mult+0x40>
   1b1e0:	1064      	asrs	r4, r4, #1
   1b1e2:	d019      	beq.n	1b218 <__pow5mult+0x68>
   1b1e4:	6828      	ldr	r0, [r5, #0]
   1b1e6:	2800      	cmp	r0, #0
   1b1e8:	d01b      	beq.n	1b222 <__pow5mult+0x72>
   1b1ea:	0005      	movs	r5, r0
   1b1ec:	4227      	tst	r7, r4
   1b1ee:	d0f7      	beq.n	1b1e0 <__pow5mult+0x30>
   1b1f0:	002a      	movs	r2, r5
   1b1f2:	0031      	movs	r1, r6
   1b1f4:	4640      	mov	r0, r8
   1b1f6:	f7ff ff31 	bl	1b05c <__multiply>
   1b1fa:	2e00      	cmp	r6, #0
   1b1fc:	d01b      	beq.n	1b236 <__pow5mult+0x86>
   1b1fe:	4642      	mov	r2, r8
   1b200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b202:	6873      	ldr	r3, [r6, #4]
   1b204:	4694      	mov	ip, r2
   1b206:	009b      	lsls	r3, r3, #2
   1b208:	4463      	add	r3, ip
   1b20a:	681a      	ldr	r2, [r3, #0]
   1b20c:	1064      	asrs	r4, r4, #1
   1b20e:	6032      	str	r2, [r6, #0]
   1b210:	601e      	str	r6, [r3, #0]
   1b212:	0006      	movs	r6, r0
   1b214:	2c00      	cmp	r4, #0
   1b216:	d1e5      	bne.n	1b1e4 <__pow5mult+0x34>
   1b218:	0030      	movs	r0, r6
   1b21a:	bc0c      	pop	{r2, r3}
   1b21c:	4690      	mov	r8, r2
   1b21e:	4699      	mov	r9, r3
   1b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b222:	002a      	movs	r2, r5
   1b224:	0029      	movs	r1, r5
   1b226:	4640      	mov	r0, r8
   1b228:	f7ff ff18 	bl	1b05c <__multiply>
   1b22c:	464b      	mov	r3, r9
   1b22e:	6028      	str	r0, [r5, #0]
   1b230:	6003      	str	r3, [r0, #0]
   1b232:	0005      	movs	r5, r0
   1b234:	e7da      	b.n	1b1ec <__pow5mult+0x3c>
   1b236:	0006      	movs	r6, r0
   1b238:	e7d2      	b.n	1b1e0 <__pow5mult+0x30>
   1b23a:	4a0b      	ldr	r2, [pc, #44]	; (1b268 <__pow5mult+0xb8>)
   1b23c:	3b01      	subs	r3, #1
   1b23e:	009b      	lsls	r3, r3, #2
   1b240:	589a      	ldr	r2, [r3, r2]
   1b242:	2300      	movs	r3, #0
   1b244:	f7ff fe72 	bl	1af2c <__multadd>
   1b248:	0007      	movs	r7, r0
   1b24a:	e7bb      	b.n	1b1c4 <__pow5mult+0x14>
   1b24c:	2101      	movs	r1, #1
   1b24e:	4640      	mov	r0, r8
   1b250:	f7ff fe3a 	bl	1aec8 <_Balloc>
   1b254:	4b05      	ldr	r3, [pc, #20]	; (1b26c <__pow5mult+0xbc>)
   1b256:	0005      	movs	r5, r0
   1b258:	6143      	str	r3, [r0, #20]
   1b25a:	2301      	movs	r3, #1
   1b25c:	6103      	str	r3, [r0, #16]
   1b25e:	4643      	mov	r3, r8
   1b260:	6498      	str	r0, [r3, #72]	; 0x48
   1b262:	2300      	movs	r3, #0
   1b264:	6003      	str	r3, [r0, #0]
   1b266:	e7b5      	b.n	1b1d4 <__pow5mult+0x24>
   1b268:	0001e398 	.word	0x0001e398
   1b26c:	00000271 	.word	0x00000271

0001b270 <__lshift>:
   1b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b272:	464e      	mov	r6, r9
   1b274:	4645      	mov	r5, r8
   1b276:	46de      	mov	lr, fp
   1b278:	4657      	mov	r7, sl
   1b27a:	b5e0      	push	{r5, r6, r7, lr}
   1b27c:	000e      	movs	r6, r1
   1b27e:	6933      	ldr	r3, [r6, #16]
   1b280:	1154      	asrs	r4, r2, #5
   1b282:	4698      	mov	r8, r3
   1b284:	44a0      	add	r8, r4
   1b286:	4643      	mov	r3, r8
   1b288:	1c5d      	adds	r5, r3, #1
   1b28a:	68b3      	ldr	r3, [r6, #8]
   1b28c:	4683      	mov	fp, r0
   1b28e:	4691      	mov	r9, r2
   1b290:	6849      	ldr	r1, [r1, #4]
   1b292:	429d      	cmp	r5, r3
   1b294:	dd03      	ble.n	1b29e <__lshift+0x2e>
   1b296:	3101      	adds	r1, #1
   1b298:	005b      	lsls	r3, r3, #1
   1b29a:	429d      	cmp	r5, r3
   1b29c:	dcfb      	bgt.n	1b296 <__lshift+0x26>
   1b29e:	4658      	mov	r0, fp
   1b2a0:	f7ff fe12 	bl	1aec8 <_Balloc>
   1b2a4:	0003      	movs	r3, r0
   1b2a6:	4684      	mov	ip, r0
   1b2a8:	3314      	adds	r3, #20
   1b2aa:	2c00      	cmp	r4, #0
   1b2ac:	dd06      	ble.n	1b2bc <__lshift+0x4c>
   1b2ae:	2100      	movs	r1, #0
   1b2b0:	00a4      	lsls	r4, r4, #2
   1b2b2:	001a      	movs	r2, r3
   1b2b4:	191b      	adds	r3, r3, r4
   1b2b6:	c202      	stmia	r2!, {r1}
   1b2b8:	4293      	cmp	r3, r2
   1b2ba:	d1fc      	bne.n	1b2b6 <__lshift+0x46>
   1b2bc:	6932      	ldr	r2, [r6, #16]
   1b2be:	4648      	mov	r0, r9
   1b2c0:	0097      	lsls	r7, r2, #2
   1b2c2:	0031      	movs	r1, r6
   1b2c4:	221f      	movs	r2, #31
   1b2c6:	3114      	adds	r1, #20
   1b2c8:	4010      	ands	r0, r2
   1b2ca:	19cf      	adds	r7, r1, r7
   1b2cc:	4681      	mov	r9, r0
   1b2ce:	2800      	cmp	r0, #0
   1b2d0:	d025      	beq.n	1b31e <__lshift+0xae>
   1b2d2:	2220      	movs	r2, #32
   1b2d4:	1a12      	subs	r2, r2, r0
   1b2d6:	4692      	mov	sl, r2
   1b2d8:	2200      	movs	r2, #0
   1b2da:	4648      	mov	r0, r9
   1b2dc:	680c      	ldr	r4, [r1, #0]
   1b2de:	4084      	lsls	r4, r0
   1b2e0:	4650      	mov	r0, sl
   1b2e2:	4314      	orrs	r4, r2
   1b2e4:	601c      	str	r4, [r3, #0]
   1b2e6:	c904      	ldmia	r1!, {r2}
   1b2e8:	3304      	adds	r3, #4
   1b2ea:	40c2      	lsrs	r2, r0
   1b2ec:	428f      	cmp	r7, r1
   1b2ee:	d8f4      	bhi.n	1b2da <__lshift+0x6a>
   1b2f0:	601a      	str	r2, [r3, #0]
   1b2f2:	2a00      	cmp	r2, #0
   1b2f4:	d001      	beq.n	1b2fa <__lshift+0x8a>
   1b2f6:	4645      	mov	r5, r8
   1b2f8:	3502      	adds	r5, #2
   1b2fa:	4663      	mov	r3, ip
   1b2fc:	3d01      	subs	r5, #1
   1b2fe:	611d      	str	r5, [r3, #16]
   1b300:	6873      	ldr	r3, [r6, #4]
   1b302:	4660      	mov	r0, ip
   1b304:	009a      	lsls	r2, r3, #2
   1b306:	465b      	mov	r3, fp
   1b308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b30a:	189b      	adds	r3, r3, r2
   1b30c:	681a      	ldr	r2, [r3, #0]
   1b30e:	6032      	str	r2, [r6, #0]
   1b310:	601e      	str	r6, [r3, #0]
   1b312:	bc3c      	pop	{r2, r3, r4, r5}
   1b314:	4690      	mov	r8, r2
   1b316:	4699      	mov	r9, r3
   1b318:	46a2      	mov	sl, r4
   1b31a:	46ab      	mov	fp, r5
   1b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b31e:	c904      	ldmia	r1!, {r2}
   1b320:	c304      	stmia	r3!, {r2}
   1b322:	428f      	cmp	r7, r1
   1b324:	d9e9      	bls.n	1b2fa <__lshift+0x8a>
   1b326:	c904      	ldmia	r1!, {r2}
   1b328:	c304      	stmia	r3!, {r2}
   1b32a:	428f      	cmp	r7, r1
   1b32c:	d8f7      	bhi.n	1b31e <__lshift+0xae>
   1b32e:	e7e4      	b.n	1b2fa <__lshift+0x8a>

0001b330 <__mcmp>:
   1b330:	690a      	ldr	r2, [r1, #16]
   1b332:	6903      	ldr	r3, [r0, #16]
   1b334:	b530      	push	{r4, r5, lr}
   1b336:	0005      	movs	r5, r0
   1b338:	1a98      	subs	r0, r3, r2
   1b33a:	d111      	bne.n	1b360 <__mcmp+0x30>
   1b33c:	0092      	lsls	r2, r2, #2
   1b33e:	3514      	adds	r5, #20
   1b340:	3114      	adds	r1, #20
   1b342:	18ab      	adds	r3, r5, r2
   1b344:	1889      	adds	r1, r1, r2
   1b346:	e001      	b.n	1b34c <__mcmp+0x1c>
   1b348:	429d      	cmp	r5, r3
   1b34a:	d209      	bcs.n	1b360 <__mcmp+0x30>
   1b34c:	3b04      	subs	r3, #4
   1b34e:	3904      	subs	r1, #4
   1b350:	681c      	ldr	r4, [r3, #0]
   1b352:	680a      	ldr	r2, [r1, #0]
   1b354:	4294      	cmp	r4, r2
   1b356:	d0f7      	beq.n	1b348 <__mcmp+0x18>
   1b358:	4294      	cmp	r4, r2
   1b35a:	4180      	sbcs	r0, r0
   1b35c:	2201      	movs	r2, #1
   1b35e:	4310      	orrs	r0, r2
   1b360:	bd30      	pop	{r4, r5, pc}
   1b362:	46c0      	nop			; (mov r8, r8)

0001b364 <__mdiff>:
   1b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b366:	4645      	mov	r5, r8
   1b368:	46de      	mov	lr, fp
   1b36a:	4657      	mov	r7, sl
   1b36c:	464e      	mov	r6, r9
   1b36e:	0014      	movs	r4, r2
   1b370:	690b      	ldr	r3, [r1, #16]
   1b372:	6912      	ldr	r2, [r2, #16]
   1b374:	b5e0      	push	{r5, r6, r7, lr}
   1b376:	4688      	mov	r8, r1
   1b378:	1a9d      	subs	r5, r3, r2
   1b37a:	d11a      	bne.n	1b3b2 <__mdiff+0x4e>
   1b37c:	000f      	movs	r7, r1
   1b37e:	2114      	movs	r1, #20
   1b380:	468c      	mov	ip, r1
   1b382:	0092      	lsls	r2, r2, #2
   1b384:	3714      	adds	r7, #20
   1b386:	44a4      	add	ip, r4
   1b388:	18bb      	adds	r3, r7, r2
   1b38a:	4462      	add	r2, ip
   1b38c:	e002      	b.n	1b394 <__mdiff+0x30>
   1b38e:	429f      	cmp	r7, r3
   1b390:	d300      	bcc.n	1b394 <__mdiff+0x30>
   1b392:	e070      	b.n	1b476 <__mdiff+0x112>
   1b394:	3b04      	subs	r3, #4
   1b396:	3a04      	subs	r2, #4
   1b398:	681e      	ldr	r6, [r3, #0]
   1b39a:	6811      	ldr	r1, [r2, #0]
   1b39c:	428e      	cmp	r6, r1
   1b39e:	d0f6      	beq.n	1b38e <__mdiff+0x2a>
   1b3a0:	d300      	bcc.n	1b3a4 <__mdiff+0x40>
   1b3a2:	e071      	b.n	1b488 <__mdiff+0x124>
   1b3a4:	4643      	mov	r3, r8
   1b3a6:	003e      	movs	r6, r7
   1b3a8:	46a0      	mov	r8, r4
   1b3aa:	4667      	mov	r7, ip
   1b3ac:	001c      	movs	r4, r3
   1b3ae:	2501      	movs	r5, #1
   1b3b0:	e006      	b.n	1b3c0 <__mdiff+0x5c>
   1b3b2:	2d00      	cmp	r5, #0
   1b3b4:	db6a      	blt.n	1b48c <__mdiff+0x128>
   1b3b6:	4647      	mov	r7, r8
   1b3b8:	0026      	movs	r6, r4
   1b3ba:	2500      	movs	r5, #0
   1b3bc:	3714      	adds	r7, #20
   1b3be:	3614      	adds	r6, #20
   1b3c0:	4643      	mov	r3, r8
   1b3c2:	6859      	ldr	r1, [r3, #4]
   1b3c4:	f7ff fd80 	bl	1aec8 <_Balloc>
   1b3c8:	4643      	mov	r3, r8
   1b3ca:	4681      	mov	r9, r0
   1b3cc:	60c5      	str	r5, [r0, #12]
   1b3ce:	6918      	ldr	r0, [r3, #16]
   1b3d0:	464d      	mov	r5, r9
   1b3d2:	0083      	lsls	r3, r0, #2
   1b3d4:	469c      	mov	ip, r3
   1b3d6:	6923      	ldr	r3, [r4, #16]
   1b3d8:	44bc      	add	ip, r7
   1b3da:	009b      	lsls	r3, r3, #2
   1b3dc:	4698      	mov	r8, r3
   1b3de:	2300      	movs	r3, #0
   1b3e0:	44b0      	add	r8, r6
   1b3e2:	3514      	adds	r5, #20
   1b3e4:	469a      	mov	sl, r3
   1b3e6:	e000      	b.n	1b3ea <__mdiff+0x86>
   1b3e8:	0027      	movs	r7, r4
   1b3ea:	ce04      	ldmia	r6!, {r2}
   1b3ec:	003c      	movs	r4, r7
   1b3ee:	4693      	mov	fp, r2
   1b3f0:	4659      	mov	r1, fp
   1b3f2:	cc08      	ldmia	r4!, {r3}
   1b3f4:	0409      	lsls	r1, r1, #16
   1b3f6:	041a      	lsls	r2, r3, #16
   1b3f8:	0c12      	lsrs	r2, r2, #16
   1b3fa:	4452      	add	r2, sl
   1b3fc:	0c09      	lsrs	r1, r1, #16
   1b3fe:	1a52      	subs	r2, r2, r1
   1b400:	0c19      	lsrs	r1, r3, #16
   1b402:	465b      	mov	r3, fp
   1b404:	0c1b      	lsrs	r3, r3, #16
   1b406:	1acb      	subs	r3, r1, r3
   1b408:	1411      	asrs	r1, r2, #16
   1b40a:	185b      	adds	r3, r3, r1
   1b40c:	0412      	lsls	r2, r2, #16
   1b40e:	1419      	asrs	r1, r3, #16
   1b410:	0c12      	lsrs	r2, r2, #16
   1b412:	041b      	lsls	r3, r3, #16
   1b414:	468a      	mov	sl, r1
   1b416:	4313      	orrs	r3, r2
   1b418:	1d29      	adds	r1, r5, #4
   1b41a:	602b      	str	r3, [r5, #0]
   1b41c:	000d      	movs	r5, r1
   1b41e:	45b0      	cmp	r8, r6
   1b420:	d8e2      	bhi.n	1b3e8 <__mdiff+0x84>
   1b422:	45a4      	cmp	ip, r4
   1b424:	d916      	bls.n	1b454 <__mdiff+0xf0>
   1b426:	cc08      	ldmia	r4!, {r3}
   1b428:	041a      	lsls	r2, r3, #16
   1b42a:	0c12      	lsrs	r2, r2, #16
   1b42c:	4452      	add	r2, sl
   1b42e:	1416      	asrs	r6, r2, #16
   1b430:	0c1b      	lsrs	r3, r3, #16
   1b432:	199b      	adds	r3, r3, r6
   1b434:	0412      	lsls	r2, r2, #16
   1b436:	141e      	asrs	r6, r3, #16
   1b438:	0c12      	lsrs	r2, r2, #16
   1b43a:	041b      	lsls	r3, r3, #16
   1b43c:	4313      	orrs	r3, r2
   1b43e:	46b2      	mov	sl, r6
   1b440:	c508      	stmia	r5!, {r3}
   1b442:	45a4      	cmp	ip, r4
   1b444:	d8ef      	bhi.n	1b426 <__mdiff+0xc2>
   1b446:	4662      	mov	r2, ip
   1b448:	2403      	movs	r4, #3
   1b44a:	1bd2      	subs	r2, r2, r7
   1b44c:	3a05      	subs	r2, #5
   1b44e:	43a2      	bics	r2, r4
   1b450:	3204      	adds	r2, #4
   1b452:	1889      	adds	r1, r1, r2
   1b454:	3904      	subs	r1, #4
   1b456:	2b00      	cmp	r3, #0
   1b458:	d104      	bne.n	1b464 <__mdiff+0x100>
   1b45a:	3904      	subs	r1, #4
   1b45c:	680b      	ldr	r3, [r1, #0]
   1b45e:	3801      	subs	r0, #1
   1b460:	2b00      	cmp	r3, #0
   1b462:	d0fa      	beq.n	1b45a <__mdiff+0xf6>
   1b464:	464b      	mov	r3, r9
   1b466:	6118      	str	r0, [r3, #16]
   1b468:	4648      	mov	r0, r9
   1b46a:	bc3c      	pop	{r2, r3, r4, r5}
   1b46c:	4690      	mov	r8, r2
   1b46e:	4699      	mov	r9, r3
   1b470:	46a2      	mov	sl, r4
   1b472:	46ab      	mov	fp, r5
   1b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b476:	2100      	movs	r1, #0
   1b478:	f7ff fd26 	bl	1aec8 <_Balloc>
   1b47c:	2301      	movs	r3, #1
   1b47e:	6103      	str	r3, [r0, #16]
   1b480:	2300      	movs	r3, #0
   1b482:	4681      	mov	r9, r0
   1b484:	6143      	str	r3, [r0, #20]
   1b486:	e7ef      	b.n	1b468 <__mdiff+0x104>
   1b488:	4666      	mov	r6, ip
   1b48a:	e799      	b.n	1b3c0 <__mdiff+0x5c>
   1b48c:	0027      	movs	r7, r4
   1b48e:	000e      	movs	r6, r1
   1b490:	46a0      	mov	r8, r4
   1b492:	3714      	adds	r7, #20
   1b494:	3614      	adds	r6, #20
   1b496:	000c      	movs	r4, r1
   1b498:	2501      	movs	r5, #1
   1b49a:	e791      	b.n	1b3c0 <__mdiff+0x5c>

0001b49c <__d2b>:
   1b49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b49e:	2101      	movs	r1, #1
   1b4a0:	001c      	movs	r4, r3
   1b4a2:	b083      	sub	sp, #12
   1b4a4:	9e08      	ldr	r6, [sp, #32]
   1b4a6:	0015      	movs	r5, r2
   1b4a8:	f7ff fd0e 	bl	1aec8 <_Balloc>
   1b4ac:	0323      	lsls	r3, r4, #12
   1b4ae:	0064      	lsls	r4, r4, #1
   1b4b0:	0007      	movs	r7, r0
   1b4b2:	0b1b      	lsrs	r3, r3, #12
   1b4b4:	0d64      	lsrs	r4, r4, #21
   1b4b6:	d002      	beq.n	1b4be <__d2b+0x22>
   1b4b8:	2280      	movs	r2, #128	; 0x80
   1b4ba:	0352      	lsls	r2, r2, #13
   1b4bc:	4313      	orrs	r3, r2
   1b4be:	9301      	str	r3, [sp, #4]
   1b4c0:	2d00      	cmp	r5, #0
   1b4c2:	d019      	beq.n	1b4f8 <__d2b+0x5c>
   1b4c4:	4668      	mov	r0, sp
   1b4c6:	9500      	str	r5, [sp, #0]
   1b4c8:	f7ff fd90 	bl	1afec <__lo0bits>
   1b4cc:	2800      	cmp	r0, #0
   1b4ce:	d130      	bne.n	1b532 <__d2b+0x96>
   1b4d0:	9b00      	ldr	r3, [sp, #0]
   1b4d2:	617b      	str	r3, [r7, #20]
   1b4d4:	9b01      	ldr	r3, [sp, #4]
   1b4d6:	61bb      	str	r3, [r7, #24]
   1b4d8:	1e5a      	subs	r2, r3, #1
   1b4da:	4193      	sbcs	r3, r2
   1b4dc:	1c5d      	adds	r5, r3, #1
   1b4de:	613d      	str	r5, [r7, #16]
   1b4e0:	2c00      	cmp	r4, #0
   1b4e2:	d014      	beq.n	1b50e <__d2b+0x72>
   1b4e4:	4b19      	ldr	r3, [pc, #100]	; (1b54c <__d2b+0xb0>)
   1b4e6:	469c      	mov	ip, r3
   1b4e8:	2335      	movs	r3, #53	; 0x35
   1b4ea:	4464      	add	r4, ip
   1b4ec:	1824      	adds	r4, r4, r0
   1b4ee:	1a18      	subs	r0, r3, r0
   1b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b4f2:	6034      	str	r4, [r6, #0]
   1b4f4:	6018      	str	r0, [r3, #0]
   1b4f6:	e019      	b.n	1b52c <__d2b+0x90>
   1b4f8:	a801      	add	r0, sp, #4
   1b4fa:	f7ff fd77 	bl	1afec <__lo0bits>
   1b4fe:	9b01      	ldr	r3, [sp, #4]
   1b500:	3020      	adds	r0, #32
   1b502:	617b      	str	r3, [r7, #20]
   1b504:	2301      	movs	r3, #1
   1b506:	2501      	movs	r5, #1
   1b508:	613b      	str	r3, [r7, #16]
   1b50a:	2c00      	cmp	r4, #0
   1b50c:	d1ea      	bne.n	1b4e4 <__d2b+0x48>
   1b50e:	4b10      	ldr	r3, [pc, #64]	; (1b550 <__d2b+0xb4>)
   1b510:	469c      	mov	ip, r3
   1b512:	4b10      	ldr	r3, [pc, #64]	; (1b554 <__d2b+0xb8>)
   1b514:	4460      	add	r0, ip
   1b516:	18eb      	adds	r3, r5, r3
   1b518:	009b      	lsls	r3, r3, #2
   1b51a:	18fb      	adds	r3, r7, r3
   1b51c:	6030      	str	r0, [r6, #0]
   1b51e:	6958      	ldr	r0, [r3, #20]
   1b520:	f7ff fd4a 	bl	1afb8 <__hi0bits>
   1b524:	016b      	lsls	r3, r5, #5
   1b526:	1a18      	subs	r0, r3, r0
   1b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b52a:	6018      	str	r0, [r3, #0]
   1b52c:	0038      	movs	r0, r7
   1b52e:	b003      	add	sp, #12
   1b530:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b532:	9b01      	ldr	r3, [sp, #4]
   1b534:	2220      	movs	r2, #32
   1b536:	0019      	movs	r1, r3
   1b538:	1a12      	subs	r2, r2, r0
   1b53a:	4091      	lsls	r1, r2
   1b53c:	000a      	movs	r2, r1
   1b53e:	40c3      	lsrs	r3, r0
   1b540:	9900      	ldr	r1, [sp, #0]
   1b542:	9301      	str	r3, [sp, #4]
   1b544:	430a      	orrs	r2, r1
   1b546:	617a      	str	r2, [r7, #20]
   1b548:	e7c5      	b.n	1b4d6 <__d2b+0x3a>
   1b54a:	46c0      	nop			; (mov r8, r8)
   1b54c:	fffffbcd 	.word	0xfffffbcd
   1b550:	fffffbce 	.word	0xfffffbce
   1b554:	3fffffff 	.word	0x3fffffff

0001b558 <_realloc_r>:
   1b558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b55a:	464e      	mov	r6, r9
   1b55c:	4645      	mov	r5, r8
   1b55e:	46de      	mov	lr, fp
   1b560:	4657      	mov	r7, sl
   1b562:	b5e0      	push	{r5, r6, r7, lr}
   1b564:	b085      	sub	sp, #20
   1b566:	9001      	str	r0, [sp, #4]
   1b568:	000e      	movs	r6, r1
   1b56a:	0015      	movs	r5, r2
   1b56c:	2900      	cmp	r1, #0
   1b56e:	d100      	bne.n	1b572 <_realloc_r+0x1a>
   1b570:	e09e      	b.n	1b6b0 <_realloc_r+0x158>
   1b572:	0037      	movs	r7, r6
   1b574:	9801      	ldr	r0, [sp, #4]
   1b576:	3f08      	subs	r7, #8
   1b578:	f7ff fc96 	bl	1aea8 <__malloc_lock>
   1b57c:	687a      	ldr	r2, [r7, #4]
   1b57e:	2303      	movs	r3, #3
   1b580:	0014      	movs	r4, r2
   1b582:	439c      	bics	r4, r3
   1b584:	002b      	movs	r3, r5
   1b586:	330b      	adds	r3, #11
   1b588:	46b9      	mov	r9, r7
   1b58a:	2b16      	cmp	r3, #22
   1b58c:	d847      	bhi.n	1b61e <_realloc_r+0xc6>
   1b58e:	2110      	movs	r1, #16
   1b590:	2310      	movs	r3, #16
   1b592:	4688      	mov	r8, r1
   1b594:	4545      	cmp	r5, r8
   1b596:	d846      	bhi.n	1b626 <_realloc_r+0xce>
   1b598:	429c      	cmp	r4, r3
   1b59a:	da49      	bge.n	1b630 <_realloc_r+0xd8>
   1b59c:	49cc      	ldr	r1, [pc, #816]	; (1b8d0 <_realloc_r+0x378>)
   1b59e:	1938      	adds	r0, r7, r4
   1b5a0:	468b      	mov	fp, r1
   1b5a2:	6889      	ldr	r1, [r1, #8]
   1b5a4:	9002      	str	r0, [sp, #8]
   1b5a6:	4288      	cmp	r0, r1
   1b5a8:	d100      	bne.n	1b5ac <_realloc_r+0x54>
   1b5aa:	e0c2      	b.n	1b732 <_realloc_r+0x1da>
   1b5ac:	2101      	movs	r1, #1
   1b5ae:	468a      	mov	sl, r1
   1b5b0:	6840      	ldr	r0, [r0, #4]
   1b5b2:	0001      	movs	r1, r0
   1b5b4:	9003      	str	r0, [sp, #12]
   1b5b6:	4650      	mov	r0, sl
   1b5b8:	4381      	bics	r1, r0
   1b5ba:	468c      	mov	ip, r1
   1b5bc:	9902      	ldr	r1, [sp, #8]
   1b5be:	468b      	mov	fp, r1
   1b5c0:	44dc      	add	ip, fp
   1b5c2:	4661      	mov	r1, ip
   1b5c4:	6849      	ldr	r1, [r1, #4]
   1b5c6:	4201      	tst	r1, r0
   1b5c8:	d04d      	beq.n	1b666 <_realloc_r+0x10e>
   1b5ca:	4210      	tst	r0, r2
   1b5cc:	d100      	bne.n	1b5d0 <_realloc_r+0x78>
   1b5ce:	e0a2      	b.n	1b716 <_realloc_r+0x1be>
   1b5d0:	0029      	movs	r1, r5
   1b5d2:	9801      	ldr	r0, [sp, #4]
   1b5d4:	f7ff f90e 	bl	1a7f4 <_malloc_r>
   1b5d8:	1e05      	subs	r5, r0, #0
   1b5da:	d039      	beq.n	1b650 <_realloc_r+0xf8>
   1b5dc:	2301      	movs	r3, #1
   1b5de:	0002      	movs	r2, r0
   1b5e0:	6879      	ldr	r1, [r7, #4]
   1b5e2:	3a08      	subs	r2, #8
   1b5e4:	4399      	bics	r1, r3
   1b5e6:	187f      	adds	r7, r7, r1
   1b5e8:	42ba      	cmp	r2, r7
   1b5ea:	d100      	bne.n	1b5ee <_realloc_r+0x96>
   1b5ec:	e12e      	b.n	1b84c <_realloc_r+0x2f4>
   1b5ee:	1f22      	subs	r2, r4, #4
   1b5f0:	2a24      	cmp	r2, #36	; 0x24
   1b5f2:	d900      	bls.n	1b5f6 <_realloc_r+0x9e>
   1b5f4:	e114      	b.n	1b820 <_realloc_r+0x2c8>
   1b5f6:	2a13      	cmp	r2, #19
   1b5f8:	d900      	bls.n	1b5fc <_realloc_r+0xa4>
   1b5fa:	e0e8      	b.n	1b7ce <_realloc_r+0x276>
   1b5fc:	0003      	movs	r3, r0
   1b5fe:	0032      	movs	r2, r6
   1b600:	6811      	ldr	r1, [r2, #0]
   1b602:	6019      	str	r1, [r3, #0]
   1b604:	6851      	ldr	r1, [r2, #4]
   1b606:	6059      	str	r1, [r3, #4]
   1b608:	6892      	ldr	r2, [r2, #8]
   1b60a:	609a      	str	r2, [r3, #8]
   1b60c:	9c01      	ldr	r4, [sp, #4]
   1b60e:	0031      	movs	r1, r6
   1b610:	0020      	movs	r0, r4
   1b612:	f7fe fdbd 	bl	1a190 <_free_r>
   1b616:	0020      	movs	r0, r4
   1b618:	f7ff fc4e 	bl	1aeb8 <__malloc_unlock>
   1b61c:	e01b      	b.n	1b656 <_realloc_r+0xfe>
   1b61e:	2107      	movs	r1, #7
   1b620:	438b      	bics	r3, r1
   1b622:	4698      	mov	r8, r3
   1b624:	d5b6      	bpl.n	1b594 <_realloc_r+0x3c>
   1b626:	230c      	movs	r3, #12
   1b628:	9a01      	ldr	r2, [sp, #4]
   1b62a:	2500      	movs	r5, #0
   1b62c:	6013      	str	r3, [r2, #0]
   1b62e:	e012      	b.n	1b656 <_realloc_r+0xfe>
   1b630:	0035      	movs	r5, r6
   1b632:	4643      	mov	r3, r8
   1b634:	1ae3      	subs	r3, r4, r3
   1b636:	2b0f      	cmp	r3, #15
   1b638:	d825      	bhi.n	1b686 <_realloc_r+0x12e>
   1b63a:	464b      	mov	r3, r9
   1b63c:	2201      	movs	r2, #1
   1b63e:	4649      	mov	r1, r9
   1b640:	685b      	ldr	r3, [r3, #4]
   1b642:	4013      	ands	r3, r2
   1b644:	4323      	orrs	r3, r4
   1b646:	604b      	str	r3, [r1, #4]
   1b648:	444c      	add	r4, r9
   1b64a:	6863      	ldr	r3, [r4, #4]
   1b64c:	431a      	orrs	r2, r3
   1b64e:	6062      	str	r2, [r4, #4]
   1b650:	9801      	ldr	r0, [sp, #4]
   1b652:	f7ff fc31 	bl	1aeb8 <__malloc_unlock>
   1b656:	0028      	movs	r0, r5
   1b658:	b005      	add	sp, #20
   1b65a:	bc3c      	pop	{r2, r3, r4, r5}
   1b65c:	4690      	mov	r8, r2
   1b65e:	4699      	mov	r9, r3
   1b660:	46a2      	mov	sl, r4
   1b662:	46ab      	mov	fp, r5
   1b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b666:	2103      	movs	r1, #3
   1b668:	9803      	ldr	r0, [sp, #12]
   1b66a:	468c      	mov	ip, r1
   1b66c:	4388      	bics	r0, r1
   1b66e:	1821      	adds	r1, r4, r0
   1b670:	468b      	mov	fp, r1
   1b672:	4299      	cmp	r1, r3
   1b674:	db21      	blt.n	1b6ba <_realloc_r+0x162>
   1b676:	9a02      	ldr	r2, [sp, #8]
   1b678:	0035      	movs	r5, r6
   1b67a:	68d3      	ldr	r3, [r2, #12]
   1b67c:	6892      	ldr	r2, [r2, #8]
   1b67e:	465c      	mov	r4, fp
   1b680:	60d3      	str	r3, [r2, #12]
   1b682:	609a      	str	r2, [r3, #8]
   1b684:	e7d5      	b.n	1b632 <_realloc_r+0xda>
   1b686:	464a      	mov	r2, r9
   1b688:	2001      	movs	r0, #1
   1b68a:	4646      	mov	r6, r8
   1b68c:	6852      	ldr	r2, [r2, #4]
   1b68e:	4649      	mov	r1, r9
   1b690:	4002      	ands	r2, r0
   1b692:	4332      	orrs	r2, r6
   1b694:	464e      	mov	r6, r9
   1b696:	4441      	add	r1, r8
   1b698:	4303      	orrs	r3, r0
   1b69a:	6072      	str	r2, [r6, #4]
   1b69c:	444c      	add	r4, r9
   1b69e:	604b      	str	r3, [r1, #4]
   1b6a0:	6863      	ldr	r3, [r4, #4]
   1b6a2:	3108      	adds	r1, #8
   1b6a4:	4318      	orrs	r0, r3
   1b6a6:	6060      	str	r0, [r4, #4]
   1b6a8:	9801      	ldr	r0, [sp, #4]
   1b6aa:	f7fe fd71 	bl	1a190 <_free_r>
   1b6ae:	e7cf      	b.n	1b650 <_realloc_r+0xf8>
   1b6b0:	0011      	movs	r1, r2
   1b6b2:	f7ff f89f 	bl	1a7f4 <_malloc_r>
   1b6b6:	0005      	movs	r5, r0
   1b6b8:	e7cd      	b.n	1b656 <_realloc_r+0xfe>
   1b6ba:	4651      	mov	r1, sl
   1b6bc:	4211      	tst	r1, r2
   1b6be:	d000      	beq.n	1b6c2 <_realloc_r+0x16a>
   1b6c0:	e786      	b.n	1b5d0 <_realloc_r+0x78>
   1b6c2:	4661      	mov	r1, ip
   1b6c4:	683a      	ldr	r2, [r7, #0]
   1b6c6:	1aba      	subs	r2, r7, r2
   1b6c8:	4692      	mov	sl, r2
   1b6ca:	6852      	ldr	r2, [r2, #4]
   1b6cc:	438a      	bics	r2, r1
   1b6ce:	1880      	adds	r0, r0, r2
   1b6d0:	4683      	mov	fp, r0
   1b6d2:	44a3      	add	fp, r4
   1b6d4:	459b      	cmp	fp, r3
   1b6d6:	db26      	blt.n	1b726 <_realloc_r+0x1ce>
   1b6d8:	9a02      	ldr	r2, [sp, #8]
   1b6da:	68d3      	ldr	r3, [r2, #12]
   1b6dc:	6892      	ldr	r2, [r2, #8]
   1b6de:	60d3      	str	r3, [r2, #12]
   1b6e0:	609a      	str	r2, [r3, #8]
   1b6e2:	4653      	mov	r3, sl
   1b6e4:	4652      	mov	r2, sl
   1b6e6:	4655      	mov	r5, sl
   1b6e8:	6892      	ldr	r2, [r2, #8]
   1b6ea:	68db      	ldr	r3, [r3, #12]
   1b6ec:	3508      	adds	r5, #8
   1b6ee:	60d3      	str	r3, [r2, #12]
   1b6f0:	609a      	str	r2, [r3, #8]
   1b6f2:	1f22      	subs	r2, r4, #4
   1b6f4:	2a24      	cmp	r2, #36	; 0x24
   1b6f6:	d900      	bls.n	1b6fa <_realloc_r+0x1a2>
   1b6f8:	e096      	b.n	1b828 <_realloc_r+0x2d0>
   1b6fa:	2a13      	cmp	r2, #19
   1b6fc:	d972      	bls.n	1b7e4 <_realloc_r+0x28c>
   1b6fe:	4653      	mov	r3, sl
   1b700:	6831      	ldr	r1, [r6, #0]
   1b702:	6099      	str	r1, [r3, #8]
   1b704:	6871      	ldr	r1, [r6, #4]
   1b706:	60d9      	str	r1, [r3, #12]
   1b708:	2a1b      	cmp	r2, #27
   1b70a:	d900      	bls.n	1b70e <_realloc_r+0x1b6>
   1b70c:	e0a4      	b.n	1b858 <_realloc_r+0x300>
   1b70e:	0032      	movs	r2, r6
   1b710:	3310      	adds	r3, #16
   1b712:	3208      	adds	r2, #8
   1b714:	e068      	b.n	1b7e8 <_realloc_r+0x290>
   1b716:	683a      	ldr	r2, [r7, #0]
   1b718:	1aba      	subs	r2, r7, r2
   1b71a:	4692      	mov	sl, r2
   1b71c:	4651      	mov	r1, sl
   1b71e:	2203      	movs	r2, #3
   1b720:	6849      	ldr	r1, [r1, #4]
   1b722:	4391      	bics	r1, r2
   1b724:	000a      	movs	r2, r1
   1b726:	4693      	mov	fp, r2
   1b728:	44a3      	add	fp, r4
   1b72a:	459b      	cmp	fp, r3
   1b72c:	da00      	bge.n	1b730 <_realloc_r+0x1d8>
   1b72e:	e74f      	b.n	1b5d0 <_realloc_r+0x78>
   1b730:	e7d7      	b.n	1b6e2 <_realloc_r+0x18a>
   1b732:	2003      	movs	r0, #3
   1b734:	9902      	ldr	r1, [sp, #8]
   1b736:	4684      	mov	ip, r0
   1b738:	6849      	ldr	r1, [r1, #4]
   1b73a:	4381      	bics	r1, r0
   1b73c:	4640      	mov	r0, r8
   1b73e:	1909      	adds	r1, r1, r4
   1b740:	3010      	adds	r0, #16
   1b742:	9002      	str	r0, [sp, #8]
   1b744:	4281      	cmp	r1, r0
   1b746:	da58      	bge.n	1b7fa <_realloc_r+0x2a2>
   1b748:	07d2      	lsls	r2, r2, #31
   1b74a:	d500      	bpl.n	1b74e <_realloc_r+0x1f6>
   1b74c:	e740      	b.n	1b5d0 <_realloc_r+0x78>
   1b74e:	4660      	mov	r0, ip
   1b750:	683a      	ldr	r2, [r7, #0]
   1b752:	1aba      	subs	r2, r7, r2
   1b754:	4692      	mov	sl, r2
   1b756:	6852      	ldr	r2, [r2, #4]
   1b758:	4382      	bics	r2, r0
   1b75a:	9802      	ldr	r0, [sp, #8]
   1b75c:	1851      	adds	r1, r2, r1
   1b75e:	9103      	str	r1, [sp, #12]
   1b760:	4288      	cmp	r0, r1
   1b762:	dce0      	bgt.n	1b726 <_realloc_r+0x1ce>
   1b764:	4653      	mov	r3, sl
   1b766:	4652      	mov	r2, sl
   1b768:	4655      	mov	r5, sl
   1b76a:	6892      	ldr	r2, [r2, #8]
   1b76c:	68db      	ldr	r3, [r3, #12]
   1b76e:	3508      	adds	r5, #8
   1b770:	60d3      	str	r3, [r2, #12]
   1b772:	609a      	str	r2, [r3, #8]
   1b774:	1f22      	subs	r2, r4, #4
   1b776:	2a24      	cmp	r2, #36	; 0x24
   1b778:	d900      	bls.n	1b77c <_realloc_r+0x224>
   1b77a:	e08e      	b.n	1b89a <_realloc_r+0x342>
   1b77c:	2a13      	cmp	r2, #19
   1b77e:	d800      	bhi.n	1b782 <_realloc_r+0x22a>
   1b780:	e088      	b.n	1b894 <_realloc_r+0x33c>
   1b782:	4653      	mov	r3, sl
   1b784:	6831      	ldr	r1, [r6, #0]
   1b786:	6099      	str	r1, [r3, #8]
   1b788:	6871      	ldr	r1, [r6, #4]
   1b78a:	60d9      	str	r1, [r3, #12]
   1b78c:	2a1b      	cmp	r2, #27
   1b78e:	d900      	bls.n	1b792 <_realloc_r+0x23a>
   1b790:	e088      	b.n	1b8a4 <_realloc_r+0x34c>
   1b792:	0032      	movs	r2, r6
   1b794:	3310      	adds	r3, #16
   1b796:	3208      	adds	r2, #8
   1b798:	6811      	ldr	r1, [r2, #0]
   1b79a:	6019      	str	r1, [r3, #0]
   1b79c:	6851      	ldr	r1, [r2, #4]
   1b79e:	6059      	str	r1, [r3, #4]
   1b7a0:	6892      	ldr	r2, [r2, #8]
   1b7a2:	609a      	str	r2, [r3, #8]
   1b7a4:	4651      	mov	r1, sl
   1b7a6:	465b      	mov	r3, fp
   1b7a8:	4642      	mov	r2, r8
   1b7aa:	4441      	add	r1, r8
   1b7ac:	6099      	str	r1, [r3, #8]
   1b7ae:	9b03      	ldr	r3, [sp, #12]
   1b7b0:	9801      	ldr	r0, [sp, #4]
   1b7b2:	1a9a      	subs	r2, r3, r2
   1b7b4:	2301      	movs	r3, #1
   1b7b6:	431a      	orrs	r2, r3
   1b7b8:	604a      	str	r2, [r1, #4]
   1b7ba:	4652      	mov	r2, sl
   1b7bc:	6852      	ldr	r2, [r2, #4]
   1b7be:	4013      	ands	r3, r2
   1b7c0:	4642      	mov	r2, r8
   1b7c2:	4313      	orrs	r3, r2
   1b7c4:	4652      	mov	r2, sl
   1b7c6:	6053      	str	r3, [r2, #4]
   1b7c8:	f7ff fb76 	bl	1aeb8 <__malloc_unlock>
   1b7cc:	e743      	b.n	1b656 <_realloc_r+0xfe>
   1b7ce:	6833      	ldr	r3, [r6, #0]
   1b7d0:	6003      	str	r3, [r0, #0]
   1b7d2:	6873      	ldr	r3, [r6, #4]
   1b7d4:	6043      	str	r3, [r0, #4]
   1b7d6:	2a1b      	cmp	r2, #27
   1b7d8:	d82d      	bhi.n	1b836 <_realloc_r+0x2de>
   1b7da:	0003      	movs	r3, r0
   1b7dc:	0032      	movs	r2, r6
   1b7de:	3308      	adds	r3, #8
   1b7e0:	3208      	adds	r2, #8
   1b7e2:	e70d      	b.n	1b600 <_realloc_r+0xa8>
   1b7e4:	002b      	movs	r3, r5
   1b7e6:	0032      	movs	r2, r6
   1b7e8:	6811      	ldr	r1, [r2, #0]
   1b7ea:	465c      	mov	r4, fp
   1b7ec:	6019      	str	r1, [r3, #0]
   1b7ee:	6851      	ldr	r1, [r2, #4]
   1b7f0:	46d1      	mov	r9, sl
   1b7f2:	6059      	str	r1, [r3, #4]
   1b7f4:	6892      	ldr	r2, [r2, #8]
   1b7f6:	609a      	str	r2, [r3, #8]
   1b7f8:	e71b      	b.n	1b632 <_realloc_r+0xda>
   1b7fa:	4643      	mov	r3, r8
   1b7fc:	18fa      	adds	r2, r7, r3
   1b7fe:	465b      	mov	r3, fp
   1b800:	609a      	str	r2, [r3, #8]
   1b802:	4643      	mov	r3, r8
   1b804:	1ac9      	subs	r1, r1, r3
   1b806:	2301      	movs	r3, #1
   1b808:	4319      	orrs	r1, r3
   1b80a:	6051      	str	r1, [r2, #4]
   1b80c:	687a      	ldr	r2, [r7, #4]
   1b80e:	9801      	ldr	r0, [sp, #4]
   1b810:	4013      	ands	r3, r2
   1b812:	4642      	mov	r2, r8
   1b814:	4313      	orrs	r3, r2
   1b816:	607b      	str	r3, [r7, #4]
   1b818:	f7ff fb4e 	bl	1aeb8 <__malloc_unlock>
   1b81c:	0035      	movs	r5, r6
   1b81e:	e71a      	b.n	1b656 <_realloc_r+0xfe>
   1b820:	0031      	movs	r1, r6
   1b822:	f7ff faf1 	bl	1ae08 <memmove>
   1b826:	e6f1      	b.n	1b60c <_realloc_r+0xb4>
   1b828:	0031      	movs	r1, r6
   1b82a:	0028      	movs	r0, r5
   1b82c:	f7ff faec 	bl	1ae08 <memmove>
   1b830:	465c      	mov	r4, fp
   1b832:	46d1      	mov	r9, sl
   1b834:	e6fd      	b.n	1b632 <_realloc_r+0xda>
   1b836:	68b3      	ldr	r3, [r6, #8]
   1b838:	6083      	str	r3, [r0, #8]
   1b83a:	68f3      	ldr	r3, [r6, #12]
   1b83c:	60c3      	str	r3, [r0, #12]
   1b83e:	2a24      	cmp	r2, #36	; 0x24
   1b840:	d015      	beq.n	1b86e <_realloc_r+0x316>
   1b842:	0003      	movs	r3, r0
   1b844:	0032      	movs	r2, r6
   1b846:	3310      	adds	r3, #16
   1b848:	3210      	adds	r2, #16
   1b84a:	e6d9      	b.n	1b600 <_realloc_r+0xa8>
   1b84c:	6853      	ldr	r3, [r2, #4]
   1b84e:	2203      	movs	r2, #3
   1b850:	4393      	bics	r3, r2
   1b852:	18e4      	adds	r4, r4, r3
   1b854:	0035      	movs	r5, r6
   1b856:	e6ec      	b.n	1b632 <_realloc_r+0xda>
   1b858:	4653      	mov	r3, sl
   1b85a:	68b1      	ldr	r1, [r6, #8]
   1b85c:	6119      	str	r1, [r3, #16]
   1b85e:	68f1      	ldr	r1, [r6, #12]
   1b860:	6159      	str	r1, [r3, #20]
   1b862:	2a24      	cmp	r2, #36	; 0x24
   1b864:	d00c      	beq.n	1b880 <_realloc_r+0x328>
   1b866:	0032      	movs	r2, r6
   1b868:	3318      	adds	r3, #24
   1b86a:	3210      	adds	r2, #16
   1b86c:	e7bc      	b.n	1b7e8 <_realloc_r+0x290>
   1b86e:	6933      	ldr	r3, [r6, #16]
   1b870:	0032      	movs	r2, r6
   1b872:	6103      	str	r3, [r0, #16]
   1b874:	0003      	movs	r3, r0
   1b876:	6971      	ldr	r1, [r6, #20]
   1b878:	3318      	adds	r3, #24
   1b87a:	3218      	adds	r2, #24
   1b87c:	6141      	str	r1, [r0, #20]
   1b87e:	e6bf      	b.n	1b600 <_realloc_r+0xa8>
   1b880:	4653      	mov	r3, sl
   1b882:	6932      	ldr	r2, [r6, #16]
   1b884:	4651      	mov	r1, sl
   1b886:	619a      	str	r2, [r3, #24]
   1b888:	0032      	movs	r2, r6
   1b88a:	6970      	ldr	r0, [r6, #20]
   1b88c:	3320      	adds	r3, #32
   1b88e:	3218      	adds	r2, #24
   1b890:	61c8      	str	r0, [r1, #28]
   1b892:	e7a9      	b.n	1b7e8 <_realloc_r+0x290>
   1b894:	002b      	movs	r3, r5
   1b896:	0032      	movs	r2, r6
   1b898:	e77e      	b.n	1b798 <_realloc_r+0x240>
   1b89a:	0031      	movs	r1, r6
   1b89c:	0028      	movs	r0, r5
   1b89e:	f7ff fab3 	bl	1ae08 <memmove>
   1b8a2:	e77f      	b.n	1b7a4 <_realloc_r+0x24c>
   1b8a4:	4653      	mov	r3, sl
   1b8a6:	68b1      	ldr	r1, [r6, #8]
   1b8a8:	6119      	str	r1, [r3, #16]
   1b8aa:	68f1      	ldr	r1, [r6, #12]
   1b8ac:	6159      	str	r1, [r3, #20]
   1b8ae:	2a24      	cmp	r2, #36	; 0x24
   1b8b0:	d003      	beq.n	1b8ba <_realloc_r+0x362>
   1b8b2:	0032      	movs	r2, r6
   1b8b4:	3318      	adds	r3, #24
   1b8b6:	3210      	adds	r2, #16
   1b8b8:	e76e      	b.n	1b798 <_realloc_r+0x240>
   1b8ba:	4653      	mov	r3, sl
   1b8bc:	6932      	ldr	r2, [r6, #16]
   1b8be:	4651      	mov	r1, sl
   1b8c0:	619a      	str	r2, [r3, #24]
   1b8c2:	0032      	movs	r2, r6
   1b8c4:	6970      	ldr	r0, [r6, #20]
   1b8c6:	3320      	adds	r3, #32
   1b8c8:	3218      	adds	r2, #24
   1b8ca:	61c8      	str	r0, [r1, #28]
   1b8cc:	e764      	b.n	1b798 <_realloc_r+0x240>
   1b8ce:	46c0      	nop			; (mov r8, r8)
   1b8d0:	20000670 	.word	0x20000670

0001b8d4 <_sbrk_r>:
   1b8d4:	2300      	movs	r3, #0
   1b8d6:	b570      	push	{r4, r5, r6, lr}
   1b8d8:	4c06      	ldr	r4, [pc, #24]	; (1b8f4 <_sbrk_r+0x20>)
   1b8da:	0005      	movs	r5, r0
   1b8dc:	0008      	movs	r0, r1
   1b8de:	6023      	str	r3, [r4, #0]
   1b8e0:	f7e7 ffb4 	bl	384c <_sbrk>
   1b8e4:	1c43      	adds	r3, r0, #1
   1b8e6:	d000      	beq.n	1b8ea <_sbrk_r+0x16>
   1b8e8:	bd70      	pop	{r4, r5, r6, pc}
   1b8ea:	6823      	ldr	r3, [r4, #0]
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	d0fb      	beq.n	1b8e8 <_sbrk_r+0x14>
   1b8f0:	602b      	str	r3, [r5, #0]
   1b8f2:	e7f9      	b.n	1b8e8 <_sbrk_r+0x14>
   1b8f4:	20002064 	.word	0x20002064

0001b8f8 <__sread>:
   1b8f8:	b570      	push	{r4, r5, r6, lr}
   1b8fa:	000c      	movs	r4, r1
   1b8fc:	250e      	movs	r5, #14
   1b8fe:	5f49      	ldrsh	r1, [r1, r5]
   1b900:	f000 fb18 	bl	1bf34 <_read_r>
   1b904:	2800      	cmp	r0, #0
   1b906:	db03      	blt.n	1b910 <__sread+0x18>
   1b908:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b90a:	181b      	adds	r3, r3, r0
   1b90c:	6523      	str	r3, [r4, #80]	; 0x50
   1b90e:	bd70      	pop	{r4, r5, r6, pc}
   1b910:	89a3      	ldrh	r3, [r4, #12]
   1b912:	4a02      	ldr	r2, [pc, #8]	; (1b91c <__sread+0x24>)
   1b914:	4013      	ands	r3, r2
   1b916:	81a3      	strh	r3, [r4, #12]
   1b918:	e7f9      	b.n	1b90e <__sread+0x16>
   1b91a:	46c0      	nop			; (mov r8, r8)
   1b91c:	ffffefff 	.word	0xffffefff

0001b920 <__swrite>:
   1b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b922:	0016      	movs	r6, r2
   1b924:	001f      	movs	r7, r3
   1b926:	220c      	movs	r2, #12
   1b928:	5e8b      	ldrsh	r3, [r1, r2]
   1b92a:	0005      	movs	r5, r0
   1b92c:	000c      	movs	r4, r1
   1b92e:	05da      	lsls	r2, r3, #23
   1b930:	d507      	bpl.n	1b942 <__swrite+0x22>
   1b932:	230e      	movs	r3, #14
   1b934:	5ec9      	ldrsh	r1, [r1, r3]
   1b936:	2200      	movs	r2, #0
   1b938:	2302      	movs	r3, #2
   1b93a:	f000 fae7 	bl	1bf0c <_lseek_r>
   1b93e:	220c      	movs	r2, #12
   1b940:	5ea3      	ldrsh	r3, [r4, r2]
   1b942:	4a05      	ldr	r2, [pc, #20]	; (1b958 <__swrite+0x38>)
   1b944:	0028      	movs	r0, r5
   1b946:	4013      	ands	r3, r2
   1b948:	81a3      	strh	r3, [r4, #12]
   1b94a:	0032      	movs	r2, r6
   1b94c:	230e      	movs	r3, #14
   1b94e:	5ee1      	ldrsh	r1, [r4, r3]
   1b950:	003b      	movs	r3, r7
   1b952:	f000 f909 	bl	1bb68 <_write_r>
   1b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b958:	ffffefff 	.word	0xffffefff

0001b95c <__sseek>:
   1b95c:	b570      	push	{r4, r5, r6, lr}
   1b95e:	000c      	movs	r4, r1
   1b960:	250e      	movs	r5, #14
   1b962:	5f49      	ldrsh	r1, [r1, r5]
   1b964:	f000 fad2 	bl	1bf0c <_lseek_r>
   1b968:	1c43      	adds	r3, r0, #1
   1b96a:	d006      	beq.n	1b97a <__sseek+0x1e>
   1b96c:	2380      	movs	r3, #128	; 0x80
   1b96e:	89a2      	ldrh	r2, [r4, #12]
   1b970:	015b      	lsls	r3, r3, #5
   1b972:	4313      	orrs	r3, r2
   1b974:	81a3      	strh	r3, [r4, #12]
   1b976:	6520      	str	r0, [r4, #80]	; 0x50
   1b978:	bd70      	pop	{r4, r5, r6, pc}
   1b97a:	89a3      	ldrh	r3, [r4, #12]
   1b97c:	4a01      	ldr	r2, [pc, #4]	; (1b984 <__sseek+0x28>)
   1b97e:	4013      	ands	r3, r2
   1b980:	81a3      	strh	r3, [r4, #12]
   1b982:	e7f9      	b.n	1b978 <__sseek+0x1c>
   1b984:	ffffefff 	.word	0xffffefff

0001b988 <__sclose>:
   1b988:	b510      	push	{r4, lr}
   1b98a:	230e      	movs	r3, #14
   1b98c:	5ec9      	ldrsh	r1, [r1, r3]
   1b98e:	f000 f9a5 	bl	1bcdc <_close_r>
   1b992:	bd10      	pop	{r4, pc}

0001b994 <__ssprint_r>:
   1b994:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b996:	4657      	mov	r7, sl
   1b998:	464e      	mov	r6, r9
   1b99a:	46de      	mov	lr, fp
   1b99c:	4645      	mov	r5, r8
   1b99e:	b5e0      	push	{r5, r6, r7, lr}
   1b9a0:	6893      	ldr	r3, [r2, #8]
   1b9a2:	b083      	sub	sp, #12
   1b9a4:	9001      	str	r0, [sp, #4]
   1b9a6:	000e      	movs	r6, r1
   1b9a8:	4692      	mov	sl, r2
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	d070      	beq.n	1ba90 <__ssprint_r+0xfc>
   1b9ae:	688d      	ldr	r5, [r1, #8]
   1b9b0:	6813      	ldr	r3, [r2, #0]
   1b9b2:	002c      	movs	r4, r5
   1b9b4:	6808      	ldr	r0, [r1, #0]
   1b9b6:	001d      	movs	r5, r3
   1b9b8:	e046      	b.n	1ba48 <__ssprint_r+0xb4>
   1b9ba:	2290      	movs	r2, #144	; 0x90
   1b9bc:	89b3      	ldrh	r3, [r6, #12]
   1b9be:	00d2      	lsls	r2, r2, #3
   1b9c0:	4213      	tst	r3, r2
   1b9c2:	d030      	beq.n	1ba26 <__ssprint_r+0x92>
   1b9c4:	6931      	ldr	r1, [r6, #16]
   1b9c6:	1a42      	subs	r2, r0, r1
   1b9c8:	4693      	mov	fp, r2
   1b9ca:	6970      	ldr	r0, [r6, #20]
   1b9cc:	0042      	lsls	r2, r0, #1
   1b9ce:	1812      	adds	r2, r2, r0
   1b9d0:	0fd0      	lsrs	r0, r2, #31
   1b9d2:	1882      	adds	r2, r0, r2
   1b9d4:	1052      	asrs	r2, r2, #1
   1b9d6:	4690      	mov	r8, r2
   1b9d8:	465a      	mov	r2, fp
   1b9da:	1c50      	adds	r0, r2, #1
   1b9dc:	19c0      	adds	r0, r0, r7
   1b9de:	4642      	mov	r2, r8
   1b9e0:	4540      	cmp	r0, r8
   1b9e2:	d901      	bls.n	1b9e8 <__ssprint_r+0x54>
   1b9e4:	4680      	mov	r8, r0
   1b9e6:	0002      	movs	r2, r0
   1b9e8:	2080      	movs	r0, #128	; 0x80
   1b9ea:	00c0      	lsls	r0, r0, #3
   1b9ec:	4203      	tst	r3, r0
   1b9ee:	d038      	beq.n	1ba62 <__ssprint_r+0xce>
   1b9f0:	0011      	movs	r1, r2
   1b9f2:	9801      	ldr	r0, [sp, #4]
   1b9f4:	f7fe fefe 	bl	1a7f4 <_malloc_r>
   1b9f8:	1e04      	subs	r4, r0, #0
   1b9fa:	d054      	beq.n	1baa6 <__ssprint_r+0x112>
   1b9fc:	465a      	mov	r2, fp
   1b9fe:	6931      	ldr	r1, [r6, #16]
   1ba00:	f7f9 ff62 	bl	158c8 <memcpy>
   1ba04:	89b3      	ldrh	r3, [r6, #12]
   1ba06:	4a2a      	ldr	r2, [pc, #168]	; (1bab0 <__ssprint_r+0x11c>)
   1ba08:	4013      	ands	r3, r2
   1ba0a:	2280      	movs	r2, #128	; 0x80
   1ba0c:	4313      	orrs	r3, r2
   1ba0e:	81b3      	strh	r3, [r6, #12]
   1ba10:	4643      	mov	r3, r8
   1ba12:	0020      	movs	r0, r4
   1ba14:	465a      	mov	r2, fp
   1ba16:	6134      	str	r4, [r6, #16]
   1ba18:	46b8      	mov	r8, r7
   1ba1a:	003c      	movs	r4, r7
   1ba1c:	4458      	add	r0, fp
   1ba1e:	6173      	str	r3, [r6, #20]
   1ba20:	1a9b      	subs	r3, r3, r2
   1ba22:	6030      	str	r0, [r6, #0]
   1ba24:	60b3      	str	r3, [r6, #8]
   1ba26:	4642      	mov	r2, r8
   1ba28:	4649      	mov	r1, r9
   1ba2a:	f7ff f9ed 	bl	1ae08 <memmove>
   1ba2e:	68b3      	ldr	r3, [r6, #8]
   1ba30:	1b1c      	subs	r4, r3, r4
   1ba32:	6833      	ldr	r3, [r6, #0]
   1ba34:	60b4      	str	r4, [r6, #8]
   1ba36:	4443      	add	r3, r8
   1ba38:	6033      	str	r3, [r6, #0]
   1ba3a:	0018      	movs	r0, r3
   1ba3c:	4653      	mov	r3, sl
   1ba3e:	689b      	ldr	r3, [r3, #8]
   1ba40:	1bdf      	subs	r7, r3, r7
   1ba42:	4653      	mov	r3, sl
   1ba44:	609f      	str	r7, [r3, #8]
   1ba46:	d023      	beq.n	1ba90 <__ssprint_r+0xfc>
   1ba48:	686f      	ldr	r7, [r5, #4]
   1ba4a:	002b      	movs	r3, r5
   1ba4c:	3508      	adds	r5, #8
   1ba4e:	2f00      	cmp	r7, #0
   1ba50:	d0fa      	beq.n	1ba48 <__ssprint_r+0xb4>
   1ba52:	681b      	ldr	r3, [r3, #0]
   1ba54:	46a0      	mov	r8, r4
   1ba56:	4699      	mov	r9, r3
   1ba58:	42a7      	cmp	r7, r4
   1ba5a:	d2ae      	bcs.n	1b9ba <__ssprint_r+0x26>
   1ba5c:	003c      	movs	r4, r7
   1ba5e:	46b8      	mov	r8, r7
   1ba60:	e7e1      	b.n	1ba26 <__ssprint_r+0x92>
   1ba62:	9801      	ldr	r0, [sp, #4]
   1ba64:	f7ff fd78 	bl	1b558 <_realloc_r>
   1ba68:	1e04      	subs	r4, r0, #0
   1ba6a:	d1d1      	bne.n	1ba10 <__ssprint_r+0x7c>
   1ba6c:	9c01      	ldr	r4, [sp, #4]
   1ba6e:	6931      	ldr	r1, [r6, #16]
   1ba70:	0020      	movs	r0, r4
   1ba72:	f7fe fb8d 	bl	1a190 <_free_r>
   1ba76:	230c      	movs	r3, #12
   1ba78:	6023      	str	r3, [r4, #0]
   1ba7a:	2240      	movs	r2, #64	; 0x40
   1ba7c:	89b3      	ldrh	r3, [r6, #12]
   1ba7e:	2001      	movs	r0, #1
   1ba80:	4313      	orrs	r3, r2
   1ba82:	81b3      	strh	r3, [r6, #12]
   1ba84:	4652      	mov	r2, sl
   1ba86:	2300      	movs	r3, #0
   1ba88:	4240      	negs	r0, r0
   1ba8a:	6093      	str	r3, [r2, #8]
   1ba8c:	6053      	str	r3, [r2, #4]
   1ba8e:	e003      	b.n	1ba98 <__ssprint_r+0x104>
   1ba90:	2300      	movs	r3, #0
   1ba92:	4652      	mov	r2, sl
   1ba94:	2000      	movs	r0, #0
   1ba96:	6053      	str	r3, [r2, #4]
   1ba98:	b003      	add	sp, #12
   1ba9a:	bc3c      	pop	{r2, r3, r4, r5}
   1ba9c:	4690      	mov	r8, r2
   1ba9e:	4699      	mov	r9, r3
   1baa0:	46a2      	mov	sl, r4
   1baa2:	46ab      	mov	fp, r5
   1baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1baa6:	230c      	movs	r3, #12
   1baa8:	9a01      	ldr	r2, [sp, #4]
   1baaa:	6013      	str	r3, [r2, #0]
   1baac:	e7e5      	b.n	1ba7a <__ssprint_r+0xe6>
   1baae:	46c0      	nop			; (mov r8, r8)
   1bab0:	fffffb7f 	.word	0xfffffb7f

0001bab4 <__sprint_r.part.0>:
   1bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bab6:	464e      	mov	r6, r9
   1bab8:	4645      	mov	r5, r8
   1baba:	46de      	mov	lr, fp
   1babc:	4657      	mov	r7, sl
   1babe:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bac0:	b5e0      	push	{r5, r6, r7, lr}
   1bac2:	4680      	mov	r8, r0
   1bac4:	000e      	movs	r6, r1
   1bac6:	4691      	mov	r9, r2
   1bac8:	049b      	lsls	r3, r3, #18
   1baca:	d531      	bpl.n	1bb30 <__sprint_r.part.0+0x7c>
   1bacc:	6813      	ldr	r3, [r2, #0]
   1bace:	469a      	mov	sl, r3
   1bad0:	6893      	ldr	r3, [r2, #8]
   1bad2:	2b00      	cmp	r3, #0
   1bad4:	d02a      	beq.n	1bb2c <__sprint_r.part.0+0x78>
   1bad6:	4652      	mov	r2, sl
   1bad8:	6852      	ldr	r2, [r2, #4]
   1bada:	2500      	movs	r5, #0
   1badc:	4693      	mov	fp, r2
   1bade:	0897      	lsrs	r7, r2, #2
   1bae0:	4652      	mov	r2, sl
   1bae2:	6814      	ldr	r4, [r2, #0]
   1bae4:	d104      	bne.n	1baf0 <__sprint_r.part.0+0x3c>
   1bae6:	e016      	b.n	1bb16 <__sprint_r.part.0+0x62>
   1bae8:	3501      	adds	r5, #1
   1baea:	3404      	adds	r4, #4
   1baec:	42af      	cmp	r7, r5
   1baee:	d010      	beq.n	1bb12 <__sprint_r.part.0+0x5e>
   1baf0:	0032      	movs	r2, r6
   1baf2:	6821      	ldr	r1, [r4, #0]
   1baf4:	4640      	mov	r0, r8
   1baf6:	f000 f9b5 	bl	1be64 <_fputwc_r>
   1bafa:	1c43      	adds	r3, r0, #1
   1bafc:	d1f4      	bne.n	1bae8 <__sprint_r.part.0+0x34>
   1bafe:	464a      	mov	r2, r9
   1bb00:	2300      	movs	r3, #0
   1bb02:	6093      	str	r3, [r2, #8]
   1bb04:	6053      	str	r3, [r2, #4]
   1bb06:	bc3c      	pop	{r2, r3, r4, r5}
   1bb08:	4690      	mov	r8, r2
   1bb0a:	4699      	mov	r9, r3
   1bb0c:	46a2      	mov	sl, r4
   1bb0e:	46ab      	mov	fp, r5
   1bb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb12:	464b      	mov	r3, r9
   1bb14:	689b      	ldr	r3, [r3, #8]
   1bb16:	465a      	mov	r2, fp
   1bb18:	2103      	movs	r1, #3
   1bb1a:	438a      	bics	r2, r1
   1bb1c:	1a9b      	subs	r3, r3, r2
   1bb1e:	464a      	mov	r2, r9
   1bb20:	6093      	str	r3, [r2, #8]
   1bb22:	2208      	movs	r2, #8
   1bb24:	4694      	mov	ip, r2
   1bb26:	44e2      	add	sl, ip
   1bb28:	2b00      	cmp	r3, #0
   1bb2a:	d1d4      	bne.n	1bad6 <__sprint_r.part.0+0x22>
   1bb2c:	2000      	movs	r0, #0
   1bb2e:	e7e6      	b.n	1bafe <__sprint_r.part.0+0x4a>
   1bb30:	f7fe fc0c 	bl	1a34c <__sfvwrite_r>
   1bb34:	e7e3      	b.n	1bafe <__sprint_r.part.0+0x4a>
   1bb36:	46c0      	nop			; (mov r8, r8)

0001bb38 <__sprint_r>:
   1bb38:	6893      	ldr	r3, [r2, #8]
   1bb3a:	b510      	push	{r4, lr}
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d002      	beq.n	1bb46 <__sprint_r+0xe>
   1bb40:	f7ff ffb8 	bl	1bab4 <__sprint_r.part.0>
   1bb44:	bd10      	pop	{r4, pc}
   1bb46:	6053      	str	r3, [r2, #4]
   1bb48:	2000      	movs	r0, #0
   1bb4a:	e7fb      	b.n	1bb44 <__sprint_r+0xc>

0001bb4c <__ascii_wctomb>:
   1bb4c:	2900      	cmp	r1, #0
   1bb4e:	d004      	beq.n	1bb5a <__ascii_wctomb+0xe>
   1bb50:	2aff      	cmp	r2, #255	; 0xff
   1bb52:	d804      	bhi.n	1bb5e <__ascii_wctomb+0x12>
   1bb54:	2001      	movs	r0, #1
   1bb56:	700a      	strb	r2, [r1, #0]
   1bb58:	4770      	bx	lr
   1bb5a:	2000      	movs	r0, #0
   1bb5c:	e7fc      	b.n	1bb58 <__ascii_wctomb+0xc>
   1bb5e:	238a      	movs	r3, #138	; 0x8a
   1bb60:	6003      	str	r3, [r0, #0]
   1bb62:	2001      	movs	r0, #1
   1bb64:	4240      	negs	r0, r0
   1bb66:	e7f7      	b.n	1bb58 <__ascii_wctomb+0xc>

0001bb68 <_write_r>:
   1bb68:	b570      	push	{r4, r5, r6, lr}
   1bb6a:	0005      	movs	r5, r0
   1bb6c:	0008      	movs	r0, r1
   1bb6e:	0011      	movs	r1, r2
   1bb70:	2200      	movs	r2, #0
   1bb72:	4c06      	ldr	r4, [pc, #24]	; (1bb8c <_write_r+0x24>)
   1bb74:	6022      	str	r2, [r4, #0]
   1bb76:	001a      	movs	r2, r3
   1bb78:	f7e7 fe40 	bl	37fc <_write>
   1bb7c:	1c43      	adds	r3, r0, #1
   1bb7e:	d000      	beq.n	1bb82 <_write_r+0x1a>
   1bb80:	bd70      	pop	{r4, r5, r6, pc}
   1bb82:	6823      	ldr	r3, [r4, #0]
   1bb84:	2b00      	cmp	r3, #0
   1bb86:	d0fb      	beq.n	1bb80 <_write_r+0x18>
   1bb88:	602b      	str	r3, [r5, #0]
   1bb8a:	e7f9      	b.n	1bb80 <_write_r+0x18>
   1bb8c:	20002064 	.word	0x20002064

0001bb90 <__register_exitproc>:
   1bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb92:	464e      	mov	r6, r9
   1bb94:	4645      	mov	r5, r8
   1bb96:	46de      	mov	lr, fp
   1bb98:	4657      	mov	r7, sl
   1bb9a:	b5e0      	push	{r5, r6, r7, lr}
   1bb9c:	4d36      	ldr	r5, [pc, #216]	; (1bc78 <__register_exitproc+0xe8>)
   1bb9e:	b083      	sub	sp, #12
   1bba0:	0006      	movs	r6, r0
   1bba2:	6828      	ldr	r0, [r5, #0]
   1bba4:	4698      	mov	r8, r3
   1bba6:	000f      	movs	r7, r1
   1bba8:	4691      	mov	r9, r2
   1bbaa:	f7fe fd9d 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1bbae:	4b33      	ldr	r3, [pc, #204]	; (1bc7c <__register_exitproc+0xec>)
   1bbb0:	681c      	ldr	r4, [r3, #0]
   1bbb2:	23a4      	movs	r3, #164	; 0xa4
   1bbb4:	005b      	lsls	r3, r3, #1
   1bbb6:	58e0      	ldr	r0, [r4, r3]
   1bbb8:	2800      	cmp	r0, #0
   1bbba:	d052      	beq.n	1bc62 <__register_exitproc+0xd2>
   1bbbc:	6843      	ldr	r3, [r0, #4]
   1bbbe:	2b1f      	cmp	r3, #31
   1bbc0:	dc13      	bgt.n	1bbea <__register_exitproc+0x5a>
   1bbc2:	1c5a      	adds	r2, r3, #1
   1bbc4:	9201      	str	r2, [sp, #4]
   1bbc6:	2e00      	cmp	r6, #0
   1bbc8:	d128      	bne.n	1bc1c <__register_exitproc+0x8c>
   1bbca:	9a01      	ldr	r2, [sp, #4]
   1bbcc:	3302      	adds	r3, #2
   1bbce:	009b      	lsls	r3, r3, #2
   1bbd0:	6042      	str	r2, [r0, #4]
   1bbd2:	501f      	str	r7, [r3, r0]
   1bbd4:	6828      	ldr	r0, [r5, #0]
   1bbd6:	f7fe fd89 	bl	1a6ec <__retarget_lock_release_recursive>
   1bbda:	2000      	movs	r0, #0
   1bbdc:	b003      	add	sp, #12
   1bbde:	bc3c      	pop	{r2, r3, r4, r5}
   1bbe0:	4690      	mov	r8, r2
   1bbe2:	4699      	mov	r9, r3
   1bbe4:	46a2      	mov	sl, r4
   1bbe6:	46ab      	mov	fp, r5
   1bbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bbea:	4b25      	ldr	r3, [pc, #148]	; (1bc80 <__register_exitproc+0xf0>)
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d03d      	beq.n	1bc6c <__register_exitproc+0xdc>
   1bbf0:	20c8      	movs	r0, #200	; 0xc8
   1bbf2:	0040      	lsls	r0, r0, #1
   1bbf4:	f7fe fdf4 	bl	1a7e0 <malloc>
   1bbf8:	2800      	cmp	r0, #0
   1bbfa:	d037      	beq.n	1bc6c <__register_exitproc+0xdc>
   1bbfc:	22a4      	movs	r2, #164	; 0xa4
   1bbfe:	2300      	movs	r3, #0
   1bc00:	0052      	lsls	r2, r2, #1
   1bc02:	58a1      	ldr	r1, [r4, r2]
   1bc04:	6043      	str	r3, [r0, #4]
   1bc06:	6001      	str	r1, [r0, #0]
   1bc08:	50a0      	str	r0, [r4, r2]
   1bc0a:	3240      	adds	r2, #64	; 0x40
   1bc0c:	5083      	str	r3, [r0, r2]
   1bc0e:	3204      	adds	r2, #4
   1bc10:	5083      	str	r3, [r0, r2]
   1bc12:	3301      	adds	r3, #1
   1bc14:	9301      	str	r3, [sp, #4]
   1bc16:	2300      	movs	r3, #0
   1bc18:	2e00      	cmp	r6, #0
   1bc1a:	d0d6      	beq.n	1bbca <__register_exitproc+0x3a>
   1bc1c:	009a      	lsls	r2, r3, #2
   1bc1e:	4692      	mov	sl, r2
   1bc20:	4482      	add	sl, r0
   1bc22:	464a      	mov	r2, r9
   1bc24:	2188      	movs	r1, #136	; 0x88
   1bc26:	4654      	mov	r4, sl
   1bc28:	5062      	str	r2, [r4, r1]
   1bc2a:	22c4      	movs	r2, #196	; 0xc4
   1bc2c:	0052      	lsls	r2, r2, #1
   1bc2e:	4691      	mov	r9, r2
   1bc30:	4481      	add	r9, r0
   1bc32:	464a      	mov	r2, r9
   1bc34:	3987      	subs	r1, #135	; 0x87
   1bc36:	4099      	lsls	r1, r3
   1bc38:	6812      	ldr	r2, [r2, #0]
   1bc3a:	468b      	mov	fp, r1
   1bc3c:	430a      	orrs	r2, r1
   1bc3e:	4694      	mov	ip, r2
   1bc40:	464a      	mov	r2, r9
   1bc42:	4661      	mov	r1, ip
   1bc44:	6011      	str	r1, [r2, #0]
   1bc46:	2284      	movs	r2, #132	; 0x84
   1bc48:	4641      	mov	r1, r8
   1bc4a:	0052      	lsls	r2, r2, #1
   1bc4c:	50a1      	str	r1, [r4, r2]
   1bc4e:	2e02      	cmp	r6, #2
   1bc50:	d1bb      	bne.n	1bbca <__register_exitproc+0x3a>
   1bc52:	0002      	movs	r2, r0
   1bc54:	465c      	mov	r4, fp
   1bc56:	328d      	adds	r2, #141	; 0x8d
   1bc58:	32ff      	adds	r2, #255	; 0xff
   1bc5a:	6811      	ldr	r1, [r2, #0]
   1bc5c:	430c      	orrs	r4, r1
   1bc5e:	6014      	str	r4, [r2, #0]
   1bc60:	e7b3      	b.n	1bbca <__register_exitproc+0x3a>
   1bc62:	0020      	movs	r0, r4
   1bc64:	304d      	adds	r0, #77	; 0x4d
   1bc66:	30ff      	adds	r0, #255	; 0xff
   1bc68:	50e0      	str	r0, [r4, r3]
   1bc6a:	e7a7      	b.n	1bbbc <__register_exitproc+0x2c>
   1bc6c:	6828      	ldr	r0, [r5, #0]
   1bc6e:	f7fe fd3d 	bl	1a6ec <__retarget_lock_release_recursive>
   1bc72:	2001      	movs	r0, #1
   1bc74:	4240      	negs	r0, r0
   1bc76:	e7b1      	b.n	1bbdc <__register_exitproc+0x4c>
   1bc78:	20000500 	.word	0x20000500
   1bc7c:	0001df38 	.word	0x0001df38
   1bc80:	0001a7e1 	.word	0x0001a7e1

0001bc84 <_calloc_r>:
   1bc84:	b510      	push	{r4, lr}
   1bc86:	4351      	muls	r1, r2
   1bc88:	f7fe fdb4 	bl	1a7f4 <_malloc_r>
   1bc8c:	1e04      	subs	r4, r0, #0
   1bc8e:	d01c      	beq.n	1bcca <_calloc_r+0x46>
   1bc90:	0003      	movs	r3, r0
   1bc92:	3b08      	subs	r3, #8
   1bc94:	685a      	ldr	r2, [r3, #4]
   1bc96:	2303      	movs	r3, #3
   1bc98:	439a      	bics	r2, r3
   1bc9a:	3a04      	subs	r2, #4
   1bc9c:	2a24      	cmp	r2, #36	; 0x24
   1bc9e:	d816      	bhi.n	1bcce <_calloc_r+0x4a>
   1bca0:	0003      	movs	r3, r0
   1bca2:	2a13      	cmp	r2, #19
   1bca4:	d90d      	bls.n	1bcc2 <_calloc_r+0x3e>
   1bca6:	2100      	movs	r1, #0
   1bca8:	3308      	adds	r3, #8
   1bcaa:	6001      	str	r1, [r0, #0]
   1bcac:	6041      	str	r1, [r0, #4]
   1bcae:	2a1b      	cmp	r2, #27
   1bcb0:	d907      	bls.n	1bcc2 <_calloc_r+0x3e>
   1bcb2:	6081      	str	r1, [r0, #8]
   1bcb4:	60c1      	str	r1, [r0, #12]
   1bcb6:	2a24      	cmp	r2, #36	; 0x24
   1bcb8:	d10d      	bne.n	1bcd6 <_calloc_r+0x52>
   1bcba:	0003      	movs	r3, r0
   1bcbc:	6101      	str	r1, [r0, #16]
   1bcbe:	3318      	adds	r3, #24
   1bcc0:	6141      	str	r1, [r0, #20]
   1bcc2:	2200      	movs	r2, #0
   1bcc4:	601a      	str	r2, [r3, #0]
   1bcc6:	605a      	str	r2, [r3, #4]
   1bcc8:	609a      	str	r2, [r3, #8]
   1bcca:	0020      	movs	r0, r4
   1bccc:	bd10      	pop	{r4, pc}
   1bcce:	2100      	movs	r1, #0
   1bcd0:	f7f9 fe3c 	bl	1594c <memset>
   1bcd4:	e7f9      	b.n	1bcca <_calloc_r+0x46>
   1bcd6:	0003      	movs	r3, r0
   1bcd8:	3310      	adds	r3, #16
   1bcda:	e7f2      	b.n	1bcc2 <_calloc_r+0x3e>

0001bcdc <_close_r>:
   1bcdc:	2300      	movs	r3, #0
   1bcde:	b570      	push	{r4, r5, r6, lr}
   1bce0:	4c06      	ldr	r4, [pc, #24]	; (1bcfc <_close_r+0x20>)
   1bce2:	0005      	movs	r5, r0
   1bce4:	0008      	movs	r0, r1
   1bce6:	6023      	str	r3, [r4, #0]
   1bce8:	f7e7 fdc2 	bl	3870 <_close>
   1bcec:	1c43      	adds	r3, r0, #1
   1bcee:	d000      	beq.n	1bcf2 <_close_r+0x16>
   1bcf0:	bd70      	pop	{r4, r5, r6, pc}
   1bcf2:	6823      	ldr	r3, [r4, #0]
   1bcf4:	2b00      	cmp	r3, #0
   1bcf6:	d0fb      	beq.n	1bcf0 <_close_r+0x14>
   1bcf8:	602b      	str	r3, [r5, #0]
   1bcfa:	e7f9      	b.n	1bcf0 <_close_r+0x14>
   1bcfc:	20002064 	.word	0x20002064

0001bd00 <_fclose_r>:
   1bd00:	b570      	push	{r4, r5, r6, lr}
   1bd02:	0005      	movs	r5, r0
   1bd04:	1e0c      	subs	r4, r1, #0
   1bd06:	d040      	beq.n	1bd8a <_fclose_r+0x8a>
   1bd08:	2800      	cmp	r0, #0
   1bd0a:	d002      	beq.n	1bd12 <_fclose_r+0x12>
   1bd0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1bd0e:	2b00      	cmp	r3, #0
   1bd10:	d03e      	beq.n	1bd90 <_fclose_r+0x90>
   1bd12:	2601      	movs	r6, #1
   1bd14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1bd16:	4233      	tst	r3, r6
   1bd18:	d133      	bne.n	1bd82 <_fclose_r+0x82>
   1bd1a:	89a3      	ldrh	r3, [r4, #12]
   1bd1c:	059b      	lsls	r3, r3, #22
   1bd1e:	d543      	bpl.n	1bda8 <_fclose_r+0xa8>
   1bd20:	0021      	movs	r1, r4
   1bd22:	0028      	movs	r0, r5
   1bd24:	f7fe f888 	bl	19e38 <__sflush_r>
   1bd28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bd2a:	0006      	movs	r6, r0
   1bd2c:	2b00      	cmp	r3, #0
   1bd2e:	d004      	beq.n	1bd3a <_fclose_r+0x3a>
   1bd30:	69e1      	ldr	r1, [r4, #28]
   1bd32:	0028      	movs	r0, r5
   1bd34:	4798      	blx	r3
   1bd36:	2800      	cmp	r0, #0
   1bd38:	db44      	blt.n	1bdc4 <_fclose_r+0xc4>
   1bd3a:	89a3      	ldrh	r3, [r4, #12]
   1bd3c:	061b      	lsls	r3, r3, #24
   1bd3e:	d42a      	bmi.n	1bd96 <_fclose_r+0x96>
   1bd40:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1bd42:	2900      	cmp	r1, #0
   1bd44:	d008      	beq.n	1bd58 <_fclose_r+0x58>
   1bd46:	0023      	movs	r3, r4
   1bd48:	3340      	adds	r3, #64	; 0x40
   1bd4a:	4299      	cmp	r1, r3
   1bd4c:	d002      	beq.n	1bd54 <_fclose_r+0x54>
   1bd4e:	0028      	movs	r0, r5
   1bd50:	f7fe fa1e 	bl	1a190 <_free_r>
   1bd54:	2300      	movs	r3, #0
   1bd56:	6323      	str	r3, [r4, #48]	; 0x30
   1bd58:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1bd5a:	2900      	cmp	r1, #0
   1bd5c:	d004      	beq.n	1bd68 <_fclose_r+0x68>
   1bd5e:	0028      	movs	r0, r5
   1bd60:	f7fe fa16 	bl	1a190 <_free_r>
   1bd64:	2300      	movs	r3, #0
   1bd66:	6463      	str	r3, [r4, #68]	; 0x44
   1bd68:	f7fe f998 	bl	1a09c <__sfp_lock_acquire>
   1bd6c:	2300      	movs	r3, #0
   1bd6e:	81a3      	strh	r3, [r4, #12]
   1bd70:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1bd72:	07db      	lsls	r3, r3, #31
   1bd74:	d514      	bpl.n	1bda0 <_fclose_r+0xa0>
   1bd76:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1bd78:	f7fe fcb4 	bl	1a6e4 <__retarget_lock_close_recursive>
   1bd7c:	f7fe f996 	bl	1a0ac <__sfp_lock_release>
   1bd80:	e004      	b.n	1bd8c <_fclose_r+0x8c>
   1bd82:	220c      	movs	r2, #12
   1bd84:	5ea3      	ldrsh	r3, [r4, r2]
   1bd86:	2b00      	cmp	r3, #0
   1bd88:	d1ca      	bne.n	1bd20 <_fclose_r+0x20>
   1bd8a:	2600      	movs	r6, #0
   1bd8c:	0030      	movs	r0, r6
   1bd8e:	bd70      	pop	{r4, r5, r6, pc}
   1bd90:	f7fe f954 	bl	1a03c <__sinit>
   1bd94:	e7bd      	b.n	1bd12 <_fclose_r+0x12>
   1bd96:	6921      	ldr	r1, [r4, #16]
   1bd98:	0028      	movs	r0, r5
   1bd9a:	f7fe f9f9 	bl	1a190 <_free_r>
   1bd9e:	e7cf      	b.n	1bd40 <_fclose_r+0x40>
   1bda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1bda2:	f7fe fca3 	bl	1a6ec <__retarget_lock_release_recursive>
   1bda6:	e7e6      	b.n	1bd76 <_fclose_r+0x76>
   1bda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1bdaa:	f7fe fc9d 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1bdae:	220c      	movs	r2, #12
   1bdb0:	5ea3      	ldrsh	r3, [r4, r2]
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	d1b4      	bne.n	1bd20 <_fclose_r+0x20>
   1bdb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1bdb8:	401e      	ands	r6, r3
   1bdba:	d1e6      	bne.n	1bd8a <_fclose_r+0x8a>
   1bdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1bdbe:	f7fe fc95 	bl	1a6ec <__retarget_lock_release_recursive>
   1bdc2:	e7e3      	b.n	1bd8c <_fclose_r+0x8c>
   1bdc4:	2601      	movs	r6, #1
   1bdc6:	4276      	negs	r6, r6
   1bdc8:	e7b7      	b.n	1bd3a <_fclose_r+0x3a>
   1bdca:	46c0      	nop			; (mov r8, r8)

0001bdcc <__fputwc>:
   1bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bdce:	46ce      	mov	lr, r9
   1bdd0:	4647      	mov	r7, r8
   1bdd2:	b580      	push	{r7, lr}
   1bdd4:	b085      	sub	sp, #20
   1bdd6:	4680      	mov	r8, r0
   1bdd8:	4689      	mov	r9, r1
   1bdda:	0014      	movs	r4, r2
   1bddc:	f7fe fc5e 	bl	1a69c <__locale_mb_cur_max>
   1bde0:	2801      	cmp	r0, #1
   1bde2:	d031      	beq.n	1be48 <__fputwc+0x7c>
   1bde4:	0023      	movs	r3, r4
   1bde6:	af03      	add	r7, sp, #12
   1bde8:	335c      	adds	r3, #92	; 0x5c
   1bdea:	464a      	mov	r2, r9
   1bdec:	0039      	movs	r1, r7
   1bdee:	4640      	mov	r0, r8
   1bdf0:	f000 f912 	bl	1c018 <_wcrtomb_r>
   1bdf4:	0006      	movs	r6, r0
   1bdf6:	1c43      	adds	r3, r0, #1
   1bdf8:	d021      	beq.n	1be3e <__fputwc+0x72>
   1bdfa:	2800      	cmp	r0, #0
   1bdfc:	d030      	beq.n	1be60 <__fputwc+0x94>
   1bdfe:	7839      	ldrb	r1, [r7, #0]
   1be00:	2500      	movs	r5, #0
   1be02:	e007      	b.n	1be14 <__fputwc+0x48>
   1be04:	6823      	ldr	r3, [r4, #0]
   1be06:	1c5a      	adds	r2, r3, #1
   1be08:	6022      	str	r2, [r4, #0]
   1be0a:	7019      	strb	r1, [r3, #0]
   1be0c:	3501      	adds	r5, #1
   1be0e:	42b5      	cmp	r5, r6
   1be10:	d226      	bcs.n	1be60 <__fputwc+0x94>
   1be12:	5d79      	ldrb	r1, [r7, r5]
   1be14:	68a3      	ldr	r3, [r4, #8]
   1be16:	3b01      	subs	r3, #1
   1be18:	60a3      	str	r3, [r4, #8]
   1be1a:	2b00      	cmp	r3, #0
   1be1c:	daf2      	bge.n	1be04 <__fputwc+0x38>
   1be1e:	69a2      	ldr	r2, [r4, #24]
   1be20:	4293      	cmp	r3, r2
   1be22:	db01      	blt.n	1be28 <__fputwc+0x5c>
   1be24:	290a      	cmp	r1, #10
   1be26:	d1ed      	bne.n	1be04 <__fputwc+0x38>
   1be28:	0022      	movs	r2, r4
   1be2a:	4640      	mov	r0, r8
   1be2c:	f000 f896 	bl	1bf5c <__swbuf_r>
   1be30:	1c43      	adds	r3, r0, #1
   1be32:	d1eb      	bne.n	1be0c <__fputwc+0x40>
   1be34:	b005      	add	sp, #20
   1be36:	bc0c      	pop	{r2, r3}
   1be38:	4690      	mov	r8, r2
   1be3a:	4699      	mov	r9, r3
   1be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be3e:	2240      	movs	r2, #64	; 0x40
   1be40:	89a3      	ldrh	r3, [r4, #12]
   1be42:	4313      	orrs	r3, r2
   1be44:	81a3      	strh	r3, [r4, #12]
   1be46:	e7f5      	b.n	1be34 <__fputwc+0x68>
   1be48:	464b      	mov	r3, r9
   1be4a:	3b01      	subs	r3, #1
   1be4c:	2bfe      	cmp	r3, #254	; 0xfe
   1be4e:	d8c9      	bhi.n	1bde4 <__fputwc+0x18>
   1be50:	466a      	mov	r2, sp
   1be52:	464b      	mov	r3, r9
   1be54:	71d3      	strb	r3, [r2, #7]
   1be56:	79d1      	ldrb	r1, [r2, #7]
   1be58:	af03      	add	r7, sp, #12
   1be5a:	7039      	strb	r1, [r7, #0]
   1be5c:	2601      	movs	r6, #1
   1be5e:	e7cf      	b.n	1be00 <__fputwc+0x34>
   1be60:	4648      	mov	r0, r9
   1be62:	e7e7      	b.n	1be34 <__fputwc+0x68>

0001be64 <_fputwc_r>:
   1be64:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1be66:	b570      	push	{r4, r5, r6, lr}
   1be68:	0005      	movs	r5, r0
   1be6a:	000e      	movs	r6, r1
   1be6c:	0014      	movs	r4, r2
   1be6e:	07db      	lsls	r3, r3, #31
   1be70:	d41e      	bmi.n	1beb0 <_fputwc_r+0x4c>
   1be72:	230c      	movs	r3, #12
   1be74:	5ed2      	ldrsh	r2, [r2, r3]
   1be76:	b291      	uxth	r1, r2
   1be78:	058b      	lsls	r3, r1, #22
   1be7a:	d516      	bpl.n	1beaa <_fputwc_r+0x46>
   1be7c:	2380      	movs	r3, #128	; 0x80
   1be7e:	019b      	lsls	r3, r3, #6
   1be80:	4219      	tst	r1, r3
   1be82:	d104      	bne.n	1be8e <_fputwc_r+0x2a>
   1be84:	431a      	orrs	r2, r3
   1be86:	81a2      	strh	r2, [r4, #12]
   1be88:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1be8a:	4313      	orrs	r3, r2
   1be8c:	6663      	str	r3, [r4, #100]	; 0x64
   1be8e:	0028      	movs	r0, r5
   1be90:	0022      	movs	r2, r4
   1be92:	0031      	movs	r1, r6
   1be94:	f7ff ff9a 	bl	1bdcc <__fputwc>
   1be98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1be9a:	0005      	movs	r5, r0
   1be9c:	07db      	lsls	r3, r3, #31
   1be9e:	d402      	bmi.n	1bea6 <_fputwc_r+0x42>
   1bea0:	89a3      	ldrh	r3, [r4, #12]
   1bea2:	059b      	lsls	r3, r3, #22
   1bea4:	d508      	bpl.n	1beb8 <_fputwc_r+0x54>
   1bea6:	0028      	movs	r0, r5
   1bea8:	bd70      	pop	{r4, r5, r6, pc}
   1beaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1beac:	f7fe fc1c 	bl	1a6e8 <__retarget_lock_acquire_recursive>
   1beb0:	230c      	movs	r3, #12
   1beb2:	5ee2      	ldrsh	r2, [r4, r3]
   1beb4:	b291      	uxth	r1, r2
   1beb6:	e7e1      	b.n	1be7c <_fputwc_r+0x18>
   1beb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1beba:	f7fe fc17 	bl	1a6ec <__retarget_lock_release_recursive>
   1bebe:	e7f2      	b.n	1bea6 <_fputwc_r+0x42>

0001bec0 <_fstat_r>:
   1bec0:	2300      	movs	r3, #0
   1bec2:	b570      	push	{r4, r5, r6, lr}
   1bec4:	4c07      	ldr	r4, [pc, #28]	; (1bee4 <_fstat_r+0x24>)
   1bec6:	0005      	movs	r5, r0
   1bec8:	0008      	movs	r0, r1
   1beca:	0011      	movs	r1, r2
   1becc:	6023      	str	r3, [r4, #0]
   1bece:	f7e7 fcd2 	bl	3876 <_fstat>
   1bed2:	1c43      	adds	r3, r0, #1
   1bed4:	d000      	beq.n	1bed8 <_fstat_r+0x18>
   1bed6:	bd70      	pop	{r4, r5, r6, pc}
   1bed8:	6823      	ldr	r3, [r4, #0]
   1beda:	2b00      	cmp	r3, #0
   1bedc:	d0fb      	beq.n	1bed6 <_fstat_r+0x16>
   1bede:	602b      	str	r3, [r5, #0]
   1bee0:	e7f9      	b.n	1bed6 <_fstat_r+0x16>
   1bee2:	46c0      	nop			; (mov r8, r8)
   1bee4:	20002064 	.word	0x20002064

0001bee8 <_isatty_r>:
   1bee8:	2300      	movs	r3, #0
   1beea:	b570      	push	{r4, r5, r6, lr}
   1beec:	4c06      	ldr	r4, [pc, #24]	; (1bf08 <_isatty_r+0x20>)
   1beee:	0005      	movs	r5, r0
   1bef0:	0008      	movs	r0, r1
   1bef2:	6023      	str	r3, [r4, #0]
   1bef4:	f7e7 fcc4 	bl	3880 <_isatty>
   1bef8:	1c43      	adds	r3, r0, #1
   1befa:	d000      	beq.n	1befe <_isatty_r+0x16>
   1befc:	bd70      	pop	{r4, r5, r6, pc}
   1befe:	6823      	ldr	r3, [r4, #0]
   1bf00:	2b00      	cmp	r3, #0
   1bf02:	d0fb      	beq.n	1befc <_isatty_r+0x14>
   1bf04:	602b      	str	r3, [r5, #0]
   1bf06:	e7f9      	b.n	1befc <_isatty_r+0x14>
   1bf08:	20002064 	.word	0x20002064

0001bf0c <_lseek_r>:
   1bf0c:	b570      	push	{r4, r5, r6, lr}
   1bf0e:	0005      	movs	r5, r0
   1bf10:	0008      	movs	r0, r1
   1bf12:	0011      	movs	r1, r2
   1bf14:	2200      	movs	r2, #0
   1bf16:	4c06      	ldr	r4, [pc, #24]	; (1bf30 <_lseek_r+0x24>)
   1bf18:	6022      	str	r2, [r4, #0]
   1bf1a:	001a      	movs	r2, r3
   1bf1c:	f7e7 fcb2 	bl	3884 <_lseek>
   1bf20:	1c43      	adds	r3, r0, #1
   1bf22:	d000      	beq.n	1bf26 <_lseek_r+0x1a>
   1bf24:	bd70      	pop	{r4, r5, r6, pc}
   1bf26:	6823      	ldr	r3, [r4, #0]
   1bf28:	2b00      	cmp	r3, #0
   1bf2a:	d0fb      	beq.n	1bf24 <_lseek_r+0x18>
   1bf2c:	602b      	str	r3, [r5, #0]
   1bf2e:	e7f9      	b.n	1bf24 <_lseek_r+0x18>
   1bf30:	20002064 	.word	0x20002064

0001bf34 <_read_r>:
   1bf34:	b570      	push	{r4, r5, r6, lr}
   1bf36:	0005      	movs	r5, r0
   1bf38:	0008      	movs	r0, r1
   1bf3a:	0011      	movs	r1, r2
   1bf3c:	2200      	movs	r2, #0
   1bf3e:	4c06      	ldr	r4, [pc, #24]	; (1bf58 <_read_r+0x24>)
   1bf40:	6022      	str	r2, [r4, #0]
   1bf42:	001a      	movs	r2, r3
   1bf44:	f7e7 fc38 	bl	37b8 <_read>
   1bf48:	1c43      	adds	r3, r0, #1
   1bf4a:	d000      	beq.n	1bf4e <_read_r+0x1a>
   1bf4c:	bd70      	pop	{r4, r5, r6, pc}
   1bf4e:	6823      	ldr	r3, [r4, #0]
   1bf50:	2b00      	cmp	r3, #0
   1bf52:	d0fb      	beq.n	1bf4c <_read_r+0x18>
   1bf54:	602b      	str	r3, [r5, #0]
   1bf56:	e7f9      	b.n	1bf4c <_read_r+0x18>
   1bf58:	20002064 	.word	0x20002064

0001bf5c <__swbuf_r>:
   1bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf5e:	0006      	movs	r6, r0
   1bf60:	000d      	movs	r5, r1
   1bf62:	0014      	movs	r4, r2
   1bf64:	2800      	cmp	r0, #0
   1bf66:	d002      	beq.n	1bf6e <__swbuf_r+0x12>
   1bf68:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d04e      	beq.n	1c00c <__swbuf_r+0xb0>
   1bf6e:	69a3      	ldr	r3, [r4, #24]
   1bf70:	60a3      	str	r3, [r4, #8]
   1bf72:	230c      	movs	r3, #12
   1bf74:	5ee0      	ldrsh	r0, [r4, r3]
   1bf76:	b281      	uxth	r1, r0
   1bf78:	070b      	lsls	r3, r1, #28
   1bf7a:	d53c      	bpl.n	1bff6 <__swbuf_r+0x9a>
   1bf7c:	6923      	ldr	r3, [r4, #16]
   1bf7e:	2b00      	cmp	r3, #0
   1bf80:	d039      	beq.n	1bff6 <__swbuf_r+0x9a>
   1bf82:	22ff      	movs	r2, #255	; 0xff
   1bf84:	b2ef      	uxtb	r7, r5
   1bf86:	4015      	ands	r5, r2
   1bf88:	2280      	movs	r2, #128	; 0x80
   1bf8a:	0192      	lsls	r2, r2, #6
   1bf8c:	4211      	tst	r1, r2
   1bf8e:	d015      	beq.n	1bfbc <__swbuf_r+0x60>
   1bf90:	6822      	ldr	r2, [r4, #0]
   1bf92:	6961      	ldr	r1, [r4, #20]
   1bf94:	1ad3      	subs	r3, r2, r3
   1bf96:	428b      	cmp	r3, r1
   1bf98:	da1b      	bge.n	1bfd2 <__swbuf_r+0x76>
   1bf9a:	3301      	adds	r3, #1
   1bf9c:	68a1      	ldr	r1, [r4, #8]
   1bf9e:	3901      	subs	r1, #1
   1bfa0:	60a1      	str	r1, [r4, #8]
   1bfa2:	1c51      	adds	r1, r2, #1
   1bfa4:	6021      	str	r1, [r4, #0]
   1bfa6:	7017      	strb	r7, [r2, #0]
   1bfa8:	6962      	ldr	r2, [r4, #20]
   1bfaa:	429a      	cmp	r2, r3
   1bfac:	d01a      	beq.n	1bfe4 <__swbuf_r+0x88>
   1bfae:	89a3      	ldrh	r3, [r4, #12]
   1bfb0:	07db      	lsls	r3, r3, #31
   1bfb2:	d501      	bpl.n	1bfb8 <__swbuf_r+0x5c>
   1bfb4:	2d0a      	cmp	r5, #10
   1bfb6:	d015      	beq.n	1bfe4 <__swbuf_r+0x88>
   1bfb8:	0028      	movs	r0, r5
   1bfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfbc:	4302      	orrs	r2, r0
   1bfbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1bfc0:	81a2      	strh	r2, [r4, #12]
   1bfc2:	4a14      	ldr	r2, [pc, #80]	; (1c014 <__swbuf_r+0xb8>)
   1bfc4:	400a      	ands	r2, r1
   1bfc6:	6662      	str	r2, [r4, #100]	; 0x64
   1bfc8:	6961      	ldr	r1, [r4, #20]
   1bfca:	6822      	ldr	r2, [r4, #0]
   1bfcc:	1ad3      	subs	r3, r2, r3
   1bfce:	428b      	cmp	r3, r1
   1bfd0:	dbe3      	blt.n	1bf9a <__swbuf_r+0x3e>
   1bfd2:	0021      	movs	r1, r4
   1bfd4:	0030      	movs	r0, r6
   1bfd6:	f7fd ffd7 	bl	19f88 <_fflush_r>
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	d108      	bne.n	1bff0 <__swbuf_r+0x94>
   1bfde:	6822      	ldr	r2, [r4, #0]
   1bfe0:	2301      	movs	r3, #1
   1bfe2:	e7db      	b.n	1bf9c <__swbuf_r+0x40>
   1bfe4:	0021      	movs	r1, r4
   1bfe6:	0030      	movs	r0, r6
   1bfe8:	f7fd ffce 	bl	19f88 <_fflush_r>
   1bfec:	2800      	cmp	r0, #0
   1bfee:	d0e3      	beq.n	1bfb8 <__swbuf_r+0x5c>
   1bff0:	2501      	movs	r5, #1
   1bff2:	426d      	negs	r5, r5
   1bff4:	e7e0      	b.n	1bfb8 <__swbuf_r+0x5c>
   1bff6:	0021      	movs	r1, r4
   1bff8:	0030      	movs	r0, r6
   1bffa:	f7fc fe31 	bl	18c60 <__swsetup_r>
   1bffe:	2800      	cmp	r0, #0
   1c000:	d1f6      	bne.n	1bff0 <__swbuf_r+0x94>
   1c002:	230c      	movs	r3, #12
   1c004:	5ee0      	ldrsh	r0, [r4, r3]
   1c006:	6923      	ldr	r3, [r4, #16]
   1c008:	b281      	uxth	r1, r0
   1c00a:	e7ba      	b.n	1bf82 <__swbuf_r+0x26>
   1c00c:	f7fe f816 	bl	1a03c <__sinit>
   1c010:	e7ad      	b.n	1bf6e <__swbuf_r+0x12>
   1c012:	46c0      	nop			; (mov r8, r8)
   1c014:	ffffdfff 	.word	0xffffdfff

0001c018 <_wcrtomb_r>:
   1c018:	b570      	push	{r4, r5, r6, lr}
   1c01a:	001d      	movs	r5, r3
   1c01c:	4b11      	ldr	r3, [pc, #68]	; (1c064 <_wcrtomb_r+0x4c>)
   1c01e:	b084      	sub	sp, #16
   1c020:	681b      	ldr	r3, [r3, #0]
   1c022:	0004      	movs	r4, r0
   1c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c026:	2900      	cmp	r1, #0
   1c028:	d00e      	beq.n	1c048 <_wcrtomb_r+0x30>
   1c02a:	2b00      	cmp	r3, #0
   1c02c:	d016      	beq.n	1c05c <_wcrtomb_r+0x44>
   1c02e:	20e0      	movs	r0, #224	; 0xe0
   1c030:	581e      	ldr	r6, [r3, r0]
   1c032:	002b      	movs	r3, r5
   1c034:	0020      	movs	r0, r4
   1c036:	47b0      	blx	r6
   1c038:	1c43      	adds	r3, r0, #1
   1c03a:	d103      	bne.n	1c044 <_wcrtomb_r+0x2c>
   1c03c:	2300      	movs	r3, #0
   1c03e:	602b      	str	r3, [r5, #0]
   1c040:	338a      	adds	r3, #138	; 0x8a
   1c042:	6023      	str	r3, [r4, #0]
   1c044:	b004      	add	sp, #16
   1c046:	bd70      	pop	{r4, r5, r6, pc}
   1c048:	2b00      	cmp	r3, #0
   1c04a:	d009      	beq.n	1c060 <_wcrtomb_r+0x48>
   1c04c:	22e0      	movs	r2, #224	; 0xe0
   1c04e:	a901      	add	r1, sp, #4
   1c050:	589e      	ldr	r6, [r3, r2]
   1c052:	0020      	movs	r0, r4
   1c054:	002b      	movs	r3, r5
   1c056:	2200      	movs	r2, #0
   1c058:	47b0      	blx	r6
   1c05a:	e7ed      	b.n	1c038 <_wcrtomb_r+0x20>
   1c05c:	4b02      	ldr	r3, [pc, #8]	; (1c068 <_wcrtomb_r+0x50>)
   1c05e:	e7e6      	b.n	1c02e <_wcrtomb_r+0x16>
   1c060:	4b01      	ldr	r3, [pc, #4]	; (1c068 <_wcrtomb_r+0x50>)
   1c062:	e7f3      	b.n	1c04c <_wcrtomb_r+0x34>
   1c064:	200000d4 	.word	0x200000d4
   1c068:	20000504 	.word	0x20000504

0001c06c <__aeabi_dcmpun>:
   1c06c:	b570      	push	{r4, r5, r6, lr}
   1c06e:	4e0e      	ldr	r6, [pc, #56]	; (1c0a8 <__aeabi_dcmpun+0x3c>)
   1c070:	030d      	lsls	r5, r1, #12
   1c072:	031c      	lsls	r4, r3, #12
   1c074:	0049      	lsls	r1, r1, #1
   1c076:	005b      	lsls	r3, r3, #1
   1c078:	0b2d      	lsrs	r5, r5, #12
   1c07a:	0d49      	lsrs	r1, r1, #21
   1c07c:	0b24      	lsrs	r4, r4, #12
   1c07e:	0d5b      	lsrs	r3, r3, #21
   1c080:	42b1      	cmp	r1, r6
   1c082:	d004      	beq.n	1c08e <__aeabi_dcmpun+0x22>
   1c084:	4908      	ldr	r1, [pc, #32]	; (1c0a8 <__aeabi_dcmpun+0x3c>)
   1c086:	2000      	movs	r0, #0
   1c088:	428b      	cmp	r3, r1
   1c08a:	d008      	beq.n	1c09e <__aeabi_dcmpun+0x32>
   1c08c:	bd70      	pop	{r4, r5, r6, pc}
   1c08e:	4305      	orrs	r5, r0
   1c090:	2001      	movs	r0, #1
   1c092:	2d00      	cmp	r5, #0
   1c094:	d1fa      	bne.n	1c08c <__aeabi_dcmpun+0x20>
   1c096:	4904      	ldr	r1, [pc, #16]	; (1c0a8 <__aeabi_dcmpun+0x3c>)
   1c098:	2000      	movs	r0, #0
   1c09a:	428b      	cmp	r3, r1
   1c09c:	d1f6      	bne.n	1c08c <__aeabi_dcmpun+0x20>
   1c09e:	4314      	orrs	r4, r2
   1c0a0:	0020      	movs	r0, r4
   1c0a2:	1e44      	subs	r4, r0, #1
   1c0a4:	41a0      	sbcs	r0, r4
   1c0a6:	e7f1      	b.n	1c08c <__aeabi_dcmpun+0x20>
   1c0a8:	000007ff 	.word	0x000007ff

0001c0ac <__aeabi_i2d>:
   1c0ac:	b570      	push	{r4, r5, r6, lr}
   1c0ae:	2800      	cmp	r0, #0
   1c0b0:	d030      	beq.n	1c114 <__aeabi_i2d+0x68>
   1c0b2:	17c3      	asrs	r3, r0, #31
   1c0b4:	18c4      	adds	r4, r0, r3
   1c0b6:	405c      	eors	r4, r3
   1c0b8:	0fc5      	lsrs	r5, r0, #31
   1c0ba:	0020      	movs	r0, r4
   1c0bc:	f7f9 fa2e 	bl	1551c <__clzsi2>
   1c0c0:	4b17      	ldr	r3, [pc, #92]	; (1c120 <__aeabi_i2d+0x74>)
   1c0c2:	4a18      	ldr	r2, [pc, #96]	; (1c124 <__aeabi_i2d+0x78>)
   1c0c4:	1a1b      	subs	r3, r3, r0
   1c0c6:	1ad2      	subs	r2, r2, r3
   1c0c8:	2a1f      	cmp	r2, #31
   1c0ca:	dd18      	ble.n	1c0fe <__aeabi_i2d+0x52>
   1c0cc:	4a16      	ldr	r2, [pc, #88]	; (1c128 <__aeabi_i2d+0x7c>)
   1c0ce:	1ad2      	subs	r2, r2, r3
   1c0d0:	4094      	lsls	r4, r2
   1c0d2:	2200      	movs	r2, #0
   1c0d4:	0324      	lsls	r4, r4, #12
   1c0d6:	055b      	lsls	r3, r3, #21
   1c0d8:	0b24      	lsrs	r4, r4, #12
   1c0da:	0d5b      	lsrs	r3, r3, #21
   1c0dc:	2100      	movs	r1, #0
   1c0de:	0010      	movs	r0, r2
   1c0e0:	0324      	lsls	r4, r4, #12
   1c0e2:	0d0a      	lsrs	r2, r1, #20
   1c0e4:	0b24      	lsrs	r4, r4, #12
   1c0e6:	0512      	lsls	r2, r2, #20
   1c0e8:	4322      	orrs	r2, r4
   1c0ea:	4c10      	ldr	r4, [pc, #64]	; (1c12c <__aeabi_i2d+0x80>)
   1c0ec:	051b      	lsls	r3, r3, #20
   1c0ee:	4022      	ands	r2, r4
   1c0f0:	4313      	orrs	r3, r2
   1c0f2:	005b      	lsls	r3, r3, #1
   1c0f4:	07ed      	lsls	r5, r5, #31
   1c0f6:	085b      	lsrs	r3, r3, #1
   1c0f8:	432b      	orrs	r3, r5
   1c0fa:	0019      	movs	r1, r3
   1c0fc:	bd70      	pop	{r4, r5, r6, pc}
   1c0fe:	0021      	movs	r1, r4
   1c100:	4091      	lsls	r1, r2
   1c102:	000a      	movs	r2, r1
   1c104:	210b      	movs	r1, #11
   1c106:	1a08      	subs	r0, r1, r0
   1c108:	40c4      	lsrs	r4, r0
   1c10a:	055b      	lsls	r3, r3, #21
   1c10c:	0324      	lsls	r4, r4, #12
   1c10e:	0b24      	lsrs	r4, r4, #12
   1c110:	0d5b      	lsrs	r3, r3, #21
   1c112:	e7e3      	b.n	1c0dc <__aeabi_i2d+0x30>
   1c114:	2500      	movs	r5, #0
   1c116:	2300      	movs	r3, #0
   1c118:	2400      	movs	r4, #0
   1c11a:	2200      	movs	r2, #0
   1c11c:	e7de      	b.n	1c0dc <__aeabi_i2d+0x30>
   1c11e:	46c0      	nop			; (mov r8, r8)
   1c120:	0000041e 	.word	0x0000041e
   1c124:	00000433 	.word	0x00000433
   1c128:	00000413 	.word	0x00000413
   1c12c:	800fffff 	.word	0x800fffff
   1c130:	0000045c 	.word	0x0000045c
   1c134:	000006a6 	.word	0x000006a6
   1c138:	000006a6 	.word	0x000006a6
   1c13c:	000006a6 	.word	0x000006a6
   1c140:	000006a6 	.word	0x000006a6
   1c144:	000006a6 	.word	0x000006a6
   1c148:	000006a6 	.word	0x000006a6
   1c14c:	000006a6 	.word	0x000006a6
   1c150:	000006a6 	.word	0x000006a6
   1c154:	000006a6 	.word	0x000006a6
   1c158:	000006a6 	.word	0x000006a6
   1c15c:	000006a6 	.word	0x000006a6
   1c160:	000006a6 	.word	0x000006a6
   1c164:	000006a6 	.word	0x000006a6
   1c168:	000006a6 	.word	0x000006a6
   1c16c:	000006a6 	.word	0x000006a6
   1c170:	00000444 	.word	0x00000444
   1c174:	000006a6 	.word	0x000006a6
   1c178:	000006a6 	.word	0x000006a6
   1c17c:	000006a6 	.word	0x000006a6
   1c180:	000006a6 	.word	0x000006a6
   1c184:	000006a6 	.word	0x000006a6
   1c188:	000006a6 	.word	0x000006a6
   1c18c:	000006a6 	.word	0x000006a6
   1c190:	000006a6 	.word	0x000006a6
   1c194:	000006a6 	.word	0x000006a6
   1c198:	000006a6 	.word	0x000006a6
   1c19c:	000006a6 	.word	0x000006a6
   1c1a0:	000006a6 	.word	0x000006a6
   1c1a4:	000006a6 	.word	0x000006a6
   1c1a8:	000006a6 	.word	0x000006a6
   1c1ac:	000006a6 	.word	0x000006a6
   1c1b0:	00000454 	.word	0x00000454
   1c1b4:	000006a6 	.word	0x000006a6
   1c1b8:	000006a6 	.word	0x000006a6
   1c1bc:	000006a6 	.word	0x000006a6
   1c1c0:	000006a6 	.word	0x000006a6
   1c1c4:	000006a6 	.word	0x000006a6
   1c1c8:	000006a6 	.word	0x000006a6
   1c1cc:	000006a6 	.word	0x000006a6
   1c1d0:	000006a6 	.word	0x000006a6
   1c1d4:	000006a6 	.word	0x000006a6
   1c1d8:	000006a6 	.word	0x000006a6
   1c1dc:	000006a6 	.word	0x000006a6
   1c1e0:	000006a6 	.word	0x000006a6
   1c1e4:	000006a6 	.word	0x000006a6
   1c1e8:	000006a6 	.word	0x000006a6
   1c1ec:	000006a6 	.word	0x000006a6
   1c1f0:	0000044c 	.word	0x0000044c
   1c1f4:	00000464 	.word	0x00000464
   1c1f8:	0000042c 	.word	0x0000042c
   1c1fc:	0000043c 	.word	0x0000043c
   1c200:	00000434 	.word	0x00000434
   1c204:	0000ffff 	.word	0x0000ffff
   1c208:	0000ffff 	.word	0x0000ffff
   1c20c:	00000004 	.word	0x00000004
   1c210:	00000005 	.word	0x00000005
   1c214:	00000006 	.word	0x00000006
   1c218:	00000007 	.word	0x00000007
   1c21c:	00000020 	.word	0x00000020
   1c220:	0000ffff 	.word	0x0000ffff
   1c224:	00000022 	.word	0x00000022
   1c228:	00000023 	.word	0x00000023
   1c22c:	0000ffff 	.word	0x0000ffff
   1c230:	0000ffff 	.word	0x0000ffff
   1c234:	0000ffff 	.word	0x0000ffff
   1c238:	0000ffff 	.word	0x0000ffff
   1c23c:	00000008 	.word	0x00000008
   1c240:	00000009 	.word	0x00000009
   1c244:	0000000a 	.word	0x0000000a
   1c248:	0000000b 	.word	0x0000000b
   1c24c:	0000ffff 	.word	0x0000ffff
   1c250:	0000ffff 	.word	0x0000ffff
   1c254:	0000ffff 	.word	0x0000ffff
   1c258:	0000ffff 	.word	0x0000ffff
   1c25c:	00000c1a 	.word	0x00000c1a
   1c260:	00000c1a 	.word	0x00000c1a
   1c264:	00000bf6 	.word	0x00000bf6
   1c268:	00000c1a 	.word	0x00000c1a
   1c26c:	00000bf6 	.word	0x00000bf6
   1c270:	00000bdc 	.word	0x00000bdc
   1c274:	00000bdc 	.word	0x00000bdc
   1c278:	00000c1a 	.word	0x00000c1a
   1c27c:	00000c1a 	.word	0x00000c1a
   1c280:	00000c1a 	.word	0x00000c1a
   1c284:	00000c1a 	.word	0x00000c1a
   1c288:	00000c1a 	.word	0x00000c1a
   1c28c:	00000c1a 	.word	0x00000c1a
   1c290:	00000c1a 	.word	0x00000c1a
   1c294:	00000c1a 	.word	0x00000c1a
   1c298:	00000c1a 	.word	0x00000c1a
   1c29c:	00000c1a 	.word	0x00000c1a
   1c2a0:	00000c1a 	.word	0x00000c1a
   1c2a4:	00000c1a 	.word	0x00000c1a
   1c2a8:	00000c1a 	.word	0x00000c1a
   1c2ac:	00000c1a 	.word	0x00000c1a
   1c2b0:	00000c1a 	.word	0x00000c1a
   1c2b4:	00000c1a 	.word	0x00000c1a
   1c2b8:	00000c1a 	.word	0x00000c1a
   1c2bc:	00000c1a 	.word	0x00000c1a
   1c2c0:	00000c1a 	.word	0x00000c1a
   1c2c4:	00000bf6 	.word	0x00000bf6
   1c2c8:	00000c1a 	.word	0x00000c1a
   1c2cc:	00000bf6 	.word	0x00000bf6
   1c2d0:	00000c1a 	.word	0x00000c1a
   1c2d4:	00000c1a 	.word	0x00000c1a
   1c2d8:	00000c1a 	.word	0x00000c1a
   1c2dc:	00000c1a 	.word	0x00000c1a
   1c2e0:	00000c1a 	.word	0x00000c1a
   1c2e4:	00000c1a 	.word	0x00000c1a
   1c2e8:	00000c1a 	.word	0x00000c1a
   1c2ec:	00000c1a 	.word	0x00000c1a
   1c2f0:	00000c1a 	.word	0x00000c1a
   1c2f4:	00000c1a 	.word	0x00000c1a
   1c2f8:	00000c1a 	.word	0x00000c1a
   1c2fc:	00000c1a 	.word	0x00000c1a
   1c300:	00000c1a 	.word	0x00000c1a
   1c304:	00000c1a 	.word	0x00000c1a
   1c308:	00000c1a 	.word	0x00000c1a
   1c30c:	00000c1a 	.word	0x00000c1a
   1c310:	00000c1a 	.word	0x00000c1a
   1c314:	00000c1a 	.word	0x00000c1a
   1c318:	00000c1a 	.word	0x00000c1a
   1c31c:	00000c1a 	.word	0x00000c1a
   1c320:	00000c1a 	.word	0x00000c1a
   1c324:	00000c1a 	.word	0x00000c1a
   1c328:	00000c1a 	.word	0x00000c1a
   1c32c:	00000c1a 	.word	0x00000c1a
   1c330:	00000c1a 	.word	0x00000c1a
   1c334:	00000c1a 	.word	0x00000c1a
   1c338:	00000c1a 	.word	0x00000c1a
   1c33c:	00000c1a 	.word	0x00000c1a
   1c340:	00000c1a 	.word	0x00000c1a
   1c344:	00000c1a 	.word	0x00000c1a
   1c348:	00000c1a 	.word	0x00000c1a
   1c34c:	00000c1a 	.word	0x00000c1a
   1c350:	00000c1a 	.word	0x00000c1a
   1c354:	00000c1a 	.word	0x00000c1a
   1c358:	00000c1a 	.word	0x00000c1a
   1c35c:	00000bf6 	.word	0x00000bf6
   1c360:	00000bf6 	.word	0x00000bf6
   1c364:	00000bfe 	.word	0x00000bfe
   1c368:	00000bfe 	.word	0x00000bfe
   1c36c:	00000bfe 	.word	0x00000bfe
   1c370:	00000bfe 	.word	0x00000bfe
   1c374:	42000000 	.word	0x42000000
   1c378:	42000400 	.word	0x42000400
   1c37c:	42000800 	.word	0x42000800
   1c380:	42000c00 	.word	0x42000c00
   1c384:	42001000 	.word	0x42001000
   1c388:	43000400 	.word	0x43000400
   1c38c:	000029ae 	.word	0x000029ae
   1c390:	000029aa 	.word	0x000029aa
   1c394:	000029aa 	.word	0x000029aa
   1c398:	00002a10 	.word	0x00002a10
   1c39c:	00002a10 	.word	0x00002a10
   1c3a0:	000029c4 	.word	0x000029c4
   1c3a4:	000029b4 	.word	0x000029b4
   1c3a8:	000029ca 	.word	0x000029ca
   1c3ac:	000029fe 	.word	0x000029fe
   1c3b0:	00002bb4 	.word	0x00002bb4
   1c3b4:	00002b94 	.word	0x00002b94
   1c3b8:	00002b94 	.word	0x00002b94
   1c3bc:	00002c2e 	.word	0x00002c2e
   1c3c0:	00002ba6 	.word	0x00002ba6
   1c3c4:	00002bc2 	.word	0x00002bc2
   1c3c8:	00002b98 	.word	0x00002b98
   1c3cc:	00002bd0 	.word	0x00002bd0
   1c3d0:	00002c12 	.word	0x00002c12
   1c3d4:	00002c6c 	.word	0x00002c6c
   1c3d8:	00002cae 	.word	0x00002cae
   1c3dc:	00002cae 	.word	0x00002cae
   1c3e0:	00002cae 	.word	0x00002cae
   1c3e4:	00002c5e 	.word	0x00002c5e
   1c3e8:	00002c7a 	.word	0x00002c7a
   1c3ec:	00002c50 	.word	0x00002c50
   1c3f0:	00002c88 	.word	0x00002c88
   1c3f4:	00002c9e 	.word	0x00002c9e
   1c3f8:	00003456 	.word	0x00003456
   1c3fc:	0000354c 	.word	0x0000354c
   1c400:	00003556 	.word	0x00003556
   1c404:	00003560 	.word	0x00003560
   1c408:	0000356a 	.word	0x0000356a
   1c40c:	0000359c 	.word	0x0000359c
   1c410:	000035a6 	.word	0x000035a6
   1c414:	000035b0 	.word	0x000035b0
   1c418:	000035ba 	.word	0x000035ba
   1c41c:	000035c4 	.word	0x000035c4
   1c420:	42002000 	.word	0x42002000
   1c424:	42002400 	.word	0x42002400
   1c428:	42002800 	.word	0x42002800
   1c42c:	42002c00 	.word	0x42002c00
   1c430:	43000800 	.word	0x43000800
   1c434:	00000002 	.word	0x00000002
   1c438:	00000100 	.word	0x00000100
   1c43c:	00000002 	.word	0x00000002
   1c440:	00000200 	.word	0x00000200
   1c444:	00000002 	.word	0x00000002
   1c448:	00000400 	.word	0x00000400
   1c44c:	00000002 	.word	0x00000002
   1c450:	00000800 	.word	0x00000800
   1c454:	00000003 	.word	0x00000003
   1c458:	00000004 	.word	0x00000004

0001c45c <AdvChannels923>:
   1c45c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1c46c:	3709f740 ff100100                       @..7....

0001c474 <DefaultChannels923>:
   1c474:	50015001                                .P.P

0001c478 <DefaultDrParamsAS>:
   1c478:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1c488:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1c498:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1c4a8:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001c4b8 <SubBandDutyCycle923>:
   1c4b8:	00000064                                d...

0001c4bc <SubBandParams923>:
   1c4bc:	35c36d80 37502800 00000000              .m.5.(P7....

0001c4c8 <pds_reg_as_item_list>:
   1c4c8:	2000144c 00200004 2000146c 25c00104     L.. .. .l.. ...%
   1c4d8:	20001406 ea010204                       ... ....

0001c4e0 <DefaultChannels915AU>:
   1c4e0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c4f0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c500:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c510:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c520:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c530:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c540:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c550:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1c560:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001c570 <DefaultDrParamsAU>:
   1c570:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1c580:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1c590:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1c5a0:	00f2003d 010908be 00000000 010a0000     =...............
   1c5b0:	00350007 01090c0c 00810005 01090b06     ..5.............
   1c5c0:	00f20007 01090a01 00f2000c 010909fe     ................
   1c5d0:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001c5e0 <pds_reg_au_item_list>:
   1c5e0:	2000151f 00010008 2000147c 06900108     ... ....|.. ....

0001c5f0 <AdvChannels433>:
   1c5f0:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1c600:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1c610:	ff0c0101                                ....

0001c614 <AdvChannels868>:
   1c614:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1c624:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1c634:	ff100101                                ....

0001c638 <DefaultChannels433>:
   1c638:	50015001 00005001                       .P.P.P..

0001c640 <DefaultChannels868>:
   1c640:	50015001 00005001                       .P.P.P..

0001c648 <DefaultDrparamsEU>:
   1c648:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1c658:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1c668:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1c678:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001c688 <SubBandDutyCycle868>:
   1c688:	006403e8 03e80064 0064000a              ..d.d.....d.

0001c694 <SubBandParams433>:
   1c694:	19cf0e40 19ea8580 00000000              @...........

0001c6a0 <SubBandParams868>:
   1c6a0:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1c6b0:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1c6c0:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1c6d0:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1c6e0:	33db2580 00000000                       .%.3....

0001c6e8 <pds_reg_eu868_fid1_item_list>:
   1c6e8:	2000144c 00200003 20001576 250c0103     L.. .. .v.. ...%

0001c6f8 <pds_reg_eu868_fid2_item_list>:
   1c6f8:	2000146c 00c0000b                       l.. ....

0001c700 <AdvChannels865>:
   1c700:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1c710:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1c720:	ff1e0100                                ....

0001c724 <DefaultChannels865>:
   1c724:	50015001 00005001                       .P.P.P..

0001c72c <DefaultDrParamsIN>:
   1c72c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1c73c:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1c74c:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1c75c:	00000000 010a0000 00f20008 000a00fe     ................

0001c76c <pds_reg_ind_item_list>:
   1c76c:	2000144c 00200006 2000146c 25c00106     L.. .. .l.. ...%

0001c77c <AdvChannels923JP>:
   1c77c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1c78c:	3709f740 ff100100                       @..7....

0001c794 <DefaultChannels923JP>:
   1c794:	50015001                                .P.P

0001c798 <DefaultDrParamsJP>:
   1c798:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1c7a8:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1c7b8:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1c7c8:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001c7d8 <SubBandDutyCycleJP923>:
   1c7d8:	00000064                                d...

0001c7dc <SubBandParamsJP923>:
   1c7dc:	36d61600 37502800 00000000              ...6.(P7....

0001c7e8 <pds_reg_jpn_fid1_item_list>:
   1c7e8:	2000144c 00200007 2000146c 25c00107     L.. .. .l.. ...%

0001c7f8 <AdvChannels920KR>:
   1c7f8:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1c808:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1c818:	ff0e0100                                ....

0001c81c <DefaultChannels920KR>:
   1c81c:	50015001 00005001                       .P.P.P..

0001c824 <DefaultDrParamsKR>:
   1c824:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1c834:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1c844:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001c854 <pds_reg_kr_fid1_item_list>:
   1c854:	2000144c 00200005 2000146c 25c00105     L.. .. .l.. ...%

0001c864 <DefaultChannels915>:
   1c864:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c874:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c884:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c894:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c8a4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c8b4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c8c4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c8d4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1c8e4:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0001c8f4 <DefaultDrParamsNA>:
   1c8f4:	000b0012 01070ac6 00350005 01070906     ..........5.....
   1c904:	007d0007 01070801 00f2000c 010707fe     ..}.............
   1c914:	00f20016 010908fc 00000000 010a0000     ................
   1c924:	00000000 010a0000 00000000 010a0000     ................
   1c934:	00350010 01090cbf 00810007 01090b06     ..5.............
   1c944:	00f20007 01090a01 00f2000c 010909fe     ................
   1c954:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001c964 <pds_reg_na_item_list>:
   1c964:	2000151f 00010002 2000147c 06900102     ... ....|.. ....
   1c974:	00006038 00006038 00006038 00006038     8`..8`..8`..8`..
   1c984:	0000609e 00006104 000060b6 0000609e     .`...a...`...`..
   1c994:	54200a0d 6f656d69 00007475              .. Timeout..

0001c9a0 <taskHandlers>:
   1c9a0:	0000a1e1 00011665 00010c5d 000094a9     ....e...].......
   1c9b0:	0000b649                                I...

0001c9b4 <tc_interrupt_vectors.13444>:
   1c9b4:	14131211 00000015 0000ab7c 0000ab8c     ........|.......
   1c9c4:	0000ab94 0000ab9c 0000aba4 0000abac     ................
   1c9d4:	0000abb4 0000abbc 0000abc4 0000ab84     ................
   1c9e4:	0000abdc 0000abd4 0000abdc 0000abcc     ................
   1c9f4:	0000ae0a 0000ae16 0000ae44 0000ae50     ........D...P...
   1ca04:	0000ae5c 0000aec6 0000ae92              \...........

0001ca10 <bandTable>:
   1ca10:	000000ff 6e550a0d 656c6261 206f7420     ......Unable to 
   1ca20:	72617473 65632074 66697472 74616369     start certificat
   1ca30:	206e6f69 656d6974 50202e72 6320736c     ion timer. Pls c
   1ca40:	6b636568 00000000 6c500a0d 65736165     heck......Please
   1ca50:	6c657320 20746365 20656e6f 7420666f      select one of t
   1ca60:	62206568 20646e61 65766967 6562206e     he band given be
   1ca70:	0d776f6c 00000000 36385545 00000038     low.....EU868...
   1ca80:	202e6425 0a0d7325 00000000 656c6553     %d. %s......Sele
   1ca90:	52207463 6f696765 206c616e 646e6142     ct Regional Band
   1caa0:	00203a20 2a0d0a0a 2a2a2a2a 2a2a2a2a      : ....*********
   1cab0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cac0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cad0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d0a2a2a     **************..
   1cae0:	00000000 6e490a0d 2d207469 63755320     ......Init - Suc
   1caf0:	73736563 0d6c7566 00000000 43414d0a     cessful......MAC
   1cb00:	72617020 74656d61 20737265 74696e69      parameters init
   1cb10:	696c6169 6974617a 66206e6f 656c6961     ialization faile
   1cb20:	000d0a64 2a2a2a0a 2a2a2a2a 2a2a2a2a     d....***********
   1cb30:	2a2a2a2a 2a2a2a2a 696f4a2a 6150206e     *********Join Pa
   1cb40:	656d6172 73726574 2a2a2a2a 2a2a2a2a     rameters********
   1cb50:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1cb60:	7665440a 20656369 72646441 00202d20     .Device Addr - .
   1cb70:	20646c25 00000d0a 7070410a 6163696c     %ld .....Applica
   1cb80:	6e6f6974 73655320 6e6f6973 79654b20     tion Session Key
   1cb90:	00202d20 74654e0a 6b726f77 73655320      - ..Network Ses
   1cba0:	6e6f6973 79654b20 00202d20 696f4a0a     sion Key - ..Joi
   1cbb0:	6170206e 656d6172 73726574 696e6920     n parameters ini
   1cbc0:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   1cbd0:	0d0a6465 00000000 7665440a 20656369     ed.......Device 
   1cbe0:	20495545 0000202d 7070410a 6163696c     EUI - ...Applica
   1cbf0:	6e6f6974 49554520 00202d20 7070410a     tion EUI - ..App
   1cc00:	6163696c 6e6f6974 79654b20 00202d20     lication Key - .
   1cc10:	41544f0a 6f4a2041 70206e69 6d617261     .OTAA Join param
   1cc20:	72657465 6e692073 61697469 617a696c     eters initializa
   1cc30:	6e6f6974 69616620 0a64656c 0000000d     tion failed.....
   1cc40:	696f4a0a 6552206e 73657571 65532074     .Join Request Se
   1cc50:	0d0a746e 00000000 6172460a 5320656d     nt.......Frame S
   1cc60:	3a746e65 00000000 202a2a2a 65636552     ent:....*** Rece
   1cc70:	64657669 204c4420 61746144 2a2a2a20     ived DL Data ***
   1cc80:	00000d0a 6172460a 5220656d 69656365     .....Frame Recei
   1cc90:	20646576 70207461 2074726f 0d0a6425     ved at port %d..
   1cca0:	00000000 6172460a 4c20656d 74676e65     .....Frame Lengt
   1ccb0:	202d2068 0d0a6425 00000000 6464410a     h - %d.......Add
   1ccc0:	73736572 30202d20 786c2578 00000d0a     ress - 0x%lx....
   1ccd0:	7961500a 64616f6c 0000203a 00007825     .Payload: ..%x..
   1cce0:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1ccf0:	2a2a2a2a 2a2a2a2a 0d2a2a2a 00000000     ***********.....
   1cd00:	65636552 64657669 4b434120 726f6620     Received ACK for
   1cd10:	6e6f4320 6d726966 64206465 0d617461      Confirmed data.
   1cd20:	00000000 414d0a0d 4f4e2043 2d20214b     ......MAC NOK! -
   1cd30:	00642520 6e617254 73696d73 6e6f6973      %d.Transmission
   1cd40:	63755320 73736563 0000000d 2a2a0d0a      Success......**
   1cd50:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cd60:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cd70:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
   1cd80:	0000000d 65540a0d 4d207473 2065646f     ......Test Mode 
   1cd90:	69746341 65746176 00000d64 696f4a0a     Activated....Joi
   1cda0:	676e696e 63755320 73736563 0a6c7566     ning Successful.
   1cdb0:	0000000d 4f525245 203a2052 62616e55     ....ERROR : Unab
   1cdc0:	7420656c 7473206f 20747261 74726543     le to start Cert
   1cdd0:	63696669 6f697461 6954206e 0d72656d     ification Timer.
   1cde0:	00000000 41544f0a 6f4a2041 52206e69     .....OTAA Join R
   1cdf0:	65757165 53207473 0a746e65 0000000d     equest Sent.....
   1ce00:	2a2a0d0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1ce10:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ce20:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ce30:	2a2a2a2a 2a2a2a2a 000d0a2a 00007830     *********...0x..
   1ce40:	78323025 00000000 726f6c0a 6e617761     %02x.....lorawan
   1ce50:	6375735f 73736563 00000d0a 726f6c0a     _success.....lor
   1ce60:	6e617761 6174735f 3a206574 61747320     awan_state : sta
   1ce70:	425f6b63 0a797375 0000000d 7665640a     ck_Busy......dev
   1ce80:	5f656369 5f746f6e 6e696f6a 745f6465     ice_not_joined_t
   1ce90:	656e5f6f 726f7774 000d0a6b 766e690a     o_network....inv
   1cea0:	64696c61 7261705f 74656d61 0d0a7265     alid_parameter..
   1ceb0:	00000000 79656b0a 6f6e5f73 6e695f74     .....keys_not_in
   1cec0:	61697469 657a696c 000d0a64 6c69730a     itialized....sil
   1ced0:	5f746e65 656d6d69 74616964 5f796c65     ent_immediately_
   1cee0:	69746361 0d0a6576 00000000 6172660a     active.......fra
   1cef0:	6f63656d 65746e75 72655f72 5f726f72     mecounter_error_
   1cf00:	6f6a6572 6e5f6e69 65646565 000d0a64     rejoin_needed...
   1cf10:	766e690a 64696c61 6675625f 5f726566     .invalid_buffer_
   1cf20:	676e656c 0d0a6874 00000000 43414d0a     length.......MAC
   1cf30:	7561705f 0a646573 0000000d 5f6f6e0a     _paused......no_
   1cf40:	65657266 6168635f 6c656e6e 6f665f73     free_channels_fo
   1cf50:	0a646e75 0000000d 7165720a 74736575     und......request
   1cf60:	766e695f 64696c61 00000d0a 6572700a     _invalid.....pre
   1cf70:	6f6a5f76 725f6e69 65757165 695f7473     v_join_request_i
   1cf80:	72705f6e 6572676f 0d0a7373 00000000     n_progress......
   1cf90:	7165720a 74736575 6961665f 2064656c     .request_failed 
   1cfa0:	0d0a6425 00000000 0000b850 0000b790     %d......P.......
   1cfb0:	0000b798 0000b7a0 0000b7a8 0000b7b0     ................
   1cfc0:	0000b7b8 0000b7c0 0000b72c 0000b7c8     ........,.......
   1cfd0:	0000b7d0 0000b7d8 0000b7e0 0000b7e8     ................
   1cfe0:	0000b7f0 0000b7f8 0000b800 0000b808     ................
   1cff0:	0000b810 0000b818 0000b820 0000b828     ........ ...(...
   1d000:	0000b876 0000b830 0000b838 0000b840     v...0...8...@...
   1d010:	0000b848 0000b8b0 0000b8b8 0000b8c0     H...............
   1d020:	0000b8c8 0000b8d0 0000b8e0 0000b8e8     ................
   1d030:	0000b8f0 0000b88c 0000b8f8 0000b900     ................
   1d040:	0000b908 0000b910 0000b918 0000b920     ............ ...
   1d050:	0000b928 0000b930 0000b938 0000b940     (...0...8...@...
   1d060:	0000b948 0000b950 0000b958 0000b980     H...P...X.......
   1d070:	0000b960 0000b968 0000b970 0000b978     `...h...p...x...
   1d080:	0000b8d8 0000bd8c 0000bd9c 0000bda4     ................
   1d090:	0000bdac 0000bdb4 0000bdbc 0000bdc4     ................
   1d0a0:	0000bdcc 0000bdd4 0000bd94 0000bdec     ................
   1d0b0:	0000bde4 0000bdec 0000bddc              ............

0001d0bc <appTaskHandlers>:
   1d0bc:	0000b31d 0000bf15 6c730a0d 5f706565     ..........sleep_
   1d0cc:	25206b6f 6d20646c 000a0d73              ok %ld ms...

0001d0d8 <bandStrings>:
   1d0d8:	0001dba0 0001ca78 0001dbb4 0001dbbc     ....x...........
   1d0e8:	0001dbc4 0001dbcc 0001dbd4 0001dbdc     ................
   1d0f8:	0001dbe4 0001dbf0 2e2e6425 00000000     ........%d......
   1d108:	41520d0a 5f4f4944 445f4f4e 20415441     ..RADIO_NO_DATA 
   1d118:	00000d0a 41520d0a 5f4f4944 41544144     ......RADIO_DATA
   1d128:	5a49535f 0d0a2045 00000000 41520d0a     _SIZE ........RA
   1d138:	5f4f4944 41564e49 5f44494c 20514552     DIO_INVALID_REQ 
   1d148:	00000d0a 41520d0a 5f4f4944 59535542     ......RADIO_BUSY
   1d158:	000d0a20 41520d0a 5f4f4944 5f54554f      .....RADIO_OUT_
   1d168:	525f464f 45474e41 000d0a20 41520d0a     OF_RANGE .....RA
   1d178:	5f4f4944 55534e55 524f5050 5f444554     DIO_UNSUPPORTED_
   1d188:	52545441 000d0a20 41520d0a 5f4f4944     ATTR .....RADIO_
   1d198:	4e414843 5f4c454e 59535542 000d0a20     CHANNEL_BUSY ...
   1d1a8:	574e0d0a 4f4e5f4b 4f4a5f54 44454e49     ..NWK_NOT_JOINED
   1d1b8:	000d0a20 4e490d0a 494c4156 41505f44      .....INVALID_PA
   1d1c8:	454d4152 20524554 00000d0a 454b0d0a     RAMETER ......KE
   1d1d8:	4e5f5359 495f544f 4954494e 5a494c41     YS_NOT_INITIALIZ
   1d1e8:	0a204445 0000000d 49530d0a 544e454c     ED .......SILENT
   1d1f8:	4d4d495f 41494445 594c4554 5443415f     _IMMEDIATELY_ACT
   1d208:	0a455649 0000000d 43460d0a 5f52544e     IVE.......FCNTR_
   1d218:	4f525245 45525f52 4e494f4a 45454e5f     ERROR_REJOIN_NEE
   1d228:	20444544 00000d0a 4e490d0a 494c4156     DED ......INVALI
   1d238:	55425f44 52454646 4e454c5f 20485447     D_BUFFER_LENGTH 
   1d248:	00000d0a 414d0d0a 41505f43 44455355     ......MAC_PAUSED
   1d258:	0d0a2020 00000000 4f4e0d0a 4148435f       ........NO_CHA
   1d268:	4c454e4e 4f465f53 20444e55 00000d0a     NNELS_FOUND ....
   1d278:	55420d0a 0d0a5953 00000000 4f4e0d0a     ..BUSY........NO
   1d288:	4b43415f 000d0a20 4c410d0a 44414552     _ACK .....ALREAD
   1d298:	4f4a2059 4e494e49 53492047 204e4920     Y JOINING IS IN 
   1d2a8:	474f5250 53534552 000d0a20 45520d0a     PROGRESS .....RE
   1d2b8:	52554f53 555f4543 4156414e 42414c49     SOURCE_UNAVAILAB
   1d2c8:	0a20454c 0000000d 4e490d0a 494c4156     LE .......INVALI
   1d2d8:	45525f44 53455551 0d0a2054 00000000     D_REQUEST ......
   1d2e8:	43460d0a 5f52544e 4f525245 0d0a2052     ..FCNTR_ERROR ..
   1d2f8:	00000000 494d0d0a 52455f43 20524f52     ......MIC_ERROR 
   1d308:	00000d0a 4e490d0a 494c4156 544d5f44     ......INVALID_MT
   1d318:	20455059 00000d0a 434d0d0a 5f545341     YPE ......MCAST_
   1d328:	5f524448 41564e49 2044494c 00000d0a     HDR_INVALID ....
   1d338:	7961500a 64616f6c 63655220 65766965     .Payload Receive
   1d348:	00203a64 4e4b4e55 204e574f 4f525245     d: .UNKNOWN ERRO
   1d358:	000d0a52 2078540a 656d6954 0a74756f     R....Tx Timeout.
   1d368:	0000000d 4e550d0a 574f4e4b 5245204e     ......UNKNOWN ER
   1d378:	0a524f52 0000000d 7665440a 72646441     ROR......DevAddr
   1d388:	7830203a 0a786c25 0000000d 6464410a     : 0x%lx......Add
   1d398:	73736572 6e6f6320 63696c66 65622074     ress conflict be
   1d3a8:	65657774 6544206e 65636976 64644120     tween Device Add
   1d3b8:	73736572 646e6120 6c754d20 61636974     ress and Multica
   1d3c8:	67207473 70756f72 64646120 73736572     st group address
   1d3d8:	00000d0a 696f4a0a 676e696e 6e654420     .....Joining Den
   1d3e8:	0a646569 0000000d 44202e31 206f6d65     ied.....1. Demo 
   1d3f8:	6c707061 74616369 0d6e6f69 00000000     application.....
   1d408:	43202e32 69747265 61636966 6e6f6974     2. Certification
   1d418:	70706120 6163696c 6e6f6974 0000000d      application....
   1d428:	53200a0d 63656c65 70412074 63696c70     .. Select Applic
   1d438:	6f697461 203a206e 00000000 2e310a0d     ation : ......1.
   1d448:	6e655320 6f4a2064 52206e69 65757165      Send Join Reque
   1d458:	000d7473 53202e32 20646e65 61746144     st..2. Send Data
   1d468:	0000000d 4d202e33 206e6961 756e654d     ....3. Main Menu
   1d478:	0000000d 4d202e34 50204341 65737561     ....4. MAC Pause
   1d488:	0000000d 4d202e35 52204341 6d757365     ....5. MAC Resum
   1d498:	00000d65 43202e36 69666e6f 65727567     e...6. Configure
   1d4a8:	64615220 000d6f69 53202e37 20646e65      Radio..7. Send 
   1d4b8:	69646152 6144206f 000d6174 45202e38     Radio Data..8. E
   1d4c8:	7265746e 64615220 52206f69 69656365     nter Radio Recei
   1d4d8:	6d206576 0d65646f 00000000 45202e39     ve mode.....9. E
   1d4e8:	20746978 69646152 6552206f 76696563     xit Radio Receiv
   1d4f8:	6f6d2065 000d6564 53202e30 7065656c     e mode..0. Sleep
   1d508:	0000000d 6e450a0d 20726574 72756f79     ......Enter your
   1d518:	6f686320 3a656369 00000020 6f727245      choice: ...Erro
   1d528:	54532072 20455441 65746e45 0d646572     r STATE Entered.
   1d538:	00000000 5f534c4d 5f4b4453 5f305f31     ....MLS_SDK_1_0_
   1d548:	00305f50 694d0d0a 636f7263 20706968     P_0...Microchip 
   1d558:	61526f4c 204e4157 63617453 7325206b     LoRaWAN Stack %s
   1d568:	00000a0d 7473614c 6e6f6320 75676966     ....Last configu
   1d578:	20646572 69676552 6c616e6f 6e616220     red Regional ban
   1d588:	73252064 00000a0d 73657250 6e612073     d %s....Press an
   1d598:	656b2079 6f742079 61686320 2065676e     y key to change 
   1d5a8:	646e6162 43200a0d 69746e6f 6e69756e     band.. Continuin
   1d5b8:	6e692067 20732520 00206e69 736e550a     g in %s in ..Uns
   1d5c8:	6f707075 64657472 76654420 20656369     upported Device 
   1d5d8:	65707954 00000d0a 696f4a0a 6552206e     Type.....Join Re
   1d5e8:	73657571 65532074 6620746e 2520726f     quest Sent for %
   1d5f8:	000d0a73 2a2a2a0a 2a2a2a2a 2a2a2a2a     s....***********
   1d608:	2a2a2a2a 6c707041 74616369 206e6f69     ****Application 
   1d618:	666e6f43 72756769 6f697461 2a2a2a6e     Configuration***
   1d628:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1d638:	7665440a 65707954 00203a20 53414c43     .DevType : .CLAS
   1d648:	0a412053 0000000d 53414c43 0a432053     S A.....CLASS C.
   1d658:	0000000d 7463410a 74617669 546e6f69     .....ActivationT
   1d668:	20657079 0000203a 4141544f 00000d0a     ype : ..OTAA....
   1d678:	6172540a 696d736e 6f697373 7954206e     .Transmission Ty
   1d688:	2d206570 00000020 4f434e55 5249464e     pe - ...UNCONFIR
   1d698:	0a44454d 0000000d 6f50460a 2d207472     MED......FPort -
   1d6a8:	0a642520 0000000d 2a2a2a0a 2a2a2a2a      %d......*******
   1d6b8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d6c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d6d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d6e8:	00000d0a 44500a0d 65525f53 726f7473     ......PDS_Restor
   1d6f8:	6f697461 6174536e 3a737574 63755320     ationStatus: Suc
   1d708:	73736563 0000000d 6e696f6a 74617453     cess....joinStat
   1d718:	203a7375 6e696f4a 000d6465 6e696f4a     us: Joined..Join
   1d728:	74617453 3a207375 6e654420 0d646569     Status : Denied.
   1d738:	00000000 646e6142 7325203a 00000a0d     ....Band: %s....
   1d748:	74736552 7461726f 206e6f69 6c696166     Restoration fail
   1d758:	000d6465 61656c50 65206573 7265746e     ed..Please enter
   1d768:	76206120 64696c61 6f686320 0d656369      a valid choice.
   1d778:	00000000 20746f4e 61762061 2064696c     ....Not a valid 
   1d788:	69676572 6c616e6f 6e616220 68632064     regional band ch
   1d798:	6563696f 0000000d 6d65540a 61726570     oice.....Tempera
   1d7a8:	65727574 0000003a 66312e25 2e252f43     ture:...%.1fC/%.
   1d7b8:	0a466631 00000000 66312e25 2f4320f8     1fF.....%.1f. C/
   1d7c8:	66312e25 0a4620f8 0000000d 2078540a     %.1f. F......Tx 
   1d7d8:	61746144 6e655320 000d2074 69766544     Data Sent ..Devi
   1d7e8:	6e206563 6a20746f 656e696f 6f742064     ce not joined to
   1d7f8:	65687420 74656e20 6b726f77 0000000d      the network....
   1d808:	6c730a0d 5f706565 5f746f6e 000d6b6f     ..sleep_not_ok..
   1d818:	414d0a0d 61502043 20657375 0d646c25     ..MAC Pause %ld.
   1d828:	0000000a 414d0a0d 65522043 656d7573     ......MAC Resume
   1d838:	0000000d 666e6f43 72756769 20676e69     ....Configuring 
   1d848:	69646152 6142206f 6977646e 3a687464     Radio Bandwidth:
   1d858:	35323120 0d7a486b 00000000 666e6f43      125kHz.....Conf
   1d868:	72756769 20676e69 6e616843 206c656e     iguring Channel 
   1d878:	71657246 636e6575 6c252079 000a0d64     Frequency %ld...
   1d888:	666e6f43 72756769 20676e69 6e616843     Configuring Chan
   1d898:	206c656e 71657246 636e6575 65442079     nel Frequency De
   1d8a8:	74616976 206e6f69 0d646c25 0000000a     viation %ld.....
   1d8b8:	666e6f43 72756769 20676e69 20435243     Configuring CRC 
   1d8c8:	74617473 25203a65 000a0d64 666e6f43     state: %d...Conf
   1d8d8:	72756769 20676e69 6f727245 6f432072     iguring Error Co
   1d8e8:	676e6964 74615220 2f342065 00000d35     ding Rate 4/5...
   1d8f8:	666e6f43 72756769 20676e69 49205149     Configuring IQ I
   1d908:	7265766e 3a646574 0d642520 0000000a     nverted: %d.....
   1d918:	666e6f43 72756769 20676e69 61526f4c     Configuring LoRa
   1d928:	6e797320 6f772063 30206472 0d782578      sync word 0x%x.
   1d938:	0000000a 666e6f43 72756769 20676e69     ....Configuring 
   1d948:	75646f4d 6974616c 203a6e6f 41524f4c     Modulation: LORA
   1d958:	0000000d 666e6f43 72756769 20676e69     ....Configuring 
   1d968:	42204150 74736f6f 6425203a 00000a0d     PA Boost: %d....
   1d978:	666e6f43 72756769 20676e69 69646152     Configuring Radi
   1d988:	754f206f 74757074 776f5020 25207265     o Output Power %
   1d998:	000a0d64 666e6f43 72756769 20676e69     d...Configuring 
   1d9a8:	69646152 4653206f 0d642520 0000000a     Radio SF %d.....
   1d9b8:	666e6f43 72756769 20676e69 69646152     Configuring Radi
   1d9c8:	6157206f 20686374 20676f44 656d6954     o Watch Dog Time
   1d9d8:	2074756f 0d646c25 0000000a 66667542     out %ld.....Buff
   1d9e8:	74207265 736e6172 7474696d 203a6465     er transmitted: 
   1d9f8:	00000000 69646152 7254206f 6d736e61     ....Radio Transm
   1da08:	53207469 65636375 000d7373 69646152     it Success..Radi
   1da18:	7542206f 000d7973 69646152 6e69206f     o Busy..Radio in
   1da28:	63655220 65766965 646f6d20 00000d65      Receive mode...
   1da38:	69646152 7845206f 52207469 69656365     Radio Exit Recei
   1da48:	6d206576 0d65646f 00000000 61766e49     ve mode.....Inva
   1da58:	2064696c 696f6863 65206563 7265746e     lid choice enter
   1da68:	000d6465 7070410a 73736553 4b6e6f69     ed...AppSessionK
   1da78:	3a207965 00000020 6b774e0a 73736553     ey : ....NwkSess
   1da88:	4b6e6f69 3a207965 00000020 7665440a     ionKey : ....Dev
   1da98:	20495545 0000203a 7070410a 20495545     EUI : ...AppEUI 
   1daa8:	0000203a 7070410a 2079654b 0000203a     : ...AppKey : ..
   1dab8:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1dac8:	746c754d 73616369 61502074 656d6172     Multicast Parame
   1dad8:	73726574 2a2a2a2a 2a2a2a2a 2a2a2a2a     ters************
   1dae8:	2a2a2a2a 2a2a2a2a 00000d0a 61634d0a     ********.....Mca
   1daf8:	70417473 73655370 6e6f6973 2079654b     stAppSessionKey 
   1db08:	0000203a 61634d0a 774e7473 7365536b     : ...McastNwkSes
   1db18:	6e6f6973 2079654b 0000203a 61634d0a     sionKey : ...Mca
   1db28:	72477473 4170756f 20726464 7830203a     stGroupAddr : 0x
   1db38:	0a786c25 0000000d 61634d0a 72477473     %lx......McastGr
   1db48:	4170756f 53726464 75746174 203a2073     oupAddrStatus : 
   1db58:	6c696146 0d0a6465 00000000 6c754d0a     Failed.......Mul
   1db68:	61636974 74537473 73757461 45203a20     ticastStatus : E
   1db78:	6c62616e 0d0a6465 00000000 6c754d0a     nabled.......Mul
   1db88:	61636974 74537473 73757461 46203a20     ticastStatus : F
   1db98:	656c6961 000d0a64 74636146 4479726f     ailed...FactoryD
   1dba8:	75616665 6552746c 00746573 3139414e     efaultReset.NA91
   1dbb8:	00000035 31395541 00000035 32395341     5...AU915...AS92
   1dbc8:	00000033 394e504a 00003332 3239524b     3...JPN923..KR92
   1dbd8:	00000030 38444e49 00003536 61656c43     0...IND865..Clea
   1dbe8:	44502072 00000053 65736552 6f422074     r PDS...Reset Bo
   1dbf8:	00647261 7473614c 73657220 63207465     ard.Last reset c
   1dc08:	65737561 0000203a 74737953 52206d65     ause: ..System R
   1dc18:	74657365 71655220 74736575 0000000d     eset Request....
   1dc28:	63746157 676f6468 73655220 000d7465     Watchdog Reset..
   1dc38:	65747845 6c616e72 73655220 000d7465     External Reset..
   1dc48:	776f7242 754f206e 33332074 74654420     Brown Out 33 Det
   1dc58:	6f746365 65522072 0d746573 00000000     ector Reset.....
   1dc68:	776f7242 754f206e 32312074 74654420     Brown Out 12 Det
   1dc78:	6f746365 65522072 0d746573 00000000     ector Reset.....
   1dc88:	65776f50 6e4f2d72 73655220 000d7465     Power-On Reset..

0001dc98 <FskSyncWordBuff>:
   1dc98:	01c194c1                                         ...

0001dc9b <macEndDevCmdReplyLen>:
   1dc9b:	02010201 01010203 0c0a0802                       .........

0001dca4 <maxEIRPTable>:
   1dca4:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001dcb4 <pds_mac_fid1_item_list>:
   1dcb4:	20001dae 00010000 20001dac 06010100     ... ....... ....
   1dcc4:	20001d40 0c040200 20001daf 15010300     @.. ....... ....
   1dcd4:	20001db0 1b040400 20001e00 24040500     ... ....... ...$
   1dce4:	20001ddc 2d040600 20001df0 36100700     ... ...-... ...6
   1dcf4:	20001de0 4b100800 20001dca 60040900     ... ...K... ...`
   1dd04:	20001d99 69010b00 20001d48 6f020a00     ... ...iH.. ...o
   1dd14:	20001d80 76020c00 20001d82 7d020d00     ... ...v... ...}
   1dd24:	20001d84 84020e00 20001d86 8b020f00     ... ....... ....
   1dd34:	20001d88 92021000 20001d8a 99021100     ... ....... ....
   1dd44:	20001d8c a0011200 20001d8d a6011300     ... ....... ....
   1dd54:	20001d92 b2011500 20001d91 ac011400     ... ....... ....
   1dd64:	20001d38 b8041600                       8.. ....

0001dd6c <pds_mac_fid2_item_list>:
   1dd6c:	20001d2e 00050001 20001da6 0a010101     ... ....... ....
   1dd7c:	20001ce4 10010201 20001ce5 16040301     ... ....... ....
   1dd8c:	20001ce9 1f100401 20001cf9 34100501     ... ....... ...4
   1dd9c:	20001d09 49100601 20001d19 5e080701     ... ...I... ...^
   1ddac:	20001d21 6b080801 20001d8e 78020901     !.. ...k... ...x
   1ddbc:	20001d3c 7f040a01 20001d34 88040b01     <.. ....4.. ....
   1ddcc:	20001d97 91010c01                       ... ....

0001ddd4 <lorawanHandlers>:
   1ddd4:	00010b41 00010a55 00010be5 000000fd     A...U...........

0001dde4 <radioTaskHandlers>:
   1dde4:	00012185 00012285 00011da9 00011905     .!..."..........
   1ddf4:	0001257d 000131a0 00013170 00013182     }%...1..p1...1..
   1de04:	000130c4 00013182 00013166 00013182     .0...1..f1...1..
   1de14:	000130c4 00013170 00013170 00013166     .0..p1..p1..f1..
   1de24:	000130c4 000130cc 000130cc 000130cc     .0...0...0...0..
   1de34:	00013188 00013170 00013170 00013144     .1..p1..p1..D1..
   1de44:	00013228 00013144 00013166 00013144     (2..D1..f1..D1..
   1de54:	00013228 00013170 00013170 00013166     (2..p1..p1..f1..
   1de64:	00013228 000130cc 000130cc 000130cc     (2...0...0...0..
   1de74:	00013232 00013520 00013470 00013470     22.. 5..p4..p4..
   1de84:	0001346e 00013512 00013512 00013508     n4...5...5...5..
   1de94:	0001346e 00013512 00013508 00013512     n4...5...5...5..
   1dea4:	0001346e 00013518 00013518 00013518     n4...5...5...5..
   1deb4:	000135a8 000142f0 000142d2 0001428c     .5...B...B...B..
   1dec4:	000141aa 0001428c 000142c4 0001428c     .A...B...B...B..
   1ded4:	000141aa 000142d2 000142d2 000142c4     .A...B...B...B..
   1dee4:	000141aa 000141a2 000141a2 000141a2     .A...A...A...A..
   1def4:	00014508 00014950 00014810 00014810     .E..PI...H...H..
   1df04:	0001480c 00014928 00014928 0001491a     .H..(I..(I...I..
   1df14:	0001480c 00014928 0001491a 00014928     .H..(I...I..(I..
   1df24:	0001480c 00014930 00014930 00014930     .H..0I..0I..0I..
   1df34:	00014b34                                4K..

0001df38 <_global_impure_ptr>:
   1df38:	200000d8 00016554 000165c8 000165c8     ... Te...e...e..
   1df48:	00016538 000165c8 000165c8 000165c8     8e...e...e...e..
   1df58:	000165c8 000165c8 000165c8 00016540     .e...e...e..@e..
   1df68:	00016022 000165c8 00015fdc 0001602c     "`...e..._..,`..
   1df78:	000165c8 00016078 00016262 00016262     .e..x`..bb..bb..
   1df88:	00016262 00016262 00016262 00016262     bb..bb..bb..bb..
   1df98:	00016262 00016262 00016262 000165c8     bb..bb..bb...e..
   1dfa8:	000165c8 000165c8 000165c8 000165c8     .e...e...e...e..
   1dfb8:	000165c8 000165c8 000165c8 000165c8     .e...e...e...e..
   1dfc8:	000165c8 00016080 000161c8 000165c8     .e...`...a...e..
   1dfd8:	000161c8 000165c8 000165c8 000165c8     .a...e...e...e..
   1dfe8:	000165c8 00016292 000165c8 000165c8     .e...b...e...e..
   1dff8:	0001629a 000165c8 000165c8 000165c8     .b...e...e...e..
   1e008:	000165c8 000165c8 0001633c 000165c8     .e...e..<c...e..
   1e018:	000165c8 0001636e 000165c8 000165c8     .e..nc...e...e..
   1e028:	000165c8 000165c8 000165c8 000165c8     .e...e...e...e..
   1e038:	000165c8 000165c8 000165c8 000165c8     .e...e...e...e..
   1e048:	00016468 0001649c 000161c8 000161c8     hd...d...a...a..
   1e058:	000161c8 000164ae 0001649c 000165c8     .a...d...d...e..
   1e068:	000165c8 000164b6 000165c8 000163d0     .e...d...e...c..
   1e078:	00016596 0001650c 00016406 000165c8     .e...e...d...e..
   1e088:	0001640e 000165c8 00016564 000165c8     .d...e..de...e..
   1e098:	000165c8 000164c6 00464e49 00666e69     .e...d..INF.inf.
   1e0a8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   1e0b8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   1e0c8:	37363534 62613938 66656463 00000000     456789abcdef....
   1e0d8:	6c756e28 0000296c                       (null)..

0001e0e0 <blanks.7223>:
   1e0e0:	20202020 20202020 20202020 20202020                     

0001e0f0 <zeroes.7224>:
   1e0f0:	30303030 30303030 30303030 30303030     0000000000000000
   1e100:	00017b1e 00017bf2 00017bf2 00017b0a     .{...{...{...{..
   1e110:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e120:	00017bf2 00017bf2 00017bc4 000176d6     .{...{...{...v..
   1e130:	00017bf2 000176cc 000176e0 00017bf2     .{...v...v...{..
   1e140:	00017b14 000178a0 000178a0 000178a0     .{...x...x...x..
   1e150:	000178a0 000178a0 000178a0 000178a0     .x...x...x...x..
   1e160:	000178a0 000178a0 00017bf2 00017bf2     .x...x...{...{..
   1e170:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e180:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e190:	00017bda 00017b2e 00017bf2 00017b2e     .{...{...{...{..
   1e1a0:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e1b0:	00017a94 00017bf2 00017bf2 00017a9e     .z...{...{...z..
   1e1c0:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e1d0:	00017bf2 00017acc 00017bf2 00017bf2     .{...z...{...{..
   1e1e0:	00017afa 00017bf2 00017bf2 00017bf2     .z...{...{...{..
   1e1f0:	00017bf2 00017bf2 00017bf2 00017bf2     .{...{...{...{..
   1e200:	00017bf2 00017bf2 00017bf2 000178e0     .{...{...{...x..
   1e210:	00017916 00017b2e 00017b2e 00017b2e     .y...{...{...{..
   1e220:	000179be 00017916 00017bf2 00017bf2     .y...y...{...{..
   1e230:	000179c8 00017bf2 000179da 00017bee     .y...{...y...{..
   1e240:	00017a08 00017a32 00017bf2 00017a3c     .z..2z...{..<z..
   1e250:	00017bf2 00017bea 00017bf2 00017bf2     .{...{...{...{..
   1e260:	0001772e                                .w..

0001e264 <blanks.7238>:
   1e264:	20202020 20202020 20202020 20202020                     

0001e274 <zeroes.7239>:
   1e274:	30303030 30303030 30303030 30303030     0000000000000000
   1e284:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   1e294:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   1e2a4:	00000000                                ....

0001e2a8 <__mprec_bigtens>:
   1e2a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1e2b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1e2c8:	7f73bf3c 75154fdd                       <.s..O.u

0001e2d0 <__mprec_tens>:
   1e2d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   1e2e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1e2f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1e300:	00000000 412e8480 00000000 416312d0     .......A......cA
   1e310:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1e320:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1e330:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1e340:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1e350:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1e360:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1e370:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1e380:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1e390:	79d99db4 44ea7843                       ...yCx.D

0001e398 <p05.6055>:
   1e398:	00000005 00000019 0000007d              ........}...

0001e3a4 <_ctype_>:
   1e3a4:	20202000 20202020 28282020 20282828     .         ((((( 
   1e3b4:	20202020 20202020 20202020 20202020                     
   1e3c4:	10108820 10101010 10101010 10101010      ...............
   1e3d4:	04040410 04040404 10040404 10101010     ................
   1e3e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1e3f4:	01010101 01010101 01010101 10101010     ................
   1e404:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1e414:	02020202 02020202 02020202 10101010     ................
   1e424:	00000020 00000000 00000000 00000000      ...............
	...

0001e4a8 <_init>:
   1e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4aa:	46c0      	nop			; (mov r8, r8)
   1e4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e4ae:	bc08      	pop	{r3}
   1e4b0:	469e      	mov	lr, r3
   1e4b2:	4770      	bx	lr

0001e4b4 <__init_array_start>:
   1e4b4:	00018d35 	.word	0x00018d35

0001e4b8 <__frame_dummy_init_array_entry>:
   1e4b8:	000000dd                                ....

0001e4bc <_fini>:
   1e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4be:	46c0      	nop			; (mov r8, r8)
   1e4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e4c2:	bc08      	pop	{r3}
   1e4c4:	469e      	mov	lr, r3
   1e4c6:	4770      	bx	lr

0001e4c8 <__fini_array_start>:
   1e4c8:	000000b5 	.word	0x000000b5
